{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "This is related to https://github.com/cython/cython/issues/4200#issuecomment-854050697:\r\n\r\n>> E.g quick search showed that cpython 3.10 uses it (`Py_TPFLAGS_HEAPTYPE`) to see if it should set `Py_TPFLAGS_IMMUTABLETYPE` (but also uses it other places):\r\n\r\n> That's possibly something we should fix. Although it's possibly not a huge moral problem whether types have mutable attributes or not - I don't think it's something that Cython has intentionally designed for, and it may well change with `CYTHON_USE_TYPE_SPECS`\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nI'm working on porting gevent to Python 3.10. gevent has python modules that support running in three ways: (1) pure Python on CPython; (2) pure Python on PyPy2 and PyPy3; and (3) compiled by Cython on CPython. I [had at least some code that relied on the compiled-by-Cython case being immutable](https://github.com/gevent/gevent/blob/f6658dd9608e90b5ec8338613d29cc4851cbe965/src/gevent/local.py#L572-L609). This code started doing the wrong thing under Python 3.10 when compiled with Cython 3.0a9 and master. (Its possible there's more code like that too, I just haven't found it yet.)\r\n\r\nI eventually realized that was the problem, and tracked down the mention of `Py_TPFLAGS_IMMUTABLE` in the [Python change log](https://docs.python.org/3.10/whatsnew/3.10.html#id1), and the corresponding [Python bug report](https://bugs.python.org/issue43908). But by inspection, it didn't seem to apply to my code, because I'm using static types, not heap types. I was surprised to eventually figure out what Cython was doing and why my types weren't immutable as expected.\r\n\r\nI can workaround this particular problem in a backwards compatible way, so I'm not blocked on this. But I figure if I was surprised, other projects might be surprised too.\r\n\r\n**Describe the solution you'd like**\r\n\r\nIdeally, I'd like my types to be immutable again under 3.10. The Python bug report lays out some reasons why that's good for built-in types, even heap types, and it prevents surprises or \"gratuitous\" behaviour differences when porting to 3.10.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI understand that types aren't guaranteed to be immutable if you opt in to `CYTHON_USE_TYPE_SPECS`, which is considered experimental. (But I don't do that and I don't want to support that.) However, I can understand if the Cython devs feel that's enough reason to make static types mutable in 3.10. \r\n\r\nIn that case, then may I suggest that this be clearly documented? Perhaps the Cython documentation could have a \"Porting to Python 3.10\" section that points out that all types will now be mutable?\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "For your specific case this seems like the right thing to do would be to use `cython.compiled` in Shadow.py:\r\n\r\n```\r\nclass C:\r\n   if not cython.compiled:\r\n    def __new__(...): \r\n```\r\n\r\nrather than patching it at runtime (which looks like it needs some awkward PyPy special-casing too).\r\n\r\n-----------------------------------------\r\n\r\nIn general, it's probably the right thing to do to keep them immutable.",
            "created_at": "2021-08-05T16:37:38Z",
            "html_url": "https://github.com/cython/cython/issues/4326#issuecomment-893601813",
            "id": 893601813,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4326",
            "node_id": "IC_kwDOABDGAc41Q0gV",
            "performed_via_github_app": null,
            "updated_at": "2021-08-05T16:37:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/893601813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the suggestion! gevent strives to keep its minimal requirements as small as possible and as such doesn't have a runtime dependency on Cython, just compile-time, so it's not clear that can actually work for us.\r\n\r\n(ETA: I think *maybe* it would? Because the \"real\" work is done in the Cython compiler, if we actually need to read that attribute we can assume we're in the pure-python mode, so something like \r\n```python\r\ntry: \r\n    import cython\r\nexcept ImportError: \r\n    class cython:\r\n        compiled = False\r\n```\r\nwould probably do it?)",
            "created_at": "2021-08-05T16:49:57Z",
            "html_url": "https://github.com/cython/cython/issues/4326#issuecomment-893609446",
            "id": 893609446,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4326",
            "node_id": "IC_kwDOABDGAc41Q2Xm",
            "performed_via_github_app": null,
            "updated_at": "2021-08-05T16:55:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/893609446",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "I managed to get the following to work on the current master branch: Which is pretty similar to your suggestion\r\n\r\n```\r\ntry:\r\n    import cython\r\n    cython_compiled = cython.compiled\r\nexcept ImportError:\r\n    cython_compiled = False\r\n\r\nif not cython_compiled:\r\n    def f():  # doesn't appear in the compiled module\r\n        pass\r\n```",
            "created_at": "2021-08-05T16:56:36Z",
            "html_url": "https://github.com/cython/cython/issues/4326#issuecomment-893613794",
            "id": 893613794,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4326",
            "node_id": "IC_kwDOABDGAc41Q3bi",
            "performed_via_github_app": null,
            "updated_at": "2021-08-05T16:56:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/893613794",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> In general, it's probably the right thing to do to keep them immutable.\r\n\r\nOne counter-suggestion. I'm not completely convinced by this but I'm just suggesting it as an alternative:\r\n* Cython 0.29 should keep cdef classes immutable (for compatibility reasons)\r\n* Cython 3.0.x could make them mutable where possible (i.e. Python 3.10, or with `CYTHON_USE_TYPE_SPECS` or similar). On the basis that 3.0.x is trying to close a lot of the incompatibilities with Python, and making classes mutable fits with that broad direction.\r\n\r\nIf we did that it should obviously be documented.",
            "created_at": "2021-08-05T17:00:16Z",
            "html_url": "https://github.com/cython/cython/issues/4326#issuecomment-893616234",
            "id": 893616234,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4326",
            "node_id": "IC_kwDOABDGAc41Q4Bq",
            "performed_via_github_app": null,
            "updated_at": "2021-08-05T17:00:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/893616234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "FWIW, I've always viewed the fact that `cdef` classes are immutable as an advantage. I use them in core parts of the implementation where changes by unsuspecting users could be dangerous (for example, I can rely on certain things never running arbitrary Python code that might trigger greenlet switches and invalidate assumptions). I can always just compile a regular class if that's not a problem. \r\n\r\nThat said, aside from the migration issues, I don't feel that strongly either way.",
            "created_at": "2021-08-05T17:15:20Z",
            "html_url": "https://github.com/cython/cython/issues/4326#issuecomment-893630968",
            "id": 893630968,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4326",
            "node_id": "IC_kwDOABDGAc41Q7n4",
            "performed_via_github_app": null,
            "updated_at": "2021-08-05T17:15:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/893630968",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4326/comments",
    "created_at": "2021-08-05T13:39:11Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            },
            "commit_id": "5112e05ff094b72b8744fe9e203cc15ebe8cbb10",
            "commit_url": "https://api.github.com/repos/gevent/gevent/commits/5112e05ff094b72b8744fe9e203cc15ebe8cbb10",
            "created_at": "2021-08-05T14:27:45Z",
            "event": "referenced",
            "id": 5117861941,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMTc4NjE5NDE=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5117861941"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4326/events",
    "html_url": "https://github.com/cython/cython/issues/4326",
    "id": 961838721,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4326/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5NjE4Mzg3MjE=",
    "number": 4326,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[ENH] Make types immutable under 3.10 again, or document that they won't be",
    "updated_at": "2021-08-05T17:15:20Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4326",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1256082?v=4",
        "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
        "followers_url": "https://api.github.com/users/jamadden/followers",
        "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
        "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jamadden",
        "id": 1256082,
        "login": "jamadden",
        "node_id": "MDQ6VXNlcjEyNTYwODI=",
        "organizations_url": "https://api.github.com/users/jamadden/orgs",
        "received_events_url": "https://api.github.com/users/jamadden/received_events",
        "repos_url": "https://api.github.com/users/jamadden/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jamadden"
    }
}