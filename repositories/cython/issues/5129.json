{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Is your feature request related to a problem? Please describe.\n\nI would like to be able to take a C++ class\r\n\r\n```cython\r\ncdef extern from \"foo.h\":\r\n    cppclass Base:\r\n        Base(int i)  # only constructor\r\n```\r\nand create a derived class in Cython\r\n\r\n```cython\r\ncdef public cppclass Child(Base):\r\n    __init__():\r\n        pass\r\n```\r\n\r\nTo do this, we must initialize the base class using its constructor\r\n```c++\r\nclass Child : public Base {\r\n    Child() : Base(10) {\r\n        // ...\r\n    }\r\n};\r\n```\r\n\r\nbut Cython does not currently provide any way to supply an initializer list.\n\n### Describe the solution you'd like.\n\nI would like to be able to call base class constructors like\r\n\r\n```cython\r\ncdef cppclass MyCppClass(Base1, Base2):\r\n    __init__(Foo* x) : Base1(10), Base2(x, NULL, 30):\r\n        pass\r\n```\n\n### Describe alternatives you've considered.\n\nI describe calling constructors. C++ allows initializer lists for data members as well. The biggest usefulness of this is the initialization of const members, which Cython does not necessarily have use for. (I don't know the current state of const in Cython; I haven't used Cython much in a few years -- const support used to be completely missing, but there is at least some support now, I see.)\r\n\r\nI propose a syntax mimicking the C++ initializer list syntax. There are arbitrarily many other approaches, such as\r\n\r\n 1. using a `super`-based syntax,\r\n     - This is somewhat tempting in that it looks more like Python, but I don't believe it's a nice approach. It doesn't have a clear behavior in the face of multiple inheritance and it could add conufusion about *when* the initialization occurs. The `super`(s) should be required to the first line(s) of the body to avoid initialization in a different order than written, but that would be awkwardly brittle\r\n 2. using a decorator\r\n     - this would be less syntactically disruptive, but is rather inelegant, especially in cases where the initializer should reference function args `__init__(self, int qux) : BaseClass(qux)` -- as a decorator you would need to allow referencing the argument before the parameter is even defined.\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I started sketching up a way to do this at https://github.com/cython/cython/compare/master...mikegraham:cython:initializer_lists and it looks doable. If you're interested in a contribution adding this feature, I'd be interested to learn your requirements and preferred approach\r\n\r\nThe above is really incomplete, but can compile a test case like\r\n```cython\r\ncdef extern from *:\r\n    \"\"\"\r\n    class Base {\r\n      public:\r\n        Base(int, int) {\r\n        }\r\n    };\r\n    \"\"\"\r\n    cppclass Base:\r\n        __init__(int, int)\r\n\r\ncdef public cppclass Child(Base):\r\n    __init__(int bar) : Base(2, 3):\r\n        pass\r\n```",
            "created_at": "2022-11-15T18:33:49Z",
            "html_url": "https://github.com/cython/cython/issues/5129#issuecomment-1315713137",
            "id": 1315713137,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5129",
            "node_id": "IC_kwDOABDGAc5ObDBx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1315713137/reactions"
            },
            "updated_at": "2022-11-15T18:35:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1315713137",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/233655?v=4",
                "events_url": "https://api.github.com/users/mikegraham/events{/privacy}",
                "followers_url": "https://api.github.com/users/mikegraham/followers",
                "following_url": "https://api.github.com/users/mikegraham/following{/other_user}",
                "gists_url": "https://api.github.com/users/mikegraham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mikegraham",
                "id": 233655,
                "login": "mikegraham",
                "node_id": "MDQ6VXNlcjIzMzY1NQ==",
                "organizations_url": "https://api.github.com/users/mikegraham/orgs",
                "received_events_url": "https://api.github.com/users/mikegraham/received_events",
                "repos_url": "https://api.github.com/users/mikegraham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mikegraham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mikegraham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mikegraham"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think this was part of an old PR (https://github.com/cython/cython/pull/2951/files) which I think largely got outdated because it was huge - we've been gradually cherry-picking some of the best bits out of it.\r\n\r\nThey proposed the syntax below:\r\n\r\n```\r\ncdef cppclass DefinedDerived(DefinedBase):\r\n    __init__(int a):\r\n        DefinedBase.__init__(a)\r\n```\r\n\r\nThat'd probably be my preference for syntax (with some enforcement that the base classes are initialized before anything else, which I don't know if that PR does or not) - I'm personally not keen on needing to change the parser to add new C++-like syntax.\r\n\r\nI agree with you that `super` isn't very obvious for something that's fundamentally static. I hadn't considered using a decorator but agree with your objections.\r\n\r\nIt definitely seems a reasonable feature to add. I'm a bit wary of trying to replicate every C++ feature in Cython but I think this one is the right side of the line.",
            "created_at": "2022-11-15T18:48:29Z",
            "html_url": "https://github.com/cython/cython/issues/5129#issuecomment-1315726461",
            "id": 1315726461,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5129",
            "node_id": "IC_kwDOABDGAc5ObGR9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1315726461/reactions"
            },
            "updated_at": "2022-11-15T18:57:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1315726461",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Do you have any thoughts on the implementation approach?\r\n\r\nCurrently the C++ constructor is generated as part of the class definition and the body of the Cython-defined constructor is a regular method the C++ constructor calls; that regular method is defined along with the rest of the methods (not at the same point as the class definition). Do you have a sense of where best to put the logic and how to flow through the data?  (I think it might make sense to change the approach and switch to just declaring the C++ constructor in the body, then implementing it later on along with the rest of the methods)",
            "created_at": "2022-11-16T04:47:57Z",
            "html_url": "https://github.com/cython/cython/issues/5129#issuecomment-1316339640",
            "id": 1316339640,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5129",
            "node_id": "IC_kwDOABDGAc5Odb-4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1316339640/reactions"
            },
            "updated_at": "2022-11-16T04:47:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1316339640",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/233655?v=4",
                "events_url": "https://api.github.com/users/mikegraham/events{/privacy}",
                "followers_url": "https://api.github.com/users/mikegraham/followers",
                "following_url": "https://api.github.com/users/mikegraham/following{/other_user}",
                "gists_url": "https://api.github.com/users/mikegraham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mikegraham",
                "id": 233655,
                "login": "mikegraham",
                "node_id": "MDQ6VXNlcjIzMzY1NQ==",
                "organizations_url": "https://api.github.com/users/mikegraham/orgs",
                "received_events_url": "https://api.github.com/users/mikegraham/received_events",
                "repos_url": "https://api.github.com/users/mikegraham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mikegraham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mikegraham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mikegraham"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5129/comments",
    "created_at": "2022-11-15T05:17:30Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5129/events",
    "html_url": "https://github.com/cython/cython/issues/5129",
    "id": 1449183225,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5129/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5WYMf5",
    "number": 5129,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5129/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5129/timeline",
    "title": "[ENH] Support initializer lists for C++ classes",
    "updated_at": "2022-11-16T04:47:57Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5129",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/233655?v=4",
        "events_url": "https://api.github.com/users/mikegraham/events{/privacy}",
        "followers_url": "https://api.github.com/users/mikegraham/followers",
        "following_url": "https://api.github.com/users/mikegraham/following{/other_user}",
        "gists_url": "https://api.github.com/users/mikegraham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mikegraham",
        "id": 233655,
        "login": "mikegraham",
        "node_id": "MDQ6VXNlcjIzMzY1NQ==",
        "organizations_url": "https://api.github.com/users/mikegraham/orgs",
        "received_events_url": "https://api.github.com/users/mikegraham/received_events",
        "repos_url": "https://api.github.com/users/mikegraham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mikegraham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mikegraham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mikegraham"
    }
}