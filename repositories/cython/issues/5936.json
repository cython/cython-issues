{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\r\n\r\nI've been working with Cython for a while and recently started working with C++ and wrapping C++ with Cython. I'm building a class that holds some pointers that are then dynamically allocated inside the constructor and have had some problems regarding memory management (lots of double free, corruption, invalid pointer and segfault errors).  After some experimenting I've found some minimal code to reproduce this bug.  Below you can see my layer.hpp, layer.cpp, mlodecl.pxd, mlo.pyx and setup.py files that produced his error.\r\n\r\n### Code to reproduce the behaviour:\r\n\r\n```layer.hpp\r\n\r\n#ifndef LAYER_H\r\n#define LAYER_H\r\n\r\nclass layer{\r\n\r\npublic:\r\n    int nodes;\r\n    float* h; //auxiliary field\r\n    float* mean; //mean of a layer\r\n\r\n    ~layer();\r\n    layer();\r\n    layer(int);\r\n\r\n    bool isNull();\r\n};\r\n\r\n#endif\r\n```\r\n\r\n```layer.cpp\r\n\r\n#include \"layer.hpp\"\r\n\r\nlayer::layer(){}\r\n\r\nlayer::layer(int nodes){\r\n    this->nodes = nodes;\r\n    this->h = new float[nodes];\r\n}\r\n\r\nlayer::~layer(){\r\n    if (this->h!=nullptr)\r\n        delete[] this->h;\r\n}\r\n\r\nbool layer::isNull(){\r\n    if (this->h==nullptr)\r\n        return true;\r\n    return false;\r\n}\r\n```\r\n\r\n```mlo.pyx\r\n\r\ncimport mlodecl as ml\r\ncimport cython\r\n\r\n\r\ncdef class Layer:\r\n\r\n    cdef ml.layer L\r\n\r\n    def __init__(self, int nodes):\r\n        self.L = ml.layer(nodes)\r\n        if self.L.isNull():\r\n            raise Exception(\"Failed to allocate memory\")\r\n\r\n    @property\r\n    def numNodes(self):\r\n        return self.L.nodes\r\n```\r\n\r\n```mlodecl.pxd\r\n\r\ncdef extern from \"cfiles/layer.hpp\":\r\n\r\n    cdef cppclass layer:\r\n        int nodes\r\n        float* h\r\n\r\n        layer()\r\n        layer(int)\r\n\r\n        bint isNull()\r\n```\r\n```setup.py\r\n\r\nfrom setuptools import setup, Extension\r\nfrom Cython.Build import cythonize\r\nimport numpy as np\r\nimport os\r\n\r\nsourcefiles = [\"mlo.pyx\",\"cfiles/layer.cpp\"]\r\n\r\nos.environ[\"CXX\"] = \"g++\"\r\n\r\next = Extension('miolo', sourcefiles, language=\"c++\",\r\n        extra_compile_args=['-fopenmp','-lm'],\r\n        extra_link_args=['-fopenmp'],\r\n        library_dirs=[\"/usr/lib/gcc/x86_64-linux-gnu/12\"],\r\n        libraries=[\"gomp\"],\r\n        include_dirs=[np.get_include()])\r\n\r\nsetup(ext_modules=cythonize(ext))\r\n```\r\n\r\n\r\n\r\n### Expected behaviour\r\n\r\nBasically, allocation and deallocation without errors can only be done if my Layer C++ attribute is made a pointer and then dynamically allocated using new, which also requires a __dealloc__ method. But when I do it inside only an __init__ method (stack allocated object), it seems memory allocation is fine, but when I close Python I get a double free or corruption (top).  If I change the cdef ml.Layer to cdef ml.Layer* and add the appropriate dealloc method, the problem vanishes.\r\n\r\n### OS\r\n\r\nDebian 12\r\n\r\n### Python version\r\n\r\n3.11.2\r\n\r\n### Cython version\r\n\r\n3.0.7\r\n\r\n### Additional context\r\n\r\nI was also having problems with the __init__ method previously (double free when initializing in Python). This disappeared when I removed the except+ in the declaration of constructors inside my pxd file.",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5936/comments",
    "created_at": "2024-01-03T14:41:49Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5936/events",
    "html_url": "https://github.com/cython/cython/issues/5936",
    "id": 2064152031,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5936/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc57CHXf",
    "number": 5936,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5936/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5936/timeline",
    "title": "[BUG]  Memory Allocation with C++",
    "updated_at": "2024-01-03T14:45:51Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5936",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/6207221?v=4",
        "events_url": "https://api.github.com/users/boureau93/events{/privacy}",
        "followers_url": "https://api.github.com/users/boureau93/followers",
        "following_url": "https://api.github.com/users/boureau93/following{/other_user}",
        "gists_url": "https://api.github.com/users/boureau93/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/boureau93",
        "id": 6207221,
        "login": "boureau93",
        "node_id": "MDQ6VXNlcjYyMDcyMjE=",
        "organizations_url": "https://api.github.com/users/boureau93/orgs",
        "received_events_url": "https://api.github.com/users/boureau93/received_events",
        "repos_url": "https://api.github.com/users/boureau93/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/boureau93/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/boureau93/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/boureau93"
    }
}