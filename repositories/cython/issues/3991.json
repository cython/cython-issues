{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!--\r\n**Note:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report. Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\nCython's current [array](https://cython.readthedocs.io/en/latest/src/tutorial/array.html) offerings are too sparse at the moment.\r\n\r\n```\r\nopen arraym\r\ninl main() =\r\n    inl x : array (i32 * i32) = arraym.create 10 \r\n    arraym.set x 0 (1,2)\r\n```\r\n```\r\ncdef class Tuple0:\r\n    cdef readonly signed long v0\r\n    cdef readonly signed long v1\r\n    def __init__(self, signed long v0, signed long v1): self.v0 = v0; self.v1 = v1\r\ncpdef void main():\r\n    cdef list v0\r\n    v0 = [None] * 10\r\n    v0[0] = Tuple0(1, 2)\r\n```\r\n\r\nThe way I am currently compiling Spiral arrays to Python lists is the least efficient possible way that I can imagine of doing it.\r\n\r\nAt a later point, I could compile primitive types to Python's efficient [array](https://docs.python.org/3/library/array.html)s. But those don't work for objects, and will not work for [tuples](https://github.com/cython/cython/issues/3985). Cython would be better as a compilation target if it had a clean way of compiling arrays.\r\n\r\nFor Spiral, I'd put this as being of roughly equal importance to discriminated stack unions, but I'd guess the array feature would be easier to implement.",
    "closed_at": "2021-01-30T11:06:54Z",
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "A couple of thoughts:\r\n\r\n1. Numpy arrays do support `dtype=object` and I think you can then view them with an `object[:]` Cython memoryview.\r\n2. When you think about how you'd implemented such an array in Cython, it ends up looking remarkably like a Python list or a tuple. Provided that you tell Cython that `v0` is a `list` then indexing it is really quite efficient and the custom type would probably struggle to do better.",
            "created_at": "2021-01-29T17:40:01Z",
            "html_url": "https://github.com/cython/cython/issues/3991#issuecomment-769947489",
            "id": 769947489,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3991",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTk0NzQ4OQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-29T17:40:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/769947489",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Provided that you tell Cython that v0 is a list then indexing it is really quite efficient and the custom type would probably struggle to do better.\r\n\r\nIt is good to know that indexing into them is efficient, but `list` can only hold heap allocated `object`s. Any tuples stored into them would have to be heap allocated. Typed heterogenous arrays would allow for arbitrarily sized elements rather than the 8 bytes it would take to store a object.\r\n\r\nMemory views are close to this, but I've only seen them derived from `array` types which are limited in their selection. Numpy arrays would likely have the same problem of not having tuples.\r\n\r\n> [None] * 10\r\n\r\nAs an aside, I really do need a better way of creating an empty array that this. I looked for a solution for how to create an empty list of fixed size, but this is what I found in a SO post. I just know that Python will start this at 1 element and then do a loop to append the `None`s. This is just nasty; who knows how many resizes will this involve. Do you have advice how I could improve this?\r\n\r\nI really should fix this, but I do not want to import Numpy just to get primitive object array functionality.",
            "created_at": "2021-01-29T18:04:46Z",
            "html_url": "https://github.com/cython/cython/issues/3991#issuecomment-769960401",
            "id": 769960401,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3991",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTk2MDQwMQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-29T18:04:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/769960401",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
                "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrakgr/followers",
                "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrakgr",
                "id": 6266635,
                "login": "mrakgr",
                "node_id": "MDQ6VXNlcjYyNjY2MzU=",
                "organizations_url": "https://api.github.com/users/mrakgr/orgs",
                "received_events_url": "https://api.github.com/users/mrakgr/received_events",
                "repos_url": "https://api.github.com/users/mrakgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrakgr"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "Ah - I may have misunderstood. It sounds like you want something more like a [Numpy structured array](https://numpy.org/doc/stable/user/basics.rec.html#module-numpy.doc.structured_arrays) - which you can then access as a memoryview of packed structs. It's not well-documented but see https://stackoverflow.com/questions/48320410/correct-usage-of-numpy-recarrays-as-c-structarrays-in-cython for example. Improvements to documentation are always welcome: https://github.com/cython/cython/issues/855. For memoryview access they do have to be purely C-types though. ",
            "created_at": "2021-01-29T18:32:07Z",
            "html_url": "https://github.com/cython/cython/issues/3991#issuecomment-769974647",
            "id": 769974647,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3991",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTk3NDY0Nw==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-29T18:32:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/769974647",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Typed heterogenous arrays \r\n\r\nI mean to write homogenous here.\r\n\r\n> For memoryview access they do have to be purely C-types though.\r\n\r\nNot good enough, I want the all the types to be first class. Right now neither tuples nor structs can be composed with Python objects.\r\n\r\n```\r\nopen arraym\r\ninl main() =\r\n    inl x : array (i32 * i32) = arraym.create 10 \r\n    arraym.set x 0 (1,2)\r\n```\r\n```fs\r\nlet v0 : (struct (int32 * int32) []) = Array.zeroCreate<struct (int32 * int32)> 10\r\nv0.[0] <- struct (1, 2)\r\n```\r\n\r\nHere is the same example as before on the F# backend. What I want is just the same as a regular .NET array that can hold arbitrary types, not just primitive ones. In fact, plain C arrays are the most similar to these, but they lack the memory management capability. .NET has them as a primitive for exactly that reason, so that the GC knows what they are.\r\n\r\n---\r\n\r\nActually, I have an idea. Your links jogged my mind. For some reason it did not occur to me previously, but this is an ideal situation to use Spiral's [inverse arrays](https://github.com/mrakgr/The-Spiral-Language#real-nominals).\r\n\r\nInstead of having an `array (i32 * f32 * object)`, I can compile those as `array i32 * array f32 * array object`. That will separate out the primitives from the objects. I should have thought of this right away, but when I saw that Python's `array` module did not have `object` arrays I just stopped thinking about it. I think I am going to reimplement Spiral's Cython arrays in terms of Numpy arrays and use the struct-of-arrays form to get the required efficiency.",
            "created_at": "2021-01-29T19:18:23Z",
            "html_url": "https://github.com/cython/cython/issues/3991#issuecomment-769998045",
            "id": 769998045,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3991",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTk5ODA0NQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-29T19:18:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/769998045",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
                "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrakgr/followers",
                "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrakgr",
                "id": 6266635,
                "login": "mrakgr",
                "node_id": "MDQ6VXNlcjYyNjY2MzU=",
                "organizations_url": "https://api.github.com/users/mrakgr/orgs",
                "received_events_url": "https://api.github.com/users/mrakgr/received_events",
                "repos_url": "https://api.github.com/users/mrakgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrakgr"
            }
        },
        {
            "author_association": "NONE",
            "body": "https://cython.readthedocs.io/en/latest/src/tutorial/numpy.html#efficient-indexing\r\n\r\n```\r\ncdef np.ndarray[DTYPE_t, ndim=2] h = ...\r\n```\r\n\r\nI had no idea it was possible to specify the type of a Numpy array at compile-time like this. I made a mistake to use lists. Numpy arrays are what the primitive Spiral arrays should compile to. I'll fix this tomorrow.",
            "created_at": "2021-01-29T21:37:21Z",
            "html_url": "https://github.com/cython/cython/issues/3991#issuecomment-770063851",
            "id": 770063851,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3991",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDA2Mzg1MQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-29T21:37:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/770063851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
                "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrakgr/followers",
                "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrakgr",
                "id": 6266635,
                "login": "mrakgr",
                "node_id": "MDQ6VXNlcjYyNjY2MzU=",
                "organizations_url": "https://api.github.com/users/mrakgr/orgs",
                "received_events_url": "https://api.github.com/users/mrakgr/received_events",
                "repos_url": "https://api.github.com/users/mrakgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrakgr"
            }
        },
        {
            "author_association": "NONE",
            "body": "```fs\r\nopen arraym\r\ninl main() =\r\n    inl x : array (i32 * i32) = arraym.create 10 \r\n    arraym.set x 0 (1,2)\r\n```\r\n```\r\nimport numpy\r\ncimport numpy\r\ncdef class Tuple0:\r\n    cdef readonly signed long v0\r\n    cdef readonly signed long v1\r\n    def __init__(self, signed long v0, signed long v1): self.v0 = v0; self.v1 = v1\r\ncpdef void main():\r\n    cdef numpy.ndarray[object,ndim=1] v0\r\n    v0 = numpy.empty(10,dtype=object)\r\n    v0[0] = Tuple0(1, 2)\r\n```\r\n```\r\nopen arraym\r\ninl main() =\r\n    inl x : array f32 = arraym.create 10 \r\n    arraym.set x 0 3\r\n```\r\n```\r\nimport numpy\r\ncimport numpy\r\ncpdef void main():\r\n    cdef numpy.ndarray[float,ndim=1] v0\r\n    v0 = numpy.empty(10,dtype=numpy.float32)\r\n    v0[0] = 3.000000\r\n```\r\n\r\nThis is definitely an improvement on what I had before. Numpy arrays can be typed at compile time, though they only support objects, structs and primitives. Too bad I could not set its type as `Tuple0` in that first example. I'll put in inverse arrays into the core library at a later date.\r\n\r\nAt any rate, this request still stands. I did run into [trouble](https://stackoverflow.com/questions/14657375/cython-fatal-error-numpy-arrayobject-h-no-such-file-or-directory) trying to import Numpy, which would not have happened if Cython had its own primitive arrays. This demonstrates the danger of using outside libraries for key primitives.",
            "created_at": "2021-01-30T09:55:42Z",
            "html_url": "https://github.com/cython/cython/issues/3991#issuecomment-770186477",
            "id": 770186477,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3991",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDE4NjQ3Nw==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-30T09:55:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/770186477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
                "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrakgr/followers",
                "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrakgr",
                "id": 6266635,
                "login": "mrakgr",
                "node_id": "MDQ6VXNlcjYyNjY2MzU=",
                "organizations_url": "https://api.github.com/users/mrakgr/orgs",
                "received_events_url": "https://api.github.com/users/mrakgr/received_events",
                "repos_url": "https://api.github.com/users/mrakgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrakgr"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "Cython does actually have it's own array type: https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#view-cython-arrays (although it's full capabilities aren't documented in that much detail). It supports primitive types, structs (try `format='dd` or similar) and objects (`format=O`).\r\n\r\nIf you want to use specific cdef classes then you can use an array with dtype object and view it with a memoryview of type `Tuple0`. You're responsible for making sure that it's only filled with the type that you say it is though.\r\n\r\nI'm going to close this because I think we do actually have most of what you want already (now that i understand what you want).\r\nQuestions of *how* you use this feature are better directed to the cython-users mailing list rather than the bug-tracker.",
            "created_at": "2021-01-30T11:06:54Z",
            "html_url": "https://github.com/cython/cython/issues/3991#issuecomment-770195299",
            "id": 770195299,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3991",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDE5NTI5OQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-30T11:06:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/770195299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yeah, that does seem what I want. I'll mark this as solved.",
            "created_at": "2021-01-30T12:52:17Z",
            "html_url": "https://github.com/cython/cython/issues/3991#issuecomment-770207980",
            "id": 770207980,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3991",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDIwNzk4MA==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-30T12:52:17Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/770207980",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
                "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrakgr/followers",
                "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrakgr",
                "id": 6266635,
                "login": "mrakgr",
                "node_id": "MDQ6VXNlcjYyNjY2MzU=",
                "organizations_url": "https://api.github.com/users/mrakgr/orgs",
                "received_events_url": "https://api.github.com/users/mrakgr/received_events",
                "repos_url": "https://api.github.com/users/mrakgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrakgr"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3991/comments",
    "created_at": "2021-01-29T14:50:39Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-01-30T11:06:54Z",
            "event": "closed",
            "id": 4269013623,
            "node_id": "MDExOkNsb3NlZEV2ZW50NDI2OTAxMzYyMw==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4269013623"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3991/events",
    "html_url": "https://github.com/cython/cython/issues/3991",
    "id": 796942666,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3991/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU3OTY5NDI2NjY=",
    "number": 3991,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "[ENH] Fixed arrays that support tuples",
    "updated_at": "2021-01-30T12:52:17Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3991",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
        "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
        "followers_url": "https://api.github.com/users/mrakgr/followers",
        "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
        "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mrakgr",
        "id": 6266635,
        "login": "mrakgr",
        "node_id": "MDQ6VXNlcjYyNjY2MzU=",
        "organizations_url": "https://api.github.com/users/mrakgr/orgs",
        "received_events_url": "https://api.github.com/users/mrakgr/received_events",
        "repos_url": "https://api.github.com/users/mrakgr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mrakgr"
    }
}