{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nType annotations for global names are currently ignored. The following uses dict lookups in the global module namespace to do its calculation:\r\n```cython\r\nPI: cython.double = 3.141\r\nglobal_name: cython.long = 42\r\n\r\ndef calc():\r\n    return PI * global_name\r\n```\r\nIt's relatively clear that this is not intended. The code uses C type annotations that lets me expect efficient C access to the globals.\r\n\r\nThis has been noticed and reported several times in the past, e.g. recently [here](https://groups.google.com/d/msgid/cython-users/860cd380-2a3a-40e6-aeeb-c6eae1abf7d8n%40googlegroups.com).\r\n\r\nFor C/Cython-typed globals, it seems clear that C typed globals are expected. As it stands, those would currently not be visible from Python code using the module.\r\nFor Python object typed globals, the intention is less clear. Users might expect Python type annotation behaviour and declare module constants that way, or they might expect Cython typing behaviour and type C globals.\r\n\r\n### Describe the solution you'd like.\r\n\r\nGiven that `__getattr__()` now exists for modules ([PEP-562](https://peps.python.org/pep-0562/)), which was added in Py3.7, it seems reasonable to make all type annotated globals C globals and add an auto-implementation for `__getattr__()` if the module does not provide it itself. The function would then return the values of type annotated module globals on request, possibly applying the required type conversions to Python types.\r\n\r\nWe could make this depend on `__all__` being available at compile time (or at least restrict the attributes if it *is* available), so that users can define the list of Python visible attributes in the normal Python way. We may even consider searching `__all__` at runtime to allow updates e.g. by module initialisation code, based on configuration, runtime state, imports, etc.\r\n\r\n### Describe alternatives you've considered.\r\n\r\nWe could also distinguish Python types from C types:\r\n```cython\r\nPI: cython.double = 3.141  # hidden C global\r\nconfig: dict = {}  # Python visible module global\r\napi: MyExtType = MyExtType()  # not so clear, but probably a Python visible module global\r\nptr: cython.p_double = &PI  # not mappable, thus not Python visible, C global\r\n```\r\nThis behaviour seems less obvious to me. It's not clear why the type should determine its visibility (aside from obvious constraints like unmappable C types).\r\n\r\nIf `__all__` is defined, we could also automatically turn all globals that it excludes into C globals, even if they are not typed or Python typed. If users do not intend this, they can work around it by declaring `__all__` with all intended Python attributes, and then cut out the non-visible ones programmatically. The net effect would be that access to module globals would be faster by default.\r\n\r\n### Additional context\r\n\r\nAlso see https://github.com/cython/cython/issues/656",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Definitely agree that this is a problem and that it's worth solving.\r\n\r\nI was thinking about this recently, and thought `__getattr__` wasn't the right solution because it gives quite unintuitive behaviour if people try to set those values from Python. i.e.:\r\n\r\n```python\r\n# m.py\r\n\r\ndef __getattr__(attr):\r\n  return \"from getattr\"\r\n```\r\n\r\nthen:\r\n\r\n```\r\n>>> import m\r\n>>> m.x\r\n'from getattr'\r\n>>> m.x = 5\r\n>>> m.x\r\n5\r\n```\r\n\r\nMy thought was to create an extension type derived from `module` and then add properties to have getters and setters. To implement: initialize the module as normal, and reassign `module.__class__` with the custom extension type. This is explicitly allowed for types derived from `module`.",
            "created_at": "2024-06-20T17:22:07Z",
            "html_url": "https://github.com/cython/cython/issues/6250#issuecomment-2181183361",
            "id": 2181183361,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6250",
            "node_id": "IC_kwDOABDGAc6CAjeB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2181183361/reactions"
            },
            "updated_at": "2024-06-20T17:22:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2181183361",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6250/comments",
    "created_at": "2024-06-20T09:24:44Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-06-20T09:25:12Z",
            "event": "labeled",
            "id": 13226183619,
            "label": {
                "color": "444444",
                "name": "enhancement"
            },
            "node_id": "LE_lADOABDGAc6M5z2hzwAAAAMUV4vD",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13226183619"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-06-20T09:25:12Z",
            "event": "labeled",
            "id": 13226183634,
            "label": {
                "color": "444444",
                "name": "Pure Python Mode"
            },
            "node_id": "LE_lADOABDGAc6M5z2hzwAAAAMUV4vS",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13226183634"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-06-20T09:25:12Z",
            "event": "labeled",
            "id": 13226183645,
            "label": {
                "color": "444444",
                "name": "Type Analysis"
            },
            "node_id": "LE_lADOABDGAc6M5z2hzwAAAAMUV4vd",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13226183645"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6250/events",
    "html_url": "https://github.com/cython/cython/issues/6250",
    "id": 2363964833,
    "labels": [
        {
            "color": "444444",
            "default": true,
            "description": null,
            "id": 425556243,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNDM=",
            "url": "https://api.github.com/repos/cython/cython/labels/enhancement"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558499,
            "name": "Pure Python Mode",
            "node_id": "MDU6TGFiZWw0MjU1NTg0OTk=",
            "url": "https://api.github.com/repos/cython/cython/labels/Pure%20Python%20Mode"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558824,
            "name": "Type Analysis",
            "node_id": "MDU6TGFiZWw0MjU1NTg4MjQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/Type%20Analysis"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6250/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6M5z2h",
    "number": 6250,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6250/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6250/timeline",
    "title": "[ENH] Improve annotation typing of globals",
    "updated_at": "2024-06-20T17:22:09Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6250",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder"
    }
}