{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "`def` doesn't seem to be allowed in `.pxd` files, but it's required for special methods of extension types.\r\n\r\nI think this means there's no way to type magic methods in pure Python mode without depending on `cython` being available in the module's namespace.",
    "closed_at": "2020-03-02T18:51:26Z",
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "Hm. I suppose you could use annotations for most cases, but probably not for types that don't have a direct Python equivalent (`cython.uint`, `ctypedef` types, etc).",
            "created_at": "2020-03-01T20:40:56Z",
            "html_url": "https://github.com/cython/cython/issues/3389#issuecomment-593142847",
            "id": 593142847,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3389",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5MzE0Mjg0Nw==",
            "updated_at": "2020-03-01T20:40:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/593142847",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/37680486?v=4",
                "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
                "followers_url": "https://api.github.com/users/will-ca/followers",
                "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
                "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/will-ca",
                "id": 37680486,
                "login": "will-ca",
                "node_id": "MDQ6VXNlcjM3NjgwNDg2",
                "organizations_url": "https://api.github.com/users/will-ca/orgs",
                "received_events_url": "https://api.github.com/users/will-ca/received_events",
                "repos_url": "https://api.github.com/users/will-ca/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/will-ca"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Most magic methods have a pretty strictly defined signature I think which Cython uses. \r\n\r\nYou should be able to use annotations consisting of `cython.uint`, or a non-Python type defined in a `pxd` file.\r\n\r\nA specific example would probably be useful.",
            "created_at": "2020-03-01T21:00:38Z",
            "html_url": "https://github.com/cython/cython/issues/3389#issuecomment-593144760",
            "id": 593144760,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3389",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5MzE0NDc2MA==",
            "updated_at": "2020-03-01T21:00:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/593144760",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "The [docs](https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html) seem to list the return type of most of the magic methods as simply `object`. I don't think the arguments types are statically typed either, since then rich comparison operators wouldn't be able to work with different types?\r\n\r\nMostly, aside from the inconsistency of not being able to define/declare everything together in the `.pxd` file, using `cython.uint` creates a dependency that `cython` is available in the module namespace, and I think using non-Python types defined in `.pxd` files will just result in a `NameError` when running purely in CPython.\r\n\r\nE.G., I don't think there's any pure Python mode code that directly mirrors the following Cython code and 1) is still statically typed when compiled and 2) will run fine interpreted in CPython without monkey-patching the global namespace to include the `ctypedef not_in_py`:\r\n\r\n```python\r\nctypedef fused not_in_py:\r\n    int\r\n    sometype\r\n\r\ncdef class test_cls:\r\n    def __init__(self, not_in_py arg):\r\n        cdef not_in_py v\r\n        v = arg+7\r\n        print(v)\r\n```\r\n\r\n- `cpdef __init__(self, not_in_py arg)` in the `.pxd` file doesn't work, nor do `def` or `cdef`.\r\n\r\n- Since the method can't be declared in the `.pxd`, `cython.locals(v=not_in_py)` has to go in the `.py` file instead.\r\n\r\n- The Cython-dependent decorator is pretty well addressed with `Cython.Shadow.locals()`, but `not_in_py` won't resolve without monkey-patching it in at the start of the module (which, IIRC, might then cause Cython to complain about the apparent name conflict when compiling unless you take an ugly/obfuscuating route through `globals()`), and now some of the typing happens in the `.py` file while the rest is still in the `.pxd` file, both of which will make the code messier and maintenance harder.\r\n\r\n- `def test_func(arg: not_in_py):`  would also raise `NameError(\"name 'not_in_py' is not defined\")` while interpreted, and require creating the same problems in order to fix.\r\n\r\nI'm definitely not saying this is a huge issue or an uncircumventible restriction on functionality, but it just seems kind of inconvenient that `.pxd` files are sufficient for basically all static typing use cases *except* for magic methods, especially since I'm not sure that there's an obvious reason why the syntax that's used for typing normal methods and functions can't or shouldn't also be usable with special methods.\r\n\r\nI found this thread on `cython-users` from a while ago too where it sounded like this was a planned area of development, just not a priority:\r\nhttps://groups.google.com/forum/#!topic/cython-users/UmIQ3xrd_x0",
            "created_at": "2020-03-02T02:55:01Z",
            "html_url": "https://github.com/cython/cython/issues/3389#issuecomment-593195786",
            "id": 593195786,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3389",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5MzE5NTc4Ng==",
            "updated_at": "2020-03-02T02:55:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/593195786",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/37680486?v=4",
                "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
                "followers_url": "https://api.github.com/users/will-ca/followers",
                "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
                "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/will-ca",
                "id": 37680486,
                "login": "will-ca",
                "node_id": "MDQ6VXNlcjM3NjgwNDg2",
                "organizations_url": "https://api.github.com/users/will-ca/orgs",
                "received_events_url": "https://api.github.com/users/will-ca/received_events",
                "repos_url": "https://api.github.com/users/will-ca/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/will-ca"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks - that makes a more sense. \r\n\r\nAbility to evaluate annotations won't be an issue in future versions of Python (https://www.python.org/dev/peps/pep-0563/) and you can get it from `__future__` now.\r\n\r\nYou can also declare fused types in the .py file https://cython.readthedocs.io/en/latest/src/userguide/fusedtypes.html#declaring-fused-types with `cython.fused_type`\r\n\r\nWith that said, when I try to run your example I get a \"This may never happen, please report a bug\" assertion error - I this is to do with when the function marks itself as having fused arguments, and should be an easy fix. https://github.com/cython/cython/pull/3391\r\n\r\n---------------------------------\r\n\r\nI don't think I have an opinion on whether being able to specify `def` functions in .pxd files makes sense. If it does make sense then in should probably apply to everything and not just special methods",
            "created_at": "2020-03-02T08:22:08Z",
            "html_url": "https://github.com/cython/cython/issues/3389#issuecomment-593277848",
            "id": 593277848,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3389",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5MzI3Nzg0OA==",
            "updated_at": "2020-03-02T09:05:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/593277848",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Ah. I hadn't actually compiled that code— my own use case is in pure Python mode where I've tried to keep Cython language features as confined to the `.pxd` file as possible, so I meant the `.pyx` code only to illustrate the kind of thing I wasn't able to cleanly do in that paradigm.\r\n\r\nI guess the bit that ultimately feels a bit inconsistent to me, is that special methods seem to be about the only major language feature that can't be statically typed just from `.pxd` files, despite having nearly the same syntax and semantics as regular methods and functions when defined in `.pyx` files.\r\n\r\nThe `Cython.Shadow` functions provide a workaround, but I think putting declarations back in the `.py` file kind of undermines the purpose of having a `.pxd` file? I think there might also be other types that they don't presently provide a way to expose, like `libcpp.vector`.\r\n\r\nThe impression that I got was that special methods are already be treated differently from other functions and methods in that they're converted fully into C-level features when defined with `def`, and hence that it might make sense to support `def` in `.pxd` files for them specifically. I don't know if that's actually how it works though.",
            "created_at": "2020-03-02T10:18:27Z",
            "html_url": "https://github.com/cython/cython/issues/3389#issuecomment-593328213",
            "id": 593328213,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3389",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5MzMyODIxMw==",
            "updated_at": "2020-03-02T10:19:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/593328213",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/37680486?v=4",
                "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
                "followers_url": "https://api.github.com/users/will-ca/followers",
                "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
                "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/will-ca",
                "id": 37680486,
                "login": "will-ca",
                "node_id": "MDQ6VXNlcjM3NjgwNDg2",
                "organizations_url": "https://api.github.com/users/will-ca/orgs",
                "received_events_url": "https://api.github.com/users/will-ca/received_events",
                "repos_url": "https://api.github.com/users/will-ca/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/will-ca"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> def doesn't seem to be allowed in .pxd files, but it's required for special methods of extension types.\r\n\r\nThere is no use in defining (special/Python) methods of extension types in `.pxd` files currently.  That's why `def` is disallowed. Remember, `.pxd` files are for (shared) declarations, `.pyx` files are for the implementation. The only implementation that you can have in `.pxd` files are inline functions, since they can be copied into the `.pyx` files that use them.",
            "created_at": "2020-03-02T16:58:08Z",
            "html_url": "https://github.com/cython/cython/issues/3389#issuecomment-593504573",
            "id": 593504573,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3389",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5MzUwNDU3Mw==",
            "updated_at": "2020-03-02T16:58:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/593504573",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Also, as @da-woods wrote, special methods have a specific C signature already, sometimes including C types. There are (almost) no cases where users should override or specialise those with static type annotations.\r\n\r\nFused types can be considered an exception here, because their dispatch mechanism can still be useful. That doesn't mean they have to be specified in `.pxd` files, though. Just use type annotations. It's generally a good idea to keep implementation specific behaviour local to the implementation, and not leak it out into `.pxd` files. And the (fused) argument types of special methods are purely implementation specific and irrelevant to the outside world.\r\n\r\nAlso see #1359 and #2120.\r\n\r\nCan we close this ticket, or did I miss anything else?",
            "created_at": "2020-03-02T17:15:11Z",
            "html_url": "https://github.com/cython/cython/issues/3389#issuecomment-593512830",
            "id": 593512830,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3389",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5MzUxMjgzMA==",
            "updated_at": "2020-03-02T17:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/593512830",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3389/comments",
    "created_at": "2020-03-01T20:22:55Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-02T17:15:12Z",
            "event": "mentioned",
            "id": 3088872443,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzA4ODg3MjQ0Mw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3088872443"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-02T17:15:12Z",
            "event": "subscribed",
            "id": 3088872445,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwODg4NzI0NDU=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3088872445"
        },
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/37680486?v=4",
                "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
                "followers_url": "https://api.github.com/users/will-ca/followers",
                "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
                "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/will-ca",
                "id": 37680486,
                "login": "will-ca",
                "node_id": "MDQ6VXNlcjM3NjgwNDg2",
                "organizations_url": "https://api.github.com/users/will-ca/orgs",
                "received_events_url": "https://api.github.com/users/will-ca/received_events",
                "repos_url": "https://api.github.com/users/will-ca/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/will-ca"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-02T18:51:26Z",
            "event": "closed",
            "id": 3089206334,
            "node_id": "MDExOkNsb3NlZEV2ZW50MzA4OTIwNjMzNA==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3089206334"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3389/events",
    "html_url": "https://github.com/cython/cython/issues/3389",
    "id": 573608804,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3389/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NzM2MDg4MDQ=",
    "number": 3389,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Typing special methods/magic methods in pure Python mode?",
    "updated_at": "2020-03-02T18:51:26Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3389",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/37680486?v=4",
        "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
        "followers_url": "https://api.github.com/users/will-ca/followers",
        "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/will-ca",
        "id": 37680486,
        "login": "will-ca",
        "node_id": "MDQ6VXNlcjM3NjgwNDg2",
        "organizations_url": "https://api.github.com/users/will-ca/orgs",
        "received_events_url": "https://api.github.com/users/will-ca/received_events",
        "repos_url": "https://api.github.com/users/will-ca/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/will-ca"
    }
}