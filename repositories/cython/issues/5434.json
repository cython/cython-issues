{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Is your feature request related to a problem? Please describe.\n\nIn some cases, Cython knows the (extension) type of the object when an operator is used on it like subscripting (getitem) or arithmetic. If the extension type implements the corresponding special method, Cython could call direcly into the slot function instead of going through the type slot indirection. This has the additional advantage that Cython knows the type of the arguments and can thus pass a subscript index as `Py_ssize_t` instead of a Python object argument.\n\n### Describe the solution you'd like.\n\nThis has previously been discussion on cython-users:\r\n```\r\nRobert Bradshaw wrote on 2014-09-20:\r\n> On Thu, Sep 18, 2014 at 10:23 AM, Stefan Behnel wrote:\r\n>> 1989lzhh wrote on 2014-09-18:\r\n>>> I want to write an extension class to wrap allocated\r\n>>> memory. I want the index part to be as fast as it can. First, I try with\r\n>>> special method __getitem__, it worked as expected but the index speed is\r\n>>> about 6 times slower than calling \"cdefed \" equivalent function ( in\r\n>>> cython side). Since the definition of special methods like __getitem__\r\n>>> now in cython extension class are limited by using “def” only. I am\r\n>>> wondring if it is possible allowing “cpdef”.\r\n>>\r\n>> I recently thought about this, too. Yes, we could do better here.\r\n>>\r\n>> First of all, \"special methods\" (including \"__getitem__()\") are already\r\n>> called at the C level, though a type slot function (a function pointer in\r\n>> CPython's type definition struct). That makes them faster than arbitrary\r\n>> Python methods that are called through dict lookup, args/kwargs packing,\r\n>> etc. Special methods also have a fixed C signature, in this specific case\r\n>> accepting the owner object itself and a single object argument.\r\n>>\r\n>> So, while things are already much faster than for \"def\" methods, there are\r\n>> still two problems. The main one is the object argument. In many cases\r\n>> (except for mappings etc.), code will expect a (s)size_t sized index value\r\n>> here, which could be passed more efficiently with a corresponding function\r\n>> signature. While Cython code could implement __getitem__() like this:\r\n>>\r\n>>    def __getitem__(self, Py_ssize_t index):\r\n>>       ...\r\n>>\r\n>> the call will still pass an object, which would then get unpacked on the\r\n>> way in.\r\n>>\r\n>> The second (much smaller) problem is the call indirection for the operator,\r\n>> which first has to decide which slot function to call, and then go through\r\n>> the pointer indirection to execute it. So there is a bit more overhead\r\n>> involved in the call here than for a normal C call.\r\n>>\r\n>> Both problems can be avoided in Cython for types declared \"final\". Here,\r\n>> Cython could determine the slot function at compile time and, instead of\r\n>> going through the operator execution path, call the underlying slot method\r\n>> directly. It would then be able to see the C signature of the function and\r\n>> could avoid passing object arguments.\r\n>\r\n> Note that \"final\" is not necessary--we could play the same trick we do\r\n> with cpdef functions of checking to see if it was overridden in\r\n> Python-land and calling that instead.\r\n\r\nAh, yes. And we'd only have to compare the pointer in the current object's\r\ntype slot with the expected C function pointer to check for overrides. That\r\nreally sounds like something we should just always do, even for arithmetic\r\nmethods etc. (which are 'more' special because they have \"try left then try\r\nright on failure\" magic going on, which we could inline.)\r\n\r\nStefan\r\n```\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5434/comments",
    "created_at": "2023-05-15T08:32:28Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-05-15T08:32:28Z",
            "event": "labeled",
            "id": 9243723436,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "LE_lADOABDGAc5l5lqazwAAAAIm-Aas",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/9243723436"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-05-15T08:32:28Z",
            "event": "labeled",
            "id": 9243723444,
            "label": {
                "color": "444444",
                "name": "Optimization"
            },
            "node_id": "LE_lADOABDGAc5l5lqazwAAAAIm-Aa0",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/9243723444"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5434/events",
    "html_url": "https://github.com/cython/cython/issues/5434",
    "id": 1709595290,
    "labels": [
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556272,
            "name": "Optimization",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNzI=",
            "url": "https://api.github.com/repos/cython/cython/labels/Optimization"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5434/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5l5lqa",
    "number": 5434,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5434/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5434/timeline",
    "title": "[ENH] Inline special method calls for known extension types",
    "updated_at": "2023-05-15T08:32:28Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5434",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder"
    }
}