{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Is your feature request related to a problem? Please describe.\n\nlet's say I have the following function (implemented in C++, so it cannot raise Python exception by itself, but it may raise a C++ exception)\n\n```\nint f() except +\n```\n\nand I want to call it as follows\n\n```\nsig_on()\ntry:\n    f()\nfinally:\n    sig_off()\n```\n\nhere `sig_on()` and `sig_off()` are two functions declared in C that does not require the GIL.\nAssume that I want the following\n\n1. if there is a (C++) exception, I want to raise a Python exception, but I have to call `sig_off()`;\n2. the garbage collector must not run between `sig_on()` and `sig_off()`.\n\nthe problem is, `try...finally` is not pure C, so it might invoke some Python API, which in turn might invoke the garbage collector.\n\n### Describe the solution you'd like.\n\nI don't know what's a good solution. Maybe something like\n\n```\nsig_on()\ncpptry:\n    f()\ncppfinally:\n    sig_off()\n```\n\nwhich only works if the code inside the try block is pure C++, and it will not catch Python code.\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\nThe motivation is a SageMath bug https://github.com/sagemath/sage/issues/40978",
    "closed_at": "2025-10-04T14:59:20Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
        "events_url": "https://api.github.com/users/user202729/events{/privacy}",
        "followers_url": "https://api.github.com/users/user202729/followers",
        "following_url": "https://api.github.com/users/user202729/following{/other_user}",
        "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/user202729",
        "id": 25191436,
        "login": "user202729",
        "node_id": "MDQ6VXNlcjI1MTkxNDM2",
        "organizations_url": "https://api.github.com/users/user202729/orgs",
        "received_events_url": "https://api.github.com/users/user202729/received_events",
        "repos_url": "https://api.github.com/users/user202729/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/user202729",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Looking at https://github.com/sagemath/sage/blob/develop/src/sage/symbolic/expression.pyx I'd also be worried about your non-error case. The coercion from your results to the PyObject return type will also happen before the finally executes.  This possibly also needs a very detailed look at exactly what circumstances can end up calling the GC.\n\n----------------------------------------------------------------\n\nWe've had some requests to make it possible to C++ exceptions to propagate through Cython functions (it used to be possible to declare Cython functions as `except +` but this was never safe and propagating exceptions through them would break things). I think there might be a way to make it work with `std::exception_ptr` but it's a fairly big feature.\n\nBut I'm not really convinced that this actually solves your problem (given the return value issue)",
            "created_at": "2025-10-04T12:46:41Z",
            "html_url": "https://github.com/cython/cython/issues/7189#issuecomment-3368195643",
            "id": 3368195643,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7189",
            "node_id": "IC_kwDOABDGAc7IwpY7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3368195643/reactions"
            },
            "updated_at": "2025-10-04T12:46:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3368195643",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Potentially you could write a custom exception handler:\n\n```\ncdef extern from *:\n    void __Pyx_CppExn2PyErr() except*  # cython's default handler\n\ncdef int sig_off_then_raise() except *:\n    sig_off()\n    __Pyx_CppExn2PyErr()\n\nvoid f() +sig_off_then_raise\n```",
            "created_at": "2025-10-04T13:19:31Z",
            "html_url": "https://github.com/cython/cython/issues/7189#issuecomment-3368221862",
            "id": 3368221862,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7189",
            "node_id": "IC_kwDOABDGAc7Iwvym",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3368221862/reactions"
            },
            "updated_at": "2025-10-04T13:19:31Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3368221862",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "is that so?\n\n```\n        cdef Expression nexp = self.coerce_in(k)\n        cdef GEx x\n        sig_on()\n        try:\n            x = g_hold2_wrapper(g_binomial, self._gobj, nexp._gobj, hold)\n        finally:\n            sig_off()\n        return new_Expression_from_GEx(self._parent, x)\n```\n\n`GEx` is a C++ type, so there's no coercion at the assignment? \n\n------\n\ncustom exception handler looks useful, I'll see.",
            "created_at": "2025-10-04T13:29:52Z",
            "html_url": "https://github.com/cython/cython/issues/7189#issuecomment-3368236328",
            "id": 3368236328,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7189",
            "node_id": "IC_kwDOABDGAc7IwzUo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3368236328/reactions"
            },
            "updated_at": "2025-10-04T13:30:18Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3368236328",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
                "events_url": "https://api.github.com/users/user202729/events{/privacy}",
                "followers_url": "https://api.github.com/users/user202729/followers",
                "following_url": "https://api.github.com/users/user202729/following{/other_user}",
                "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/user202729",
                "id": 25191436,
                "login": "user202729",
                "node_id": "MDQ6VXNlcjI1MTkxNDM2",
                "organizations_url": "https://api.github.com/users/user202729/orgs",
                "received_events_url": "https://api.github.com/users/user202729/received_events",
                "repos_url": "https://api.github.com/users/user202729/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/user202729",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There's at least a few cases where you do a return in a similar context (e.g. in `to_gamma`).\n\n```\n        sig_on()\n        try:\n            return self._gobj.is_equal(_other._gobj)\n        finally:\n            sig_off()\n```\n\nIt's possible there's something special about that which I don't appreciate though. It's also fairly likely it's just returning a `float` (which I don't think should trigger the GC on modern Python at least).",
            "created_at": "2025-10-04T13:33:48Z",
            "html_url": "https://github.com/cython/cython/issues/7189#issuecomment-3368239151",
            "id": 3368239151,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7189",
            "node_id": "IC_kwDOABDGAc7Iw0Av",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3368239151/reactions"
            },
            "updated_at": "2025-10-04T13:33:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3368239151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The current [description](https://docs.cython.org/en/latest/src/userguide/wrapping_CPlusPlus.html#exceptions) looks confusing:\n\n> If something_dangerous raises a C++ exception then raise_py_error will be called, which allows one to do custom C++ to Python error “translations.” If raise_py_error does not actually raise an exception a RuntimeError will be raised. This approach may also be used to manage custom Python exceptions created using the Python C API.\n\nalthough I manage to somewhat decrypt the meaning. Does the following sound correct to you (in particular the detail that the exception handler cannot raise exception)?\n\n> If `something_dangerous` raises a C++ exception then `raise_py_error` will be called inside the `catch` block.\n> From there, `raise_py_error` can access the exception object by, for example, rethrow the exception currently being handled with [`throw;`](https://en.cppreference.com/w/cpp/language/throw.html) and immediately catch it.\n> The handler `raise_py_error` must not itself raise a C++ exception, instead, it should do (custom) C++ to Python error translation, such as by ``PyErr_SetString``.\n> See the example below.\n\nI think it might be incorrect given that in your example you declare the custom exception handler with `except *`.",
            "created_at": "2025-10-04T13:40:01Z",
            "html_url": "https://github.com/cython/cython/issues/7189#issuecomment-3368243095",
            "id": 3368243095,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7189",
            "node_id": "IC_kwDOABDGAc7Iw0-X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3368243095/reactions"
            },
            "updated_at": "2025-10-04T13:40:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3368243095",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
                "events_url": "https://api.github.com/users/user202729/events{/privacy}",
                "followers_url": "https://api.github.com/users/user202729/followers",
                "following_url": "https://api.github.com/users/user202729/following{/other_user}",
                "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/user202729",
                "id": 25191436,
                "login": "user202729",
                "node_id": "MDQ6VXNlcjI1MTkxNDM2",
                "organizations_url": "https://api.github.com/users/user202729/orgs",
                "received_events_url": "https://api.github.com/users/user202729/received_events",
                "repos_url": "https://api.github.com/users/user202729/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/user202729",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It's possible there's something special about that which I don't appreciate though.\n\nit's also possible that there's actually a bug there. The bugs involving the GC being run are random and difficult to reproduce.\n\nthere are 3 occurrences of `return` right before `finally` that I can find. the one in `is_polynomial` is I believe fine (right?) because it is `cpdef bint`, so the conversion to Python `bool` should happen after the function returns. The other can be rewritten by making a temporary variable and assign to it.\n",
            "created_at": "2025-10-04T13:44:58Z",
            "html_url": "https://github.com/cython/cython/issues/7189#issuecomment-3368256882",
            "id": 3368256882,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7189",
            "node_id": "IC_kwDOABDGAc7Iw4Vy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3368256882/reactions"
            },
            "updated_at": "2025-10-04T13:44:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3368256882",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
                "events_url": "https://api.github.com/users/user202729/events{/privacy}",
                "followers_url": "https://api.github.com/users/user202729/followers",
                "following_url": "https://api.github.com/users/user202729/following{/other_user}",
                "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/user202729",
                "id": 25191436,
                "login": "user202729",
                "node_id": "MDQ6VXNlcjI1MTkxNDM2",
                "organizations_url": "https://api.github.com/users/user202729/orgs",
                "received_events_url": "https://api.github.com/users/user202729/received_events",
                "repos_url": "https://api.github.com/users/user202729/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/user202729",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Does the following sound correct to you\n\nYes - it does - it definitely isn't supposed to raise a c++ exception.\n\n> I think it might be incorrect given that in your example you declare the custom exception handler with `except *`.\n\nThat just says it might raise a Python exception. Which is true. Although I think is largely ignored by Cython in this context.\n\n\n\n> there are 3 occurrences of `return` right before `finally` that I can find. the one in `is_polynomial` is I believe fine (right?) because it is `cpdef bint`, so the conversion to Python `bool` should happen after the function returns. The other can be rewritten by making a temporary variable and assign to it.\n\nYeah I think this is all correct.",
            "created_at": "2025-10-04T14:33:31Z",
            "html_url": "https://github.com/cython/cython/issues/7189#issuecomment-3368303229",
            "id": 3368303229,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7189",
            "node_id": "IC_kwDOABDGAc7IxDp9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3368303229/reactions"
            },
            "updated_at": "2025-10-04T14:33:31Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3368303229",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hm, okay. While `cpptry/cppfinally` is also a reasonable modification, the current suggestion (custom error handler) sounds better.\n\nthere remains the issue that `__Pyx_CppExn2PyErr` may get renamed in the future (double underscore).",
            "created_at": "2025-10-04T14:59:20Z",
            "html_url": "https://github.com/cython/cython/issues/7189#issuecomment-3368319993",
            "id": 3368319993,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7189",
            "node_id": "IC_kwDOABDGAc7IxHv5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3368319993/reactions"
            },
            "updated_at": "2025-10-04T14:59:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3368319993",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
                "events_url": "https://api.github.com/users/user202729/events{/privacy}",
                "followers_url": "https://api.github.com/users/user202729/followers",
                "following_url": "https://api.github.com/users/user202729/following{/other_user}",
                "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/user202729",
                "id": 25191436,
                "login": "user202729",
                "node_id": "MDQ6VXNlcjI1MTkxNDM2",
                "organizations_url": "https://api.github.com/users/user202729/orgs",
                "received_events_url": "https://api.github.com/users/user202729/received_events",
                "repos_url": "https://api.github.com/users/user202729/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/user202729",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> there remains the issue that `__Pyx_CppExn2PyErr` may get renamed in the future (double underscore).\n\nThe more robust solution to that is probably:\n\n```\ncdef extern from *:\n    \"\"\"\n    void reraise_exception() {\n        throw;\n    }\n    \"\"\"\n    void reraise_exception() except+\n```\n\nAnd then have your handler call `reraise_exception` instead of `__Pyx_CppExn2PyErr`. Cython will use `__Pyx_CppExn2PyErr` as the handler for `reraise_exception` and so it'll end up the same, but it won't depend on Cython's internal naming.\n\n\n------------------------------------------------------------------\n\nI may well try to make some improvements to C++ exception handling in future - I don't think you're the only people looking for something kind of similar. But it probably won't be soon so you shouldn't wait on it.",
            "created_at": "2025-10-04T15:04:15Z",
            "html_url": "https://github.com/cython/cython/issues/7189#issuecomment-3368323812",
            "id": 3368323812,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7189",
            "node_id": "IC_kwDOABDGAc7IxIrk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3368323812/reactions"
            },
            "updated_at": "2025-10-04T15:04:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3368323812",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "probably better to name it `rethrow_current_exception` since `std::rethrow_exception(std::current_exception())` does the same thing. (probably. Is it slower? I have no idea.)",
            "created_at": "2025-10-04T15:15:26Z",
            "html_url": "https://github.com/cython/cython/issues/7189#issuecomment-3368333638",
            "id": 3368333638,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7189",
            "node_id": "IC_kwDOABDGAc7IxLFG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3368333638/reactions"
            },
            "updated_at": "2025-10-04T15:15:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3368333638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
                "events_url": "https://api.github.com/users/user202729/events{/privacy}",
                "followers_url": "https://api.github.com/users/user202729/followers",
                "following_url": "https://api.github.com/users/user202729/following{/other_user}",
                "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/user202729",
                "id": 25191436,
                "login": "user202729",
                "node_id": "MDQ6VXNlcjI1MTkxNDM2",
                "organizations_url": "https://api.github.com/users/user202729/orgs",
                "received_events_url": "https://api.github.com/users/user202729/received_events",
                "repos_url": "https://api.github.com/users/user202729/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/user202729",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/7189/comments",
    "created_at": "2025-10-04T11:29:39Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
                "events_url": "https://api.github.com/users/user202729/events{/privacy}",
                "followers_url": "https://api.github.com/users/user202729/followers",
                "following_url": "https://api.github.com/users/user202729/following{/other_user}",
                "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/user202729",
                "id": 25191436,
                "login": "user202729",
                "node_id": "MDQ6VXNlcjI1MTkxNDM2",
                "organizations_url": "https://api.github.com/users/user202729/orgs",
                "received_events_url": "https://api.github.com/users/user202729/received_events",
                "repos_url": "https://api.github.com/users/user202729/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/user202729",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-10-04T11:30:05Z",
            "event": "renamed",
            "id": 20095820804,
            "node_id": "RTE_lADOABDGAc7Po2IvzwAAAAStzeQE",
            "performed_via_github_app": null,
            "rename": {
                "from": "[ENH] allow some way to defer and reraise exception",
                "to": "[ENH] allow some way to defer and reraise C++ exception"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/20095820804"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
                "events_url": "https://api.github.com/users/user202729/events{/privacy}",
                "followers_url": "https://api.github.com/users/user202729/followers",
                "following_url": "https://api.github.com/users/user202729/following{/other_user}",
                "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/user202729",
                "id": 25191436,
                "login": "user202729",
                "node_id": "MDQ6VXNlcjI1MTkxNDM2",
                "organizations_url": "https://api.github.com/users/user202729/orgs",
                "received_events_url": "https://api.github.com/users/user202729/received_events",
                "repos_url": "https://api.github.com/users/user202729/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/user202729",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-10-04T14:59:21Z",
            "event": "closed",
            "id": 20096958370,
            "node_id": "CE_lADOABDGAc7Po2IvzwAAAASt3z-i",
            "performed_via_github_app": null,
            "state_reason": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/20096958370"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/7189/events",
    "html_url": "https://github.com/cython/cython/issues/7189",
    "id": 3483591215,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/7189/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc7Po2Iv",
    "number": 7189,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/7189/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/7189/timeline",
    "title": "[ENH] allow some way to defer and reraise C++ exception",
    "type": null,
    "updated_at": "2025-10-04T15:15:26Z",
    "url": "https://api.github.com/repos/cython/cython/issues/7189",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
        "events_url": "https://api.github.com/users/user202729/events{/privacy}",
        "followers_url": "https://api.github.com/users/user202729/followers",
        "following_url": "https://api.github.com/users/user202729/following{/other_user}",
        "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/user202729",
        "id": 25191436,
        "login": "user202729",
        "node_id": "MDQ6VXNlcjI1MTkxNDM2",
        "organizations_url": "https://api.github.com/users/user202729/orgs",
        "received_events_url": "https://api.github.com/users/user202729/received_events",
        "repos_url": "https://api.github.com/users/user202729/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/user202729",
        "user_view_type": "public"
    }
}