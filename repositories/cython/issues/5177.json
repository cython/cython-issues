{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Is your feature request related to a problem? Please describe.\n\nIf there is a sturct with many fields, only some of its fields need to be initialized explicitly, and other fields can be implicitly empty-initialized, designators will be useful in c99:\r\n\r\n``` c\r\nstruct MyStruct {\r\n    int a;\r\n    int b;\r\n    int c;\r\n    int d;\r\n    float e;\r\n    float f;\r\n};\r\n\r\nint main(void) {\r\n    struct MyStruct s1 = {\r\n        .a = 1,\r\n        .b = 2,\r\n    };\r\n    struct MyStruct s2 = {\r\n        .c = 42,\r\n        .d = 233,\r\n    };\r\n    struct MyStruct s3 = {\r\n        .e = 0.1,\r\n        .f = 0.2,\r\n    };\r\n}\r\n```\r\n\r\nHowever, cython will leave other fields uninitialized and generate some warnings.\r\n\r\n``` cython\r\ncdef struct MyStruct:\r\n    int a\r\n    int b\r\n    int c\r\n    int d\r\n    float e\r\n    float f\r\n\r\ndef main():\r\n    cdef MyStruct s1 = MyStruct(\r\n        a = 1,\r\n        b = 2,\r\n    )\r\n    cdef MyStruct s2 = MyStruct(\r\n        c = 42,\r\n        d = 233,\r\n    )\r\n    cdef MyStruct s3 = MyStruct(\r\n        e = 0.1,\r\n        f = 0.2,\r\n    )\r\n```\r\n\r\n```\r\nwarning: test.pyx:10:31: Not all members given for struct 'MyStruct'\r\nwarning: test.pyx:10:31: Not all members given for struct 'MyStruct'\r\nwarning: test.pyx:14:31: Not all members given for struct 'MyStruct'\r\nwarning: test.pyx:14:31: Not all members given for struct 'MyStruct'\r\nwarning: test.pyx:18:31: Not all members given for struct 'MyStruct'\r\nwarning: test.pyx:18:31: Not all members given for struct 'MyStruct'\r\n```\r\n\r\nThe generated C code looks like this:\r\n\r\n``` c\r\nstruct __pyx_t_4test_MyStruct __pyx_v_s2;\r\nstruct __pyx_t_4test_MyStruct __pyx_t_1;\r\n\r\n/* \"test.pyx\":14\r\n *         b = 2,\r\n *     )\r\n *     cdef MyStruct s2 = MyStruct(             # <<<<<<<<<<<<<<\r\n *         c = 42,\r\n *         d = 233,\r\n */\r\n__pyx_t_1.c = 42;\r\n__pyx_t_1.d = 0xE9;\r\n__pyx_v_s2 = __pyx_t_1;\r\n```\n\n### Describe the solution you'd like.\n\nIt would be helpful if it's possible to specify default values for the fields of C structures.\r\n\r\n``` cython\r\ncdef struct MyStruct:\r\n    int a = 0\r\n    float b = 0\r\n    void *c = NULL\r\n    int d[4] = [0, 0, 0, 0]\r\n\r\n# equivalent to above:\r\n\r\n@cython.default_to_zero\r\ncdef struct MyStruct:\r\n    int a\r\n    float b\r\n    void *c\r\n    int d[4]\r\n```\r\n\r\n``` cython\r\ndef main():\r\n    cdef int foo = 42\r\n    cdef MyStruct s = MyStruct(\r\n        b = 1.23,\r\n        c = &foo,\r\n    )\r\n```\r\n\r\nThis code behaves the same as if specified `a = 0` and `d = [0, 0, 0, 0]`:\r\n\r\n``` cython\r\ndef main():\r\n    cdef int foo = 42\r\n    cdef MyStruct s = MyStruct(\r\n        a = 0,\r\n        b = 1.23,\r\n        c = &foo,\r\n        d = [0, 0, 0, 0],\r\n    )\r\n```\r\n\r\nThe whole struct can also be empty-initialized:\r\n\r\n``` cython\r\ncdef struct Inner:\r\n    int a = 0\r\n    int b = 0\r\n\r\ncdef struct Outer:\r\n    int a = 0\r\n    int b = 0\r\n    Inner c = Inner()\r\n\r\n# equivalent to above:\r\n\r\n@cython.default_to_zero\r\ncdef struct Inner:\r\n    int a\r\n    int b\r\n\r\n@cython.default_to_zero\r\ncdef struct Outer:\r\n    int a\r\n    int b\r\n    Inner c\r\n\r\n\r\ndef main():\r\n    cdef Outer s = Outer()\r\n```\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "`@cython.dataclass` should take care of this request\r\nAdding more features that do the same thing likely doesn't helps anyone",
            "created_at": "2022-12-19T07:29:07Z",
            "html_url": "https://github.com/cython/cython/issues/5177#issuecomment-1357211045",
            "id": 1357211045,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5177",
            "node_id": "IC_kwDOABDGAc5Q5WWl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1357211045/reactions"
            },
            "updated_at": "2022-12-19T07:34:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1357211045",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I know `@cython.dataclasses`, but it's an extension class, which is a python object. What I described here is for pure C structs. c99's designators are convenient in C programing, it would be great to have this feature in cython.",
            "created_at": "2022-12-19T07:35:36Z",
            "html_url": "https://github.com/cython/cython/issues/5177#issuecomment-1357216182",
            "id": 1357216182,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5177",
            "node_id": "IC_kwDOABDGAc5Q5Xm2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1357216182/reactions"
            },
            "updated_at": "2022-12-19T07:35:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1357216182",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53637421?v=4",
                "events_url": "https://api.github.com/users/GalaxySnail/events{/privacy}",
                "followers_url": "https://api.github.com/users/GalaxySnail/followers",
                "following_url": "https://api.github.com/users/GalaxySnail/following{/other_user}",
                "gists_url": "https://api.github.com/users/GalaxySnail/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/GalaxySnail",
                "id": 53637421,
                "login": "GalaxySnail",
                "node_id": "MDQ6VXNlcjUzNjM3NDIx",
                "organizations_url": "https://api.github.com/users/GalaxySnail/orgs",
                "received_events_url": "https://api.github.com/users/GalaxySnail/received_events",
                "repos_url": "https://api.github.com/users/GalaxySnail/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/GalaxySnail/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GalaxySnail/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/GalaxySnail"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Definitely not opposed to this if someone does the work. Don't think we can implement it in terms of designated initializers though.",
            "created_at": "2022-12-19T08:12:51Z",
            "html_url": "https://github.com/cython/cython/issues/5177#issuecomment-1357251188",
            "id": 1357251188,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5177",
            "node_id": "IC_kwDOABDGAc5Q5gJ0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1357251188/reactions"
            },
            "updated_at": "2022-12-19T08:12:51Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1357251188",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Don't think we can implement it in terms of designated initializers though.\r\n\r\nDue to C99 or due to other limitations?\r\n\r\nIn general (but definitely if it's the former), I think that after 3.0 it'd be worthwhile to also consider raising the minimal C standard version. CPython already requires C11 as of 3.11, similarly for [scipy](https://scipy.github.io/devdocs/dev/toolchain.html), the linux kernel, etc...",
            "created_at": "2022-12-19T23:14:03Z",
            "html_url": "https://github.com/cython/cython/issues/5177#issuecomment-1358551827",
            "id": 1358551827,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5177",
            "node_id": "IC_kwDOABDGAc5Q-dsT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1358551827/reactions"
            },
            "updated_at": "2022-12-19T23:14:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1358551827",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Due to C99 or due to other limitations?\r\n\r\nPartly C++ too, which only as them as a c++20 feature.\r\n\r\nBut mostly that Cython's code generation puts the declarations at the start of the function and the initialisation a little way in. That's partly for C89 reasons, but mostly just so that variables are function scoped like Python",
            "created_at": "2022-12-20T06:53:01Z",
            "html_url": "https://github.com/cython/cython/issues/5177#issuecomment-1358913500",
            "id": 1358913500,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5177",
            "node_id": "IC_kwDOABDGAc5Q_1_c",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1358913500/reactions"
            },
            "updated_at": "2022-12-20T06:53:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1358913500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5177/comments",
    "created_at": "2022-12-18T23:15:23Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5177/events",
    "html_url": "https://github.com/cython/cython/issues/5177",
    "id": 1502069181,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5177/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5Zh8G9",
    "number": 5177,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5177/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5177/timeline",
    "title": "[ENH] Specify default values for C struct declarations",
    "updated_at": "2022-12-20T06:53:01Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5177",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/53637421?v=4",
        "events_url": "https://api.github.com/users/GalaxySnail/events{/privacy}",
        "followers_url": "https://api.github.com/users/GalaxySnail/followers",
        "following_url": "https://api.github.com/users/GalaxySnail/following{/other_user}",
        "gists_url": "https://api.github.com/users/GalaxySnail/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/GalaxySnail",
        "id": 53637421,
        "login": "GalaxySnail",
        "node_id": "MDQ6VXNlcjUzNjM3NDIx",
        "organizations_url": "https://api.github.com/users/GalaxySnail/orgs",
        "received_events_url": "https://api.github.com/users/GalaxySnail/received_events",
        "repos_url": "https://api.github.com/users/GalaxySnail/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/GalaxySnail/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/GalaxySnail/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/GalaxySnail"
    }
}