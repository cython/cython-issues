{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I've been looking at Cython with an eye toward replacing some hand written\r\ncpython extension code binding a C++ library.  This library is for a network\r\nclient and server, and includes a number of callbacks from C++ into python code.\r\nIt also makes heavy use of std::shared_ptr.\r\n\r\nI find myself wanting the ability to add custom code to tp_traverse and tp_clear\r\nto find additional python objects referenced indirectly through c++ objects.\r\n\r\nI don't think this is presently possible?\r\n\r\nA strawman example of the situation is as follows.\r\nThe reference cycles to be broken would include.\r\n\r\nHolder.iface -> PyImpl.held -> Held -> ... -> Holder\r\n\r\n```py\r\ncdef extern from \"foo.h\":\r\n    cdef cppclass Interface:\r\n        ...\r\n        void callback() # pure virtual\r\n    cdef cppclass PyImpl(Interface):\r\n        ...\r\n        void callback() # calls held.callback()\r\n        object held\r\n\r\n    ctypedef Interface* pInterface\r\n\r\ncdef class Held:\r\n    def callback(self, arg):\r\n        pass\r\n\r\ncdef class Holder:\r\n    cdef shared_ptr[Interface] iface\r\n\r\n    # I would like to be able to do something like this:\r\n    def tp_traverse(self, visit):\r\n        cdef PyImpl* impl\r\n        if self.iface:\r\n            impl = dynamic_cast[pInterface](self.iface.get())\r\n            if impl:\r\n                visit(impl.held)\r\n```\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Could probably be added as two new special methods that get called by `tp_traverse` and `tp_clear`, so I'll leave this open as a feature request.\r\n\r\nYou can already do this by manually casting the type to a `PyTypeObject` and setting its slot methods. That way, you can store away the old slot value and insert your own one that calls the original one.",
            "created_at": "2018-11-28T18:23:10Z",
            "html_url": "https://github.com/cython/cython/issues/2737#issuecomment-442552352",
            "id": 442552352,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2737",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjU1MjM1Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/442552352/reactions"
            },
            "updated_at": "2018-11-28T18:23:10Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/442552352",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "As advertised, it is possible to replace tp_traverse.  A working example: https://github.com/mdavidsaver/cython-c--demo\r\n\r\nI found that the definition of `cpython.traverseproc` changed at some point to include \"except -1\".  In exploring ways to handle with this sort of API change I was surprised to find that eg. `IF CYTHON_HEX_VERSION>=0x001D01F0` isn't possible.",
            "created_at": "2018-12-06T19:17:41Z",
            "html_url": "https://github.com/cython/cython/issues/2737#issuecomment-444995009",
            "id": 444995009,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2737",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDk5NTAwOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/444995009/reactions"
            },
            "updated_at": "2018-12-06T19:17:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/444995009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4429215?v=4",
                "events_url": "https://api.github.com/users/mdavidsaver/events{/privacy}",
                "followers_url": "https://api.github.com/users/mdavidsaver/followers",
                "following_url": "https://api.github.com/users/mdavidsaver/following{/other_user}",
                "gists_url": "https://api.github.com/users/mdavidsaver/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mdavidsaver",
                "id": 4429215,
                "login": "mdavidsaver",
                "node_id": "MDQ6VXNlcjQ0MjkyMTU=",
                "organizations_url": "https://api.github.com/users/mdavidsaver/orgs",
                "received_events_url": "https://api.github.com/users/mdavidsaver/received_events",
                "repos_url": "https://api.github.com/users/mdavidsaver/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mdavidsaver/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mdavidsaver/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mdavidsaver"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The example looks good.\r\n\r\n> `IF CYTHON_HEX_VERSION>=0x001D01F0` isn't possible\r\n\r\nAh, yes, that makes sense. There aren't many real use cases for translation time environment tests, but this one is reasonable (although your specific use case is clearly better served by a cast). PR welcome that sets `CYTHON_HEX_VERSION` to what we now write into the C file.",
            "created_at": "2018-12-07T07:54:08Z",
            "html_url": "https://github.com/cython/cython/issues/2737#issuecomment-445151736",
            "id": 445151736,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2737",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTE1MTczNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/445151736/reactions"
            },
            "updated_at": "2018-12-07T07:54:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/445151736",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "SageMath also does this, for example see\r\nhttps://github.com/sagemath/sage/blob/develop/src/sage/structure/coerce_dict.pyx#L938",
            "created_at": "2018-12-17T09:07:20Z",
            "html_url": "https://github.com/cython/cython/issues/2737#issuecomment-447771164",
            "id": 447771164,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2737",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Nzc3MTE2NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/447771164/reactions"
            },
            "updated_at": "2018-12-17T09:07:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/447771164",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "node_id": "MDQ6VXNlcjM2MjU3ODU=",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I also hit the need for this feature.\r\n\r\nAnd I've made an observation that for `PyObject*` fields Cython also does not automatically generate `tp_traverse` and `tp_clear` methods:\r\n\r\n---- 8< ---- `x.pyx`\r\n```pyx\r\nfrom cpython cimport PyObject\r\n\r\ncdef class MyClass:\r\n    cdef PyObject* linked_obj\r\n```\r\n\r\n---- 8< ---- `x.c`\r\n```c\r\n/* \"x.pyx\":3 \r\n * from cpython cimport PyObject\r\n * \r\n * cdef class MyClass:             # <<<<<<<<<<<<<<\r\n *     cdef PyObject* linked_obj\r\n */\r\nstruct __pyx_obj_1x_MyClass {\r\n  PyObject_HEAD\r\n  PyObject *linked_obj;\r\n};\r\n\r\n...\r\n\r\nstatic PyTypeObject __pyx_type_1x_MyClass = {\r\n  PyVarObject_HEAD_INIT(0, 0)\r\n  \"x.\"\"MyClass\", /*tp_name*/\r\n  sizeof(struct __pyx_obj_1x_MyClass), /*tp_basicsize*/\r\n  ...\r\n  0, /*tp_traverse*/\r\n  0, /*tp_clear*/\r\n  ...\r\n};\r\n```\r\n\r\nHere `tp_traverse` and `tp_clear` are NULL and the user is expected to manually provide their implementations as suggested above.\r\n\r\nBut in my understanding there are a lot of code that embeds `PyObject*` - not  `object`, while there is only a few examples of custom tp_traverse and tp_clear overrides.\r\n\r\nSo all those codes currently leak memory if the linked object can lead to cycle.\r\n",
            "created_at": "2024-04-02T10:47:08Z",
            "html_url": "https://github.com/cython/cython/issues/2737#issuecomment-2031673717",
            "id": 2031673717,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2737",
            "node_id": "IC_kwDOABDGAc55GOF1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2031673717/reactions"
            },
            "updated_at": "2024-04-02T10:47:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2031673717",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1794248?v=4",
                "events_url": "https://api.github.com/users/navytux/events{/privacy}",
                "followers_url": "https://api.github.com/users/navytux/followers",
                "following_url": "https://api.github.com/users/navytux/following{/other_user}",
                "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/navytux",
                "id": 1794248,
                "login": "navytux",
                "node_id": "MDQ6VXNlcjE3OTQyNDg=",
                "organizations_url": "https://api.github.com/users/navytux/orgs",
                "received_events_url": "https://api.github.com/users/navytux/received_events",
                "repos_url": "https://api.github.com/users/navytux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/navytux"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> And I've made an observation that for `PyObject*` fields Cython also does not automatically generate `tp_traverse` and `tp_clear` methods\r\n\r\nThat is intended. `PyObject*` is not a reference, it's a pointer. \r\n\r\n> So all those codes currently leak memory if the linked object can lead to cycle.\r\n\r\nIf it's relevant for reference counting or garbage collection, then `PyObject*` is the wrong choice. The pointer type is intended to *exclude* Python object pointers from reference counting. If users don't want to exclude (or \"hide\" or \"borrow\") a pointer to a Python object from Python's memory management, then they shouldn't use `PyObject*` for it.",
            "created_at": "2024-04-02T12:15:01Z",
            "html_url": "https://github.com/cython/cython/issues/2737#issuecomment-2031884112",
            "id": 2031884112,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2737",
            "node_id": "IC_kwDOABDGAc55HBdQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2031884112/reactions"
            },
            "updated_at": "2024-04-02T12:15:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2031884112",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@scoder, thanks for feedback. I see your point. Yes, when `PyObject*` is used it is not a python reference, but more is a C pointer. Still sometimes `PyObject*` needs to be used - for example when an object to refer to might be NULL. Then the user need to care to manually Py_INCREF/Py_DECREF and Py_CLEAR. My point was that in that case there is currently no way built into Cython to support cyclic garbage collection at all.",
            "created_at": "2024-04-02T12:39:19Z",
            "html_url": "https://github.com/cython/cython/issues/2737#issuecomment-2031935031",
            "id": 2031935031,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2737",
            "node_id": "IC_kwDOABDGAc55HN43",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2031935031/reactions"
            },
            "updated_at": "2024-04-02T12:39:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2031935031",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1794248?v=4",
                "events_url": "https://api.github.com/users/navytux/events{/privacy}",
                "followers_url": "https://api.github.com/users/navytux/followers",
                "following_url": "https://api.github.com/users/navytux/following{/other_user}",
                "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/navytux",
                "id": 1794248,
                "login": "navytux",
                "node_id": "MDQ6VXNlcjE3OTQyNDg=",
                "organizations_url": "https://api.github.com/users/navytux/orgs",
                "received_events_url": "https://api.github.com/users/navytux/received_events",
                "repos_url": "https://api.github.com/users/navytux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/navytux"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2737/comments",
    "created_at": "2018-11-28T05:27:37Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-11-28T18:20:04Z",
            "event": "labeled",
            "id": 1993224982,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE5OTMyMjQ5ODI=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1993224982"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-11-28T18:20:04Z",
            "event": "labeled",
            "id": 1993224993,
            "label": {
                "color": "444444",
                "name": "Cython Language Feature"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE5OTMyMjQ5OTM=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1993224993"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-04-02T12:39:20Z",
            "event": "mentioned",
            "id": 12325202352,
            "node_id": "MEE_lADOABDGAc4W9Ec0zwAAAALeo6mw",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/12325202352"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-04-02T12:39:20Z",
            "event": "subscribed",
            "id": 12325202385,
            "node_id": "SE_lADOABDGAc4W9Ec0zwAAAALeo6nR",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/12325202385"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2737/events",
    "html_url": "https://github.com/cython/cython/issues/2737",
    "id": 385107764,
    "labels": [
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425559948,
            "name": "Cython Language Feature",
            "node_id": "MDU6TGFiZWw0MjU1NTk5NDg=",
            "url": "https://api.github.com/repos/cython/cython/labels/Cython%20Language%20Feature"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2737/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzODUxMDc3NjQ=",
    "number": 2737,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/2737/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/2737/timeline",
    "title": "add custom code to tp_traverse and tp_clear?",
    "updated_at": "2024-04-02T12:39:19Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2737",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4429215?v=4",
        "events_url": "https://api.github.com/users/mdavidsaver/events{/privacy}",
        "followers_url": "https://api.github.com/users/mdavidsaver/followers",
        "following_url": "https://api.github.com/users/mdavidsaver/following{/other_user}",
        "gists_url": "https://api.github.com/users/mdavidsaver/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mdavidsaver",
        "id": 4429215,
        "login": "mdavidsaver",
        "node_id": "MDQ6VXNlcjQ0MjkyMTU=",
        "organizations_url": "https://api.github.com/users/mdavidsaver/orgs",
        "received_events_url": "https://api.github.com/users/mdavidsaver/received_events",
        "repos_url": "https://api.github.com/users/mdavidsaver/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mdavidsaver/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mdavidsaver/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mdavidsaver"
    }
}