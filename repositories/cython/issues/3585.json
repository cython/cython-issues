{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "The min/max reduction operators have been introduced for C/C++ with OpenMP 3.1. As far as I know, in the revision 3.0, only Fortran had those reduction operators.\r\n\r\nHere's an example.\r\n```cython\r\nfrom cython import parallel\r\n\r\ndef test():\r\n    cdef int i, best = 0\r\n    with nogil:\r\n        for i in parallel.prange(10):\r\n            best = max(best, i)\r\n```\r\n\r\nI guess it should be fairly straightforward to implement.\r\n\r\nBTW, I'm open workaround suggestions as I don't see any that work at the moment. I feel like there should be a way to express it like this:\r\n```cython\r\nfrom cython import parallel\r\ndef test():\r\n    cdef int i, threadbest, globalbest = 0\r\n\r\n    with nogil, parallel.parallel():\r\n        # threadbest is thread-local\r\n        threadbest = 0\r\n\r\n        for i in parallel.prange(10):\r\n            threadbest = max(threadbest, i)\r\n\r\n        # This should be in a critical section\r\n        globalbest = max(globalbest, threadbest)\r\n\r\n    return globalbest\r\n```\r\nWhich should probably produce a code that looks like this:\r\n```C\r\nint test(void) {\r\n\tint i, threadbest, globalbest = 0;\r\n\r\n\t#pragma omp parallel private(threadbest, i) shared(globalbest)\r\n\t{\r\n\t\tthreadbest = 0;\r\n\r\n\t\t#pragma omp for\r\n\t\tfor (i = 0; i < 10; i++) {\r\n\t\t\tthreadbest = max(threadbest, i);\r\n\t\t}\r\n\r\n\t\t#pragma omp critical\r\n\t\tglobalbest = max(globalbest, threadbest);\r\n\t}\r\n\r\n\treturn globalbest;\r\n}\r\n```\r\nBut I don't see a way to achieve this with cython at the moment.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "For what it's worth, I found a way to sidestep the analyzer by using pointers and replaced the critical section with an explicit lock.\r\n\r\n```cython\r\nfrom cython import parallel\r\ncimport openmp as omp\r\n\r\ndef main():\r\n    cdef int i, threadbest, globalbest = 0\r\n    cdef int *pthreadbest\r\n    cdef int *pglobalbest\r\n    cdef omp.omp_lock_t mutex\r\n\r\n    pglobalbest = &globalbest\r\n    omp.omp_init_lock(&mutex)\r\n\r\n    with nogil, parallel.parallel():\r\n        # threadbest is thread-local\r\n        threadbest = 0\r\n        pthreadbest = &threadbest\r\n\r\n        for i in parallel.prange(10):\r\n            pthreadbest[0] = max(pthreadbest[0], i)\r\n\r\n        # This should be in a critical section\r\n        omp.omp_set_lock(&mutex)\r\n        pglobalbest[0] = max(pglobalbest[0], threadbest)\r\n        omp.omp_unset_lock(&mutex)\r\n\r\n    omp.omp_destroy_lock(&mutex)\r\n\r\n    return globalbest\r\n```\r\n\r\nI understand cython want to remain easy for beginners, but I don't think it should do so by getting in the way of more advanced users.",
            "created_at": "2020-05-07T14:32:59Z",
            "html_url": "https://github.com/cython/cython/issues/3585#issuecomment-625292054",
            "id": 625292054,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3585",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTI5MjA1NA==",
            "updated_at": "2020-05-07T14:42:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625292054",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
                "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
                "followers_url": "https://api.github.com/users/Celelibi/followers",
                "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Celelibi",
                "id": 6136274,
                "login": "Celelibi",
                "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
                "organizations_url": "https://api.github.com/users/Celelibi/orgs",
                "received_events_url": "https://api.github.com/users/Celelibi/received_events",
                "repos_url": "https://api.github.com/users/Celelibi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Celelibi"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Could you also work around these functions by spelling out the comparisons?\r\n\r\nAdding these functions seems a backwards incompatible change for code that uses them currently without expecting a reduction.\r\n\r\nBut most importantly, the current distinction between `a += x` making `a` a reduction variable but not `a = a + x` seems explainable, but arbitrary calls to `min()` and `max()` having an impact on the variable being assigned to seems surprising. Think of more complex calls like `a = 20 * max(x, a, y) - 2`. What if there is no immediate assignment to `a` here but another intermediate step like\r\n```cython\r\n    tmp = 20 * max(x, a, y)\r\n    a = tmp - 2\r\n```\r\nIt doesn't seem easily explainable to me that this does not make `a` a reduction variable for the `max()` function, although it seems to do exactly the same thing as the one-line expression.",
            "created_at": "2020-05-08T06:16:10Z",
            "html_url": "https://github.com/cython/cython/issues/3585#issuecomment-625653252",
            "id": 625653252,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3585",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTY1MzI1Mg==",
            "updated_at": "2020-05-08T06:16:10Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625653252",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "I wasn't necessarily suggesting to support detecting a min/max reduction like it is done with in-place operators. Although that's the first thing that came to my mind as well, I now think a more general support for parallelism would be needed. Should I open another issue for that?\r\n\r\nI completely understand your concerns about detecting the min/max reduction. Which I think are summed up in the Zen of Python with:\r\n> Explicit is better than implicit.\r\n\r\nThe special support for the in-place operators is an implicit magic. But it's hidden by the fact that the parallel program has the same semantics of the sequential program. But this comes at the price of rejecting any non-trivially-parallelizable programs. Like `for i in prange(10): a = 10 * a + i`. \r\n\r\nSupporting those would mean doing some pretty complex code analysis. (Undecidable in the general case.) Moreover, the best parallel algorithm often doesn't look like the best serial one. I don't think cython want to go down the road of automatic parallelization.\r\nSo I guess in any non-trivial case, the parallelization need to be explicitely handled by the programmer. Then cython would just do a minimal amount of translation.\r\n\r\n> Could you also work around these functions by spelling out the comparisons?\r\n\r\nAre you talking about my [workaround above](https://github.com/cython/cython/issues/3585#issuecomment-625292054)? Yes it's completely generic as far as I know. Here's an example that find the index of the max value without using the functions `max`.\r\n\r\n```cython\r\nfrom cython import parallel\r\ncimport openmp as omp\r\n\r\ndef main():\r\n    cdef int i, threadbest, threadbestidx, globalbest = 0, globalbestidx = -1\r\n    cdef int *pthreadbest\r\n    cdef int *pthreadbestidx\r\n    cdef int *pglobalbest\r\n    cdef int *pglobalbestidx\r\n    cdef int value\r\n    cdef omp.omp_lock_t mutex\r\n\r\n    pglobalbest = &globalbest\r\n    pglobalbestidx = &globalbestidx\r\n    omp.omp_init_lock(&mutex)\r\n\r\n    with nogil, parallel.parallel():\r\n        # Thread-local variables\r\n        threadbest = 0\r\n        pthreadbest = &threadbest\r\n        threadbestidx = -1\r\n        pthreadbestidx = &threadbestidx\r\n\r\n        for i in parallel.prange(100):\r\n            value = i**2\r\n            if value > pthreadbest[0]:\r\n                pthreadbest[0] = value\r\n                pthreadbestidx[0] = i\r\n\r\n        # This should be in a critical section\r\n        omp.omp_set_lock(&mutex)\r\n        if threadbest > pglobalbest[0]:\r\n            pglobalbest[0] = threadbest\r\n            pglobalbestidx[0] = threadbestidx\r\n        omp.omp_unset_lock(&mutex)\r\n\r\n    omp.omp_destroy_lock(&mutex)\r\n\r\n    return globalbestidx, globalbest\r\n```\r\nYou can notice that for every variable involved in the reduction, there's also a pointer to modify the original variable. Effectively doubling the number of variables compared to a situation where cython would allow to specify the data-sharing mode explicitely.\r\nYou can also notice that every variable holding the result of the reduction has a thread-local counter-part. Doubling again the number of variable compared to a situation where the reduction feature could be used. So that's 4 times the number of variables. I definitely think it hurts readability.\r\n\r\nAs a fix to this issue I have the following suggestions (not necessarily mutually exclusive).\r\n- Put the workaround in the documentation to save people time and show your awareness of the limitations.\r\n- Add a `cython.parallel.critical` context manager to avoid an explicit reference to openmp in the workaround so that it's still compilable without openmp.\r\n- Add an `expert` argument to `cython.parallel.parallel` that would just disable cython's restriction of assignment to variables private in outer block.\r\n- Add some arguments to `cython.parallel.parallel` and/or `cython.parallel.prange` to indicate the data-sharing mode of the variables and selectively enable the *expert* mode on those variables.\r\n- Add arguments to `cython.parallel.parallel` and `cython.parallel.prange` to explicitely tell the reduction operator and variable.\r\n- Extend the reduction syntax above to allow any callable (python or C) as a reduction operator and either generate a code similar to the workaround or use the openmp [`declare reduction`](https://www.openmp.org/spec-html/5.0/openmpsu107.html#x140-6020002.19.5.7) syntax.\r\n\r\nI'm not very happy with the suggestion about arguments to `parallel()` / `prange()`. Arguments could be any arbitrary expressions when it has to be variable names only. But I can't think of a better suggestion right now.",
            "created_at": "2020-05-08T18:47:38Z",
            "html_url": "https://github.com/cython/cython/issues/3585#issuecomment-625961911",
            "id": 625961911,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3585",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTk2MTkxMQ==",
            "updated_at": "2020-05-09T13:29:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625961911",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
                "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
                "followers_url": "https://api.github.com/users/Celelibi/followers",
                "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Celelibi",
                "id": 6136274,
                "login": "Celelibi",
                "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
                "organizations_url": "https://api.github.com/users/Celelibi/orgs",
                "received_events_url": "https://api.github.com/users/Celelibi/received_events",
                "repos_url": "https://api.github.com/users/Celelibi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Celelibi"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3585/comments",
    "created_at": "2020-05-07T13:08:19Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-08T06:04:08Z",
            "event": "labeled",
            "id": 3315709663,
            "label": {
                "color": "444444",
                "name": "Cython Language Feature"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMzMTU3MDk2NjM=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3315709663"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-08T06:04:08Z",
            "event": "labeled",
            "id": 3315709666,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMzMTU3MDk2NjY=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3315709666"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3585/events",
    "html_url": "https://github.com/cython/cython/issues/3585",
    "id": 614044351,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425559948,
            "name": "Cython Language Feature",
            "node_id": "MDU6TGFiZWw0MjU1NTk5NDg=",
            "url": "https://api.github.com/repos/cython/cython/labels/Cython%20Language%20Feature"
        },
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3585/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2MTQwNDQzNTE=",
    "number": 3585,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Support for OpenMP min/max reduction",
    "updated_at": "2020-05-09T13:29:19Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3585",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
        "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
        "followers_url": "https://api.github.com/users/Celelibi/followers",
        "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
        "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Celelibi",
        "id": 6136274,
        "login": "Celelibi",
        "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
        "organizations_url": "https://api.github.com/users/Celelibi/orgs",
        "received_events_url": "https://api.github.com/users/Celelibi/received_events",
        "repos_url": "https://api.github.com/users/Celelibi/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Celelibi"
    }
}