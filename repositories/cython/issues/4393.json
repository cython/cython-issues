{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "The C code generated for a for-loop over a 1D ndarray looks like it isn't taking type information into account:\r\n\r\n```\r\ndef v1(int length):\r\n    cdef:\r\n        ndarray[intp_t, ndim=1] values = np.arange(length, dtype=np.intp)\r\n        intp_t val, result\r\n\r\n    result = 0\r\n    for val in values:\r\n        result = result + val\r\n\r\n    return result\r\n\r\n\r\ndef v2(int length):\r\n    cdef:\r\n        ndarray[intp_t, ndim=1] values = np.arange(length, dtype=np.intp)\r\n        intp_t n, val, result\r\n\r\n    result = 0\r\n    for n in range(length):\r\n        val = values[n]\r\n        result = result + val\r\n\r\n    return result    \r\n\r\n\r\nIn [63]: %timeit v1(10)\r\n1.72 µs ± 97.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [64]: %timeit v2(10)\r\n660 ns ± 22.4 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [65]: %timeit v1(10**6)\r\n49.9 ms ± 1.76 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\r\n\r\nIn [66]: %timeit v2(10**6)\r\n712 µs ± 42.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\r\n```\r\n\r\nThe code generated corresponding to `for val in values`:\r\n\r\n```\r\n  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_values))) || PyTuple_CheckExact(((PyObject *)__pyx_v_values))) {\r\n    __pyx_t_5 = ((PyObject *)__pyx_v_values); __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;\r\n    __pyx_t_8 = NULL;\r\n  } else {\r\n    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(((PyObject *)__pyx_v_values)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 829, __pyx_L1_error)\r\n    __Pyx_GOTREF(__pyx_t_5);\r\n    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 829, __pyx_L1_error)\r\n  }\r\n  for (;;) {\r\n    if (likely(!__pyx_t_8)) {\r\n      if (likely(PyList_CheckExact(__pyx_t_5))) {\r\n        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;\r\n        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\r\n        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 829, __pyx_L1_error)\r\n        #else\r\n        __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)\r\n        __Pyx_GOTREF(__pyx_t_1);\r\n        #endif\r\n      } else {\r\n        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;\r\n        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\r\n        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 829, __pyx_L1_error)\r\n        #else\r\n        __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)\r\n        __Pyx_GOTREF(__pyx_t_1);\r\n        #endif\r\n      }\r\n    } else {\r\n      __pyx_t_1 = __pyx_t_8(__pyx_t_5);\r\n      if (unlikely(!__pyx_t_1)) {\r\n        PyObject* exc_type = PyErr_Occurred();\r\n        if (exc_type) {\r\n          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();\r\n          else __PYX_ERR(0, 829, __pyx_L1_error)\r\n        }\r\n        break;\r\n      }\r\n      __Pyx_GOTREF(__pyx_t_1);\r\n    }\r\n    __pyx_t_9 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_9 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L1_error)\r\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\r\n    __pyx_v_val = __pyx_t_9;\r\n/* … */\r\n  }\r\n```\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "I had a look at this when I did the memoryview iteration optimization and it didn't look to be hugely easy (or certainly not to do with the same mechanism). I recall the problem was that we can't make `ndarray` temps.\r\n\r\nThat isn't too say that it shouldn't be improved of course, but this may be an example of why Cython switched to memoryviews - they're easier to handle internally",
            "created_at": "2021-10-04T06:35:15Z",
            "html_url": "https://github.com/cython/cython/issues/4393#issuecomment-933187837",
            "id": 933187837,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4393",
            "node_id": "IC_kwDOABDGAc43n1D9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/933187837/reactions"
            },
            "updated_at": "2021-10-04T06:35:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/933187837",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Makes sense.  Shouldn't it be able to figure out the PyList_CheckExact/PyTuple_CheckExact ex-ante? I guess that'd not be that important perf-wise?",
            "created_at": "2021-10-04T16:54:42Z",
            "html_url": "https://github.com/cython/cython/issues/4393#issuecomment-933671008",
            "id": 933671008,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4393",
            "node_id": "IC_kwDOABDGAc43prBg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/933671008/reactions"
            },
            "updated_at": "2021-10-04T16:54:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/933671008",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8078968?v=4",
                "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
                "followers_url": "https://api.github.com/users/jbrockmendel/followers",
                "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
                "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jbrockmendel",
                "id": 8078968,
                "login": "jbrockmendel",
                "node_id": "MDQ6VXNlcjgwNzg5Njg=",
                "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
                "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
                "repos_url": "https://api.github.com/users/jbrockmendel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jbrockmendel"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4393/comments",
    "created_at": "2021-10-04T01:28:44Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4393/events",
    "html_url": "https://github.com/cython/cython/issues/4393",
    "id": 1014634320,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4393/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc48ehdQ",
    "number": 4393,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4393/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4393/timeline",
    "title": "[ENH] ndarray[ndim=1].__iter__ optimization",
    "updated_at": "2021-10-04T16:54:43Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4393",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8078968?v=4",
        "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
        "followers_url": "https://api.github.com/users/jbrockmendel/followers",
        "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
        "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jbrockmendel",
        "id": 8078968,
        "login": "jbrockmendel",
        "node_id": "MDQ6VXNlcjgwNzg5Njg=",
        "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
        "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
        "repos_url": "https://api.github.com/users/jbrockmendel/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jbrockmendel"
    }
}