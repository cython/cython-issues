{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nThe `cythonize` function gets a glob pattern or list of `Extension` objects with glob patters as `module_list`. When using a namespace package, the source glob patterns still match the correct files (thanks to #2946?), but the `Extension.name` attributes returned by `cythonize` are missing the namespace package names. This is due to the implementation of the `fully_qualified_name` function which only regards folders containing an `__init__` file as packages.\r\n\r\nFor example, in the code to reproduce, `nsp` is a namespace package and `nsp.m1` is a subpackage with files `__init__.py` and `a.pyx`. The `cythonize` call converts `Extension(\"nsp.*\", [\"nsp/**/*.pyx\"])` to `Extension(\"m1.a\", [\"nsp/m1/a.c\"])` (missing `nsp.`).\n\n### Code to reproduce the behaviour:\n\nThe following test is a slight modification of the existing `build/cythonize_pep420_namespace.srctree` test. Only the argument of `cythonize` is changed to have glob patterns. By doing this, the test fails.\r\n\r\n```\r\n# tests/build/cythonize_pep420_namespace_glob.srctree\r\nPYTHON setup.py build_ext --inplace\r\nPYTHON -c \"import runner\"\r\n\r\n######## setup.py ########\r\n\r\nfrom Cython.Build.Dependencies import cythonize\r\n\r\nfrom distutils.core import setup, Extension\r\n\r\nsetup(\r\n  ext_modules=cythonize([\r\n    Extension(\"nsp.*\", [\"nsp/**/*.pyx\"]),\r\n  ]),\r\n)\r\n\r\n######## nsp/m1/__init__.py ########\r\n\r\n######## nsp/m1/a.pyx ########\r\n\r\ncdef class A:\r\n    pass\r\n\r\n######## nsp/m1/a.pxd ########\r\n\r\ncdef class A:\r\n    pass\r\n\r\n######## nsp/m2/__init__.py ########\r\n\r\n######## nsp/m2/b.pyx ########\r\n\r\nfrom nsp.m1.a cimport A\r\nfrom nsp.m3.c.d cimport D\r\n\r\ncdef class B(A):\r\n    pass\r\n\r\n######## nsp/m3/__init__.py ########\r\n\r\n######## nsp/m3/c/d.pyx ########\r\n\r\ncdef class D:\r\n  pass\r\n\r\n######## nsp/m3/c/d.pxd ########\r\n\r\ncdef class D:\r\n  pass\r\n\r\n######## runner.py ########\r\n\r\nfrom nsp.m1.a import A\r\nfrom nsp.m2.b import B\r\nfrom nsp.m3.c.d import D\r\n\r\na = A()\r\nb = B()\r\n```\r\n\r\nOutput:\r\n```\r\n$ python runtests.py -vv build.cythonize_pep420_namespace_glob\r\nPython 3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0]\r\n\r\nRunning tests against Cython 3.0.0a12.dev0 d888842ed8efec0d859dc5978900bb08161d7835 + uncommitted changes\r\nUsing Cython language level 2.\r\nTest dependency not found: 'numpy'\r\nTest dependency not found: 'pythran'\r\nTest dependency found: 'setuptools.sandbox' version 65.5.1\r\nTest dependency found: 'asyncio' version 3.10.6\r\nTest dependency found: 'pstats' version 3.10.6\r\nTest dependency found: 'posix' version 3.10.6\r\nTest dependency found: 'array' version 3.10.6\r\nTest dependency not found: 'Cython.Coverage'\r\nTest dependency not found: 'Cython.Coverage'\r\nTest dependency not found: 'IPython.testing.globalipapp'\r\nTest dependency not found: 'jedi_BROKEN_AND_DISABLED'\r\nTest dependency found: 'test.support' version 3.10.6\r\nBackends: c,cpp\r\n\r\nrunTest (__main__.EndToEndTest)\r\n[-1] End-to-end cythonize_pep420_namespace_glob ... [-1] ['/.../cython/env/bin/python', 'setup.py', 'build_ext', '--inplace']\r\nCompiling nsp/m1/a.pyx because it changed.\r\nCompiling nsp/m2/b.pyx because it changed.\r\nCompiling nsp/m3/c/d.pyx because it changed.\r\n[1/3] Cythonizing nsp/m1/a.pyx\r\n[2/3] Cythonizing nsp/m2/b.pyx\r\n[3/3] Cythonizing nsp/m3/c/d.pyx\r\nrunning build_ext\r\nbuilding 'm1.a' extension\r\ncreating build\r\ncreating build/temp.linux-x86_64-cpython-310\r\ncreating build/temp.linux-x86_64-cpython-310/nsp\r\ncreating build/temp.linux-x86_64-cpython-310/nsp/m1\r\nx86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC -I/.../cython/env/include -I/usr/include/python3.10 -c nsp/m1/a.c -o build/temp.linux-x86_64-cpython-310/nsp/m1/a.o\r\ncreating build/lib.linux-x86_64-cpython-310\r\ncreating build/lib.linux-x86_64-cpython-310/m1\r\nx86_64-linux-gnu-gcc -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -g -fwrapv -O2 build/temp.linux-x86_64-cpython-310/nsp/m1/a.o -L/usr/lib/x86_64-linux-gnu -o build/lib.linux-x86_64-cpython-310/m1/a.cpython-310-x86_64-linux-gnu.so\r\nbuilding 'm2.b' extension\r\ncreating build/temp.linux-x86_64-cpython-310/nsp/m2\r\nx86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC -I/.../cython/env/include -I/usr/include/python3.10 -c nsp/m2/b.c -o build/temp.linux-x86_64-cpython-310/nsp/m2/b.o\r\ncreating build/lib.linux-x86_64-cpython-310/m2\r\nx86_64-linux-gnu-gcc -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -g -fwrapv -O2 build/temp.linux-x86_64-cpython-310/nsp/m2/b.o -L/usr/lib/x86_64-linux-gnu -o build/lib.linux-x86_64-cpython-310/m2/b.cpython-310-x86_64-linux-gnu.so\r\nbuilding 'd' extension\r\ncreating build/temp.linux-x86_64-cpython-310/nsp/m3\r\ncreating build/temp.linux-x86_64-cpython-310/nsp/m3/c\r\nx86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC -I/.../cython/env/include -I/usr/include/python3.10 -c nsp/m3/c/d.c -o build/temp.linux-x86_64-cpython-310/nsp/m3/c/d.o\r\nx86_64-linux-gnu-gcc -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -g -fwrapv -O2 build/temp.linux-x86_64-cpython-310/nsp/m3/c/d.o -L/usr/lib/x86_64-linux-gnu -o build/lib.linux-x86_64-cpython-310/d.cpython-310-x86_64-linux-gnu.so\r\ncopying build/lib.linux-x86_64-cpython-310/m1/a.cpython-310-x86_64-linux-gnu.so -> m1\r\n\r\n/.../cython/Cython/Compiler/Main.py:370: FutureWarning: Cython directive 'language_level' not set, using '3str' for now (Py3). This has changed from earlier releases! File: /.../cython/TEST_TMP/build/cythonize_pep420_namespace_glob/nsp/m1/a.pxd\r\n  tree = Parsing.p_module(s, pxd, full_module_name)\r\n/.../cython/Cython/Compiler/Main.py:370: FutureWarning: Cython directive 'language_level' not set, using '3str' for now (Py3). This has changed from earlier releases! File: /.../cython/TEST_TMP/build/cythonize_pep420_namespace_glob/nsp/m2/b.pyx\r\n  tree = Parsing.p_module(s, pxd, full_module_name)\r\n/.../cython/Cython/Compiler/Main.py:370: FutureWarning: Cython directive 'language_level' not set, using '3str' for now (Py3). This has changed from earlier releases! File: /.../cython/TEST_TMP/build/cythonize_pep420_namespace_glob/nsp/m3/c/d.pxd\r\n  tree = Parsing.p_module(s, pxd, full_module_name)\r\nerror: could not create 'm1/a.cpython-310-x86_64-linux-gnu.so': No such file or directory\r\n\r\n\r\nFinal directory layout of 'cythonize_pep420_namespace_glob':\r\n./setup.py\r\n./runner.py\r\n./nsp/m3/__init__.py\r\n./nsp/m3/c/d.c\r\n./nsp/m3/c/d.pyx\r\n./nsp/m3/c/d.pxd\r\n./nsp/m2/b.pyx\r\n./nsp/m2/__init__.py\r\n./nsp/m2/b.c\r\n./nsp/m1/a.pyx\r\n./nsp/m1/a.pxd\r\n./nsp/m1/__init__.py\r\n./nsp/m1/a.c\r\n./build/temp.linux-x86_64-cpython-310/nsp/m3/c/d.o\r\n./build/temp.linux-x86_64-cpython-310/nsp/m2/b.o\r\n./build/temp.linux-x86_64-cpython-310/nsp/m1/a.o\r\n./build/lib.linux-x86_64-cpython-310/d.cpython-310-x86_64-linux-gnu.so\r\n./build/lib.linux-x86_64-cpython-310/m2/b.cpython-310-x86_64-linux-gnu.so\r\n./build/lib.linux-x86_64-cpython-310/m1/a.cpython-310-x86_64-linux-gnu.so\r\n\r\nFAIL\r\n\r\n======================================================================\r\nFAIL: runTest (__main__.EndToEndTest)\r\n[-1] End-to-end cythonize_pep420_namespace_glob\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/.../cython/runtests.py\", line 1994, in runTest\r\n    self.assertEqual(0, res, \"non-zero exit status, last output was:\\n%r\\n-- stdout:%s\\n-- stderr:%s\\n\" % (\r\nAssertionError: 0 != 1 : non-zero exit status, last output was:\r\n'/.../cython/env/bin/python setup.py build_ext --inplace'\r\n-- stdout:Compiling nsp/m1/a.pyx because it changed.\r\nCompiling nsp/m2/b.pyx because it changed.\r\nCompiling nsp/m3/c/d.pyx because it changed.\r\n[1/3] Cythonizing nsp/m1/a.pyx\r\n[2/3] Cythonizing nsp/m2/b.pyx\r\n[3/3] Cythonizing nsp/m3/c/d.pyx\r\nrunning build_ext\r\nbuilding 'm1.a' extension\r\ncreating build\r\ncreating build/temp.linux-x86_64-cpython-310\r\ncreating build/temp.linux-x86_64-cpython-310/nsp\r\ncreating build/temp.linux-x86_64-cpython-310/nsp/m1\r\nx86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC -I/.../cython/env/include -I/usr/include/python3.10 -c nsp/m1/a.c -o build/temp.linux-x86_64-cpython-310/nsp/m1/a.o\r\ncreating build/lib.linux-x86_64-cpython-310\r\ncreating build/lib.linux-x86_64-cpython-310/m1\r\nx86_64-linux-gnu-gcc -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -g -fwrapv -O2 build/temp.linux-x86_64-cpython-310/nsp/m1/a.o -L/usr/lib/x86_64-linux-gnu -o build/lib.linux-x86_64-cpython-310/m1/a.cpython-310-x86_64-linux-gnu.so\r\nbuilding 'm2.b' extension\r\ncreating build/temp.linux-x86_64-cpython-310/nsp/m2\r\nx86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC -I/.../cython/env/include -I/usr/include/python3.10 -c nsp/m2/b.c -o build/temp.linux-x86_64-cpython-310/nsp/m2/b.o\r\ncreating build/lib.linux-x86_64-cpython-310/m2\r\nx86_64-linux-gnu-gcc -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -g -fwrapv -O2 build/temp.linux-x86_64-cpython-310/nsp/m2/b.o -L/usr/lib/x86_64-linux-gnu -o build/lib.linux-x86_64-cpython-310/m2/b.cpython-310-x86_64-linux-gnu.so\r\nbuilding 'd' extension\r\ncreating build/temp.linux-x86_64-cpython-310/nsp/m3\r\ncreating build/temp.linux-x86_64-cpython-310/nsp/m3/c\r\nx86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC -I/.../cython/env/include -I/usr/include/python3.10 -c nsp/m3/c/d.c -o build/temp.linux-x86_64-cpython-310/nsp/m3/c/d.o\r\nx86_64-linux-gnu-gcc -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -g -fwrapv -O2 build/temp.linux-x86_64-cpython-310/nsp/m3/c/d.o -L/usr/lib/x86_64-linux-gnu -o build/lib.linux-x86_64-cpython-310/d.cpython-310-x86_64-linux-gnu.so\r\ncopying build/lib.linux-x86_64-cpython-310/m1/a.cpython-310-x86_64-linux-gnu.so -> m1\r\n\r\n-- stderr:/.../cython/Cython/Compiler/Main.py:370: FutureWarning: Cython directive 'language_level' not set, using '3str' for now (Py3). This has changed from earlier releases! File: /.../cython/TEST_TMP/build/cythonize_pep420_namespace_glob/nsp/m1/a.pxd\r\n  tree = Parsing.p_module(s, pxd, full_module_name)\r\n/.../cython/Cython/Compiler/Main.py:370: FutureWarning: Cython directive 'language_level' not set, using '3str' for now (Py3). This has changed from earlier releases! File: /.../cython/TEST_TMP/build/cythonize_pep420_namespace_glob/nsp/m2/b.pyx\r\n  tree = Parsing.p_module(s, pxd, full_module_name)\r\n/.../cython/Cython/Compiler/Main.py:370: FutureWarning: Cython directive 'language_level' not set, using '3str' for now (Py3). This has changed from earlier releases! File: /.../cython/TEST_TMP/build/cythonize_pep420_namespace_glob/nsp/m3/c/d.pxd\r\n  tree = Parsing.p_module(s, pxd, full_module_name)\r\nerror: could not create 'm1/a.cpython-310-x86_64-linux-gnu.so': No such file or directory\r\n\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 5.415s\r\n\r\nFAILED (failures=1)\r\nMost expensive pipeline stages: \r\nTimes:\r\netoe-build  :     5.40 sec  (   1,  5.402 / run) - slowest: 'c:cythonize_pep420_namespace_glob(1)' (5.40s)\r\nALL DONE\r\n```\n\n### Expected behaviour\n\nThe `name` of `Extension` objects return by `cythonize` should include namespace packages.\r\n\r\nI'm not sure how a better implementation of `fully_qualified_name` should look like since every parent directory could be a namespace package.\n\n### Environment\n\nOS: Linux\r\nPython 3.10.6\r\nCython 3.0.0a11\r\n\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "It should probably support a way to name the root of the hierarchy, similar to how setuptools installs pure python packages.\r\n\r\nAnother manifestation of this issue, probably, is that `cythonize(['src/mymodule/*.py'])` does not work either. But it's not limited to globs: `cythonize -b src/mymodule/foobar/baz.py` doesn't work, too.",
            "created_at": "2023-09-20T11:15:26Z",
            "html_url": "https://github.com/cython/cython/issues/5237#issuecomment-1727520302",
            "id": 1727520302,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5237",
            "node_id": "IC_kwDOABDGAc5m994u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1727520302/reactions"
            },
            "updated_at": "2023-09-20T11:16:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1727520302",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6551424?v=4",
                "events_url": "https://api.github.com/users/eli-schwartz/events{/privacy}",
                "followers_url": "https://api.github.com/users/eli-schwartz/followers",
                "following_url": "https://api.github.com/users/eli-schwartz/following{/other_user}",
                "gists_url": "https://api.github.com/users/eli-schwartz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/eli-schwartz",
                "id": 6551424,
                "login": "eli-schwartz",
                "node_id": "MDQ6VXNlcjY1NTE0MjQ=",
                "organizations_url": "https://api.github.com/users/eli-schwartz/orgs",
                "received_events_url": "https://api.github.com/users/eli-schwartz/received_events",
                "repos_url": "https://api.github.com/users/eli-schwartz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/eli-schwartz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/eli-schwartz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/eli-schwartz"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5237/comments",
    "created_at": "2023-02-01T15:33:38Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5237/events",
    "html_url": "https://github.com/cython/cython/issues/5237",
    "id": 1566331858,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5237/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5dXFPS",
    "number": 5237,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5237/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5237/timeline",
    "title": "[BUG] Building namespace packages does not work with glob patterns",
    "updated_at": "2023-09-20T11:16:19Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5237",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/515230?v=4",
        "events_url": "https://api.github.com/users/AlexElvers/events{/privacy}",
        "followers_url": "https://api.github.com/users/AlexElvers/followers",
        "following_url": "https://api.github.com/users/AlexElvers/following{/other_user}",
        "gists_url": "https://api.github.com/users/AlexElvers/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/AlexElvers",
        "id": 515230,
        "login": "AlexElvers",
        "node_id": "MDQ6VXNlcjUxNTIzMA==",
        "organizations_url": "https://api.github.com/users/AlexElvers/orgs",
        "received_events_url": "https://api.github.com/users/AlexElvers/received_events",
        "repos_url": "https://api.github.com/users/AlexElvers/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/AlexElvers/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AlexElvers/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/AlexElvers"
    }
}