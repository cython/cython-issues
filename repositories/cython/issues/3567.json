{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "In this example `return 10` is marked as not covered:\r\n```\r\ncdef fun1():\r\n    try:\r\n        return 5\r\n    finally:\r\n        return 10\r\n\r\ncpdef fun2():\r\n    return fun1()\r\n```\r\n\r\nIn contrast, everything is marked as covered with the following example;\r\n```\r\ncdef fun3():\r\n    try:\r\n        return 5\r\n    finally:\r\n        print(\"test\")\r\n        return 10\r\n\r\ncpdef fun4():\r\n    return fun3()\r\n```\r\n\r\nA minimal working example can be found here: https://github.com/rbuffat/CythonDebugFinally\r\nThe coverage result of this example can be found here: https://travis-ci.org/github/rbuffat/CythonDebugFinally/builds/681675996\r\n\r\n```\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.8.0, pytest-5.4.1, py-1.8.0, pluggy-0.13.0\r\nrootdir: /home/travis/build/rbuffat/CythonDebugFinally\r\nplugins: cov-2.8.1\r\ncollected 2 items                                                              \r\ntests/test_fun2.py .                                                     [ 50%]\r\ntests/test_fun4.py .                                                     [100%]\r\n----------- coverage: platform linux, python 3.8.0-final-0 -----------\r\nName                   Stmts   Miss  Cover   Missing\r\n----------------------------------------------------\r\ntryfinally/test.pyx        6      1    83%   5\r\ntryfinally/test2.pyx       7      0   100%\r\n----------------------------------------------------\r\nTOTAL                     13      1    92%\r\n```\r\n\r\nPython package versions: coverage-5.1 cython-0.29.17 pytest-5.4.1 pytest-cov-2.8.1\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Interesting. Probably due to differences in the syntax tree. If you want to debug this, look at `TryFinallyStatNode` in `Nodes.py` and the C code that it generates. Maybe there's just a `self.mark_pos()` missing somewhere, which would generate the C code comment that shows the Cython source code line. If that is missing, it won't go into the coverage analysis.",
            "created_at": "2020-05-02T06:40:39Z",
            "html_url": "https://github.com/cython/cython/issues/3567#issuecomment-622732554",
            "id": 622732554,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3567",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjczMjU1NA==",
            "updated_at": "2020-05-02T06:40:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/622732554",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm probably not a big help here, but in the cases it helps here is the C code of the relevant block for both cases:\r\n\r\n@scoder Is mark_pos() generating the `  __Pyx_TraceLine(5,0,__PYX_ERR(0, 5, __pyx_L1_error))` that is present in  ` __pyx_L3_return:` only in the case where the line is shown as covered?\r\n\r\nNo Coverage:\r\n```\r\n  __Pyx_TraceLine(5,0,__PYX_ERR(0, 5, __pyx_L4_error))\r\n  /*finally:*/ {\r\n    __pyx_L4_error:;\r\n    /*exception exit:*/{\r\n      __Pyx_PyThreadState_declare\r\n      __Pyx_PyThreadState_assign\r\n      __pyx_t_1 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0;\r\n      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);\r\n      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0)) __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);\r\n      __Pyx_XGOTREF(__pyx_t_1);\r\n      __Pyx_XGOTREF(__pyx_t_2);\r\n      __Pyx_XGOTREF(__pyx_t_3);\r\n      __Pyx_XGOTREF(__pyx_t_4);\r\n      __Pyx_XGOTREF(__pyx_t_5);\r\n      __Pyx_XGOTREF(__pyx_t_6);\r\n      {\r\n        __Pyx_XDECREF(__pyx_r);\r\n        __Pyx_INCREF(__pyx_int_10);\r\n        __pyx_r = __pyx_int_10;\r\n        goto __pyx_L6_return;\r\n      }\r\n      __pyx_L6_return:;\r\n      if (PY_MAJOR_VERSION >= 3) {\r\n        __Pyx_XGIVEREF(__pyx_t_4);\r\n        __Pyx_XGIVEREF(__pyx_t_5);\r\n        __Pyx_XGIVEREF(__pyx_t_6);\r\n        __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);\r\n      }\r\n      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\r\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\r\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\r\n      __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0;\r\n      goto __pyx_L0;\r\n    }\r\n    __pyx_L3_return: {\r\n      __Pyx_XDECREF(__pyx_r);\r\n      __Pyx_INCREF(__pyx_int_10);\r\n      __pyx_r = __pyx_int_10;\r\n      goto __pyx_L0;\r\n    }\r\n  }\r\n\r\n```\r\n\r\nCoverage:\r\n```\r\n  __Pyx_TraceLine(5,0,__PYX_ERR(0, 5, __pyx_L4_error))\r\n  /*finally:*/ {\r\n    __pyx_L4_error:;\r\n    /*exception exit:*/{\r\n      __Pyx_PyThreadState_declare\r\n      __Pyx_PyThreadState_assign\r\n      __pyx_t_1 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0;\r\n      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);\r\n      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0)) __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);\r\n      __Pyx_XGOTREF(__pyx_t_1);\r\n      __Pyx_XGOTREF(__pyx_t_2);\r\n      __Pyx_XGOTREF(__pyx_t_3);\r\n      __Pyx_XGOTREF(__pyx_t_4);\r\n      __Pyx_XGOTREF(__pyx_t_5);\r\n      __Pyx_XGOTREF(__pyx_t_6);\r\n      {\r\n        if (__Pyx_PrintOne(0, __pyx_n_s_test) < 0) __PYX_ERR(0, 5, __pyx_L7_error)\r\n\r\n        /* \"tryfinally/test2.pyx\":6\r\n *     finally:\r\n *         print(\"test\")\r\n *         return 10             # <<<<<<<<<<<<<<\r\n * \r\n * cpdef fun4():\r\n */\r\n        __Pyx_TraceLine(6,0,__PYX_ERR(0, 6, __pyx_L7_error))\r\n        __Pyx_XDECREF(__pyx_r);\r\n        __Pyx_INCREF(__pyx_int_10);\r\n        __pyx_r = __pyx_int_10;\r\n        goto __pyx_L6_return;\r\n      }\r\n      __pyx_L6_return:;\r\n      if (PY_MAJOR_VERSION >= 3) {\r\n        __Pyx_XGIVEREF(__pyx_t_4);\r\n        __Pyx_XGIVEREF(__pyx_t_5);\r\n        __Pyx_XGIVEREF(__pyx_t_6);\r\n        __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);\r\n      }\r\n      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\r\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\r\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\r\n      __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0;\r\n      goto __pyx_L0;\r\n      __pyx_L7_error:;\r\n      if (PY_MAJOR_VERSION >= 3) {\r\n        __Pyx_XGIVEREF(__pyx_t_4);\r\n        __Pyx_XGIVEREF(__pyx_t_5);\r\n        __Pyx_XGIVEREF(__pyx_t_6);\r\n        __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);\r\n      }\r\n      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\r\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\r\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\r\n      __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0;\r\n      goto __pyx_L1_error;\r\n    }\r\n    __pyx_L3_return: {\r\n\r\n      /* \"tryfinally/test2.pyx\":5\r\n *         return 5\r\n *     finally:\r\n *         print(\"test\")             # <<<<<<<<<<<<<<\r\n *         return 10\r\n * \r\n */\r\n      __Pyx_TraceLine(5,0,__PYX_ERR(0, 5, __pyx_L1_error))\r\n      if (__Pyx_PrintOne(0, __pyx_n_s_test) < 0) __PYX_ERR(0, 5, __pyx_L1_error)\r\n\r\n      /* \"tryfinally/test2.pyx\":6\r\n *     finally:\r\n *         print(\"test\")\r\n *         return 10             # <<<<<<<<<<<<<<\r\n * \r\n * cpdef fun4():\r\n */\r\n      __Pyx_TraceLine(6,0,__PYX_ERR(0, 6, __pyx_L1_error))\r\n      __Pyx_XDECREF(__pyx_r);\r\n      __Pyx_INCREF(__pyx_int_10);\r\n      __pyx_r = __pyx_int_10;\r\n      goto __pyx_L0;\r\n    }\r\n  }\r\n```",
            "created_at": "2020-05-02T15:59:05Z",
            "html_url": "https://github.com/cython/cython/issues/3567#issuecomment-622975276",
            "id": 622975276,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3567",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjk3NTI3Ng==",
            "updated_at": "2020-05-02T16:13:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/622975276",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/259530?v=4",
                "events_url": "https://api.github.com/users/rbuffat/events{/privacy}",
                "followers_url": "https://api.github.com/users/rbuffat/followers",
                "following_url": "https://api.github.com/users/rbuffat/following{/other_user}",
                "gists_url": "https://api.github.com/users/rbuffat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rbuffat",
                "id": 259530,
                "login": "rbuffat",
                "node_id": "MDQ6VXNlcjI1OTUzMA==",
                "organizations_url": "https://api.github.com/users/rbuffat/orgs",
                "received_events_url": "https://api.github.com/users/rbuffat/received_events",
                "repos_url": "https://api.github.com/users/rbuffat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rbuffat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rbuffat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rbuffat"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Just guessing, but something like this might fix it:\r\n```\r\ndiff --git a/Cython/Compiler/Nodes.py b/Cython/Compiler/Nodes.py\r\nindex 67c610cd9..73d6b7640 100644\r\n--- a/Cython/Compiler/Nodes.py\r\n+++ b/Cython/Compiler/Nodes.py\r\n@@ -7833,8 +7833,9 @@ class TryFinallyStatNode(StatNode):\r\n         code.putln(\"}\")\r\n \r\n         temps_to_clean_up = code.funcstate.all_free_managed_temps()\r\n-        code.mark_pos(self.finally_clause.pos)\r\n+        code.mark_pos(self.pos)\r\n         code.putln(\"/*finally:*/ {\")\r\n+        code.mark_pos(self.finally_clause.pos)\r\n \r\n         # Reset labels only after writing out a potential line trace call for correct nogil error handling.\r\n         code.set_all_labels(old_labels)\r\n```\r\nThere is no dedicated syntax tree representation of the `finally:`, just the code block. My guess is that this may lead to the position marker being dropped from the C file by accident.\r\n\r\nCould you set up a test similar to the other `tests/run/coverage_*.srctree` tests (those are just a bunch of test files concatenated into one), and then try of the above resolves it? PR welcome.",
            "created_at": "2020-05-02T16:20:57Z",
            "html_url": "https://github.com/cython/cython/issues/3567#issuecomment-622978371",
            "id": 622978371,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3567",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjk3ODM3MQ==",
            "updated_at": "2020-05-02T16:20:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/622978371",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "I had a look at creating a test but I don't fully understand how the coverage tests are implemented. It's probably better if somebody else creates a test.\r\n\r\nThe fix you proposed did not work for me, but manually adding \"      __Pyx_TraceLine(5,0,__PYX_ERR(0, 5, __pyx_L1_error))\" to __pyx_L3_return marks the line as covered.",
            "created_at": "2020-05-07T13:10:39Z",
            "html_url": "https://github.com/cython/cython/issues/3567#issuecomment-625245962",
            "id": 625245962,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3567",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTI0NTk2Mg==",
            "updated_at": "2020-05-07T13:10:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625245962",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/259530?v=4",
                "events_url": "https://api.github.com/users/rbuffat/events{/privacy}",
                "followers_url": "https://api.github.com/users/rbuffat/followers",
                "following_url": "https://api.github.com/users/rbuffat/following{/other_user}",
                "gists_url": "https://api.github.com/users/rbuffat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rbuffat",
                "id": 259530,
                "login": "rbuffat",
                "node_id": "MDQ6VXNlcjI1OTUzMA==",
                "organizations_url": "https://api.github.com/users/rbuffat/orgs",
                "received_events_url": "https://api.github.com/users/rbuffat/received_events",
                "repos_url": "https://api.github.com/users/rbuffat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rbuffat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rbuffat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rbuffat"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3567/comments",
    "created_at": "2020-04-30T20:42:10Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-02T06:37:06Z",
            "event": "labeled",
            "id": 3295053221,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMyOTUwNTMyMjE=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3295053221"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-02T06:37:06Z",
            "event": "labeled",
            "id": 3295053222,
            "label": {
                "color": "444444",
                "name": "Tools"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMyOTUwNTMyMjI=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3295053222"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-02T16:13:46Z",
            "event": "mentioned",
            "id": 3296275656,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI5NjI3NTY1Ng==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3296275656"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-02T16:13:46Z",
            "event": "subscribed",
            "id": 3296275657,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyOTYyNzU2NTc=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3296275657"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3567/events",
    "html_url": "https://github.com/cython/cython/issues/3567",
    "id": 610372229,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425563280,
            "name": "Tools",
            "node_id": "MDU6TGFiZWw0MjU1NjMyODA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Tools"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3567/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2MTAzNzIyMjk=",
    "number": 3567,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Coverage ignores finally if it contains only one line",
    "updated_at": "2020-05-07T13:10:39Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3567",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/259530?v=4",
        "events_url": "https://api.github.com/users/rbuffat/events{/privacy}",
        "followers_url": "https://api.github.com/users/rbuffat/followers",
        "following_url": "https://api.github.com/users/rbuffat/following{/other_user}",
        "gists_url": "https://api.github.com/users/rbuffat/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rbuffat",
        "id": 259530,
        "login": "rbuffat",
        "node_id": "MDQ6VXNlcjI1OTUzMA==",
        "organizations_url": "https://api.github.com/users/rbuffat/orgs",
        "received_events_url": "https://api.github.com/users/rbuffat/received_events",
        "repos_url": "https://api.github.com/users/rbuffat/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rbuffat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rbuffat/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rbuffat"
    }
}