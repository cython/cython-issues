{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!--\r\n**PLEASE READ THIS FIRST:**\r\n- DO NOT use the bug and feature tracker for general questions and support requests.\r\n  Use the `cython-users` mailing list instead.\r\n  It has a wider audience, so you get more and better answers.\r\n- Did you search for similar issues already?\r\n  Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release?\r\n  It might already have what you want to report.\r\n  Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n\r\n\r\n**To Reproduce**\r\nCode to reproduce the behaviour:\r\n```cython\r\ncdef class CplusA:\r\n\tcdef cpp_CplusA pyCplusA\r\n\tdef __cinit__(self,*args):\r\n\t\tself.pyCplusA = cpp_CplusA(*args)\r\n```\r\n**Describe the bug**\r\nout:\r\n```\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n        return cpp_linear_vector(w,x)\r\n\r\ncdef class CplusA:\r\n        cdef cpp_CplusA pyCplusA\r\n        def __cinit__(self,*args):\r\n                self.pyCplusA = cpp_CplusA(*args)\r\n                           ^\r\n------------------------------------------------------------\r\n\r\nvolume_cython.pyx:15:28: Compiler crash in AnalyseExpressionsTransform\r\n\r\nModuleNode.body = StatListNode(volume_cython.pyx:1:0)\r\nStatListNode.stats[6] = StatListNode(volume_cython.pyx:12:5)\r\nStatListNode.stats[0] = CClassDefNode(volume_cython.pyx:12:5,\r\n    as_name = 'CplusA',\r\n    class_name = 'CplusA',\r\n    module_name = '',\r\n    visibility = 'private')\r\nCClassDefNode.body = StatListNode(volume_cython.pyx:13:1)\r\nStatListNode.stats[0] = DefNode(volume_cython.pyx:14:1,\r\n    modifiers = [...]/0,\r\n    name = '__cinit__',\r\n    np_args_idx = [...]/0,\r\n    num_required_args = 1,\r\n    outer_attrs = [...]/2,\r\n    py_wrapper_required = True,\r\n    reqd_kw_flags_cname = '0',\r\n    used = True)\r\nFile 'Nodes.py', line 435, in analyse_expressions: StatListNode(volume_cython.py\r\nx:15:28)\r\nFile 'Nodes.py', line 5182, in analyse_expressions: SingleAssignmentNode(volume_\r\ncython.pyx:15:28)\r\nFile 'Nodes.py', line 5302, in analyse_types: SingleAssignmentNode(volume_cython\r\n.pyx:15:28)\r\nFile 'ExprNodes.py', line 6388, in analyse_types: GeneralCallNode(volume_cython.\r\npyx:15:28,\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\nFile 'ExprNodes.py', line 5462, in analyse_as_type_constructor: GeneralCallNode(\r\nvolume_cython.pyx:15:28,\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\n\r\nCompiler crash traceback from this point on:\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-p\r\nackages\\Cython\\Compiler\\ExprNodes.py\", line 5462, in analyse_as_type_constructor\r\n\r\n    self.args = [ arg.analyse_types(env) for arg in self.args ]\r\nAttributeError: 'GeneralCallNode' object has no attribute 'args'\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 9, in <module>\r\n    ext_modules=cythonize(ext_modules),\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-p\r\nackages\\Cython\\Build\\Dependencies.py\", line 1127, in cythonize\r\n    cythonize_one(*args)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-p\r\nackages\\Cython\\Build\\Dependencies.py\", line 1250, in cythonize_one\r\n    raise CompileError(None, pyx_file)\r\nCython.Compiler.Errors.CompileError: volume_cython.pyx\r\n```\r\n**Expected behavior**\r\nIt was supposed to unpack args for the class ''cpp_CplusA''init.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Windows\r\n - Python version [e.g. 3.8.8]\r\n - Cython version [e.g. 0.29.28]\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "This is somewhere where Python's dynamic behaviour and C/C++ static behaviour don't quite mix. I wouldn't expect this to work, but it might be possible for the very simplest cases.\r\n\r\nIn order of simplest to most complicated:\r\n* there is one constructor for `cpp_CplusA`. In this case it's equivalent to:\r\n    ```\r\n    cdef type1 tmp1\r\n    cdef type2 tmp2\r\n    tmp1, tmp2 = args\r\n    ```\r\n    Cython could probably support this case.\r\n* There are multiple constructors for `cpp_CplusA` (which is often pretty common). Cython would have to try multiple combinations of unpacking into multiple combinations of types. Getting the order right would be quite complicated.\r\n* However, some Python types can be converted into multiple different C/C++ types. For example `1` could unpack into a bunch of different integer types, and `float`, `double`, and some complex number types. `dict`s can be converted into `std::map`, `std::unordered_map`, but also some C structs. `bytes` can be converted into `const char*` or `std::string`. etc. So it could easily be ambiguous which constructor overload is right.\r\n* For non-constructor C++ functions the return type is potentially ambiguous to Cython if it's having to work out which overload to call at run-time (probably not impossible to deal with though...)\r\n* Some functions have template arguments. In this case we don't even have a finite list of different C/C++ types to test against - it could accept literally anything.\r\n* Some functions have C varargs (`cpp_CPlusA(...)`). In this case we don't even know how many args to unpack.\r\n\r\n",
            "created_at": "2022-04-06T17:12:32Z",
            "html_url": "https://github.com/cython/cython/issues/4718#issuecomment-1090508630",
            "id": 1090508630,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4718",
            "node_id": "IC_kwDOABDGAc5A_9dW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1090508630/reactions"
            },
            "updated_at": "2022-04-06T17:12:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1090508630",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4718/comments",
    "created_at": "2022-04-06T09:42:15Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4718/events",
    "html_url": "https://github.com/cython/cython/issues/4718",
    "id": 1194350841,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4718/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5HMFj5",
    "number": 4718,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4718/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4718/timeline",
    "title": "unpack *args",
    "updated_at": "2022-04-06T17:12:32Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4718",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/75552840?v=4",
        "events_url": "https://api.github.com/users/liheng653/events{/privacy}",
        "followers_url": "https://api.github.com/users/liheng653/followers",
        "following_url": "https://api.github.com/users/liheng653/following{/other_user}",
        "gists_url": "https://api.github.com/users/liheng653/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/liheng653",
        "id": 75552840,
        "login": "liheng653",
        "node_id": "MDQ6VXNlcjc1NTUyODQw",
        "organizations_url": "https://api.github.com/users/liheng653/orgs",
        "received_events_url": "https://api.github.com/users/liheng653/received_events",
        "repos_url": "https://api.github.com/users/liheng653/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/liheng653/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/liheng653/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/liheng653"
    }
}