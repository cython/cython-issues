{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "This was reported before in https://github.com/cython/cython/issues/3793, which was marked as a duplicate of https://github.com/cython/cython/issues/3659 and then closed in https://github.com/cython/cython/commit/ef423d1e9c9e67a24db0e61b7b334983858fa581, which was released as part of 3.0a6. However, it still occurs in that version.\r\n\r\nI do *not* see this when I build for 32-bit Windows. (e.g., https://ci.appveyor.com/project/jamadden/gevent/build/job/ja58vp06o5av6h46)\r\n\r\n**Describe the bug**\r\n\r\nAttempting to compile gevent in the 32-bit manylinux image under Python 2 using 3.0a6 results in a stack trace. Full [Travis CI output is here](https://travis-ci.org/github/gevent/gevent/jobs/729367481). Excerpt:\r\n```\r\nSuccessfully installed cffi-1.14.3 cython-3.0a6 greenlet-0.4.17 pycparser-2.20\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 47, in <module>\r\n    from _setupares import ARES\r\n  File \"/tmp/build/gevent/_setupares.py\", line 129, in <module>\r\n    ARES = cythonize1(ARES)\r\n  File \"/tmp/build/gevent/_setuputils.py\", line 260, in cythonize1\r\n    common_utility_include_dir=COMMON_UTILITY_INCLUDE_DIR,\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Build/Dependencies.py\", line 1110, in cythonize\r\n    cythonize_one(*args)\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Build/Dependencies.py\", line 1256, in cythonize_one\r\n    result = compile_single(pyx_file, options, full_module_name=full_module_name)\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Compiler/Main.py\", line 575, in compile_single\r\n    return run_pipeline(source, options, full_module_name)\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Compiler/Main.py\", line 494, in run_pipeline\r\n    pipeline = Pipeline.create_pyx_pipeline(context, options, result)\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Compiler/Pipeline.py\", line 252, in create_pyx_pipeline\r\n    create_pipeline(context, mode, exclude_classes=exclude_classes),\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Compiler/Pipeline.py\", line 144, in create_pipeline\r\n    from .ParseTreeTransforms import WithTransform, NormalizeTree, PostParse, PxdPostParse\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Compiler/ParseTreeTransforms.py\", line 1632, in <module>\r\n    class AnalyseDeclarationsTransform(EnvTransform):\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Compiler/ParseTreeTransforms.py\", line 1640, in AnalyseDeclarationsTransform\r\n    \"\"\", level='c_class', pipeline=[NormalizeTree(None)])\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Compiler/TreeFragment.py\", line 235, in __init__\r\n    mod = t = parse_from_strings(name, fmt_code, fmt_pxds, level=level, initial_pos=initial_pos)\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Compiler/TreeFragment.py\", line 75, in parse_from_strings\r\n    scope = scope, context = context, initial_pos = initial_pos)\r\n  File \"Cython/Compiler/Scanning.py\", line 306, in Cython.Compiler.Scanning.PyrexScanner.__init__\r\n  File \"Cython/Compiler/Scanning.py\", line 35, in Cython.Compiler.Scanning.get_lexicon\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Compiler/Lexicon.py\", line 147, in make_lexicon\r\n    (Eof, Method('eof_action'))\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Plex/Lexicons.py\", line 129, in __init__\r\n    nfa, default_initial_state, spec, token_number)\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Plex/Lexicons.py\", line 162, in add_token_to_machine\r\n    match_bol=1, nocase=0)\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Plex/Regexps.py\", line 301, in build_machine\r\n    re.build_machine(m, s1, s2, match_bol, nocase)\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Plex/Regexps.py\", line 340, in build_machine\r\n    initial_state = self.build_opt(m, initial_state, BOL)\r\n  File \"/opt/python/cp27-cp27m/lib/python2.7/site-packages/Cython/Plex/Regexps.py\", line 136, in build_opt\r\n    initial_state.link_to(s)\r\n  File \"Cython/Plex/Machines.py\", line 86, in Cython.Plex.Machines.Node.link_to\r\n  File \"Cython/Plex/Machines.py\", line 82, in Cython.Plex.Machines.Node.add_transition\r\n  File \"Cython/Plex/Transitions.py\", line 60, in Cython.Plex.Transitions.TransitionMap.add\r\n  File \"Cython/Plex/Machines.py\", line 124, in Cython.Plex.Machines.Node.__hash__\r\nOverflowError: long int too large to convert to int\r\n```\r\n\r\n**To Reproduce**\r\n\r\n(Check that the `scripts/releases/make-manylinux` script is using the `DOCKER_IMAGE` environment variable and doesn't have the 64-bit image hard-coded on the next-to-last line. That was a bug in older versions that I have fixed in a branch which should be merged later today.)\r\n\r\n```console\r\n$ git clone gevent/gevent\r\nCloning into 'gevent'...\r\n...\r\n$ cd gevent\r\n$ export DOCKER_IMAGE=quay.io/pypa/manylinux2010_i686\r\n$ docker pull $DOCKER_IMAGE\r\nUsing default tag: latest\r\nlatest: Pulling from pypa/manylinux2010_i686\r\n...\r\nDigest: sha256:e08482836e0dc2ea0789fb51f82918bc612463a318a82702e503afe8b9f4418d\r\nStatus: Downloaded newer image for quay.io/pypa/manylinux2010_i686:latest\r\nquay.io/pypa/manylinux2010_i686:latest\r\n$ bash scripts/releases/make-manylinux\r\n...\r\n```\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: manylinux2010, 32-bit x86\r\n - Python version: Tested to produce the error in 2.7, 3.5, 3.6 and 3.8.\r\n - Cython version 3.0a6\r\n",
    "closed_at": "2020-09-22T18:33:48Z",
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "On a closer look this seems like a similar (but different) bug to https://github.com/cython/cython/issues/3659. I'm struggling to work out where `py_hash_t` is defined but it seems like `id` can't reliably be fitted in it on 32 bit Linux. Which doesn't quite make sense to be since `id` is just a pointer and that should be 32 bit I'd think.\r\n\r\nI wonder if it's a signed vs unsigned problem? `py_hash_t` has to be signed since the function returns -1 on error, but pointers are unsigned.",
            "created_at": "2020-09-22T18:09:37Z",
            "html_url": "https://github.com/cython/cython/issues/3840#issuecomment-696890488",
            "id": 696890488,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3840",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5Njg5MDQ4OA==",
            "performed_via_github_app": null,
            "updated_at": "2020-09-22T18:16:17Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/696890488",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm struggling to work out where py_hash_t is defined\r\n\r\nhttps://github.com/python/cpython/blob/de4304dad8e035dbbb57d653e685312eead816df/Include/pyport.h#L112-L114\r\n\r\nRespectively here, for Py2.7:\r\n\r\nhttps://github.com/cython/cython/blob/246a4b97f1322415351c2b3109560add8e3820e4/Cython/Utility/ModuleSetupCode.c#L875-L876",
            "created_at": "2020-09-22T18:16:25Z",
            "html_url": "https://github.com/cython/cython/issues/3840#issuecomment-696894200",
            "id": 696894200,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3840",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5Njg5NDIwMA==",
            "performed_via_github_app": null,
            "updated_at": "2020-09-22T18:18:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/696894200",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "The default hash seems to be based on `id(self)//16` which I'd think avoids this problem?",
            "created_at": "2020-09-22T18:22:12Z",
            "html_url": "https://github.com/cython/cython/issues/3840#issuecomment-696897431",
            "id": 696897431,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3840",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5Njg5NzQzMQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-09-22T18:22:12Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/696897431",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The default hash seems to be based on `id(self)//16` which I'd think avoids this problem?\r\n\r\nAh, yes, good call. Depending on the actual (virtual) memory address, the ID can definitely be quite a large unsigned long value.",
            "created_at": "2020-09-22T18:25:13Z",
            "html_url": "https://github.com/cython/cython/issues/3840#issuecomment-696898991",
            "id": 696898991,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3840",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5Njg5ODk5MQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-09-22T18:25:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/696898991",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I chose to use `id(self) & maxint` since IDs in PyPy used a simple counter, last I looked. With `maxint == 2**31-1`, this should still be plenty enough for the scanner states.",
            "created_at": "2020-09-22T18:36:25Z",
            "html_url": "https://github.com/cython/cython/issues/3840#issuecomment-696904999",
            "id": 696904999,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3840",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjkwNDk5OQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-09-22T18:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/696904999",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3840/comments",
    "created_at": "2020-09-22T17:43:54Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            },
            "commit_id": "eb2e3f111b4cedc295fa5a4d1be097d6e17a4682",
            "commit_url": "https://api.github.com/repos/gevent/gevent/commits/eb2e3f111b4cedc295fa5a4d1be097d6e17a4682",
            "created_at": "2020-09-22T18:27:18Z",
            "event": "referenced",
            "id": 3794620861,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3OTQ2MjA4NjE=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3794620861"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "1e2119ad36465542e16ea931ea227ee16fa73489",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/1e2119ad36465542e16ea931ea227ee16fa73489",
            "created_at": "2020-09-22T18:33:48Z",
            "event": "closed",
            "id": 3794644905,
            "node_id": "MDExOkNsb3NlZEV2ZW50Mzc5NDY0NDkwNQ==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3794644905"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3840/events",
    "html_url": "https://github.com/cython/cython/issues/3840",
    "id": 706574182,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3840/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU3MDY1NzQxODI=",
    "number": 3840,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "32 bit manylinux platform: OverflowError: long int too large to convert to int (line 124, in Cython.Plex.Machines.Node.__hash__)",
    "updated_at": "2020-09-22T18:36:25Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3840",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
        "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
        "followers_url": "https://api.github.com/users/jamadden/followers",
        "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
        "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jamadden",
        "id": 1256082,
        "login": "jamadden",
        "node_id": "MDQ6VXNlcjEyNTYwODI=",
        "organizations_url": "https://api.github.com/users/jamadden/orgs",
        "received_events_url": "https://api.github.com/users/jamadden/received_events",
        "repos_url": "https://api.github.com/users/jamadden/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jamadden"
    }
}