{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "<!--\r\n**Note:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report. Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen using Python builtin typed objects (like `list`) as in the function below, Cython generates a check initially to make sure we got a `list` or will raise otherwise. Though it will accept the value of `None`. Later checks to work with the builtin type result in repeated checks to see if the `list` is `None`.\r\n\r\nIt would be nice to have a way to say please skip generating these `None` checks. This is particularly useful when iterating over an object. There appears to be something close with the `nonecheck` directive. Though IIUC this is limited to Cython `memoryview`s. \r\n\r\n```cython\r\ndef getitem0(obj):\r\n    if obj is None:\r\n        raise TypeError(\"Expected `list`, but got `None`\")\r\n\r\n    cdef list L = obj\r\n    cdef Py_ssize_t n = len(L)\r\n    if n > 0:\r\n        return L[0]\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nHaving a directive like `nonecheck` (or perhaps generalizing `nonecheck`) to disable similar `None` checks in this context would be quite helpful.\r\n\r\n```cython\r\ncimport cython\r\n\r\n\r\n@cython.nonecheck(True)\r\ndef getitem0(obj):\r\n    if obj is None:\r\n        raise TypeError(\"Expected `list`, but got `None`\")\r\n\r\n    cdef list L = obj\r\n    cdef Py_ssize_t n = len(L)\r\n    if n > 0:\r\n        return L[0]\r\n```\r\n\r\nAlternatively having a way to declare the `list` as not permitting a `None` assignment would also work.\r\n\r\n```cython\r\ndef getitem0(obj):\r\n    if obj is None:\r\n        raise TypeError(\"Expected `list`, but got `None`\")\r\n\r\n    cdef list L not None = obj\r\n    cdef Py_ssize_t n = len(L)\r\n    if n > 0:\r\n        return L[0]\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nIn addition to the alternatives noted, one can declare function arguments as `not None` (like above). While that works in this case, this does not always work if we are interested in declaring content accessed from `obj` (like `obj[0]`) as `not None`. Also this won't work for other declared variables in the function.\r\n\r\n```cython\r\ndef getitem0(obj not None):\r\n    cdef list L = obj\r\n    cdef Py_ssize_t n = len(L)\r\n    if n > 0:\r\n        return L[0]\r\n```\r\n\r\n**Additional context**\r\n\r\nNA",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> Later checks to work with the builtin type result in repeated checks to see if the list is None.\r\n\r\nNote that the existence of these `None` checks in the C code does not mean that they actually get executed. Once the C compiler has passed one of them (in your example it's the user provided check on function entry), it knows by control flow analysis that later usages are definitely not `None`, and will discard them. That's why we didn't care much about them in Cython so far. We could certainly do a little better in avoiding to generate unnecessary C code, but the resulting binary code would not be any different in the end.",
            "created_at": "2020-08-30T07:42:41Z",
            "html_url": "https://github.com/cython/cython/issues/3797#issuecomment-683388105",
            "id": 683388105,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3797",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzM4ODEwNQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-30T07:42:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/683388105",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3797/comments",
    "created_at": "2020-08-29T00:38:21Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3797/events",
    "html_url": "https://github.com/cython/cython/issues/3797",
    "id": 688421623,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3797/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2ODg0MjE2MjM=",
    "number": 3797,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[ENH] Option to disable `None` checks with builtin types",
    "updated_at": "2020-08-30T07:42:41Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3797",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
        "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
        "followers_url": "https://api.github.com/users/jakirkham/followers",
        "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
        "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jakirkham",
        "id": 3019665,
        "login": "jakirkham",
        "node_id": "MDQ6VXNlcjMwMTk2NjU=",
        "organizations_url": "https://api.github.com/users/jakirkham/orgs",
        "received_events_url": "https://api.github.com/users/jakirkham/received_events",
        "repos_url": "https://api.github.com/users/jakirkham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jakirkham"
    }
}