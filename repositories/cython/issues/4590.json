{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!--\r\n**PLEASE READ THIS FIRST:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report. Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n## Describe the bug\r\nThe `Cython.Coverage` plugin's coverage report differs between runs. The following was setup using\r\n - `Coverage.py, version 6.2 with C extension`\r\n - `pytest 6.2.5`\r\n - `cimport_from_pyx = True`\r\n\r\n---\r\n\r\n## To Reproduce\r\n\r\n### Setup the following project:\r\n\r\n#### Project Structure\r\n\r\n```\r\n📦cythonProject\r\n ┣━📜.coveragerc\r\n ┣━📜a1.pyx\r\n ┣━📜a2.pyx\r\n ┣━📜b.pyx\r\n ┣━📜setup.py\r\n ┣━📜test_a1.py\r\n ┗━📜test_a2.py\r\n```\r\n\r\n#### Project Contents\r\n\r\nLargely taken from the `cimport_from_pyx` Cython test example ([tests/run/cimport_from_pyx.srctree](https://github.com/cython/cython/blob/master/tests/run/cimport_from_pyx.srctree))\r\n\r\n - `.coveragerc`\r\n   ```\r\n   [run]\r\n   plugins =\r\n       Cython.Coverage\r\n   include =\r\n       *.pyx\r\n   ```\r\n - `a1.pyx`\r\n   ```cython\r\n   from b cimport Bclass, Bfunc, Benum, Benum_value, Btypedef, Py_EQ\r\n   \r\n   def a1_main():\r\n       cdef Bclass b = Bclass(5)\r\n       assert Bfunc(&b.value) == b.value\r\n       assert b.anotherValue == 6, b.anotherValue\r\n       assert b.asStruct().value == b.value\r\n       cdef Btypedef b_type = &b.value\r\n       cdef Benum b_enum = Benum_value\r\n       cdef int tmp = Py_EQ\r\n   ```\r\n - `a2.pyx`\r\n   ```cython\r\n   from b cimport DecoratedClass, cfuncOutside\r\n   \r\n   def a2_main():\r\n       cdef DecoratedClass dc = DecoratedClass()\r\n       assert dc.cfuncInClass().value == 5\r\n       assert dc.cpdefInClass() == 1.0\r\n       assert cfuncOutside().value == 2\r\n   ```\r\n - `b.pyx`\r\n   ```cython\r\n   from cpython.object cimport Py_EQ, Py_NE\r\n   \r\n   cimport cython\r\n   \r\n   cdef enum Benum:\r\n       Benum_value\r\n   \r\n   cdef struct Bstruct:\r\n       int value\r\n   \r\n   ctypedef long *Btypedef\r\n   \r\n   cdef class Bclass:\r\n       cdef long value\r\n       anotherValue: cython.double\r\n       def __init__(self, value):\r\n           self.value = value\r\n           self.anotherValue = value + 1\r\n       cdef Bstruct asStruct(self):\r\n           return Bstruct(value=self.value)\r\n       cdef double getOtherValue(self):\r\n           return self.anotherValue\r\n   \r\n   cdef long Bfunc(Btypedef x):\r\n       return x[0]\r\n   \r\n   @cython.cclass\r\n   class DecoratedClass:\r\n       @cython.cfunc\r\n       @cython.returns(Bstruct)\r\n       def cfuncInClass(self):\r\n           return Bstruct(value=5)\r\n       @cython.ccall\r\n       @cython.returns(cython.double)\r\n       def cpdefInClass(self):\r\n           return 1.0\r\n   \r\n   @cython.cfunc\r\n   @cython.returns(Bstruct)\r\n   def cfuncOutside():\r\n       return Bstruct(value=2)\r\n   ```\r\n - `setup.py`\r\n   ```cython\r\n   import Cython.Compiler.Options\r\n   from Cython.Build.Dependencies import cythonize\r\n   from distutils.core import setup\r\n   from distutils.extension import Extension\r\n   \r\n   \r\n   Cython.Compiler.Options.cimport_from_pyx = True\r\n   Cython.Compiler.Options._directive_defaults[\"binding\"] = True\r\n   Cython.Compiler.Options._directive_defaults[\"embedsignature\"] = True\r\n   Cython.Compiler.Options._directive_defaults[\"linetrace\"] = True\r\n   \r\n   setup(ext_modules=cythonize(\r\n       Extension(name=\"*\",\r\n                 sources=[\"*.pyx\"],\r\n                 define_macros=[(\"CYTHON_TRACE\", \"1\")])\r\n   ))\r\n   ```\r\n - `test_a1.py`\r\n   ```python\r\n   from a1 import a1_main\r\n   \r\n   def test_a():\r\n       a1_main()\r\n   ```\r\n - `test_a2.py`\r\n   ```python\r\n   from a2 import a2_main\r\n   \r\n   def test_a():\r\n       a2_main()\r\n   ```\r\n\r\n#### Code to reproduce the behaviour:\r\n\r\nBuild, test, and generate coverage statistics. Make sure we're currently in the `cythonProject` directory.\r\n```bash\r\npython3 setup.py build_ext --inplace\r\ncoverage run -m pytest .\r\n```\r\n\r\nRepeatedly invoke `coverage report` - three example runs are shown below\r\n```\r\ncythonProject$ coverage report\r\nName     Stmts   Miss  Cover\r\n----------------------------\r\na1.pyx       9      0   100%\r\na2.pyx       6      0   100%\r\nb.pyx       15      1    93%\r\n----------------------------\r\nTOTAL       30      1    97%\r\ncythonProject$ coverage report\r\nName     Stmts   Miss  Cover\r\n----------------------------\r\na1.pyx       9      0   100%\r\na2.pyx       6      0   100%\r\nb.pyx        0      0   100%\r\n----------------------------\r\nTOTAL       15      0   100%\r\ncythonProject$ coverage report\r\nName     Stmts   Miss  Cover\r\n----------------------------\r\na1.pyx       9      0   100%\r\na2.pyx       6      0   100%\r\nb.pyx       15      1    93%\r\n----------------------------\r\nTOTAL       30      1    97%\r\n```\r\n\r\n---\r\n\r\n## Expected behavior\r\nNo change in coverage in `b.pyx` if invoking `coverage report` multiple times.\r\n\r\n---\r\n\r\n## Environment (please complete the following information):\r\n - OS: [Ubuntu 20.04 LTS]\r\n - Python version [3.8.12]\r\n - Cython version [3.0.0a10]\r\n\r\n---\r\n\r\n## Additional context\r\n\r\nThe set-up here is targeting the situation where we run different parts of `b.pyx` from different `Cython` modules (`a1.pyx`, `a2.pyx`) in one `coverage` invocation. I believe that the fluctuating coverage behaviour comes from how `self._c_files_map` is being accessed and modified in\r\n\r\n - `Cython.Coverage.Plugin.file_reporter`\r\n   https://github.com/cython/cython/blob/dbb9aca0f1b5f841611bd3c2ad40bd2d31aa23a6/Cython/Coverage.py#L103-L126\r\n - `Cython.Coverage.Plugin._read_source_lines`\r\n   https://github.com/cython/cython/blob/dbb9aca0f1b5f841611bd3c2ad40bd2d31aa23a6/Cython/Coverage.py#L195-L219\r\n\r\nFor my purposes, I've removed the fluctuating coverage behaviour locally by subclassing `Cython.Coverage.Plugin` and overriding the instance method `file_reporter` (below), but I'm not aware of the full consequences of doing this:\r\n\r\n```python\r\n    def file_reporter(self, filename):\r\n\r\n        filename = canonical_filename(os.path.abspath(filename))\r\n\r\n        c_file, _ = self._find_source_files(filename)\r\n        if not c_file:\r\n            return None\r\n\r\n        relative_filename, code = self._read_source_lines(\r\n            c_file, filename\r\n        )\r\n        if code is None:\r\n            return None\r\n\r\n        return CythonModuleReporter(\r\n            c_file,\r\n            filename,\r\n            relative_filename,\r\n            code,\r\n            self._excluded_lines_map.get(relative_filename, frozenset()),\r\n        )\r\n```",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4590/comments",
    "created_at": "2022-01-23T00:14:56Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4590/events",
    "html_url": "https://github.com/cython/cython/issues/4590",
    "id": 1111727111,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4590/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5CQ5wH",
    "number": 4590,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4590/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4590/timeline",
    "title": "[BUG] `Cython.Coverage` plugin reports non-deterministic coverage",
    "updated_at": "2022-01-23T00:14:56Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4590",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/50305397?v=4",
        "events_url": "https://api.github.com/users/bzoracler/events{/privacy}",
        "followers_url": "https://api.github.com/users/bzoracler/followers",
        "following_url": "https://api.github.com/users/bzoracler/following{/other_user}",
        "gists_url": "https://api.github.com/users/bzoracler/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/bzoracler",
        "id": 50305397,
        "login": "bzoracler",
        "node_id": "MDQ6VXNlcjUwMzA1Mzk3",
        "organizations_url": "https://api.github.com/users/bzoracler/orgs",
        "received_events_url": "https://api.github.com/users/bzoracler/received_events",
        "repos_url": "https://api.github.com/users/bzoracler/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/bzoracler/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bzoracler/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/bzoracler"
    }
}