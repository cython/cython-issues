{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!--\r\n**Note:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report. Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. In my code, I would like to do [...]\r\n\r\nCurrently `with nogil(condition)` accepts a compile-time condition ([link](https://cython.readthedocs.io/en/latest/src/userguide/fusedtypes.html#conditional-gil-acquiring-releasing)). But how about a runtime condition? Is it possible?\r\n```cython\r\ndef increment(double x, is_ok):\r\n    # is_ok is a Python object, x is a C double\r\n    with nogil(is_ok):\r\n        x = x + 1\r\n    return x\r\n```\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen, including code examples if applicable.\r\n\r\nAs title. \r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\nN/A\r\n\r\n**Additional context**\r\nAdd any other context about the feature request here.\r\n\r\nNot sure if that this was not allowed is because of any technical difficulty, or just because no one asked for it, thus I'm raising a discussion. Thanks!",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "What's the purpose of this?\r\n\r\nThe contents of the block would have to be able to run GIL (because it's a runtime check).\r\n\r\nKeeping the GIL isn't useful as a locking mechanism (because all kinds of code can release the GIL, for example any object destructor, or any Python function can).\r\n\r\nSo I'm not quite sure what you could use this feature for.",
            "created_at": "2022-01-13T17:18:23Z",
            "html_url": "https://github.com/cython/cython/issues/4569#issuecomment-1012343167",
            "id": 1012343167,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4569",
            "node_id": "IC_kwDOABDGAc48VyF_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1012343167/reactions"
            },
            "updated_at": "2022-01-13T17:18:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1012343167",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "We have a design discussion involving several internal & external projects. Part of the design involves allowing users to pass a Python object to an external C library (which could potentially be wrapped via Cython and exposed to Python users). The design aims to provide flexibility for users. So, for example, this is the *class* of use cases that we are evaluating: \r\n```python\r\ncdef extern from *:\r\n    # an external library API\r\n    int my_func(void* ptr, double x)\r\n\r\ncpdef my_func_wrapper(my_obj, double x, is_ok):\r\n    # Note: my_obj may not be actually a Python object; is_ok conveys this information\r\n    cdef void* ptr = <void*>my_obj\r\n    with nogil(is_ok):\r\n        # internally, there is a mechanism to allow my_func to access the Python object,\r\n        # but to do so the GIL must be held\r\n        status = my_func(ptr, x)\r\n    if status != 0:\r\n        raise MyError(...)\r\n```\r\nwhich is currently not possible. I imaginee the proposed usage of `with nogil(is_ok): status = my_func(ptr, x)` can be expressed in the following fashion:\r\n```python\r\n    if is_ok:\r\n        with nogil:\r\n            status = my_func(ptr, x)\r\n    else:\r\n        # hold the Gil\r\n        status = my_func(ptr, x)\r\n```\r\nso to me it's merely a shortcut of the above expansion. Am I missing any technical issues?",
            "created_at": "2022-01-13T17:34:08Z",
            "html_url": "https://github.com/cython/cython/issues/4569#issuecomment-1012356237",
            "id": 1012356237,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4569",
            "node_id": "IC_kwDOABDGAc48V1SN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1012356237/reactions"
            },
            "updated_at": "2022-01-13T17:34:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1012356237",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "I don't think you're missing any technical issues.\r\n\r\nMy personal reluctance with this is that I think it'd be confusing (the feature would be more limited than people would expect and that people already find the gil confusing), and that what you want is doable via the expansion you show.\r\n\r\nIt's not like I have any veto power though - just that I don't think it's worthwhile enough to work on myself.\r\n\r\nBased on your example, would a fused type for `my_obj` work (and that should let it be a compile time condition)?",
            "created_at": "2022-01-13T21:07:47Z",
            "html_url": "https://github.com/cython/cython/issues/4569#issuecomment-1012516568",
            "id": 1012516568,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4569",
            "node_id": "IC_kwDOABDGAc48WcbY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1012516568/reactions"
            },
            "updated_at": "2022-01-13T21:07:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1012516568",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I also wonder what the benefit is. Releasing the GIL isn't all that expensive. If it's worth doing in one case, is it really worth _not_ doing in the other? If it's executing exactly the same code, then just release the GIL, always. You code has to be able to deal with that case anyway. And if it's not executing exactly the same code, then your explicit expansion seems better, more natural, and probably also easier to code.",
            "created_at": "2022-01-13T21:50:31Z",
            "html_url": "https://github.com/cython/cython/issues/4569#issuecomment-1012543559",
            "id": 1012543559,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4569",
            "node_id": "IC_kwDOABDGAc48WjBH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1012543559/reactions"
            },
            "updated_at": "2022-01-13T21:50:31Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1012543559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks @da-woods and @scoder, sorry for dropping the ball here. A little update from my side is after some discussion we lean toward always holding the gil (I'll explain below), so the request for now is a pure exercise 🙂\r\n> My personal reluctance with this is that I think it'd be confusing\r\n\r\nWhy? The compile-time `with nogil(condition)` is already supported. I was just suggesting if the `condition` can't be resolved at compile time, we defer the check to runtime (and expand it to the if-else snippet as a syntax sugar).\r\n\r\n> just that I don't think it's worthwhile enough to work on myself.\r\n\r\nI understand. So, am I right that there's no technical reason such that I should not work on this even if I have the bandwidth?\r\n\r\n> would a fused type for `my_obj` work (and that should let it be a compile time condition)?\r\n\r\nI guess the way I used `my_obj` isn't a good illustrative example. The point is it's an arbitrary, user-provided object at runtime, so fused types etc is not possible.\r\n\r\n> If it's executing exactly the same code, then just release the GIL, always. You code has to be able to deal with that case anyway. And if it's not executing exactly the same code, then your explicit expansion seems better, more natural, and probably also easier to code.\r\n\r\nIn any case it's calling the external `my_func` C API, and executing the same code. The problem is if `my_obj` is a Python object then `my_func` must hold the gil at all time, but if it holds a, say, C struct that can be passed directly, the gil can be released.\r\n\r\nWe lean toward always hold the gil because it's rather undesired to do this kind of `is_ok` signaling mechanism from the point of view of API design. Even if we have a way to infer if a pointer is pointing to a PyObject (which I don't think is possible?), it'd require the foreign C library to include the Python header for checking and manipulating PyObject, and it defeats all the purposes (ex: isolation of C/Python layers) we are considering.",
            "created_at": "2022-02-18T15:44:22Z",
            "html_url": "https://github.com/cython/cython/issues/4569#issuecomment-1044725539",
            "id": 1044725539,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4569",
            "node_id": "IC_kwDOABDGAc4-RT8j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1044725539/reactions"
            },
            "updated_at": "2022-02-18T15:44:22Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1044725539",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4569/comments",
    "created_at": "2022-01-13T15:21:38Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-02-18T15:44:23Z",
            "event": "mentioned",
            "id": 6100240501,
            "node_id": "MEE_lADOABDGAc5Brh1AzwAAAAFrmkh1",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6100240501"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-02-18T15:44:23Z",
            "event": "subscribed",
            "id": 6100240517,
            "node_id": "SE_lADOABDGAc5Brh1AzwAAAAFrmkiF",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6100240517"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-02-18T15:44:23Z",
            "event": "mentioned",
            "id": 6100240537,
            "node_id": "MEE_lADOABDGAc5Brh1AzwAAAAFrmkiZ",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6100240537"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-02-18T15:44:23Z",
            "event": "subscribed",
            "id": 6100240544,
            "node_id": "SE_lADOABDGAc5Brh1AzwAAAAFrmkig",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6100240544"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4569/events",
    "html_url": "https://github.com/cython/cython/issues/4569",
    "id": 1101929792,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4569/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5Brh1A",
    "number": 4569,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4569/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4569/timeline",
    "title": "[ENH] Allow runtime conditional GIL releasing/acquiring?  ",
    "updated_at": "2022-02-18T15:44:23Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4569",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
        "events_url": "https://api.github.com/users/leofang/events{/privacy}",
        "followers_url": "https://api.github.com/users/leofang/followers",
        "following_url": "https://api.github.com/users/leofang/following{/other_user}",
        "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/leofang",
        "id": 5534781,
        "login": "leofang",
        "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
        "organizations_url": "https://api.github.com/users/leofang/orgs",
        "received_events_url": "https://api.github.com/users/leofang/received_events",
        "repos_url": "https://api.github.com/users/leofang/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/leofang"
    }
}