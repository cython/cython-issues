{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Hello up there. In the context of getting [gevent miscompiled](https://github.com/gevent/gevent/issues/1568#issuecomment-617432757) the question of proper dependency tracking on Cython side was [raised](https://github.com/gevent/gevent/issues/1568#issuecomment-617636428). While original cause for that particular gevent miscompilation seems to be https://github.com/cython/cython/issues/1428, other issues were also found.\r\n\r\nThis issue is probably related to https://github.com/cython/cython/issues/1436 and shows that `Cython.Distutils.build_ext` does not properly track build dependencies.\r\n\r\nIn 2016 `Cython.Distutils.build_ext` was changed to use `cythonize` and the old implementation was moved into `Cython.Distutils.old_build_ext` for exactly particular reason that `old_build_ext` was not tracking dependencies properly: cb55c11b60d. A warning corresponding to the move was added:\r\nhttps://github.com/cython/cython/blob/3de7a4b8fb7ce045222e13ca02541f6a70e89c2e/Cython/Distutils/old_build_ext.py#L37-L42\r\n\r\nHowever right after that `Cython.Distutils.build_ext` was reverted to use `old_build_ext` and new implementation became available as `new_build_ext` (4ecdd3e4) with the idea to\r\n\r\n> give projects more time to move over, and reduces the number of changes in the 0.25 series\r\n\r\nAs of today (2020 April) `Cython.Distutils.build_ext` still points to `old_build_ext` and the warning is somehow **not** printed even if `old_build_ext` is imported directly(*):\r\n\r\n```\r\n$ python -c 'import Cython.Distutils.old_build_ext'\r\n# empty output\r\n$ python -c 'from Cython.Build import build_ext'\r\n# empty output\r\n```\r\n\r\nThis way many projects still use `old_build_ext` = `from Cython.Build import build_ext` to compile their pyx files and miss both proper dependency tracking and the warning.\r\n\r\nAs a fix I propose to make the deprecation warnings effective and to make `Cython.Build.build_ext` to refer to `new_build_ext` which uses cythonize.\r\n\r\nThe rest of this issue demonstrates that `Cython.Build.build_ext` dependency handling is broken.\r\n\r\n--------\r\n\r\n`setup.py`\r\n```py\r\nfrom setuptools import setup, Extension\r\nfrom Cython.Distutils import build_ext\r\n\r\nsetup(\r\n    ext_modules = [\r\n                Extension(\"a\", [\"a.pyx\"]),\r\n                Extension(\"b\", [\"b.pyx\"]),\r\n            ],\r\n\r\n    cmdclass = {'build_ext': build_ext}\r\n)\r\n```\r\n\r\n`a.pyx`\r\n```pyx\r\n# cython: language_level=2\r\n  \r\nfrom b cimport bfunc\r\n\r\ndef afunc():\r\n    bfunc()\r\n```\r\n\r\n`b.pxd`\r\n```pyx\r\ncdef bfunc()\r\n```\r\n\r\n`b.pyx`\r\n```pyx\r\n# cython: language_level=2\r\n\r\ncdef bfunc():\r\n    print \"bbb\"\r\n```\r\n\r\n( first compile - ok )\r\n```\r\n$ python setup.py build_ext -i\r\nrunning build_ext\r\ncythoning a.pyx to a.c\r\ncythoning b.pyx to b.c\r\n...\r\n```\r\n\r\nnow change `b.pxd` and `b.pyx` to add argument to bfunc:\r\n\r\n```diff\r\n--- a/b.pxd\r\n+++ b/b.pxd\r\n@@ -1 +1 @@\r\n-cdef bfunc()\r\n+cdef bfunc(int x)\r\n--- a/b.pyx\r\n+++ b/b.pyx\r\n@@ -1,4 +1,4 @@\r\n # cython: language_level=2\r\n \r\n-cdef bfunc():\r\n-    print \"bbb\"\r\n+cdef bfunc(int x):\r\n+    print \"bbb\", x\r\n```\r\n\r\nand recompile - only `b` is rebuilt - **not** `a`:\r\n\r\n```\r\n(neo) (z-dev) (g.env) kirr@deco:~/tmp/trashme/pyx$ python setup.py build_ext -i\r\nrunning build_ext\r\nskipping 'a.c' Cython extension (up-to-date)      <-- NOTE\r\ncythoning b.pyx to b.c\r\n/home/kirr/src/tools/py/cython/Cython/Compiler/Main.py:344: FutureWarning: Cython directive 'language_level' not set, using '3str' for now (Py3). This has changed from earlier releases! File: /home/kirr/tmp/trashme/pyx/b.pxd\r\n  tree = Parsing.p_module(s, pxd, full_module_name)\r\nbuilding 'b' extension\r\nx86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fno-strict-aliasing -Wdate-time -D_FORTIFY_SOURCE=2 -g -fdebug-prefix-map=/build/python2.7-2.7.16=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -I/usr/include/python2.7 -c b.c -o build/temp.linux-x86_64-2.7/b.o\r\nx86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-z,relro -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fdebug-prefix-map=/build/python2.7-2.7.16=. -fstack-protector-strong -Wformat -Werror=format-security -Wl,-z,relro -Wdate-time -D_FORTIFY_SOURCE=2 -g -fdebug-prefix-map=/build/python2.7-2.7.16=. -fstack-protector-strong -Wformat -Werror=format-security build/temp.linux-x86_64-2.7/b.o -o /home/kirr/tmp/trashme/pyx/b.so\r\n```\r\n\r\nwhich is **WRONG** because `a` will use `b` module via outdated pxd.\r\n\r\n( In this particular case it should be giving compilation error at Cython level:\r\n\r\n```\r\n$ touch a.pyx \r\n$ python setup.py build_ext -i\r\nrunning build_ext\r\ncythoning a.pyx to a.c\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n# cython: language_level=2\r\n\r\nfrom b cimport bfunc\r\n\r\ndef afunc():\r\n    bfunc()\r\n        ^\r\n------------------------------------------------------------\r\n\r\na.pyx:6:9: Call with wrong number of arguments (expected 1, got 0)\r\n```\r\n)\r\n\r\nCython `3.0a1-79-g3de7a4b8f`\r\n\r\nThanks beforehand,\r\nKirill\r\n\r\n/cc @robertwb \r\n\r\nP.S.\r\n\r\nCython documentation [says](https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#distributing-cython-modules) to use `Cython.Build.new_build_ext` which should be using `cythonize` internally:\r\n\r\n> Another option is to make Cython a setup dependency of your system and use Cythonâ€™s build_ext module which runs cythonize as part of the build process:\r\n>\r\n> ```py\r\n> setup(\r\n>     extensions = [Extension(\"*\", [\"*.pyx\"])],\r\n>     cmdclass={'build_ext': Cython.Build.new_build_ext},\r\n>     ...\r\n> )\r\n> ```\r\n\r\nhowever [Cython.Build](https://github.com/cython/cython/blob/3.0a1-79-g3de7a4b8f/Cython/Build/__init__.py) does not have it:\r\n\r\n```\r\n>>> import Cython.Build\r\n>>> Cython.Build.new_build_ext\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: 'module' object has no attribute 'new_build_ext'\r\n```\r\n\r\nbecause `new_build_ext` is defined only in [Cython.Distutils.build_ext](https://github.com/cython/cython/blob/3.0a1-79-g3de7a4b8f/Cython/Distutils/build_ext.py#L14)\r\n\r\n\r\n--------\r\n\r\n(*) probably due to some logic error in _check_stack calls. if I patch Cython locally with\r\n\r\n```diff\r\n--- a/Cython/Distutils/old_build_ext.py\r\n+++ b/Cython/Distutils/old_build_ext.py\r\n@@ -34,9 +34,7 @@ def _check_stack(path):\r\n     pass\r\n   return False\r\n \r\n-if (not _check_stack('setuptools/extensions.py')\r\n-    and not _check_stack('pyximport/pyxbuild.py')\r\n-    and not _check_stack('Cython/Distutils/build_ext.py')):\r\n+if 1:\r\n     warnings.warn(\r\n         \"Cython.Distutils.old_build_ext does not properly handle dependencies \"\r\n         \"and is deprecated.\")\r\n```\r\n\r\nthe warning is printed:\r\n\r\n```\r\n$ python -c 'import Cython.Distutils.old_build_ext'\r\n/home/kirr/src/tools/py/cython/Cython/Distutils/old_build_ext.py:39: UserWarning: Cython.Distutils.old_build_ext does not properly handle dependencies and is deprecated.\r\n  \"Cython.Distutils.old_build_ext does not properly handle dependencies \"\r\n$ python -c 'from Cython.Build import build_ext'\r\n/home/kirr/src/tools/py/cython/Cython/Distutils/old_build_ext.py:39: UserWarning: Cython.Distutils.old_build_ext does not properly handle dependencies and is deprecated.\r\n  \"Cython.Distutils.old_build_ext does not properly handle dependencies \"\r\n```",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3541/comments",
    "created_at": "2020-04-22T13:04:18Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-22T13:04:19Z",
            "event": "mentioned",
            "id": 3260490185,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2MDQ5MDE4NQ==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3260490185"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-22T13:04:19Z",
            "event": "subscribed",
            "id": 3260490191,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjA0OTAxOTE=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3260490191"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3541/events",
    "html_url": "https://github.com/cython/cython/issues/3541",
    "id": 604740967,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3541/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2MDQ3NDA5Njc=",
    "number": 3541,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "build_ext does not properly track dependencies (and should be deprecated / removed)",
    "updated_at": "2020-04-22T13:04:18Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3541",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/1794248?v=4",
        "events_url": "https://api.github.com/users/navytux/events{/privacy}",
        "followers_url": "https://api.github.com/users/navytux/followers",
        "following_url": "https://api.github.com/users/navytux/following{/other_user}",
        "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/navytux",
        "id": 1794248,
        "login": "navytux",
        "node_id": "MDQ6VXNlcjE3OTQyNDg=",
        "organizations_url": "https://api.github.com/users/navytux/orgs",
        "received_events_url": "https://api.github.com/users/navytux/received_events",
        "repos_url": "https://api.github.com/users/navytux/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/navytux"
    }
}