{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\r\n\r\nWhen inherit from a ```cdef class``` with ```__cinit__``` method which hava a default parameter, baseclass's ```__cinit__``` method ignores the defaut parameter from subclass\r\n\r\n### Code to reproduce the behaviour:\r\n\r\nConsidering the following code:\r\n```cython\r\ncdef class Base:\r\n    def __cinit__(self, bint attr = False):\r\n        print(f\"in base __cinit__: attr: {attr}\")\r\n\r\ncdef class Sub(Base):\r\n    def __cinit__(self, bint attr = True):\r\n        print(f\"in sub __cinit__: attr: {attr}\")\r\n```\r\n\r\n\r\n### Expected behaviour\r\n\r\nExpected:\r\n```\r\na = Sub()\r\n\r\n# in base __cinit__: attr: True\r\n# in sub __cinit__: attr: True \r\n```\r\n\r\n\r\nActual:\r\n```\r\na = Sub()\r\n\r\n# in base __cinit__: attr: False\r\n# in sub __cinit__: attr: True\r\n```\r\n\r\n### OS\r\n\r\nWindows\r\n\r\n### Python version\r\n\r\n3.10.8\r\n\r\n### Cython version\r\n\r\n0.29.35\r\n\r\n### Additional context\r\n\r\nI know the ```__cinit__``` in baseclass will call first, and using the following code:\r\n```\r\na= Sub(True)\r\n```\r\ngot\r\n> in base __cinit__: attr: True\r\nin sub __cinit__: attr: True\r\n\r\nClearly, the ```__cinit__``` in baseclass will use the parameter passed to the subclass, so why not default parameters?",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "It isn't completely obvious to me that this is the right thing to do (but equally it isn't obvious that it's wrong). Obviously in regular Python you'd explicitly control this by passing arguments to `super().__init__()`. In Cython we've decided that you can't control and intercept arguments passed to the base class `__cinit__`. Your proposal here would be adding a somewhat obscure exception to the rule where you somehow _can_ influence what gets passed the the base `__cinit__`.\r\n\r\nThat suggests to me it's the wrong thing to do, because you're going against the general rule on how these methods work.\r\n\r\nIf we were to do something like this, I think I'd personally rather let the user do an explicit call to `Base.__cinit__` (with the implicit call only generate if the explicit call was missing), and give complete control, rather than adding a slightly obscure back-door mechanism.\r\n\r\nOne additional thing to consider with your proposal is how you'd like the situation with 3 layers to behave:\r\n\r\n```\r\ncdef class L1:\r\n  def __cinit__(self, arg=1):\r\n    print(arg)\r\n\r\ncdef class L2(L1):\r\n  def __cinit__(self):  # no arg, is the default from L3 dropped here?\r\n    pass\r\n\r\ncdef class L3(L2):\r\n  def __cinit__(self, arg=2):\r\n     print(arg)\r\n```\r\n\r\nand there's probably also implementation details about how it should jump between positional and keyword arguments",
            "created_at": "2023-06-24T17:43:42Z",
            "html_url": "https://github.com/cython/cython/issues/5500#issuecomment-1605666444",
            "id": 1605666444,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5500",
            "node_id": "IC_kwDOABDGAc5ftIaM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1605666444/reactions"
            },
            "updated_at": "2023-06-24T17:43:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1605666444",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The __cinit__ method is specifically designed as a per-class initialisation step and thus independent of subclasses.\n\n>```cython\n>cdef class Base:\n>    def __cinit__(self, bint attr = False):\n>        print(f\"in base __cinit__: attr: {attr}\")\n>\n>cdef class Sub(Base):\n>    def __cinit__(self, bint attr = True):\n>        print(f\"in sub __cinit__: attr: {attr}\")\n>```\n\nIn addition to what David wrote, note that this doesn't even look to be a good design. Breaking the assumptions about a super class in a subclass feels wrong to me and goes against Liskov's substitution principle.\n",
            "created_at": "2023-06-24T21:32:38Z",
            "html_url": "https://github.com/cython/cython/issues/5500#issuecomment-1605736916",
            "id": 1605736916,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5500",
            "node_id": "IC_kwDOABDGAc5ftZnU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1605736916/reactions"
            },
            "updated_at": "2023-06-24T21:32:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1605736916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Iâ€˜m doing this because sometimes a C level structure should not be initialized in base classes, since they share the same methods, using inherit would be very convenient.\r\nConsidering the follwing example:\r\n```\r\ncdef class WrapperA:\r\n    cdef cstructa * a\r\n    def __cinit__(self, bint inita = True):\r\n        if inita:\r\n            self.a = cstructa_new()\r\n        else:\r\n            self.a = cstructb_new()\r\n\r\ncdef class WrapperB(WrapperA):\r\n    def __cinit__(self, bint inita = False):\r\n        assert self.a is not NULL\r\n    \r\n```\r\n```__cinit__``` in WrapperA is always invoked first, putting cstructb_new() in WrapperB would causing loss of references to previous structure, adding a way to control the parameters passed to baseclass would be useful.",
            "created_at": "2023-06-25T01:22:29Z",
            "html_url": "https://github.com/cython/cython/issues/5500#issuecomment-1605810502",
            "id": 1605810502,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5500",
            "node_id": "IC_kwDOABDGAc5ftrlG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1605810502/reactions"
            },
            "updated_at": "2023-06-25T01:32:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1605810502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/50922489?v=4",
                "events_url": "https://api.github.com/users/synodriver/events{/privacy}",
                "followers_url": "https://api.github.com/users/synodriver/followers",
                "following_url": "https://api.github.com/users/synodriver/following{/other_user}",
                "gists_url": "https://api.github.com/users/synodriver/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/synodriver",
                "id": 50922489,
                "login": "synodriver",
                "node_id": "MDQ6VXNlcjUwOTIyNDg5",
                "organizations_url": "https://api.github.com/users/synodriver/orgs",
                "received_events_url": "https://api.github.com/users/synodriver/received_events",
                "repos_url": "https://api.github.com/users/synodriver/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/synodriver/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/synodriver/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/synodriver"
            }
        },
        {
            "author_association": "NONE",
            "body": "> One additional thing to consider with your proposal is how you'd like the situation with 3 layers to behave:\r\n\r\nI think it should use the parameters from the class that is being called.\r\n\r\n> somehow can influence what gets passed the the base __cinit__.\r\n> I think I'd personally rather let the user do an explicit call to Base.__cinit__\r\n\r\nThis is actually what I want. What I'm doing is just a workaround for this",
            "created_at": "2023-06-25T01:27:32Z",
            "html_url": "https://github.com/cython/cython/issues/5500#issuecomment-1605811412",
            "id": 1605811412,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5500",
            "node_id": "IC_kwDOABDGAc5ftrzU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1605811412/reactions"
            },
            "updated_at": "2023-06-25T01:29:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1605811412",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/50922489?v=4",
                "events_url": "https://api.github.com/users/synodriver/events{/privacy}",
                "followers_url": "https://api.github.com/users/synodriver/followers",
                "following_url": "https://api.github.com/users/synodriver/following{/other_user}",
                "gists_url": "https://api.github.com/users/synodriver/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/synodriver",
                "id": 50922489,
                "login": "synodriver",
                "node_id": "MDQ6VXNlcjUwOTIyNDg5",
                "organizations_url": "https://api.github.com/users/synodriver/orgs",
                "received_events_url": "https://api.github.com/users/synodriver/received_events",
                "repos_url": "https://api.github.com/users/synodriver/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/synodriver/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/synodriver/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/synodriver"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > somehow can influence what gets passed the the base **cinit**.\r\n> > I think I'd personally rather let the user do an explicit call to Base.**cinit**\r\n> \r\n> This is actually what I want. What I'm doing is just a workaround for this\r\n\r\nIf we did do that it'd have to be quite strict - you wouldn't be able to interact with `self` in any way before calling the base `__cinit__`. Because the main point of `__cinit__` is to set up all the invariants that must be in place before interacting with a cdef class.\r\n\r\nI personally think this is something we should allow (don't know that everyone agrees though), but it'd have to be implemented pretty strictly and pretty carefully.",
            "created_at": "2023-06-25T07:25:28Z",
            "html_url": "https://github.com/cython/cython/issues/5500#issuecomment-1605912102",
            "id": 1605912102,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5500",
            "node_id": "IC_kwDOABDGAc5fuEYm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1605912102/reactions"
            },
            "updated_at": "2023-06-25T07:25:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1605912102",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the main point of `__cinit__` is to set up all the invariants\n> that must be in place before interacting with a cdef class.\n\nExactly. For everything else, there is already __init__. Just use that if you must respond to subclass needs.\n\nOne of the differences between __init__ and __cinit__ is the call order. __cinit__ is called top-down (internally), __init__ is called bottom-up (by the user side code). I don't see why we should change that. Both have different purposes that they seem to serve quite well. And they give different guarantees along the way.\n",
            "created_at": "2023-06-25T10:51:04Z",
            "html_url": "https://github.com/cython/cython/issues/5500#issuecomment-1606023819",
            "id": 1606023819,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5500",
            "node_id": "IC_kwDOABDGAc5fufqL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1606023819/reactions"
            },
            "updated_at": "2023-06-25T10:51:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1606023819",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Using ```__init__``` is ok, but users can bypass c structure initialize by using ```sometype.__new__```, which may cause problems.",
            "created_at": "2023-06-25T16:39:54Z",
            "html_url": "https://github.com/cython/cython/issues/5500#issuecomment-1606152952",
            "id": 1606152952,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5500",
            "node_id": "IC_kwDOABDGAc5fu_L4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1606152952/reactions"
            },
            "updated_at": "2023-06-25T16:39:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1606152952",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/50922489?v=4",
                "events_url": "https://api.github.com/users/synodriver/events{/privacy}",
                "followers_url": "https://api.github.com/users/synodriver/followers",
                "following_url": "https://api.github.com/users/synodriver/following{/other_user}",
                "gists_url": "https://api.github.com/users/synodriver/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/synodriver",
                "id": 50922489,
                "login": "synodriver",
                "node_id": "MDQ6VXNlcjUwOTIyNDg5",
                "organizations_url": "https://api.github.com/users/synodriver/orgs",
                "received_events_url": "https://api.github.com/users/synodriver/received_events",
                "repos_url": "https://api.github.com/users/synodriver/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/synodriver/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/synodriver/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/synodriver"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5500/comments",
    "created_at": "2023-06-24T16:57:06Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/50922489?v=4",
                "events_url": "https://api.github.com/users/synodriver/events{/privacy}",
                "followers_url": "https://api.github.com/users/synodriver/followers",
                "following_url": "https://api.github.com/users/synodriver/following{/other_user}",
                "gists_url": "https://api.github.com/users/synodriver/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/synodriver",
                "id": 50922489,
                "login": "synodriver",
                "node_id": "MDQ6VXNlcjUwOTIyNDg5",
                "organizations_url": "https://api.github.com/users/synodriver/orgs",
                "received_events_url": "https://api.github.com/users/synodriver/received_events",
                "repos_url": "https://api.github.com/users/synodriver/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/synodriver/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/synodriver/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/synodriver"
            },
            "commit_id": "96a32103f17785e0450c2d5f0159ac8f6996a7ef",
            "commit_url": "https://api.github.com/repos/synodriver/pyarchive/commits/96a32103f17785e0450c2d5f0159ac8f6996a7ef",
            "created_at": "2023-06-25T16:46:20Z",
            "event": "referenced",
            "id": 9630264027,
            "node_id": "REFE_lADOABDGAc5pq00AzwAAAAI-Airb",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/9630264027"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5500/events",
    "html_url": "https://github.com/cython/cython/issues/5500",
    "id": 1772834048,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5500/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5pq00A",
    "number": 5500,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5500/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5500/timeline",
    "title": "[BUG] Baseclass's __cinit__ method does not use subclass's default parameter",
    "updated_at": "2023-06-25T16:39:54Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5500",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/50922489?v=4",
        "events_url": "https://api.github.com/users/synodriver/events{/privacy}",
        "followers_url": "https://api.github.com/users/synodriver/followers",
        "following_url": "https://api.github.com/users/synodriver/following{/other_user}",
        "gists_url": "https://api.github.com/users/synodriver/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/synodriver",
        "id": 50922489,
        "login": "synodriver",
        "node_id": "MDQ6VXNlcjUwOTIyNDg5",
        "organizations_url": "https://api.github.com/users/synodriver/orgs",
        "received_events_url": "https://api.github.com/users/synodriver/received_events",
        "repos_url": "https://api.github.com/users/synodriver/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/synodriver/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/synodriver/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/synodriver"
    }
}