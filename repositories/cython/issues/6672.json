{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Is your feature request related to a problem? Please describe.\n\nI have a library coming called [heapstruct](https://github.com/Vizonex/HeapStruct) which will be my alternative library to msgspec for adding faster json serlizers into sqlalchemy as well as a faster init function. Since msgspec was too strict for my needs and because both msgspec & Sqlalhcmey did not do well with being merged together I took it upon myself to make a new backend called heapstruct which will be my alternative to msgsepc. I also had the idea of allowing __heapstruct__ to be used as a Cython simillary to what numpy does but it's lacking something very important features to make that happen. For the longest time `__init_subclass__` and `metaclasses` as described in [pep-3115](https://peps.python.org/pep-3115/) have not been allowed and straight up neglected from use with __C extension classes__ in cython and I fear that performance degradations could be encountered when defining a normal class and I don't think someone should have to go through the trouble of writing tons of C code just to pull off fast C Metaclasses either.\n\n\n\n\n\n### Describe the solution you'd like.\n\n\nMy Solution\n-------------\nI propose implementing 2 new directives that could easily solve these roadbumps put in front of me that will allow for my library to safely be used with Cython and Python. \n\n\n## cython.metaclass\nthis directive could be used to override the `__cinit__` where C functions can be safely accessed and the metaclass be defined in a pxd file without breaking. For reference I will use the code described in pep-3115 and the `__new__` function can be used otherwise a second idea would be to run `__new__` first and then run `__cinit__` second. \n\n```cython\n\ncimport cython \n\n# The custom dictionary\nclass member_table(dict):\n    def __init__(self):\n        self.member_names = []\n\n    def __setitem__(self, key, value):\n        # if the key is not already defined, add to the\n        # list of keys.\n        if key not in self:\n            self.member_names.append(key)\n\n        # Call superclass\n        dict.__setitem__(self, key, value)\n\n# The metaclass can now be cdefined and use within pxd files without breaking...\n@cython.metaclass\ncdef class OrderedClass(type):\n\n    # now that cdefinitons are allowed we can use lower level items/function that we may not want someone to access or use in python itself\n    cdef size_t my_cfunction(self):\n          ...\n\n    # The prepare function\n    @classmethod\n    def __prepare__(metacls, name, bases): # No keywords in this case\n        return member_table()\n\n    # The metaclass invocation can now be used becuase we perviously \n    # defined to cython we're using a metclass Note that if we choose to allow __cinit__\n     # we may need to forward those values through a bit of C luckily I also know C so I could always implement it myself.\n    def __new__(cls, name, bases, classdict):\n        # Note that we replace the classdict with a regular\n        # dict before passing it to the superclass, so that we\n        # don't continue to record member names after the class\n        # has been created.\n        result = type.__new__(cls, name, bases, dict(classdict))\n        result.member_names = classdict.member_names\n        return result\n\n# now that we defined OrderedClass as a cdef type it can be possible to use the metaclass argument whereever we need it.\ncdef class MyClass(metaclass=OrderedClass):\n    # method1 goes in array element 0\n    def method1(self):\n        pass\n\n    # method2 goes in array element 1\n    def method2(self):\n        pass\n\n\n```\n\n## cython.subclass_variables\nThis wrapper can be used to allow Cython to pass arbitrary variables to an `__init_subclass__` function in a C defined Extension without issues.\nTo do that we could inject the defined variables in the compiler beforehand sometime before `__cinit__` gets called.\n\n```cython\ncimport cython\n\n@cython.subclass_variables\ncdef class MyNumber():\n     cdef int myint\n     def __init_subclass__(cls, int myint):\n            cls.myint = myint\n            ...\n\ncdef class FunnyNumber(MyNumber, myint=42069):\n       ...\n\n```\n\n\n\n\n\n### Describe alternatives you've considered.\n\nAlternative Approches to subclassing values\nIf the `subclass_varibles` was a mouthful we can always call it `cython.pass_subclass_values` or `cython.enable_subclass_values` \n\nAnother Approach I had to Metclasses values would be to make a new dunder method like `__cinit_metaclass__` or something a little less confusing.\n`__cinit_metaclass__` would replace `__new__` and `__cinit__` but allow for namespace variables to still be passed since those can be extremely important variables for metaclasses to have. \n\n\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Unfortunately I don't really think there's C API support for this (especially for the metaclass side).\n\nOne limitation to both is that cdef classes are immutable after they're created (so `cls.myint = myint` automatically fails). For now that's very hard to change because it's very easy for users to crash the interpreter if we don't set that. Although heap types might be able to be more relaxed.\n\nI do try to emphasise: cdef classes are not regular classes - a lot of the speed-up you get is because they have restrictions that regular classes don't have.",
            "created_at": "2025-02-15T21:02:43Z",
            "html_url": "https://github.com/cython/cython/issues/6672#issuecomment-2661100224",
            "id": 2661100224,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6672",
            "node_id": "IC_kwDOABDGAc6enSrA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2661100224/reactions"
            },
            "updated_at": "2025-02-15T21:02:43Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2661100224",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "On Sat, Feb 15, 2025 at 3:03 PM da-woods ***@***.***> wrote:\r\n\r\n> Unfortunately I don't really think there's C API support for this\r\n> (especially for the metaclass side).\r\n>\r\n> One limitation to both is that cdef classes are immutable after they're\r\n> created (so cls.myint = myint automatically fails). For now that's very\r\n> hard to change because it's very easy for users to crash the interpreter if\r\n> we don't set that. Although heap types might be able to be more relaxed.\r\n>\r\n> I do try to emphasise: cdef classes are not regular classes - a lot of the\r\n> speed-up you get is because they have restrictions that regular classes\r\n> don't have.\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/cython/cython/issues/6672#issuecomment-2661100224>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/A3K7GGXA7BEPVTUBT5XZVNT2P6TQTAVCNFSM6AAAAABXFQN3FKVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDMNRRGEYDAMRSGQ>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n> [image: da-woods]*da-woods* left a comment (cython/cython#6672)\r\n> <https://github.com/cython/cython/issues/6672#issuecomment-2661100224>\r\n>\r\n> Unfortunately I don't really think there's C API support for this\r\n> (especially for the metaclass side).\r\n>\r\n> One limitation to both is that cdef classes are immutable after they're\r\n> created (so cls.myint = myint automatically fails). For now that's very\r\n> hard to change because it's very easy for users to crash the interpreter if\r\n> we don't set that. Although heap types might be able to be more relaxed.\r\n>\r\n> I do try to emphasise: cdef classes are not regular classes - a lot of the\r\n> speed-up you get is because they have restrictions that regular classes\r\n> don't have.\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/cython/cython/issues/6672#issuecomment-2661100224>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/A3K7GGXA7BEPVTUBT5XZVNT2P6TQTAVCNFSM6AAAAABXFQN3FKVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDMNRRGEYDAMRSGQ>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\nThat’s a good explanation actually that cdef extensions have restrictions\r\ninvolved. I just think it’s disappointing that I was going for a Pydantic\r\ntype of data class setup without the wasteful code in it only to find out\r\nthe approach I was going for is not currently available at the moment.\r\n\r\nI do however wish that heaptypes had more documentation into how they\r\nworked because I am having trouble with figuring out how members and\r\noffsets can be extracted.\r\n",
            "created_at": "2025-02-16T19:10:09Z",
            "html_url": "https://github.com/cython/cython/issues/6672#issuecomment-2661574686",
            "id": 2661574686,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6672",
            "node_id": "IC_kwDOABDGAc6epGge",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2661574686/reactions"
            },
            "updated_at": "2025-02-16T19:10:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2661574686",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6672/comments",
    "created_at": "2025-02-14T21:47:30Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-02-14T21:54:30Z",
            "event": "renamed",
            "id": 16317816179,
            "node_id": "RTE_lADOABDGAc6qKCaAzwAAAAPMnh1z",
            "performed_via_github_app": null,
            "rename": {
                "from": "Creating a new Directive for allowing the use of Metaclasses or __init_subclass__ in cdefinitions",
                "to": "Creating a new Directive for allowing the use of Metaclasses or __init_subclass__ in C Extensions"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/16317816179"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6672/events",
    "html_url": "https://github.com/cython/cython/issues/6672",
    "id": 2854758016,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6672/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6qKCaA",
    "number": 6672,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6672/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6672/timeline",
    "title": "Creating a new Directive for allowing the use of Metaclasses or __init_subclass__ in C Extensions",
    "updated_at": "2025-02-16T19:10:10Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6672",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
        "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
        "followers_url": "https://api.github.com/users/Vizonex/followers",
        "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
        "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Vizonex",
        "id": 114684698,
        "login": "Vizonex",
        "node_id": "U_kgDOBtXzGg",
        "organizations_url": "https://api.github.com/users/Vizonex/orgs",
        "received_events_url": "https://api.github.com/users/Vizonex/received_events",
        "repos_url": "https://api.github.com/users/Vizonex/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Vizonex",
        "user_view_type": "public"
    }
}