{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Is your feature request related to a problem? Please describe.\n\nIn trivial cases that \"obviously\" don't access the caught exception, we can avoid getting and normalising it completely. We already do this for `except â€¦: pass`, but we could do it in a few other cases as well, e.g.\r\n```cython\r\ntry:\r\n    return values[1]\r\nexcept IndexError:\r\n    return None  # definitely discarding the exception unseen\r\n```\r\n\n\n### Describe the solution you'd like.\n\nWe currently only check for an empty statement list in the `except` clause, although that's not guaranteed to be empty even for a `pass` statement.\r\nhttps://github.com/cython/cython/blob/4201ff0b97058b8cdf607f458226b0b939e0712d/Cython/Compiler/Nodes.py#L8484-L8486\r\nWe should use a more general check here.\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I tried it and it makes this test fail:\r\n```cython\r\ndef exception_creates_invalid_instance():\r\n    \"\"\"\r\n    >>> print( exception_creates_invalid_instance() )\r\n    OK\r\n    \"\"\"\r\n    class MyException(Exception):\r\n        def __new__(cls, *args):\r\n            return object()\r\n\r\n    try:\r\n        raise MyException\r\n    except TypeError:\r\n        return \"OK\"\r\n```\r\nhttps://github.com/cython/cython/blob/master/tests/run/broken_exception.pyx\r\nThank you, test suite!\r\n\r\nThe reason is that we don't instantiate the exception if it was freshly raised and then not needed. But instantiating the exception can have side effects.\r\nHowever, this test would already fail with the current state of optimisation if we replaced `return \"OK\"` with `pass`. (It might not fail in current master because we now keep \"pass\" statements for tracing reasons, thus probably breaking the intended optimisation.)\r\n\r\nQuestion: which is more important here? Total compliance with niche behaviour in Python, or better performance?",
            "created_at": "2025-01-07T09:37:19Z",
            "html_url": "https://github.com/cython/cython/issues/6601#issuecomment-2574817826",
            "id": 2574817826,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6601",
            "node_id": "IC_kwDOABDGAc6ZeJoi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2574817826/reactions"
            },
            "updated_at": "2025-01-07T09:37:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2574817826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "A couple of thoughts:\r\n\r\n* we should still be able to drop the traceback. So even if we still decide to instantiate the exception then that's still a skipable expensive step. \r\n* Does Python 3.12 change anything? I think that the exception is always instantiated there (because it isn't stored separately as three parts). So possibly we could only apply this on 3.12+",
            "created_at": "2025-01-07T12:13:28Z",
            "html_url": "https://github.com/cython/cython/issues/6601#issuecomment-2575133900",
            "id": 2575133900,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6601",
            "node_id": "IC_kwDOABDGAc6ZfWzM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2575133900/reactions"
            },
            "updated_at": "2025-01-07T12:13:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2575133900",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> * we should still be able to drop the traceback\r\n\r\nOr maybe this isn't even true if instantiating the exception can raise another one.",
            "created_at": "2025-01-07T12:15:45Z",
            "html_url": "https://github.com/cython/cython/issues/6601#issuecomment-2575137945",
            "id": 2575137945,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6601",
            "node_id": "IC_kwDOABDGAc6ZfXyZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2575137945/reactions"
            },
            "updated_at": "2025-01-07T12:15:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2575137945",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> However, this test would already fail with the current state of optimisation if we replaced `return \"OK\"` with `pass`. (It might not fail in current master because we now keep \"pass\" statements for tracing reasons, thus probably breaking the intended optimisation.)\r\n\r\nI've had a quick go with both 3.0.x and master and it seems to pass.\r\n\r\nIn both cases the `except TypeError: pass` goes to\r\n\r\n```\r\n__pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);\r\n    if (__pyx_t_5) {\r\n      __Pyx_ErrRestore(0,0,0);\r\n      goto __pyx_L4_exception_handled;\r\n    }\r\n```\r\n\r\n",
            "created_at": "2025-01-07T18:26:01Z",
            "html_url": "https://github.com/cython/cython/issues/6601#issuecomment-2575963427",
            "id": 2575963427,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6601",
            "node_id": "IC_kwDOABDGAc6ZihUj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2575963427/reactions"
            },
            "updated_at": "2025-01-07T18:26:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2575963427",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The reason is that we don't instantiate the exception if it was freshly raised and then not needed.\r\n\r\nActually, I was wrong here. We DO instantiate the exception, as Python does (although less efficiently so, using `PyObject_Call()` inside of `__Pyx_Raise()` in `Exceptions.c` instead of using a vectorcall). The failure was due to a bug on my side. I've pushed a PR in https://github.com/cython/cython/pull/6602",
            "created_at": "2025-01-07T20:49:45Z",
            "html_url": "https://github.com/cython/cython/issues/6601#issuecomment-2576194814",
            "id": 2576194814,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6601",
            "node_id": "IC_kwDOABDGAc6ZjZz-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2576194814/reactions"
            },
            "updated_at": "2025-01-07T20:49:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2576194814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6601/comments",
    "created_at": "2025-01-07T09:37:05Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-01-07T09:37:05Z",
            "event": "labeled",
            "id": 15836173458,
            "label": {
                "color": "444444",
                "name": "Optimization"
            },
            "node_id": "LE_lADOABDGAc6lPtdmzwAAAAOv6NSS",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/15836173458"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6601/events",
    "html_url": "https://github.com/cython/cython/issues/6601",
    "id": 2772359014,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556272,
            "name": "Optimization",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNzI=",
            "url": "https://api.github.com/repos/cython/cython/labels/Optimization"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6601/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6lPtdm",
    "number": 6601,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6601/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6601/timeline",
    "title": "[ENH] Eliminate exception getting for trivial except clauses",
    "updated_at": "2025-01-07T20:49:46Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6601",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder",
        "user_view_type": "public"
    }
}