{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nThe annotation_typing directive tries to be fairly safe and tries not to do anything that would change the behaviour of Python code (at least on the assumption that the type annotations are correct). A couple of commonly asked about examples:\r\n\r\n* annotations of module-level variables are ignored because they'd affect visibility\r\n* `int` (and I think `float`) are ignored because the Python type has a different range to the C type.\r\n\r\nMy impression is that many people would find these limitations acceptable\r\n\r\n**Describe the solution you'd like**\r\n\r\nI'd propose splitting the annotation_typing directive into `annotation_typing=safe` (the current behaviour) and `annotation_typing=full` (treat annotations as close as possible to a cdef declaration). We should keep `safe` as the default, and alias `True` to `safe` (so existing code works). The documentation should largely stick with `safe` too (I'd propose only using `full` to document `full`)\r\n\r\n**Describe alternatives you've considered**\r\n\r\n* Keep the status quo: we don't like compiler directives because they increase the number of combinations that need testing.\r\n* Subdirectives: `annotation_typing.unsafe_int=True`, `annotation_typing.module_globals=True`. I think this is worse but it's an option.\r\n\r\n**Additional context**\r\n\r\nPosted for feedback, rather than because I was planning to do anything imminent.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "That seems to represent pretty much the use case of mypyc, and I think there definitely is such a use case. How important it is, I don't know, but it seems worth supporting. Especially since it seems easy to do.\n",
            "created_at": "2021-12-24T05:55:41Z",
            "html_url": "https://github.com/cython/cython/issues/4520#issuecomment-1000669295",
            "id": 1000669295,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4520",
            "node_id": "IC_kwDOABDGAc47pQBv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1000669295/reactions"
            },
            "updated_at": "2021-12-24T05:55:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1000669295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm generally in favour of such a mode (or improved annotation typing, or both), but the specific details seem worth discussing.\r\nFrom PR https://github.com/cython/cython/pull/4883#issue-1300855865:\r\n\r\n>     * `int` -> C `int`\r\n>     * `float` -> `float` (instead of double)\r\n\r\nI'm not sure how useful this is. My impression is that most users would rather want C `long` and `double` instead of `int` and `float`. But those names don't exist in Python, which means that users would still resort to `cython.long` (or even `cython.longlong` on Win64) and `cython.double`. Not much won, if that is the case.\r\n\r\n>     * Module globals with annotations are turned into `cdef`-globals.\r\n\r\n… which means that in order to create Python module attributes, users would need to avoid annotations for these. That seems unnecessarily constraining.\r\n\r\nWe could investigate what mypyc uses as type mapping and copy that. And call the mode \"mypyc\".",
            "created_at": "2022-07-11T16:41:37Z",
            "html_url": "https://github.com/cython/cython/issues/4520#issuecomment-1180631909",
            "id": 1180631909,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4520",
            "node_id": "IC_kwDOABDGAc5GXwNl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1180631909/reactions"
            },
            "updated_at": "2022-07-11T16:41:37Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1180631909",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I was thinking of it slightly differently... I was thinking of it as \"behaves as much as possible like the old syntax as possible\".\r\n\r\nI think the main source of confusion is that there's a different set of rules for annotations and `cdef` declarations, so was trying to make a mode where they behave the same. So I wasn't really trying to add a new set of rules.\r\n\r\n> >     * Module globals with annotations are turned into `cdef`-globals.\r\n>\r\n> … which means that in order to create Python module attributes, users would need to avoid annotations for these. That seems unnecessarily constraining.\r\n\r\nThat's again consistent with \"it's just like a cdef declaration\".\r\n\r\n---------------------------------------\r\n\r\nWhat I can quickly find out about mypyc:\r\n\r\n* For `int` It used a 63/31 bit \"maybe a PyObject pointer, maybe an integer\" representation (https://github.com/python/mypy/blob/b22c4e4a2e9f56480724a45e159552c922af47dc/mypyc/doc/dev-intro.md#value-representation) to be able to fall back to PyObjects fairly cheaply. That might be a trick that we'd like to steal, but probably not as part of this change\r\n* For `float` it looks to treat them as PyObject.\r\n* It looks like it doesn't do much with module level globals.",
            "created_at": "2022-07-11T17:18:14Z",
            "html_url": "https://github.com/cython/cython/issues/4520#issuecomment-1180666503",
            "id": 1180666503,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4520",
            "node_id": "IC_kwDOABDGAc5GX4qH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1180666503/reactions"
            },
            "updated_at": "2022-07-11T17:18:14Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1180666503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4520/comments",
    "created_at": "2021-12-23T17:53:11Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4520/events",
    "html_url": "https://github.com/cython/cython/issues/4520",
    "id": 1087901002,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4520/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5A2A1K",
    "number": 4520,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4520/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4520/timeline",
    "title": "[ENH] \"full\" and \"safe\" annotation typing mode",
    "updated_at": "2022-07-11T17:18:14Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4520",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}