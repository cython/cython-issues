{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nThis issue is reported with the intention of improving the error message in this case.\n\nWhen an empty forward declaration of a struct such as `ctypedef struct t_context: pass` is used as a forward declaration of a struct instead of the more correct`ctypedef struct t_context`, it triggers a `Cannot convert 't_context *' to Python object` error if the struct is defined after it.\n\n\n### Code to reproduce the behaviour:\n\n```cython\nfrom libc.stdlib cimport malloc, free\nfrom libc.string cimport memset\n\ncdef extern from *:\n    \"\"\"\n    typedef struct t_context t_context;\n\n    typedef struct t_style {\n        int padding;\n    } t_style;\n\n    struct t_context {\n        int frame;\n        t_style* style;\n    };\n    \"\"\"\n\n    # HERE: ext line triggers can't convert errors\n    ctypedef struct t_context: pass\n\n    # Correct use is\n    # ctypedef struct t_context: pass\n\n    ctypedef struct t_style:\n        int padding\n\n    ctypedef struct t_context:\n        int frame\n        t_style* style\n\ncdef class Style:\n    cdef t_style* ptr\n    cdef bint owner\n\n    def __cinit__(self):\n        self.ptr = NULL\n        self.owner = False\n\n    def __dealloc__(self):\n        # De-allocate if not null and flag is set\n        if self.ptr is not NULL and self.owner is True:\n            free(self.ptr)\n            self.ptr = NULL\n\n    def __init__(self):\n        raise TypeError(\"This class cannot be instantiated directly.\")\n\n    @staticmethod\n    cdef Style from_ptr(t_style* ptr, bint owner=False):\n        cdef Style wrapper = Style.__new__(Style)\n        wrapper.ptr = ptr\n        wrapper.owner = owner\n        return wrapper\n\n    @staticmethod\n    cdef Style new():\n        cdef t_style* _ptr = <t_style*>malloc(sizeof(t_style))\n        if _ptr is NULL:\n            raise MemoryError(\"Failed to allocate Style\")\n        memset(_ptr, 0, sizeof(t_style))\n        return Style.from_ptr(_ptr, owner=True)\n   \n    @property\n    def padding(self) -> int:\n        return self.ptr.padding\n   \n    @padding.setter\n    def padding(self, int value):\n        self.ptr.padding = value\n\ncdef class Context:\n    cdef t_context* ptr\n    cdef bint owner\n\n    def __cinit__(self):\n        self.ptr = NULL\n        self.owner = False\n\n    def __dealloc__(self):\n        # De-allocate if not null and flag is set\n        if self.ptr is not NULL and self.owner is True:\n            free(self.ptr.style)\n            free(self.ptr)\n            self.ptr = NULL\n\n    def __init__(self):\n        self.ptr = <t_context*>malloc(sizeof(t_context))\n        if self.ptr is NULL:\n            raise MemoryError(\"Failed to allocate Context\")\n        self.ptr.frame = 0\n        self.ptr.style = <t_style*>malloc(sizeof(t_style))\n        if self.ptr.style is NULL:\n            raise MemoryError(\"Failed to allocate context.style\")\n        self.owner = True            \n\n    @staticmethod\n    cdef Context from_ptr(t_context* ptr, bint owner=False):\n        cdef Context wrapper = Context.__new__(Context)\n        wrapper.ptr = ptr\n        wrapper.owner = owner\n        return wrapper\n\n    @staticmethod\n    cdef Context new():\n        cdef t_context* _ptr = <t_context*>malloc(sizeof(t_context))\n        if _ptr is NULL:\n            raise MemoryError(\"Failed to allocate Context\")\n        return Context.from_ptr(_ptr, owner=True)\n\n    @property\n    def style(self) -> Style:\n        return Style.from_ptr(<t_style*>self.ptr.style)\n```\n\n\n### Expected behaviour\n\nThere error text should indicate that an empty struct declaration preceding a struct declaration is an error in cython.\n\n\n### OS\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Cython version\n\n_No response_\n\n### Additional context\n\nNote that this issue was described and analyzed extensively in [a cython google group thread](https://groups.google.com/g/cython-users/c/j4aQJT7ujnk).\n\nAlso note that [one of current visual code cython extensions](https://github.com/ktnrg45/vs-code-cython) favors the incorrect use and treats the correct use as an error (see this [issue](https://github.com/ktnrg45/vs-code-cython/issues/35))\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/7003/comments",
    "created_at": "2025-07-05T05:54:05Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-07-05T06:11:52Z",
            "event": "subscribed",
            "id": 18481604903,
            "node_id": "SE_lADOABDGAc6-_tynzwAAAARNlukn",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/18481604903"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3701918?v=4",
                "events_url": "https://api.github.com/users/shakfu/events{/privacy}",
                "followers_url": "https://api.github.com/users/shakfu/followers",
                "following_url": "https://api.github.com/users/shakfu/following{/other_user}",
                "gists_url": "https://api.github.com/users/shakfu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shakfu",
                "id": 3701918,
                "login": "shakfu",
                "node_id": "MDQ6VXNlcjM3MDE5MTg=",
                "organizations_url": "https://api.github.com/users/shakfu/orgs",
                "received_events_url": "https://api.github.com/users/shakfu/received_events",
                "repos_url": "https://api.github.com/users/shakfu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shakfu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shakfu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shakfu",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-07-07T08:25:38Z",
            "event": "renamed",
            "id": 18499706218,
            "node_id": "RTE_lADOABDGAc6-_tynzwAAAAROqx1q",
            "performed_via_github_app": null,
            "rename": {
                "from": "[BUG] Unhelpful error message if a an empty structure declaration is used in place of a forward structure declaration",
                "to": "[BUG] Unhelpful error message if an empty struct decl is used in place of a forward struct decl"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/18499706218"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/7003/events",
    "html_url": "https://github.com/cython/cython/issues/7003",
    "id": 3204373671,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/7003/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6-_tyn",
    "number": 7003,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/7003/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/7003/timeline",
    "title": "[BUG] Unhelpful error message if an empty struct decl is used in place of a forward struct decl",
    "type": null,
    "updated_at": "2025-07-07T08:25:38Z",
    "url": "https://api.github.com/repos/cython/cython/issues/7003",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3701918?v=4",
        "events_url": "https://api.github.com/users/shakfu/events{/privacy}",
        "followers_url": "https://api.github.com/users/shakfu/followers",
        "following_url": "https://api.github.com/users/shakfu/following{/other_user}",
        "gists_url": "https://api.github.com/users/shakfu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/shakfu",
        "id": 3701918,
        "login": "shakfu",
        "node_id": "MDQ6VXNlcjM3MDE5MTg=",
        "organizations_url": "https://api.github.com/users/shakfu/orgs",
        "received_events_url": "https://api.github.com/users/shakfu/received_events",
        "repos_url": "https://api.github.com/users/shakfu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/shakfu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shakfu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/shakfu",
        "user_view_type": "public"
    }
}