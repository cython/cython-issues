{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Not sure if this is feasible, but I had the following situation while working on pandas hashtable code recently (simplified a bit from pandas-dev/pandas#22986 for clarity):\r\n\r\nTwo methods had substantial code overlap, with the difference being easily absorbed into a `bint` parameter - in this case, whether the `unique` method returns an inverse or not. It would be very desirable from a clarity/readability/maintenance perspective to unify the code for those two methods.\r\n\r\nI tried unifying these functions, but there was a perf-hit for the simpler case (no inverse) of about 10%, which is too much for just always calculating it by default for such a central method.\r\n\r\nI then tried (very naively) to get cython to compile the different code branches as follows:\r\n\r\n```\r\n    def _unique(self, ndarray[object] values, bint return_inverse=False):\r\n        [...]\r\n        with nogil:\r\n            for i in range(n):\r\n                [actual computation]\r\n                if return_inverse:\r\n                    [calculate inverse]\r\n\r\n    def unique(self, ndarray[object] values, bint return_inverse=False):\r\n        # define separate functions with/without inverse to force compilation\r\n        # of the different code paths for boolean \"return_inverse\"\r\n        if return_inverse:\r\n            return self._unique_with_inverse(values)\r\n        return self._unique_no_inverse(values)\r\n\r\n    def _unique_no_inverse(self, const {{dtype}}_t[:] values):\r\n        return self._unique(values, return_inverse=False)\r\n\r\n    def _unique_with_inverse(self, const {{dtype}}_t[:] values):\r\n        return self._unique(values, return_inverse=True)\r\n```\r\nbut the perf penalty remained.\r\n\r\nSumming up, it would be awesome to be able to do something like (the example below borrows from `@pytest.mark.parametrize`, but the exact syntax is not relevant to me):\r\n```\r\n    @cython.force_compile('return_inverse', [False])\r\n    def unique(self, ndarray[object] values, bint return_inverse=False):\r\n        [...]\r\n        with nogil:\r\n            for i in range(n):\r\n                [compute]\r\n                if return_inverse:\r\n                    [calculate inverse]\r\n```\r\nwith the idea being to *both* unify the code *and* maintain perf in the case where the `return_inverse`-branch doesn't need to be touched at all.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "If I understand correctly, you're asking for a feature to generate multiple versions of a codepath (like templates) for a list of specified values, as well as the generic one. This sounds like a complicated addition to the language best taken up on the mailing list. \r\n\r\nHowever, for your use, I don't think you'd need it. First, given your use of {{dtype}} I assume you're already using templates to auto-generate code at a higher level, so it shouldn't be too bad to leverage this templating functionality to explicitly generate to copies of this function parameterized on {{return_inverse}}. If you need to.\r\n\r\nI would be surprised if checking a bint, even millions of times, in a loop really has noticeable performance given how fast processors are these days (especially with branch prediction). Given the snippet above, I suspect the speed loss is due to calling multiple def functions, passing return_inverse as a keyword argument, and typing values as a memory view (requiring buffer unpacking) in the wrapper methods that just pass it on. Of course I'm just going on eyeballing the snippets in this ticket, without running any profiles myself, so that hypothesis would need to be validated against the actual code. ",
            "created_at": "2018-10-18T10:43:59Z",
            "html_url": "https://github.com/cython/cython/issues/2660#issuecomment-430962196",
            "id": 430962196,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2660",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDk2MjE5Ng==",
            "performed_via_github_app": null,
            "updated_at": "2018-10-18T10:43:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/430962196",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "NONE",
            "body": "@robertwb Thanks for the response!\r\n\r\nYou did understand correctly, and you're right - it is pretty much exactly like templating. Not sure how easy it would be to auto-template on a variable - I guess a necessary restriction would be, that the value needs to be `const`.\r\n\r\nIn general, the ``{{dtype}}`` (and other) templating is not the most ideal solution - for the former, there's fused types at least, which allows to write code much more natively.\r\n\r\nSo for the latter, it would be great to be able to avoid templating as well; e.g. do something like\r\n```\r\n@cython.force_compile('parameter_c', [val1, val2])\r\ndef some_function(parameter_a, parameter_b, parameter_c)\r\n    [do stuff]\r\n```\r\nand have it *internally* compile to the equivalent of\r\n```\r\ndef some_function(parameter_a, parameter_b, parameter_c)\r\n    if parameter_c == val1:\r\n        return some_function_fc_p2_v0(parameter_a, parameter_b)\r\n    elif parameter_c == val2:\r\n        return some_function_fc_p2_v1(parameter_a, parameter_b)\r\n    # general case\r\n    [do stuff]\r\n```\r\nwhere `some_function_fc_p2_v0` is **f**orce **c**ompiled with **p**arameter 2 set to **v**alue 0, etc.\r\n",
            "created_at": "2018-10-23T06:05:09Z",
            "html_url": "https://github.com/cython/cython/issues/2660#issuecomment-432105211",
            "id": 432105211,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2660",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjEwNTIxMQ==",
            "performed_via_github_app": null,
            "updated_at": "2018-10-23T06:05:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/432105211",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "author_association": "NONE",
            "body": "Regarding your comment about my concrete case:\r\n> I would be surprised if checking a bint, even millions of times, in a loop really has noticeable performance given how fast processors are these days (especially with branch prediction). [...] Of course I'm just going on eyeballing the snippets in this ticket, without running any profiles myself, so that hypothesis would need to be validated against the actual code.\r\n\r\nhere are the relevant code path from pandas-dev/pandas#22986, commit https://github.com/pandas-dev/pandas/pull/22986/commits/9918d52b96f722495fb1a72135e991d725ba3cda for the attempted unification and https://github.com/pandas-dev/pandas/pull/22986/commits/dbe4e0ed81e826ca631c7b70c0117b5026a5f079 for reverting back to separate code path.\r\n\r\n[Note: I wrote this response as extracts-first-response-later, but am now switching that around, to maybe save you some time]\r\n\r\nFrom your list:\r\n>  Given the snippet above, I suspect the speed loss is due to calling multiple def functions, passing return_inverse as a keyword argument, and typing values as a memory view (requiring buffer unpacking) in the wrapper methods that just pass it on\r\n\r\nSo I don't think that it's multiple `def`, or any memory view differences [see below] - but do I understand you correctly that simply passing the arguments as keywords rather than positionally could be responsible for the perf loss? That would have been a complete blind spot for me - guess I still have many cython intricacies left to learn...\r\n\r\n[\\Note]\r\n\r\nHere's an extract of the relevant code for the unification - which ended up ~10% slower. The only relevant parts here are the `bint` for `return_inverse` and `ignore_na` (`pandas.factorize` removes NaNs from the uniques, while `pandas.unique` doesn't). The latter was always False for the performance tests in question, so just another case of reading a `bint`. \r\n\r\n```\r\n    def unique(self, const {{dtype}}_t[:] values, bint return_inverse=False):\r\n        return self._unique(values, uniques={{name}}Vector(), ignore_na=False,\r\n                            return_inverse=return_inverse)\r\n\r\n    @cython.boundscheck(False)\r\n    def _unique(self, const {{dtype}}_t[:] values, {{name}}Vector uniques,\r\n                bint ignore_na=False, bint return_inverse=False,\r\n                Py_ssize_t count_prior=0, Py_ssize_t na_sentinel=-1,\r\n                object na_value=None):\r\n        cdef:\r\n            Py_ssize_t i, idx, count = count_prior, n = len(values)\r\n            int64_t[:] labels\r\n            int ret = 0\r\n            {{dtype}}_t val, na_value2\r\n            khiter_t k\r\n            {{name}}VectorData *ud\r\n            bint use_na_value\r\n\r\n        if return_inverse:\r\n            labels = np.empty(n, dtype=np.int64)\r\n        ud = uniques.data\r\n        use_na_value = na_value is not None\r\n\r\n         if use_na_value:\r\n             # We need this na_value2 because we want to allow users\r\n             # to *optionally* specify an NA sentinel *of the correct* type.\r\n             # We use None, to make it optional, which requires `object` type\r\n             # for the parameter. To please the compiler, we use na_value2,\r\n             # which is only used if it's *specified*.\r\n             na_value2 = <{{dtype}}_t>na_value\r\n         else:\r\n             na_value2 = {{default_na_value}}\r\n \r\n         with nogil:\r\n            for i in range(n):\r\n                val = values[i]\r\n                if ignore_na and (val != val\r\n                                  or (use_na_value and val == na_value2)):\r\n                    labels[i] = na_sentinel\r\n                    continue\r\n\r\n                k = kh_get_{{dtype}}(self.table, val)\r\n                if return_inverse and k != self.table.n_buckets:\r\n                    # k falls into a previous bucket\r\n                    idx = self.table.vals[k]\r\n                    labels[i] = idx\r\n                elif k == self.table.n_buckets:\r\n                    # k hasn't been seen yet\r\n                    k = kh_put_{{dtype}}(self.table, val, &ret)\r\n\r\n                    if needs_resize(ud):\r\n                        with gil:\r\n                            if uniques.external_view_exists:\r\n                                 raise ValueError(\"external reference to \"\r\n                                                  \"uniques held, but \"\r\n                                                 \"Vector.resize() needed\")\r\n                            uniques.resize()\r\n                    append_data_{{dtype}}(ud, val)\r\n                    if return_inverse:\r\n                        self.table.vals[k] = count\r\n                        labels[i] = count\r\n                    count += 1\r\n\r\n        if return_inverse:\r\n            return uniques.to_array(), np.asarray(labels)\r\n        return uniques.to_array()\r\n```\r\n\r\nwhereas the code that was faster did just:\r\n```\r\n    def unique(self, const {{dtype}}_t[:] values, bint return_inverse=False):\r\n        if return_inverse:\r\n            return self._unique(values, uniques={{name}}Vector(), ignore_na=False,\r\n                                return_inverse=True)\r\n        return self._unique_no_inverse(values)\r\n\r\n    @cython.boundscheck(False)\r\n    def _unique_no_inverse(self, const {{dtype}}_t[:] values):\r\n        # define separate functions without inverse for performance\r\n        cdef:\r\n           Py_ssize_t i, n = len(values)\r\n           int ret = 0\r\n           {{dtype}}_t val\r\n           khiter_t k\r\n           {{name}}Vector uniques = {{name}}Vector()\r\n           {{name}}VectorData *ud\r\n        ud = uniques.data\r\n        with nogil:\r\n            for i in range(n):\r\n                val = values[i]\r\n                k = kh_get_{{dtype}}(self.table, val)\r\n                if k == self.table.n_buckets:\r\n                    kh_put_{{dtype}}(self.table, val, &ret)\r\n                    if needs_resize(ud):\r\n                        with gil:\r\n                            uniques.resize()\r\n                    append_data_{{dtype}}(ud, val)\r\n        return uniques.to_array()\r\n```",
            "created_at": "2018-10-23T06:34:12Z",
            "html_url": "https://github.com/cython/cython/issues/2660#issuecomment-432112179",
            "id": 432112179,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2660",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjExMjE3OQ==",
            "performed_via_github_app": null,
            "updated_at": "2018-10-23T06:34:12Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/432112179",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Passing arguments by keyword is slower in Python, which we inherit. This may, of course, not be the issue if the called code is where the bulk of the time is spent. \r\n\r\nIf you could whittle this down to a self-contained example that still exhibits the issue, I could try and see where exactly the slowdown is coming from. ",
            "created_at": "2018-10-23T09:31:50Z",
            "html_url": "https://github.com/cython/cython/issues/2660#issuecomment-432172056",
            "id": 432172056,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2660",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjE3MjA1Ng==",
            "performed_via_github_app": null,
            "updated_at": "2018-10-23T09:31:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/432172056",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "NONE",
            "body": "@robertwb \r\nI've tried removing all the kwargs in pandas-dev/pandas#23400, but to no measurable effect (i.e. the perf hit remains). The templating works (no perf hit), but is ugly/overkill, IMO.\r\n\r\nHere's an attempt at a pared-down minimal example, directly from that PR. I'm showing the diff between the original version that was directly compiled, and the one that's 10% slower (when run with `ignore_na=False` / `return_inverse=False`, which corresponds to the version before).\r\n\r\nFrom what I can tell, the only difference is some type declarations (but not allocations), and checking the two `bint` throughout the loop (I've manually removed some lines due to handling `na_value` that get never hit if `ignore_na=False`).\r\n\r\n```diff\r\n     @cython.boundscheck(False)\r\n     @cython.wraparound(False)\r\n-    def unique(self, const {{dtype}}_t[:] values):\r\n+    def _unique(self, const {{dtype}}_t[:] values, {{name}}Vector uniques,\r\n+                bint ignore_na, bint return_inverse, Py_ssize_t count_prior,\r\n+                Py_ssize_t na_sentinel, object na_value):\r\n         cdef:\r\n-            Py_ssize_t i, n = len(values)\r\n+            Py_ssize_t i, n = len(values), idx, count = count_prior\r\n+            {{dtype}}_t[:] labels\r\n             int ret = 0\r\n             {{dtype}}_t val\r\n             khiter_t k\r\n-            {{name}}Vector uniques = {{name}}Vector()\r\n             {{name}}VectorData *ud\r\n\r\n+        if return_inverse:\r\n+            labels = np.empty(n, dtype=np.int64)\r\n         ud = uniques.data\r\n\r\n         with nogil:\r\n             for i in range(n):\r\n                 val = values[i]\r\n+\r\n+                if ignore_na and (val != val or val == na_value):\r\n+                    labels[i] = na_sentinel\r\n+                    continue\r\n+\r\n                 k = kh_get_{{dtype}}(self.table, val)\r\n                 if k == self.table.n_buckets:\r\n                     # k hasn't been seen yet\r\n-                    kh_put_{{dtype}}(self.table, val, &ret)\r\n+                    k = kh_put_{{dtype}}(self.table, val, &ret)\r\n+\r\n                     if needs_resize(ud):\r\n                         with gil:\r\n                             uniques.resize()\r\n                     append_data_{{dtype}}(ud, val)\r\n+                    if return_inverse:\r\n+                        self.table.vals[k] = count\r\n+                        labels[i] = count\r\n+                        count += 1\r\n+                elif return_inverse:\r\n+                    # k falls into a previous bucket\r\n+                    # only relevant in case we need to construct the inverse\r\n+                    idx = self.table.vals[k]\r\n+                    labels[i] = idx\r\n+\r\n+        if return_inverse:\r\n+            return uniques.to_array(), np.asarray(labels)\r\n         return uniques.to_array()\r\n```\r\n\r\nThere's one more call-layer, but that should not be the issue, I'm guessing:\r\n```python\r\n    def unique(self, const {{dtype}}_t[:] values, bint return_inverse):\r\n        uniques = {{name}}Vector()\r\n        return self._unique(values, uniques,\r\n                            False,  # ignore_na\r\n                            return_inverse,\r\n                            # the rest are of the parameters are not relevant here,\r\n                            # just using defaults to avoid kwargs\r\n                            0,      # count_prior\r\n                            -1,     # na_sentinel\r\n                            None)   # na_value\r\n```",
            "created_at": "2018-10-28T18:47:57Z",
            "html_url": "https://github.com/cython/cython/issues/2660#issuecomment-433731025",
            "id": 433731025,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2660",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzczMTAyNQ==",
            "performed_via_github_app": null,
            "updated_at": "2018-10-28T19:25:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/433731025",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is there an example that reproduces the issue that doesn't require\ntemplating? (Also, I don't know what the {{name}}Vector types are, are\nthese critical to the issue as well?) I don't care if it computes the right\nthing so long as it reproduces the performance issues.\n\nOn Sun, Oct 28, 2018 at 7:47 PM h-vetinari <notifications@github.com> wrote:\n\n> @robertwb <https://github.com/robertwb>\n> I've tried removing all the kwargs in pandas-dev/pandas#23400\n> <https://github.com/pandas-dev/pandas/pull/23400>, but to no effect. The\n> templating works, but is ugly/overkill, IMO.\n>\n> Here's an attempt at a pared-down minimal example, directly from that PR.\n> I'm showing the diff between the original version that was directly\n> compiled, and the one that's 10% slower. From what I can tell, the only\n> difference is some type declarations (but not allocations), and checking\n> two bint throughout the loop (I've manually removed some lines due to\n> handling na_value that get never hit if ignore_na=False).\n>\n>      @cython.boundscheck(False)\n>      @cython.wraparound(False)-    def unique(self, const {{dtype}}_t[:] values):+    def _unique(self, const {{dtype}}_t[:] values, {{name}}Vector uniques,+                bint ignore_na, bint return_uniques,+                bint return_inverse, Py_ssize_t count_prior,+                Py_ssize_t na_sentinel, object na_value):\n>          cdef:-            Py_ssize_t i, n = len(values)+            Py_ssize_t i, n = len(values), idx, count = count_prior+            {{dtype}}_t[:] labels\n>              int ret = 0\n>              {{dtype}}_t val\n>              khiter_t k-            {{name}}Vector uniques = {{name}}Vector()\n>              {{name}}VectorData *ud\n> +        if return_inverse:+            labels = np.empty(n, dtype=np.int64)\n>          ud = uniques.data\n>\n>          with nogil:\n>              for i in range(n):\n>                  val = values[i]++                if ignore_na and (val != val or val == na_value):+                    labels[i] = na_sentinel+                    continue+\n>                  k = kh_get_{{dtype}}(self.table, val)\n>                  if k == self.table.n_buckets:-                    kh_put_{{dtype}}(self.table, val, &ret)+                    # k hasn't been seen yet+                    k = kh_put_{{dtype}}(self.table, val, &ret)+\n>                      if needs_resize(ud):\n>                          with gil:\n>                              uniques.resize()\n>                      append_data_{{dtype}}(ud, val)-        return uniques.to_array()+                    if return_inverse:+                        self.table.vals[k] = count+                        labels[i] = count+                        count += 1+                elif return_inverse:+                    # k falls into a previous bucket+                    # only relevant in case we need to construct the inverse+                    idx = self.table.vals[k]+                    labels[i] = idx++        if return_uniques and return_inverse:+            return uniques.to_array(), np.asarray(labels)+        elif return_uniques:+            return uniques.to_array()+        elif return_inverse:+            return np.asarray(labels)\n>\n> There's one more call-layer, but that should not be an issue, I'm guessing:\n>\n>     def unique(self, const {{dtype}}_t[:] values, bint return_inverse):\n>         uniques = {{name}}Vector()\n>         return self._unique(values, uniques,\n>                             False,  # ignore_na\n>                             True,   # return_uniques\n>                             return_inverse,\n>                             # the rest are of the parameters are not relevant,\n>                             # but we don't use kwargs to avoid cython perf hit\n>                             0,      # count_prior\n>                             -1,     # na_sentinel\n>                             None)   # na_value\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/cython/cython/issues/2660#issuecomment-433731025>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAdqgY1Vr9ArWhbbq9znzlU4AtBtW5Zyks5upfvfgaJpZM4XctwE>\n> .\n>\n",
            "created_at": "2018-10-29T21:34:10Z",
            "html_url": "https://github.com/cython/cython/issues/2660#issuecomment-434089037",
            "id": 434089037,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2660",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDA4OTAzNw==",
            "performed_via_github_app": null,
            "updated_at": "2018-10-29T21:34:10Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/434089037",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "FWIW there is actually a neat trick that one can do in Cython using fused types, which is similar to [C++'s SFINAE]( https://en.cppreference.com/w/cpp/language/sfinae ) like [what has been used with `enable_if`]( https://www.boost.org/doc/libs/1_73_0/libs/core/doc/html/core/enable_if.html#core.enable_if.using_enable_if ). Here's a short example of how this works below.\r\n\r\n```cython\r\ncdef struct bint_false_type:\r\n    char empty                               # need something as empty `struct`s are not valid\r\n\r\ncdef struct bint_true_type:\r\n    char empty                               # ditto\r\n\r\ncdef fused param_bint_type:                  # fuse `True` and `False` types to allow selection between them\r\n     bint_false_type\r\n     bint_true_type\r\n\r\n\r\ncdef inline bint cfunc(param_bint_type* p):  # include unused argument of fused type for selection\r\n    if param_bint_type is bint_true_type:    # compile time dispatching on type\r\n        return True\r\n    else:\r\n        return False\r\n\r\ndef func(bint b):\r\n    if b:\r\n        return cfunc(<bint_true_type*>NULL)  # cast `NULL` pointer to needed type for selection\r\n    else:\r\n        return cfunc(<bint_false_type*>NULL)\r\n```",
            "created_at": "2020-09-05T00:38:05Z",
            "html_url": "https://github.com/cython/cython/issues/2660#issuecomment-687493653",
            "id": 687493653,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2660",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzQ5MzY1Mw==",
            "performed_via_github_app": null,
            "updated_at": "2020-09-05T00:38:05Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/687493653",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for the tip @jakirkham, maybe I'll have some time to improve that old pandas PR. :)",
            "created_at": "2020-09-09T21:54:39Z",
            "html_url": "https://github.com/cython/cython/issues/2660#issuecomment-689842383",
            "id": 689842383,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2660",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTg0MjM4Mw==",
            "performed_via_github_app": null,
            "updated_at": "2020-09-09T21:54:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/689842383",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2660/comments",
    "created_at": "2018-10-15T16:39:43Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-10-23T06:05:09Z",
            "event": "mentioned",
            "id": 1919368273,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTkxOTM2ODI3Mw==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1919368273"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-10-23T06:05:09Z",
            "event": "subscribed",
            "id": 1919368274,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE5MTkzNjgyNzQ=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1919368274"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-10-28T18:47:57Z",
            "event": "mentioned",
            "id": 1930908913,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTkzMDkwODkxMw==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1930908913"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-10-28T18:47:57Z",
            "event": "subscribed",
            "id": 1930908914,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE5MzA5MDg5MTQ=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1930908914"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-10-29T21:34:10Z",
            "event": "mentioned",
            "id": 1933516423,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTkzMzUxNjQyMw==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1933516423"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-10-29T21:34:10Z",
            "event": "subscribed",
            "id": 1933516425,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE5MzM1MTY0MjU=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1933516425"
        },
        {
            "actor": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-09-09T21:54:40Z",
            "event": "mentioned",
            "id": 3747986987,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzc0Nzk4Njk4Nw==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3747986987"
        },
        {
            "actor": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-09-09T21:54:40Z",
            "event": "subscribed",
            "id": 3747986991,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM3NDc5ODY5OTE=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3747986991"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2660/events",
    "html_url": "https://github.com/cython/cython/issues/2660",
    "id": 370247685,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2660/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzNzAyNDc2ODU=",
    "number": 2660,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Directive for force-compiling code branches for different bint-parameters?",
    "updated_at": "2020-09-09T21:54:40Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2660",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
        "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
        "followers_url": "https://api.github.com/users/h-vetinari/followers",
        "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
        "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/h-vetinari",
        "id": 33685575,
        "login": "h-vetinari",
        "node_id": "MDQ6VXNlcjMzNjg1NTc1",
        "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
        "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
        "repos_url": "https://api.github.com/users/h-vetinari/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/h-vetinari"
    }
}