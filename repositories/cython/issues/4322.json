{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "**Describe the bug**\r\nI am making a convenient extension class wrapping a bitfield, but Cython is not revealing my descriptor class when wrapping a `cdef` function.\r\n\r\n**To Reproduce**\r\n*This has been converted to Pyrex syntax to be explicit (could be reproduced)*\r\n```cython\r\ncdef class flag:\r\n    \"\"\"A flag value, works similar to a property by using descriptors.\"\"\"\r\n\r\n    cdef long int mask\r\n\r\n    def __init__(self, func) -> None:\r\n        self.mask = func(None)\r\n\r\n    def __get__(self, instance, owner):\r\n        \"\"\"Called when this is accessed through an attribute.\"\"\"\r\n        if instance is None:\r\n            return self  # Acessed through a class directly\r\n\r\n        return (instance.value & self.mask) == self.mask\r\n\r\n    def __set__(self, instance, value):\r\n        if value == True:\r\n            instance.value |= self.mask\r\n        else:\r\n            instance.value &= ~self.mask\r\n\r\n\r\ncdef class Simple:\r\n    \"\"\"A simple bitfield\"\"\"\r\n\r\n    cdef int value\r\n\r\n    def __init__(self, value):\r\n        self.value = value\r\n\r\n    @flag\r\n    cdef one(self):\r\n        return 1 << 1\r\n\r\n    @flag\r\n    cdef two(self):\r\n        return 1 << 2\r\n```\r\nOn the latest stable release, this did not compile with the following error:\r\n```\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n    cdef int value\r\n\r\n    def __init__(self, value):\r\n        self.value = value\r\n\r\n   ^\r\n------------------------------------------------------------\r\n\r\nflags.pyx:31:4: Cdef functions/classes cannot take arbitrary decorators.\r\n```\r\nOn **master branch** (installed through `pip install -U git+https://github.com/cython/cython`) this compiles, *but*. The issue now becomes that the `one` and `two` attributes is not available to Python as demonstrated below:\r\n```python\r\n>>> import flags\r\n>>> s = flags.Simple(1)\r\n>>> dir(s)\r\n['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__pyx_vtable__', '__reduce__', '__reduce_cython__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__setstate_cython__', '__sizeof__', '__str__', '__subclasshook__']\r\n```\r\n\r\n**Expected behavior**\r\nI would expect my `Simple` class to expose 2 instances of my `flag` extension type called `one` and `two`. When I do `s.one` I would expect it to call `__get__`. When the `flag` extension type is initialized, it calls the C function and gets the bit mask.\r\nThis is from Python:\r\n```python\r\nclass flag:\r\n    \"\"\"A flag value, works similar to a property by using descriptors.\"\"\"\r\n\r\n    def __init__(self, func) -> None:\r\n        self.mask = func(None)\r\n\r\n    def __get__(self, instance, owner):\r\n        \"\"\"Called when this is accessed through an attribute.\"\"\"\r\n        if instance is None:\r\n            return self  # Acessed through a class directly\r\n\r\n        return (instance.value & self.mask) == self.mask\r\n\r\n    def __set__(self, instance, value):\r\n        if value == True:\r\n            instance.value |= self.mask\r\n        else:\r\n            instance.value &= ~self.mask\r\n\r\n\r\nclass Simple:\r\n    \"\"\"A simple bitfield\"\"\"\r\n\r\n    def __init__(self, value):\r\n        self.value = value\r\n\r\n    @flag\r\n    def one(self):\r\n        return 1 << 1\r\n\r\n    @flag\r\n    def two(self):\r\n        return 1 << 2\r\n\r\ns = Simple(6)\r\nprint(type(Simple.one))  # <class '__main__.flag'>\r\nprint(s.one)  # True\r\nprint(s.two)  # True\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Windows\r\n - Python version 3.9.5\r\n - Cython version 3.0.0.a9",
    "closed_at": "2021-08-07T08:28:32Z",
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "The error is probably pointing to the wrong place, but I would not expect \r\n\r\n```\r\n@flag\r\n cdef one(self):\r\n```\r\n\r\nto work. I'd expect it to work if declared as a `def` function I think. But a `cdef` function is declaring a special function that you can only call directly from Cython, and so it isn't a sensible thing to pass to `flag.__init__`.\r\n\r\nI'm also not sure what it compiles to in the current master (although I doubt that it's sensible...) but `cdef` functions and attributes generally aren't visible from Python (that's kind of the point of them...) so again I don't think it's a bug.\r\n\r\nI think the failure to tell you \"Cdef functions/classes cannot take arbitrary decorators.\" on the current master might be a bug.",
            "created_at": "2021-08-01T21:42:42Z",
            "html_url": "https://github.com/cython/cython/issues/4322#issuecomment-890591283",
            "id": 890591283,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4322",
            "node_id": "IC_kwDOABDGAc41FVgz",
            "performed_via_github_app": null,
            "updated_at": "2021-08-01T21:56:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/890591283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> but I would not expect\r\n> ```python\r\n> @flag\r\n> cdef one(self):\r\n> ```\r\n> to work.\r\n\r\nI disagree, I want to pass the C function to my C extension class's init. I do understand how this would not work if `flag` came from Python. But `flag` is C code, it should be able to resolve the pointer and call the function. Inside `__get__` it should be able to grab the `value` from the underlying structure.\r\n\r\n> I'd expect it to work if declared as a `def` function I think\r\n\r\nWhen I do this Cython doesn't correctly realize that `instance` is a C extension class and I will get an attribute error because it tries to look up the attribute \"the Python way\". This can of course be fixed by setting the underlying value to `cdef readonly int value`.\r\n\r\n> but cdef functions and attributes generally aren't visible from Python (that's kind of the point of them...) so again I don't think it's a bug.\r\n\r\nMy C extension class should be visible to Python though, but I understand how Cython mix it up since the `cdef` function should not be visible.\r\n\r\n> I think the failure to tell you \"Cdef functions/classes cannot take arbitrary decorators.\" on the current master might be a bug.\r\n\r\nFair enough, I was originally gonna open a feature request to be able to pass C functions to C extension classes because it's C right.",
            "created_at": "2021-08-01T22:24:05Z",
            "html_url": "https://github.com/cython/cython/issues/4322#issuecomment-890596559",
            "id": 890596559,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4322",
            "node_id": "IC_kwDOABDGAc41FWzP",
            "performed_via_github_app": null,
            "updated_at": "2021-08-01T22:24:05Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/890596559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38372706?v=4",
                "events_url": "https://api.github.com/users/Bluenix2/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bluenix2/followers",
                "following_url": "https://api.github.com/users/Bluenix2/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bluenix2/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bluenix2",
                "id": 38372706,
                "login": "Bluenix2",
                "node_id": "MDQ6VXNlcjM4MzcyNzA2",
                "organizations_url": "https://api.github.com/users/Bluenix2/orgs",
                "received_events_url": "https://api.github.com/users/Bluenix2/received_events",
                "repos_url": "https://api.github.com/users/Bluenix2/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bluenix2/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bluenix2/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bluenix2"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> When I do this Cython doesn't correctly realize that instance is a C extension class and I will get an attribute error because it tries to look up the attribute \"the Python way\". This can of course be fixed by setting the underlying value to cdef readonly int value.\r\n\r\nMore usefully you have to type `instance` as `Simple` and then it'll look up the attribute the Cython way.\r\n\r\n> I'm also not sure what it compiles to in the current master (although I doubt that it's sensible...)\r\n\r\n(replying to myself) It looks like it just drops the decorators and makes them regular cdef methods.\r\n\r\n> Fair enough, I was originally gonna open a feature request to be able to pass C functions to C extension classes because it's C right.\r\n\r\nEverything passed to `__init__` must be a Python object, or possible to make from a Python object, because `__init__` is part of the Python call mechanism. If you want to construct a C extension class with non-Python inputs then a staticmethod cdef factory function is the usual approach (see last example of https://cython.readthedocs.io/en/latest/src/userguide/extension_types.html#c-methods)\r\n\r\n--------------------------------\r\n\r\nI'll tag this as \"error reporting\" because Cython is failing to diagnose invalid code correctly. If you need more help getting your use-case to work then the cython-users mailing list is probably the place to follow it up.",
            "created_at": "2021-08-02T06:43:12Z",
            "html_url": "https://github.com/cython/cython/issues/4322#issuecomment-890765520",
            "id": 890765520,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4322",
            "node_id": "IC_kwDOABDGAc41GADQ",
            "performed_via_github_app": null,
            "updated_at": "2021-08-02T06:43:12Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/890765520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> If you want to construct a C extension class with non-Python inputs then a staticmethod cdef factory function is the usual approach (see last example of https://cython.readthedocs.io/en/latest/src/userguide/extension_types.html#c-methods)\r\n\r\nAh perfect!\r\n\r\nThe code now looks like this:\r\n```cython\r\ncdef class BaseFlags:\r\n    \"\"\"The base for all bitfield wrappers.\"\"\"\r\n\r\n    cdef readonly int value\r\n\r\n    def __init__(self, value: cython.int) -> None:\r\n        self.value = value\r\n\r\ncdef class BitField:\r\n    \"\"\"A flag value, works similar to a property by using descriptors.\"\"\"\r\n\r\n    cdef int mask\r\n\r\n    def __init__(self, mask) -> None:\r\n        self.mask = mask\r\n\r\n    def __get__(self, BaseFlags instance, type owner) -> bool:\r\n        if instance is None:\r\n            raise AttributeError(f\"type object '{owner}' not initialized.\")\r\n\r\n        return (instance.value & self.mask) == self.mask\r\n\r\n    def __set__(self, BaseFlags instance, bint value) -> None:\r\n        if value == True:\r\n            instance.value |= self.mask\r\n        else:\r\n            instance.value &= ~self.mask\r\n\r\n    @staticmethod\r\n    cdef from_func(func):\r\n        return BitField(func(None))\r\n\r\n\r\ncdef flag(func):\r\n    return BitField.from_func(func)\r\n\r\n\r\ncdef class Simple(BaseFlags):\r\n    \"\"\"A simple bitfield\"\"\"\r\n\r\n    @flag\r\n    def one(self):\r\n        return 1 << 1\r\n\r\n    @flag\r\n    def two(self):\r\n        return 1 << 2\r\n```\r\nThis works exactly like expected, unless I change `one` and `two` to `cdef` functions. Trying to access them raises an `AttributeError`.",
            "created_at": "2021-08-02T11:45:36Z",
            "html_url": "https://github.com/cython/cython/issues/4322#issuecomment-890959610",
            "id": 890959610,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4322",
            "node_id": "IC_kwDOABDGAc41Gvb6",
            "performed_via_github_app": null,
            "updated_at": "2021-08-02T11:45:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/890959610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38372706?v=4",
                "events_url": "https://api.github.com/users/Bluenix2/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bluenix2/followers",
                "following_url": "https://api.github.com/users/Bluenix2/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bluenix2/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bluenix2",
                "id": 38372706,
                "login": "Bluenix2",
                "node_id": "MDQ6VXNlcjM4MzcyNzA2",
                "organizations_url": "https://api.github.com/users/Bluenix2/orgs",
                "received_events_url": "https://api.github.com/users/Bluenix2/received_events",
                "repos_url": "https://api.github.com/users/Bluenix2/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bluenix2/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bluenix2/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bluenix2"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> ```cython\r\n> cdef class BitField:\r\n>    …\r\n>     @staticmethod\r\n>     cdef from_func(func):\r\n>         return BitField(func(None))\r\n> ```\r\nThis looks more like a case for a `@classmethod` to me. You shouldn't repeat the name of the class here (in case someone wants to subclass it).\r\n\r\n> This works exactly like expected, unless I change `one` and `two` to `cdef` functions. Trying to access them raises an `AttributeError`.\r\n\r\n`cdef` functions are (intentionally) not visible to Python code. You can either use `cpdef` methods, or if you are referring to Cython code using the attributes, then you might have forgotten to type your variable (to let Cython know which `cdef` attributes there are).",
            "created_at": "2021-08-07T08:27:50Z",
            "html_url": "https://github.com/cython/cython/issues/4322#issuecomment-894624414",
            "id": 894624414,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4322",
            "node_id": "IC_kwDOABDGAc41UuKe",
            "performed_via_github_app": null,
            "updated_at": "2021-08-07T08:28:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/894624414",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4322/comments",
    "created_at": "2021-08-01T21:25:04Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-08-02T06:43:23Z",
            "event": "labeled",
            "id": 5097050527,
            "label": {
                "color": "444444",
                "name": "Error Reporting"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDUwOTcwNTA1Mjc=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5097050527"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "ab31a00bf198fed1e4b5dd08947a4744687924f7",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/ab31a00bf198fed1e4b5dd08947a4744687924f7",
            "created_at": "2021-08-02T18:40:33Z",
            "event": "referenced",
            "id": 5100683547,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMDA2ODM1NDc=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5100683547"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "ec8c0804f1a847e7f9b92210d756507afb6ae9b3",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/ec8c0804f1a847e7f9b92210d756507afb6ae9b3",
            "created_at": "2021-08-07T08:28:32Z",
            "event": "closed",
            "id": 5125541582,
            "node_id": "MDExOkNsb3NlZEV2ZW50NTEyNTU0MTU4Mg==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5125541582"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4322/events",
    "html_url": "https://github.com/cython/cython/issues/4322",
    "id": 957590184,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425557478,
            "name": "Error Reporting",
            "node_id": "MDU6TGFiZWw0MjU1NTc0Nzg=",
            "url": "https://api.github.com/repos/cython/cython/labels/Error%20Reporting"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4322/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5NTc1OTAxODQ=",
    "number": 4322,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "[BUG] Not exposing class decorator wrapping cdef function to Python",
    "updated_at": "2021-08-07T08:28:32Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4322",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38372706?v=4",
        "events_url": "https://api.github.com/users/Bluenix2/events{/privacy}",
        "followers_url": "https://api.github.com/users/Bluenix2/followers",
        "following_url": "https://api.github.com/users/Bluenix2/following{/other_user}",
        "gists_url": "https://api.github.com/users/Bluenix2/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Bluenix2",
        "id": 38372706,
        "login": "Bluenix2",
        "node_id": "MDQ6VXNlcjM4MzcyNzA2",
        "organizations_url": "https://api.github.com/users/Bluenix2/orgs",
        "received_events_url": "https://api.github.com/users/Bluenix2/received_events",
        "repos_url": "https://api.github.com/users/Bluenix2/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Bluenix2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Bluenix2/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Bluenix2"
    }
}