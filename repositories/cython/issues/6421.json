{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe your issue\n\nTried the naive approach to convert a typed `memoryview` to a `tuple`. However noticed that the C code generated handled the typed `memoryview` like a generic Python sequence, which left quite a bit of performance on the table.\r\n\r\nThen tried the next best thing use a comprehension. It appears this needs to live in a `list` for `cpdef` functions. This actually makes a significant improvement with pretty minimal code. However this still creates one Python object (a `list`) and then copies that over to a new `tuple`.\r\n\r\nSo did a third attempt leveraging the C API for `tuple`s through Python. This does the usual things to create an efficient C-loop. Construct an empty tuple. Then set each value in the `tuple`. The code is reasonable, but there is more to keep in mind like referencing counting and the `tuple` C API.\r\n\r\nIdeally Cython code like the first case `tuple(a)` would generate something closer to the C code in the last case. Am curious what would be needed to close that gap.\r\n\r\n```cython\r\nfrom cpython.tuple cimport PyTuple_New, PyTuple_SetItem, PyTuple_SET_ITEM\r\nfrom cpython.ref cimport Py_INCREF\r\n\r\n\r\ncpdef tuple to_tuple0(double[::1] a):\r\n    return tuple(a)\r\n\r\n\r\ncpdef tuple to_tuple1(double[::1] a):\r\n    return tuple([i for i in a])\r\n\r\n\r\ncpdef tuple to_tuple2(double[::1] a):\r\n    cdef Py_ssize_t n = len(a)\r\n    cdef tuple t = PyTuple_New(n)\r\n    cdef Py_ssize_t i\r\n    cdef object o\r\n    for i in range(n):\r\n        o = a[i]\r\n        Py_INCREF(o)\r\n        PyTuple_SET_ITEM(t, i, o)\r\n    return t\r\n```\r\n\r\n```python\r\nimport numpy as np\r\na = np.arange(1_000, dtype=\"double\")\r\n```\r\n\r\n```python\r\nIn [5]: %timeit to_tuple0(a);\r\n77.9 µs ± 352 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\r\n\r\nIn [6]: %timeit to_tuple1(a);\r\n10.2 µs ± 304 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\r\n\r\nIn [7]: %timeit to_tuple2(a);\r\n7.23 µs ± 30.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\r\n```",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I think what's happening is that \"typed memoryview->Python object\" gives you a wrapper class which exposes a Python interface. This wrapper class gets passed to `tuple`'s constructor and treated as a generic iterable.\r\n\r\nOur current \"conversion to PyObject\" handling lacks the ability to make decisions based on what type of PyObject it's ending up as. Which would make optimizing this specific case difficult. Arguably that might be a useful feature generally though.",
            "created_at": "2024-10-10T06:40:40Z",
            "html_url": "https://github.com/cython/cython/issues/6421#issuecomment-2404173481",
            "id": 2404173481,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6421",
            "node_id": "IC_kwDOABDGAc6PTMap",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2404173481/reactions"
            },
            "updated_at": "2024-10-10T06:40:40Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2404173481",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I find it reasonable to support and optimise both list() and tuple() on memory views. Lists seem more interesting than tuples, though. What's your user case for tuples?\n",
            "created_at": "2024-10-10T07:19:58Z",
            "html_url": "https://github.com/cython/cython/issues/6421#issuecomment-2404260271",
            "id": 2404260271,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6421",
            "node_id": "IC_kwDOABDGAc6PThmv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2404260271/reactions"
            },
            "updated_at": "2024-10-10T07:19:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2404260271",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "We have a container class that works kind of like `memoryview`/`Py_buffer`. Though it handles some other cases that those don't handle (notably [`__cuda_array_interface__`]( https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html )). It also tries to smooth out the differences between CPU and GPU memory as well as Python and C\r\n\r\nIt [lowers properties]( https://github.com/rapidsai/kvikio/blob/0d6987577cbd759a8caeb6781a5abfb04d08131a/python/kvikio/_lib/arr.pxd#L11-L22 ) as much as it can to make them easily usable in C/C++/Cython code while still accessible in Python. It places [shape and strides metadata in typed-`memoryview`s]( https://github.com/rapidsai/kvikio/blob/0d6987577cbd759a8caeb6781a5abfb04d08131a/python/kvikio/_lib/arr.pxd#L19-L20 )\r\n\r\nHowever there can be cases where users expect [`tuple`s like `shape` or `strides`, which we construct]( https://github.com/rapidsai/kvikio/blob/0d6987577cbd759a8caeb6781a5abfb04d08131a/python/kvikio/_lib/arr.pyx#L193-L229 ). Note the C contiguous case stores strides as `None` for faster checks, meaning the `strides` property [computes them when creating the `tuple`]( https://github.com/rapidsai/kvikio/blob/0d6987577cbd759a8caeb6781a5abfb04d08131a/python/kvikio/_lib/arr.pyx#L222-L229 )\r\n\r\nAgree the `list` case can be more interesting since nested-`list`s are more likely. Had written a different container class for a different purpose (smoothing out Python 2/3 buffer handling differences), which acted basically like `memoryview` (for Python 3). That included a [`tolist` method]( https://github.com/jakirkham/cybuffer/blob/5cb56b352ace8e9d9359ee36a9c6c95e494c2871/src/cybuffer.pyx#L316-L321 ) with a bit [more involved implementation]( https://github.com/jakirkham/cybuffer/blob/5cb56b352ace8e9d9359ee36a9c6c95e494c2871/src/cybuffer.pyx#L100-L140 )",
            "created_at": "2024-10-10T10:20:29Z",
            "html_url": "https://github.com/cython/cython/issues/6421#issuecomment-2404692853",
            "id": 2404692853,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6421",
            "node_id": "IC_kwDOABDGAc6PVLN1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2404692853/reactions"
            },
            "updated_at": "2024-10-10T10:20:29Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2404692853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The right place to replace the generic Python builtin calls with dedicated C code is probably here:\r\n\r\nhttps://github.com/cython/cython/blob/7beedb19c43f3e865056b8181e55897b222a645b/Cython/Compiler/Optimize.py#L2491\r\n\r\nhttps://github.com/cython/cython/blob/7beedb19c43f3e865056b8181e55897b222a645b/Cython/Compiler/Optimize.py#L2512\r\n\r\nLook for `create_to_py_utility_code()` and `to_py_function` on the memory view's dtype to get the conversion function. The rest can be done with templating in a utility code section in `Optimize.c`. I think I'd use three different sections for list, set and tuple, just to keep the implementation simple and readable, even though they're going to be quite similar.",
            "created_at": "2024-10-17T18:53:38Z",
            "html_url": "https://github.com/cython/cython/issues/6421#issuecomment-2420300337",
            "id": 2420300337,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6421",
            "node_id": "IC_kwDOABDGAc6QQtox",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2420300337/reactions"
            },
            "updated_at": "2024-10-17T18:53:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2420300337",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Or, use a Cython utility code section, like we do for the C++ STL conversions in `CppConvert.pyx`.",
            "created_at": "2024-10-17T18:55:16Z",
            "html_url": "https://github.com/cython/cython/issues/6421#issuecomment-2420303452",
            "id": 2420303452,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6421",
            "node_id": "IC_kwDOABDGAc6QQuZc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2420303452/reactions"
            },
            "updated_at": "2024-10-17T18:55:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2420303452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6421/comments",
    "created_at": "2024-10-10T05:53:39Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6421/events",
    "html_url": "https://github.com/cython/cython/issues/6421",
    "id": 2577698721,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6421/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6ZpI-h",
    "number": 6421,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6421/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6421/timeline",
    "title": "Improving performance of typed `memoryview` to `tuple` (or similar)",
    "updated_at": "2024-10-17T18:55:17Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6421",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
        "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
        "followers_url": "https://api.github.com/users/jakirkham/followers",
        "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
        "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jakirkham",
        "id": 3019665,
        "login": "jakirkham",
        "node_id": "MDQ6VXNlcjMwMTk2NjU=",
        "organizations_url": "https://api.github.com/users/jakirkham/orgs",
        "received_events_url": "https://api.github.com/users/jakirkham/received_events",
        "repos_url": "https://api.github.com/users/jakirkham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jakirkham",
        "user_view_type": "public"
    }
}