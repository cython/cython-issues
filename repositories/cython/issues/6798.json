{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Is your feature request related to a problem? Please describe.\n\nIn my code, I would like to write the following (which is how it may be written in Python, then translate to cython with type annotation added)\n```cython\nsage: %%cython --view-annotate\n....: cimport numpy as np\n....: import numpy as np\n....: cpdef np.double_t f(np.double_t x): return np.sqrt(x)\n```\n\nCurrently it compiles (`f(4)` returns `2`), but not fast.\n\n### Describe the solution you'd like.\n\nSomehow cython translates it to C function call.\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "There's probably two ways of approaching this:\n* special-case a bunch of Numpy functions to call equivalent C functions directly. I think this is what Numba does. One thing I don't really like about this is that Numpy's ended up with debate and difficult choices about whether to prioritize precision or speed. Doing special-cased substitution would make this our problem too, and we'd rightly get criticised if `numpy.sin` didn't return the same result as Numpy's implementation.\n* We could try to \"unpack\" ufuncs - i.e. detect that it's a ufunc, extract the function pointer, and then cache that to use in subsequent calls.  I'd prefer this approach, although I think it'd require the Numpy headers to work (which is a big imposition for people just trying to use Numpy as a runtime dependency). We might be able to use `np.ufunc._resolve_dtypes_and_context` and `np.ufunc._get_strided_loop` here to do it at runtime only, but that's a Python interface so likely slow.",
            "created_at": "2025-04-26T09:28:15Z",
            "html_url": "https://github.com/cython/cython/issues/6798#issuecomment-2831990181",
            "id": 2831990181,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6798",
            "node_id": "IC_kwDOABDGAc6ozL2l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2831990181/reactions"
            },
            "updated_at": "2025-04-26T09:28:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2831990181",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> it'd require the Numpy headers to work\n\nOne option around this is to do this (only) if the user do `cimport numpy`, and if they don't and numpy header is not available then raise a warning \"your code could be faster if you install numpy header\", I think.\n\n",
            "created_at": "2025-04-26T10:26:02Z",
            "html_url": "https://github.com/cython/cython/issues/6798#issuecomment-2832018407",
            "id": 2832018407,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6798",
            "node_id": "IC_kwDOABDGAc6ozSvn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2832018407/reactions"
            },
            "updated_at": "2025-04-26T10:26:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2832018407",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
                "events_url": "https://api.github.com/users/user202729/events{/privacy}",
                "followers_url": "https://api.github.com/users/user202729/followers",
                "following_url": "https://api.github.com/users/user202729/following{/other_user}",
                "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/user202729",
                "id": 25191436,
                "login": "user202729",
                "node_id": "MDQ6VXNlcjI1MTkxNDM2",
                "organizations_url": "https://api.github.com/users/user202729/orgs",
                "received_events_url": "https://api.github.com/users/user202729/received_events",
                "repos_url": "https://api.github.com/users/user202729/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/user202729",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "For the function given, even the C loop wouldn't necessarily be the fastest, given it's called with a scalar.  Perhaps a better option would be a warning when calling a NumPy array function/UFunc with a scalar argument?  At least many of the problem functions share a name with those available from `cimport libc.math` or `import math`, which could provide a base for the check. \n<!--:\n```python\nif (\n    function_module == np \n    and function_name in (set(dir(np)) & set(dir(math))) \n    and is_scalar(argument_type)\n):\n    warnings.warn(\n        RuntimeWarning, \n        \"Calling UFunc with scalar argument will be slow, \"\n        \"finding alternative function in libc.math suggested\"\n    )\n```\n-->\n\n> Re: unpacking ufuncs with mandatory NumPy build-time dependency\n\nHow much could people get by [enabling the Pythran build backend](https://docs.cython.org/en/latest/src/userguide/numpy_pythran.html)?  This particular example looks to be in [the supported function list](https://pythran.readthedocs.io/en/latest/SUPPORT.html#numpy), which should let the Cython-compiled version get up to the speed of plain-python `from math import sqrt as f`, or a Cython wrapper around `from libc.math cimport sqrt`\n\nSupporting arbitrary UFuncs would be a pain, and would definitely require the NumPy headers to extract the C function pointer if you wanted to avoid Python call overhead.  On the other hand, UFuncs are designed for arrays, so we could just hope the array is big enough that the Python call overhead is small compared to the time spent in the loop.",
            "created_at": "2025-04-28T23:25:47Z",
            "html_url": "https://github.com/cython/cython/issues/6798#issuecomment-2836998627",
            "id": 2836998627,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6798",
            "node_id": "IC_kwDOABDGAc6pGSnj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2836998627/reactions"
            },
            "updated_at": "2025-04-28T23:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2836998627",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/22566757?v=4",
                "events_url": "https://api.github.com/users/DWesl/events{/privacy}",
                "followers_url": "https://api.github.com/users/DWesl/followers",
                "following_url": "https://api.github.com/users/DWesl/following{/other_user}",
                "gists_url": "https://api.github.com/users/DWesl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DWesl",
                "id": 22566757,
                "login": "DWesl",
                "node_id": "MDQ6VXNlcjIyNTY2NzU3",
                "organizations_url": "https://api.github.com/users/DWesl/orgs",
                "received_events_url": "https://api.github.com/users/DWesl/received_events",
                "repos_url": "https://api.github.com/users/DWesl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DWesl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DWesl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DWesl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> even the C loop wouldn't necessarily be the fastest, given it's called with a scalar.\n\nI don't understand, what do you mean?\n\n> a warning when calling a NumPy array function/UFunc with a scalar argument?\n\nSure, but the question is what should the user do with the warning? Ideally it shouldn't include rewriting all the code, especially when the compiler can do it automatically.\n\nWe could provide some equivalent of `-ffast-math` that \"changes semantic a bit in edge cases but make the code much faster\"",
            "created_at": "2025-04-28T23:34:36Z",
            "html_url": "https://github.com/cython/cython/issues/6798#issuecomment-2837011395",
            "id": 2837011395,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6798",
            "node_id": "IC_kwDOABDGAc6pGVvD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2837011395/reactions"
            },
            "updated_at": "2025-04-28T23:34:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2837011395",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
                "events_url": "https://api.github.com/users/user202729/events{/privacy}",
                "followers_url": "https://api.github.com/users/user202729/followers",
                "following_url": "https://api.github.com/users/user202729/following{/other_user}",
                "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/user202729",
                "id": 25191436,
                "login": "user202729",
                "node_id": "MDQ6VXNlcjI1MTkxNDM2",
                "organizations_url": "https://api.github.com/users/user202729/orgs",
                "received_events_url": "https://api.github.com/users/user202729/received_events",
                "repos_url": "https://api.github.com/users/user202729/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/user202729",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> How much could people get by [enabling the Pythran build backend](https://docs.cython.org/en/latest/src/userguide/numpy_pythran.html)? This particular example looks to be in [the supported function list](https://pythran.readthedocs.io/en/latest/SUPPORT.html#numpy), which should let the Cython-compiled version get up to the speed of plain-python `from math import sqrt as f`, or a Cython wrapper around `from libc.math cimport sqrt`\n\nGood point - I forgot about Pythran. I think you're right and it should work.",
            "created_at": "2025-04-29T06:09:50Z",
            "html_url": "https://github.com/cython/cython/issues/6798#issuecomment-2837583935",
            "id": 2837583935,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6798",
            "node_id": "IC_kwDOABDGAc6pIhg_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2837583935/reactions"
            },
            "updated_at": "2025-04-29T06:09:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2837583935",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > even the C loop wouldn't necessarily be the fastest, given it's called with a scalar.\n>\n> what do you mean?\n\nGiven what UFunc signatures are required to be, you'd have something like:\n```cython\nfrom cython cimport view\nfrom libc cimport math\n\ncdef sqrt_ufunc(double[::view.indirect_contiguous, ::view.strided] args):\n    for i in range(lengths[0]):\n        args[1][i] = math.sqrt(args[0][i])\n\ncpdef double f(double x):\n    cdef double[:] input = [x]\n    cdef double[:] output = [0]\n    cdef double[::view.indirect_contiguous, ::view_strided] args = [input, output]\n    sqrt_ufunc(args)\n    return out[0]\n```\nwhich is going to be noticeably slower than\n```cython\nfrom libc cimport math\n\ncpdef double f(double x):\n    return math.sqrt(x)\n```\nwhen `math.sqrt` is relatively fast.\n\n> What should the user do with the warning? Ideally it shouldn't include rewriting all the code, especially when the compiler can do it automatically.\n\nI suspect anyone who cares enough about performance to add the Cython type information necessary to speed up their functions is going to be aware that `math.sqrt` is faster than `np.sqrt` for scalars and plenty willing to change over if they haven't already.  \n\nIt is also likely that someone using NumPy functions is *expecting* to use them on arrays, so that using them on a scalar is a sign of a logic error somewhere.\n\nGiven that there's two valid options for what the user meant, I don't know that the compiler *can* do it automatically.  Of course, you could look into the [`--np-pythran`](https://docs.cython.org/en/latest/src/userguide/numpy_pythran.html) option mentioned earlier, which does almost exactly what you want, though it might not try to convert `np.sqrt(1)` the way it would `np.sqrt([1])`.\n\nIf you want to write a script to track declared types for variables and replace `np.sqrt` with `libc.math.sqrt` when called on a scalar rather than array type, I think that would be a valuable tool for the Cython community.  \n\nIf you want to accelerate UFuncs not yet supported by Pythran, using `np.ufunc._resolve_dtypes_and_context` and `np.ufunc._get_strided_loop` to track down the correct [`PyUfuncGenericFunction`](https://numpy.org/doc/stable/reference/c-api/ufunc.html#c.PyUFuncGenericFunction) in the UFunc objects created by [the factory functions](https://numpy.org/doc/stable/reference/c-api/ufunc.html#functions) is probably what you're after.  As mentioned earlier, those are Python APIs, so there will be a noticeable overhead for small arrays (for example, scalars).",
            "created_at": "2025-04-29T22:09:14Z",
            "html_url": "https://github.com/cython/cython/issues/6798#issuecomment-2840352454",
            "id": 2840352454,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6798",
            "node_id": "IC_kwDOABDGAc6pTFbG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2840352454/reactions"
            },
            "updated_at": "2025-04-29T22:09:14Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2840352454",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/22566757?v=4",
                "events_url": "https://api.github.com/users/DWesl/events{/privacy}",
                "followers_url": "https://api.github.com/users/DWesl/followers",
                "following_url": "https://api.github.com/users/DWesl/following{/other_user}",
                "gists_url": "https://api.github.com/users/DWesl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DWesl",
                "id": 22566757,
                "login": "DWesl",
                "node_id": "MDQ6VXNlcjIyNTY2NzU3",
                "organizations_url": "https://api.github.com/users/DWesl/orgs",
                "received_events_url": "https://api.github.com/users/DWesl/received_events",
                "repos_url": "https://api.github.com/users/DWesl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DWesl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DWesl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DWesl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "… Anyway, since pythran (supposedly, I didn't test) conveniently does the optimization, I think we are good to just raise a warning to inform the user about the unnecessary slowdown and optimization possibility.",
            "created_at": "2025-04-29T23:23:49Z",
            "html_url": "https://github.com/cython/cython/issues/6798#issuecomment-2840448445",
            "id": 2840448445,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6798",
            "node_id": "IC_kwDOABDGAc6pTc29",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2840448445/reactions"
            },
            "updated_at": "2025-04-29T23:23:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2840448445",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
                "events_url": "https://api.github.com/users/user202729/events{/privacy}",
                "followers_url": "https://api.github.com/users/user202729/followers",
                "following_url": "https://api.github.com/users/user202729/following{/other_user}",
                "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/user202729",
                "id": 25191436,
                "login": "user202729",
                "node_id": "MDQ6VXNlcjI1MTkxNDM2",
                "organizations_url": "https://api.github.com/users/user202729/orgs",
                "received_events_url": "https://api.github.com/users/user202729/received_events",
                "repos_url": "https://api.github.com/users/user202729/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/user202729",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6798/comments",
    "created_at": "2025-04-18T19:37:29Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6798/events",
    "html_url": "https://github.com/cython/cython/issues/6798",
    "id": 3005629693,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6798/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6zJkT9",
    "number": 6798,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6798/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6798/timeline",
    "title": "[ENH] numpy ufunc not compiled",
    "type": null,
    "updated_at": "2025-04-29T23:23:50Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6798",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
        "events_url": "https://api.github.com/users/user202729/events{/privacy}",
        "followers_url": "https://api.github.com/users/user202729/followers",
        "following_url": "https://api.github.com/users/user202729/following{/other_user}",
        "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/user202729",
        "id": 25191436,
        "login": "user202729",
        "node_id": "MDQ6VXNlcjI1MTkxNDM2",
        "organizations_url": "https://api.github.com/users/user202729/orgs",
        "received_events_url": "https://api.github.com/users/user202729/received_events",
        "repos_url": "https://api.github.com/users/user202729/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/user202729",
        "user_view_type": "public"
    }
}