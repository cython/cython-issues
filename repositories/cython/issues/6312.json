{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nThanks to #6196 , we can do: \r\n\r\n```cython\r\n@cython.ufunc\r\ncdef int add(int a, int b):\r\n    return a + b\r\n```\r\nBut if we use this function in a very natural way: \r\n\r\n```python\r\n>>> add([1, 2, 3], [4, 5, 6])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: ufunc 'add' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n>>> add(1, 2)\r\nsame\r\n```\r\n\r\nThis is because numpy implicitly transforms arguments into arrays with np.int64 as dtype (not np.int32). For this to work, we must first create the numpy array with *exactly* dtype=np.int32.\r\n\r\n### Describe the solution you'd like.\r\n\r\nHave a way to convert argument types to their associated c type, either implicitly (as is the case with non-ufuncs) or more explicitly. If the conversion fails, throw an OverflowError as cython already does for non ufuncs functions.\r\n\r\n### Describe alternatives you've considered.\r\n\r\nA workaround would be to wraps the ufunc to do the casting:\r\n ```python\r\ndef casted_add(a, b):\r\n    a = np.asarray(a, dtype=np.int32)\r\n    b = np.asarray(b, dtype=np.int32)\r\n    return add(a, b)\r\n```\r\nBut there are several issues:\r\n - casted_add is not a ufunc per se \r\n - the casting is unsafe in some cases. For example `np.asarray(np.array(2**33), dtype=np.uint32)` returns 0 instead of an error. Same if we use np.cast instead.\r\n\r\n### Additional context\r\n\r\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Unless I'm misunderstanding, I think we're unlikely to do this because ufuncs are intended to be a fairly direct wrapping of the Numpy feature. I think it'd be difficult to do what you suggest without reimplementing a chunk of Numpy.\r\n\r\nWhat I'd recommend doing is making a fused function into a ufunc:\r\n\r\n```\r\n@cython.ufunc\r\ncdef cython.integral add(cython.integral a, cython.integral b):\r\n    return a + b\r\n```\r\n\r\nThat should work with most integer types you can throw at it (at least with the current master branch of Cython, which has a few bug fixes in)",
            "created_at": "2024-07-29T20:41:59Z",
            "html_url": "https://github.com/cython/cython/issues/6312#issuecomment-2256890554",
            "id": 2256890554,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6312",
            "node_id": "IC_kwDOABDGAc6GhWq6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2256890554/reactions"
            },
            "updated_at": "2024-07-29T20:41:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2256890554",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Actually in my usage, my code looks more like: \r\n\r\n```cython\r\ncdef extern from \"clibrary.h\":\r\n     cdef int c_func(int, int)\r\n\r\n@cython.ufunc\r\ncdef int my_func(int a, int b):\r\n    return c_func(a, b)\r\n```\r\n\r\nUsing cython.integral might return false results if it is a wrong type. But I understand that this is not possible / too complicated. The fix of simply asking the user of the function to add one line of code is quite reasonable :)",
            "created_at": "2024-07-29T21:06:45Z",
            "html_url": "https://github.com/cython/cython/issues/6312#issuecomment-2256997281",
            "id": 2256997281,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6312",
            "node_id": "IC_kwDOABDGAc6Ghwuh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2256997281/reactions"
            },
            "updated_at": "2024-07-29T21:06:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2256997281",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/84045859?v=4",
                "events_url": "https://api.github.com/users/arnaud-ma/events{/privacy}",
                "followers_url": "https://api.github.com/users/arnaud-ma/followers",
                "following_url": "https://api.github.com/users/arnaud-ma/following{/other_user}",
                "gists_url": "https://api.github.com/users/arnaud-ma/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/arnaud-ma",
                "id": 84045859,
                "login": "arnaud-ma",
                "node_id": "MDQ6VXNlcjg0MDQ1ODU5",
                "organizations_url": "https://api.github.com/users/arnaud-ma/orgs",
                "received_events_url": "https://api.github.com/users/arnaud-ma/received_events",
                "repos_url": "https://api.github.com/users/arnaud-ma/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/arnaud-ma/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/arnaud-ma/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/arnaud-ma"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6312/comments",
    "created_at": "2024-07-29T20:27:07Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6312/events",
    "html_url": "https://github.com/cython/cython/issues/6312",
    "id": 2436285252,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6312/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6RNsNE",
    "number": 6312,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6312/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6312/timeline",
    "title": "[ENH] handle type casting in ufuncs",
    "updated_at": "2024-07-29T21:06:47Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6312",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/84045859?v=4",
        "events_url": "https://api.github.com/users/arnaud-ma/events{/privacy}",
        "followers_url": "https://api.github.com/users/arnaud-ma/followers",
        "following_url": "https://api.github.com/users/arnaud-ma/following{/other_user}",
        "gists_url": "https://api.github.com/users/arnaud-ma/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/arnaud-ma",
        "id": 84045859,
        "login": "arnaud-ma",
        "node_id": "MDQ6VXNlcjg0MDQ1ODU5",
        "organizations_url": "https://api.github.com/users/arnaud-ma/orgs",
        "received_events_url": "https://api.github.com/users/arnaud-ma/received_events",
        "repos_url": "https://api.github.com/users/arnaud-ma/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/arnaud-ma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/arnaud-ma/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/arnaud-ma"
    }
}