{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Is your feature request related to a problem? Please describe.\n\nCurrently the Python division functions look like the following\n\n```\n#define PY_LONG_LONG long long\nPY_LONG_LONG __Pyx_div_PY_LONG_LONG(PY_LONG_LONG a, PY_LONG_LONG b) {\n    PY_LONG_LONG q = a / b;\n    PY_LONG_LONG r = a - q*b;\n    q -= ((r != 0) & ((r ^ b) < 0));\n    return q;\n}\n```\n\nApparently this leads to the generated code being a few instructions longer than optimal when `b` is a constant. (Constant folding could determine that `b<0` evaluates to either `False` or `True` all the time and optimize it.)\n\n### Describe the solution you'd like.\n\nThis is a godbolt link showing the possibilities.\n\nhttps://godbolt.org/z/33YW8r5T1\n\nBasically, `f1_better`, `f2` are potential replacements. `f2p` is a defective version that only works when `b` is positive.\n\n`f3`, `f4`, `f5p`, `f6` are example of uses when `b` is a constant. We see `f6` gives optimal code (better than `f3` or `f4`).\n\n------\n\nTherefore I recommend changing the third line to (see `f1_better`)\n\n```\nq -= ((r != 0) & (__builtin_constant_p(b) ? ((r < 0) != (b < 0 ? 1: 0)) : ((r ^ b) < 0)));\n```\n\nI know that's weird, but essentially I want to write `(r<0)!=(b<0)` for gcc to do the constant folding, but I want the constant folding to be done before gcc optimizes the expression to `((r^b)<0)`.\n\nThis should never give a performance regression, because `__builtin_constant_p` part should be folded away at compilation time.\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6693/comments",
    "created_at": "2025-02-25T05:19:42Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6693/events",
    "html_url": "https://github.com/cython/cython/issues/6693",
    "id": 2877014541,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6693/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6re8IN",
    "number": 6693,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6693/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6693/timeline",
    "title": "[ENH] Improve performance of Python division wrapper functions",
    "updated_at": "2025-02-25T05:19:42Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6693",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
        "events_url": "https://api.github.com/users/user202729/events{/privacy}",
        "followers_url": "https://api.github.com/users/user202729/followers",
        "following_url": "https://api.github.com/users/user202729/following{/other_user}",
        "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/user202729",
        "id": 25191436,
        "login": "user202729",
        "node_id": "MDQ6VXNlcjI1MTkxNDM2",
        "organizations_url": "https://api.github.com/users/user202729/orgs",
        "received_events_url": "https://api.github.com/users/user202729/received_events",
        "repos_url": "https://api.github.com/users/user202729/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/user202729",
        "user_view_type": "public"
    }
}