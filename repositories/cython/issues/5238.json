{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "c1b1f51cd1632f0b77dacd43092fb44ed5e053a9 /\r\nhttps://github.com/python/cpython/pull/101292 seems to have introduced changes that break the c generated by cython (with 3.0.0a11):\r\n\r\n```\r\nFAILED: numpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/meson-generated_numpy_random_bit_generator.pyx.c.o\r\nccache cc -Inumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p -Inumpy/random -I../../numpy/random -I../../numpy/random/src -Inumpy/core -I../../numpy/core -Inumpy/core/include -I../../numpy/core/include -I../../numpy/core/src/common -Inumpy -I/home/tcaswell/.pybuild/bleeding/include/python3.12 -fvisibility=hidden -fdiagnostics-color=always -w -std=c99 -O2 -fPIC -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNPY_NO_DEPRECATED_API=0 -MD -MQ numpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/meson-generated_numpy_random_bit_generator.pyx.c.o -MF numpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/meson-generated_numpy_random_bit_generator.pyx.c.o.d -o numpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/meson-generated_numpy_random_bit_generator.pyx.c.o -c numpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c: In function ‘__Pyx_PyInt_EqObjC’:\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c:16932:51: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n16932 |         const digit* digits = ((PyLongObject*)op1)->ob_digit;\r\n      |                                                   ^~\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c: In function ‘__Pyx_PyInt_MultiplyObjC’:\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c:17401:51: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n17401 |         const digit* digits = ((PyLongObject*)op1)->ob_digit;\r\n      |                                                   ^~\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c: In function ‘__Pyx_PyInt_As_uint32_t’:\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c:21769:53: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n21769 |             const digit* digits = ((PyLongObject*)x)->ob_digit;\r\n      |                                                     ^~\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c:21824:53: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n21824 |             const digit* digits = ((PyLongObject*)x)->ob_digit;\r\n      |                                                     ^~\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c: In function ‘__Pyx_PyInt_As_long’:\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c:21965:53: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n21965 |             const digit* digits = ((PyLongObject*)x)->ob_digit;\r\n      |                                                     ^~\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c:22020:53: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n22020 |             const digit* digits = ((PyLongObject*)x)->ob_digit;\r\n      |                                                     ^~\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c: In function ‘__Pyx_PyInt_As_int’:\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c:22214:53: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n22214 |             const digit* digits = ((PyLongObject*)x)->ob_digit;\r\n      |                                                     ^~\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c:22269:53: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n22269 |             const digit* digits = ((PyLongObject*)x)->ob_digit;\r\n      |                                                     ^~\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c: In function ‘__Pyx_PyIndex_AsSsize_t’:\r\nnumpy/random/bit_generator.cpython-312-x86_64-linux-gnu.so.p/numpy/random/bit_generator.pyx.c:22823:45: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n22823 |     const digit* digits = ((PyLongObject*)b)->ob_digit;\r\n      | \r\n```\r\n\r\nTrying to build the master branch of cython with the indicated commit of CPython fails with:\r\n\r\n```\r\n       8074 |   __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      In file included from /home/tcaswell/.pybuild/bleeding/include/python3.12/dictobject.h:90,\r\n                       from /home/tcaswell/.pybuild/bleeding/include/python3.12/Python.h:61,\r\n                       from /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:31:\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_typecast’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:12826:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      12826 |   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_p_c_declarator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_sizeof’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:13305:5: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      13305 |     __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_p_c_declarator); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 384, __pyx_L1_error)\r\n            |     ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_make_slice_nodes’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:18404:7: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      18404 |       __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_make_slice_node); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 672, __pyx_L1_error)\r\n            |       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_f_string_expr’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:28929:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      28929 |   __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_StringIO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1246, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_dict_or_set_maker’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:31378:9: warning: ‘Py_OptimizeFlag’ is deprecated [-Wdeprecated-declarations]\r\n      31378 |         if (unlikely(!Py_OptimizeFlag)) {\r\n            |         ^~\r\n      In file included from /home/tcaswell/.pybuild/bleeding/include/python3.12/Python.h:48:\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/pydebug.h:13:37: note: declared here\r\n         13 | Py_DEPRECATED(3.12) PyAPI_DATA(int) Py_OptimizeFlag;\r\n            |                                     ^~~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_with_items’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:45188:7: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      45188 |       __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_tentatively_scan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2140, __pyx_L1_error)\r\n            |       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_with_template’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:46720:5: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      46720 |     __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2213, __pyx_L1_error)\r\n            |     ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_positional_and_keyword_args’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:52152:9: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      52152 |         __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_p_c_base_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2518, __pyx_L1_error)\r\n            |         ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:52177:9: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      52177 |         __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_p_c_declarator); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2519, __pyx_L1_error)\r\n            |         ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:52358:9: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      52358 |         __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_p_c_base_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2531, __pyx_L1_error)\r\n            |         ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:52383:9: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      52383 |         __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_p_c_declarator); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2532, __pyx_L1_error)\r\n            |         ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_c_complex_base_type’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:53210:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      53210 |   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_p_c_base_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2573, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:53235:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      53235 |   __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_p_c_declarator); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2574, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:53397:7: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      53397 |       __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_p_c_base_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2583, __pyx_L1_error)\r\n            |       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:53422:7: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      53422 |       __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_p_c_declarator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2584, __pyx_L1_error)\r\n            |       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_c_declarator’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:58711:7: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      58711 |       __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_p_c_declarator); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2903, __pyx_L1_error)\r\n            |       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_c_func_declarator’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:59607:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      59607 |   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_p_c_arg_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2936, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_c_arg_decl’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:63494:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      63494 |   __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_p_c_declarator); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3169, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_c_struct_or_union_definition’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:67714:7: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      67714 |       __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3393, __pyx_L1_error)\r\n            |       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_c_func_or_var_declaration’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:69255:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      69255 |   __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_p_c_declarator); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3475, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:69592:5: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      69592 |     __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3494, __pyx_L1_error)\r\n            |     ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:69891:7: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      69891 |       __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_p_c_declarator); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3515, __pyx_L1_error)\r\n            |       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_ctypedef_statement’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:70506:5: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      70506 |     __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_p_c_declarator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3552, __pyx_L1_error)\r\n            |     ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_def_statement’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:71448:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      71448 |   __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3603, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_varargslist’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:71686:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      71686 |   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_p_c_arg_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3614, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:71955:7: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      71955 |       __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_p_c_arg_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3628, __pyx_L1_error)\r\n            |       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:72208:7: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      72208 |       __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_p_c_arg_list); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 3638, __pyx_L1_error)\r\n            |       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_class_statement’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:73068:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      73068 |   __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3673, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_c_class_definition’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:74034:5: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      74034 |     __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3719, __pyx_L1_error)\r\n            |     ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_property_decl’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:75386:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      75386 |   __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3789, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_f_6Cython_8Compiler_7Parsing_p_cpp_class_definition’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:79033:5: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      79033 |     __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_p_c_base_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3963, __pyx_L1_error)\r\n            |     ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:79105:7: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      79105 |       __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_p_c_base_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3966, __pyx_L1_error)\r\n            |       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:79397:5: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      79397 |     __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3982, __pyx_L1_error)\r\n            |     ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__pyx_pymod_exec_Parsing’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:84426:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      84426 |   __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2467, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:84617:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      84617 |   __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2889, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:84625:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      84625 |   __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2889, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:84695:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      84695 |   __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3131, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:84703:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      84703 |   __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3131, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:84742:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      84742 |   __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3853, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:84747:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      84747 |   __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3853, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:84799:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      84799 |   __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3904, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:84804:3: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      84804 |   __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Ctx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3904, __pyx_L1_error)\r\n            |   ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__Pyx_get_tp_dict_version’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:85602:5: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      85602 |     return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;\r\n            |     ^~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__Pyx_get_object_dict_version’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:85614:5: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      85614 |     return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;\r\n            |     ^~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__Pyx_object_dict_version_matches’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:85618:5: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      85618 |     if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))\r\n            |     ^~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__Pyx__GetModuleGlobalName’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:85635:5: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      85635 |     __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\r\n            |     ^~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__Pyx_PyInt_AddObjC’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:86589:51: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n      86589 |         const digit* digits = ((PyLongObject*)op1)->ob_digit;\r\n            |                                                   ^~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__Pyx_PyInt_BoolEqObjC’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:86942:51: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n      86942 |         const digit* digits = ((PyLongObject*)op1)->ob_digit;\r\n            |                                                   ^~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__Pyx_PyInt_EqObjC’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:87894:51: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n      87894 |         const digit* digits = ((PyLongObject*)op1)->ob_digit;\r\n            |                                                   ^~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__Pyx_CLineForTraceback’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:89459:9: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      89459 |         __PYX_PY_DICT_LOOKUP_IF_MODIFIED(\r\n            |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:89459:9: warning: ‘ma_version_tag’ is deprecated [-Wdeprecated-declarations]\r\n      89459 |         __PYX_PY_DICT_LOOKUP_IF_MODIFIED(\r\n            |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n      /home/tcaswell/.pybuild/bleeding/include/python3.12/cpython/dictobject.h:22:34: note: declared here\r\n         22 |     Py_DEPRECATED(3.12) uint64_t ma_version_tag;\r\n            |                                  ^~~~~~~~~~~~~~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__Pyx_PyInt_As_long’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:89879:53: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n      89879 |             const digit* digits = ((PyLongObject*)x)->ob_digit;\r\n            |                                                     ^~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:89934:53: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n      89934 |             const digit* digits = ((PyLongObject*)x)->ob_digit;\r\n            |                                                     ^~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__Pyx_PyInt_As_int’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:90075:53: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n      90075 |             const digit* digits = ((PyLongObject*)x)->ob_digit;\r\n            |                                                     ^~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:90130:53: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n      90130 |             const digit* digits = ((PyLongObject*)x)->ob_digit;\r\n            |                                                     ^~\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c: In function ‘__Pyx_PyIndex_AsSsize_t’:\r\n      /home/tcaswell/source/p/cython/cython/Cython/Compiler/Parsing.c:90677:45: error: ‘PyLongObject’ {aka ‘struct _longobject’} has no member named ‘ob_digit’\r\n      90677 |     const digit* digits = ((PyLongObject*)b)->ob_digit;\r\n            |                                             ^~\r\n      error: command '/lib/ccache/bin/gcc' failed with exit code 1\r\n```",
    "closed_at": "2023-02-13T12:40:35Z",
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think that `((PyLongObject*)op1)->ob_digit` needs to be changed to `((PyLongObject*)op1)->long_value->ob_digit` but I can not check right now.",
            "created_at": "2023-02-03T06:13:50Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1415089110",
            "id": 1415089110,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5UWIvW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1415089110/reactions"
            },
            "updated_at": "2023-02-03T06:13:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1415089110",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/199813?v=4",
                "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
                "followers_url": "https://api.github.com/users/tacaswell/followers",
                "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
                "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tacaswell",
                "id": 199813,
                "login": "tacaswell",
                "node_id": "MDQ6VXNlcjE5OTgxMw==",
                "organizations_url": "https://api.github.com/users/tacaswell/orgs",
                "received_events_url": "https://api.github.com/users/tacaswell/received_events",
                "repos_url": "https://api.github.com/users/tacaswell/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tacaswell"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If that doesn't work there's a `CYTHON_USE_PYLONG_INTERNALS` c define that can be turned off so it isn't a disaster (and you could do that now to get your compilation to finish)",
            "created_at": "2023-02-03T07:51:43Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1415263339",
            "id": 1415263339,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5UWzRr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1415263339/reactions"
            },
            "updated_at": "2023-02-03T07:51:43Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1415263339",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "I refer you to https://github.com/cython/cython/issues/4382 :wink: \r\n\r\nI understand that efficient handling of ints is important to Cython.\r\nI plan to add some inline functions to the API, so that API remains fixed even if the underlying ABI changes.\r\n\r\nWhat API do you need? (Or point me to the relevant Cython code)\r\n",
            "created_at": "2023-02-03T10:08:16Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1415577379",
            "id": 1415577379,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5UX_8j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1415577379/reactions"
            },
            "updated_at": "2023-02-03T10:08:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1415577379",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
                "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
                "followers_url": "https://api.github.com/users/markshannon/followers",
                "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
                "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/markshannon",
                "id": 9448417,
                "login": "markshannon",
                "node_id": "MDQ6VXNlcjk0NDg0MTc=",
                "organizations_url": "https://api.github.com/users/markshannon/orgs",
                "received_events_url": "https://api.github.com/users/markshannon/received_events",
                "repos_url": "https://api.github.com/users/markshannon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/markshannon"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What API do you need? (Or point me to the relevant Cython code)\r\n\r\nSo the internal detail we use is just `ob_digit` (and `Py_SIZE` to work out how big it is). We mostly use `ob_digit[0]`, but in a couple of cases we go up to `ob_digit[3]`. I suspect the most useful API would just give us a const pointer to the internal `ob_digit` array. I'd propose that returning `NULL` should be a completely valid option to indicate \"go away and use the real API\". That way the likes of PyPy could support the API (by just returning `NULL`) without having to change their internal representation.\r\n\r\nI guess the question would then be: should there be some indicator to indicate which internal representation is used for future flexibility (either per `int` object or for the interpreter as a whole).\r\n\r\n--------------------------------------\r\n\r\nAs with many internal details, we have got this guarded with a C flag define, so the current code can be made to work by compiling it slightly differently. It obviously isn't a very user-friendly workaround, but it means that nothing should be absolutely broken waiting on a new Cython release.",
            "created_at": "2023-02-03T19:08:34Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1416284825",
            "id": 1416284825,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5UasqZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1416284825/reactions"
            },
            "updated_at": "2023-02-03T19:09:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1416284825",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I guess the higher level thing that could be useful (looking at what we actually use it for) is something like `PyLong_AsLong` that can't fail... i.e. assume that we've done all the relevant type and size checking so that it's definitely a long and can't overflow and then return that as efficiently as possible (and inline if possible)",
            "created_at": "2023-02-03T19:25:45Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1416308476",
            "id": 1416308476,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5Uayb8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1416308476/reactions"
            },
            "updated_at": "2023-02-03T19:25:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1416308476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@markshannon The implementation of `__Pyx_Raise()` has accesses to the `PyThreadState` structure internals, and these accesses are not protected with the `CYTHON_FAST_THREAD_STATE` guard. This is another thing that has to be fixed for compatibility with cpython@main.",
            "created_at": "2023-02-11T16:44:21Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1426819520",
            "id": 1426819520,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VC4nA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1426819520/reactions"
            },
            "updated_at": "2023-02-11T16:44:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1426819520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/294981?v=4",
                "events_url": "https://api.github.com/users/dalcinl/events{/privacy}",
                "followers_url": "https://api.github.com/users/dalcinl/followers",
                "following_url": "https://api.github.com/users/dalcinl/following{/other_user}",
                "gists_url": "https://api.github.com/users/dalcinl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dalcinl",
                "id": 294981,
                "login": "dalcinl",
                "node_id": "MDQ6VXNlcjI5NDk4MQ==",
                "organizations_url": "https://api.github.com/users/dalcinl/orgs",
                "received_events_url": "https://api.github.com/users/dalcinl/received_events",
                "repos_url": "https://api.github.com/users/dalcinl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dalcinl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dalcinl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dalcinl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We do look to have a fallback `CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API` so I think it just takes on extra guard on Cython's end to make it possible to use the fallback if we need to.\r\n\r\n(I know we've been asked in the past about what we want from exceptions/tracebacks/stack APIs, and unfortunately this isn't something I know well enough to really give a good answer for).",
            "created_at": "2023-02-11T17:02:45Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1426825765",
            "id": 1426825765,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VC6Il",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1426825765/reactions"
            },
            "updated_at": "2023-02-11T17:02:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1426825765",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We do look to have a fallback `CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API`\r\n\r\nI believe the fix for `__Pyx_Raise()` is just `CYTHON_COMPILING_IN_PYPY || !CYTHON_FAST_THREAD_STATE`.",
            "created_at": "2023-02-11T18:54:57Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1426853108",
            "id": 1426853108,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VDAz0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1426853108/reactions"
            },
            "updated_at": "2023-02-11T18:54:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1426853108",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/294981?v=4",
                "events_url": "https://api.github.com/users/dalcinl/events{/privacy}",
                "followers_url": "https://api.github.com/users/dalcinl/followers",
                "following_url": "https://api.github.com/users/dalcinl/following{/other_user}",
                "gists_url": "https://api.github.com/users/dalcinl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dalcinl",
                "id": 294981,
                "login": "dalcinl",
                "node_id": "MDQ6VXNlcjI5NDk4MQ==",
                "organizations_url": "https://api.github.com/users/dalcinl/orgs",
                "received_events_url": "https://api.github.com/users/dalcinl/received_events",
                "repos_url": "https://api.github.com/users/dalcinl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dalcinl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dalcinl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dalcinl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I believe the fix for `__Pyx_Raise()` is just `CYTHON_COMPILING_IN_PYPY || !CYTHON_FAST_THREAD_STATE`.\r\n\r\nFixed in https://github.com/cython/cython/commit/1dba3d3b44ce942dafe4c77dec4c64def22c57e1",
            "created_at": "2023-02-13T08:10:41Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1427513564",
            "id": 1427513564,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VFiDc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1427513564/reactions"
            },
            "updated_at": "2023-02-13T08:10:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1427513564",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I guess the higher level thing that could be useful (looking at what we actually use it for) is something like `PyLong_AsLong` that can't fail... i.e. assume that we've done all the relevant type and size checking so that it's definitely a long and can't overflow and then return that as efficiently as possible (and inline if possible)\r\n\r\nRight, we may be able to move that into CPython. In Cython, we currently generate a switch statement for `Py_SIZE()` (depending on the compile time size of a C long, or the specific C integer type that we are converting to) and then just build the long from `ob_digit` using unrolled loops. CPython could provide an inline function for that.\r\n\r\nhttps://github.com/cython/cython/blob/1dba3d3b44ce942dafe4c77dec4c64def22c57e1/Cython/Utility/TypeConversion.c#L939-L1085\r\n\r\nThe `pylong_join()` helper function that generates the digit merge is here:\r\n\r\nhttps://github.com/cython/cython/blob/1dba3d3b44ce942dafe4c77dec4c64def22c57e1/Cython/Utility/__init__.py\r\n\r\nNote that we generate independent conversion functions for different C integer sizes, so we'd need an inline function for int, long, ssize_t and the respective unsigned types as well, in order to cut down the switch statement at compile time.\r\n\r\nHowever, in order to make the necessary checks up-front, ISTM that we'd still need access to the PyLong internals. Thus, I'm not sure if this is a complete solution.",
            "created_at": "2023-02-13T08:27:41Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1427534379",
            "id": 1427534379,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VFnIr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1427534379/reactions"
            },
            "updated_at": "2023-02-13T08:27:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1427534379",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I refer you to #4382 wink\r\n\r\nI refer you to my comment in https://github.com/cython/cython/issues/4382#issuecomment-922998870\r\n\r\nThe approach that I propose is: Cython already guards the use of internals with specific preprocessor guards, and provides one or more (generic) fallback implementations for different Python implementations and versions. We keep using those internals, and when CPython (or PyPy, or something else) changes these internals in a given version, then we start by disabling the guard for the failing platform, and eventually work on making the code fast again by providing an adapted implementation, for which we can then re-enable the guard.\r\n\r\nThis has the additional advantage that users can also disable the guards manually on their side as a stop-gap solution.\r\n\r\nThe reason why there is so much breakage on CPython side currently, is that many internals change at the same time, due to a long backlog of possible performance improvements that are now being worked on in parallel. I don't expect that to be permanently the case. We should eventually come back to a phase where most of CPython's internals are stable and easy to target.",
            "created_at": "2023-02-13T08:55:46Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1427564632",
            "id": 1427564632,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VFuhY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1427564632/reactions"
            },
            "updated_at": "2023-02-13T08:55:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1427564632",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think that `((PyLongObject*)op1)->ob_digit` needs to be changed to `((PyLongObject*)op1)->long_value->ob_digit` but I can not check right now.\r\n\r\nLooks like it should be `((PyLongObject*)op1)->long_value.ob_digit`. I'll try that.",
            "created_at": "2023-02-13T09:13:04Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1427590916",
            "id": 1427590916,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VF08E",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1427590916/reactions"
            },
            "updated_at": "2023-02-13T09:13:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1427590916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "All named  issues should now be fixed in the master branch. Thanks for the report.",
            "created_at": "2023-02-13T12:40:35Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1427876160",
            "id": 1427876160,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VG6lA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1427876160/reactions"
            },
            "updated_at": "2023-02-13T12:40:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1427876160",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@scoder Do you plan you cherry-pick into branch 0.29.x and eventually make a new release? ",
            "created_at": "2023-02-13T12:46:33Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1427882791",
            "id": 1427882791,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VG8Mn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1427882791/reactions"
            },
            "updated_at": "2023-02-13T12:46:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1427882791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/294981?v=4",
                "events_url": "https://api.github.com/users/dalcinl/events{/privacy}",
                "followers_url": "https://api.github.com/users/dalcinl/followers",
                "following_url": "https://api.github.com/users/dalcinl/following{/other_user}",
                "gists_url": "https://api.github.com/users/dalcinl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dalcinl",
                "id": 294981,
                "login": "dalcinl",
                "node_id": "MDQ6VXNlcjI5NDk4MQ==",
                "organizations_url": "https://api.github.com/users/dalcinl/orgs",
                "received_events_url": "https://api.github.com/users/dalcinl/received_events",
                "repos_url": "https://api.github.com/users/dalcinl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dalcinl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dalcinl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dalcinl"
            }
        },
        {
            "author_association": "NONE",
            "body": "I really don't understand this insistence on writing your own functions that probe CPython internals.\r\n\r\nDo you think that we cannot write C code, or that a function with `Pyx` in its name will magically be faster than one prefixed `Py`?\r\nIt makes no sense to me whatsoever.\r\n\r\nFunctions written by CPython developers will, on average be faster. Not because we are smarter, but because we have more capacity and insight into the internals of CPython.\r\n\r\nMany extensions that depend on Cython found it difficult to upgrade to 3.11, as they couldn't simply recompile.\r\nI don't want that to happen in 3.12 and 3.13 and ...\r\n\r\n\r\nMaybe a concrete example would help to motivate you.\r\n\r\nYou are making the assumption that `Py_SIZE(x)` (where `x` is a `PyLongObject`) is equal to the number of digits times the sign.\r\nWe want to change this.\r\nWhen we do this, either you are going to have to move all the code that inspects `Py_SIZE(x)` to the API, or re-implement the whole thing again.\r\nAnd again when we change it again.\r\n\r\nYou really don't want to re-implement https://github.com/python/cpython/issues/101291\r\n\r\n\r\n\r\n\r\n\r\n",
            "created_at": "2023-02-13T15:03:31Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1428094580",
            "id": 1428094580,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VHv50",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1428094580/reactions"
            },
            "updated_at": "2023-02-13T15:03:31Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1428094580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
                "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
                "followers_url": "https://api.github.com/users/markshannon/followers",
                "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
                "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/markshannon",
                "id": 9448417,
                "login": "markshannon",
                "node_id": "MDQ6VXNlcjk0NDg0MTc=",
                "organizations_url": "https://api.github.com/users/markshannon/orgs",
                "received_events_url": "https://api.github.com/users/markshannon/received_events",
                "repos_url": "https://api.github.com/users/markshannon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/markshannon"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@markshannon I raised similar concerns more than 15 years ago, but I was outnumbered and then called myself to silence. To be fair, my main use case was using Cython as a wrapping tool, and not the ultimate tool for boosting performance. \r\n\r\nIf @scoder and others still wants to keep these optimizations, I would like to propose a compromise. In the C code Cython generates, we dump a `#define` macro (in `PY_VERSION_HEX` format?) with the latest X.Y CPython version we are absolutely sure the optimized C code compiles. At C compile time, if  `PY_VERSION_HEX` is larger than the supported version, then the generated C code by default disables all optimizations based in CPython API internals. That way the generated C code is future-proof, more resilient to internal CPython API changes. \r\nWhat do you think? Would that work to keep everyone cool and happy?\r\n",
            "created_at": "2023-02-13T16:10:41Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1428214372",
            "id": 1428214372,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VINJk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1428214372/reactions"
            },
            "updated_at": "2023-02-13T16:11:53Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1428214372",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/294981?v=4",
                "events_url": "https://api.github.com/users/dalcinl/events{/privacy}",
                "followers_url": "https://api.github.com/users/dalcinl/followers",
                "following_url": "https://api.github.com/users/dalcinl/following{/other_user}",
                "gists_url": "https://api.github.com/users/dalcinl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dalcinl",
                "id": 294981,
                "login": "dalcinl",
                "node_id": "MDQ6VXNlcjI5NDk4MQ==",
                "organizations_url": "https://api.github.com/users/dalcinl/orgs",
                "received_events_url": "https://api.github.com/users/dalcinl/received_events",
                "repos_url": "https://api.github.com/users/dalcinl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dalcinl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dalcinl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dalcinl"
            }
        },
        {
            "author_association": "NONE",
            "body": "First of stop calling these `Pyx` functions \"optimizations\". They aren't.\r\nThey are filling in gaps in the C API. Admittedly there are many gaps in the C API, but we want to fill them.\r\n",
            "created_at": "2023-02-13T16:21:36Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1428233883",
            "id": 1428233883,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VIR6b",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1428233883/reactions"
            },
            "updated_at": "2023-02-13T16:21:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1428233883",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
                "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
                "followers_url": "https://api.github.com/users/markshannon/followers",
                "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
                "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/markshannon",
                "id": 9448417,
                "login": "markshannon",
                "node_id": "MDQ6VXNlcjk0NDg0MTc=",
                "organizations_url": "https://api.github.com/users/markshannon/orgs",
                "received_events_url": "https://api.github.com/users/markshannon/received_events",
                "repos_url": "https://api.github.com/users/markshannon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/markshannon"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> First of stop calling these Pyx functions \"optimizations\". They aren't.\r\n\r\nMaybe you are being a bit unfair? Many Pyx functions/macros are attempts to inline C code. CPython certainly benefit from GCC's `-fno-semantic-interposition`, Cython extension modules cannot. IIRC, RedHat got circa 30% speedup enabling that compiler flag. Anyway, I'm not CPython performance expert, and I'm actually on your side, I don't like trading portability over ultimate performance.",
            "created_at": "2023-02-13T16:34:46Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1428254880",
            "id": 1428254880,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VIXCg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1428254880/reactions"
            },
            "updated_at": "2023-02-13T16:34:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1428254880",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/294981?v=4",
                "events_url": "https://api.github.com/users/dalcinl/events{/privacy}",
                "followers_url": "https://api.github.com/users/dalcinl/followers",
                "following_url": "https://api.github.com/users/dalcinl/following{/other_user}",
                "gists_url": "https://api.github.com/users/dalcinl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dalcinl",
                "id": 294981,
                "login": "dalcinl",
                "node_id": "MDQ6VXNlcjI5NDk4MQ==",
                "organizations_url": "https://api.github.com/users/dalcinl/orgs",
                "received_events_url": "https://api.github.com/users/dalcinl/received_events",
                "repos_url": "https://api.github.com/users/dalcinl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dalcinl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dalcinl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dalcinl"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Many Pyx functions/macros are attempts to inline C code. \r\n\r\nBut why? Why use non-portable functions, rather than filling in the gaps in the C API?\r\n",
            "created_at": "2023-02-13T18:14:40Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1428430725",
            "id": 1428430725,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VJB-F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1428430725/reactions"
            },
            "updated_at": "2023-02-13T18:14:40Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1428430725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
                "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
                "followers_url": "https://api.github.com/users/markshannon/followers",
                "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
                "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/markshannon",
                "id": 9448417,
                "login": "markshannon",
                "node_id": "MDQ6VXNlcjk0NDg0MTc=",
                "organizations_url": "https://api.github.com/users/markshannon/orgs",
                "received_events_url": "https://api.github.com/users/markshannon/received_events",
                "repos_url": "https://api.github.com/users/markshannon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/markshannon"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @scoder Do you plan you cherry-pick into branch 0.29.x and eventually make a new release?\r\n\r\nNot simply. Regarding the PyLong change, I'd rather not copy that to 0.29.x but instead disable the PyLong digit access for CPython 3.12+ there. That seems more future proof for the legacy release branch.\r\n\r\nApart from that, cherry-picking is probably ok.",
            "created_at": "2023-02-15T13:12:08Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1431349376",
            "id": 1431349376,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VUKiA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1431349376/reactions"
            },
            "updated_at": "2023-02-15T13:12:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1431349376",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In the C code Cython generates, we dump a `#define` macro (in `PY_VERSION_HEX` format?) with the latest X.Y CPython version we are absolutely sure the optimized C code compiles. At C compile time, if `PY_VERSION_HEX` is larger than the supported version, then the generated C code by default disables all optimizations based in CPython API internals.\r\n\r\nI also thought about that a couple of years ago, but decided against it. This would optimise for the case that all CPython internals (that we make use of) change in each and every CPython minor release. I don't consider that very likely. Even in the current stream of changes and optimisations, many internals have remained unchanged. This feels like deliberate degradation.\r\n\r\nHowever, in a way, the same argument that we always use applies: if you want the best adaptation to a recent (XYZ)Python release, rebuild your code with a recent Cython version.\r\n\r\nI think my main motivation to oppose this idea is laziness. I don't want to do something (or users to do something), unless there really *is* something to do.",
            "created_at": "2023-02-15T13:25:52Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1431367397",
            "id": 1431367397,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VUO7l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1431367397/reactions"
            },
            "updated_at": "2023-02-15T13:25:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1431367397",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> You really don't want to re-implement [python/cpython#101291](https://github.com/python/cpython/issues/101291)\r\n\r\nWe wouldn't reimplement all of it, just the parts that give us fast access to the integer value, at least in common cases. We could chose to *only* care about \"small\" integers with that implementation, for example. And reconsider that decision later. The current PyLong unpacking code in Cython exists (and has the current limits) because the digit layout made it easy to do, not because 3-digit PyLongs are so much more important than 4-digit PyLongs.",
            "created_at": "2023-02-15T13:34:24Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1431378738",
            "id": 1431378738,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VURsy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1431378738/reactions"
            },
            "updated_at": "2023-02-15T13:34:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1431378738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> That way the generated C code is future-proof, more resilient to internal CPython API changes.\r\n\r\nI looked for a ticket that describes this need but couldn't find one. That discussion is probably split over a couple of tickets, both closed and open ones. Let's continue the focussed discussion in https://github.com/cython/cython/issues/5249",
            "created_at": "2023-02-15T14:17:03Z",
            "html_url": "https://github.com/cython/cython/issues/5238#issuecomment-1431441023",
            "id": 1431441023,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5238",
            "node_id": "IC_kwDOABDGAc5VUg5_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1431441023/reactions"
            },
            "updated_at": "2023-02-15T14:17:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1431441023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 23,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5238/comments",
    "created_at": "2023-02-03T06:08:31Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
                "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
                "followers_url": "https://api.github.com/users/markshannon/followers",
                "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
                "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/markshannon",
                "id": 9448417,
                "login": "markshannon",
                "node_id": "MDQ6VXNlcjk0NDg0MTc=",
                "organizations_url": "https://api.github.com/users/markshannon/orgs",
                "received_events_url": "https://api.github.com/users/markshannon/received_events",
                "repos_url": "https://api.github.com/users/markshannon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/markshannon"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-11T16:44:21Z",
            "event": "mentioned",
            "id": 8496916327,
            "node_id": "MEE_lADOABDGAc5diUaAzwAAAAH6dKdn",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8496916327"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
                "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
                "followers_url": "https://api.github.com/users/markshannon/followers",
                "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
                "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/markshannon",
                "id": 9448417,
                "login": "markshannon",
                "node_id": "MDQ6VXNlcjk0NDg0MTc=",
                "organizations_url": "https://api.github.com/users/markshannon/orgs",
                "received_events_url": "https://api.github.com/users/markshannon/received_events",
                "repos_url": "https://api.github.com/users/markshannon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/markshannon"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-11T16:44:21Z",
            "event": "subscribed",
            "id": 8496916329,
            "node_id": "SE_lADOABDGAc5diUaAzwAAAAH6dKdp",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8496916329"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "1dba3d3b44ce942dafe4c77dec4c64def22c57e1",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/1dba3d3b44ce942dafe4c77dec4c64def22c57e1",
            "created_at": "2023-02-13T08:09:28Z",
            "event": "referenced",
            "id": 8501409451,
            "node_id": "REFE_lADOABDGAc5diUaAzwAAAAH6uTar",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8501409451"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "b4c7d4658393a571acbba7aa4468c3764736358f",
            "commit_url": "https://api.github.com/repos/scoder/cython/commits/b4c7d4658393a571acbba7aa4468c3764736358f",
            "created_at": "2023-02-13T09:23:00Z",
            "event": "referenced",
            "id": 8502074428,
            "node_id": "REFE_lADOABDGAc5diUaAzwAAAAH6w1w8",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8502074428"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "9b7c35740f06a031961f9a801dd128788dd11b5e",
            "commit_url": "https://api.github.com/repos/scoder/cython/commits/9b7c35740f06a031961f9a801dd128788dd11b5e",
            "created_at": "2023-02-13T09:32:49Z",
            "event": "referenced",
            "id": 8502170180,
            "node_id": "REFE_lADOABDGAc5diUaAzwAAAAH6xNJE",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8502170180"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "58d5fed61cc4fa4718d50bfee42bdcf8071c5636",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/58d5fed61cc4fa4718d50bfee42bdcf8071c5636",
            "created_at": "2023-02-13T12:38:54Z",
            "event": "referenced",
            "id": 8504005056,
            "node_id": "REFE_lADOABDGAc5diUaAzwAAAAH64NHA",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8504005056"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "1c3a212084744ab52c3e928857a636c312c8f20e",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/1c3a212084744ab52c3e928857a636c312c8f20e",
            "created_at": "2023-02-13T12:38:54Z",
            "event": "referenced",
            "id": 8504005125,
            "node_id": "REFE_lADOABDGAc5diUaAzwAAAAH64NIF",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8504005125"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-13T12:40:36Z",
            "event": "closed",
            "id": 8504020400,
            "node_id": "CE_lADOABDGAc5diUaAzwAAAAH64Q2w",
            "performed_via_github_app": null,
            "state_reason": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8504020400"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-13T12:40:54Z",
            "event": "milestoned",
            "id": 8504023056,
            "milestone": {
                "title": "3.0"
            },
            "node_id": "MIE_lADOABDGAc5diUaAzwAAAAH64RgQ",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8504023056"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-13T12:41:02Z",
            "event": "labeled",
            "id": 8504024250,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "LE_lADOABDGAc5diUaAzwAAAAH64Ry6",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8504024250"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-13T12:41:02Z",
            "event": "labeled",
            "id": 8504024258,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "LE_lADOABDGAc5diUaAzwAAAAH64RzC",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8504024258"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-13T12:46:34Z",
            "event": "mentioned",
            "id": 8504073520,
            "node_id": "MEE_lADOABDGAc5diUaAzwAAAAH64d0w",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8504073520"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-13T12:46:34Z",
            "event": "subscribed",
            "id": 8504073526,
            "node_id": "SE_lADOABDGAc5diUaAzwAAAAH64d02",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8504073526"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-13T16:10:41Z",
            "event": "mentioned",
            "id": 8506249769,
            "node_id": "MEE_lADOABDGAc5diUaAzwAAAAH7AxIp",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8506249769"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-13T16:10:41Z",
            "event": "subscribed",
            "id": 8506249791,
            "node_id": "SE_lADOABDGAc5diUaAzwAAAAH7AxI_",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8506249791"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
                "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
                "followers_url": "https://api.github.com/users/markshannon/followers",
                "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
                "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/markshannon",
                "id": 9448417,
                "login": "markshannon",
                "node_id": "MDQ6VXNlcjk0NDg0MTc=",
                "organizations_url": "https://api.github.com/users/markshannon/orgs",
                "received_events_url": "https://api.github.com/users/markshannon/received_events",
                "repos_url": "https://api.github.com/users/markshannon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/markshannon"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-13T16:10:42Z",
            "event": "mentioned",
            "id": 8506249836,
            "node_id": "MEE_lADOABDGAc5diUaAzwAAAAH7AxJs",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8506249836"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
                "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
                "followers_url": "https://api.github.com/users/markshannon/followers",
                "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
                "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/markshannon",
                "id": 9448417,
                "login": "markshannon",
                "node_id": "MDQ6VXNlcjk0NDg0MTc=",
                "organizations_url": "https://api.github.com/users/markshannon/orgs",
                "received_events_url": "https://api.github.com/users/markshannon/received_events",
                "repos_url": "https://api.github.com/users/markshannon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/markshannon"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-13T16:10:42Z",
            "event": "subscribed",
            "id": 8506249860,
            "node_id": "SE_lADOABDGAc5diUaAzwAAAAH7AxKE",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8506249860"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-15T13:12:08Z",
            "event": "mentioned",
            "id": 8525920137,
            "node_id": "MEE_lADOABDGAc5diUaAzwAAAAH8LzeJ",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8525920137"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-02-15T13:12:08Z",
            "event": "subscribed",
            "id": 8525920159,
            "node_id": "SE_lADOABDGAc5diUaAzwAAAAH8Lzef",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8525920159"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5238/events",
    "html_url": "https://github.com/cython/cython/issues/5238",
    "id": 1569277568,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5238/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 805,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\n– New version scheme: 3.x instead of 0.x.\r\n– Change default `language_level` from `2` to `3str`.\r\n– Change default for `binding` directive from `False` to `True`.\r\n– Fix some Python compatibility issues (if possible, allowing for breaking changes).\r\n",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 44,
        "state": "open",
        "title": "3.0",
        "updated_at": "2023-02-13T12:40:54Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "I_kwDOABDGAc5diUaA",
    "number": 5238,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5238/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5238/timeline",
    "title": "incompatibility with cpython main branch",
    "updated_at": "2023-02-15T14:17:04Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5238",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/199813?v=4",
        "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
        "followers_url": "https://api.github.com/users/tacaswell/followers",
        "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
        "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tacaswell",
        "id": 199813,
        "login": "tacaswell",
        "node_id": "MDQ6VXNlcjE5OTgxMw==",
        "organizations_url": "https://api.github.com/users/tacaswell/orgs",
        "received_events_url": "https://api.github.com/users/tacaswell/received_events",
        "repos_url": "https://api.github.com/users/tacaswell/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tacaswell"
    }
}