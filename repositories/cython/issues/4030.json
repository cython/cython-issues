{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!--\r\n**Note:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report. Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n**Alternative specification syntax for simple C types in Cython**\r\n\r\nBeing able to make use of the Python type-annotation support in Cython pure mode is very convenient.  \r\n\r\nCurrently, the [cython-3.0a6 documentation for Cython pure mode](https://cython.readthedocs.io/en/latest/src/tutorial/pure.html#pep-484-type-annotations) shows the following example for\r\nsimple types:\r\n\r\n```cython\r\nimport cython\r\n\r\ndef func():\r\n    # Cython types are evaluated as for cdef declarations\r\n    x: cython.int               # cdef int x\r\n    y: cython.double = 0.57721  # cdef double y = 0.57721\r\n    z: cython.float = 0.57721   # cdef float z  = 0.57721\r\n\r\n    # Python types shadow Cython types for compatibility reasons\r\n    a: float = 0.54321          # cdef double a = 0.54321\r\n    b: int = 5                  # cdef object b = 5\r\n    c: long = 6                 # cdef object c = 6\r\n    pass\r\n    \r\n```\r\n\r\nWhat if the the Cython pure mode could be extended to support Cython-specific [PEP-484 type comments](https://www.python.org/dev/peps/pep-0484/#type-comments) by super-imposing a more specific Cython type on top of the CPython type annotation like so:\r\n\r\n```cython\r\nimport cython\r\n\r\ndef func():\r\n    # Cython types are evaluated as for cdef declarations if a\r\n    # `# ctype: ` type comment is used\r\n    x: int                      # ctype: cdef int x\r\n    y: float = 0.57721          # ctype: cdef double y\r\n    z: float = 0.57721          # ctype: cdef float z\r\n\r\n    # Python types shadow Cython types for compatibility reasons\r\n    # (note no `# ctype: ` type comment here)\r\n    a: float = 0.54321          # cdef double a = 0.54321\r\n    b: int = 5                  # cdef object b = 5\r\n    c: long = 6                 # cdef object c = 6\r\n    pass\r\n```\r\n\r\n\r\n**Alternative specification specification for .pxd function signatures in Cython**\r\n\r\nThis is the original non-typed Python example from the same Cython documentation page in the [Augmenting .pxd section](https://cython.readthedocs.io/en/latest/src/tutorial/pure.html#augmenting-pxd):\r\n\r\n```cython\r\ndef myfunction(x, y=2):\r\n    a = x - y\r\n    return a + x * y\r\n\r\ndef _helper(a):\r\n    return a + 1\r\n\r\nclass A:\r\n    def __init__(self, b=0):\r\n        self.a = 3\r\n        self.b = b\r\n\r\n    def foo(self, x):\r\n        print(x + _helper(1.0))\r\n```\r\n\r\n\r\nFunction signature definitions are usually added in .pxd files or as (somewhat cumbersome) decorators. But what if perhaps the `# ctype: ` type-comments could also be used for super-imposing more specific Cython function signatures when added to a Python type annotated version of the above:\r\n\r\n```cython\r\nimport cython\r\n\r\ndef myfunction(x: int, y: int = 2) -> int:  # ctype: cpdef int myfunction(int x, int y=*)\r\n    a = x - y\r\n    return a + x * y\r\n\r\ndef _helper(a: int) -> int:  # ctype: cdef double _helper (double a)\r\n    return a + 1\r\n\r\nclass A: # ctype: cdef Class A\r\n    def __init__(self, b: int = 0):  # ctype: cdef public int a, b\r\n        self.a = 3\r\n        self.b = b\r\n\r\n    def foo(self, x: float):  # ctype: cpdef foo(self, double x)\r\n        print(x + _helper(1.0))\r\n```\r\n\r\n\r\n**Alternatives considered**\r\n\r\nNone. \r\n\r\nThe goal was to build on the existing PEP-484 type comments specification in a clear and easy way while only making a single concise change from `# type: ` to `# ctype: `.\r\n\r\nThe rationale is that since the Cython-specific type definitions are hidden behind a comment, such definitions are not expected to conflict with code executed in the CPython interpreter, type annotated or not.\r\n\r\nAt the same time, the `c`-prefix in `# ctype: ` is easily understood as a native C type used by Cython and is thus not expected to conflict with existing `# type:` parsers.\r\n\r\nNote also that the proposal re-uses the existing Cython cdef/cpdef syntax in the type comments.\r\n\r\nFinally, note that without the Cython-specific `# ctype: ` type comments, Cython would simply fall back to the existing pure behaviour, which suggests that this proposal could represent a backwards-compatible change.\r\n\r\n\r\n**Context**\r\n\r\nThe only goal with this proposal is to get a feel for whether the suggestion above is feasible.",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4030/comments",
    "created_at": "2021-03-11T11:22:00Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4030/events",
    "html_url": "https://github.com/cython/cython/issues/4030",
    "id": 829057183,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4030/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU4MjkwNTcxODM=",
    "number": 4030,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[ENH] Explore using a Cython-specific variant of PEP-484 \"type comments\" to specify types and function signatures?",
    "updated_at": "2021-03-11T11:26:29Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4030",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/118045?v=4",
        "events_url": "https://api.github.com/users/ermo/events{/privacy}",
        "followers_url": "https://api.github.com/users/ermo/followers",
        "following_url": "https://api.github.com/users/ermo/following{/other_user}",
        "gists_url": "https://api.github.com/users/ermo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ermo",
        "id": 118045,
        "login": "ermo",
        "node_id": "MDQ6VXNlcjExODA0NQ==",
        "organizations_url": "https://api.github.com/users/ermo/orgs",
        "received_events_url": "https://api.github.com/users/ermo/received_events",
        "repos_url": "https://api.github.com/users/ermo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ermo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ermo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ermo"
    }
}