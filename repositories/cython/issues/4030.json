{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!--\r\n**Note:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report. Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n**Alternative specification syntax for simple C types in Cython**\r\n\r\nBeing able to make use of the Python type-annotation support in Cython pure mode is very convenient.  \r\n\r\nCurrently, the [cython-3.0a6 documentation for Cython pure mode](https://cython.readthedocs.io/en/latest/src/tutorial/pure.html#pep-484-type-annotations) shows the following example for\r\nsimple types:\r\n\r\n```cython\r\nimport cython\r\n\r\ndef func():\r\n    # Cython types are evaluated as for cdef declarations\r\n    x: cython.int               # cdef int x\r\n    y: cython.double = 0.57721  # cdef double y = 0.57721\r\n    z: cython.float = 0.57721   # cdef float z  = 0.57721\r\n\r\n    # Python types shadow Cython types for compatibility reasons\r\n    a: float = 0.54321          # cdef double a = 0.54321\r\n    b: int = 5                  # cdef object b = 5\r\n    c: long = 6                 # cdef object c = 6\r\n    pass\r\n    \r\n```\r\n\r\nWhat if the the Cython pure mode could be extended to support Cython-specific [PEP-484 type comments](https://www.python.org/dev/peps/pep-0484/#type-comments) by super-imposing a more specific Cython type on top of the CPython type annotation like so:\r\n\r\n```cython\r\nimport cython\r\n\r\ndef func():\r\n    # Cython types are evaluated as for cdef declarations if a\r\n    # `# ctype: ` type comment is used\r\n    x: int                      # ctype: cdef int x\r\n    y: float = 0.57721          # ctype: cdef double y\r\n    z: float = 0.57721          # ctype: cdef float z\r\n\r\n    # Python types shadow Cython types for compatibility reasons\r\n    # (note no `# ctype: ` type comment here)\r\n    a: float = 0.54321          # cdef double a = 0.54321\r\n    b: int = 5                  # cdef object b = 5\r\n    c: long = 6                 # cdef object c = 6\r\n    pass\r\n```\r\n\r\n\r\n**Alternative specification for .pxd function signatures in Cython**\r\n\r\nThis is the original non-typed Python example from the same Cython documentation page in the [Augmenting .pxd section](https://cython.readthedocs.io/en/latest/src/tutorial/pure.html#augmenting-pxd):\r\n\r\n```cython\r\ndef myfunction(x, y=2):\r\n    a = x - y\r\n    return a + x * y\r\n\r\ndef _helper(a):\r\n    return a + 1\r\n\r\nclass A:\r\n    def __init__(self, b=0):\r\n        self.a = 3\r\n        self.b = b\r\n\r\n    def foo(self, x):\r\n        print(x + _helper(1.0))\r\n```\r\n\r\n\r\nFunction signature definitions are usually added in .pxd files or as (somewhat cumbersome) decorators. But what if perhaps the `# ctype: ` type-comments could also be used for super-imposing more specific Cython function signatures when added to a Python type annotated version of the above:\r\n\r\n```cython\r\nimport cython\r\n\r\ndef myfunction(x: int, y: int = 2) -> int:  # ctype: cpdef int myfunction(int x, int y=*)\r\n    a = x - y\r\n    return a + x * y\r\n\r\ndef _helper(a: int) -> int:  # ctype: cdef double _helper (double a)\r\n    return a + 1\r\n\r\nclass A: # ctype: cdef Class A\r\n    def __init__(self, b: int = 0):  # ctype: cdef public int a, b\r\n        self.a = 3\r\n        self.b = b\r\n\r\n    def foo(self, x: float):  # ctype: cpdef foo(self, double x)\r\n        print(x + _helper(1.0))\r\n```\r\n\r\n\r\n**Alternatives considered**\r\n\r\nNone. \r\n\r\nThe goal was to build on the existing PEP-484 type comments specification in a clear and easy way while only making a single concise change from `# type: ` to `# ctype: `.\r\n\r\nThe rationale is that since the Cython-specific type definitions are hidden behind a comment, such definitions are not expected to conflict with code executed in the CPython interpreter, type annotated or not.\r\n\r\nAt the same time, the `c`-prefix in `# ctype: ` is easily understood as a native C type used by Cython and is thus not expected to conflict with existing `# type:` parsers.\r\n\r\nNote also that the proposal re-uses the existing Cython cdef/cpdef syntax in the type comments.\r\n\r\nFinally, note that without the Cython-specific `# ctype: ` type comments, Cython would simply fall back to the existing pure behaviour, which suggests that this proposal could represent a backwards-compatible change.\r\n\r\n\r\n**Context**\r\n\r\nThe only goal with this proposal is to get a feel for whether the suggestion above is feasible.",
    "closed_at": "2021-03-14T15:28:38Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Repeating the type violates the DRY principle.\r\nCould be that you also misinterpreted the example in the docs. The comments are â€¦ comments. They don't have a special meaning.",
            "created_at": "2021-03-14T15:28:38Z",
            "html_url": "https://github.com/cython/cython/issues/4030#issuecomment-798926924",
            "id": 798926924,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4030",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODkyNjkyNA==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T15:28:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798926924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "@scoder \r\n\r\nSo, the basic premise here was to be able to use normal python type annotations and then being able to super-impose cython-specific type information on top directly in the source instead of in a separate .pxd file.\r\n\r\nTo be clear, that is NOT repetition.\r\n\r\nHow would one do that with cython as it stands?",
            "created_at": "2021-03-14T15:31:05Z",
            "html_url": "https://github.com/cython/cython/issues/4030#issuecomment-798927346",
            "id": 798927346,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4030",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODkyNzM0Ng==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T15:33:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798927346",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/118045?v=4",
                "events_url": "https://api.github.com/users/ermo/events{/privacy}",
                "followers_url": "https://api.github.com/users/ermo/followers",
                "following_url": "https://api.github.com/users/ermo/following{/other_user}",
                "gists_url": "https://api.github.com/users/ermo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ermo",
                "id": 118045,
                "login": "ermo",
                "node_id": "MDQ6VXNlcjExODA0NQ==",
                "organizations_url": "https://api.github.com/users/ermo/orgs",
                "received_events_url": "https://api.github.com/users/ermo/received_events",
                "repos_url": "https://api.github.com/users/ermo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ermo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ermo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ermo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Why not just use Cython types? Python type analysers can understand them.",
            "created_at": "2021-03-14T15:40:36Z",
            "html_url": "https://github.com/cython/cython/issues/4030#issuecomment-798928764",
            "id": 798928764,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4030",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODkyODc2NA==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T15:40:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798928764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "My view would be:\r\n* Cython probably already has \"too many\" ways to specify types - they're all there for good reasons but there's three or four different ways and it can be hard to follow what overrides what at times. I'd be keen to avoid adding another.\r\n* I'm not convinced that \"Python `int` does not got to C `int`\" is a real problem (as Scoder says, `cython.int` works fine here), but if I had to solve it then the right way to do it would probably be to add a compiler directive (and otherwise leave the typing code untouched)",
            "created_at": "2021-03-14T16:03:26Z",
            "html_url": "https://github.com/cython/cython/issues/4030#issuecomment-798932452",
            "id": 798932452,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4030",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODkzMjQ1Mg==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T16:03:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798932452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Let me rephrase the question then:\r\n\r\nIf I specify any of the `cython.long/cython.int/etc.` types, will they all map to CPython `int` type-annotation in a many-to-one way when run under CPython-compatible type checkers?",
            "created_at": "2021-03-14T16:07:19Z",
            "html_url": "https://github.com/cython/cython/issues/4030#issuecomment-798933104",
            "id": 798933104,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4030",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODkzMzEwNA==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T16:07:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798933104",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/118045?v=4",
                "events_url": "https://api.github.com/users/ermo/events{/privacy}",
                "followers_url": "https://api.github.com/users/ermo/followers",
                "following_url": "https://api.github.com/users/ermo/following{/other_user}",
                "gists_url": "https://api.github.com/users/ermo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ermo",
                "id": 118045,
                "login": "ermo",
                "node_id": "MDQ6VXNlcjExODA0NQ==",
                "organizations_url": "https://api.github.com/users/ermo/orgs",
                "received_events_url": "https://api.github.com/users/ermo/received_events",
                "repos_url": "https://api.github.com/users/ermo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ermo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ermo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ermo"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> If I specify any of the `cython.long/cython.int/etc.` types, will they all map to CPython `int` type-annotation in a many-to-one way when run under CPython-compatible type checkers?\r\n\r\nThey should do - Shadow.py defines them like that for when you run `import cython` in regular Python\r\n\r\n```\r\n>>> import cython\r\n>>> cython.int\r\nint\r\n```\r\n\r\nAlthough I guess PEP-563 might make it harder for type-checkers to work this out...",
            "created_at": "2021-03-14T16:16:21Z",
            "html_url": "https://github.com/cython/cython/issues/4030#issuecomment-798934570",
            "id": 798934570,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4030",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODkzNDU3MA==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T16:17:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798934570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "First of all, thanks for engaging with me.  I realise that I should probably have to spent a little more time describing the motivation for the examples I gave, but I can't change that now.\r\n\r\nMy starting point was that I wondered how to make cython pure mode as useful and non-intrusive for me (and others) when invoking the cython compiler on CPython code with only bog standard CPython type hints.\r\n\r\nI (obviously) consider it a huge engineering boon to be able to conveniently re-use the existing CPython type hints to speed up modules with cython pure mode without having to spend too much time re-specifying types unless deemed absolutely necessary for extra optimisation of hot code paths.\r\n\r\nI also obviously respect the judgement that adding another type-annotation mechanism is not feasible/desirable.\r\n\r\nHaving thought about it some more, it indeed seems to me that having a cython flag that -- when specified -- auto-translates CPython `int` and `float` type hints to the native machine type for each (e.g. `cython.long` and `cython.double` on AMD64) as this is probably the easiest/simplest way forward in terms of easy speedups when using cython pure mode on code with purely CPython type hints?\r\n\r\nEDIT: Alternatively, the type-coercion could be explicitly specified in the flags; e.g. `--cpython_int=long` and `--cpython_float=double` or somesuch. This might be a boon on 32-bit platforms for example.\r\n\r\nThat way, if a user specifies said flag, they could be warned about the implications and be told that if something breaks due to differing semantics between cython and CPython `int` and `float` types, they get to keep the pieces?\r\n\r\nThen, in the cases where it makes sense to switch to more specific types (`int` -> `cython.int` or `float` -> `cython.float` for instance), the user can do that incrementally as benchmarks indicate?",
            "created_at": "2021-03-14T19:38:39Z",
            "html_url": "https://github.com/cython/cython/issues/4030#issuecomment-798966670",
            "id": 798966670,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4030",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODk2NjY3MA==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-15T13:52:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798966670",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/118045?v=4",
                "events_url": "https://api.github.com/users/ermo/events{/privacy}",
                "followers_url": "https://api.github.com/users/ermo/followers",
                "following_url": "https://api.github.com/users/ermo/following{/other_user}",
                "gists_url": "https://api.github.com/users/ermo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ermo",
                "id": 118045,
                "login": "ermo",
                "node_id": "MDQ6VXNlcjExODA0NQ==",
                "organizations_url": "https://api.github.com/users/ermo/orgs",
                "received_events_url": "https://api.github.com/users/ermo/received_events",
                "repos_url": "https://api.github.com/users/ermo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ermo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ermo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ermo"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4030/comments",
    "created_at": "2021-03-11T11:22:00Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-03-14T15:28:38Z",
            "event": "closed",
            "id": 4455379642,
            "node_id": "MDExOkNsb3NlZEV2ZW50NDQ1NTM3OTY0Mg==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4455379642"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-03-14T15:31:05Z",
            "event": "mentioned",
            "id": 4455382527,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDQ1NTM4MjUyNw==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4455382527"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-03-14T15:31:05Z",
            "event": "subscribed",
            "id": 4455382528,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ0NTUzODI1Mjg=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4455382528"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4030/events",
    "html_url": "https://github.com/cython/cython/issues/4030",
    "id": 829057183,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4030/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU4MjkwNTcxODM=",
    "number": 4030,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "[ENH] Explore using a Cython-specific variant of PEP-484 \"type comments\" to specify types and function signatures?",
    "updated_at": "2021-03-15T13:52:13Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4030",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/118045?v=4",
        "events_url": "https://api.github.com/users/ermo/events{/privacy}",
        "followers_url": "https://api.github.com/users/ermo/followers",
        "following_url": "https://api.github.com/users/ermo/following{/other_user}",
        "gists_url": "https://api.github.com/users/ermo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ermo",
        "id": 118045,
        "login": "ermo",
        "node_id": "MDQ6VXNlcjExODA0NQ==",
        "organizations_url": "https://api.github.com/users/ermo/orgs",
        "received_events_url": "https://api.github.com/users/ermo/received_events",
        "repos_url": "https://api.github.com/users/ermo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ermo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ermo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ermo"
    }
}