{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Provide a Python syntax version of\r\n```cython\r\ncdef packed struct MyStruct: ...\r\n```\r\nSince `cython.struct()` already takes arbitrary keyword arguments, a new keyword argument `packed=True` will not work.\r\nWe could just add a new function `cython.packed_struct()`. (It would just be an alias for `struct()` in `Shadow.py`.)\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Can we afford to make the structures a little more pythonic? Dataclass-style, only not allowing any other members besides fields and restrict use of `cython.declare` (disallow using `visibility` argument).\r\nThis would look prettier:\r\n```python\r\n@cython.struct\r\nclass MyStruct:\r\n    x: cython.int\r\n    y: cython.int\r\n    data: cython.double\r\n```\r\n\r\nThan this:\r\n```python\r\nMyStruct = cython.struct(x=cython.int, y=cython.int, data=cython.double)\r\n\r\n```\r\n\r\nAnd then it will be possible to write the packed structures in this way:\r\n```python\r\n@cython.packed\r\n@cython.struct\r\nclass MyStruct:\r\n    x: cython.int\r\n    y: cython.int\r\n    data: cython.double\r\n```\r\n\r\nor\r\n\r\n```python\r\n@cython.packed_struct\r\nclass MyStruct:\r\n    x: cython.int\r\n    y: cython.int\r\n    data: cython.double\r\n```",
            "created_at": "2021-06-28T20:29:24Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870017435",
            "id": 870017435,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDAxNzQzNQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T20:46:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870017435",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Or even `class MyStruct(metaclass=cython.struct)` (*half-wink*)\r\n\r\nA decorator `@cython.packed` doesn't seem a good idea to me. There is nothing you could combine it with than `@cython.struct`. And `@cython.packed_struct` reads a lot more like the C code that it aims to represent.\r\n\r\nDefining C structs in a Python class body seems a very obvious thing to do. It would be nice to support that.",
            "created_at": "2021-06-28T20:52:01Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870032904",
            "id": 870032904,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDAzMjkwNA==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T20:52:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870032904",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It would be nice to support that.\r\n\r\nShould I create a separate issue dedicated to this?",
            "created_at": "2021-06-28T20:56:38Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870035513",
            "id": 870035513,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDAzNTUxMw==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T20:56:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870035513",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> restrict use of `cython.declare` (disallow using `visibility` argument).\r\n\r\nOf course, it's easier to just not allow visibility to be defined, but in cpp it is possible to define visibility for structure members, we could add this feature, although it seems like a relatively unclaimed feature, and it will take a lot of work to put everything together.",
            "created_at": "2021-06-28T21:02:30Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870039006",
            "id": 870039006,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDAzOTAwNg==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T21:02:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870039006",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > It would be nice to support that.\r\n> \r\n> Should I create a separate issue dedicated to this?\r\n\r\nI don't think that's necessary. If we implement it as part of this ticket, then supporting both packed and normal structs will be entirely trivial. And if we want to take the easy path first, then there's still enough time to create a new ticket.",
            "created_at": "2021-06-28T21:09:36Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870044067",
            "id": 870044067,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDA0NDA2Nw==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T21:09:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870044067",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Although there are some [shenanigans](https://stackoverflow.com/q/5368028/12141949) for c to recreate this behavior.",
            "created_at": "2021-06-28T21:09:54Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870044258",
            "id": 870044258,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDA0NDI1OA==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T21:09:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870044258",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > restrict use of `cython.declare` (disallow using `visibility` argument).\r\n> \r\n> Of course, it's easier to just not allow visibility to be defined, but in cpp it is possible to define visibility for structure members, we could add this feature, although it seems like a relatively unclaimed feature, and it will take a lot of work to put everything together.\r\n\r\nThat seems outside of the scope of this ticket.",
            "created_at": "2021-06-28T21:11:39Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870045351",
            "id": 870045351,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDA0NTM1MQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T21:11:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870045351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> there's still enough time to create a new ticket.\r\n\r\nSure\r\n\r\n\r\n> if we want to take the easy path first\r\n\r\nHopefully we'll make the full version right away.",
            "created_at": "2021-06-28T21:13:43Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870046622",
            "id": 870046622,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDA0NjYyMg==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T21:13:43Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870046622",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> That seems outside of the scope of this ticket.\r\n\r\nI just don’t know if it’s worth raising this question at all, I don’t see a simple and backward compatible implementation ... I’m probably not thinking about it enough yet.\r\nAnyway, should I create a separate issue this time around?",
            "created_at": "2021-06-28T21:17:48Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870049689",
            "id": 870049689,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDA0OTY4OQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T21:17:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870049689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> should I create a separate issue this time around?\r\n\r\nI remember discussing this topic years ago, but not where. If there isn't an issue yet, sure, would be good to have one.",
            "created_at": "2021-06-28T21:23:34Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870054314",
            "id": 870054314,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDA1NDMxNA==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T21:23:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870054314",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Or even `class MyStruct(metaclass=cython.struct)`\r\n\r\nTo also raise exceptions in pure python mode in the process of creating a class in case of an attempt to use prohibited members?",
            "created_at": "2021-06-28T21:28:10Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870056958",
            "id": 870056958,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDA1Njk1OA==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T21:28:10Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870056958",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">> Or even `class MyStruct(metaclass=cython.struct)`\n> \n> To also raise exceptions in pure python mode in the process of creating a class in case of an attempt to use prohibited members?\n\nI was more thinking that the result of the class creation should be a\nPython Enum when running in Python. A metaclass could avoid the actual\nPython class creation.\n\nAnyway, a decorator seems a much more natural and user friendly concept\nthan a metaclass.\n",
            "created_at": "2021-06-28T21:52:44Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870069557",
            "id": 870069557,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDA2OTU1Nw==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T21:52:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870069557",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Python Enum when running in Python\r\n\r\nPython Enum for `cython.struct`?",
            "created_at": "2021-06-28T22:09:37Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870078617",
            "id": 870078617,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDA3ODYxNw==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T22:09:37Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870078617",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> A metaclass could avoid the actual\r\n> Python class creation.\r\n> \r\n> Anyway, a decorator seems a much more natural and user friendly concept\r\n> than a metaclass.\r\n\r\nWith the help of a decorator, we can make a class that uses a metaclass, so everything you listed is still possible.\r\n```python\r\ndef decorator(cls):\r\n    class Wrapper(cls, metaclass=type):\r\n        pass\r\n    return Wrapper\r\n```",
            "created_at": "2021-06-28T22:17:59Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870083275",
            "id": 870083275,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDA4MzI3NQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-28T22:17:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870083275",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Python Enum when running in Python\r\n> \r\n> Python Enum for `cython.struct`?\r\n\r\nToo many tickets open at the same time, I guess…",
            "created_at": "2021-06-29T05:36:28Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870251539",
            "id": 870251539,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDI1MTUzOQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-29T05:36:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870251539",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">> A metaclass could avoid the actual Python class creation.\r\n>> Anyway, a decorator seems a much more natural and user friendly concept than a metaclass.\r\n> \r\n> With the help of a decorator, we can make a class that uses a metaclass, so everything you listed is still possible.\r\n> \r\n> ```python\r\n> def decorator(cls):\r\n>     class Wrapper(cls, metaclass=type):\r\n>         pass\r\n>     return Wrapper\r\n> ```\r\n\r\nNo, not if the intention is to change the class creation. The decorated class is already created when the decorator runs on it.\r\n\r\nIf you look at the way `cython.struct()` is implemented, that's totally a use case for a metaclass that does its own class creation.\r\n\r\nhttps://github.com/cython/cython/blob/54d949f138284b0c4d3ca58366d934301b8358fb/Cython/Shadow.py#L358-L363\r\n\r\nAnyway, using metaclasses for anything would be a totally new concept in Cython's pure Python mode. Let's stick with a decorator (or two).",
            "created_at": "2021-06-29T05:42:48Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870254041",
            "id": 870254041,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDI1NDA0MQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-29T05:59:22Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870254041",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> using metaclasses for anything would be a totally new concept in Cython's pure Python mode\r\n\r\nNow _that_ sounded like it would be deserving of its own issue, but it seems like there's nothing new under the sun: #1332 😅 ",
            "created_at": "2021-06-29T08:52:26Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870408121",
            "id": 870408121,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDQwODEyMQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-29T08:52:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870408121",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> A decorator `@cython.packed` doesn't seem a good idea to me. There is nothing you could combine it with than `@cython.struct`\r\n\r\nIn the first solution from #4257, we could combine `cython.struct` with `cython.cppstruct` and `cython.struct`",
            "created_at": "2021-06-29T10:49:00Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-870488042",
            "id": 870488042,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDQ4ODA0Mg==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-29T10:49:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/870488042",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > A decorator `@cython.packed` doesn't seem a good idea to me. There is nothing you could combine it with than `@cython.struct`\r\n> \r\n> In the first solution from #4257, we could combine `cython.packed` with `cython.cppstruct` and `cython.struct`\r\n\r\nStill, packed structs are a very rare and special thing. I think it's fine to give them their own, separate decorator. Or two, if you want C++ structs.\r\n\r\nI just think that\r\n```cython\r\n@cython.packed_struct\r\nclass MyStruct: ...\r\n```\r\nreads better than the more verbose\r\n```cython\r\n@cython.packed\r\n@cython.struct\r\nclass MyStruct: ...\r\n```\r\nor\r\n```cython\r\n@cython.struct\r\n@cython.packed\r\nclass MyStruct: ...\r\n```\r\nIn which order would you write the two decorators? Is it \"`@packed @struct`\" or \"`@struct @packed`\"? Should that matter? Should people have to decide this each time they write a packed struct? If it's \"`@packed @struct`\", as you would find it in C, then does that make the \"`@struct`\" harder to spot? What if multiple developers in the same project feel differently about it?\r\n\r\nTo me, all of this seems to violate the \"don't make me think\" principle, big time. With \"`@cython.packed_struct`\", there is no need to discuss or consider anything.",
            "created_at": "2021-06-30T06:33:26Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-871134780",
            "id": 871134780,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTEzNDc4MA==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-30T06:33:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/871134780",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Well, I agree. Okay, so be it.",
            "created_at": "2021-06-30T11:53:55Z",
            "html_url": "https://github.com/cython/cython/issues/4253#issuecomment-871337922",
            "id": 871337922,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4253",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTMzNzkyMg==",
            "performed_via_github_app": null,
            "updated_at": "2021-06-30T11:53:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/871337922",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        }
    ],
    "comments": 20,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4253/comments",
    "created_at": "2021-06-28T18:42:07Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-06-28T18:42:07Z",
            "event": "labeled",
            "id": 4949171467,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDQ5NDkxNzE0Njc=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4949171467"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-06-28T18:42:07Z",
            "event": "labeled",
            "id": 4949171469,
            "label": {
                "color": "444444",
                "name": "Pure Python Mode"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDQ5NDkxNzE0Njk=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4949171469"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4253/events",
    "html_url": "https://github.com/cython/cython/issues/4253",
    "id": 931857735,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558499,
            "name": "Pure Python Mode",
            "node_id": "MDU6TGFiZWw0MjU1NTg0OTk=",
            "url": "https://api.github.com/repos/cython/cython/labels/Pure%20Python%20Mode"
        },
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4253/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5MzE4NTc3MzU=",
    "number": 4253,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[ENH] Support packed C structs in pure Python mode",
    "updated_at": "2021-06-30T11:53:55Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4253",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder"
    }
}