{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "COLLABORATOR",
    "body": "Currently, non-constant default values on CyFunctions are stored in a struct and accessed through a void pointer together with a couple of housekeeping values needed to use it:\r\n\r\nhttps://github.com/cython/cython/blob/aea4e6b84b38223c540266f8c57093ee2039f284/Cython/Utility/CythonFunction.c#L55-L57\r\n\r\n(We then store the introspectable `__defaults__` and `__kwdefaults__` as separate `PyObjects*`).\r\n\r\nThis works, but requires multiple awkward loops over it in a few places\r\n\r\nhttps://github.com/cython/cython/blob/aea4e6b84b38223c540266f8c57093ee2039f284/Cython/Utility/CythonFunction.c#L625-L626\r\nhttps://github.com/cython/cython/blob/aea4e6b84b38223c540266f8c57093ee2039f284/Cython/Utility/CythonFunction.c#L668-L669\r\nhttps://github.com/cython/cython/blob/aea4e6b84b38223c540266f8c57093ee2039f284/Cython/Utility/CythonFunction.c#L1258-L1259\r\n\r\nI'd like to replace this struct with a `cdef class`, generated in a similar way to the closure class. My view is:\r\n\r\n**Advantages**\r\n\r\n1. It simplifies the implementation of CyFunction - it keeps track of one `PyObject*` for the defaults and everything else is handled automatically using the tried-and-tested code that handles our cdef classes.\r\n2. It makes it much easier to pickle the defaults - https://github.com/cython/cython/pull/4368 can't currently handle this. (This is the immediate reason I was thinking about it).\r\n3. It potentially makes it easier for the introspectable `__defaults__` and `__kwdefaults__` to be linked back to the stored defaults - https://github.com/cython/cython/issues/2650. The logic to do this could be on the `cdef class`, which could act as a dictionary-like proxy for example. I wouldn't propose to do this on the initial implementation but it's easier to see how to do it in future.\r\n4. There are a few bugs in the current implementation relating to c++ classes, which are mainly just memory leaks, but could also be crashes:\r\n    ```cython\r\n    # distutils: language=c++\r\n    \r\n    from libcpp.vector cimport vector\r\n    \r\n    # neither the constructor nor destructor of the default vector are ever called\r\n    # surprisingly this doesn't actually crash it on my PC, but this is pure luck...\r\n    def f(vector[int] a=[1,2,3]):\r\n        return sum(ai for ai in a)\r\n    \r\n    from cython cimport floating\r\n    \r\n    class C:\r\n        # binding of fused functions causes the defaults to be copied by memcpy\r\n        # which is absolutely invalid. This only avoids problems because the\r\n        # destructor is never called...\r\n        def f(self, floating dummy, vector[int] a=[1,2,3]):\r\n            return sum(ai+dummy for ai in a)\r\n    ```\r\n    `cdef class` already has the infrastructure to get this right.\r\n\r\n**Disadvantages**\r\n\r\nGenerating a new (internal) `cdef class` does require more code than generating a struct, so it probably gives larger C files and increases compilation times.\r\n\r\n**Additional context**\r\n\r\nI'm not planning to do this right away, but I wanted to post it to give people opportunity to tell me that I'm wrong. It's possible that the cython-devel list might have been the better place to post it",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4374/comments",
    "created_at": "2021-09-12T09:53:27Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4374/events",
    "html_url": "https://github.com/cython/cython/issues/4374",
    "id": 994114545,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4374/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5OTQxMTQ1NDU=",
    "number": 4374,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[ENH] Change CyFunction defaults struct to cdef classes",
    "updated_at": "2021-09-12T09:53:27Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4374",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}