{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\r\n\r\nThis issue specifically pertains to Cython versions 3.0 and above. It involves a deadlock encountered when calling LAPACK functions, such as [`dstev`](https://docs.huihoo.com/doxygen/lapack/3.7.0/dc/dd2/group__double_o_t_h_e_reigen_gaaa6df51cfd92c4ab08d41a54bf05c3ab.html), within an OpenMP parallel loop in C++.\r\n\r\n**Accessing LAPACK in C++:**\r\n\r\nThe `scipy.linalg.cython_lapack` module offers a Cython interface to several LAPACK functions, which can be `cimport`ed. These Cython declarations can be directly called from C++ through [C++ public declarations](https://docs.cython.org/en/latest/src/userguide/external_C_code.html#c-public-declarations).\r\n\r\n**Issue Detail:**\r\n\r\nThe setup involves C++ code (in `c_module.h` and `c_module.cpp` and interface `c_module.pxd`), which is wrapped in Cython in `module.pyx`. The LAPACK function `dstev` is made accessible from Scipy's Cython interface to C++ via `lapack_api.pxi`. This configuration works as expected unless Cython version 3.0 or later is used.\r\n\r\nThe issue arises in a parallel loop (within `c_module.cpp` in the `compute()` function), where the loop fails to exit upon completion. Specifically, after all iterations are performed and `dstev` is correctly called in each iteration, the program halts indefinitely without exiting the loop, without any warning or CPU usage.\r\n\r\n**Conditions for Issue Reproduction:**\r\n\r\nThe issue only manifests under all of the following conditions:\r\n\r\n1. OpenMP is set to use more than one thread, **AND**\r\n2. Cython is version 3.0 or above, **AND**\r\n3. Scipy is version 1.10.1 or below, **AND**\r\n4. A LAPACK function, such as `dstev`, is called.\r\n\r\nThe issue does not occur if any of the above conditions are not met. Specifically, it cannot be reproduced if:\r\n\r\n1. OpenMP uses only one thread, **OR**\r\n2. Cython is below version 3.0, **OR**\r\n3. Scipy is above version 1.10.1, **OR**\r\n4. LAPACK functions are not called at all.\r\n\r\n**Suspected Cause:**\r\n\r\nScipy employs OpenBLAS for its LAPACK implementation, which I suspect may request multiple threads, thereby interfering with parent OpenMP loops. Regrettably, there is no scipy's interface to OpenBLAS to limit the number of threads OpenBLAS requests. Though this seems an [OpenBLAS issue](https://github.com/OpenMathLib/OpenBLAS/wiki/Faq#how-can-i-use-openblas-in-multi-threaded-applications), it peculiarly only arises with Cython versions 3.0 and above. All compilations with Cython below 3.0 function correctly under any scenario, including various runtime thread counts and LAPACK function calls.\r\n\r\nDespite the narrow conditions under which this issue occurs, it is critically limiting, affecting the use of Cython 3.0 or newer with specific LAPACK implementations.\r\n\r\nI look forward to any insights or resolutions you may provide regarding this matter.\r\n\r\n\r\n### Code to reproduce the behaviour:\r\n\r\n```python\r\n# file: setup.py\r\n\r\nfrom setuptools import setup\r\nfrom Cython.Build import cythonize\r\nfrom distutils.extension import Extension\r\n\r\nextensions = [\r\n    Extension(\"module\",\r\n              [\"module.pyx\", \"c_module.cpp\"],\r\n              language='c++',\r\n              extra_compile_args=['-O3', '-fopenmp'],\r\n              extra_link_args=['-fopenmp'],\r\n              define_macros=[(\"CYTHON_EXTERN_C\", 'extern \"C\"')])\r\n]\r\n\r\nsetup(\r\n    name=\"trace\",\r\n    ext_modules=cythonize(extensions),\r\n)\r\n```\r\n\r\n```cpp\r\n// file: c_module.h\r\n\r\n#ifndef _module_h\r\n#define _module_h\r\n\r\nCYTHON_EXTERN_C\r\n{\r\n    void lapack_dstev(char* jobz, int* n, double* d, double* e, double* z,\r\n                      int* ldz, double* work, int* info);\r\n}\r\n\r\nvoid compute(double* d, double* e, double* v, int n);\r\n\r\n#endif\r\n```\r\n\r\n```cpp\r\n// file: c_module.cpp\r\n\r\n#include \"./c_module.h\"\r\n#include \"omp.h\"\r\n\r\nvoid _tridiag_eig(double* d, double* e, double* v, int n)\r\n{\r\n    char jobz = 'V';\r\n    double *work = new double[2*n-2];\r\n\r\n    int ldz = n;\r\n    int info;\r\n\r\n    // By commenting this line blow, the issue will not occur.\r\n    lapack_dstev(&jobz, &n, d, e, v, &ldz, work, &info);\r\n\r\n    delete[] work;\r\n}\r\n\r\nvoid compute(double* d, double* e, double* v, int n)\r\n{\r\n    int repeat = 10;\r\n\r\n    // By setting number of threads to 1, the issue will not occur.\r\n    // omp_set_num_threads(1);\r\n\r\n    #pragma omp parallel for\r\n    for (int i=0; i < repeat; ++i)\r\n    {\r\n        _tridiag_eig(d, e, v, n);\r\n    }\r\n\r\n    // Code never reaches this point at runtime.\r\n}\r\n```\r\n\r\n```cython\r\n# file: c_module.pxd\r\n\r\ncdef extern from \"c_module.h\":\r\n    void compute(double* d, double* e, double* v, int n) nogil\r\n```\r\n\r\n```cython\r\n# file: lapack_api.pxi\r\n\r\nfrom scipy.linalg.cython_lapack cimport dstev\r\n\r\ncdef public void lapack_dstev(\r\n        char* jobz, int* n, double* d, double* e, double* z, int* ldz,\r\n        double* work, int* info) noexcept nogil:\r\n\r\n    dstev(jobz, n, d, e, z, ldz, work, info)\r\n```\r\n\r\n```cython\r\n# file: module.pyx\r\n\r\ninclude \"lapack_api.pxi\"\r\nfrom c_module cimport compute\r\n\r\ncpdef void compute_wrapper(\r\n        double[:] d, double[:] e, double[:] v, int n) noexcept nogil:\r\n\r\n    cdef double* dp = &d[0];\r\n    cdef double* ep = &e[0];\r\n    cdef double* vp = &v[0];\r\n\r\n    compute(dp, ep, vp, n);\r\n```\r\n\r\n```python\r\n# file: main.py\r\n\r\nimport numpy as numpy\r\nimport module\r\n\r\nn = 5\r\nd = numpy.random.randn(n)\r\ne = numpy.random.randn(n-1)\r\nv = numpy.zeros((n*n, ), dtype=numpy.float64)\r\n\r\nmodule.compute_wrapper(d, e, v, n)\r\nprint(d)\r\n```\r\n\r\n### Expected behaviour\r\n\r\nOpenMP's for loop should exit the parallel region after the last iteration.\r\n\r\n### OS\r\n\r\nUbuntu 22.04\r\n\r\n### Python version\r\n\r\n3.10.8\r\n\r\n### Cython version\r\n\r\n3.0.9\r\n\r\n### Additional context\r\n\r\nNote that to reproduce the issue, you need `scipy<=1.10`, which does not have wheel for python 3.12. So, please use python<3.12.\r\n\r\nAlso, the output of `python -c \"import scipy; print(scipy.show_config())\"` is\r\n\r\n```\r\nblas_mkl_info:\r\n  NOT AVAILABLE\r\nblis_info:\r\n  NOT AVAILABLE\r\nopenblas_info:\r\n    libraries = ['openblas', 'openblas']\r\n    library_dirs = ['/usr/local/lib']\r\n    language = c\r\n    define_macros = [('HAVE_CBLAS', None)]\r\n    runtime_library_dirs = ['/usr/local/lib']\r\nblas_opt_info:\r\n    libraries = ['openblas', 'openblas']\r\n    library_dirs = ['/usr/local/lib']\r\n    language = c\r\n    define_macros = [('HAVE_CBLAS', None)]\r\n    runtime_library_dirs = ['/usr/local/lib']\r\nlapack_mkl_info:\r\n  NOT AVAILABLE\r\nopenblas_lapack_info:\r\n    libraries = ['openblas', 'openblas']\r\n    library_dirs = ['/usr/local/lib']\r\n    language = c\r\n    define_macros = [('HAVE_CBLAS', None)]\r\n    runtime_library_dirs = ['/usr/local/lib']\r\nlapack_opt_info:\r\n    libraries = ['openblas', 'openblas']\r\n    library_dirs = ['/usr/local/lib']\r\n    language = c\r\n    define_macros = [('HAVE_CBLAS', None)]\r\n    runtime_library_dirs = ['/usr/local/lib']\r\nSupported SIMD extensions in this NumPy install:\r\n    baseline = SSE,SSE2,SSE3\r\n    found = SSSE3,SSE41,POPCNT,SSE42,AVX,F16C,FMA3,AVX2\r\n    not found = AVX512F,AVX512CD,AVX512_KNL,AVX512_KNM,AVX512_SKX,AVX512_CLX,AVX512_CNL,AVX512_ICL\r\nNone\r\n\r\n```",
    "closed_at": "2024-03-24T09:11:56Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I've install Scipy 1.10.1 in a virtual environment and I'm struggling to find \"lapack_api.pxi\" so I think there's some details I'm missing.\r\n\r\nHowever - here's my working theory:\r\n\r\nin `compute_wrapper` the `nogil` says that it *can* run without the GIL, not that it actually releases the GIL. You don't release the GIL and thus the whole thing runs with the GIL locked..\r\n\r\nI wouldn't be surprised if it worked if you changed\r\n\r\n```\r\ncpdef void compute_wrapper(\r\n        double[:] d, double[:] e, double[:] v, int n) noexcept:\r\n\r\n    cdef double* dp = &d[0];\r\n    cdef double* ep = &e[0];\r\n    cdef double* vp = &v[0];\r\n\r\n    with nogil:\r\n        compute(dp, ep, vp, n);\r\n```\r\n\r\nto explicitly release the GIL.\r\n\r\nI'm not sure what's going on beyond that (since I think the mystery .pxi file is important). But it might be that in Cython 3 the implementation of `lapack_dstev` has added an exception check somewhere which tries to reacquire the GIL.",
            "created_at": "2024-03-23T08:20:56Z",
            "html_url": "https://github.com/cython/cython/issues/6107#issuecomment-2016408599",
            "id": 2016408599,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6107",
            "node_id": "IC_kwDOABDGAc54L_QX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2016408599/reactions"
            },
            "updated_at": "2024-03-23T08:20:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2016408599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "I added `lapack_api.pxi` to the original post. Thanks for noting the missing file.",
            "created_at": "2024-03-23T08:50:55Z",
            "html_url": "https://github.com/cython/cython/issues/6107#issuecomment-2016416094",
            "id": 2016416094,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6107",
            "node_id": "IC_kwDOABDGAc54MBFe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2016416094/reactions"
            },
            "updated_at": "2024-03-23T08:50:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2016416094",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2945135?v=4",
                "events_url": "https://api.github.com/users/ameli/events{/privacy}",
                "followers_url": "https://api.github.com/users/ameli/followers",
                "following_url": "https://api.github.com/users/ameli/following{/other_user}",
                "gists_url": "https://api.github.com/users/ameli/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ameli",
                "id": 2945135,
                "login": "ameli",
                "node_id": "MDQ6VXNlcjI5NDUxMzU=",
                "organizations_url": "https://api.github.com/users/ameli/orgs",
                "received_events_url": "https://api.github.com/users/ameli/received_events",
                "repos_url": "https://api.github.com/users/ameli/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ameli/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ameli/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ameli"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This is happening on linux, so probably not related directly to https://github.com/scipy/scipy/issues/20294 which is windows-specific",
            "created_at": "2024-03-24T08:21:26Z",
            "html_url": "https://github.com/cython/cython/issues/6107#issuecomment-2016732474",
            "id": 2016732474,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6107",
            "node_id": "IC_kwDOABDGAc54NOU6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2016732474/reactions"
            },
            "updated_at": "2024-03-24T08:21:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2016732474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
                "events_url": "https://api.github.com/users/mattip/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattip/followers",
                "following_url": "https://api.github.com/users/mattip/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattip",
                "id": 823911,
                "login": "mattip",
                "node_id": "MDQ6VXNlcjgyMzkxMQ==",
                "organizations_url": "https://api.github.com/users/mattip/orgs",
                "received_events_url": "https://api.github.com/users/mattip/received_events",
                "repos_url": "https://api.github.com/users/mattip/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattip"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "So:\r\n\r\nIn that version of scipy `dstev` is written as:\r\n\r\n```\r\ncdef void dstev(char *jobz, int *n, d *d, d *e, d *z, int *ldz, d *work, int *info) nogil\r\n```\r\n\r\n(I'm fairly sure it has `noexcept` in more recent versions of Scipy). Cython 3 interprets the definition without `noexcept` to mean \"might throw a Python exception\". Therefore, the call to `dstev` generates to code\r\n\r\n```\r\n__pyx_f_5scipy_6linalg_13cython_lapack_dstev(__pyx_v_jobz, __pyx_v_n, __pyx_v_d, __pyx_v_e, __pyx_v_z, __pyx_v_ldz, __pyx_v_work, __pyx_v_info); if (unlikely(__Pyx_ErrOccurredWithGIL()))\r\n```\r\n\r\ni.e. it *always* re-acquires the GIL in order to check for an exception.\r\n\r\nAs I said earlier, `compute_wrapper` doesn't release the GIL - it can simply run without the GIL. Therefore the deadlock is that all your OpenMP threads are trying to acquire the GIL when something else already holds it, hence the block.\r\n\r\nIf you modify `compute_wrapper` as I suggested to explicitly release the GIL then it works correctly.\r\n\r\nWe ran into a few issues like this with the release of Cython 3. The one differs because the parallel loop isn't Cython-generated, so it can't be fixed by changing the GIL handling from Cython.",
            "created_at": "2024-03-24T09:11:57Z",
            "html_url": "https://github.com/cython/cython/issues/6107#issuecomment-2016744128",
            "id": 2016744128,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6107",
            "node_id": "IC_kwDOABDGAc54NRLA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2016744128/reactions"
            },
            "updated_at": "2024-03-24T09:11:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2016744128",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6107/comments",
    "created_at": "2024-03-22T23:25:04Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-03-24T09:11:57Z",
            "event": "closed",
            "id": 12226152713,
            "node_id": "CE_lADOABDGAc6DVoJjzwAAAALYvEkJ",
            "performed_via_github_app": null,
            "state_reason": "not_planned",
            "url": "https://api.github.com/repos/cython/cython/issues/events/12226152713"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6107/events",
    "html_url": "https://github.com/cython/cython/issues/6107",
    "id": 2203484771,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6107/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6DVoJj",
    "number": 6107,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6107/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "state_reason": "not_planned",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6107/timeline",
    "title": "[BUG]  Deadlock in OpenMP Parallel Loop When Invoking LAPACK Functions in Cython>=3.0",
    "updated_at": "2024-03-24T09:11:57Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6107",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2945135?v=4",
        "events_url": "https://api.github.com/users/ameli/events{/privacy}",
        "followers_url": "https://api.github.com/users/ameli/followers",
        "following_url": "https://api.github.com/users/ameli/following{/other_user}",
        "gists_url": "https://api.github.com/users/ameli/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ameli",
        "id": 2945135,
        "login": "ameli",
        "node_id": "MDQ6VXNlcjI5NDUxMzU=",
        "organizations_url": "https://api.github.com/users/ameli/orgs",
        "received_events_url": "https://api.github.com/users/ameli/received_events",
        "repos_url": "https://api.github.com/users/ameli/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ameli/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ameli/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ameli"
    }
}