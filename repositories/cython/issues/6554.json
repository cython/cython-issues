{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nThe following code ought to provide an error (it's illegal for a C++ class to have a member and a method with the same name), but doesn't.\r\n\r\n```cython\r\n# distutils: language = c++\r\n# distutils: extra_compile_args = -std=c++11\r\ncdef extern from *:\r\n    \"\"\"\r\n    struct A {\r\n    public:\r\n        int a(){ return 1; }\r\n    };\r\n    \"\"\"\r\n    cppclass A:\r\n        A()\r\n        int a  # error goes undetected\r\n        int a()\r\n\r\ncdef A x = A()\r\nprint(x.a())\r\n```\r\n\r\nThe reason why I'm asking is because there's this SageMath bug https://github.com/sagemath/sage/pull/39092 which actually leads to Cython generates code that contains the literal string `<error>` (and thus is invalid code), although I haven't been able to find a small example that reproduce the issue yet.\r\n\r\n------\r\n\r\nActually, there are some convoluted cases where it actually works:\r\n\r\n```cython\r\n# distutils: language = c++\r\n# distutils: extra_compile_args = -std=c++11\r\ncdef extern from *:\r\n    r\"\"\"\r\n    using F = int(*)();\r\n    struct B{\r\n        operator int() const{return 1;}\r\n        operator F() const{return [](){return 2;};}\r\n    };\r\n    struct A {\r\n    public:\r\n        B a;\r\n    };\r\n    \"\"\"\r\n    cppclass A:\r\n        A()\r\n        int a\r\n        int a()\r\n\r\ncdef A x = A()\r\nprint(<int>x.a, x.a())\r\n```\r\n\r\nSo anyway, do you think it's reasonable to forbid member and function with the same name entirely?",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6554/comments",
    "created_at": "2024-12-09T09:06:55Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6554/events",
    "html_url": "https://github.com/cython/cython/issues/6554",
    "id": 2726430864,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6554/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6iggiQ",
    "number": 6554,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6554/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6554/timeline",
    "title": "[ENH] Report error on extern cppclass with member and method has the same name",
    "updated_at": "2024-12-09T09:37:11Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6554",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
        "events_url": "https://api.github.com/users/user202729/events{/privacy}",
        "followers_url": "https://api.github.com/users/user202729/followers",
        "following_url": "https://api.github.com/users/user202729/following{/other_user}",
        "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/user202729",
        "id": 25191436,
        "login": "user202729",
        "node_id": "MDQ6VXNlcjI1MTkxNDM2",
        "organizations_url": "https://api.github.com/users/user202729/orgs",
        "received_events_url": "https://api.github.com/users/user202729/received_events",
        "repos_url": "https://api.github.com/users/user202729/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/user202729",
        "user_view_type": "public"
    }
}