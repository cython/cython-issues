{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "In writing a test for #3737 I spent some time in the test suite and found more learning curve than I expected.\r\n\r\nA few suggestions (for which I'm willing to offer labor):\r\n\r\n1) Organize the tests (particularly tests/run) into subdirectories for discoverability, e.g.\r\n   - tests/run/includes/cpython  <- corresponding to Cython/Includes/cpython\r\n   - tests/run/builtins  <- corresponding to python keywords\r\n   - tests/run/options <- e.g. allows_allow_keywords_T295.pyx\r\n\r\n2) See if transitioning to use pytest instead of a custom script is viable \r\n\r\n3) Cleanup foo_bugs.txt (ToDo.txtfiles and make sure they all have have GH issues\r\n\r\n4) Cleanup other legacy files\r\n   - there's both docs/ and Doc/, looks like the latter may be subsumed by the former?\r\n   - scripts in the root directory may be redundant with scripts in the bin/ directory?  \r\n   - ~~appyveyor/ directory, but AFAICT cython doesnt use appveyor~~\r\n   - things like Cython/Parser/Grammar that are explicitly unused could go into a \"sandbox\" directory\r\n\r\n5) document what tests/broken/ is.  I'm assuming these are tests that are not passing.  Ideally use something like `pytest.mark.xfail`",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "> appyveyor/ directory, but AFAICT cython doesnt use appveyor\r\n\r\nCython does use Appveyor to test Cython+Windows (https://ci.appveyor.com/project/cython/cython). It isn't hugely integrated with Github currently which doesn't help with anyone knowing it's there.\r\n\r\n(I'm deliberately ignoring the main point here - I suspect there are definitely useful improvements to be made but I don't personally know what they should be)",
            "created_at": "2020-08-19T06:56:17Z",
            "html_url": "https://github.com/cython/cython/issues/3784#issuecomment-675889616",
            "id": 675889616,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3784",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTg4OTYxNg==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-19T06:56:17Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/675889616",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for bringing these up.\r\n\r\n> Organize the tests (particularly tests/run) into subdirectories\r\n\r\nCould be helpful, although we have tags for this purpose. We could also add an option to the test runner to list the tests matching a tag. Tagging tests seems better than trying to fit them into a single context.\r\n\r\n> See if transitioning to use pytest instead of a custom script is viable\r\n\r\nI already talked to a pytest dev about this a couple of years ago. The major problem here is that pytest has a test discovery phase and a test run phase, whereas for Cython's test modules have two test phases, it's module discovery, compilation test, module test discovery, module test. That's difficult to fit into existing test runners.\r\n\r\n> Cleanup foo_bugs.txt\r\n\r\nHelp is welcome. They can be selectively enabled in the test runner to see if/how they fail.\r\n\r\n> docs/ and Doc/\r\n\r\nThere's almost nothing left in `Doc`, but `docs` is processed by Sphinx. If we move the rest over, it needs to be excluded, which seems weird. Why move it into the same directory just to exclude it afterwards?\r\n\r\n> scripts in the root directory may be redundant with scripts in the bin/ directory\r\n\r\nTo some extent. Not sure if it's worth merging them. There's almost no code in them.\r\n\r\n> things like Cython/Parser/Grammar that are explicitly unused\r\n\r\n\"explicitly unused\" is a bit of a big word. You can use the grammar, it just won't work currently. :)\r\n\r\n> document what tests/broken/ is\r\n\r\nIt's the directory that we moved Pyrex tests into during the split if they made little sense in Cython's test runner. Pyrex' test suite was based on C file comparison, which was no longer feasible with the change rate in Cython's code base. Most of these tests just lack actual â€¦ tests. Still, it seems worth looking through them to see if our test suite is lacking something now. It quite probably is.",
            "created_at": "2020-08-21T11:55:14Z",
            "html_url": "https://github.com/cython/cython/issues/3784#issuecomment-678252769",
            "id": 678252769,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3784",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODI1Mjc2OQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-21T11:55:14Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/678252769",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> major problem here is that pytest has a test discovery phase and a test run phase, whereas for Cython's test modules have two test phases, it's module discovery, compilation test, module test discovery, module test. That's difficult to fit into existing test runners.\r\n\r\nA couple of recent numpy PRs made pytest fixtures that did cython compilation steps.  I'll take a look and see if that approach can be adapted for this use case.  If it can, is this something you'd be open to?\r\n\r\nEven if its feasible, the process of porting all of the tests either in a) one massive PR or b) incremental PRs could be a PITA.",
            "created_at": "2020-08-24T21:29:03Z",
            "html_url": "https://github.com/cython/cython/issues/3784#issuecomment-679376247",
            "id": 679376247,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3784",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTM3NjI0Nw==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-24T21:29:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/679376247",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
                "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
                "followers_url": "https://api.github.com/users/jbrockmendel/followers",
                "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
                "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jbrockmendel",
                "id": 8078968,
                "login": "jbrockmendel",
                "node_id": "MDQ6VXNlcjgwNzg5Njg=",
                "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
                "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
                "repos_url": "https://api.github.com/users/jbrockmendel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jbrockmendel"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Looking at setup.py, it looks like the apparently-duplicate bin/foo and foo.py scripts are related to platform support",
            "created_at": "2020-08-24T21:42:59Z",
            "html_url": "https://github.com/cython/cython/issues/3784#issuecomment-679381831",
            "id": 679381831,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3784",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTM4MTgzMQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-24T21:42:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/679381831",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
                "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
                "followers_url": "https://api.github.com/users/jbrockmendel/followers",
                "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
                "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jbrockmendel",
                "id": 8078968,
                "login": "jbrockmendel",
                "node_id": "MDQ6VXNlcjgwNzg5Njg=",
                "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
                "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
                "repos_url": "https://api.github.com/users/jbrockmendel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jbrockmendel"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> A couple of recent numpy PRs made pytest fixtures that did cython compilation steps. I'll take a look and see if that approach can be adapted for this use case. If it can, is this something you'd be open to?\r\n\r\nDepends. If the whole test discovery fails and aborts because one module cannot compile, then no, that's not acceptable. It would still need to report a failed compilation as some kind of single failure, but continue with all the rest (and then fail in the end). That's what I meant, the compilation itself is already a test in Cython, but needs to run before the module level test discovery (because without compilation, there is no module).\r\n\r\n> Even if its feasible, the process of porting all of the tests either in a) one massive PR or b) incremental PRs could be a PITA.\r\n\r\nDon't know. Depends on how it's done. pytest supports plugins, which might be a way to adapt the tool to the test suite, instead of vice-versa.",
            "created_at": "2020-08-25T16:41:41Z",
            "html_url": "https://github.com/cython/cython/issues/3784#issuecomment-680139864",
            "id": 680139864,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3784",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDEzOTg2NA==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-25T16:41:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/680139864",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3784/comments",
    "created_at": "2020-08-18T23:52:20Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3784/events",
    "html_url": "https://github.com/cython/cython/issues/3784",
    "id": 681422202,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3784/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2ODE0MjIyMDI=",
    "number": 3784,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[CLN] Modernize/Organize test suite",
    "updated_at": "2020-08-25T16:41:42Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3784",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
        "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
        "followers_url": "https://api.github.com/users/jbrockmendel/followers",
        "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
        "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jbrockmendel",
        "id": 8078968,
        "login": "jbrockmendel",
        "node_id": "MDQ6VXNlcjgwNzg5Njg=",
        "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
        "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
        "repos_url": "https://api.github.com/users/jbrockmendel/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jbrockmendel"
    }
}