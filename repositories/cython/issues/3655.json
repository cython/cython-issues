{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "When the `linetrace` [compiler directive](https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiler-directives) is turned on, Cython incorrectly fails to acquire the GIL sometimes. When a `cdef` function is called from Cython code, the Cython compiler refuses to let this happen by tracking `nogil` function declarations. However, when a `cdef` function is called from C, such as in a callback like in my example below, the `nogil` annotations are insufficient for tracking when the GIL is availableâ€”even when the `nogil` annotations are all statically correct.\r\n\r\nI include a small example that crashes with SIGABRT with both Cython 0.29.19 and 3.0a5. I don't think it matters in this particular case, but I'm using Python 3.7.7 on macOS 10.15.4. I've reproduced this on both `Apple clang version 11.0.3 (clang-1103.0.32.62) Target: x86_64-apple-darwin19.4.0` and `gcc-9 (Homebrew GCC 9.3.0_1) 9.3.0`.\r\n\r\n\r\nHere's the main example, `cytrace_test.pyx`:\r\n```cython\r\n# cython: language_level=3\r\n\r\nimport sys\r\nimport traceback\r\n\r\nfrom libc cimport stdlib\r\nfrom libc cimport stdio\r\n\r\ncdef extern from *:\r\n\tr\"\"\"\r\n\t\tint slow_calculation(int n) {return 42;}\r\n\t\tint (*fp)(int) = slow_calculation;\r\n\t\tvoid set_fp(int (*func)(int)) {fp = func;}\r\n\t\tint call_fp(int n) {return fp(n);}\r\n\t\"\"\"\r\n\tint slow_calculation(int n) nogil\r\n\tvoid set_fp(int (*func)(int))\r\n\tint call_fp(int n) nogil\r\n\r\ndef callback(int n) -> bool:\r\n\t\"\"\"This would actually be defined from pure Python code somewhere.\"\"\"\r\n\treturn False\r\n\r\ncdef bint check_callback(int n) with gil:\r\n\t\"\"\"Check callback(n), and handle Python exceptions from C land.\"\"\"\r\n\tif callback is None:\r\n\t\treturn True\r\n\ttry:\r\n\t\treturn callback(n)\r\n\texcept:\r\n\t\t# Can't report Python exception back to Python call stack from callback\r\n\t\t# executed on the machine/C call stack. Instead, print traceback and\r\n\t\t# abort.\r\n\t\tprint(file=sys.__stderr__)\r\n\t\ttraceback.print_exc(file=sys.__stderr__)\r\n\t\tsys.__stderr__.flush()\r\n\t\tstdlib.abort()\r\n\r\ncdef int slow_calculation_with_callback(int n):\r\n\t\"\"\"Get callback's permission before running slow_calculation()\"\"\"\r\n\tif check_callback(n):\r\n\t\treturn slow_calculation(n)\r\n\treturn -1\r\n\r\ndef test():\r\n\tset_fp(slow_calculation_with_callback)\r\n\twith nogil:\r\n\t\tresult = call_fp(10)\r\n\tassert result == -1\r\n```\r\n\r\nNotice that `slow_calculation_with_callback` does not interact with any Python code or objects that do not acquire the GIL for themselves as needed. In particular, `check_callback` is declared `with gil`, and `slow_calculation` is a native function. I could have declared `slow_calculation_with_callback` `nogil`, but didn't. The function that eventually calls `slow_calculation_with_callback` is `call_fp`, which is declared `nogil`.\r\n\r\nCompiling and running it with the following commands causes the error below. Replacing `linetrace=True` with `linetrace=False` causes the final command to run cleanly. (I've reformatted some of the compiler output for readability).\r\n\r\n```console\r\n$ python3 -m venv venv\r\n$ source venv/bin/activate\r\n$ pip install cython==0.29.19 # or 3.0a5 with --pre\r\n$ cythonize  --inplace -X linetrace=True cytrace_test.pyx && python -c'from cytrace_test import test; test()'\r\nCompiling $PWD/cytrace_test.pyx because it changed.\r\n[1/1] Cythonizing $PWD/cytrace_test.pyx\r\nrunning build_ext\r\nbuilding 'cytrace_test' extension\r\ncreating $PWD/tmp664qdbtc/Users\r\n...\r\ncreating $CYTMP\r\nclang -Wno-unused-result -Wsign-compare -Wunreachable-code -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall \\\r\n    -isysroot $XCodeCLT/SDKs/MacOSX10.15.sdk -I$XCodeCLT/SDKs/MacOSX10.15.sdk/usr/include -I$XCodeCLT/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers -I/usr/local/include -I/usr/local/opt/openssl@1.1/include -I/usr/local/opt/sqlite/include -I$PWD/venv/include -I/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/include/python3.7m \\\r\n    -c $PWD/cytrace_test.c -o  $CYTMP/cytrace_test.o\r\nclang -bundle -undefined dynamic_lookup $CYTMP/cytrace_test.o \\\r\n    -isysroot $XCodeCLT/SDKs/MacOSX10.15.sdk -L/usr/local/lib -L/usr/local/opt/openssl@1.1/lib -L/usr/local/opt/sqlite/lib \\\r\n    -o $PWD/cytrace_test.cpython-37m-darwin.so\r\nFatal Python error: PyThreadState_Get: no current thread\r\n\r\nCurrent thread 0x000000010ed44dc0 (most recent call first):\r\n  File \"<string>\", line 1 in <module>\r\n[1]    65058 abort      python -c'from cytrace_test import test; test()'\r\n```\r\n\r\n(The native traceback from macOS is at the end.)\r\n\r\n`slow_calculation_with_callback`'s call upon entry to [`__Pyx_TraceCall`](https://github.com/cython/cython/blob/a87f498d964f4b63a93aba79ed8c5f082fedaa4f/Cython/Utility/Profile.c#L59-L79) sets its penultimate argument, called `nogil` where it's `#define`d, to 0. Presumably this indicates that `slow_calculation_with_callback` was not declare `nogil`. Here's the snippet from the C file Cython produces from the Pyx file.\r\n\r\n```c\r\n/* \"cytrace_test.pyx\":39\r\n * \t\tstdlib.abort()\r\n * \r\n * cdef int slow_calculation_with_callback(int n):             # <<<<<<<<<<<<<<\r\n * \t\"\"\"Get callback's permission before running slow_calculation()\"\"\"\r\n * \tif check_callback(n):\r\n */\r\n\r\nstatic int __pyx_f_12cytrace_test_slow_calculation_with_callback(int __pyx_v_n) {\r\n  int __pyx_r;\r\n  __Pyx_TraceDeclarations\r\n  __Pyx_RefNannyDeclarations\r\n  int __pyx_t_1;\r\n  int __pyx_lineno = 0;\r\n  const char *__pyx_filename = NULL;\r\n  int __pyx_clineno = 0;\r\n  __Pyx_RefNannySetupContext(\"slow_calculation_with_callback\", 0);\r\n  __Pyx_TraceCall(\"slow_calculation_with_callback\", __pyx_f[0], 39, 0, __PYX_ERR(0, 39, __pyx_L1_error));\r\n/* `slow_calculation_with_callback` wasn't declared `nogil` --------^ */\r\n```\r\n\r\nPerhaps the fix is to change the semantics of that penultimate argument for `__Pyx_TraceCall`: instead of acquiring the GIL only in functions declared `nogil`, it should be acquired in any `cdef` function not declared `with gil`.\r\n\r\n\r\nAnd here's the native traceback from macOS:\r\n\r\n```gdb\r\nCrashed Thread:        0  Dispatch queue: com.apple.main-thread\r\n\r\nException Type:        EXC_CRASH (SIGABRT)\r\nException Codes:       0x0000000000000000, 0x0000000000000000\r\nException Note:        EXC_CORPSE_NOTIFY\r\n\r\nApplication Specific Information:\r\nabort() called\r\n\r\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\r\n0   libsystem_kernel.dylib        \t0x00007fff68d9533a __pthread_kill + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff68e51e60 pthread_kill + 430\r\n2   libsystem_c.dylib             \t0x00007fff68d1c808 abort + 120\r\n3   org.python.python             \t0x00000001061b4786 fatal_error + 543\r\n4   org.python.python             \t0x00000001061b4567 Py_FatalError + 19\r\n5   org.python.python             \t0x00000001061b5d8b PyThreadState_Get + 36\r\n6   cytrace_test.cpython-37m-darwin.so\t0x00000001065b8b65 __pyx_f_12cytrace_test_slow_calculation_with_callback + 53\r\n7   cytrace_test.cpython-37m-darwin.so\t0x00000001065b897b __pyx_pw_12cytrace_test_3test + 91\r\n8   org.python.python             \t0x0000000106100f2f _PyMethodDef_RawFastCallKeywords + 583\r\n9   org.python.python             \t0x000000010610045c _PyCFunction_FastCallKeywords + 41\r\n10  org.python.python             \t0x0000000106195a6c call_function + 628\r\n11  org.python.python             \t0x000000010618eae2 _PyEval_EvalFrameDefault + 6922\r\n12  org.python.python             \t0x00000001061962cd _PyEval_EvalCodeWithName + 1698\r\n13  org.python.python             \t0x000000010618cf35 PyEval_EvalCode + 51\r\n14  org.python.python             \t0x00000001061bb37c run_mod + 54\r\n15  org.python.python             \t0x00000001061ba4d9 PyRun_StringFlags + 120\r\n16  org.python.python             \t0x00000001061ba430 PyRun_SimpleStringFlags + 69\r\n17  org.python.python             \t0x00000001061d1c1e pymain_main + 3821\r\n18  org.python.python             \t0x00000001061d28e4 _Py_UnixMain + 56\r\n19  libdyld.dylib                 \t0x00007fff68c4dcc9 start + 1\r\n\r\nThread 0 crashed with X86 Thread State (64-bit):\r\n  rax: 0x0000000000000000  rbx: 0x000000010ed44dc0  rcx: 0x00007ffee9b1cf28  rdx: 0x0000000000000000\r\n  rdi: 0x0000000000000307  rsi: 0x0000000000000006  rbp: 0x00007ffee9b1cf50  rsp: 0x00007ffee9b1cf28\r\n   r8: 0x00000000000000a9   r9: 0x0000000000000062  r10: 0x000000010ed44dc0  r11: 0x0000000000000246\r\n  r12: 0x0000000000000307  r13: 0x00007fff8f8fb660  r14: 0x0000000000000006  r15: 0x0000000000000016\r\n  rip: 0x00007fff68d9533a  rfl: 0x0000000000000246  cr2: 0x0000000106456020\r\n  \r\nLogical CPU:     0\r\nError Code:      0x02000148\r\nTrap Number:     133\r\n```",
    "closed_at": "2020-06-03T09:36:44Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Basically, you have found a trick to call a function that is not declared as \"nogil\" from code that releases the GIL, by passing through an indirect C function pointer which Cython cannot see and thus cannot track as relevant to the call.\n\nSince there are also other ways to produce a crash from C, e.g. by calling through a null pointer, I do not consider this a bug in Cython.\n\nThe fix for your code is to declare the cdef function correctly as being called without the GIL.\n",
            "created_at": "2020-06-01T07:35:11Z",
            "html_url": "https://github.com/cython/cython/issues/3655#issuecomment-636667448",
            "id": 636667448,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3655",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjY2NzQ0OA==",
            "updated_at": "2020-06-01T07:35:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/636667448",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3655/comments",
    "created_at": "2020-05-31T19:37:32Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-06-03T09:36:41Z",
            "event": "labeled",
            "id": 3401309784,
            "label": {
                "color": "444444",
                "name": "R: wontfix"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDM0MDEzMDk3ODQ=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3401309784"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-06-03T09:36:44Z",
            "event": "closed",
            "id": 3401310007,
            "node_id": "MDExOkNsb3NlZEV2ZW50MzQwMTMxMDAwNw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3401310007"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3655/events",
    "html_url": "https://github.com/cython/cython/issues/3655",
    "id": 628028962,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425557400,
            "name": "R: wontfix",
            "node_id": "MDU6TGFiZWw0MjU1NTc0MDA=",
            "url": "https://api.github.com/repos/cython/cython/labels/R:%20wontfix"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3655/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2MjgwMjg5NjI=",
    "number": 3655,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Python crashes when Cython's linetrace fails to acquiring the GIL",
    "updated_at": "2020-06-03T09:36:44Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3655",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1417749?v=4",
        "events_url": "https://api.github.com/users/wkschwartz/events{/privacy}",
        "followers_url": "https://api.github.com/users/wkschwartz/followers",
        "following_url": "https://api.github.com/users/wkschwartz/following{/other_user}",
        "gists_url": "https://api.github.com/users/wkschwartz/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/wkschwartz",
        "id": 1417749,
        "login": "wkschwartz",
        "node_id": "MDQ6VXNlcjE0MTc3NDk=",
        "organizations_url": "https://api.github.com/users/wkschwartz/orgs",
        "received_events_url": "https://api.github.com/users/wkschwartz/received_events",
        "repos_url": "https://api.github.com/users/wkschwartz/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/wkschwartz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wkschwartz/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/wkschwartz"
    }
}