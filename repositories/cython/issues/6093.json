{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\n\nFloat literals in equality comparison operators in limited API mode trigger some unsupported code path. Oddly, the compile error comes extremely early, in the include of Python.h itself, which made me slightly suspect a potential error in CPython's own limited API support. However, other operators (e.g. inequality comparisons) do not trigger the error, and neither do integer comparisons, which makes me think that it's more likely that the cause is something Cython itself is doing to generate invalid code that somehow triggers this path. Unfortunately, I can't quite pin down what it is.\r\n\r\nI'll note that I also see different failure modes depending on whether I compile the Cython module as C or C++. When compiling in C++, I see this:\r\n```\r\n/home/coder/.conda/envs/rapids/bin/x86_64-conda-linux-gnu-cc -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /home/coder/.conda/envs/rapids/include -fPIC -O2 -isystem /home/coder/.conda/envs/rapids/include -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/coder/.conda/envs/rapids/include -I/home/coder/.conda/envs/rapids/targets/x86_64-linux/include -L/home/coder/.conda/envs/rapids/targets/x86_64-linux/lib -L/home/coder/.conda/envs/rapids/targets/x86_64-linux/lib/stubs -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/coder/.conda/envs/rapids/include -I/home/coder/.conda/envs/rapids/targets/x86_64-linux/include -L/home/coder/.conda/envs/rapids/targets/x86_64-linux/lib -L/home/coder/.conda/envs/rapids/targets/x86_64-linux/lib/stubs -fPIC -DPy_LIMITED_API=0x030B0000 -DCYTHON_LIMITED_API -I/home/coder/.conda/envs/rapids/include/python3.11 -c test.cpp -o build/temp.linux-x86_64-cpython-311/test.o\r\nIn file included from /home/coder/.conda/envs/rapids/include/python3.11/Python.h:55,\r\n                 from test.cpp:41:\r\n/home/coder/.conda/envs/rapids/include/python3.11/floatobject.h: In function 'PyObject* __Pyx_PyFloat_EqObjC(PyObject*, PyObject*, double, int, int)':\r\n/home/coder/.conda/envs/rapids/include/python3.11/floatobject.h:14:26: error: 'PyFloat_Type' has incomplete type\r\n   14 | PyAPI_DATA(PyTypeObject) PyFloat_Type;\r\n      |                          ^~~~~~~~~~~~\r\nIn file included from /home/coder/.conda/envs/rapids/include/python3.11/Python.h:42,\r\n                 from test.cpp:41:\r\n/home/coder/.conda/envs/rapids/include/python3.11/pytypedefs.h:20:16: note: forward declaration of 'PyTypeObject' {aka 'struct _typeobject'}\r\n   20 | typedef struct _typeobject PyTypeObject;\r\n```\r\n\r\nWhen compiling in C, I instead see this:\r\n```\r\n/home/coder/.conda/envs/rapids/bin/x86_64-conda-linux-gnu-cc -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /home/coder/.conda/envs/rapids/include -fPIC -O2 -isystem /home/coder/.conda/envs/rapids/include -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/coder/.conda/envs/rapids/include -I/home/coder/.conda/envs/rapids/targets/x86_64-linux/include -L/home/coder/.conda/envs/rapids/targets/x86_64-linux/lib -L/home/coder/.conda/envs/rapids/targets/x86_64-linux/lib/stubs -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/coder/.conda/envs/rapids/include -I/home/coder/.conda/envs/rapids/targets/x86_64-linux/include -L/home/coder/.conda/envs/rapids/targets/x86_64-linux/lib -L/home/coder/.conda/envs/rapids/targets/x86_64-linux/lib/stubs -fPIC -DPy_LIMITED_API=0x030B0000 -DCYTHON_LIMITED_API -I/home/coder/.conda/envs/rapids/include/python3.11 -c test.c -o build/temp.linux-x86_64-cpython-311/test.o\r\ntest.c: In function '__Pyx_PyFloat_EqObjC':\r\ntest.c:6745:37: error: invalid use of incomplete typedef 'PyTypeObject' {aka 'struct _typeobject'}\r\n 6745 |                         PyFloat_Type.tp_richcompare(op2, op1, Py_EQ));\r\n```\n\n### Code to reproduce the behaviour:\n\n```cython\r\n# test.pyx\r\nx = 1\r\n# x = 1.0  # This is also fine\r\n\r\nx == 1.0  # This will raise an error regardless of which line is used above\r\n# x < 1.0  # This will not raise an error\r\n# x == 1  # This will not raise an error\r\n\r\n# setup.py\r\nfrom setuptools import Extension, setup\r\nfrom Cython.Build import cythonize\r\n\r\nextensions = [\r\n    Extension(\r\n        \"test\", [\"test.pyx\"],\r\n        define_macros=[(\"Py_LIMITED_API\", \"0x030B0000\"), (\"CYTHON_LIMITED_API\", None)],\r\n        language=\"c++\",  # This changes the error\r\n    )\r\n]\r\n\r\nsetup(\r\n    name='test',\r\n    ext_modules=cythonize(extensions),\r\n)\r\n```\n\n### Expected behaviour\n\nThis code should compile\n\n### OS\n\nLinux\n\n### Python version\n\n3.11.8\n\n### Cython version\n\nMerge of #6061 and the limited API branch from #6082\n\n### Additional context\n\nThere is also a separate limited API issue with `PyList_GET_ITEM` that I observe in the above MWE, but I've fixed that in #6061.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "The upshot is that we can't use `PyFloat_Type` because it's opaque. The C compiler knows that it exists but doesn't know what's in it.\r\n\r\n`__Pyx_PyFloat_EqObjC` (and related functions) are largely just optimisations. As a fallback they could just be replaced with the standard PyObject comparison in the limited API.\r\n\r\nI suspect in case we could use `__Pyx_PyType_GetSlot` on `PyFloat_Type`. This should end up equivalent to the current code normally, and something slightly less efficient but valid in the limited API.",
            "created_at": "2024-03-17T18:17:04Z",
            "html_url": "https://github.com/cython/cython/issues/6093#issuecomment-2002563389",
            "id": 2002563389,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6093",
            "node_id": "IC_kwDOABDGAc53XLE9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2002563389/reactions"
            },
            "updated_at": "2024-03-17T18:17:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2002563389",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I figured out the opaque struct bit, what I was having trouble understanding is what code gen cython is doing to produce the invalid code. The error is coming up right after the limited api macros are defined and python.h is included, so almost none of the cython generated code has been hit. How is what cython doing triggering this error from just the include of python.h?",
            "created_at": "2024-03-17T20:13:57Z",
            "html_url": "https://github.com/cython/cython/issues/6093#issuecomment-2002603024",
            "id": 2002603024,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6093",
            "node_id": "IC_kwDOABDGAc53XUwQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2002603024/reactions"
            },
            "updated_at": "2024-03-17T20:13:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2002603024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The error is the line\r\n\r\n```\r\nPyFloat_Type.tp_richcompare(op2, op1, Py_EQ));\r\n```\r\n\r\nAll the other messages are just telling you that `PyFloat_Type` is an incomplete type and is defined in \"Python.h\". They're informational.",
            "created_at": "2024-03-17T22:46:12Z",
            "html_url": "https://github.com/cython/cython/issues/6093#issuecomment-2002643841",
            "id": 2002643841,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6093",
            "node_id": "IC_kwDOABDGAc53XeuB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2002643841/reactions"
            },
            "updated_at": "2024-03-17T22:46:12Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2002643841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ah right I didn't look at the C traceback nearly closely enough, sorry about that. Any idea why the issue is so obscured in the C++ traceback? I do see the\r\n```\r\n/home/coder/.conda/envs/rapids/include/python3.11/floatobject.h: In function 'PyObject* __Pyx_PyFloat_EqObjC(PyObject*, PyObject*, double, int, int)':\r\n```\r\nwhich is the function you mentioned as being an optimization, but I don't see the equivalent obvious error line indicating _where_ the incomplete type is being used. Apologies if this is obvious to see, I suspect that I'm having trouble tracing because I'm not accustomed to using macros nearly to the extent used in the Cython/CPython code bases and they make tracebacks harder to follow. ",
            "created_at": "2024-03-17T23:39:32Z",
            "html_url": "https://github.com/cython/cython/issues/6093#issuecomment-2002660776",
            "id": 2002660776,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6093",
            "node_id": "IC_kwDOABDGAc53Xi2o",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2002660776/reactions"
            },
            "updated_at": "2024-03-17T23:39:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2002660776",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm going off the C traceback instead. I think they're expressing the same issue in slightly different ways. I can't actually see the relevant line in the C++ traceback you've posted.",
            "created_at": "2024-03-18T06:28:14Z",
            "html_url": "https://github.com/cython/cython/issues/6093#issuecomment-2003019894",
            "id": 2003019894,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6093",
            "node_id": "IC_kwDOABDGAc53Y6h2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2003019894/reactions"
            },
            "updated_at": "2024-03-18T06:28:14Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2003019894",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6093/comments",
    "created_at": "2024-03-17T17:25:37Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6093/events",
    "html_url": "https://github.com/cython/cython/issues/6093",
    "id": 2190774012,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6093/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6ClI78",
    "number": 6093,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6093/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6093/timeline",
    "title": "[BUG] Bug with limited API support in trivial program involving float literal",
    "updated_at": "2024-03-18T06:28:15Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6093",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vyasr",
        "id": 1538165,
        "login": "vyasr",
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vyasr"
    }
}