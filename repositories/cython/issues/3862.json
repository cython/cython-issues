{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!--\r\n**Note:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report. Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n**Describe the bug**\r\nWhen using the `cython` CLI to compile a `.pyx` file in another directory, `.pxd` and `__init__.py` files for relative a `cimport` are looked up in the directory containing the `.pyx`, rather than the `--working` directory.\r\n\r\n**To Reproduce**\r\nCode to reproduce the behaviour:\r\n\r\nIn `test.pyx`:\r\n```cython\r\nfrom . cimport other\r\n\r\ndef test():\r\n    other.puts(\"hello, world!\")\r\n```\r\n\r\nIn `other.pxd`:\r\n```cython\r\ncdef extern from \"stdio.h\":\r\n    int puts(const char *)\r\n```\r\n\r\nAnd create an empty `__init__.py`:\r\n```console\r\ntouch __init__.py\r\n```\r\n\r\nFrom this directory, `cython test.pyx` works as expected and produces a `test.c`.\r\n\r\nBut, if you `mv test.pyx /tmp` and then instead run:\r\n```\r\ncython --working $PWD /tmp/test.pyx\r\n```\r\nyou get an error:\r\n```\r\nfrom . cimport other\r\n^\r\n------------------------------------------------------------\r\n\r\n/tmp/test.pyx:1:0: relative cimport beyond main package is not allowed\r\n```\r\n\r\n**Expected behavior**\r\nI'm not exactly sure whether this is a bug or not.  I'm using an editor plugin that wants to automatically compile Cython code to lint it and find errors.  It does this by copying the not-yet-saved file from the editor into a temporary directory, and then using `--working` to point it at the rest of the code.  This fails for anything that's using relative imports, though, because Cython searches for the relative cimports relative to the `.pyx` file it's compiling, rather than relative to the `--working` directory that it was given, and I don't see any switches to change that behavior.\r\n\r\nShould this work?  If not, is there another way to compile a `.pyx` file and pretend it came from a different directory?\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Linux\r\n - Python version: 3.8.6\r\n - Cython version: 0.29.21\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks for the report. I do not think what you propose is how it should work. The working directory is where Cython puts its generated code, not where it looks for source files.\r\n\r\nI see two related things, but they probably won't help you either. One is the use of [namespace packages](https://packaging.python.org/guides/packaging-namespace-packages/), which Cython (3?) supports now. The other is making sure that the current work directory is at least on the Python package search path, so that `.pxd` files can be looked up there. But that won't help with relative imports.\r\n\r\nBasically, the question is whether the expectation of that plugin is correct for `.py` files in Python, and I think the answer is No. Then it's correct for the answer in Cython to also be No.",
            "created_at": "2020-10-06T06:20:32Z",
            "html_url": "https://github.com/cython/cython/issues/3862#issuecomment-704055947",
            "id": 704055947,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3862",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDA1NTk0Nw==",
            "performed_via_github_app": null,
            "updated_at": "2020-10-06T06:20:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/704055947",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Perhaps an alternative would be for `cython` to support taking the code to transpile from stdin rather than a file on disk, and locating other files relative to it based on the working directory? That essentially is how Python would locate modules if you ran `echo import foo | python`, though admittedly that's not a perfect comparison because that wouldn't support relative imports - for those you'd need to use `python -m`.\r\n\r\nBut perhaps reading from stdin would let the plugin avoid the temp file, and directory, entirely.",
            "created_at": "2020-10-06T07:16:06Z",
            "html_url": "https://github.com/cython/cython/issues/3862#issuecomment-704080703",
            "id": 704080703,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3862",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDA4MDcwMw==",
            "performed_via_github_app": null,
            "updated_at": "2020-10-06T07:17:18Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/704080703",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Why couldn't the plugin create a temp file in the source directory? Like many editors do?",
            "created_at": "2020-10-06T07:18:59Z",
            "html_url": "https://github.com/cython/cython/issues/3862#issuecomment-704082019",
            "id": 704082019,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3862",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDA4MjAxOQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-10-06T07:18:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/704082019",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Since I'm not the author I'd be guessing at the motivations, but my best guess is that by using `$TMPDIR` it's likely to get cleaned up eventually even if the process crashes, and not risk leaving something around in the user's working copy that tools might pick up and get confused by.\r\n\r\nSimilar linters for gcc, for example, do pipe the code on stdin to avoid the need for a temp file, which seems reasonable to me as it should be both faster and more reliable.",
            "created_at": "2020-10-06T07:23:33Z",
            "html_url": "https://github.com/cython/cython/issues/3862#issuecomment-704084035",
            "id": 704084035,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3862",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDA4NDAzNQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-10-06T07:23:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/704084035",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            }
        },
        {
            "author_association": "NONE",
            "body": "> The working directory is where Cython puts its generated code, not where it looks for source files.\r\n\r\nThis seems pretty definitive in favor of saying this isn't a bug, and we're in feature request territory.\r\n\r\nI suppose just reading from stdin isn't enough for the feature I need... You need the ability not just to get the contents of the .pyx file, but also to locate other files relative to it, and using `$PWD` for that may also be unexpected. Maybe the feature I'm looking for is to compile a given file as though it's in some given directory, like I assumed `--working` did.",
            "created_at": "2020-10-06T07:37:51Z",
            "html_url": "https://github.com/cython/cython/issues/3862#issuecomment-704090479",
            "id": 704090479,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3862",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDA5MDQ3OQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-10-06T07:37:51Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/704090479",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3862/comments",
    "created_at": "2020-10-06T05:59:14Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3862/events",
    "html_url": "https://github.com/cython/cython/issues/3862",
    "id": 715365481,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3862/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU3MTUzNjU0ODE=",
    "number": 3862,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[BUG] `cython --working` isn't used for relative cimports",
    "updated_at": "2020-10-06T07:37:52Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3862",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
        "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
        "followers_url": "https://api.github.com/users/godlygeek/followers",
        "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
        "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/godlygeek",
        "id": 29423,
        "login": "godlygeek",
        "node_id": "MDQ6VXNlcjI5NDIz",
        "organizations_url": "https://api.github.com/users/godlygeek/orgs",
        "received_events_url": "https://api.github.com/users/godlygeek/received_events",
        "repos_url": "https://api.github.com/users/godlygeek/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/godlygeek"
    }
}