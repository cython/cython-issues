{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Configuration\r\n- Cython 0.29.14\r\n- Systems with `multiprocessing.get_start_method() == 'spawn'`:\r\n  - generally affects Windows,\r\n  - since Python 3.8 also macOS with `multiprocessing`'s new default behavior (ref: https://github.com/python/cpython/pull/13603).\r\n\r\n\r\n### Observed behavior\r\n\r\nWhen\r\n- `Cython.Build.cythonize(..., nthreads=1)` is called\r\n- from a typical `setup.py` script\r\n- that does not guard its execution with the `if __name__ == '__main__'` idiom\r\n- and `multiprocessing`'s start method is set to `\"spawn\"`,\r\n\r\nthen\r\n- starting a new process will run the initial code again up until the next `cythonize`/[`multiprocessing.Pool` call](https://github.com/cython/cython/blob/0.29.14/Cython/Build/Dependencies.py#L1072),\r\n- which will then repeatedly fail with a\r\n  ```\r\n  RuntimeError:\r\n          An attempt has been made to start a new process before the\r\n          current process has finished its bootstrapping phase.\r\n\r\n          This probably means that you are not using fork to start your\r\n          child processes and you have forgotten to use the proper idiom\r\n          in the main module:\r\n\r\n              if __name__ == '__main__':\r\n                  freeze_support()\r\n                  ...\r\n\r\n          The \"freeze_support()\" line can be omitted if the program\r\n          is not going to be frozen to produce an executable.\r\n  ```\r\n- *practically* ad infinitum due to [`result.get(99999)`](https://github.com/cython/cython/blob/0.29.14/Cython/Build/Dependencies.py#L1087).\r\n\r\n\r\n### Small equivalent reproducer\r\n\r\n<details>\r\n\r\n```\r\n$ cat test.py \r\nimport sys\r\nimport multiprocessing\r\nif sys.argv[1] != 'guard' or __name__ == '__main__':\r\n    multiprocessing.set_start_method(sys.argv[2], force=True)\r\n    with multiprocessing.Pool(1) as pool:\r\n        pool.map_async(id, [0], chunksize=1).get(float(sys.argv[3]))\r\n$ python test.py guard fork 1\r\n$ python test.py no-guard fork 1\r\n$ python test.py guard spawn 1\r\n$ python test.py no-guard spawn 1\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 105, in spawn_main\r\n    exitcode = _main(fd)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 114, in _main\r\n    prepare(preparation_data)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 225, in prepare\r\n    _fixup_main_from_path(data['init_main_from_path'])\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 277, in _fixup_main_from_path\r\n    run_name=\"__mp_main__\")\r\n  File \"/opt/conda/lib/python3.7/runpy.py\", line 263, in run_path\r\n    pkg_name=pkg_name, script_name=fname)\r\n  File \"/opt/conda/lib/python3.7/runpy.py\", line 96, in _run_module_code\r\n    mod_name, mod_spec, pkg_name, script_name)\r\n  File \"/opt/conda/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/conda/z/test.py\", line 5, in <module>\r\n    with multiprocessing.Pool(1) as pool:\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/context.py\", line 119, in Pool\r\n    context=self.get_context())\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/pool.py\", line 176, in __init__\r\n    self._repopulate_pool()\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/pool.py\", line 241, in _repopulate_pool\r\n    w.start()\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/process.py\", line 112, in start\r\n    self._popen = self._Popen(self)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/context.py\", line 284, in _Popen\r\n    return Popen(process_obj)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/popen_spawn_posix.py\", line 32, in __init__\r\n    super().__init__(process_obj)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/popen_fork.py\", line 20, in __init__\r\n    self._launch(process_obj)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/popen_spawn_posix.py\", line 42, in _launch\r\n    prep_data = spawn.get_preparation_data(process_obj._name)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 143, in get_preparation_data\r\n    _check_not_importing_main()\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 136, in _check_not_importing_main\r\n    is not going to be frozen to produce an executable.''')\r\nRuntimeError: \r\n        An attempt has been made to start a new process before the\r\n        current process has finished its bootstrapping phase.\r\n\r\n        This probably means that you are not using fork to start your\r\n        child processes and you have forgotten to use the proper idiom\r\n        in the main module:\r\n\r\n            if __name__ == '__main__':\r\n                freeze_support()\r\n                ...\r\n\r\n        The \"freeze_support()\" line can be omitted if the program\r\n        is not going to be frozen to produce an executable.\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 105, in spawn_main\r\n    exitcode = _main(fd)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 114, in _main\r\n    prepare(preparation_data)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 225, in prepare\r\n    _fixup_main_from_path(data['init_main_from_path'])\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 277, in _fixup_main_from_path\r\n    run_name=\"__mp_main__\")\r\n  File \"/opt/conda/lib/python3.7/runpy.py\", line 263, in run_path\r\n    pkg_name=pkg_name, script_name=fname)\r\n  File \"/opt/conda/lib/python3.7/runpy.py\", line 96, in _run_module_code\r\n    mod_name, mod_spec, pkg_name, script_name)\r\n  File \"/opt/conda/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/conda/z/test.py\", line 5, in <module>\r\n    with multiprocessing.Pool(1) as pool:\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/context.py\", line 119, in Pool\r\n    context=self.get_context())\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/pool.py\", line 176, in __init__\r\n    self._repopulate_pool()\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/pool.py\", line 241, in _repopulate_pool\r\n    w.start()\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/process.py\", line 112, in start\r\n    self._popen = self._Popen(self)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/context.py\", line 284, in _Popen\r\n    return Popen(process_obj)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/popen_spawn_posix.py\", line 32, in __init__\r\n    super().__init__(process_obj)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/popen_fork.py\", line 20, in __init__\r\n    self._launch(process_obj)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/popen_spawn_posix.py\", line 42, in _launch\r\n    prep_data = spawn.get_preparation_data(process_obj._name)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 143, in get_preparation_data\r\n    _check_not_importing_main()\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 136, in _check_not_importing_main\r\n    is not going to be frozen to produce an executable.''')\r\nRuntimeError: \r\n        An attempt has been made to start a new process before the\r\n        current process has finished its bootstrapping phase.\r\n\r\n        This probably means that you are not using fork to start your\r\n        child processes and you have forgotten to use the proper idiom\r\n        in the main module:\r\n\r\n            if __name__ == '__main__':\r\n                freeze_support()\r\n                ...\r\n\r\n        The \"freeze_support()\" line can be omitted if the program\r\n        is not going to be frozen to produce an executable.\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 105, in spawn_main\r\n    exitcode = _main(fd)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 114, in _main\r\n    prepare(preparation_data)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 225, in prepare\r\n    _fixup_main_from_path(data['init_main_from_path'])\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 277, in _fixup_main_from_path\r\n    run_name=\"__mp_main__\")\r\n  File \"/opt/conda/lib/python3.7/runpy.py\", line 263, in run_path\r\n    pkg_name=pkg_name, script_name=fname)\r\n  File \"/opt/conda/lib/python3.7/runpy.py\", line 96, in _run_module_code\r\n    mod_name, mod_spec, pkg_name, script_name)\r\n  File \"/opt/conda/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/conda/z/test.py\", line 5, in <module>\r\n    with multiprocessing.Pool(1) as pool:\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/context.py\", line 119, in Pool\r\n    context=self.get_context())\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/pool.py\", line 176, in __init__\r\n    self._repopulate_pool()\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/pool.py\", line 241, in _repopulate_pool\r\n    w.start()\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/process.py\", line 112, in start\r\n    self._popen = self._Popen(self)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/context.py\", line 284, in _Popen\r\n    return Popen(process_obj)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/popen_spawn_posix.py\", line 32, in __init__\r\n    super().__init__(process_obj)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/popen_fork.py\", line 20, in __init__\r\n    self._launch(process_obj)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/popen_spawn_posix.py\", line 42, in _launch\r\n    prep_data = spawn.get_preparation_data(process_obj._name)\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 143, in get_preparation_data\r\n    _check_not_importing_main()\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/spawn.py\", line 136, in _check_not_importing_main\r\n    is not going to be frozen to produce an executable.''')\r\nRuntimeError: \r\n        An attempt has been made to start a new process before the\r\n        current process has finished its bootstrapping phase.\r\n\r\n        This probably means that you are not using fork to start your\r\n        child processes and you have forgotten to use the proper idiom\r\n        in the main module:\r\n\r\n            if __name__ == '__main__':\r\n                freeze_support()\r\n                ...\r\n\r\n        The \"freeze_support()\" line can be omitted if the program\r\n        is not going to be frozen to produce an executable.\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 6, in <module>\r\n    pool.map_async(id, [0], chunksize=1).get(float(sys.argv[3]))\r\n  File \"/opt/conda/lib/python3.7/multiprocessing/pool.py\", line 653, in get\r\n    raise TimeoutError\r\nmultiprocessing.context.TimeoutError\r\n```\r\n</details>\r\n\r\n### Possible solutions/workarounds:\r\n\r\n1. Disable parallel processing if `multiprocessing.get_start_method() == 'spawn'` and display a warning.\r\n2. Raise an error if `nthreads and multiprocessing.get_start_method() == 'spawn'`.\r\n3. Try launching a process and only if that not works, disable parallel processing, e.g.:\r\n   ```\r\n   if nthreads and multiprocessing.get_start_method() == 'spawn':\r\n       p = multiprocessing.Process(target=sys.exit, args=(0,))\r\n       p.start()\r\n       p.join(1)\r\n       if p.exitcode != 0:\r\n           print('Some warning', file=sys.stderr)\r\n           nthreads = 0\r\n   ```\r\n4. Forcefully set `multiprocessing.set_start_method('fork', force=True)`.\r\n\r\nCaveats:\r\nre. 1.: If a script/module properly guards execution with `if __name__ == '__main__':`, there wouldn't be a need to disable multiprocessing. Many (/most?) `setup.py` don't, though.\r\nre. 2.: Cython already [only warns and continues with serial processing](https://github.com/cython/cython/blob/0.29.14/Cython/Build/Dependencies.py#L1075-L1076) if `nthreads` is non-zero but `multiprocessing` isn't available. So raising a error seems inconsequential.\r\nre. 3.: If a script, e.g., `setup.py`, already does some persistent changes (e.g., adding release information to files), those would be executed again, which is most likely undesired behavior.\r\nre. 4.: Won't work on Windows. And it might be unexpected/undesired by the user to change this.\r\n\r\nI favor approach 1 as it is the \"least breaking\" change. \"Least breaking\" in the sense that scipts with `nthreads` that work with macOS and Python up 3.7 would continue to work, albeit serially instead of parallely processed.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "this is still an issue with python 3.10.4 and 3.11.1 and 3.11.4 (tested as had virtual envs ready) with Mac on 13.5.1 (22G90)",
            "created_at": "2023-09-06T15:22:02Z",
            "html_url": "https://github.com/cython/cython/issues/3262#issuecomment-1708592951",
            "id": 1708592951,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3262",
            "node_id": "IC_kwDOABDGAc5l1w83",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1708592951/reactions"
            },
            "updated_at": "2023-09-06T15:22:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1708592951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/26039401?v=4",
                "events_url": "https://api.github.com/users/Tomasz-Kluczkowski/events{/privacy}",
                "followers_url": "https://api.github.com/users/Tomasz-Kluczkowski/followers",
                "following_url": "https://api.github.com/users/Tomasz-Kluczkowski/following{/other_user}",
                "gists_url": "https://api.github.com/users/Tomasz-Kluczkowski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Tomasz-Kluczkowski",
                "id": 26039401,
                "login": "Tomasz-Kluczkowski",
                "node_id": "MDQ6VXNlcjI2MDM5NDAx",
                "organizations_url": "https://api.github.com/users/Tomasz-Kluczkowski/orgs",
                "received_events_url": "https://api.github.com/users/Tomasz-Kluczkowski/received_events",
                "repos_url": "https://api.github.com/users/Tomasz-Kluczkowski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Tomasz-Kluczkowski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Tomasz-Kluczkowski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Tomasz-Kluczkowski"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3262/comments",
    "created_at": "2019-12-06T17:08:40Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/22327599?v=4",
                "events_url": "https://api.github.com/users/j-luo93/events{/privacy}",
                "followers_url": "https://api.github.com/users/j-luo93/followers",
                "following_url": "https://api.github.com/users/j-luo93/following{/other_user}",
                "gists_url": "https://api.github.com/users/j-luo93/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/j-luo93",
                "id": 22327599,
                "login": "j-luo93",
                "node_id": "MDQ6VXNlcjIyMzI3NTk5",
                "organizations_url": "https://api.github.com/users/j-luo93/orgs",
                "received_events_url": "https://api.github.com/users/j-luo93/received_events",
                "repos_url": "https://api.github.com/users/j-luo93/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/j-luo93/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/j-luo93/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/j-luo93"
            },
            "commit_id": "5092db37bd12ed01db909da919f54027fb006c40",
            "commit_url": "https://api.github.com/repos/djwyen/sound-law-benchmark/commits/5092db37bd12ed01db909da919f54027fb006c40",
            "created_at": "2020-11-06T02:30:48Z",
            "event": "referenced",
            "id": 3965231073,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5NjUyMzEwNzM=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3965231073"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2550285?v=4",
                "events_url": "https://api.github.com/users/samster25/events{/privacy}",
                "followers_url": "https://api.github.com/users/samster25/followers",
                "following_url": "https://api.github.com/users/samster25/following{/other_user}",
                "gists_url": "https://api.github.com/users/samster25/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/samster25",
                "id": 2550285,
                "login": "samster25",
                "node_id": "MDQ6VXNlcjI1NTAyODU=",
                "organizations_url": "https://api.github.com/users/samster25/orgs",
                "received_events_url": "https://api.github.com/users/samster25/received_events",
                "repos_url": "https://api.github.com/users/samster25/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/samster25/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/samster25/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/samster25"
            },
            "commit_id": "61081b9f245a6a318729bbfa6971164419cbb903",
            "commit_url": "https://api.github.com/repos/Eventual-Inc/Daft/commits/61081b9f245a6a318729bbfa6971164419cbb903",
            "created_at": "2022-09-22T06:55:18Z",
            "event": "referenced",
            "id": 7436623770,
            "node_id": "REFE_lADOABDGAc4f1nohzwAAAAG7Qd-a",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/7436623770"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3262/events",
    "html_url": "https://github.com/cython/cython/issues/3262",
    "id": 534149665,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3262/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1MzQxNDk2NjU=",
    "number": 3262,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/cython/cython/issues/3262/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/3262/timeline",
    "title": "Handle cythonize(..., nthreads=1) for \"spawn\" start method",
    "updated_at": "2023-09-06T15:22:03Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3262",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10598343?v=4",
        "events_url": "https://api.github.com/users/mbargull/events{/privacy}",
        "followers_url": "https://api.github.com/users/mbargull/followers",
        "following_url": "https://api.github.com/users/mbargull/following{/other_user}",
        "gists_url": "https://api.github.com/users/mbargull/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mbargull",
        "id": 10598343,
        "login": "mbargull",
        "node_id": "MDQ6VXNlcjEwNTk4MzQz",
        "organizations_url": "https://api.github.com/users/mbargull/orgs",
        "received_events_url": "https://api.github.com/users/mbargull/received_events",
        "repos_url": "https://api.github.com/users/mbargull/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mbargull/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mbargull/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mbargull"
    }
}