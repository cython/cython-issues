{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Is your feature request related to a problem? Please describe.\n\nFor testing/debugging purposes, I would like to use `mallopt(M_PERTURB, val)` to pad uninitialized memory. \n\nFor example:\n```python\n>>> print (\"uninitialized float64: \", np.empty(2000, dtype=np.float64))\n [1.13314479e-310 1.95892839e-316 1.95892839e-316 ... -1.70447453e+289 0.00000000e+000 0.00000000e+000]\n>>> my_mperturb(256)\n>>> print (\"uninitialized float64: \", np.empty(2000, dtype=np.float64))\nuninitialized float64:  [nan nan nan ... nan nan nan]\n# I need this big size=2000, otherwise numpy seems to recycle and skips the allocation\n```\n\nWith the function `my_mpertub` defined in a .pyx file:\n```cython\ncimport libc.malloc as cmalloc\ncpdef my_mperturb(int value):\n    \"\"\"Set MALLOC_PERTURB_ to pad uninitialized memory.\n\n    Interesting values:\n    - 0:  disabled, no padding\n    - 255: integers=0, floats=0., pointers=0\n    - 256: integers=-1, floats=nan, pointers=0xffffffffffffffff\n    - 128: integers=huge, floats=huge, pointers=0x7f7f7f7f7f7f7f7f\n    - 127: integers=huge(negative), floats=tiny, pointers=0x8080808080808080\n    \"\"\"\n    cmalloc.mallopt(cmalloc.M_PERTURB, value)\n```\n\n\n### Describe the solution you'd like.\n\nSimply adding this .pxd file as `Cython/Includes/libc/malloc.pxd` is sufficient for my needs:\n```cython\ncdef extern from \"<malloc.h>\":\n    const int M_PERTURB\n    int mallopt (int param, int value)\n```\n\nDo you think this is a reasonable addition to `Cython/Includes/libc`?\n\nThe implementation of `my_mpertub` could also be included, although I don't know where it'd fit in Cython's source tree.\n\n### Describe alternatives you've considered.\n\nThe function can also be implemented using `ctypes` directly:\n```python\n>>> from ctypes import cdll\n>>> libc = cdll.LoadLibrary(\"libc.so.6\")\n>>> M_PERTURB = -6   # taken in malloc.h\n>>> libc.mallopt(M_PERTURB, 256)\n1\n>>> import numpy as np\n>>> print (\"uninitialized float64: \", np.empty(2000, dtype=np.float64)[0])\nuninitialized float64:  nan\n```\n\n### Additional context\n\n_No response_",
    "closed_at": "2025-02-27T19:18:33Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "My view is that Cython probably shouldn't add this:\n\n* It isn't part of the C standard library - it's an GNU implementation detail\n* Cython not wrapping it doesn't stop you from using it - the files in the Cython/Includes directory don't do anything you can't do yourself. You just need to add\n    ```\n    cdef extern from \"<malloc.h>\":\n        const int M_PERTURB\n        int mallopt (int param, int value)\n    ```\n    to your own pyx file.\n\nI'd rather just keep the Cython includes to the actual standard libraries and not try to wrap every C header that a user might want.",
            "created_at": "2025-02-27T19:18:33Z",
            "html_url": "https://github.com/cython/cython/issues/6696#issuecomment-2688888133",
            "id": 2688888133,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6696",
            "node_id": "IC_kwDOABDGAc6gRS1F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2688888133/reactions"
            },
            "updated_at": "2025-02-27T19:18:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2688888133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6696/comments",
    "created_at": "2025-02-27T13:47:21Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-02-27T19:18:33Z",
            "event": "closed",
            "id": 16502013817,
            "node_id": "CE_lADOABDGAc6r7y7PzwAAAAPXmL95",
            "performed_via_github_app": null,
            "state_reason": "not_planned",
            "url": "https://api.github.com/repos/cython/cython/issues/events/16502013817"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6696/events",
    "html_url": "https://github.com/cython/cython/issues/6696",
    "id": 2884579023,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6696/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6r7y7P",
    "number": 6696,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6696/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "state_reason": "not_planned",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6696/timeline",
    "title": "[ENH] add libc/malloc.pxd  to give access to function mallopt",
    "updated_at": "2025-02-27T19:18:34Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6696",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/46057288?v=4",
        "events_url": "https://api.github.com/users/JeanDidierGaraud/events{/privacy}",
        "followers_url": "https://api.github.com/users/JeanDidierGaraud/followers",
        "following_url": "https://api.github.com/users/JeanDidierGaraud/following{/other_user}",
        "gists_url": "https://api.github.com/users/JeanDidierGaraud/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/JeanDidierGaraud",
        "id": 46057288,
        "login": "JeanDidierGaraud",
        "node_id": "MDQ6VXNlcjQ2MDU3Mjg4",
        "organizations_url": "https://api.github.com/users/JeanDidierGaraud/orgs",
        "received_events_url": "https://api.github.com/users/JeanDidierGaraud/received_events",
        "repos_url": "https://api.github.com/users/JeanDidierGaraud/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/JeanDidierGaraud/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JeanDidierGaraud/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/JeanDidierGaraud",
        "user_view_type": "public"
    }
}