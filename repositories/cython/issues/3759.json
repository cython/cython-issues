{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!--\r\n**Note:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report.\r\n-->\r\n\r\n**Describe the bug**\r\nI have a c++ API which uses the builder pattern (using a c++ object in lieu of named arguments).\r\nI find that in some cases a reference to the builder object is stored, while the builder itself is not.\r\nThis results in a dangling stack pointer.\r\n\r\n**To Reproduce**\r\nCode to reproduce the behaviour:\r\n```cython\r\n# distutils: language = c++\r\n#cython: language_level=3\r\n\r\ncdef extern from *:\r\n    cdef cppclass Builder:\r\n        Builder& modify() except+\r\n        void exec() except+\r\n\r\n    cdef cppclass Context:\r\n        @staticmethod\r\n        Builder start()\r\n\r\ncdef class X:\r\n    def doit(self):\r\n        Context.start().modify().exec()\r\n```\r\n\r\nThe relevant portions from the generated c++ code for the `doit()` method.\r\n\r\n```c++\r\n  __Pyx_FakeReference<Builder> __pyx_t_1;\r\n  ...\r\n /* \"test.pyx\":15\r\n * cdef class X:\r\n *     def doit(self):\r\n *         Context.start().modify().exec()             # <<<<<<<<<<<<<<\r\n */\r\n  try {\r\n    __pyx_t_1 = Context::start().modify();\r\n```\r\n\r\nThe `start()` method returns a temporary `Builder` instance, and the `modify()` method\r\nis returning a reference to this same `Builder`.  However, the `Builder` goes out of scope after this line\r\nand `__pyx_t_1` is left with a dangling stack pointer.\r\n\r\n```c++\r\n  } catch(...) {\r\n    __Pyx_CppExn2PyErr();\r\n    __PYX_ERR(0, 15, __pyx_L1_error)\r\n  }\r\n  try {\r\n    __pyx_t_1->exec();\r\n  } catch(...) {\r\n    __Pyx_CppExn2PyErr();\r\n    __PYX_ERR(0, 15, __pyx_L1_error)\r\n  }\r\n...\r\n```\r\n\r\n**Expected behavior**\r\n\r\nI was expecting that either the temporary `Builder` would be explicitly stored to keep it alive,\r\nor that the line would not be split up between two try/catch blocks.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Linux\r\n - Version: verified on 0.29.2 and 0.29.21\r\n\r\n**Additional context**\r\n\r\nI've found two workarounds.  Marking the `start()` method with `except+`,\r\nor explicitly assigning a local variable, cause the `Builder` to be stored\r\nand the reference to remain valid.\r\n\r\n```cython\r\n        Builder start() except+\r\n```\r\n\r\nor\r\n\r\n```cython\r\n    def doit(self):\r\n        cdef Builder temp = Context.start()\r\n        temp.modify().exec()\r\n```\r\n\r\nI got luck and (after sifting through the false positives) valgrind picked this right up.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "> I was expecting that either the temporary Builder would be explicitly stored to keep it alive,\r\n\r\nThe trouble is that Cython doesn't know that this temporary builder is same one you return a reference to. It isn't obvious that it must keep this alive.\r\n\r\n>  [...] or that the line would not be split up between two try/catch blocks.\r\n\r\nThat would sacrifice some detail in the tracebacks, and also stop you from using [some of the more advanced exception handling on a per-function basis](https://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html#exceptions).\r\n\r\n--------\r\n\r\nI think your second (explicit) workaround is better, just because it's explicit. Cython will re-use temporaries once it thinks they're finished with which may cause you problems with the first version occasionally.\r\n\r\n----------\r\n\r\nUnfortunately I doubt that this is fixable without breaking too much existing code. It unfortunately doesn't look like a pattern that interacts well with Cython.",
            "created_at": "2020-07-28T19:03:42Z",
            "html_url": "https://github.com/cython/cython/issues/3759#issuecomment-665221053",
            "id": 665221053,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3759",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTIyMTA1Mw==",
            "performed_via_github_app": null,
            "updated_at": "2020-07-28T19:03:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/665221053",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Cython doesn't know that this temporary builder is same one you return a reference to\r\n\r\nI agree that Cython does not have enough information to infer this.  The only reasonable way I can see to accomplish this would be to emulate the lifetime of temporaries as a c++ compiler would.  I think this would involve a more complex notion of local variable scope than Cython seems to have at present (based on my reading of generated code).  So I suspect this would be a major change.\r\n\r\n(This isn't a criticism.  Simple is good, but can be at odds with c++)\r\n\r\n\r\n> Cython will re-use temporaries once it thinks they're finished\r\n\r\nI noticed and wondered about this.  Is this intentional, or a side effect?  (eg. of not using [SSA](https://en.wikipedia.org/wiki/Static_single_assignment_form))  As I've found cython so useful, it has been on my mind to dig into it.  With such a large project though, it is difficult to know where to start.",
            "created_at": "2020-07-29T16:52:19Z",
            "html_url": "https://github.com/cython/cython/issues/3759#issuecomment-665779956",
            "id": 665779956,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3759",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTc3OTk1Ng==",
            "performed_via_github_app": null,
            "updated_at": "2020-07-29T16:52:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/665779956",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/4429215?v=4",
                "events_url": "https://api.github.com/users/mdavidsaver/events{/privacy}",
                "followers_url": "https://api.github.com/users/mdavidsaver/followers",
                "following_url": "https://api.github.com/users/mdavidsaver/following{/other_user}",
                "gists_url": "https://api.github.com/users/mdavidsaver/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mdavidsaver",
                "id": 4429215,
                "login": "mdavidsaver",
                "node_id": "MDQ6VXNlcjQ0MjkyMTU=",
                "organizations_url": "https://api.github.com/users/mdavidsaver/orgs",
                "received_events_url": "https://api.github.com/users/mdavidsaver/received_events",
                "repos_url": "https://api.github.com/users/mdavidsaver/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mdavidsaver/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mdavidsaver/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mdavidsaver"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> I agree that Cython does not have enough information to infer this. The only reasonable way I can see to accomplish this would be to emulate the lifetime of temporaries as a c++ compiler would\r\n\r\nThis turns out to be surprisingly hard. Cython will generate gotos that jump across variable definitions (which C++ doesn't like), hence everything really needs to be defined at the start of the function. It's really designed with C in mind so the C++ code generated isn't always great.\r\n\r\n> I noticed and wondered about this. Is this intentional, or a side effect? (eg. of not using SSA)\r\n\r\nIt's intentional, presumably with a view to minimizing the stack size. I'm not sure how much practical difference it makes though.\r\n\r\n> As I've found cython so useful, it has been on my mind to dig into it. With such a large project though, it is difficult to know where to start.\r\n\r\nThe place to start if you're genuinely interested is look at a simple-looking bug (making temporary variables behave in a C++-like manner is _not_ a simple bug though!) There's a [semi-useful wiki page](https://github.com/cython/cython/wiki/HackerGuide) about how things are structured.",
            "created_at": "2020-07-29T19:03:10Z",
            "html_url": "https://github.com/cython/cython/issues/3759#issuecomment-665845440",
            "id": 665845440,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3759",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTg0NTQ0MA==",
            "performed_via_github_app": null,
            "updated_at": "2020-07-29T19:03:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/665845440",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3759/comments",
    "created_at": "2020-07-28T18:48:50Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3759/events",
    "html_url": "https://github.com/cython/cython/issues/3759",
    "id": 667291994,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3759/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2NjcyOTE5OTQ=",
    "number": 3759,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Store c++ reference to temporary",
    "updated_at": "2020-07-29T19:03:33Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3759",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/4429215?v=4",
        "events_url": "https://api.github.com/users/mdavidsaver/events{/privacy}",
        "followers_url": "https://api.github.com/users/mdavidsaver/followers",
        "following_url": "https://api.github.com/users/mdavidsaver/following{/other_user}",
        "gists_url": "https://api.github.com/users/mdavidsaver/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mdavidsaver",
        "id": 4429215,
        "login": "mdavidsaver",
        "node_id": "MDQ6VXNlcjQ0MjkyMTU=",
        "organizations_url": "https://api.github.com/users/mdavidsaver/orgs",
        "received_events_url": "https://api.github.com/users/mdavidsaver/received_events",
        "repos_url": "https://api.github.com/users/mdavidsaver/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mdavidsaver/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mdavidsaver/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mdavidsaver"
    }
}