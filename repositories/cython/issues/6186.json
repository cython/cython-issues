{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe your issue\r\n\r\nThere is a related `spin` issue: https://github.com/scientific-python/spin/issues/182.\r\n\r\nI have created a repo to demonstrate how a `spin/meson` build of a Cython project looks and what is needed to get coverage of Cython code working. The README explains the problems:\r\nhttps://github.com/oscarbenjamin/cython_coverage_demo\r\n\r\nThere are two related things that prevent Cython's coverage plugin from working in a meson-based project:\r\n\r\nThe paths recorded in the generated C files in a meson build look like\r\n```c\r\n/* #### Code section: filename_table ### */\r\n\r\nstatic const char *__pyx_f[] = {\r\n  \"thing.pyx\",\r\n  \"<stringsource>\",\r\n};\r\n```\r\nWhen doing an inplace build with setuptools they instead look like:\r\n```c\r\n/* #### Code section: filename_table ### */\r\n\r\nstatic const char *__pyx_f[] = {\r\n  \"src/stuff/thing.pyx\",\r\n  \"<stringsource>\",\r\n};\r\n```\r\nI'm not sure if this is just something that should be changed in `spin/meson` when doing a coverage-enabled build or something. Possibly this is just the way that `cython` is invoked. In any case Cython's coverage plugin breaks if the path to the source file is not included here.\r\n\r\nThe other problem is that Cython's coverage plugin assumes that all files are in-tree like:\r\n```console\r\n$ tree src\r\nsrc\r\n└── stuff\r\n    ├── __init__.py\r\n    ├── meson.build\r\n    ├── __pycache__\r\n    │   ├── __init__.cpython-311.pyc\r\n    │   └── test_thing.cpython-311-pytest-8.2.0.pyc\r\n    ├── test_thing.py\r\n    ├── thing.c\r\n    ├── thing.cpython-311-x86_64-linux-gnu.so\r\n    └── thing.pyx\r\n\r\n2 directories, 8 files\r\n```\r\nThis is not how meson ever lays things out. Instead in a `spin/meson` build:\r\n\r\n1. The source tree is left pristine (no `.c` or `.so` files).\r\n2. Intermediate built files (e.g. `.c`) are in the `build` directory.\r\n3. Final output files (`.so` and `.py`) are assembled in the `build-install` directory.\r\n\r\nIt is the `build-install` directory that is actually used for running tests and generates the coverage data.\r\n\r\nWhen running tests with a coverage-enabled Cython build Cython's coverage plugin fails to find the files that are needed and then coverage reports warnings like:\r\n```\r\n.../site-packages/coverage/report_core.py:115: CoverageWarning: Couldn't parse '/home/oscar/current/active/cython_coverage_demo/thing.pyx': No source for code: '/home/oscar/current/active/cython_coverage_demo/thing.pyx'. (couldnt-parse)\r\n  coverage._warn(msg, slug=\"couldnt-parse\")\r\n```\r\n\r\nI can get coverage working if I patch Cython like this:\r\n```diff\r\n--- Coverage.py.backup\t2024-05-06 15:17:09.336636857 +0100\r\n+++ Coverage.py\t2024-05-06 15:19:55.101376672 +0100\r\n@@ -66,7 +66,19 @@ C_FILE_EXTENSIONS = ['.c', '.cpp', '.cc'\r\n MODULE_FILE_EXTENSIONS = set(['.py', '.pyx', '.pxd'] + C_FILE_EXTENSIONS)\r\n \r\n \r\n+def _find_in_dir(name, dirpath):\r\n+    for root, dirs, files in os.walk(dirpath):\r\n+        if name in files:\r\n+            return os.path.join(root, name)\r\n+\r\n+\r\n def _find_c_source(base_path):\r\n+    if os.path.exists('build'):\r\n+        pyxc_name = os.path.basename(base_path) + '.pyx.c'\r\n+        cfile = _find_in_dir(pyxc_name, 'build')\r\n+        if cfile is not None:\r\n+            return cfile\r\n+\r\n     file_exists = os.path.exists\r\n     for ext in C_FILE_EXTENSIONS:\r\n         file_name = base_path + ext\r\n@@ -79,6 +91,12 @@ def _find_dep_file_path(main_file, file_\r\n     abs_path = os.path.abspath(file_path)\r\n     if not os.path.exists(abs_path) and (file_path.endswith('.pxi') or\r\n                                          relative_path_search):\r\n+        src_path = os.path.join('src', file_path)\r\n+        if os.path.exists(src_path):\r\n+            abs_path = os.path.abspath(src_path)\r\n+            cpath = canonical_filename(abs_path)\r\n+            return cpath\r\n+\r\n         # files are looked up relative to the main source file\r\n         rel_file_path = os.path.join(os.path.dirname(main_file), file_path)\r\n         if os.path.exists(rel_file_path):\r\n```\r\nI also need to patch the generated C files:\r\n```diff\r\ndiff --git a/build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c b/build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\r\nindex 4b628fe..38af623 100644\r\n--- a/build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\r\n+++ b/build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\r\n@@ -1467,7 +1467,7 @@ static const char *__pyx_filename;\r\n /* #### Code section: filename_table ### */\r\n \r\n static const char *__pyx_f[] = {\r\n-  \"thing.pyx\",\r\n+  \"src/stuff/thing.pyx\",\r\n   \"<stringsource>\",\r\n };\r\n /* #### Code section: utility_code_proto_before_types ### */\r\n```\r\nThat Cython patch is not really suitable for a PR and so I am wondering what is the proper way to fix it. From my perspective it would be fine if there was a way to explicitly tell the coverage plugin what files are where rather than depending on any guesswork.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "> The paths recorded in the generated C files in a meson build look like\r\n\r\nThe reason for this difference is that Cython is being run from the build directory e.g.:\r\n```console\r\n$ cython -3 src/stuff/thing.pyx -o out.c\r\n$ grep thing.pyx out.c\r\n  \"src/stuff/thing.pyx\",\r\n...\r\n$ cd tmp/\r\n$ cython -3 ../src/stuff/thing.pyx -o out.c\r\n$ grep thing.pyx out.c\r\n  \"thing.pyx\",\r\n...\r\n```\r\nI don't see an immediate `cython` option for controlling that...",
            "created_at": "2024-05-06T15:51:55Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2096372271",
            "id": 2096372271,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc589Bov",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2096372271/reactions"
            },
            "updated_at": "2024-05-06T15:51:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2096372271",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "I don't think that cython's coverage plugin is going to be able to figure out where the files are in a meson build. Instead though what would be useful is if we could just pass in something like a json file that says where the files are.\r\n\r\nThere are several steps to making the coverage report work:\r\n\r\n1. If line tracing is enabled then trace events are emitted (`__Pyx_TraceCall`) at runtime and collected by coverage. These events include a filename which is the `__pyx_f[0]` string referred to above.\r\n2. Then when coverage goes to collect the results Cython's coverage plugin's `file_reporter` method is called for every filename and should select those that it wants to handle.\r\n3. For each file that Cython wants to handle (i.e. `foo.pyx` files) the plugin tries to find the matching `foo.c` file.\r\n4. Cython then parses the `foo.c` file which itself contains references back to the original `foo1.pyx`, `foo2.pyx` etc sources.\r\n\r\nThe way that this works with setuptools in my demo is:\r\n\r\n1. For an in-place build run in project root `__pyx_f[0]` is set to the relative path from project root (`src/stuff/thing.pyx`). This is also CWD when running coverage. I think that coverage turns this into an absolute path `/path/to/proj/src/stuff/thing.pyx` that comes back to `file_reporter()`.\r\n2. The plugin then looks for an adjacent .c file `/path/to/proj/src/stuff/thing.c` and finds it.\r\n3. The plugin parses `thing.c` which has comments referring to `stuff/thing.pyx` which is the relative path to the original source file from the `src` directory.\r\n4. When the plugin wants to report the source file for a trace event it uses its map from `__pyx_f[0]` to `/path/to/proj/src/stuff/thing.c` and the filenames that it parsed from `thing.c` like `stuff/thing.pyx`. The code that does that is here:\r\nhttps://github.com/cython/cython/blob/45db483cbe128c29a1e9ffe9f5a4db12cf77cddd/Cython/Coverage.py#L77-L108\r\nThis tries a few things:\r\n1. First it tries to combine `thing.c`'s directory with the path like `/path/to/proj/src/stuff/stuff/thing.pyx`. That doesn't work because we have double `stuff` in the path.\r\n2. Then it tries removing the file extensions and compares the paths one component at a time in reverse to try to match an absolute path to `thing.c`'s directory with a relative path to `thing.pyx`'s directory. In my case that succeeds.\r\n4. If that fails then it searches `sys.path` to see if any directory there has `stuff/thing.pyx`.\r\n\r\nIn the spin meson setup the directory structure (for CWD) at the time the coverage plugin runs is like:\r\n```console\r\n$ tree src build/src build-install/\r\nsrc\r\n└── stuff\r\n    ├── __init__.py\r\n    ├── meson.build\r\n    ├── test_thing.py\r\n    └── thing.pyx\r\nbuild/src\r\n└── stuff\r\n    ├── thing.cpython-311-x86_64-linux-gnu.so\r\n    └── thing.cpython-311-x86_64-linux-gnu.so.p\r\n        ├── meson-generated_src_stuff_thing.pyx.c.o\r\n        └── src\r\n            └── stuff\r\n                ├── thing.pyx.c\r\n                └── thing.pyx.c.dep\r\nbuild-install/\r\n└── usr\r\n    └── lib\r\n        └── python3.11\r\n            └── site-packages\r\n                └── stuff\r\n                    ├── __init__.py\r\n                    ├── __pycache__\r\n                    │   ├── __init__.cpython-311.pyc\r\n                    │   ├── test_thing.cpython-311.pyc\r\n                    │   └── test_thing.cpython-311-pytest-8.2.0.pyc\r\n                    ├── test_thing.py\r\n                    └── thing.cpython-311-x86_64-linux-gnu.so\r\n```\r\nThe current working directory here is project root and `build-install` is the only directory that is on `sys.path`.\r\n\r\nI don't think it is reasonable to extend the heuristics currently used in the plugin to the extent that they would be able to locate `thing.pyx.c` and then from there find `thing.pyx`. Realistically I need to be able to provide that information to the plugin.\r\n\r\nStripping this all back all that is really wanted for the plugin to work is:\r\n\r\n1. To output firstly a name in `__pyx_f[0]` that we will be able to recognise later.\r\n2. A map from the filenames in the trace events to the `foo.c` file.\r\n3. To be able to locate the files referred to in each `foo.c` which are the original Cython sources based on their names in `foo.c`.\r\n\r\nIt is not hard though for me to generate all of the information that the plugin needs in the form of e.g. a json file like:\r\n```json\r\n{\r\n    # map from __pyx_f[0] to c file path\r\n    \"c_files\": {\r\n        \"src/stuff/thing.pyx\":\r\n            \"build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\"\r\n    }\r\n    # maps from paths in foo.c etc to source .pyx etc files\r\n    \"source_files\": {\r\n        \"build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\": {\r\n            \"stuff/thing.pyx\": \"src/stuff/thing.pyx\"\r\n        }\r\n    }\r\n}\r\n```\r\nWith spin/meson we can easily generate this information because we know where we put the `.c` files and we also now what the corresponding source files are from `thing.pyx.c.dep` (via `cython --depfile`):\r\n```console\r\n$ cat build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c.dep \r\nsrc/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c: \\\r\n  ../src/stuff/thing.pyx\r\n```\r\nIt would not be hard then to either add a custom target in the project's meson build that builds this json file or for it to be something that `spin` does automatically for any project that wants it.\r\n\r\nWhat I would need from Cython to make this work is just two things:\r\n\r\n1. I need to control the path that is stored in `__pyx_f[0]` ideally through a command line argument to `cython`.\r\n2. I need a way to tell the plugin to load and use my json file rather than doing heuristic path searches.\r\n\r\nI can implement this and send a PR but I'm just wondering if this sounds reasonable and if anyone has any suggestions for what would be the best interface for these last two points.",
            "created_at": "2024-05-07T22:09:01Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2099397259",
            "id": 2099397259,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59IkKL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2099397259/reactions"
            },
            "updated_at": "2024-05-07T22:09:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2099397259",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The reason for this difference is that Cython is being run from the build directory e.g.:\r\n> [...]\r\n> I don't see an immediate `cython` option for controlling that...\r\n\r\nThis part seems like a problem in the `cython` frontend, which doesn't show up with Cython's `build_ext` class (and maybe not with `cythonize`)? \r\n\r\nFor a `cython` invocation like `cython -3 path/to/thing.pyx -o output/path/to/thing.c`, the paths in `thing.c` should always be correct from within this file, right? So in this example, it should be `../../../path/to/thing.pyx`. The working directory from which `cython` is invoked should never come into play I'd think, it's just the `.c` -> `.pyx` connection that should always be maintained independent of where both files are located. And it shouldn't require a flag passed to the `cython` frontend - unless I'm misunderstanding, there is only ever a single correct answer.\r\n\r\n> 3. For each file that Cython wants to handle (i.e. `foo.pyx` files) the plugin tries to find the matching `foo.c` file.\r\n\r\nSo this is the reverse problem of the above - but harder indeed, because the `.pyx` -> `.c` mapping needs to be in a separate file. Having the build system write that out in the way you describe in a json file sounds like a good solution to me. ",
            "created_at": "2024-05-08T09:58:41Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2100212632",
            "id": 2100212632,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59LrOY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2100212632/reactions"
            },
            "updated_at": "2024-05-08T09:58:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2100212632",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/98330?v=4",
                "events_url": "https://api.github.com/users/rgommers/events{/privacy}",
                "followers_url": "https://api.github.com/users/rgommers/followers",
                "following_url": "https://api.github.com/users/rgommers/following{/other_user}",
                "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rgommers",
                "id": 98330,
                "login": "rgommers",
                "node_id": "MDQ6VXNlcjk4MzMw",
                "organizations_url": "https://api.github.com/users/rgommers/orgs",
                "received_events_url": "https://api.github.com/users/rgommers/received_events",
                "repos_url": "https://api.github.com/users/rgommers/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rgommers"
            }
        },
        {
            "author_association": "NONE",
            "body": "> This part seems like a problem in the `cython` frontend, which doesn't show up with Cython's `build_ext` class (and maybe not with `cythonize`)?\r\n> \r\n> For a `cython` invocation like `cython -3 path/to/thing.pyx -o output/path/to/thing.c`, the paths in `thing.c` should always be correct from within this file, right? So in this example, it should be `../../../path/to/thing.pyx`. The working directory from which `cython` is invoked should never come into play I'd think, it's just the `.c` -> `.pyx` connection that should always be maintained independent of where both files are located.\r\n\r\nWhat happens is that `meson` calls `cython` with absolute paths:\r\n```\r\ncython -M --fast-fail -3 /home/oscar/current/active/cython_coverage_demo/src/stuff/thing.pyx -o src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\r\n```\r\nThen cython internally strips off the current working directory but only if the file is inside CWD:\r\nhttps://github.com/cython/cython/blob/45db483cbe128c29a1e9ffe9f5a4db12cf77cddd/Cython/Compiler/Scanning.py#L198-L200\r\n\r\nGiven that `cython` was invoked with absolute paths there is no well defined way for it to know how to turn those into relative paths unless it is just a relative path from the directory containing `foo.c` to the location of `foo.pyx`.\r\n\r\nOn the other hand though cython knows how to generate paths relative to sys.path i.e. relative to `./src` in the demo repo. It already uses those paths for the comments like:\r\n```c\r\n/* \"stuff/thing.pyx\":1\r\n * cdef class Thing:             # <<<<<<<<<<<<<<\r\n *     def method(self):\r\n *         return 2\r\n */\r\n```\r\nThese are the paths that are parsed from the c file and used to locate its source  `.pyx` files. I am not sure how `cython` discerns this path.\r\n\r\nI think it would make sense for `__pyx_f[0]` to be a path relative to sys.path as well i.e. it should be `stuff/thing.pyx` rather than relative to project root (`src/stuff/thing.pyx`) or relative to the location of the c file (`../src/stuff/thing.pyx`). Then the json can use the same name `stuff/thing.pyx` in both `c_files` and `source_files`:\r\n```json\r\n{\r\n    # map from __pyx_f[0] to c file path\r\n    \"c_files\": {\r\n        \"stuff/thing.pyx\":\r\n            \"build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\"\r\n    }\r\n    # maps from paths in foo.c etc to source .pyx etc files\r\n    \"source_files\": {\r\n        \"build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\": {\r\n            \"stuff/thing.pyx\": \"src/stuff/thing.pyx\"\r\n        }\r\n    }\r\n}\r\n```\r\nNote that if we weren't using the src-layout then `__pyx_f[0]` would be `stuff/thing.pyx` because in that case project root, current working directory and `sys.path[0]` are all the same.",
            "created_at": "2024-05-08T13:51:49Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2100629720",
            "id": 2100629720,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59NRDY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2100629720/reactions"
            },
            "updated_at": "2024-05-08T13:51:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2100629720",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "> * I need to control the path that is stored in `__pyx_f[0]` ideally through a command line argument to `cython`.\r\n> * I need a way to tell the plugin to load and use my json file rather than doing heuristic path searches.\r\n\r\nAnother option would be for spin to have its own Cython coverage plugin that handles all the path finding. Then the only thing that needs changing in Cython is setting `__pyx_f[0]` correctly when the source file is not in CWD.",
            "created_at": "2024-05-08T14:08:30Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2100674950",
            "id": 2100674950,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59NcGG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2100674950/reactions"
            },
            "updated_at": "2024-05-08T14:08:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2100674950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6186/comments",
    "created_at": "2024-05-06T15:26:00Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6186/events",
    "html_url": "https://github.com/cython/cython/issues/6186",
    "id": 2281145080,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6186/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6H94L4",
    "number": 6186,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6186/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6186/timeline",
    "title": "Coverage measurement of Cython code in a meson build",
    "updated_at": "2024-05-08T14:08:31Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6186",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
        "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
        "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
        "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
        "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/oscarbenjamin",
        "id": 1159732,
        "login": "oscarbenjamin",
        "node_id": "MDQ6VXNlcjExNTk3MzI=",
        "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
        "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
        "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/oscarbenjamin"
    }
}