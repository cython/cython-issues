{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe your issue\r\n\r\nThere is a related `spin` issue: https://github.com/scientific-python/spin/issues/182.\r\n\r\nI have created a repo to demonstrate how a `spin/meson` build of a Cython project looks and what is needed to get coverage of Cython code working. The README explains the problems:\r\nhttps://github.com/oscarbenjamin/cython_coverage_demo\r\n\r\nThere are two related things that prevent Cython's coverage plugin from working in a meson-based project:\r\n\r\nThe paths recorded in the generated C files in a meson build look like\r\n```c\r\n/* #### Code section: filename_table ### */\r\n\r\nstatic const char *__pyx_f[] = {\r\n  \"thing.pyx\",\r\n  \"<stringsource>\",\r\n};\r\n```\r\nWhen doing an inplace build with setuptools they instead look like:\r\n```c\r\n/* #### Code section: filename_table ### */\r\n\r\nstatic const char *__pyx_f[] = {\r\n  \"src/stuff/thing.pyx\",\r\n  \"<stringsource>\",\r\n};\r\n```\r\nI'm not sure if this is just something that should be changed in `spin/meson` when doing a coverage-enabled build or something. Possibly this is just the way that `cython` is invoked. In any case Cython's coverage plugin breaks if the path to the source file is not included here.\r\n\r\nThe other problem is that Cython's coverage plugin assumes that all files are in-tree like:\r\n```console\r\n$ tree src\r\nsrc\r\n└── stuff\r\n    ├── __init__.py\r\n    ├── meson.build\r\n    ├── __pycache__\r\n    │   ├── __init__.cpython-311.pyc\r\n    │   └── test_thing.cpython-311-pytest-8.2.0.pyc\r\n    ├── test_thing.py\r\n    ├── thing.c\r\n    ├── thing.cpython-311-x86_64-linux-gnu.so\r\n    └── thing.pyx\r\n\r\n2 directories, 8 files\r\n```\r\nThis is not how meson ever lays things out. Instead in a `spin/meson` build:\r\n\r\n1. The source tree is left pristine (no `.c` or `.so` files).\r\n2. Intermediate built files (e.g. `.c`) are in the `build` directory.\r\n3. Final output files (`.so` and `.py`) are assembled in the `build-install` directory.\r\n\r\nIt is the `build-install` directory that is actually used for running tests and generates the coverage data.\r\n\r\nWhen running tests with a coverage-enabled Cython build Cython's coverage plugin fails to find the files that are needed and then coverage reports warnings like:\r\n```\r\n.../site-packages/coverage/report_core.py:115: CoverageWarning: Couldn't parse '/home/oscar/current/active/cython_coverage_demo/thing.pyx': No source for code: '/home/oscar/current/active/cython_coverage_demo/thing.pyx'. (couldnt-parse)\r\n  coverage._warn(msg, slug=\"couldnt-parse\")\r\n```\r\n\r\nI can get coverage working if I patch Cython like this:\r\n```diff\r\n--- Coverage.py.backup\t2024-05-06 15:17:09.336636857 +0100\r\n+++ Coverage.py\t2024-05-06 15:19:55.101376672 +0100\r\n@@ -66,7 +66,19 @@ C_FILE_EXTENSIONS = ['.c', '.cpp', '.cc'\r\n MODULE_FILE_EXTENSIONS = set(['.py', '.pyx', '.pxd'] + C_FILE_EXTENSIONS)\r\n \r\n \r\n+def _find_in_dir(name, dirpath):\r\n+    for root, dirs, files in os.walk(dirpath):\r\n+        if name in files:\r\n+            return os.path.join(root, name)\r\n+\r\n+\r\n def _find_c_source(base_path):\r\n+    if os.path.exists('build'):\r\n+        pyxc_name = os.path.basename(base_path) + '.pyx.c'\r\n+        cfile = _find_in_dir(pyxc_name, 'build')\r\n+        if cfile is not None:\r\n+            return cfile\r\n+\r\n     file_exists = os.path.exists\r\n     for ext in C_FILE_EXTENSIONS:\r\n         file_name = base_path + ext\r\n@@ -79,6 +91,12 @@ def _find_dep_file_path(main_file, file_\r\n     abs_path = os.path.abspath(file_path)\r\n     if not os.path.exists(abs_path) and (file_path.endswith('.pxi') or\r\n                                          relative_path_search):\r\n+        src_path = os.path.join('src', file_path)\r\n+        if os.path.exists(src_path):\r\n+            abs_path = os.path.abspath(src_path)\r\n+            cpath = canonical_filename(abs_path)\r\n+            return cpath\r\n+\r\n         # files are looked up relative to the main source file\r\n         rel_file_path = os.path.join(os.path.dirname(main_file), file_path)\r\n         if os.path.exists(rel_file_path):\r\n```\r\nI also need to patch the generated C files:\r\n```diff\r\ndiff --git a/build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c b/build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\r\nindex 4b628fe..38af623 100644\r\n--- a/build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\r\n+++ b/build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\r\n@@ -1467,7 +1467,7 @@ static const char *__pyx_filename;\r\n /* #### Code section: filename_table ### */\r\n \r\n static const char *__pyx_f[] = {\r\n-  \"thing.pyx\",\r\n+  \"src/stuff/thing.pyx\",\r\n   \"<stringsource>\",\r\n };\r\n /* #### Code section: utility_code_proto_before_types ### */\r\n```\r\nThat Cython patch is not really suitable for a PR and so I am wondering what is the proper way to fix it. From my perspective it would be fine if there was a way to explicitly tell the coverage plugin what files are where rather than depending on any guesswork.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "> The paths recorded in the generated C files in a meson build look like\r\n\r\nThe reason for this difference is that Cython is being run from the build directory e.g.:\r\n```console\r\n$ cython -3 src/stuff/thing.pyx -o out.c\r\n$ grep thing.pyx out.c\r\n  \"src/stuff/thing.pyx\",\r\n...\r\n$ cd tmp/\r\n$ cython -3 ../src/stuff/thing.pyx -o out.c\r\n$ grep thing.pyx out.c\r\n  \"thing.pyx\",\r\n...\r\n```\r\nI don't see an immediate `cython` option for controlling that...",
            "created_at": "2024-05-06T15:51:55Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2096372271",
            "id": 2096372271,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc589Bov",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2096372271/reactions"
            },
            "updated_at": "2024-05-06T15:51:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2096372271",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "I don't think that cython's coverage plugin is going to be able to figure out where the files are in a meson build. Instead though what would be useful is if we could just pass in something like a json file that says where the files are.\r\n\r\nThere are several steps to making the coverage report work:\r\n\r\n1. If line tracing is enabled then trace events are emitted (`__Pyx_TraceCall`) at runtime and collected by coverage. These events include a filename which is the `__pyx_f[0]` string referred to above.\r\n2. Then when coverage goes to collect the results Cython's coverage plugin's `file_reporter` method is called for every filename and should select those that it wants to handle.\r\n3. For each file that Cython wants to handle (i.e. `foo.pyx` files) the plugin tries to find the matching `foo.c` file.\r\n4. Cython then parses the `foo.c` file which itself contains references back to the original `foo1.pyx`, `foo2.pyx` etc sources.\r\n\r\nThe way that this works with setuptools in my demo is:\r\n\r\n1. For an in-place build run in project root `__pyx_f[0]` is set to the relative path from project root (`src/stuff/thing.pyx`). This is also CWD when running coverage. I think that coverage turns this into an absolute path `/path/to/proj/src/stuff/thing.pyx` that comes back to `file_reporter()`.\r\n2. The plugin then looks for an adjacent .c file `/path/to/proj/src/stuff/thing.c` and finds it.\r\n3. The plugin parses `thing.c` which has comments referring to `stuff/thing.pyx` which is the relative path to the original source file from the `src` directory.\r\n4. When the plugin wants to report the source file for a trace event it uses its map from `__pyx_f[0]` to `/path/to/proj/src/stuff/thing.c` and the filenames that it parsed from `thing.c` like `stuff/thing.pyx`. The code that does that is here:\r\nhttps://github.com/cython/cython/blob/45db483cbe128c29a1e9ffe9f5a4db12cf77cddd/Cython/Coverage.py#L77-L108\r\nThis tries a few things:\r\n1. First it tries to combine `thing.c`'s directory with the path like `/path/to/proj/src/stuff/stuff/thing.pyx`. That doesn't work because we have double `stuff` in the path.\r\n2. Then it tries removing the file extensions and compares the paths one component at a time in reverse to try to match an absolute path to `thing.c`'s directory with a relative path to `thing.pyx`'s directory. In my case that succeeds.\r\n4. If that fails then it searches `sys.path` to see if any directory there has `stuff/thing.pyx`.\r\n\r\nIn the spin meson setup the directory structure (for CWD) at the time the coverage plugin runs is like:\r\n```console\r\n$ tree src build/src build-install/\r\nsrc\r\n└── stuff\r\n    ├── __init__.py\r\n    ├── meson.build\r\n    ├── test_thing.py\r\n    └── thing.pyx\r\nbuild/src\r\n└── stuff\r\n    ├── thing.cpython-311-x86_64-linux-gnu.so\r\n    └── thing.cpython-311-x86_64-linux-gnu.so.p\r\n        ├── meson-generated_src_stuff_thing.pyx.c.o\r\n        └── src\r\n            └── stuff\r\n                ├── thing.pyx.c\r\n                └── thing.pyx.c.dep\r\nbuild-install/\r\n└── usr\r\n    └── lib\r\n        └── python3.11\r\n            └── site-packages\r\n                └── stuff\r\n                    ├── __init__.py\r\n                    ├── __pycache__\r\n                    │   ├── __init__.cpython-311.pyc\r\n                    │   ├── test_thing.cpython-311.pyc\r\n                    │   └── test_thing.cpython-311-pytest-8.2.0.pyc\r\n                    ├── test_thing.py\r\n                    └── thing.cpython-311-x86_64-linux-gnu.so\r\n```\r\nThe current working directory here is project root and `build-install` is the only directory that is on `sys.path`.\r\n\r\nI don't think it is reasonable to extend the heuristics currently used in the plugin to the extent that they would be able to locate `thing.pyx.c` and then from there find `thing.pyx`. Realistically I need to be able to provide that information to the plugin.\r\n\r\nStripping this all back all that is really wanted for the plugin to work is:\r\n\r\n1. To output firstly a name in `__pyx_f[0]` that we will be able to recognise later.\r\n2. A map from the filenames in the trace events to the `foo.c` file.\r\n3. To be able to locate the files referred to in each `foo.c` which are the original Cython sources based on their names in `foo.c`.\r\n\r\nIt is not hard though for me to generate all of the information that the plugin needs in the form of e.g. a json file like:\r\n```json\r\n{\r\n    # map from __pyx_f[0] to c file path\r\n    \"c_files\": {\r\n        \"src/stuff/thing.pyx\":\r\n            \"build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\"\r\n    }\r\n    # maps from paths in foo.c etc to source .pyx etc files\r\n    \"source_files\": {\r\n        \"build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\": {\r\n            \"stuff/thing.pyx\": \"src/stuff/thing.pyx\"\r\n        }\r\n    }\r\n}\r\n```\r\nWith spin/meson we can easily generate this information because we know where we put the `.c` files and we also now what the corresponding source files are from `thing.pyx.c.dep` (via `cython --depfile`):\r\n```console\r\n$ cat build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c.dep \r\nsrc/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c: \\\r\n  ../src/stuff/thing.pyx\r\n```\r\nIt would not be hard then to either add a custom target in the project's meson build that builds this json file or for it to be something that `spin` does automatically for any project that wants it.\r\n\r\nWhat I would need from Cython to make this work is just two things:\r\n\r\n1. I need to control the path that is stored in `__pyx_f[0]` ideally through a command line argument to `cython`.\r\n2. I need a way to tell the plugin to load and use my json file rather than doing heuristic path searches.\r\n\r\nI can implement this and send a PR but I'm just wondering if this sounds reasonable and if anyone has any suggestions for what would be the best interface for these last two points.",
            "created_at": "2024-05-07T22:09:01Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2099397259",
            "id": 2099397259,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59IkKL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2099397259/reactions"
            },
            "updated_at": "2024-05-07T22:09:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2099397259",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The reason for this difference is that Cython is being run from the build directory e.g.:\r\n> [...]\r\n> I don't see an immediate `cython` option for controlling that...\r\n\r\nThis part seems like a problem in the `cython` frontend, which doesn't show up with Cython's `build_ext` class (and maybe not with `cythonize`)? \r\n\r\nFor a `cython` invocation like `cython -3 path/to/thing.pyx -o output/path/to/thing.c`, the paths in `thing.c` should always be correct from within this file, right? So in this example, it should be `../../../path/to/thing.pyx`. The working directory from which `cython` is invoked should never come into play I'd think, it's just the `.c` -> `.pyx` connection that should always be maintained independent of where both files are located. And it shouldn't require a flag passed to the `cython` frontend - unless I'm misunderstanding, there is only ever a single correct answer.\r\n\r\n> 3. For each file that Cython wants to handle (i.e. `foo.pyx` files) the plugin tries to find the matching `foo.c` file.\r\n\r\nSo this is the reverse problem of the above - but harder indeed, because the `.pyx` -> `.c` mapping needs to be in a separate file. Having the build system write that out in the way you describe in a json file sounds like a good solution to me. ",
            "created_at": "2024-05-08T09:58:41Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2100212632",
            "id": 2100212632,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59LrOY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2100212632/reactions"
            },
            "updated_at": "2024-05-08T09:58:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2100212632",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/98330?v=4",
                "events_url": "https://api.github.com/users/rgommers/events{/privacy}",
                "followers_url": "https://api.github.com/users/rgommers/followers",
                "following_url": "https://api.github.com/users/rgommers/following{/other_user}",
                "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rgommers",
                "id": 98330,
                "login": "rgommers",
                "node_id": "MDQ6VXNlcjk4MzMw",
                "organizations_url": "https://api.github.com/users/rgommers/orgs",
                "received_events_url": "https://api.github.com/users/rgommers/received_events",
                "repos_url": "https://api.github.com/users/rgommers/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rgommers"
            }
        },
        {
            "author_association": "NONE",
            "body": "> This part seems like a problem in the `cython` frontend, which doesn't show up with Cython's `build_ext` class (and maybe not with `cythonize`)?\r\n> \r\n> For a `cython` invocation like `cython -3 path/to/thing.pyx -o output/path/to/thing.c`, the paths in `thing.c` should always be correct from within this file, right? So in this example, it should be `../../../path/to/thing.pyx`. The working directory from which `cython` is invoked should never come into play I'd think, it's just the `.c` -> `.pyx` connection that should always be maintained independent of where both files are located.\r\n\r\nWhat happens is that `meson` calls `cython` with absolute paths:\r\n```\r\ncython -M --fast-fail -3 /home/oscar/current/active/cython_coverage_demo/src/stuff/thing.pyx -o src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\r\n```\r\nThen cython internally strips off the current working directory but only if the file is inside CWD:\r\nhttps://github.com/cython/cython/blob/45db483cbe128c29a1e9ffe9f5a4db12cf77cddd/Cython/Compiler/Scanning.py#L198-L200\r\n\r\nGiven that `cython` was invoked with absolute paths there is no well defined way for it to know how to turn those into relative paths unless it is just a relative path from the directory containing `foo.c` to the location of `foo.pyx`.\r\n\r\nOn the other hand though cython knows how to generate paths relative to sys.path i.e. relative to `./src` in the demo repo. It already uses those paths for the comments like:\r\n```c\r\n/* \"stuff/thing.pyx\":1\r\n * cdef class Thing:             # <<<<<<<<<<<<<<\r\n *     def method(self):\r\n *         return 2\r\n */\r\n```\r\nThese are the paths that are parsed from the c file and used to locate its source  `.pyx` files. I am not sure how `cython` discerns this path.\r\n\r\nI think it would make sense for `__pyx_f[0]` to be a path relative to sys.path as well i.e. it should be `stuff/thing.pyx` rather than relative to project root (`src/stuff/thing.pyx`) or relative to the location of the c file (`../src/stuff/thing.pyx`). Then the json can use the same name `stuff/thing.pyx` in both `c_files` and `source_files`:\r\n```json\r\n{\r\n    # map from __pyx_f[0] to c file path\r\n    \"c_files\": {\r\n        \"stuff/thing.pyx\":\r\n            \"build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\"\r\n    }\r\n    # maps from paths in foo.c etc to source .pyx etc files\r\n    \"source_files\": {\r\n        \"build/src/stuff/thing.cpython-311-x86_64-linux-gnu.so.p/src/stuff/thing.pyx.c\": {\r\n            \"stuff/thing.pyx\": \"src/stuff/thing.pyx\"\r\n        }\r\n    }\r\n}\r\n```\r\nNote that if we weren't using the src-layout then `__pyx_f[0]` would be `stuff/thing.pyx` because in that case project root, current working directory and `sys.path[0]` are all the same.",
            "created_at": "2024-05-08T13:51:49Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2100629720",
            "id": 2100629720,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59NRDY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2100629720/reactions"
            },
            "updated_at": "2024-05-08T13:51:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2100629720",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "> * I need to control the path that is stored in `__pyx_f[0]` ideally through a command line argument to `cython`.\r\n> * I need a way to tell the plugin to load and use my json file rather than doing heuristic path searches.\r\n\r\nAnother option would be for spin to have its own Cython coverage plugin that handles all the path finding. Then the only thing that needs changing in Cython is setting `__pyx_f[0]` correctly when the source file is not in CWD.",
            "created_at": "2024-05-08T14:08:30Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2100674950",
            "id": 2100674950,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59NcGG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2100674950/reactions"
            },
            "updated_at": "2024-05-08T14:08:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2100674950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "In a more complicated situation with `cimport` etc the `__pyx_f` table looks like:\r\n```c\r\nstatic const char *__pyx_f[] = {\r\n  \"src/flint/types/fmpz.pyx\",\r\n  \"src/flint/utils/conversion.pxd\",\r\n  \"src/flint/types/fmpz.pxd\",\r\n  \"src/flint/utils/typecheck.pxd\",\r\n  \"src/flint/flint_base/flint_base.pxd\",\r\n  \"type.pxd\",\r\n};\r\n```\r\nThe tracing events are sent out with any of these filenames and Cython tries to guess which .c file is involved. The pxd files involved are included in many .c files though so there is no straight-forward map from e.g. `fmpz.pxd` to `fmpz.c`.\r\n\r\nWith the out of tree meson build that becomes:\r\n```c\r\nstatic const char *__pyx_f[] = {\r\n  \"fmpz.pyx\",\r\n  \"conversion.pxd\",\r\n  \"fmpz.pxd\",\r\n  \"flint_base.pxd\",\r\n  \"type.pxd\",\r\n};\r\n```\r\nThis is where the `__pyx_f` paths get stripped off if they are still absolute paths:\r\nhttps://github.com/cython/cython/blob/45db483cbe128c29a1e9ffe9f5a4db12cf77cddd/Cython/Compiler/ModuleNode.py#L969-L971\r\n\r\nThis is possibly where absolute paths become relative for what is shown in the annotated comments:\r\nhttps://github.com/cython/cython/blob/45db483cbe128c29a1e9ffe9f5a4db12cf77cddd/Cython/Compiler/Scanning.py#L227-L232\r\nThat's relative to CWD but possibly cythonize changes the working directory:\r\nhttps://github.com/cython/cython/blob/45db483cbe128c29a1e9ffe9f5a4db12cf77cddd/Cython/Build/Cythonize.py#L104-L117\r\nIn fact that is one option for making `cython` get the paths correct:\r\n```console\r\n$ cython --help\r\n...\r\n  -w WORKING_PATH, --working WORKING_PATH\r\n                        Sets the working directory for Cython (the directory modules are searched\r\n                        from)\r\n```",
            "created_at": "2024-05-08T15:05:05Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2100800064",
            "id": 2100800064,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59N6pA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2100800064/reactions"
            },
            "updated_at": "2024-05-08T15:05:05Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2100800064",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "Here is where the relative to sys.path paths are generated:\r\nhttps://github.com/cython/cython/blob/45db483cbe128c29a1e9ffe9f5a4db12cf77cddd/Cython/Compiler/Main.py#L484-L499",
            "created_at": "2024-05-08T15:27:11Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2100843163",
            "id": 2100843163,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59OFKb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2100843163/reactions"
            },
            "updated_at": "2024-05-08T15:27:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2100843163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Nice detective work!\r\n\r\n> there is no well defined way for it to know how to turn those into relative paths unless it is just a relative path from the directory containing `foo.c` to the location of `foo.pyx`.\r\n\r\nThat relative path from `foo.c` to `foo.pyx` is what I meant indeed. It's the simplest and most reliable thing to do I'd think, and should work independent of how or from where `cython` is called. Having the paths be relative to some other location is an extra level of indirection and seems to be a bit fragile. \r\n\r\nThe other option may be to tell `cython` what the project/source root dir is, so it doesn't have to guess (the \"strip if inside CWD\" is guessing) - which it sounds like can be done with `--working` already. However, I suspect that this may not interact too well with other functionality, like inferring the module name. Maybe using both `--working` and `--module-name` together will work? (not pretty though)\r\n",
            "created_at": "2024-05-08T15:56:29Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2100899985",
            "id": 2100899985,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59OTCR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2100899985/reactions"
            },
            "updated_at": "2024-05-08T15:56:29Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2100899985",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/98330?v=4",
                "events_url": "https://api.github.com/users/rgommers/events{/privacy}",
                "followers_url": "https://api.github.com/users/rgommers/followers",
                "following_url": "https://api.github.com/users/rgommers/following{/other_user}",
                "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rgommers",
                "id": 98330,
                "login": "rgommers",
                "node_id": "MDQ6VXNlcjk4MzMw",
                "organizations_url": "https://api.github.com/users/rgommers/orgs",
                "received_events_url": "https://api.github.com/users/rgommers/received_events",
                "repos_url": "https://api.github.com/users/rgommers/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rgommers"
            }
        },
        {
            "author_association": "NONE",
            "body": "Using `--working` also affects the interpretation of the output path e.g. meson gives a relative path for the output file like:\r\n```\r\ncython /path/to/proj/src/stuff/thing.pyx -o path/in/build/dir/thing.pyx.c\r\n```\r\nIf `--working` is used then the name of the output path needs to be relative to the given directory like `../build-dir-name/...`.\r\n\r\n> However, I suspect that this may not interact too well with other functionality, like inferring the module name.\r\n\r\nCython has to be able to figure out what is the base directory from which Python/Cython imports are relative so that it can resolve `from stuff.thing cimport Thing`. It always knows the fully qualified module name for any main `.pyx` file and it is that relative path `stuff.thing -> stuff/thing.pyx` that goes in the C code comments. I think that this is generally the best path to use because e.g. some people measure coverage measurement against an installed package (presumably with nox etc): neither the build nor source directory should be part of this path.\r\n\r\nWe also need to be able to collect multiple references to `thing.pyx` that arise from different extension modules i.e. difference c files potentially in different packages. The coverage plugin merges these all together so that we get a single coverage report for `thing.pyx` that includes the code that cimports `Thing` into each separate module. It makes sense that we want a canonical name for this .pyx file rather than relative paths from different .c files.\r\n\r\nIt is the `__pyx_f` table that is relative to CWD at the time that `cython` runs that is problematic. The path is recorded as the relative path `delta` from cwd to the .pyx file when cython runs. It is then presumed that either:\r\n\r\n1. The relative path from cwd to `thing.pyx` file will be the same as `delta` when coverage runs.\r\n2. `thing.c` and `thing.pyx` are in the same directory with matching names.\r\n3. The same relative path `delta` represents an offset from a directory on sys.path.\r\n\r\nNone of these assumptions works with meson. In fact even without meson `delta = src/stuff/thing.pyx` will never be the right offset from sys.path so assumption 3 is always broken in a src-layout.\r\n\r\nI think that the path to record should be `stuff/thing.pyx` which is what is needed for assumption 3 anyway. This way it is the same path reproducibly regardless of the location of the source and build directories. Note that this is also the path that is already recorded when using setuptools if you do not have a src-layout.\r\n\r\nThen it is just necessary at coverage collection time to understand that the path is not necessarily relative to `.` but rather to wherever is the import base i.e. it could be `src` or somewhere in `sys.path`. Basically the coverage plugin needs to be told somehow that we are using a src layout if we expect it to locate the files in `src`.",
            "created_at": "2024-05-08T17:56:41Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2101111539",
            "id": 2101111539,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59PGrz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2101111539/reactions"
            },
            "updated_at": "2024-05-08T17:56:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2101111539",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "It seems that coverage itself assumes that the path is relative to CWD before calling the plugin. The path needs to be `src/stuff/thing.pyx` because coverage will turn that into `/path/to/proj/src/stuff/thing.pyx` and if that file does not exist then it won't even call Cython's coverage plugin.",
            "created_at": "2024-05-08T18:39:56Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2101203680",
            "id": 2101203680,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59PdLg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2101203680/reactions"
            },
            "updated_at": "2024-05-08T18:39:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2101203680",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "> It seems that coverage itself assumes that the path is relative to CWD before calling the plugin.\r\n\r\nA workaround for this is to add a `[paths]` entry in `.coveragerc`:\r\n```\r\n[run]\r\nplugins = Cython.Coverage\r\n\r\n[paths]\r\nsource =\r\n    src/\r\n    .\r\n```",
            "created_at": "2024-05-08T19:31:50Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2101285463",
            "id": 2101285463,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59PxJX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2101285463/reactions"
            },
            "updated_at": "2024-05-08T19:31:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2101285463",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The reason for this difference is that Cython is being run from the build directory\n\nIs there a reason why Cython cannot run from the main project directory here? That would seem the usual setup to me.\n",
            "created_at": "2024-05-08T20:19:32Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2101357677",
            "id": 2101357677,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59QCxt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2101357677/reactions"
            },
            "updated_at": "2024-05-08T20:19:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2101357677",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Is there a reason why Cython cannot run from the main project directory here?\r\n\r\nI don't know enough about the internals of meson/ninja to give a good answer here. Generally the idea in the design is that the build directory can be anywhere and all commands are run from the build directory. When you run meson it generates a dependency graph of commands to be run and then ninja runs them all from the same directory. It is of course possible to make a wrapper that chdir's before running `cython` but that is not needed for other compilers.\r\n\r\nTurning the question around: should the `cython` CLI not be usable in a way that does not depend on the current working directory?\r\n\r\nI could understand `cython` needing to know the directory where imports should begin (i.e. `./src` in a src-layout) but that is not the current working directory and I don't see why `cython` should need to be in a particular directory for any other reason.\r\n\r\nThis already works with `cython` apart from `__pyx_f` being set incorrectly:\r\nhttps://github.com/cython/cython/blob/45db483cbe128c29a1e9ffe9f5a4db12cf77cddd/Cython/Compiler/Scanning.py#L194-L200\r\nhttps://github.com/cython/cython/blob/45db483cbe128c29a1e9ffe9f5a4db12cf77cddd/Cython/Compiler/ModuleNode.py#L969-L971\r\nHere `basename(file_path)` is basically never the right thing to do. I can understand the desire to avoid using an absolute path but basename throws away all directory information making two files in different locations with the same name indistinguishable.\r\n\r\nThis change would make it fall back to using the import-relative path (`stuff/thing.pyx`) when writing the module file table:\r\n```diff\r\ndiff --git a/Cython/Compiler/ModuleNode.py b/Cython/Compiler/ModuleNode.py\r\nindex 67511fc..f30aab6 100644\r\n--- a/Cython/Compiler/ModuleNode.py\r\n+++ b/Cython/Compiler/ModuleNode.py\r\n@@ -968,7 +968,7 @@ class ModuleNode(Nodes.Node, Nodes.BlockNode):\r\n             for source_desc in code.globalstate.filename_list:\r\n                 file_path = source_desc.get_filenametable_entry()\r\n                 if isabs(file_path):\r\n-                    file_path = basename(file_path)  # never include absolute paths\r\n+                    file_path = source_desc.get_description() # never include absolute paths\r\n                 escaped_filename = file_path.replace(\"\\\\\", \"\\\\\\\\\").replace('\"', r'\\\"')\r\n                 escaped_filename = as_encoded_filename(escaped_filename)\r\n                 code.putln('%s,' % escaped_filename.as_c_string_literal())\r\n```\r\nWith that one change I could make everything else work outside of the Cython codebase by extending Cython's coverage plugin with one that knows where meson puts the C files.",
            "created_at": "2024-05-08T21:42:04Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2101528906",
            "id": 2101528906,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59QslK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2101528906/reactions"
            },
            "updated_at": "2024-05-08T21:42:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2101528906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Generally the idea in the design is that the build directory can be anywhere and all commands are run from the build directory.\r\n\r\nThis is basically it, and it's not specific to only Meson. CMake is pretty similar, building a project with CMake may look like:\r\n```\r\nmkdir build && cd build\r\ncmake .. <configure flags here>\r\ncmake --build . -j\r\n```\r\nI don't know enough about Bazel & co to say for sure, but I suspect they may behave similarly. \r\n\r\nIf Cython makes an implicit assumption about being run from the project root, that is in general not correct and should be avoided. It stems from a \"`distutils` is all that matters\" era where it did happen to be true.\r\n\r\n> I can understand the desire to avoid using an absolute path \r\n\r\n+1 relative paths are better especially for paths that end up in the final extensions modules (absolute paths are a hindrance to achieving reproducible builds). \r\n\r\n> With that one change I could make everything else work outside of the Cython codebase by extending Cython's coverage plugin with one that knows where meson puts the C files.\r\n\r\nNice!",
            "created_at": "2024-05-09T06:02:49Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2101999052",
            "id": 2101999052,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59SfXM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2101999052/reactions"
            },
            "updated_at": "2024-05-09T06:02:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2101999052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/98330?v=4",
                "events_url": "https://api.github.com/users/rgommers/events{/privacy}",
                "followers_url": "https://api.github.com/users/rgommers/followers",
                "following_url": "https://api.github.com/users/rgommers/following{/other_user}",
                "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rgommers",
                "id": 98330,
                "login": "rgommers",
                "node_id": "MDQ6VXNlcjk4MzMw",
                "organizations_url": "https://api.github.com/users/rgommers/orgs",
                "received_events_url": "https://api.github.com/users/rgommers/received_events",
                "repos_url": "https://api.github.com/users/rgommers/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rgommers"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> relative paths are better especially for paths that end up in the final extensions modules\r\n\r\n… or in the distributed sources. One reason why Cython tries to avoid absolute paths in the C code is to prevent leaking information about the build computer. That can easily be the machine of a random developer.\r\n\r\nAlso, the C files should generally not depend on the machine (or build system) that created it. Using relative paths from a specific build directory would contradict that goal.\r\n\r\nAdmittedly, this is difficult to achieve completely because we also store the dependencies in the C file header, which might include system header files.\r\n\r\nI understand that the current way is not optimal, but I doubt that there's the one correct way to do it.\r\n",
            "created_at": "2024-05-09T06:48:16Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2102058155",
            "id": 2102058155,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59Styr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2102058155/reactions"
            },
            "updated_at": "2024-05-09T06:48:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2102058155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I understand that the current way is not optimal, but I doubt that there's the one correct way to do it.\r\n\r\nThinking about what is \"optimal\" is hard but in my experience tooling that does not make guesses and does not use implicit assumptions is easier to maintain from the inside and easier to understand and use from the outside. From that perspective I would say that the first thing to do is make it so that all needed information can be provided explicitly and then secondly that defaults are clearly defined, documented and adhered to. From there though I would resist the temptation to guess if the defaults are incorrect in a given situation: the user is better served by an informative error message and should provide the correct information explicitly.\r\n\r\nA lot of complexity in the coverage plugin comes from trying to guess information that could have easily been supplied by the user if any mechanism were provided for them to do so. It is difficult to change anything now without breaking someone's workflow though. Once guessing is already implemented as part of the documented way of doing things then people will depend on it and will expect the guessing to be extended indefinitely to cover their different scenarios any time it fails.\r\n\r\nFor the `cython` CLI the \"optimal\" thing in my opinion would be something like:\r\n```\r\ncython path/to/src/foo.pyx -o otherpath/to/foo.c --base-dir=path/to/src\r\n```\r\nThen all paths recorded in output are relative to `--base-dir`. The effect of CWD should just be that relative paths provided in the CLI are relative to CWD (as usual) and that the *default* value of `--base-dir` is CWD. I'm not sure if this could be implemented in a non-breaking way though. Currently `cython` implicitly guesses that `src` is the `--base-dir` for some purposes but uses CWD for others. If you don't have a `src`-layout and you always run with CWD as project root then there is no distinction. Once you have sources in a subdirectory and/or run from different CWD the equivalence breaks and currently there is no explicit way to control what `cython` does if its implicit assumptions don't hold.\r\n\r\nI have suggested changing the `basename` path as a least resistance approach because it is unambiguously incorrect so if someone is depending on it then a change is at least clearly defensible if the pitchforks come out. It still means though that the paths depend on the current working directory (whether the source file is under CWD or not) which I would say is not optimal.",
            "created_at": "2024-05-09T11:48:02Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2102510753",
            "id": 2102510753,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59UcSh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2102510753/reactions"
            },
            "updated_at": "2024-05-09T11:48:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2102510753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Currently cython implicitly guesses that src is the --base-dir for some purposes but uses CWD for others.\n\nIt doesn't guess here, it follows the package directory structure up to the root package. Whether that's inside of a src, source, sources or whatever directory, or right in the project root, does not matter. What matters is the fully qualified module name.\n\nIt really only looks at the CWD and the main package directory.\n\nThat said, I'll consider using relative paths for files in foreign directories. One issue is where to stop. There isn't really a difference between\n../src/pkg/module.py\nand\n../../../../../usr/lib/python3.10/site-packages/somepkg/module.pxd\nThe letter seems best represented with an absolute path. Anything in the middle is more or less unclear.\n",
            "created_at": "2024-05-09T17:59:25Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2103157847",
            "id": 2103157847,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59W6RX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2103157847/reactions"
            },
            "updated_at": "2024-05-09T17:59:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2103157847",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "I suppose guess is the wrong word for how `cython` finds the base path for the package structure. Precisely what it does is to walk up starting from the directory containing the main `.pyx` file looking for `__init__.py` (or `.pyc` etc) files until it finds the first directory that does not look like a package. That is well defined and is what allows `cython` to compile files correctly in a `src`-layout when run with CWD as project root.\r\n\r\nA directory does not need `__init__.py` to be a package after PEP 420 (implicit namespace packages) so this is still somewhat a heuristic that would fail in certain conditions. There is a way to override this with `--module-name stuff.thing` though which is less convenient than `--base-dir=src` but does work.\r\n\r\n> It really only looks at the CWD and the main package directory.\r\n\r\nYes and this means if CWD is not a suitable location then relative paths have to be relative to the package directory. That is what the diff I suggested [above](https://github.com/cython/cython/issues/6186#issuecomment-2101528906)  does: if the main `.pyx` is file is not anywhere under CWD then use paths relative to the package directory. That means that if we do\r\n```\r\ncd build && cython ../src/stuff/thing.pyx -o thing.pyx.c\r\n```\r\nthen we get a file `build/thing.pyx.c` with the `__pyx_f` path set as\r\n```c\r\nstatic const char *__pyx_f[] = {\r\n  \"stuff/thing.pyx\",\r\n};\r\n```\r\nThese relative paths would be found by coverage when running at project root and by default coverage would treat that as meaning `/path/to/proj/stuff/thing.pyx` which is not correct. We can also tell coverage about the src dir with:\r\n```\r\n[run]\r\nplugins = Cython.Coverage\r\n\r\n[paths]\r\nsource =\r\n    src/\r\n    .\r\n```\r\nand then coverage will find `/path/to/proj/src/stuff/thing.pyx` and send that path to Cython's coverage plugin.\r\n\r\nAt that point Cython's coverage plugin would not know how to find `build/thing.pyx.c`. What we can do though is:\r\n```\r\n[run]\r\nplugins = spin.cython_coverage_plugin\r\n```\r\nThen spin's coverage plugin can find and parse all `.pyx.c` files in the build directory at load time. The plugin will then already know about all of the `.pyx` etc files when coverage sends the paths through to its `file_reporter()` method.",
            "created_at": "2024-05-10T15:52:01Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2104842388",
            "id": 2104842388,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc59dViU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2104842388/reactions"
            },
            "updated_at": "2024-05-10T15:52:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2104842388",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "I keep meaning to open a PR for this but each time I try I find that Cython's master branch cannot build python-flint. First it was gh-6183 and now it is gh-6332.",
            "created_at": "2024-08-07T22:22:36Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2274449219",
            "id": 2274449219,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc6HkVdD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2274449219/reactions"
            },
            "updated_at": "2024-08-07T22:22:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2274449219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "I've opened a PR gh-6341 to fix the paths here.\r\n\r\nIn combination with https://github.com/flintlib/python-flint/pull/188 that makes it possible to measure coverage of Cython code in a meson build.",
            "created_at": "2024-08-15T16:45:14Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2291698966",
            "id": 2291698966,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc6ImI0W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2291698966/reactions"
            },
            "updated_at": "2024-08-15T16:45:14Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2291698966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Since @rgommers brought up CMake earlier, I'll note that I observed very similar issues with using scikit-build (CMake) in the past https://groups.google.com/u/1/g/cython-users/c/F2m7uV4GAIo and I'd expect the same with scikit-build-core, although I haven't tested that specifically. I didn't get nearly as far in my investigations of a fix though, so nice work here!",
            "created_at": "2024-08-16T00:57:35Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2292529236",
            "id": 2292529236,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc6IpThU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2292529236/reactions"
            },
            "updated_at": "2024-08-16T00:57:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2292529236",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "NONE",
            "body": "> In the past https://groups.google.com/u/1/g/cython-users/c/F2m7uV4GAIo\r\n\r\nThe issue you describe there is precisely the use of basename I identified above. It should be fixed in gh-6341.",
            "created_at": "2024-08-16T01:12:03Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2292541198",
            "id": 2292541198,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc6IpWcO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2292541198/reactions"
            },
            "updated_at": "2024-08-16T01:12:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2292541198",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Cool, thanks. Based on the additional points you raise on #6341 regarding the custom plugin that you built in flint to make Cython coverage work for meson, I'm assuming something similar will be needed for scikit-build(-core).",
            "created_at": "2024-08-16T01:26:20Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2292551945",
            "id": 2292551945,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc6IpZEJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2292551945/reactions"
            },
            "updated_at": "2024-08-16T01:26:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2292551945",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I'm assuming something similar will be needed for scikit-build(-core)\r\n\r\nThe approach I use in the plugin is very meson-specific because it literally parses the `build.ninja` file. I imagine something very similar could be used for CMake. Basically it is a lot easier to implement the coverage plugin if you can access a list of all the Cython-generated files (which Cython itself does not have).\r\n\r\nI simplified the plugin a bit since my previous comments and I am now a bit more optimistic that it could make sense for inclusion in Cython. I'm going to hold out on that for now though because gh-6341 is the minimum needed and with that all other problems can be solved outside of Cython if necessary.",
            "created_at": "2024-08-16T01:55:32Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2292592424",
            "id": 2292592424,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc6Ipi8o",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2292592424/reactions"
            },
            "updated_at": "2024-08-16T01:55:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2292592424",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks Oscar and Vyas! 🙏\r\n\r\nOscar, do you have more info about the plugin? IIUC this is a plug to flint for supporting Cython coverage in meson builds ( https://github.com/cython/cython/pull/6341#issuecomment-2293283075 ) or am I misunderstanding?\r\n\r\nWondering if scikit-build-core will need something similar",
            "created_at": "2024-08-16T20:17:07Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2294172798",
            "id": 2294172798,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc6Ivkx-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2294172798/reactions"
            },
            "updated_at": "2024-08-16T20:17:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2294172798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            }
        },
        {
            "author_association": "NONE",
            "body": "You can see the plugin and all of the code for it here:\r\nhttps://github.com/flintlib/python-flint/pull/188\r\n\r\nIt makes is possible to measure coverage in python-flint which is a Cython-based codebase. It would be possible to generalise it to be suitable to any meson project.\r\n\r\nAll the plugin needs to do here is find the C files and then parse them to make a mapping from trace events in the C code to line numbers in the source files. In the case of a meson build this is easy to do because the meson build configuration already tells us where the C files are:\r\nhttps://github.com/flintlib/python-flint/blob/ba1a7fe20ce8a4798896219c449b2ebc381c625a/coverage_plugin.py#L28-L61\r\n\r\nI assume that for cmake it is just as simple as it is for meson. Basically you can read the build config somehow or run cmake to get it to tell you where all the Cython-generated C files are. If so it would not be hard to extend the plugin I wrote to work for CMake as well.\r\n\r\nThe Cython plugin is more complicated because it does not know where the files are or how many files there are. It waits for trace events and then tries to search around for the files one at a time, heuristically guessing the path of a .c file from the path of a .pyx file:\r\nhttps://github.com/cython/cython/blob/1d7100d867a8b64b6f661009ec2ed45a4d8d5dba/Cython/Coverage.py#L68-L108\r\nhttps://github.com/cython/cython/blob/1d7100d867a8b64b6f661009ec2ed45a4d8d5dba/Cython/Coverage.py#L186-L251\r\nThis also complicates the plugin because it needs to manage receiving, combining and caching information asynchronously. The plugin I wrote just begins by parsing all the files and processing all of the data because it knows which files to parse from the outset.\r\n\r\nAll the heuristics used in Cython's coverage plugin ultimately fail anyway for a meson build or src-layouts or other things as they are all implicitly designed around certain ways of using setuptools. Well meaning people have invested a lot into trying to make the coverage plugin work without the user providing any of the information that it needs but it still doesn't work in many cases and will never fully work on that basis. The proper solution is quite simple: have the user provide the list of .c files somehow.",
            "created_at": "2024-08-16T21:35:04Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2294343963",
            "id": 2294343963,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc6IwOkb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2294343963/reactions"
            },
            "updated_at": "2024-08-16T21:35:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2294343963",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thank you for that detailed insight Oscar! 🙏\r\n\r\nThink you are right about the challenges with measuring coverage in Cython. Recall this being a bumpy road even to get to the current state\r\n\r\n> The proper solution is quite simple: have the user provide the list of .c files somehow.\r\n\r\nThink this insight is key. Am wondering about a variation of this. Could we just point Cython to the right directory for C/C++ files (assuming the layout within will be similar to the original Cython source directory)?",
            "created_at": "2024-08-16T23:13:25Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2294432253",
            "id": 2294432253,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc6IwkH9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2294432253/reactions"
            },
            "updated_at": "2024-08-16T23:13:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2294432253",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Could we just point Cython to the right directory for C/C++ files (assuming the layout within will be similar to the original Cython source directory)?\r\n\r\nThe assumption about similar layout does not hold. I showed a simpler example above (https://github.com/cython/cython/issues/6186#issuecomment-2099397259) but here is a small snippet of how the build directory looks for python-flint:\r\n```console\r\n$ tree build/src\r\nbuild/src\r\n└── flint\r\n    ├── flint_base\r\n    │   ├── flint_base.cpython-312-x86_64-linux-gnu.so\r\n    │   ├── flint_base.cpython-312-x86_64-linux-gnu.so.p\r\n    │   │   ├── meson-generated_src_flint_flint_base_flint_base.pyx.c.o\r\n    │   │   └── src\r\n    │   │       └── flint\r\n    │   │           └── flint_base\r\n    │   │               ├── flint_base.pyx.c\r\n    │   │               └── flint_base.pyx.c.dep\r\n    │   ├── flint_context.cpython-312-x86_64-linux-gnu.so\r\n    │   └── flint_context.cpython-312-x86_64-linux-gnu.so.p\r\n    │       ├── meson-generated_src_flint_flint_base_flint_context.pyx.c.o\r\n    │       └── src\r\n    │           └── flint\r\n    │               └── flint_base\r\n    │                   ├── flint_context.pyx.c\r\n    │                   └── flint_context.pyx.c.dep\r\n    ├── functions\r\n    │   ├── showgood.cpython-312-x86_64-linux-gnu.so\r\n    │   └── showgood.cpython-312-x86_64-linux-gnu.so.p\r\n    │       ├── meson-generated_src_flint_functions_showgood.pyx.c.o\r\n    │       └── src\r\n    │           └── flint\r\n    │               └── functions\r\n    │                   ├── showgood.pyx.c\r\n    │                   └── showgood.pyx.c.dep\r\n...\r\n```\r\nBy contrast this is how the source tree looks:\r\n```console\r\n$ tree src\r\nsrc\r\n└── flint\r\n    ├── flint_base\r\n    │   ├── flint_base.pxd\r\n    │   ├── flint_base.pyx\r\n    │   ├── flint_context.pxd\r\n    │   ├── flint_context.pyx\r\n    │   ├── __init__.py\r\n    │   └── meson.build\r\n    ├── flintlib\r\n    │   ├── acb_calc.pxd\r\n    │   ├── acb_dft.pxd\r\n    │   ├── acb_dirichlet.pxd\r\n    │   ├── acb_elliptic.pxd\r\n    │   ├── acb_hypgeom.pxd\r\n    │   ├── acb_mat.pxd\r\n    │   ├── acb_modular.pxd\r\n...\r\n```\r\nThe build directory has a completely different layout. That is not a problem though because all of the paths to all if the files in build directory are spelled out explicitly in the build config:\r\n```console\r\n$ cat build/build.ninja \r\n# This is the build file for project \"python-flint\"\r\n# It is autogenerated by the Meson build system.\r\n# Do not edit by hand.\r\n\r\n...\r\n\r\n# Build rules for targets\r\n\r\nbuild src/flint/pyflint.cpython-312-x86_64-linux-gnu.so.p/src/flint/pyflint.pyx.c: cython_COMPILER /home/oscar/current/active/python-flint/src/flint/pyflint.pyx\r\n ARGS = --fast-fail -3 -X embedsignature=True -X emit_code_comments=True\r\n\r\nbuild src/flint/pyflint.cpython-312-x86_64-linux-gnu.so.p/meson-generated_src_flint_pyflint.pyx.c.o: c_COMPILER src/flint/pyflint.cpython-312-x86_64-linux-gnu.so.p/src/flint/pyflint.pyx.c\r\n DEPFILE = src/flint/pyflint.cpython-312-x86_64-linux-gnu.so.p/meson-generated_src_flint_pyflint.pyx.c.o.d\r\n DEPFILE_UNQUOTED = src/flint/pyflint.cpython-312-x86_64-linux-gnu.so.p/meson-generated_src_flint_pyflint.pyx.c.o.d\r\n ARGS = -Isrc/flint/pyflint.cpython-312-x86_64-linux-gnu.so.p -Isrc/flint -I../src/flint -I/home/oscar/.pyenv/versions/3.12.0/include/python3.12 -I/home/oscar/current/active/python-flint/.local/include -fvisibility=hidden -fdiagnostics-color=always -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -O0 -g -fPIC\r\n\r\nbuild src/flint/pyflint.cpython-312-x86_64-linux-gnu.so.p/pyflint.cpython-312-x86_64-linux-gnu.so.symbols: SHSYM src/flint/pyflint.cpython-312-x86_64-linux-gnu.so\r\n IMPLIB = src/flint/pyflint.cpython-312-x86_64-linux-gnu.so\r\n\r\nbuild src/flint/pyflint.cpython-312-x86_64-linux-gnu.so: c_LINKER src/flint/pyflint.cpython-312-x86_64-linux-gnu.so.p/meson-generated_src_flint_pyflint.pyx.c.o | /home/oscar/current/active/python-flint/.local/lib/libflint.so /home/oscar/current/active/python-flint/.local/lib/libgmp.so /home/oscar/current/active/python-flint/.local/lib/libmpfr.so\r\n LINK_ARGS = -Wl,--as-needed -Wl,--allow-shlib-undefined -shared -fPIC -Wl,-rpath=/home/oscar/current/active/python-flint/.local/lib '-Wl,-rpath,$$ORIGIN/../../../.local/lib' -Wl,-rpath-link,/home/oscar/current/active/python-flint/build/../.local/lib -Wl,--start-group /home/oscar/current/active/python-flint/.local/lib/libgmp.so /home/oscar/current/active/python-flint/.local/lib/libmpfr.so /home/oscar/current/active/python-flint/.local/lib/libflint.so -Wl,--end-group\r\n\r\nbuild src/flint/flint_base/flint_base.cpython-312-x86_64-linux-gnu.so.p/src/flint/flint_base/flint_base.pyx.c: cython_COMPILER /home/oscar/current/active/python-flint/src/flint/flint_base/flint_base.pyx\r\n ARGS = --fast-fail -3 -X embedsignature=True -X emit_code_comments=True\r\n\r\n...\r\n```\r\nThe plugin I made just parses `build.ninja` and looks for lines of the form\r\n```\r\nbuild some/path/thing.pyx.c cython_COMPILER /.../thing.pyx\r\n```\r\nIt then knows that `some/path/thing.pyx.c` is the path to a cython-generated .c file relative to the build directory. Once it has the paths to all cython-generated .c files it can parse them to look for the references back to the original source files. No heuristic assumptions about directory structure are made to locate the .c files or to relate them back the source files. Instead precisely two assumptions are made (and these could be configured for the plugin):\r\n\r\n1. The project uses meson and `build/build.ninja` lists the paths to all Cython-generated .c files.\r\n2. The paths to cython source files in the .c files are import-relative paths that in python-flint's case should be understood as being relative to the `src` dir within the codebase.\r\n\r\nThese two pieces of information could be provided in `pyproject.toml` or `.coveragerc`. Otherwise the plugin makes no assumptions about layout or anything else.\r\n\r\nNote though that point 2. requires that Cython generate the correct paths in the generated C code: hence gh-6341,",
            "created_at": "2024-08-16T23:36:41Z",
            "html_url": "https://github.com/cython/cython/issues/6186#issuecomment-2294450423",
            "id": 2294450423,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6186",
            "node_id": "IC_kwDOABDGAc6Iwoj3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2294450423/reactions"
            },
            "updated_at": "2024-08-17T00:03:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2294450423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        }
    ],
    "comments": 28,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6186/comments",
    "created_at": "2024-05-06T15:26:00Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-05-12T16:18:06Z",
            "event": "subscribed",
            "id": 12778964267,
            "node_id": "SE_lADOABDGAc6H94L4zwAAAAL5r4Ur",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/12778964267"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/98330?v=4",
                "events_url": "https://api.github.com/users/rgommers/events{/privacy}",
                "followers_url": "https://api.github.com/users/rgommers/followers",
                "following_url": "https://api.github.com/users/rgommers/following{/other_user}",
                "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rgommers",
                "id": 98330,
                "login": "rgommers",
                "node_id": "MDQ6VXNlcjk4MzMw",
                "organizations_url": "https://api.github.com/users/rgommers/orgs",
                "received_events_url": "https://api.github.com/users/rgommers/received_events",
                "repos_url": "https://api.github.com/users/rgommers/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rgommers"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-08-16T00:57:36Z",
            "event": "mentioned",
            "id": 13904542093,
            "node_id": "MEE_lADOABDGAc6H94L4zwAAAAM8xnmN",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13904542093"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/98330?v=4",
                "events_url": "https://api.github.com/users/rgommers/events{/privacy}",
                "followers_url": "https://api.github.com/users/rgommers/followers",
                "following_url": "https://api.github.com/users/rgommers/following{/other_user}",
                "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rgommers",
                "id": 98330,
                "login": "rgommers",
                "node_id": "MDQ6VXNlcjk4MzMw",
                "organizations_url": "https://api.github.com/users/rgommers/orgs",
                "received_events_url": "https://api.github.com/users/rgommers/received_events",
                "repos_url": "https://api.github.com/users/rgommers/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rgommers"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-08-16T00:57:36Z",
            "event": "subscribed",
            "id": 13904542097,
            "node_id": "SE_lADOABDGAc6H94L4zwAAAAM8xnmR",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13904542097"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6186/events",
    "html_url": "https://github.com/cython/cython/issues/6186",
    "id": 2281145080,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6186/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6H94L4",
    "number": 6186,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6186/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6186/timeline",
    "title": "Coverage measurement of Cython code in a meson build",
    "updated_at": "2024-08-17T00:03:21Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6186",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
        "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
        "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
        "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
        "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/oscarbenjamin",
        "id": 1159732,
        "login": "oscarbenjamin",
        "node_id": "MDQ6VXNlcjExNTk3MzI=",
        "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
        "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
        "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/oscarbenjamin"
    }
}