{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Describe your issue\n\n```python\r\n# SomeAwaitable is somewhat irrelevant to the example here... just to have something for `f` to await.\r\nclass SomeAwaitable:\r\n    def __await__(self):\r\n        return iter([None, None, None])\r\n\r\nasync def f():\r\n    await SomeAwaitable()\r\n\r\ndef g():\r\n    yield from f()\r\n```\r\n\r\nIn Python, doing `list(g())` reports\r\n\r\n```\r\n    yield from f()\r\nTypeError: cannot 'yield from' a coroutine object in a non-coroutine generator\r\n```\r\n\r\nIn Cython it runs and returns `[None, None, None]`.\r\n\r\nThis is because `yield from` and `await` completely share an implementation, and it has a shortcut in it for handling coroutines (in principle `await` should call `__await__` on the coroutine and then yield-from that, but in practice it skips that step.\r\n\r\n(Found while looking at #6613, and what's causing the various special-cases to be taken)",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6614/comments",
    "created_at": "2025-01-13T08:21:13Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6614/events",
    "html_url": "https://github.com/cython/cython/issues/6614",
    "id": 2783305066,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6614/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6l5d1q",
    "number": 6614,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6614/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6614/timeline",
    "title": "[BUG] \"yield from\" accepts coroutines when it probably shouldn't",
    "updated_at": "2025-01-13T08:21:13Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6614",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods",
        "user_view_type": "public"
    }
}