{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Hello, I noticed some strange crash when using the `Py_buffer` objects together with `__new__` constructor of extension types:\r\nHere is the matter: I use the `__new__` function of a `WrapperClass` as detailed [in the doc](https://cython.readthedocs.io/en/latest/src/userguide/extension_types.html#existing-pointers-instantiation)\r\nand the `WrapperClass` has a member which is a `Py_buffer`\r\n\r\n```python\r\nfrom cpython cimport PyObject, PyTypeObject, Py_buffer\r\nfrom cpython.buffer cimport PyBUF_SIMPLE, PyObject_CheckBuffer, PyObject_GetBuffer, PyBuffer_Release\r\n\r\n\r\ncdef class WrapperClass:\r\n\t''' A wrapper class for a C/C++ data structure '''\r\n\t\r\n\tcdef Py_buffer view\r\n\t\r\n\tdef __init__(self, buffer):\r\n\t\t''' build the object from a buffer (using __init__) '''\r\n\t\tif not PyObject_CheckBuffer(buffer):\r\n\t\t\traise TypeError('the input object must support the buffer protocol')\r\n\t\t\r\n\t\tPyObject_GetBuffer(buffer, &self.view, PyBUF_SIMPLE)\r\n\r\n\tdef __dealloc__(self):\r\n\t\tPyBuffer_Release(&self.view)\r\n\r\n\t@property\r\n\tdef ptr(self):\r\n\t\treturn <size_t>self.view.buf\r\n\t\t\r\n\t@property\r\n\tdef size(self):\r\n\t\treturn <size_t>self.view.len\r\n\t\t\r\n\t@staticmethod\r\n\tcdef WrapperClass from_raw(void * ptr, size_t size, owner):\r\n\t\t\"\"\"Factory function to create WrapperClass objects from given my_c_struct pointer.\r\n\r\n\t\t\tSetting ``owner`` flag to ``True`` causes the extension type to ``free`` the structure pointed to by ``_ptr`` when the wrapper object is deallocated.\r\n\t\t\"\"\"\r\n\t\t# Call to __new__ bypasses __init__ constructor\r\n\t\tcdef WrapperClass wrapper = WrapperClass.__new__(WrapperClass)\r\n\t\twrapper.view.buf = ptr\r\n\t\twrapper.view.len = size\r\n\t\twrapper.view.obj = owner\r\n\t\twrapper.view.itemsize = 1\r\n\t\twrapper.view.ndim = 1\r\n\t\twrapper.view.format = 'B'\r\n\t\treturn wrapper\r\n\r\n\r\ndef build_wrapped(buffer):\r\n\t''' build the object from a buffer (the same but using __new__ instead of __init__)'''\r\n\t\r\n\t# in this example, the buffer is taken the same way __init__ is doing, but in my real project I do get it from an other source ... this is not changing the issue\r\n\tcdef Py_buffer view\r\n\tif not PyObject_CheckBuffer(buffer):\r\n\t\traise TypeError('the input object must support the buffer protocol')\r\n\t\r\n\tPyObject_GetBuffer(buffer, &view, PyBUF_SIMPLE)\r\n\t\r\n\tcdef WrapperClass wrapped = WrapperClass.from_raw(view.buf, view.len, view.obj)\r\n\treturn wrapped\r\n```\r\nSo this class can be built using 2 different ways:\r\n- using the constructor `__init__`\r\n- using its static method `from_raw`\r\n\r\nsetting its fields attributes only works well in the 1st case:\r\n\r\n```python\r\nfrom extension_type import WrapperClass, build_wrapped\r\n\r\n# build the object using __init__\r\nw1 = WrapperClass(b'a protocol-compatible object')\r\nprint('w1', w1.ptr, w1.size)\r\n\r\n# build the object using __new__ then filling the fields\r\nw2 = build_wrapped(b'a protocol-compatible object')\r\nprint('w2', w2.ptr, w2.size)\r\n```\r\noutput:\r\n```\r\nw1 139932419840976 28\r\nSegmentation fault (core dumped)\r\n```\r\nSo the second methods is crashing (It seems even to always crash at setting `view->obj` at the INCREF/DECREF/GOTREF/... operations)  \r\n\r\nI would expect these 2 methodesto  be roughly equivalent to build a `WrapperClass`\r\nIt seems that when the object is build using `__new__` the attributes cannot be set to an object, or is there anything wrong in my use of it ?\r\n\r\nI'm using \r\n- Ubuntu/Linux latest\r\n- Python 3.8.5  (from repo)\r\n- Cython 0.29.22  (from pip)\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "By the way, I didn't realized there was so few people working on that project. That's really an amazing job ! congratulation !",
            "created_at": "2021-03-14T15:43:40Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-798929213",
            "id": 798929213,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODkyOTIxMw==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T15:43:40Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798929213",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7940753?v=4",
                "events_url": "https://api.github.com/users/jimy-byerley/events{/privacy}",
                "followers_url": "https://api.github.com/users/jimy-byerley/followers",
                "following_url": "https://api.github.com/users/jimy-byerley/following{/other_user}",
                "gists_url": "https://api.github.com/users/jimy-byerley/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jimy-byerley",
                "id": 7940753,
                "login": "jimy-byerley",
                "node_id": "MDQ6VXNlcjc5NDA3NTM=",
                "organizations_url": "https://api.github.com/users/jimy-byerley/orgs",
                "received_events_url": "https://api.github.com/users/jimy-byerley/received_events",
                "repos_url": "https://api.github.com/users/jimy-byerley/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jimy-byerley/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jimy-byerley/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jimy-byerley"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The problem is that `Py_buffer.obj` is defined as a (ref-counted) object reference, but here it is NULL. Setting it to `owner` will assume that it's a valid reference to an object and `DECREF()` it.\r\n\r\nCython could potentially special-case this internally (I guess), but for now, I think you should do the ref-counting yourself on the first assignment, by casting to `PyObject*` and calling `INCREF()` yourself.",
            "created_at": "2021-03-14T16:02:45Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-798932334",
            "id": 798932334,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODkzMjMzNA==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T16:02:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798932334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Ah, sounds correct. But when I try to assign it as a pointer I get this:\r\n```python\r\nview.obj = <PyObject*> owner\r\n```\r\n\r\n```\r\nCannot convert 'PyObject *' to Python object\r\n```\r\nSo it seems Cython is requesting a proper `object` in the assignment. How can I assign it ?",
            "created_at": "2021-03-14T18:54:51Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-798959566",
            "id": 798959566,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODk1OTU2Ng==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T18:55:43Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798959566",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7940753?v=4",
                "events_url": "https://api.github.com/users/jimy-byerley/events{/privacy}",
                "followers_url": "https://api.github.com/users/jimy-byerley/followers",
                "following_url": "https://api.github.com/users/jimy-byerley/following{/other_user}",
                "gists_url": "https://api.github.com/users/jimy-byerley/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jimy-byerley",
                "id": 7940753,
                "login": "jimy-byerley",
                "node_id": "MDQ6VXNlcjc5NDA3NTM=",
                "organizations_url": "https://api.github.com/users/jimy-byerley/orgs",
                "received_events_url": "https://api.github.com/users/jimy-byerley/received_events",
                "repos_url": "https://api.github.com/users/jimy-byerley/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jimy-byerley/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jimy-byerley/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jimy-byerley"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "I suspect you don't want to cast it to `PyObject*` but do want to incref it first. So:\r\n\r\n```\r\nPy_INCREF(owner)\r\nwrapper.view.obj = owner\r\n```\r\n\r\nHowever, I wonder if really you shouldn't be copying `Py_buffer` element-by-element - I don't know whether CPython promises that there won't be any private fields added to the structure that could catch you out in future. Perhaps it'd make more sense to do:\r\n\r\n```\r\ncdef WrapperClass wrapped = WrapperClass.__new__(WrapperClass)\r\nPyObject_GetBuffer(buffer, &wrapped.view, PyBUF_SIMPLE)\r\nreturn wrapped\r\n```",
            "created_at": "2021-03-14T19:41:07Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-798967048",
            "id": 798967048,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODk2NzA0OA==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T19:41:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798967048",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Well I'm trying to create an arrayview structure:\r\n- it must keep the Py_buffer object alive to make sure the buffer provider will keep its hooks on, so I'm using the Py_buffer as internal data structure of the arrayview\r\n- it must be used as array slice view, so the __getitem__ of the array must provide a view pointing to a different pointer than its own, so I cannot just use the buffer from the original object\r\n\r\nThat sample code was just some minimal example of what I tried to do ... But I think I really need such a `from_ptr` method :thinking: \r\n\r\n>  suspect you don't want to cast it to `PyObject*` but do want to incref it first. So:\r\n\r\nIf the problem is that the object ref is NULL initially, then incrementing the owner ref before won't fix that cython tries to `DECREF` the initially NULL ref, right ?",
            "created_at": "2021-03-14T20:55:16Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-798978164",
            "id": 798978164,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODk3ODE2NA==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T20:55:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798978164",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7940753?v=4",
                "events_url": "https://api.github.com/users/jimy-byerley/events{/privacy}",
                "followers_url": "https://api.github.com/users/jimy-byerley/followers",
                "following_url": "https://api.github.com/users/jimy-byerley/following{/other_user}",
                "gists_url": "https://api.github.com/users/jimy-byerley/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jimy-byerley",
                "id": 7940753,
                "login": "jimy-byerley",
                "node_id": "MDQ6VXNlcjc5NDA3NTM=",
                "organizations_url": "https://api.github.com/users/jimy-byerley/orgs",
                "received_events_url": "https://api.github.com/users/jimy-byerley/received_events",
                "repos_url": "https://api.github.com/users/jimy-byerley/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jimy-byerley/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jimy-byerley/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jimy-byerley"
            }
        },
        {
            "author_association": "NONE",
            "body": "Also I tried to `Py_INCREF(owner)` before to assign it, but it still Segfault the same way",
            "created_at": "2021-03-14T20:56:41Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-798978337",
            "id": 798978337,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODk3ODMzNw==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T20:56:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798978337",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7940753?v=4",
                "events_url": "https://api.github.com/users/jimy-byerley/events{/privacy}",
                "followers_url": "https://api.github.com/users/jimy-byerley/followers",
                "following_url": "https://api.github.com/users/jimy-byerley/following{/other_user}",
                "gists_url": "https://api.github.com/users/jimy-byerley/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jimy-byerley",
                "id": 7940753,
                "login": "jimy-byerley",
                "node_id": "MDQ6VXNlcjc5NDA3NTM=",
                "organizations_url": "https://api.github.com/users/jimy-byerley/orgs",
                "received_events_url": "https://api.github.com/users/jimy-byerley/received_events",
                "repos_url": "https://api.github.com/users/jimy-byerley/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jimy-byerley/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jimy-byerley/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jimy-byerley"
            }
        },
        {
            "author_association": "NONE",
            "body": "It seems to me that filling the `Py_buffer` structure only works when in `__getbuffer__` because only then the `obj` field is set to `None` before the function starts ... what I cannot achieve in a different context.\r\n\r\nThen the only solution would be to have a way to assign that object pointer without having to deal with it as an `object`",
            "created_at": "2021-03-14T21:05:27Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-798979665",
            "id": 798979665,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODk3OTY2NQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T21:05:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798979665",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7940753?v=4",
                "events_url": "https://api.github.com/users/jimy-byerley/events{/privacy}",
                "followers_url": "https://api.github.com/users/jimy-byerley/followers",
                "following_url": "https://api.github.com/users/jimy-byerley/following{/other_user}",
                "gists_url": "https://api.github.com/users/jimy-byerley/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jimy-byerley",
                "id": 7940753,
                "login": "jimy-byerley",
                "node_id": "MDQ6VXNlcjc5NDA3NTM=",
                "organizations_url": "https://api.github.com/users/jimy-byerley/orgs",
                "received_events_url": "https://api.github.com/users/jimy-byerley/received_events",
                "repos_url": "https://api.github.com/users/jimy-byerley/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jimy-byerley/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jimy-byerley/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jimy-byerley"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> If the problem is that the object ref is NULL initially, then incrementing the owner ref before won't fix that cython tries to DECREF the initially NULL ref, right ?\r\n\r\nYou're right. I managed to miss that.\r\n\r\nI think Py_Buffer is pretty special-cased (normally we don't allow `object` to be attributes of a struct because it ends up unclear what Cython has to reference-count). That does make it pretty hard to come up with a good solution to this.",
            "created_at": "2021-03-14T21:08:28Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-798980106",
            "id": 798980106,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODk4MDEwNg==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T21:08:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798980106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hum, but why is `Py_buffer.obj` typed as `object` ?\r\nIt should be a PyObject* in the exact CPython header, so it's been redefined by cython as `object` right ?\r\n\r\nWould it make sense that `Py_buffer.obj` would be typed as `PyObject*` as it would be in any user-defined C-structure ?\r\nOr eventually to have `Pyx_DECREF` check for possible NULL pointers ?\r\n\r\nI'm just considering ..",
            "created_at": "2021-03-14T21:13:45Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-798980910",
            "id": 798980910,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODk4MDkxMA==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T21:13:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798980910",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7940753?v=4",
                "events_url": "https://api.github.com/users/jimy-byerley/events{/privacy}",
                "followers_url": "https://api.github.com/users/jimy-byerley/followers",
                "following_url": "https://api.github.com/users/jimy-byerley/following{/other_user}",
                "gists_url": "https://api.github.com/users/jimy-byerley/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jimy-byerley",
                "id": 7940753,
                "login": "jimy-byerley",
                "node_id": "MDQ6VXNlcjc5NDA3NTM=",
                "organizations_url": "https://api.github.com/users/jimy-byerley/orgs",
                "received_events_url": "https://api.github.com/users/jimy-byerley/received_events",
                "repos_url": "https://api.github.com/users/jimy-byerley/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jimy-byerley/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jimy-byerley/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jimy-byerley"
            }
        },
        {
            "author_association": "NONE",
            "body": "We can also anticipate that issue to appear on cython extension types that contain fields typed `object` when the extension type instance is created using `__new__` that leaves all fields null (thus not None as when cython initialize it)",
            "created_at": "2021-03-14T21:39:00Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-798984739",
            "id": 798984739,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODk4NDczOQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T21:44:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798984739",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7940753?v=4",
                "events_url": "https://api.github.com/users/jimy-byerley/events{/privacy}",
                "followers_url": "https://api.github.com/users/jimy-byerley/followers",
                "following_url": "https://api.github.com/users/jimy-byerley/following{/other_user}",
                "gists_url": "https://api.github.com/users/jimy-byerley/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jimy-byerley",
                "id": 7940753,
                "login": "jimy-byerley",
                "node_id": "MDQ6VXNlcjc5NDA3NTM=",
                "organizations_url": "https://api.github.com/users/jimy-byerley/orgs",
                "received_events_url": "https://api.github.com/users/jimy-byerley/received_events",
                "repos_url": "https://api.github.com/users/jimy-byerley/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jimy-byerley/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jimy-byerley/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jimy-byerley"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> We can also anticipate that issue to appear on cython extension types that contain fields typed `object` when the extension type instance is created using `__new__` that leaves all fields null (thus not None as when cython initialize it)\r\n\r\nNo - that doesn't happen. Extension type attributes are automatically initialized to `None` in `tp_new`\r\n\r\n> Would it make sense that Py_buffer.obj would be typed as PyObject* as it would be in any user-defined C-structure ?\r\nOr eventually to have Pyx_DECREF check for possible NULL pointers ?\r\n\r\nThe disadvantage of typing it as `PyObject*` is that the standard user-usecase inside `__getbuffer__` would then require manual reference counting (and break existing code). `XDECREF` might be better - as far as I'm aware this is the only place Cython uses an `object` in a struct.\r\n\r\n-------------------\r\n\r\nI think you could get away with defining a small C helper function to do the assigment\r\n\r\n```\r\n# untested\r\ncdef extern from *:\r\n    \"\"\"\r\n    void assign_buffer_obj(Py_Buffer* buf, PyObject* o) {\r\n        Py_INCREF(o);\r\n        buf->obj = o;\r\n    }\r\n    \"\"\"\r\n    void assign_buffer_obj(Py_Buffer* buf, object o)\r\n```\r\n\r\nI still think it'd be better not to be manually assigning buffer fields, but I'll take your word that you don't want to do that.",
            "created_at": "2021-03-14T21:54:00Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-798986837",
            "id": 798986837,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODk4NjgzNw==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-14T21:54:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/798986837",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "I came to the same conclusion for the C function ;)\r\nthanks for that piece it's nice to have it inside my pyx file.\r\nI just tried and it works ! still I feel strange to use a helper just to set a value.\r\n\r\n> I still think it'd be better not to be manually assigning buffer fields,\r\n\r\nI'm doing so for the sakes of memory safety:  \r\nwhen the Py_buffer is released, the buffer provider __releasebuffer__ method will acknowledge that it can now free the pointed memory. To avoid that, I'm try to keep the Py_buffer alive as long as I use the memory pointed. \r\nSo as the arrayview has to contain that structure, I thought it would be better to use it as the arrayview ptr, which must be able to be set to whatever pointer and length inside the buffer ....\r\n\r\nDo you have a better option ?",
            "created_at": "2021-03-15T07:43:01Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-799192548",
            "id": 799192548,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTE5MjU0OA==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-15T07:43:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/799192548",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7940753?v=4",
                "events_url": "https://api.github.com/users/jimy-byerley/events{/privacy}",
                "followers_url": "https://api.github.com/users/jimy-byerley/followers",
                "following_url": "https://api.github.com/users/jimy-byerley/following{/other_user}",
                "gists_url": "https://api.github.com/users/jimy-byerley/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jimy-byerley",
                "id": 7940753,
                "login": "jimy-byerley",
                "node_id": "MDQ6VXNlcjc5NDA3NTM=",
                "organizations_url": "https://api.github.com/users/jimy-byerley/orgs",
                "received_events_url": "https://api.github.com/users/jimy-byerley/received_events",
                "repos_url": "https://api.github.com/users/jimy-byerley/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jimy-byerley/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jimy-byerley/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jimy-byerley"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "My alternative suggestion was to only modify the `Py_Buffer` that's part of your class. Thus\r\n\r\n```\r\ndef build_wrapped(buffer):\r\n    if not PyObject_CheckBuffer(buffer):\r\n\t\traise TypeError('the input object must support the buffer protocol')\r\n    cdef WrapperClass wrapped = WrapperClass.__new__(WrapperClass)\r\n    PyObject_GetBuffer(buffer, &wrapped.view, PyBUF_SIMPLE)\r\n    return wrapped\r\n```\r\n\r\nThere may be other issues that I'm missing, in which case I really don't have any suggestions\r\n",
            "created_at": "2021-03-15T18:33:48Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-799653832",
            "id": 799653832,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTY1MzgzMg==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-15T18:33:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/799653832",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Okay, got it ^^\r\nWell thanks for your help, [my module](https://github.com/jimy-byerley/arrex/blob/main/arrex/_arrex.pyx) is now working :+1: \r\n",
            "created_at": "2021-03-15T20:25:58Z",
            "html_url": "https://github.com/cython/cython/issues/4034#issuecomment-799727594",
            "id": 799727594,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4034",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTcyNzU5NA==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-15T20:25:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/799727594",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7940753?v=4",
                "events_url": "https://api.github.com/users/jimy-byerley/events{/privacy}",
                "followers_url": "https://api.github.com/users/jimy-byerley/followers",
                "following_url": "https://api.github.com/users/jimy-byerley/following{/other_user}",
                "gists_url": "https://api.github.com/users/jimy-byerley/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jimy-byerley",
                "id": 7940753,
                "login": "jimy-byerley",
                "node_id": "MDQ6VXNlcjc5NDA3NTM=",
                "organizations_url": "https://api.github.com/users/jimy-byerley/orgs",
                "received_events_url": "https://api.github.com/users/jimy-byerley/received_events",
                "repos_url": "https://api.github.com/users/jimy-byerley/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jimy-byerley/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jimy-byerley/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jimy-byerley"
            }
        }
    ],
    "comments": 14,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4034/comments",
    "created_at": "2021-03-14T15:40:15Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4034/events",
    "html_url": "https://github.com/cython/cython/issues/4034",
    "id": 831187055,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4034/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU4MzExODcwNTU=",
    "number": 4034,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[BUG] initialization of extension type with buffer view after `__new__` makes Segfaults",
    "updated_at": "2021-03-15T20:25:58Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4034",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7940753?v=4",
        "events_url": "https://api.github.com/users/jimy-byerley/events{/privacy}",
        "followers_url": "https://api.github.com/users/jimy-byerley/followers",
        "following_url": "https://api.github.com/users/jimy-byerley/following{/other_user}",
        "gists_url": "https://api.github.com/users/jimy-byerley/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jimy-byerley",
        "id": 7940753,
        "login": "jimy-byerley",
        "node_id": "MDQ6VXNlcjc5NDA3NTM=",
        "organizations_url": "https://api.github.com/users/jimy-byerley/orgs",
        "received_events_url": "https://api.github.com/users/jimy-byerley/received_events",
        "repos_url": "https://api.github.com/users/jimy-byerley/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jimy-byerley/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jimy-byerley/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jimy-byerley"
    }
}