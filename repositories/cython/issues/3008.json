{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "In some cases it can be useful to wrap up some C level details into a Python object. This can be handy for Python users to pass around without needing to be concerned about the C level details. Also it can be useful for different C libraries that need to interact at this lower level.\r\n\r\nFor example `memoryview`s are a nice, common demonstration of this use case. Though not all use cases map to a `memoryview`. Sometimes we need to roll our own solution for this problem.\r\n\r\nTake for instance the use case of sharing a pointer between two libraries. Python need not be concerned with this pointer. However C libraries will definitely need access to the pointer. In these cases it would be handy to build a Python object that can be passed around in Python code. At the C level libraries can access this pointer to facilitate operations that may require it.\r\n\r\nIn the interest of solving this use case, it would be nice to write some code that looks roughly like this. However today this code won't compile as a pointer cannot be passed to `__cinit__`.\r\n\r\n```cython\r\ncdef class hdl:\r\n    cdef void* ptr\r\n\r\n    def __cinit__(self, void* new_ptr):\r\n        self.ptr = new_ptr\r\n```\r\n\r\nThis is also the subject of at least a few StackOverflow questions and [some discussion on the Python mailing list]( https://mail.python.org/pipermail/cython-devel/2012-June/002734.html ).\r\n\r\n* https://stackoverflow.com/q/18695402/3877089\r\n* https://stackoverflow.com/q/31701550/3877089\r\n* https://stackoverflow.com/q/35088883/3877089\r\n\r\nOne could work around this by changing the input to `size_t`. However this is a bit kludgy. It also may lose any type checking we might have had (supposing we want a specific pointer type).\r\n\r\n```diff\r\ndiff --git a/code.pyx b/code.pyx\r\nindex 339d4cb..2c5573b 100644\r\n--- a/code.pyx\r\n+++ b/code.pyx\r\n@@ -1,5 +1,5 @@\r\n cdef class hdl:\r\n     cdef void* ptr\r\n \r\n-    def __cinit__(self, void* new_ptr):\r\n-        self.ptr = new_ptr\r\n+    def __cinit__(self, size_t new_ptr):\r\n+        self.ptr = <void*>new_ptr\r\n```\r\n\r\nAlternatively one can eschew the constructor and pass in the pointer after the object is made. Though this is even more kludgy than the workaround above and shifts more of the burden to users of this hand rolled object.\r\n\r\nIt would be nice to have a solution for this use case. Would be curious to hear thoughts on how best to proceed. ðŸ™‚",
    "closed_at": "2019-06-23T08:55:11Z",
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "The problem is that the constructor arguments are passed around to a number of methods through Python's object code in rather specific ways - the magic methods always receive them in a tuple and dict. So the arguments must be passed in as Python objects to be storeable in those safely. Specifically `type.__call__()` -> Cython-generated `__new__()` -> `__init__()`. All three of those are C-slots which have to have the `(PyTupleObject *args, PyDictObject *kwargs) ` signature to be stored in the type struct.\r\n\r\nThe docs actually has a [section](http://docs.cython.org/en/latest/src/userguide/extension_types.html#instantiation-from-existing-c-c-pointers) on this - what it recommends is creating a `cdef`ed factory function (`staticmethod` or module-level) that accepts the pointer, creates your object and then returns it. You'll need to then make the class itself init with a null pointer, and make sure you handle that case safely. Good idea to do that anyway though.\r\n\r\nActually though, there is a good solution for your original problem - [`PyCapsule ` objects](https://docs.python.org/3/c-api/capsule.html). These are a builtin type which wrap a single `void *` pointer, letting you safely pass those through Python code. Their main purpose is to allow cross-library API use - you can store a struct of function pointers in one, then import it from a different extension module to be able to access and call those easily. ",
            "created_at": "2019-06-21T12:09:44Z",
            "html_url": "https://github.com/cython/cython/issues/3008#issuecomment-504402831",
            "id": 504402831,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3008",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDQwMjgzMQ==",
            "updated_at": "2019-06-21T12:09:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/504402831",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think the best solution is really to make the initialisation explicit using a factory function. Cython shouldn't do any magic here to (try to) make this appear to work.",
            "created_at": "2019-06-23T08:55:11Z",
            "html_url": "https://github.com/cython/cython/issues/3008#issuecomment-504732720",
            "id": 504732720,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3008",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDczMjcyMA==",
            "updated_at": "2019-06-23T08:55:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/504732720",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3008/comments",
    "created_at": "2019-06-20T17:40:36Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-06-23T08:55:11Z",
            "event": "closed",
            "id": 2432332673,
            "node_id": "MDExOkNsb3NlZEV2ZW50MjQzMjMzMjY3Mw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2432332673"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-06-23T08:55:21Z",
            "event": "labeled",
            "id": 2432332715,
            "label": {
                "color": "fef2c0",
                "name": "support question"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDI0MzIzMzI3MTU=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2432332715"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3008/events",
    "html_url": "https://github.com/cython/cython/issues/3008",
    "id": 458785679,
    "labels": [
        {
            "color": "fef2c0",
            "default": false,
            "id": 414800623,
            "name": "support question",
            "node_id": "MDU6TGFiZWw0MTQ4MDA2MjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/support%20question"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3008/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0NTg3ODU2Nzk=",
    "number": 3008,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Passing pointers into extension type constructor",
    "updated_at": "2019-06-23T08:55:21Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3008",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
        "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
        "followers_url": "https://api.github.com/users/jakirkham/followers",
        "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
        "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jakirkham",
        "id": 3019665,
        "login": "jakirkham",
        "node_id": "MDQ6VXNlcjMwMTk2NjU=",
        "organizations_url": "https://api.github.com/users/jakirkham/orgs",
        "received_events_url": "https://api.github.com/users/jakirkham/received_events",
        "repos_url": "https://api.github.com/users/jakirkham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jakirkham"
    }
}