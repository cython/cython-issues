{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nThere are some older issues about using coverage in src layout e.g. (https://github.com/cython/cython/issues/3636) but this is specifically about using `include` to join `.pyx` files together.\r\n\r\nI have something like this:\r\n```\r\nroot/\r\n   setup.py\r\n   src/\r\n       a.pyx\r\n       b.pyx\r\n```\r\nWhere `a.pyx` includes `b.pyx` with the cython `include` statement. When compiling only `a.c` is created and not `b.c`. The `a.c` file correctly references `b.pyx` but at coverage report time the cython coverage plugin is asked to find a reporter for `b.pyx` and looks for `b.c` but doesn't find it:\r\n```console\r\n$ coverage report -m\r\nPlugin 'Cython.Coverage.Plugin' did not provide a file reporter for 'b.pyx'\r\n```\n\n### Code to reproduce the behaviour:\n\n```shell\r\n# run.sh\r\n\r\npython setup.py build_ext --inplace\r\n\r\nPYTHONPATH=src coverage run test_mod.py\r\n\r\ncoverage report -m\r\n```\r\n```\r\n# coveragerc\r\n[run]\r\nplugins = Cython.Coverage\r\n```\r\n```python\r\n# setup.py\r\nfrom setuptools import setup, Extension\r\nfrom Cython.Build import cythonize\r\n\r\nsetup(\r\n    ext_modules = cythonize(\r\n        Extension(\"mod\",\r\n            sources=['src/mod.pyx'],\r\n            define_macros = [('CYTHON_TRACE', '1')]),\r\n        compiler_directives = {'linetrace': True}\r\n    ),\r\n    package_dir={'': 'src'}\r\n)\r\n```\r\n```cython\r\n# src/mod.pyx \r\ninclude \"stuff.pyx\"\r\n```\r\n```cython\r\n# src/stuff.pyx \r\ndef function():\r\n    print('stuff')\r\n```\r\n```python\r\n# test_mod.py \r\nfrom mod import function\r\n\r\nfunction()\r\n```\n\n### Expected behaviour\n\nThe example code shown fails non-deterministically e.g.:\r\n```console\r\n$ ./run.sh \r\nrunning build_ext\r\ncopying build/lib.linux-x86_64-3.8/mod.cpython-38-x86_64-linux-gnu.so -> src\r\nstuff\r\nName            Stmts   Miss  Cover   Missing\r\n---------------------------------------------\r\nsrc/mod.pyx         1      0   100%\r\nsrc/stuff.pyx       2      1    50%   1\r\ntest_mod.py         2      0   100%\r\n---------------------------------------------\r\nTOTAL               5      1    80%\r\n$ ./run.sh \r\nrunning build_ext\r\ncopying build/lib.linux-x86_64-3.8/mod.cpython-38-x86_64-linux-gnu.so -> src\r\nstuff\r\nPlugin 'Cython.Coverage.Plugin' did not provide a file reporter for '.../tmp/src/stuff.pyx'.\r\n```\r\nIt should succeed consistently.\r\n\r\n\n\n### Environment\n\nOS: any OS\n\n### Additional context\n\nIn my original problem which is `python_flint` it fails all the time but with different files reported as problematic each time:\r\nhttps://github.com/fredrik-johansson/python-flint/blob/d6e239d6bf4871a4d90f389177b805fec5368e98/src/flint/pyflint.pyx#L296-L325\r\nhttps://github.com/fredrik-johansson/python-flint/blob/d6e239d6bf4871a4d90f389177b805fec5368e98/bin/coverage.sh#L3-L24",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I don't personally understand how all sides of this work but what I can see is that when `coverage report -m` is run coverage will call the cython coverage plugin passing in the names of .pyx files and asking for \"reporters\". If the plugin is asked about \"b.pyx\" then it looks for related files like \"b.c\" because those will have the information it needs.\r\n\r\nIn the situation I described above \"b.pyx\" was included in \"a.pyx\" so the relevant information is in \"a.c\". The problem then is that there is no good way for the plugin to figure out that \"b.pyx\" was \"included\" by \"a.pyx\". What is unclear to me though is why this works at all when I *don't* use the src layout. \r\n\r\nHow do coverage and cython figure out that \"b.pyx\" becomes part of \"a.c\" because the example code I showed above seems to work okay if I don't have the `src` directory?",
            "created_at": "2022-12-14T23:17:44Z",
            "html_url": "https://github.com/cython/cython/issues/5173#issuecomment-1352348882",
            "id": 1352348882,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5173",
            "node_id": "IC_kwDOABDGAc5QmzTS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1352348882/reactions"
            },
            "updated_at": "2022-12-14T23:17:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1352348882",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "The plugin is called with the names of different pyx files in a random order so at the first call it does not know anything about the other pyx or .c files that might be involved. The problem to be solved then is to identify another C file that is indirectly generated from a given pyx file without knowing how anything was built or which pyx files were compiled etc. The way I see it there are several possible approaches to this:\r\n\r\n1. Say that coverage in combination with include is not entirely supported.\r\n2. Scan all .pyx files looking for one that includes this .pyx file (recursively).\r\n3. Scan all .c files looking for one which has cython annotations for this .pyx file.\r\n4. Add a way to specify explicitly in a .pyx file which C file (or files?) it will eventually lead to.\r\n5. Put some more information into the generated C file somehow so that coverage ends up passing the necessary information back to the cython coverage plugin.\r\n\r\nOptions 2 and 3 can never be robust because we have no way of knowing whether other .c or .pyx files were actually compiled or used in the build or not.\r\n\r\nOption 4 has the downside that it doesn't \"just work\" but it is robust and can be clearly documented. The advantage of option 4 compared to 5 is that it is significantly simpler to implement with all the necessary changes just being in the cython coverage plugin.\r\n\r\nOption 5 seems a lot more complicated since it involves changing the generated C code and the information that is passed in both directions between coverage and the cython coverage plugin. Perhaps also a lot of the difficulty around making this work is because of the attempt to automagically find out which C file is involved when it would be better if that was given explicitly by the user as in Option 4.\r\n\r\nI could implement option 4 along the lines of saying that you can add a comment in a .pyx file like:\r\n```\r\n# in file stuff.pyx\r\n#\r\n# CYTHON_COVERAGE_C_FILE: mod.c\r\n#\r\n# mod.c should be understood as a path relative to the directory containing stuff.pyx\r\n```\r\nThen the coverage plugin can just scan the .pyx file looking for lines like this before falling back to the current auto discovery mechanism.",
            "created_at": "2022-12-15T10:34:44Z",
            "html_url": "https://github.com/cython/cython/issues/5173#issuecomment-1352865722",
            "id": 1352865722,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5173",
            "node_id": "IC_kwDOABDGAc5Qoxe6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1352865722/reactions"
            },
            "updated_at": "2022-12-15T10:34:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1352865722",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hello, does anyone have fix for this issue? or WA solution for the issue？Thanks!\r\nI also met the same issue, Coverage fails frequently(pass randomly) when include is used for .pyx and .pxd source files.",
            "created_at": "2024-03-07T10:49:26Z",
            "html_url": "https://github.com/cython/cython/issues/5173#issuecomment-1983248351",
            "id": 1983248351,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5173",
            "node_id": "IC_kwDOABDGAc52Nfff",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1983248351/reactions"
            },
            "updated_at": "2024-03-07T10:49:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1983248351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/162429043?v=4",
                "events_url": "https://api.github.com/users/stevenxu333/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenxu333/followers",
                "following_url": "https://api.github.com/users/stevenxu333/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenxu333/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenxu333",
                "id": 162429043,
                "login": "stevenxu333",
                "node_id": "U_kgDOCa54cw",
                "organizations_url": "https://api.github.com/users/stevenxu333/orgs",
                "received_events_url": "https://api.github.com/users/stevenxu333/received_events",
                "repos_url": "https://api.github.com/users/stevenxu333/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenxu333/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenxu333/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenxu333"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5173/comments",
    "created_at": "2022-12-14T21:56:06Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5173/events",
    "html_url": "https://github.com/cython/cython/issues/5173",
    "id": 1497460648,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5173/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5ZQW-o",
    "number": 5173,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5173/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5173/timeline",
    "title": "[BUG]  Coverage fails when `include` is used in src layout",
    "updated_at": "2024-03-07T10:49:27Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5173",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
        "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
        "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
        "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
        "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/oscarbenjamin",
        "id": 1159732,
        "login": "oscarbenjamin",
        "node_id": "MDQ6VXNlcjExNTk3MzI=",
        "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
        "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
        "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/oscarbenjamin"
    }
}