{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "**Describe the bug**\r\npyximport seems to fail with a moderate to high number of parallel processes. If I build the .pyx explicitly, then there is no problem. I installed cython with pip just today. Windows 10, 16-core AMD Threadripper with 64GB RAM. If I use a low core count, like 2-3, sometimes higher, my scripts succeed. But as I increase the core counts, I'll run into these crashes. Sometimes at the same core count it will pass, while other times it will fail. \r\n\r\n```\r\nc:\\>py test2.py\r\nstart 123\r\nstart 123\r\nstart 123\r\nstart 123\r\nstart 123\r\nc:\\>py test2.py\r\nstart 123\r\nstart 123\r\nstart 123\r\nstart 123\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pyximport\\pyximport.py\", line 216, in load_module\r\n    mod = imp.load_dynamic(name, so_path)\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\imp.py\", line 342, in load_dynamic\r\n    return _load(spec)\r\nImportError: DLL load failed while importing test3: The specified module could not be found.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\multiprocessing\\spawn.py\", line 116, in spawn_main\r\n    exitcode = _main(fd, parent_sentinel)\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\multiprocessing\\spawn.py\", line 125, in _main\r\n    prepare(preparation_data)\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\multiprocessing\\spawn.py\", line 236, in prepare\r\n    _fixup_main_from_path(data['init_main_from_path'])\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\multiprocessing\\spawn.py\", line 287, in _fixup_main_from_path\r\n    main_content = runpy.run_path(main_path,\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\runpy.py\", line 265, in run_path\r\n    return _run_module_code(code, init_globals, run_name,\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\runpy.py\", line 97, in _run_module_code\r\n    _run_code(code, mod_globals, init_globals,\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"c:\\Steve\\p4\\py\\pnet\\pnet\\test2.py\", line 8, in <module>\r\n    from test3 import test3\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pyximport\\pyximport.py\", line 459, in load_module\r\n    module = load_module(fullname, self.path,\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pyximport\\pyximport.py\", line 231, in load_module\r\n    raise exc.with_traceback(tb)\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pyximport\\pyximport.py\", line 216, in load_module\r\n    mod = imp.load_dynamic(name, so_path)\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\imp.py\", line 342, in load_dynamic\r\n    return _load(spec)\r\nImportError: Building module test3 failed: ['ImportError: DLL load failed while importing test3: The specified module could not be found.\\n']\r\n```\r\n\r\nAnother run looked like this:\r\n\r\n```\r\nc:\\>py test2.py\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pyximport\\pyximport.py\", line 214, in load_module\r\n    so_path = build_module(module_name, pyxfilename, pyxbuild_dir,\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pyximport\\pyximport.py\", line 192, in build_module\r\n    assert os.path.exists(so_path), \"Cannot find: %s\" % so_path\r\nAssertionError: Cannot find: C:\\Users\\Steve\\.pyxbld\\lib.win-amd64-3.8\\test3.cp38-win_amd64.pyd.reload2\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\multiprocessing\\spawn.py\", line 116, in spawn_main\r\n    exitcode = _main(fd, parent_sentinel)\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\multiprocessing\\spawn.py\", line 125, in _main\r\n    prepare(preparation_data)\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\multiprocessing\\spawn.py\", line 236, in prepare\r\nstart 123\r\n    _fixup_main_from_path(data['init_main_from_path'])\r\nstart 123\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\multiprocessing\\spawn.py\", line 287, in _fixup_main_from_path\r\nstart 123\r\n    main_content = runpy.run_path(main_path,\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\runpy.py\", line 265, in run_path\r\nstart 123\r\n    return _run_module_code(code, init_globals, run_name,\r\nstart 123\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\runpy.py\", line 97, in _run_module_code\r\n    _run_code(code, mod_globals, init_globals,\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"c:\\Steve\\p4\\py\\pnet\\pnet\\test2.py\", line 8, in <module>\r\n    from test3 import test3\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pyximport\\pyximport.py\", line 459, in load_module\r\n    module = load_module(fullname, self.path,\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pyximport\\pyximport.py\", line 231, in load_module\r\n    raise exc.with_traceback(tb)\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pyximport\\pyximport.py\", line 214, in load_module\r\n    so_path = build_module(module_name, pyxfilename, pyxbuild_dir,\r\n  File \"C:\\Users\\Steve\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pyximport\\pyximport.py\", line 192, in build_module\r\n    assert os.path.exists(so_path), \"Cannot find: %s\" % so_path\r\nImportError: Building module test3 failed: ['AssertionError: Cannot find: C:\\\\Users\\\\Steve\\\\.pyxbld\\\\lib.win-amd64-3.8\\\\test3.cp38-win_amd64.pyd.reload2\\n']\r\n```\r\n\r\nSeems related to https://github.com/cython/cython/issues/3566\r\n\r\n**To Reproduce**\r\n\r\ntest3.pyx\r\n```\r\ndef test3(num):\r\n    print(\"start %d\" % num)\r\n```\r\n\r\ntest2.py\r\n```\r\nimport concurrent.futures\r\nimport itertools\r\nimport pyximport\r\npyximport.install(setup_args={\"script_args\":[\"--compiler=msvc\"]},\r\n                reload_support=True)\r\nfrom test3 import test3\r\n\r\nif __name__ == '__main__':\r\n    with concurrent.futures.ProcessPoolExecutor(max_workers=4) as executor:\r\n        executor.map(test3, itertools.repeat(123))\r\n```\r\n\r\nIt will sometimes fail with max_workers=4. It will always pass with max_workers=2. It will always fail with max_workers=32. It doesn't look like its a memory pressure issue, as my memory usage doesn't move much. \r\n\r\nIf I manually compile test3.pyx, it will always pass, since pyximport doesn't need to compile in that case. \r\n\r\n**Expected behavior**\r\nShould not crash at any level of parallelism as long as we're not out of memory. \r\n\r\n**Environment (please complete the following information):**\r\n - OS:Windows 10\r\n - Python version 3.8.5\r\n - Cython version 0.29.21\r\n\r\n\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks for the report. It somehow seems to think that it needs to reload the module, thus tries to rebuild it. That that can fail under concurrency is not surprising. The fact that it would try to reload the module is.\r\n\r\nMaybe you can do a bit of print debugging to investigate why it thinks that it needs a rebuild inside of the executor. (Pyx-)Importing the module before starting the executor, as you do in your example, is already the right thing to do.",
            "created_at": "2020-09-21T05:15:13Z",
            "html_url": "https://github.com/cython/cython/issues/3837#issuecomment-695903690",
            "id": 695903690,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3837",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTkwMzY5MA==",
            "performed_via_github_app": null,
            "updated_at": "2020-09-21T05:15:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/695903690",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Unfortunately I don't know enough about the expected behavior to do effective debugging. This is my first contact with cython. And no time. I'll try to switch to multithreading instead.",
            "created_at": "2020-09-22T00:24:33Z",
            "html_url": "https://github.com/cython/cython/issues/3837#issuecomment-696449892",
            "id": 696449892,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3837",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjQ0OTg5Mg==",
            "performed_via_github_app": null,
            "updated_at": "2020-09-22T00:24:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/696449892",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/11672527?v=4",
                "events_url": "https://api.github.com/users/steel3d/events{/privacy}",
                "followers_url": "https://api.github.com/users/steel3d/followers",
                "following_url": "https://api.github.com/users/steel3d/following{/other_user}",
                "gists_url": "https://api.github.com/users/steel3d/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/steel3d",
                "id": 11672527,
                "login": "steel3d",
                "node_id": "MDQ6VXNlcjExNjcyNTI3",
                "organizations_url": "https://api.github.com/users/steel3d/orgs",
                "received_events_url": "https://api.github.com/users/steel3d/received_events",
                "repos_url": "https://api.github.com/users/steel3d/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/steel3d/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/steel3d/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/steel3d"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'll try to switch to multithreading instead.\r\n\r\nYour choice, but if you ask me, if multiprocessing otherwise works for you, I'd rather stick with that than add thread-concurrency to my application.\r\n\r\n> I don't know enough about the expected behavior to do effective debugging.\r\n\r\nI guess it's easy to debug with a couple of prints sprinkled here and there. But if you prefer to degrade your own code rather than helping to fix a problem that others might run into as well, that's obviously your choice, too.",
            "created_at": "2020-09-22T06:29:45Z",
            "html_url": "https://github.com/cython/cython/issues/3837#issuecomment-696534354",
            "id": 696534354,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3837",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjUzNDM1NA==",
            "performed_via_github_app": null,
            "updated_at": "2020-09-22T06:29:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/696534354",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Threading without GIL should be more efficient than spinning up processes, especially on windows without fork, and cross-thread communication should be simpler and possibly more efficient. But it's not easy to get around GIL in cython, I'll give you that :) Sorry, just way too slammed...",
            "created_at": "2020-09-22T06:34:20Z",
            "html_url": "https://github.com/cython/cython/issues/3837#issuecomment-696535918",
            "id": 696535918,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3837",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjUzNTkxOA==",
            "performed_via_github_app": null,
            "updated_at": "2020-09-22T06:34:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/696535918",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/11672527?v=4",
                "events_url": "https://api.github.com/users/steel3d/events{/privacy}",
                "followers_url": "https://api.github.com/users/steel3d/followers",
                "following_url": "https://api.github.com/users/steel3d/following{/other_user}",
                "gists_url": "https://api.github.com/users/steel3d/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/steel3d",
                "id": 11672527,
                "login": "steel3d",
                "node_id": "MDQ6VXNlcjExNjcyNTI3",
                "organizations_url": "https://api.github.com/users/steel3d/orgs",
                "received_events_url": "https://api.github.com/users/steel3d/received_events",
                "repos_url": "https://api.github.com/users/steel3d/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/steel3d/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/steel3d/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/steel3d"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3837/comments",
    "created_at": "2020-09-21T04:45:58Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3837/events",
    "html_url": "https://github.com/cython/cython/issues/3837",
    "id": 705277692,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3837/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU3MDUyNzc2OTI=",
    "number": 3837,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[BUG] pyximport fails on Windows with multiprocessing at high concurrency",
    "updated_at": "2020-09-22T06:34:20Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3837",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/11672527?v=4",
        "events_url": "https://api.github.com/users/steel3d/events{/privacy}",
        "followers_url": "https://api.github.com/users/steel3d/followers",
        "following_url": "https://api.github.com/users/steel3d/following{/other_user}",
        "gists_url": "https://api.github.com/users/steel3d/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/steel3d",
        "id": 11672527,
        "login": "steel3d",
        "node_id": "MDQ6VXNlcjExNjcyNTI3",
        "organizations_url": "https://api.github.com/users/steel3d/orgs",
        "received_events_url": "https://api.github.com/users/steel3d/received_events",
        "repos_url": "https://api.github.com/users/steel3d/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/steel3d/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/steel3d/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/steel3d"
    }
}