{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "This was reported on NumPy. I am not concerned about it at all, so this is just to bring it up.  When importing NumPy, valgrind will report a few tuples lost. It looks like one tuple per module. These tuples are just error messages to be used with `raise ImportError(_pyx_)`.  This was reported at NumPy here: https://github.com/numpy/numpy/issues/18271\r\n\r\nIt seems that this does not happen with compiling a debug built (for whatever reasons).  Since I am not sure how well defined module cleanup even is in Python itself at this time, I am not worried at all, and I did not see anything in the Cythonized file that made me pause (but I am not quite sure how or what module cleanup is even called)\r\n\r\nThe valgrind log is below. I could not reproduce this with a super minimal cython file that just contained an error being raised.  Using the NumPy 1.20 wheels will give the same (or at least very similar) results. Basically, these lines `==72014==    by 0x350B1B95: __Pyx_InitCachedConstants (mtrand.c:29137)` indicate that tuple memory is not cleaned up on exit.  But I am not certain that this has necessarily anything to do with Cython, as opposed to Python tuple/memory management.\r\n\r\n*To be clear: I am absolutely not worried, and happy to simply close this. Half my reason for opening is, that I have convinced myself that there is nothing actionable in NumPy right now, so I want to close the NumPy issue.*\r\n\r\n<details>\r\n\r\n```\r\nPYTHONMALLOC=malloc valgrind --leak-check=full --show-leak-kinds=definite,indirect python3.9 -c import\\ numpy               \r\n==72014== Memcheck, a memory error detector\r\n==72014== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==72014== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info\r\n==72014== Command: python3.9 -c import\\ numpy\r\n==72014== \r\n==72014== \r\n==72014== HEAP SUMMARY:\r\n==72014==     in use at exit: 3,395,064 bytes in 20,879 blocks\r\n==72014==   total heap usage: 331,104 allocs, 310,225 frees, 49,010,957 bytes allocated\r\n==72014== \r\n==72014== 48 bytes in 1 blocks are definitely lost in loss record 1,313 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x4FE1C8: PyTuple_Pack (tupleobject.c:208)\r\n==72014==    by 0x350B1B95: __Pyx_InitCachedConstants (mtrand.c:29137)\r\n==72014==    by 0x350B1B95: __pyx_pymod_exec_mtrand (mtrand.c:30846)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014== \r\n==72014== 48 bytes in 1 blocks are definitely lost in loss record 1,314 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x4FE1C8: PyTuple_Pack (tupleobject.c:208)\r\n==72014==    by 0x35157D0A: __Pyx_InitCachedConstants (bit_generator.c:14076)\r\n==72014==    by 0x35157D0A: __pyx_pymod_exec_bit_generator (bit_generator.c:15021)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014== \r\n==72014== 48 bytes in 1 blocks are definitely lost in loss record 1,315 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x4FE1C8: PyTuple_Pack (tupleobject.c:208)\r\n==72014==    by 0x3518638A: __Pyx_InitCachedConstants (_common.c:20335)\r\n==72014==    by 0x3518638A: __pyx_pymod_exec__common (_common.c:20972)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014== \r\n==72014== 48 bytes in 1 blocks are definitely lost in loss record 1,316 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x4FE1C8: PyTuple_Pack (tupleobject.c:208)\r\n==72014==    by 0x354D220A: __Pyx_InitCachedConstants (_bounded_integers.c:20468)\r\n==72014==    by 0x354D220A: __pyx_pymod_exec__bounded_integers (_bounded_integers.c:20979)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014== \r\n==72014== 48 bytes in 1 blocks are definitely lost in loss record 1,317 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x4FE1C8: PyTuple_Pack (tupleobject.c:208)\r\n==72014==    by 0x351BB23E: __Pyx_InitCachedConstants (_mt19937.c:6915)\r\n==72014==    by 0x351BB23E: __pyx_pymod_exec__mt19937 (_mt19937.c:7499)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014== \r\n==72014== 48 bytes in 1 blocks are definitely lost in loss record 1,318 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x4FE1C8: PyTuple_Pack (tupleobject.c:208)\r\n==72014==    by 0x35519603: __Pyx_InitCachedConstants (_philox.c:6771)\r\n==72014==    by 0x35519603: __pyx_pymod_exec__philox (_philox.c:7385)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014== \r\n==72014== 48 bytes in 1 blocks are definitely lost in loss record 1,319 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x4FE1C8: PyTuple_Pack (tupleobject.c:208)\r\n==72014==    by 0x35531331: __Pyx_InitCachedConstants (_pcg64.c:6352)\r\n==72014==    by 0x35531331: __pyx_pymod_exec__pcg64 (_pcg64.c:6975)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014== \r\n==72014== 48 bytes in 1 blocks are definitely lost in loss record 1,320 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x4FE1C8: PyTuple_Pack (tupleobject.c:208)\r\n==72014==    by 0x3553134D: __Pyx_InitCachedConstants (_pcg64.c:6363)\r\n==72014==    by 0x3553134D: __pyx_pymod_exec__pcg64 (_pcg64.c:6975)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014== \r\n==72014== 48 bytes in 1 blocks are definitely lost in loss record 1,321 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x4FE1C8: PyTuple_Pack (tupleobject.c:208)\r\n==72014==    by 0x3506D24C: __Pyx_InitCachedConstants (_sfc64.c:5537)\r\n==72014==    by 0x3506D24C: __pyx_pymod_exec__sfc64 (_sfc64.c:6108)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014== \r\n==72014== 48 bytes in 1 blocks are definitely lost in loss record 1,322 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x4FE1C8: PyTuple_Pack (tupleobject.c:208)\r\n==72014==    by 0x3506D268: __Pyx_InitCachedConstants (_sfc64.c:5548)\r\n==72014==    by 0x3506D268: __pyx_pymod_exec__sfc64 (_sfc64.c:6108)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014== \r\n==72014== 48 bytes in 1 blocks are definitely lost in loss record 1,323 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x4FE1C8: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x4FE1C8: PyTuple_Pack (tupleobject.c:208)\r\n==72014==    by 0x355520CF: __Pyx_InitCachedConstants (_generator.c:47581)\r\n==72014==    by 0x35554F63: __pyx_pymod_exec__generator (_generator.c:49469)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014== \r\n==72014== 80 bytes in 1 blocks are indirectly lost in loss record 4,505 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x4F1EC1: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x4F1EC1: _PyObject_GC_Alloc.lto_priv.0 (gcmodule.c:2225)\r\n==72014==    by 0x51DC8D: UnknownInlinedFun (gcmodule.c:2252)\r\n==72014==    by 0x51DC8D: UnknownInlinedFun (gcmodule.c:2281)\r\n==72014==    by 0x51DC8D: UnknownInlinedFun (tupleobject.c:92)\r\n==72014==    by 0x51DC8D: UnknownInlinedFun (tupleobject.c:420)\r\n==72014==    by 0x51DC8D: _PyObject_MakeTpCall (call.c:165)\r\n==72014==    by 0x550873: UnknownInlinedFun (abstract.h:116)\r\n==72014==    by 0x550873: UnknownInlinedFun (abstract.h:103)\r\n==72014==    by 0x550873: UnknownInlinedFun (call.c:543)\r\n==72014==    by 0x550873: PyObject_CallFunction (call.c:565)\r\n==72014==    by 0x54FDC7: PyImport_Import (import.c:2073)\r\n==72014==    by 0x5FCE9C: PyImport_ImportModule (import.c:1488)\r\n==72014==    by 0x5FF571: PyFile_OpenCodeObject (fileobject.c:562)\r\n==72014==    by 0x5FF457: UnknownInlinedFun (_iomodule.c:523)\r\n==72014==    by 0x5FF457: _io_open_code.lto_priv.0 (_iomodule.c.h:321)\r\n==72014==    by 0x51B347: cfunction_vectorcall_FASTCALL_KEYWORDS.lto_priv.0 (methodobject.c:442)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014==    by 0x5124D1: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x5124D1: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x5124D1: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x5124D1: _PyEval_EvalFrameDefault (ceval.c:3504)\r\n==72014== \r\n==72014== 256 (176 direct, 80 indirect) bytes in 1 blocks are definitely lost in loss record 6,026 of 7,210\r\n==72014==    at 0x483877F: malloc (vg_replace_malloc.c:307)\r\n==72014==    by 0x51027E: UnknownInlinedFun (obmalloc.c:685)\r\n==72014==    by 0x51027E: UnknownInlinedFun (object.c:165)\r\n==72014==    by 0x51027E: PyCode_NewWithPosOnlyArgs (codeobject.c:223)\r\n==72014==    by 0x35553EFD: __Pyx_InitCachedConstants (_generator.c:48229)\r\n==72014==    by 0x35554F63: __pyx_pymod_exec__generator (_generator.c:49469)\r\n==72014==    by 0x5F7C8E: PyModule_ExecDef (moduleobject.c:399)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2245)\r\n==72014==    by 0x5F7BE2: UnknownInlinedFun (import.c:2338)\r\n==72014==    by 0x5F7BE2: _imp_exec_builtin.lto_priv.0 (import.c.h:388)\r\n==72014==    by 0x528399: cfunction_vectorcall_O.lto_priv.0 (methodobject.c:512)\r\n==72014==    by 0x517E1C: UnknownInlinedFun (ceval.c:5092)\r\n==72014==    by 0x517E1C: _PyEval_EvalFrameDefault (ceval.c:3580)\r\n==72014==    by 0x510A2C: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x510A2C: _PyEval_EvalCode (ceval.c:4327)\r\n==72014==    by 0x5290A0: _PyFunction_Vectorcall (call.c:396)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:118)\r\n==72014==    by 0x51721A: UnknownInlinedFun (abstract.h:127)\r\n==72014==    by 0x51721A: UnknownInlinedFun (ceval.c:5072)\r\n==72014==    by 0x51721A: _PyEval_EvalFrameDefault (ceval.c:3487)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (pycore_ceval.h:40)\r\n==72014==    by 0x528EE2: UnknownInlinedFun (call.c:330)\r\n==72014==    by 0x528EE2: _PyFunction_Vectorcall (call.c:367)\r\n==72014== \r\n==72014== LEAK SUMMARY:\r\n==72014==    definitely lost: 704 bytes in 12 blocks\r\n==72014==    indirectly lost: 80 bytes in 1 blocks\r\n==72014==      possibly lost: 2,972,359 bytes in 19,319 blocks\r\n==72014==    still reachable: 421,921 bytes in 1,547 blocks\r\n==72014==         suppressed: 0 bytes in 0 blocks\r\n==72014== Reachable blocks (those to which a pointer was found) are not shown.\r\n==72014== To see them, rerun with: --leak-check=full --show-leak-kinds=all\r\n==72014== \r\n==72014== For lists of detected and suppressed errors, rerun with: -s\r\n==72014== ERROR SUMMARY: 6738 errors from 6738 contexts (suppressed: 0 from 0)\r\n```",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "I think (but not 100% sure) that some of the limited API work (e.g. https://github.com/cython/cython/pull/3611, `CYTHON_USE_MODULE_STATE`) is heading towards fixing this. But right now the leak is probably expected.",
            "created_at": "2021-02-01T18:13:24Z",
            "html_url": "https://github.com/cython/cython/issues/3994#issuecomment-771051525",
            "id": 771051525,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3994",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTA1MTUyNQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-02-01T18:28:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/771051525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@seberg did you instruct Cython to `generate_cleanup_code` for this module?",
            "created_at": "2021-04-15T21:46:00Z",
            "html_url": "https://github.com/cython/cython/issues/3994#issuecomment-820750511",
            "id": 820750511,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3994",
            "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDc1MDUxMQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-04-15T21:46:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/820750511",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@scoder you are right, using cythonizing with `--cleanup=3` cleans up all the supposed \"leaks\".   But, I assume we don't want to do that in NumPy for releases, right?  I will ping the pybind11 people on the original NumPy issue, maybe it helps them (although I guess they are likely happier to add some suppressions compared to patching numpy).\r\n\r\n(I personally usually run valgrind memory checker before closing the session, so I don't really care about it.)",
            "created_at": "2021-04-15T22:10:52Z",
            "html_url": "https://github.com/cython/cython/issues/3994#issuecomment-820761114",
            "id": 820761114,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3994",
            "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDc2MTExNA==",
            "performed_via_github_app": null,
            "updated_at": "2021-04-15T22:10:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/820761114",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61977?v=4",
                "events_url": "https://api.github.com/users/seberg/events{/privacy}",
                "followers_url": "https://api.github.com/users/seberg/followers",
                "following_url": "https://api.github.com/users/seberg/following{/other_user}",
                "gists_url": "https://api.github.com/users/seberg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seberg",
                "id": 61977,
                "login": "seberg",
                "node_id": "MDQ6VXNlcjYxOTc3",
                "organizations_url": "https://api.github.com/users/seberg/orgs",
                "received_events_url": "https://api.github.com/users/seberg/received_events",
                "repos_url": "https://api.github.com/users/seberg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seberg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seberg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seberg"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3994/comments",
    "created_at": "2021-02-01T18:04:13Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61977?v=4",
                "events_url": "https://api.github.com/users/seberg/events{/privacy}",
                "followers_url": "https://api.github.com/users/seberg/followers",
                "following_url": "https://api.github.com/users/seberg/following{/other_user}",
                "gists_url": "https://api.github.com/users/seberg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seberg",
                "id": 61977,
                "login": "seberg",
                "node_id": "MDQ6VXNlcjYxOTc3",
                "organizations_url": "https://api.github.com/users/seberg/orgs",
                "received_events_url": "https://api.github.com/users/seberg/received_events",
                "repos_url": "https://api.github.com/users/seberg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seberg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seberg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seberg"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-04-15T21:46:00Z",
            "event": "mentioned",
            "id": 4601733874,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDYwMTczMzg3NA==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4601733874"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61977?v=4",
                "events_url": "https://api.github.com/users/seberg/events{/privacy}",
                "followers_url": "https://api.github.com/users/seberg/followers",
                "following_url": "https://api.github.com/users/seberg/following{/other_user}",
                "gists_url": "https://api.github.com/users/seberg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seberg",
                "id": 61977,
                "login": "seberg",
                "node_id": "MDQ6VXNlcjYxOTc3",
                "organizations_url": "https://api.github.com/users/seberg/orgs",
                "received_events_url": "https://api.github.com/users/seberg/received_events",
                "repos_url": "https://api.github.com/users/seberg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seberg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seberg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seberg"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-04-15T21:46:00Z",
            "event": "subscribed",
            "id": 4601733877,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2MDE3MzM4Nzc=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4601733877"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-04-15T22:10:52Z",
            "event": "mentioned",
            "id": 4601809711,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDYwMTgwOTcxMQ==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4601809711"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-04-15T22:10:52Z",
            "event": "subscribed",
            "id": 4601809714,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2MDE4MDk3MTQ=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4601809714"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3994/events",
    "html_url": "https://github.com/cython/cython/issues/3994",
    "id": 798585437,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3994/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU3OTg1ODU0Mzc=",
    "number": 3994,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[BUG] Valgrind detect leak at module cleanup",
    "updated_at": "2021-04-15T22:10:52Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3994",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/61977?v=4",
        "events_url": "https://api.github.com/users/seberg/events{/privacy}",
        "followers_url": "https://api.github.com/users/seberg/followers",
        "following_url": "https://api.github.com/users/seberg/following{/other_user}",
        "gists_url": "https://api.github.com/users/seberg/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/seberg",
        "id": 61977,
        "login": "seberg",
        "node_id": "MDQ6VXNlcjYxOTc3",
        "organizations_url": "https://api.github.com/users/seberg/orgs",
        "received_events_url": "https://api.github.com/users/seberg/received_events",
        "repos_url": "https://api.github.com/users/seberg/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/seberg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/seberg/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/seberg"
    }
}