{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Whenever the signature generated for `__pyx_fused_cpdef()` in `Cython.Compiler.FusedNode.FusedCFuncDefNode().make_fused_cpdef()` contains either a mutable object or an object that contains a mutable object as a default argument, any `fused` `cpdef` functions produced by it will segfault once later dynamically bound and called as methods.\r\n\r\nA `print` function placed as the first non-comment line of the function body doesn't seem to be visibly executed, so I assume the crash occurs somewhere within and as a result of how the descriptor protocol is handled by Cython.\r\n\r\nAttribute access for the bound function works fine as well as long as it's never called, so I assume the crash occurs somewhere between invoking the descriptor protocol and successfully dispatching the arguments into the function body.\r\n\r\nThe mutable object does not have to ever be explicitly accessed or modified for the segfault to occur.\r\n\r\nThis occurs both with classes defined dynamically in Python-space and with `cdef classes`. It doesn't affect methods that are explicitly defined under the class— but it does still happen when the code accessing and calling the instance method is compiled with the instance statically typed.\r\n\r\n---\r\n\r\nThis is probably either a specific case of a somewhat more general issue, or some kind of user error on my part. But I'm not familiar enough with Cython or low-level programming languages in general to tell which it is, and if it is a symptom of a larger issue, I don't know enough about how `cyfunction`s are structured and how they handle the descriptor protocol to be able to narrow it down any further.\r\n\r\nI also tried emulating how I might imagine `cyfunction`s to work using plain `def` and `cdef` functions, as well as a `cdef class` that implements the descriptor protocol. But those all work fine, so this issue, if it is an actual issue, doesn't seem to have any chance of actually affecting normal usage.\r\n\r\n---\r\n \r\nThe segfault so far seems to require two things to occur: \r\n- Modification to the Cython source code (but still within parameters that seem valid and work outside of this very specific case— and which may or may not also come up under normal usage or other development).\r\n- Compilation of a Cython file that defines a `fused` `cpdef` function and then binds it as a method by assigning it as a class attribute.\r\n\r\nThe code that I've modified whenever it's occured is around line `619` of `Compiler/FusedNode.py`:\r\n\r\n```python\r\ndef __pyx_fused_cpdef(signatures, args, kwargs, defaults):\r\n```\r\n\r\nThe segfaults seem to occur once any of the arguments have default values that either are or include mutable objects:\r\n\r\n```python\r\ndef __pyx_fused_cpdef(signatures, args, kwargs, defaults, _newkwarg={}):\r\n```\r\n```python\r\ndef __pyx_fused_cpdef(signatures, args, kwargs, defaults={}):\r\n```\r\n```python\r\ndef __pyx_fused_cpdef(signatures, args, kwargs, defaults, _newkwarg=([],)):\r\n```\r\n\r\nThe below forms all seem to be fine, IIRC:\r\n\r\n```python\r\ndef __pyx_fused_cpdef(signatures, args, kwargs, defaults, _newkwarg=()):\r\n```\r\n```python\r\ndef __pyx_fused_cpdef(signatures, args, kwargs, defaults=None):\r\n```\r\n```python\r\ndef __pyx_fused_cpdef(signatures, args, kwargs, defaults, _newkwarg=(None,)):\r\n```\r\n\r\nNormal functions, as well as explicitly defined methods, all seem to work fine even with the problematic forms. The segfault only seems to occur when a stand-alone function is later bound to a class:\r\n\r\n\r\n##### fusedtest.py\r\n```python\r\n# distutils: language = c++\r\nimport cython\r\n\r\ndef fused_bind(self, var): # Works.\r\n\treturn 0\r\n\r\nclass fused_type_cls:\r\n\tmeth = fused_bind # Segfaults.\r\n\r\nclass compiled_fused_type_cls:\r\n\tmeth = fused_bind # Segfaults.\r\n\tdef static_meth(self, var): # Works.\r\n\t\treturn 0\r\n\r\ndef fused_type_cls_compiledtest():\r\n\tobj = compiled_fused_type_cls()\r\n\tv = 1.0\r\n\treturn (obj.meth(v), obj.static_meth(v)) # Segfaults.\r\n```\r\n\r\n##### fusedtest.pxd\r\n```python\r\n# distutils: language = c++\r\nimport cython\r\n\r\nctypedef fused fused_type_ohtest:\r\n\tdouble\r\n\tint\r\n\r\ncpdef bint fused_bind(self, fused_type_ohtest var)\r\n\r\ncdef class compiled_fused_type_cls:\r\n\tcpdef bint static_meth(self, fused_type_ohtest var)\r\n\r\n@cython.locals(obj=compiled_fused_type_cls, v=cython.double)\r\ncpdef (bint, bint) fused_type_cls_compiledtest()\r\n```\r\n\r\nThis behaviour is already tested for with `A().meth()` under `tests/run/fused_cpdef.pyx` as well.\r\n\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Could be that you're running into a problem related to [this](https://github.com/cython/cython/blob/master/Cython/Compiler/FusedNode.py#L620-L621).\r\n\r\nNote that all the working variants that you're giving above are special because constant tuples and `None` are really global C constants in Cython. I'll have to dig into the generated C code to see what goes wrong with the dynamic default arguments here.",
            "created_at": "2020-02-20T08:14:46Z",
            "html_url": "https://github.com/cython/cython/issues/3370#issuecomment-588738415",
            "id": 588738415,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3370",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4ODczODQxNQ==",
            "updated_at": "2020-02-20T08:14:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/588738415",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "https://github.com/cython/cython/blob/53772108863ee4e702ce8ce3b2a0c3d514e347c7/Cython/Compiler/ExprNodes.py#L9436\r\n\r\n(I have no real idea for how to fix it though)",
            "created_at": "2020-02-27T20:30:29Z",
            "html_url": "https://github.com/cython/cython/issues/3370#issuecomment-592162196",
            "id": 592162196,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3370",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjE2MjE5Ng==",
            "updated_at": "2020-02-28T07:59:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/592162196",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3370/comments",
    "created_at": "2020-02-20T02:56:30Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/37680486?v=4",
                "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
                "followers_url": "https://api.github.com/users/will-ca/followers",
                "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
                "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/will-ca",
                "id": 37680486,
                "login": "will-ca",
                "node_id": "MDQ6VXNlcjM3NjgwNDg2",
                "organizations_url": "https://api.github.com/users/will-ca/orgs",
                "received_events_url": "https://api.github.com/users/will-ca/received_events",
                "repos_url": "https://api.github.com/users/will-ca/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/will-ca"
            },
            "commit_id": "e225960f1f7e8e2800270faed45b973951802da1",
            "commit_url": "https://api.github.com/repos/will-ca/cython_cpdef-tests/commits/e225960f1f7e8e2800270faed45b973951802da1",
            "created_at": "2020-02-20T03:13:42Z",
            "event": "referenced",
            "id": 3054210881,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwNTQyMTA4ODE=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3054210881"
        },
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/37680486?v=4",
                "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
                "followers_url": "https://api.github.com/users/will-ca/followers",
                "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
                "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/will-ca",
                "id": 37680486,
                "login": "will-ca",
                "node_id": "MDQ6VXNlcjM3NjgwNDg2",
                "organizations_url": "https://api.github.com/users/will-ca/orgs",
                "received_events_url": "https://api.github.com/users/will-ca/received_events",
                "repos_url": "https://api.github.com/users/will-ca/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/will-ca"
            },
            "commit_id": "6f57b9c709617252a5443d8e2ac23ce27326d516",
            "commit_url": "https://api.github.com/repos/will-ca/cython_cpdef-tests/commits/6f57b9c709617252a5443d8e2ac23ce27326d516",
            "created_at": "2020-02-20T09:06:11Z",
            "event": "referenced",
            "id": 3054945573,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwNTQ5NDU1NzM=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3054945573"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3370/events",
    "html_url": "https://github.com/cython/cython/issues/3370",
    "id": 568017288,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3370/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NjgwMTcyODg=",
    "number": 3370,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Mutable default arguments in `FusedCFuncDefNode().make_fused_cpdef()`/`__pyx_fused_cpdef()` cause segfaults for functions later assigned/bound to classes?",
    "updated_at": "2020-02-28T07:59:54Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3370",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/37680486?v=4",
        "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
        "followers_url": "https://api.github.com/users/will-ca/followers",
        "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/will-ca",
        "id": 37680486,
        "login": "will-ca",
        "node_id": "MDQ6VXNlcjM3NjgwNDg2",
        "organizations_url": "https://api.github.com/users/will-ca/orgs",
        "received_events_url": "https://api.github.com/users/will-ca/received_events",
        "repos_url": "https://api.github.com/users/will-ca/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/will-ca"
    }
}