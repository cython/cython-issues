{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nSo far C++ exceptions will be converted to a Python exception whenever a function is called. So e.g.\r\n```cython\r\ncdef extern from \"test.hpp\":\r\n    double cpp_test() nogil except +\r\n\r\ncdef void cython_test() nogil except *:\r\n    cpp_test()\r\n\r\ndef py_test():\r\n    with nogil:\r\n        cython_test()\r\n```\r\nwould require a call to `__Pyx_ErrOccurredWithGIL` to check whether `cython_test` has an error.\r\n\r\nI would like to use a class without copy constructor and copy assignment operator inside a prange:\r\n```cython\r\nfor i in prange(10, nogil=True):\r\n        var = MyCppClass()\r\n        ...\r\n```\r\nthis does not work, because the generated implementation requires a copy assignment operator\r\n```\r\n__pyx_parallel_temp0 = __pyx_v_var;\r\n```\r\nSo I wanted to move the implementation into an additional function\r\n```cython\r\nfor i in prange(10, nogil=True):\r\n        parallel_impl()\r\n```\r\nwhich works but has to acquire the GIL all the time, even though exceptions (out of memory) are very rare.\r\n\r\n**Describe the solution you'd like**\r\nIt would be great to have a way to tell cython the forward the C++ exception and catch it one layer later\r\n```cython\r\ncdef extern from \"test.hpp\":\r\n    double cpp_test() nogil except +\r\n\r\ncdef void cython_test() nogil except +:\r\n    cpp_test()\r\n```\r\n\r\nWhile currently cython generates:\r\n```\r\ntry {\r\n    ...\r\n} catch(...) {\r\n    __Pyx_CppExn2PyErr();\r\n    __PYX_ERR(0, 1614, __pyx_L1_error)\r\n}\r\n\r\n__pyx_L1_error:;\r\n...\r\n__pyx_L2:;\r\n__Pyx_XGIVEREF(__pyx_r);\r\n__Pyx_RefNannyFinishContext();\r\nreturn __pyx_r;\r\n```\r\nthis could generate something like:\r\n```\r\nstd::exception_ptr eptr;\r\ntry {\r\n    ...\r\n} catch(...) {\r\n    eptr = std::current_exception();\r\n    __PYX_ERR(0, 1614, __pyx_L1_error)\r\n}\r\n\r\n__pyx_L1_error:;\r\n...\r\n__pyx_L2:;\r\n__Pyx_XGIVEREF(__pyx_r);\r\n__Pyx_RefNannyFinishContext();\r\nif (eptr) {\r\n    std::rethrow_exception(eptr);\r\n}\r\nreturn __pyx_r;\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nFor my use case the alternatives I considered are:\r\n1) implement all parallel implementation in C++ instead of Cython\r\n2) find a way to hack around the requirement for a copy assignment operator when using thread local variables (I could not find one so far)\r\n3) use an additional output parameter in the function to signal whether an exception occurred",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "> find a way to hack around the requirement for a copy assignment operator when using thread local variables (I could not find one so far)\r\n\r\n`cpp_locals` directive! I added it very recently (I think you need the most recent Cython 3 alpha)\r\n\r\n---------\r\n\r\nNo comment on your main suggestion at this stage...",
            "created_at": "2021-08-30T07:24:09Z",
            "html_url": "https://github.com/cython/cython/issues/4352#issuecomment-908101272",
            "id": 908101272,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4352",
            "node_id": "IC_kwDOABDGAc42IIaY",
            "performed_via_github_app": null,
            "updated_at": "2021-08-30T07:24:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/908101272",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "Also: I think we do allow some exception-handling/raising within a `nogil` block. Cython usually just re-acquires the GIL temporarily.\r\n\r\nI'm not sure what the exact rules are, but we could look at handling c++ exceptions under the same mechanism? (So you could still declare the function as `nogil`)",
            "created_at": "2021-08-30T07:28:23Z",
            "html_url": "https://github.com/cython/cython/issues/4352#issuecomment-908103595",
            "id": 908103595,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4352",
            "node_id": "IC_kwDOABDGAc42II-r",
            "performed_via_github_app": null,
            "updated_at": "2021-08-30T07:28:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/908103595",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> cpp_locals directive! I added it very recently (I think you need the most recent Cython 3 alpha)\r\n\r\nThis appears to be what I was searching for :+1: \r\n\r\n> Also: I think we do allow some exception-handling/raising within a nogil block. Cython usually just re-acquires the GIL temporarily.\r\n\r\nI can declare the functions as nogil and it will just re-acquire the lock for a short time after calling the function to check the error code. However I would like to acquire the look only when an exception is raised.",
            "created_at": "2021-08-30T09:36:56Z",
            "html_url": "https://github.com/cython/cython/issues/4352#issuecomment-908196265",
            "id": 908196265,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4352",
            "node_id": "IC_kwDOABDGAc42Ifmp",
            "performed_via_github_app": null,
            "updated_at": "2021-08-30T09:36:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/908196265",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
                "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
                "followers_url": "https://api.github.com/users/maxbachmann/followers",
                "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
                "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/maxbachmann",
                "id": 44199644,
                "login": "maxbachmann",
                "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
                "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
                "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
                "repos_url": "https://api.github.com/users/maxbachmann/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/maxbachmann"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> > Also: I think we do allow some exception-handling/raising within a nogil block. Cython usually just re-acquires the GIL temporarily.\r\n> \r\n> I can declare the functions as nogil and it will just re-acquire the lock for a short time after calling the function to check the error code. However I would like to acquire the look only when an exception is raised.\r\n\r\nThe point I was making is that Cython itself automatically does the \"acquire the lock only when an exception is raised\" in a lot of cases, but not this case. Potentially we could change that.",
            "created_at": "2021-08-30T09:39:48Z",
            "html_url": "https://github.com/cython/cython/issues/4352#issuecomment-908197881",
            "id": 908197881,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4352",
            "node_id": "IC_kwDOABDGAc42If_5",
            "performed_via_github_app": null,
            "updated_at": "2021-08-30T09:39:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/908197881",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> cpp_locals directive! I added it very recently (I think you need the most recent Cython 3 alpha)\r\n\r\nAfter looking at cpp_locals it appears to be broken when used inside a prange (see https://github.com/cython/cython/issues/4354). In addition this only helps when there is no default constructor, while it still copies the variable (which does not work without copy assignment operator). ",
            "created_at": "2021-08-31T00:03:26Z",
            "html_url": "https://github.com/cython/cython/issues/4352#issuecomment-908789440",
            "id": 908789440,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4352",
            "node_id": "IC_kwDOABDGAc42KwbA",
            "performed_via_github_app": null,
            "updated_at": "2021-08-31T11:08:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/908789440",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
                "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
                "followers_url": "https://api.github.com/users/maxbachmann/followers",
                "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
                "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/maxbachmann",
                "id": 44199644,
                "login": "maxbachmann",
                "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
                "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
                "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
                "repos_url": "https://api.github.com/users/maxbachmann/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/maxbachmann"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4352/comments",
    "created_at": "2021-08-30T02:06:45Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-08-30T07:31:27Z",
            "event": "labeled",
            "id": 5224492935,
            "label": {
                "color": "f9d0c4",
                "name": "C++"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDUyMjQ0OTI5MzU=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5224492935"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4352/events",
    "html_url": "https://github.com/cython/cython/issues/4352",
    "id": 982300907,
    "labels": [
        {
            "color": "f9d0c4",
            "default": false,
            "description": null,
            "id": 414805136,
            "name": "C++",
            "node_id": "MDU6TGFiZWw0MTQ4MDUxMzY=",
            "url": "https://api.github.com/repos/cython/cython/labels/C++"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4352/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5ODIzMDA5MDc=",
    "number": 4352,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[ENH] add a way to forward C++ exceptions",
    "updated_at": "2021-08-31T11:08:55Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4352",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
        "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
        "followers_url": "https://api.github.com/users/maxbachmann/followers",
        "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
        "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/maxbachmann",
        "id": 44199644,
        "login": "maxbachmann",
        "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
        "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
        "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
        "repos_url": "https://api.github.com/users/maxbachmann/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/maxbachmann"
    }
}