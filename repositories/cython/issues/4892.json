{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!--\r\n**Note:**\r\n- DO NOT use the bug and feature tracker for general questions and support requests.\r\n  Use the `cython-users` mailing list instead.\r\n  It has a wider audience, so you get more and better answers.\r\n- Did you search for similar issues already?\r\n  Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release?\r\n  It might already have what you want to report.\r\n  Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nModularization of code is generally a good idea. Modularization should be straightforward and not affect performance. However, for this to be true in Cython one must also remember to `cimport` the modules. This is not natural in the pure Python mode. Consider the example below:\r\n\r\n```cython\r\n# file: data_types.pyx\r\nimport cython\r\n\r\n@cython.cclass\r\nclass book:\r\n    pages: cython.int\r\n    year_of_publication: cython.int\r\n    times_read: cython.int\r\n\r\n    @cython.ccall\r\n    def get_times_read(self) -> cython.int:\r\n        return self.times_read\r\n```\r\n\r\n```cython\r\n# file: cimports_false.pyx\r\nimport cython\r\nfrom data_types import book\r\n\r\n@cython.cfunc\r\ndef calculate_combined_read_count(a: book, b: book) -> cython.int:\r\n    a_times_read: cython.int = a.get_times_read()\r\n    b_times_read: cython.int = b.get_times_read()\r\n\r\n    return a_times_read + b_times_read\r\n```\r\n\r\n```cython\r\n# file: cimports_true.pyx\r\nimport cython\r\nfrom data_types import book\r\nfrom cython.cimports.data_types import book\r\n\r\n@cython.cfunc\r\ndef calculate_combined_read_count(a: book, b: book) -> cython.int:\r\n    a_times_read: cython.int = a.get_times_read()\r\n    b_times_read: cython.int = b.get_times_read()\r\n\r\n    return a_times_read + b_times_read\r\n```\r\n\r\n```cython\r\n# file: main.py\r\nimport pyximport\r\nimport Cython.Compiler.Options\r\n\r\nCython.Compiler.Options.annotate = True\r\nCython.Compiler.Options.cimport_from_pyx = True\r\n\r\npyximport.install()\r\n\r\nimport cimports_false\r\nimport cimports_true\r\n```\r\n\r\nWhen running `python main.py` in the terminal the `.pyx` files will be compiled and annotated. The important annotations are:\r\n```\r\n# file: cimports_false.pyx\r\nstatic int __pyx_f_14cimports_false_calculate_combined_read_count(PyObject *__pyx_v_a, PyObject *__pyx_v_b) ...\r\n```\r\n```\r\n# file: cimports_true.pyx\r\nstatic int __pyx_f_13cimports_true_calculate_combined_read_count(struct __pyx_obj_10data_types_book *__pyx_v_a, struct __pyx_obj_10data_types_book *__pyx_v_b) ...\r\n```\r\n\r\nThe first alternative above uses `PyObject` as the argument type, while the second alternative uses `__pyx_obj_10data_types_book` a C struct. This means that without the explicit cimport the functions can not be compiled as efficiently. However, the explicit cimport does not feel like Pythonlike and most other programming languages (e.g. C#, Java, etc.) do not require one to doubly import a data type for compilation to be efficient. In addition, since it is not mandatory, developers may forget to do so and thus not realize all the performance benefits of Cython. \r\n\r\n**Describe the solution you'd like**\r\nAdd an option to Cython that automatically cimports in the pure Python mode (the cdef mode could also be supported). \r\n\r\nThe implementation of this feature could be relatively simple, in the parsing step check all imports and if they are Cython imports, then auto generate a corresponding cimport. For example, consider the following Cython source file:\r\n```cython\r\nfrom data_types import book # this is a Cython import\r\nfrom math import sin # this is a regular Python import\r\n\r\n# SOME CODE HERE\r\n```\r\n\r\nThis source code would be transformed into this:\r\n```cython\r\nfrom data_types import book # this is a Cython import\r\nfrom cython.cimports.data_types import book # this is a generated Cython cimport\r\nfrom math import sin # this is a regular Python import\r\n\r\n# SOME CODE HERE\r\n```\r\n\r\nThis could pretty much be implemented with a simple string based regex. The transformed code could then be passed on to the existing Cython pipeline.\r\n\r\n**Describe alternatives you've considered**\r\nManually adding the cimports everywhere, but this is a bit tedious.\r\n\r\n**Additional context**\r\nCython version 3.0.0a10\r\nBackground info from cython-users: https://groups.google.com/g/cython-users/c/0z55DGggCiU/m/_9yNTCDjAwAJ",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "It might actually be enough to do only the cimport and not the Python import in your case. Did you try that?\n",
            "created_at": "2022-07-15T22:03:26Z",
            "html_url": "https://github.com/cython/cython/issues/4892#issuecomment-1185982282",
            "id": 1185982282,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4892",
            "node_id": "IC_kwDOABDGAc5GsKdK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1185982282/reactions"
            },
            "updated_at": "2022-07-15T22:03:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1185982282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hmm... I did not even think about that, but it certainly works for the example above. \r\n\r\nHowever, I do have a few reservations. Consider my use case:\r\n1. I want to write high performance code using Cython.\r\n2. I want to use the \"Pure Python Mode\" when writing Cython (and thus I want my Cython to be as close possible to Python, which means no cimports).\r\n3. I want to be able to mix Cython and Python code as needed.\r\n4. I want to use VSCode.\r\n5. I want to use Intellisense.\r\n6. I want the file system be the one \"source of truth\". In other words, I want to use `pyximport` and not `setup.py` for compilation of Cython files.\r\n\r\nIf one imports both Cython and Python types, then the two different import syntaxes must used. \r\n\r\nFor Intellisense to be usable in VSCode I must import the types with the standard Python import statements. To realize the full performance benefits of Cython I must also cimport the definitions, which is easy to miss because VSCode does not understand nor require `from cython.cimports.module_name import ...`. \r\n\r\nThe fact that cimports are more or less required in the pure Python mode was a surprise to me. I am certain that it would be beneficial for many users if it was handled automatically, which is why I created this issue.\r\n\r\n**A side note:** \r\nVSCode does not recognize `.pyx` files for use in Intellisense, which means that I write my Cython code in standard `.py` files. This enables type hints. However, not all of my `.py` files are Cython code. This means that enabling `pyximport.install(pyimport = True)` will not work (or rather all files will be compiled, which takes quite a long time). \r\n\r\nTo circumvent this issue I programmed a custom Cython compilation pipeline, which checks each file so that if the first line begins with `# cython`, then it should be compiled. Thus, currently I am able to achieve all the objectives of my use case, except number 2. However, since generating the cimport statements is not that difficult, I will be able to fix this issue with my custom pipeline. \r\n\r\n\r\n",
            "created_at": "2022-07-16T20:13:42Z",
            "html_url": "https://github.com/cython/cython/issues/4892#issuecomment-1186281907",
            "id": 1186281907,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4892",
            "node_id": "IC_kwDOABDGAc5GtTmz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1186281907/reactions"
            },
            "updated_at": "2022-07-16T20:13:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1186281907",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52362148?v=4",
                "events_url": "https://api.github.com/users/Acmion/events{/privacy}",
                "followers_url": "https://api.github.com/users/Acmion/followers",
                "following_url": "https://api.github.com/users/Acmion/following{/other_user}",
                "gists_url": "https://api.github.com/users/Acmion/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Acmion",
                "id": 52362148,
                "login": "Acmion",
                "node_id": "MDQ6VXNlcjUyMzYyMTQ4",
                "organizations_url": "https://api.github.com/users/Acmion/orgs",
                "received_events_url": "https://api.github.com/users/Acmion/received_events",
                "repos_url": "https://api.github.com/users/Acmion/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Acmion/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Acmion/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Acmion"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">     4. I want to use VSCode.\r\n>     5. I want to use Intellisense.\r\n\r\nBoth can probably learn about Cython's cimports. Maybe you can also create a bug report on their side to improve the support?\r\n\r\n>     6. I want the file system be the one \"source of truth\". In other words, I want to use `pyximport` and not `setup.py` for compilation of Cython files.\r\n\r\nIf that works for you, fine. I generally discourage using `pyximport` for anything but development work. It's nice to not have to run the build step manually while you're editing code, but your IDE can probably also do that for you (automatically compile on save). For any production setup, adding an import hook to the system and generating code at startup time (or even later) isn't something I'd want.\r\n\r\n\r\n> The fact that cimports are more or less required in the pure Python mode was a surprise to me. I am certain that it would be beneficial for many users if it was handled automatically, which is why I created this issue.\r\n\r\nCython cannot detect that a Python module is intended for compilation, because that's your choice, as a user, and not that of Cython. Unless there is a .pxd file, it also cannot know that the module exports a C interface to other modules. That's what .pxd files are there for.\r\n\r\nWhen building Cython itself, for example, you can choose to compile different sets of modules, depending on how much space you want to invest for how much performance. If Cython always assumed that some .py modules will be compiled at runtime (whether there's a .pxd file for them or not), and they weren't at that point, then it would fail to import because it would try to cimport a C interface from a Python module (which doesn't have one).\r\n\r\n\r\n> **A side note:** VSCode does not recognize `.pyx` files for use in Intellisense, which means that I write my Cython code in standard `.py` files. This enables type hints. However, not all of my `.py` files are Cython code. This means that enabling `pyximport.install(pyimport = True)` will not work (or rather all files will be compiled, which takes quite a long time).\r\n> \r\n> To circumvent this issue I programmed a custom Cython compilation pipeline, which checks each file so that if the first line begins with `# cython`, then it should be compiled. Thus, currently I am able to achieve all the objectives of my use case, except number 2. However, since generating the cimport statements is not that difficult, I will be able to fix this issue with my custom pipeline.\r\n\r\nSticking with .py files seems fine, but why not keep it simple, add .pxd files for the C interfaces of your modules and use `setup.py` (or some other common Python build system) for the compilation? That won't solve the problems with your IDE, but that can probably be solved by the developers of the IDE (or its Cython support).\r\n\r\nI'm not saying that there is nothing to improve here (so, thanks for bringing up the topic), but a build setup seems to be safer when it defines a set of files to compile and builds them in one go, rather than relying on random one-by-one (re-)compilation. I'm not even sure that `cimport_from_pyx` and `pyximport` (and especially the combination of both) take transitive dependencies into account to trigger a rebuild. Probably not. Resolving transitive dependencies on each import sounds horribly expensive.",
            "created_at": "2022-07-17T06:00:39Z",
            "html_url": "https://github.com/cython/cython/issues/4892#issuecomment-1186412929",
            "id": 1186412929,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4892",
            "node_id": "IC_kwDOABDGAc5GtzmB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1186412929/reactions"
            },
            "updated_at": "2022-07-17T06:00:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1186412929",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Both can probably learn about Cython's cimports. Maybe you can also create a bug report on their side to improve the support?\r\n\r\nYeah, I should do this.\r\n\r\n> If that works for you, fine. I generally discourage using pyximport for anything but development work. It's nice to not have to run the build step manually while you're editing code, but your IDE can probably also do that for you (automatically compile on save). For any production setup, adding an import hook to the system and generating code at startup time (or even later) isn't something I'd want.\r\n\r\nCompilation on save will likely lead to multiple unnecessary compilation of files. I agree that adding an import hook in production is undesirable. However, generating or compiling code during runtime is practically the same as using a JIT compiler. JIT compilers are used in multiple programming frameworks and is as such not a new idea.\r\n\r\n > Cython cannot detect that a Python module is intended for compilation, because that's your choice, as a user, and not that of Cython. Unless there is a .pxd file, it also cannot know that the module exports a C interface to other modules. That's what .pxd files are there for.\r\n\r\nThis is true. However, creating .pxd files in the pure Python mode feels unnatural. I do not believe that .pxd files support the pure Python syntax (not mentioned in the docs as far as I can tell) and thus developers would have to use two different languages to realize the full performance benefits of Cython. This is why in my custom pipeline the first line in each file is checked. If the line starts with `# cython`, then it should be compiled. Otherwise not.\r\n\r\n> When building Cython itself, for example, you can choose to compile different sets of modules, depending on how much space you want to invest for how much performance. If Cython always assumed that some .py modules will be compiled at runtime (whether there's a .pxd file for them or not), and they weren't at that point, then it would fail to import because it would try to cimport a C interface from a Python module (which doesn't have one).\r\n\r\nI understand that it may be beneficial to control how much one wants to compile with Cython. The `cimport_from_pyx` option seems to work just fine for the C interface.\r\n\r\n> Sticking with .py files seems fine, but why not keep it simple, add .pxd files for the C interfaces of your modules and use setup.py (or some other common Python build system) for the compilation? That won't solve the problems with your IDE, but that can probably be solved by the developers of the IDE (or its Cython support).\r\n\r\nHaha, I am of the opinion that my custom pipeline is simpler :). Maintaining a separate .pxd file is a burden. Maintaining a setup.py file is also a burden. \r\n\r\n> I'm not saying that there is nothing to improve here (so, thanks for bringing up the topic), but a build setup seems to be safer when it defines a set of files to compile and builds them in one go, rather than relying on random one-by-one (re-)compilation. I'm not even sure that cimport_from_pyx and pyximport (and especially the combination of both) take transitive dependencies into account to trigger a rebuild. Probably not. Resolving transitive dependencies on each import sounds horribly expensive.\r\n\r\nA build setup might be safer, but requires more manual work, especially if it must be manually updated. Transitive dependencies are not handled by `cimport_from_pyx` and `pyximport`, but I managed to handle them relatively easily with my custom pipeline. The cost of resolving transitive dependencies on each import is a function of the number of dependencies. In my experiments, this cost is very low compared to the cost of compilation.\r\n\r\nPerhaps I will publish my custom pipeline to a Github repository, so that it will be easier for anyone interested to take a more in depth look into what I am suggesting.",
            "created_at": "2022-07-19T02:54:54Z",
            "html_url": "https://github.com/cython/cython/issues/4892#issuecomment-1188538451",
            "id": 1188538451,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4892",
            "node_id": "IC_kwDOABDGAc5G16hT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1188538451/reactions"
            },
            "updated_at": "2022-07-19T02:54:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1188538451",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52362148?v=4",
                "events_url": "https://api.github.com/users/Acmion/events{/privacy}",
                "followers_url": "https://api.github.com/users/Acmion/followers",
                "following_url": "https://api.github.com/users/Acmion/following{/other_user}",
                "gists_url": "https://api.github.com/users/Acmion/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Acmion",
                "id": 52362148,
                "login": "Acmion",
                "node_id": "MDQ6VXNlcjUyMzYyMTQ4",
                "organizations_url": "https://api.github.com/users/Acmion/orgs",
                "received_events_url": "https://api.github.com/users/Acmion/received_events",
                "repos_url": "https://api.github.com/users/Acmion/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Acmion/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Acmion/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Acmion"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4892/comments",
    "created_at": "2022-07-15T16:24:28Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4892/events",
    "html_url": "https://github.com/cython/cython/issues/4892",
    "id": 1306225543,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4892/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5N22uH",
    "number": 4892,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4892/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4892/timeline",
    "title": "[ENH] Automatic `cimport` in Pure Python Mode",
    "updated_at": "2022-07-19T02:54:55Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4892",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/52362148?v=4",
        "events_url": "https://api.github.com/users/Acmion/events{/privacy}",
        "followers_url": "https://api.github.com/users/Acmion/followers",
        "following_url": "https://api.github.com/users/Acmion/following{/other_user}",
        "gists_url": "https://api.github.com/users/Acmion/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Acmion",
        "id": 52362148,
        "login": "Acmion",
        "node_id": "MDQ6VXNlcjUyMzYyMTQ4",
        "organizations_url": "https://api.github.com/users/Acmion/orgs",
        "received_events_url": "https://api.github.com/users/Acmion/received_events",
        "repos_url": "https://api.github.com/users/Acmion/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Acmion/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Acmion/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Acmion"
    }
}