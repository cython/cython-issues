{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "<!--\r\n**PLEASE READ THIS FIRST:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report. Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n**Describe the bug**\r\n\r\nIt takes a very long time for the C compiler to run on large files like ExprNodes.py and Nodes.py. This is seen in the CI `-all` tests repeatedly timing out (although partly this is because we can't compile them in parallel on Python 2.7)\r\n\r\nOne possible indicator is the warning from gcc:\r\n\r\n> `note: variable tracking size limit exceeded with ‘-fvar-tracking-assignments’, retrying without`\r\n\r\n(although that could potentially be toggled independently or the limit increased)\r\n\r\nObviously it's inevitable that a big Cython file will generate a big C file and that a big C file will take a while to compile, but potentially we could do better.\r\n\r\nThere's a few gcc flags to try to profile compilation time (https://stackoverflow.com/questions/13559818/profiling-the-c-compilation-process), and they suggest that the module init function (where all the module-level user code goes) is the main culprit (unsurprisingly)\r\n\r\n**Environment (please complete the following information):**\r\n - Linux, CI, most obviously in Python 2.7\r\n\r\n**Additional context**\r\n\r\nI tried a couple of approaches to fix the problem.\r\n\r\n1. First I created small sub-scopes within the module init function. https://github.com/da-woods/cython/tree/morelocaltemps. This didn't achieve any speedup or get rid of the warning, but may be worth using some of the change for other reasons (https://github.com/da-woods/cython/commit/c9014165baaf56bf3af0e08971f7e3eda46b428e#commitcomment-57239451)\r\n2. Second, I tried to split each stat at module-level into a separate function (https://github.com/cython/cython/pull/4386). This gave appreciable speed-ups for large modules. However the PR was very intended as a proof of concept with little attention to code quality....\r\n\r\nI think a variant of the second approach is probably worthwhile. My current thought that we shouldn't do it on a \"per-stat\" basis but maybe give each class creation a separate function (that's easy to do for `cdef` classes, slightly harder for regular classes). That would likely give the appropriate granularity and keep things grouped in logical units.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Looking around a bit, [it seems](https://gcc.gnu.org/wiki/Var_Tracking_Assignments) that variable tracking is mostly a debugging feature. Would be nice to locally disable it somehow, but I can't find a way to do that. In any case, the fact that large files break that feature shouldn't trouble us.\r\n\r\nI feel inclined to give a low priority to this issue. Not zero – if we can reduce the C compiler runtime, cool (also in terms of CO2 emissions), but it's only really an issue for large and very large modules, which are rare for simply practical reasons.",
            "created_at": "2021-10-24T09:05:54Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-950288163",
            "id": 950288163,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc44pD8j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/950288163/reactions"
            },
            "updated_at": "2021-10-24T09:05:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/950288163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Looking around a bit, [it seems](https://gcc.gnu.org/wiki/Var_Tracking_Assignments) that variable tracking is mostly a debugging feature. Would be nice to locally disable it somehow, but I can't find a way to do that. In any case, the fact that large files break that feature shouldn't trouble us.\r\n\r\nYeah - I also looked and couldn't find a way to disable it locally\r\n\r\n> \r\n> I feel inclined to give a low priority to this issue. Not zero – if we can reduce the C compiler runtime, cool (also in terms of CO2 emissions), but it's only really an issue for very large modules, which are rare for simply practical reasons.\r\n\r\nI agree - I was only really interested because it's causing the python 2.7 -all jobs to time out. I mainly created the issue because I _wasn't_ planning to do any more on it for now and wanted to record where I'd got to before forgetting it. So low priority!\r\n\r\n",
            "created_at": "2021-10-24T09:58:41Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-950295024",
            "id": 950295024,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc44pFnw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/950295024/reactions"
            },
            "updated_at": "2021-10-24T09:58:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/950295024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "To add some more data points, the slowest test files to compile in clang are actually not those that have the most complex module init functions but a large number of types (including closures) and functions:\r\n```\r\ncompile-c   :  1425.27 sec  (1071,  1.331 / run) - slowest: 'c:test_unicode' (28.38s), 'c:test_coroutines_pep492' (27.53s), 'c:test_asyncgen' (14.11s), 'c:memslice' (13.31s), 'c:exttype_total_ordering' (13.10s), 'c:test_grammar' (12.91s), 'c:fused_def' (12.85s), 'c:numpy_test' (12.06s)\r\n```\r\nhttps://github.com/cython/cython/runs/3996856486?check_suite_focus=true\r\n\r\nCan't say why that is. clang seems really slow here in comparison to gcc:\r\n```\r\ncompile-c   :   161.93 sec  (1078,  0.150 / run) - slowest: 'c:numpy_test' (20.83s), 'c:test_unicode' (0.48s), 'c:relaxed_strides' (0.47s), 'c:test_coroutines_pep492' (0.46s), 'c:libc_stdio' (0.42s), 'c:behnel4' (0.40s), 'c:embedded' (0.38s), 'c:a_capi' (0.34s)\r\n```\r\nhttps://github.com/cython/cython/runs/3996853937?check_suite_focus=true\r\n\r\nI checked the CFLAGS and they should say `-O0' in both cases, which should be honoured by both gcc and clang alike as saying \"do not spend time optimising the code\".",
            "created_at": "2021-10-25T13:18:58Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-950921570",
            "id": 950921570,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc44reli",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/950921570/reactions"
            },
            "updated_at": "2021-10-25T13:18:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/950921570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "On my laptop (just running `test_unicode`) I get\r\n\r\nclang:\r\n```\r\ncompile-c   :    45.93 sec  (   1, 45.928 / run) - slowest: 'c:test_unicode' (45.93s)\r\ncompile-cpp :    42.76 sec  (   1, 42.757 / run) - slowest: 'cpp:test_unicode' (42.76s)\r\n```\r\n\r\ngcc\r\n```\r\ncompile-c   :    57.95 sec  (   1, 57.948 / run) - slowest: 'c:test_unicode' (57.95s)\r\ncompile-cpp :    48.91 sec  (   1, 48.909 / run) - slowest: 'cpp:test_unicode' (48.91s)\r\n```\r\n\r\n(that's with `CLAGS=-Og`, just because `-O0` produces a lot of warnings when I use it).\r\n\r\nI'd say there's `ccache` is probably doing something here?",
            "created_at": "2021-10-25T17:43:05Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-951155889",
            "id": 951155889,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc44sXyx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/951155889/reactions"
            },
            "updated_at": "2021-10-25T17:43:05Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/951155889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ah, yeah, right. We don't have ccache on macOS. Probably something we should change.\n",
            "created_at": "2021-10-25T19:48:35Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-951253408",
            "id": 951253408,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc44svmg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/951253408/reactions"
            },
            "updated_at": "2021-10-25T19:48:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/951253408",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "BTW, I agree that class creations should give a good granularity for a split. I think that's worth trying out.",
            "created_at": "2021-12-18T16:57:39Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-997230380",
            "id": 997230380,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc47cIcs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/997230380/reactions"
            },
            "updated_at": "2021-12-18T16:57:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/997230380",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "For python-flint I notice a 50% slowdown in compilation time for Cython 3.0.0a11 compared to Cython 0.29.32 (https://github.com/fredrik-johansson/python-flint/pull/29#issuecomment-1351215409).\r\n\r\nIt goes from ~1 minute to ~1.5 minutes for a full `setup.py build_ext --inplace` so it's not a huge problem in python-flint's case but it seems like a regression that I guess could have bigger impact for some other projects.",
            "created_at": "2022-12-14T14:22:59Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1351490288",
            "id": 1351490288,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc5Qjhrw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1351490288/reactions"
            },
            "updated_at": "2022-12-14T14:22:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1351490288",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@oscarbenjamin do you know if that's in the pyx->c stage or the c-->so stage?",
            "created_at": "2022-12-14T16:55:30Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1351766618",
            "id": 1351766618,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc5QklJa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1351766618/reactions"
            },
            "updated_at": "2022-12-14T16:55:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1351766618",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "> @oscarbenjamin do you know if that's in the pyx->c stage or the c-->so stage?\r\n\r\nIs there an easy way to measure that?\r\n\r\nIt looks to me like the `c-->so` stage because I'm only compiling a single extension module and I can see warnings from the C compiler after around 5 seconds i.e.:\r\n```\r\n$ time python setup.py build_ext --inplace\r\n<snip>\r\nCompiling src/flint/pyflint.pyx because it depends on src/flint/functions.pyx.\r\n[1/1] Cythonizing src/flint/pyflint.pyx\r\nrunning build_ext\r\n\r\n## ----------- takes 5 seconds to get here\r\n\r\nbuilding 'flint._flint' extension\r\nINFO: C compiler: x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC\r\n\r\nINFO: compile options: '-I/usr/local/include -I/home/oscar/current/sympy/python-flint/.local/venv/include -I/usr/local/include/flint -I/home/oscar/current/sympy/python-flint/.local/venv/include/flint -I/home/oscar/current/sympy/python-flint/.local/venv/include -I/usr/include/python3.8 -c'\r\nINFO: x86_64-linux-gnu-gcc: src/flint/pyflint.c\r\nsrc/flint/pyflint.c: In function ‘__pyx_pf_5flint_6_flint_14dirichlet_char_4__init__’:\r\nsrc/flint/pyflint.c:194837:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\r\n       if (((__pyx_t_5 > __pyx_t_6) != 0)) {\r\n                       ^\r\nsrc/flint/pyflint.c: At top level:\r\nsrc/flint/pyflint.c:29053:18: warning: ‘__pyx_f_5flint_6_flint_any_as_fmpz_mpoly’ defined but not used [-Wunused-function]\r\n static PyObject *__pyx_f_5flint_6_flint_any_as_fmpz_mpoly(CYTHON_UNUSED PyObject *__pyx_v_x) {\r\n                  ^\r\nINFO: x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -DNDEBUG -g -fwrapv -O2 -Wall build/temp.linux-x86_64-3.8/src/flint/pyflint.o -L/home/oscar/current/sympy/python-flint/.local/venv/lib -L/usr/local/lib -larb -lflint -o /home/oscar/current/sympy/python-flint/src/flint/_flint.cpython-38-x86_64-linux-gnu.so\r\n\r\n# ----------- takes 1 minute to get here:\r\n\r\nreal\t0m54.163s\r\nuser\t0m53.124s\r\nsys\t0m0.828s\r\n```\r\nThat's with Cython 0.29.32 and it looks like about 5 seconds cythonising and then 50 seconds in the C compiler.\r\n\r\nWith Cython 3.0.0a11 it's more like about 5 seconds cythonising and then 70 seconds in the C compiler:\r\n```\r\nreal\t1m26.277s\r\nuser\t1m24.480s\r\nsys\t0m1.568s\r\n```\r\nThe C file generated by 3.0.0a11 is about 30% bigger in terms of lines (293186 lines vs 224736) which matches the increased compilation time.",
            "created_at": "2022-12-14T18:59:34Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1351989413",
            "id": 1351989413,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc5Qlbil",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1351989413/reactions"
            },
            "updated_at": "2022-12-14T18:59:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1351989413",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks @oscarbenjamin - you're rough guess at where the cythonization ends and the c compilation begins is probably right. Cython on it's own can be run with `cython <source_file_name>` and that might be the easiest way to measure Cython vs C.\r\n\r\nA few notes:\r\n* There was a bit of a slowdown in building the lexer(?) due to unicode support - it just vastly increased the size of a certain look-up table we had to build. See https://github.com/cython/cython/issues/3646. We think we clawed most of that back though by changing what was compiled.\r\n* A big chunk of the extra file size is probably limited API support. I wouldn't expect that to impact compilation time much - the preprocessor should probably be able to eliminate large chunks of code pretty quickly.\r\n* Personally I'd guess the biggest difference might be because we now default to `binding=True` (which generates a big chunk more C code, in exchange for more introspectability). That might be a useful thing to check (if you have time to test it).\r\n\r\nI have a few ideas about how to speed this up that I'd like to try. I wouldn't expect them to make 3.0 though - they're potentially fairly big changes.",
            "created_at": "2022-12-14T19:31:07Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1352040785",
            "id": 1352040785,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc5QloFR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1352040785/reactions"
            },
            "updated_at": "2022-12-14T19:31:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1352040785",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "It takes about 10 seconds to cythonise:\r\n```console\r\n# cython 3.0.0a11\r\n$ time cython -2 --module-name flint._flint flint/pyflint.pyx\r\nwarning: flint/_flint.pxd:18:0: The 'DEF' statement is deprecated and will be removed in a future Cython version. Consider using global variables, constants, and in-place literals instead. See https://github.com/cython/cython/issues/4310\r\n<snip more warnings>\r\nreal\t0m10.466s\r\nuser\t0m10.356s\r\nsys\t0m0.104s\r\n```\r\nThat part is only slightly faster with 0.29:\r\n```console\r\n# cython 0.29.32\r\n$ time cython -2 --module-name flint._flint flint/pyflint.pyx\r\n\r\nreal\t0m9.191s\r\nuser\t0m9.076s\r\nsys\t0m0.112s\r\n```",
            "created_at": "2022-12-14T20:06:03Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1352089668",
            "id": 1352089668,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc5Ql0BE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1352089668/reactions"
            },
            "updated_at": "2022-12-14T20:06:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1352089668",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "One more thing to try if you have time - can you try the full compilation with the `binding` compiler directive set to `True` and then `False` (I think you can add it to https://github.com/fredrik-johansson/python-flint/blob/d6e239d6bf4871a4d90f389177b805fec5368e98/setup.py#L48).\r\n\r\nIf you don't have time I can have a look myself in a few days, but it looks like I'd need to work out a few dependencies first, which I'm trying to avoid.",
            "created_at": "2022-12-14T21:56:05Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1352261895",
            "id": 1352261895,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc5QmeEH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1352261895/reactions"
            },
            "updated_at": "2022-12-14T21:56:05Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1352261895",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "> One more thing to try if you have time - can you try the full compilation with the binding compiler directive set to True and then False\r\n\r\nThat makes a big difference actually. With Cython 3.0.0a11 and `binding:True` I get a 3 minute build. With `binding:False` it's a 1.5 minute build so that's a 2x speedup.\r\n\r\nWhat exactly does the binding parameter do?\r\n\r\n(In the other timings reported below I didn't set the binding parameter at all which I guess means that it defaults to True)\r\n\r\n> If you don't have time I can have a look myself in a few days, but it looks like I'd need to work out a few dependencies first, which I'm trying to avoid.\r\n\r\nIt's not as bad as it looks because there is a script to download and build the dependencies that takes about 15 minutes so the full repro is\r\n```bash\r\ngit clone https://github.com/fredrik-johansson/python-flint.git\r\ncd python-flint/\r\nsource bin/activate \r\nbin/build_dependencies_unix.sh\r\n# Need numpy and cython at this point\r\ntime python setup.py build_ext --inplace\r\n```\r\n(I'm assuming that you're on a Unixy system with compilers etc. Don't try this at home on Windows, although the problem is worse there for mingw64.)\r\n\r\nThe dependency build is faster if you comment out this part:\r\nhttps://github.com/fredrik-johansson/python-flint/blob/d6e239d6bf4871a4d90f389177b805fec5368e98/bin/build_dependencies_unix.sh#L183-L185\r\n\r\nHaving just repeated the repro steps above I found that it actually took 3 minutes rather than the 1.5 minutes I previously reported:\r\n```console\r\n$ time python setup.py build_ext --inplace\r\n...\r\nreal\t3m10.113s\r\nuser\t3m8.504s\r\nsys\t0m1.468s\r\n```\r\nI guess the difference is because some parts of the compilation are maybe being cached which makes it a bit difficult to reason about timings. I've just tried repeating this a couple of times with cython 3.0.0a11 and 0.29.32:\r\n```\r\ntouch src/flint/*.pyx\r\ntime python setup.py build_ext --inplace\r\n```\r\nI'm now consistently getting ~3 minutes for 3.0.0a11 and ~1 minute for 0.29.32 so a 3x slowdown. I'm not sure why this is different from previous timings.\r\n\r\nI remember now that the reason I noticed a slowdown with cython 3.0.0a11 in the first place was because I was trying to make a coverage-enabled build which is slower in both cases. With cython 0.29:\r\n```console\r\n$ time PYTHON_FLINT_COVERAGE=true python setup.py build_ext --inplace\r\n...\r\nreal\t1m36.786s\r\nuser\t1m34.848s\r\nsys\t0m1.072s\r\n```\r\nAnd with 3.0.0a11 (actually master):\r\n```console\r\n$ time PYTHON_FLINT_COVERAGE=true python setup.py build_ext --inplace\r\n...\r\nreal\t3m50.796s\r\nuser\t3m48.324s\r\nsys\t0m1.460s\r\n```",
            "created_at": "2022-12-14T22:59:22Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1352331162",
            "id": 1352331162,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc5Qmu-a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1352331162/reactions"
            },
            "updated_at": "2022-12-14T22:59:22Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1352331162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What exactly does the binding parameter do?\r\n\r\nIt wraps functions in a CyFunction object, which adds a whole load of introspectable attributes. For example things like `__annotations__`, `__defaults__`. It makes them look a lot more like Python functions.\r\n\r\nIt's expected to slow things down because it does generate a lot more code to initialize these at start up. So it isn't worrying that it has an effect, although obviously it would be good if we could minimise the effect.\r\n\r\n> (In the other timings reported below I didn't set the binding parameter at all which I guess means that it defaults to True)\r\n\r\nIt defaults to True on Cython 3 and False in 0.29.x. so it's likely one of the more significant differences.\r\n\r\n> I guess the difference is because some parts of the compilation are maybe being cached which makes it a bit difficult to reason about timings. \r\n\r\nPassing `--force` to setup.py should eliminate most of the caching. No need to rerun everything though.\r\n\r\nThanks",
            "created_at": "2022-12-15T07:12:37Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1352647567",
            "id": 1352647567,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc5Qn8OP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1352647567/reactions"
            },
            "updated_at": "2022-12-15T07:12:37Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1352647567",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It might also be interesting to see the differences in symbol sizes that the C compiler generates from 0.29.x and 3.0 C sources. You can list those for a given extension module with\r\n`nm --print-size --size-sort --radix=d  some_module.*so`\r\nThe largest single symbol is usually the module init function (`__pyx_pymod_exec_…`). We already make gcc optimise it for size rather than speed, because it's normally only executed once on module import. It would be interesting the see the size differences of the largest symbols for a real project.",
            "created_at": "2022-12-15T10:02:31Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1352822578",
            "id": 1352822578,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc5Qom8y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1352822578/reactions"
            },
            "updated_at": "2022-12-15T10:02:31Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1352822578",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Given the compilation time [problems](https://groups.google.com/g/cython-users/c/hr3cFevY46k) we're having on PyArrow, I looked at our main workhorse Cython-compiled extension module and get the following symbol size numbers:\r\n\r\n(**edit**: for the record, this is using gcc)\r\n\r\n* in debug mode:\r\n```\r\n$ nm  --demangle --print-size --size-sort --radix=d  pyarrow/lib.cpython-310-x86_64-linux-gnu.so | tail -n20\r\n0000000002003445 0000000000010149 t __pyx_pf_7pyarrow_3lib_15SparseCOOTensor_8from_scipy(_object*, _object*)\r\n0000000001912935 0000000000010317 t __pyx_pf_7pyarrow_3lib_204table(_object*, _object*, _object*, _object*, _object*, _object*)\r\n0000000002271687 0000000000010507 t __pyx_pf_7pyarrow_3lib_10PythonFile___cinit__(__pyx_obj_7pyarrow_3lib_PythonFile*, _object*, _object*)\r\n0000000000485015 0000000000010534 t __pyx_pf_7pyarrow_3lib_14_PandasAPIShim_34__reduce_cython__(__pyx_obj_7pyarrow_3lib__PandasAPIShim*)\r\n0000000000402299 0000000000010703 t __pyx_f_7pyarrow_3lib__build_info()\r\n0000000002242800 0000000000011019 t __pyx_pf_7pyarrow_3lib_10NativeFile_68download(__pyx_obj_7pyarrow_3lib_NativeFile*, _object*, _object*)\r\n0000000001957916 0000000000011321 t __pyx_pf_7pyarrow_3lib_12TableGroupBy_2aggregate(_object*, _object*, _object*)\r\n0000000001273059 0000000000011418 t __pyx_pf_7pyarrow_3lib_5Array_85__arrow_c_array__(__pyx_obj_7pyarrow_3lib_Array*, _object*)\r\n0000000001931883 0000000000011660 t __pyx_pf_7pyarrow_3lib_208_from_pydict(_object*, _object*, _object*, _object*, _object*)\r\n0000000001758680 0000000000012254 t __pyx_pf_7pyarrow_3lib_11RecordBatch_40__arrow_c_array__(__pyx_obj_7pyarrow_3lib_RecordBatch*, _object*)\r\n0000000000419829 0000000000013497 t __pyx_f_7pyarrow_3lib_14_PandasAPIShim__import_pandas(__pyx_obj_7pyarrow_3lib__PandasAPIShim*, int)\r\n0000000000366641 0000000000013884 t __pyx_f_7pyarrow_3lib_convert_status(arrow::Status const&)\r\n0000000001432614 0000000000015636 t __pyx_pf_7pyarrow_3lib_11StructArray_6from_arrays(_object*, _object*, _object*, _object*, _object*)\r\n0000000002128423 0000000000018415 t __pyx_pf_7pyarrow_3lib_15SparseCSFTensor_6from_numpy(_object*, _object*, _object*, _object*, _object*, _object*)\r\n0000000001090086 0000000000027905 t __pyx_pf_7pyarrow_3lib_176array(_object*, _object*, _object*, _object*, _object*, _object*, int, __pyx_obj_7pyarrow_3lib_MemoryPool*)\r\n0000000005415008 0000000000035392 b __pyx_mstate_global_static\r\n0000000003208716 0000000000104462 t __Pyx_modinit_type_init_code()\r\n0000000002772160 0000000000167129 t __Pyx_CreateStringTabAndInitStrings()\r\n0000000002941621 0000000000259781 t __Pyx_InitCachedConstants()\r\n0000000003315267 0000000000412803 t __pyx_pymod_exec_lib(_object*)\r\n```\r\n\r\n* in release mode (`-O2`):\r\n```\r\n$ nm  --demangle --print-size --size-sort --radix=d  pyarrow/lib.cpython-310-x86_64-linux-gnu.so | tail -n20\r\n0000000001320832 0000000000007236 t __pyx_pw_7pyarrow_3lib_5Table_25cast(_object*, _object* const*, long, _object*)\r\n0000000003106304 0000000000007332 r __pyx_doc_7pyarrow_3lib_18_PandasConvertible_to_pandas\r\n0000000002621056 0000000000007467 t __pyx_pw_7pyarrow_3lib_5Array_23from_buffers(_object*, _object* const*, long, _object*)\r\n0000000001941360 0000000000007472 t __pyx_f_7pyarrow_3lib_convert_status(arrow::Status const&)\r\n0000000002020464 0000000000007479 t __pyx_pw_7pyarrow_3lib_10NativeFile_69download(_object*, _object* const*, long, _object*)\r\n0000000002679152 0000000000007497 t __pyx_f_7pyarrow_3lib__array_like_to_pandas(_object*, _object*, _object*)\r\n0000000002519488 0000000000007583 t __pyx_pf_7pyarrow_3lib_16KeyValueMetadata___init__(__pyx_obj_7pyarrow_3lib_KeyValueMetadata*, _object*, _object*)\r\n0000000001702608 0000000000007622 t __pyx_pw_7pyarrow_3lib_12TableGroupBy_3aggregate(_object*, _object* const*, long, _object*)\r\n0000000001883792 0000000000007765 t __pyx_pw_7pyarrow_3lib_10PythonFile_1__cinit__(_object*, _object*, _object*)\r\n0000000002607376 0000000000008111 t __pyx_pw_7pyarrow_3lib_15SparseCOOTensor_9from_scipy(_object*, _object* const*, long, _object*)\r\n0000000001372256 0000000000008409 t __pyx_pw_7pyarrow_3lib_21FixedShapeTensorArray_5from_numpy_ndarray(_object*, _object* const*, long, _object*)\r\n0000000002629024 0000000000012271 t __pyx_pw_7pyarrow_3lib_11StructArray_7from_arrays(_object*, _object* const*, long, _object*)\r\n0000000001776128 0000000000013574 t __pyx_pw_7pyarrow_3lib_209_from_pydict(_object*, _object* const*, long, _object*)\r\n0000000002593680 0000000000013687 t __pyx_pw_7pyarrow_3lib_15SparseCSFTensor_7from_numpy(_object*, _object* const*, long, _object*)\r\n0000000000491111 0000000000032195 t __Pyx_modinit_type_init_code()\r\n0000000002317424 0000000000033296 t __pyx_pw_7pyarrow_3lib_177array(_object*, _object* const*, long, _object*)\r\n0000000003815264 0000000000035392 b __pyx_mstate_global_static\r\n0000000000251008 0000000000092059 t __Pyx_InitCachedConstants()\r\n0000000000347361 0000000000141382 t __Pyx_CreateStringTabAndInitStrings()\r\n0000000000530742 0000000000423977 t __pyx_pymod_exec_lib(_object*)\r\n```\r\n\r\n* in release mode, optimized for small size (`-Os`):\r\n```\r\n$ nm  --demangle --print-size --size-sort --radix=d  pyarrow/lib.cpython-310-x86_64-linux-gnu.so | tail -n20\r\n0000000002023037 0000000000004957 t __pyx_pw_7pyarrow_3lib_10PythonFile_1__cinit__(_object*, _object*, _object*)\r\n0000000001252361 0000000000005535 t __pyx_pw_7pyarrow_3lib_21FixedShapeTensorArray_5from_numpy_ndarray(_object*, _object* const*, long, _object*)\r\n0000000001981287 0000000000005559 t __pyx_f_7pyarrow_3lib__array_like_to_pandas(_object*, _object*, _object*)\r\n0000000001669293 0000000000005619 t __pyx_pw_7pyarrow_3lib_10NativeFile_69download(_object*, _object* const*, long, _object*)\r\n0000000001534145 0000000000005638 t __pyx_f_7pyarrow_3lib_convert_status(arrow::Status const&)\r\n0000000001875635 0000000000005688 t __pyx_pw_7pyarrow_3lib_5Array_23from_buffers(_object*, _object* const*, long, _object*)\r\n0000000001955185 0000000000005827 t __pyx_pw_7pyarrow_3lib_15SparseCOOTensor_9from_scipy(_object*, _object* const*, long, _object*)\r\n0000000001918580 0000000000005859 t __pyx_pf_7pyarrow_3lib_16KeyValueMetadata___init__(__pyx_obj_7pyarrow_3lib_KeyValueMetadata*, _object*, _object*)\r\n0000000001435273 0000000000006152 t __pyx_pw_7pyarrow_3lib_205table(_object*, _object* const*, long, _object*)\r\n0000000002729056 0000000000006871 r __pyx_k_Convert_to_a_pandas_compatible\r\n0000000002413984 0000000000007332 r __pyx_doc_7pyarrow_3lib_18_PandasConvertible_to_pandas\r\n0000000001488793 0000000000007538 t __pyx_pw_7pyarrow_3lib_209_from_pydict(_object*, _object* const*, long, _object*)\r\n0000000001964279 0000000000008826 t __pyx_pw_7pyarrow_3lib_11StructArray_7from_arrays(_object*, _object* const*, long, _object*)\r\n0000000001924854 0000000000009528 t __pyx_pw_7pyarrow_3lib_15SparseCSFTensor_7from_numpy(_object*, _object* const*, long, _object*)\r\n0000000001831983 0000000000025197 t __pyx_pw_7pyarrow_3lib_177array(_object*, _object* const*, long, _object*)\r\n0000000000480787 0000000000032090 t __Pyx_modinit_type_init_code()\r\n0000000003090272 0000000000035392 b __pyx_mstate_global_static\r\n0000000000250872 0000000000092090 t __Pyx_InitCachedConstants()\r\n0000000000346362 0000000000130626 t __Pyx_CreateStringTabAndInitStrings()\r\n0000000000518452 0000000000456334 t __pyx_pymod_exec_lib(_object*)\r\n```\r\n\r\nThe initialization functions are positively huge...",
            "created_at": "2024-02-21T16:06:04Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1957113454",
            "id": 1957113454,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50py5u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1957113454/reactions"
            },
            "updated_at": "2024-02-21T17:49:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1957113454",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Looking at one of the initialization functions, I see a lot of repeated snippets for creating function objects, for example:\r\n```c++\r\n  /* \"pyarrow/memory.pxi\":227\r\n *\r\n *\r\n * def log_memory_allocations(enable=True):             # <<<<<<<<<<<<<<\r\n *     \"\"\"\r\n *     Enable or disable memory allocator logging for debugging purposes\r\n */\r\n  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_7pyarrow_3lib_37log_memory_allocations, 0, __pyx_n_s_log_memory_allocations, NULL, __pyx_n_s_pyarrow_lib, __pyx_d, ((PyObject *)__pyx_codeobj__302)); if (unlikely(!__pyx_t_7)) __PYX_ERR(14, 227, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_7);\r\n  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__303);\r\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_log_memory_allocations, __pyx_t_7) < 0) __PYX_ERR(14, 227, __pyx_L1_error)\r\n  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\r\n```\r\n\r\nIt seems that those could generate much shorter code by walking an array of constant-initialized structures, for example (not sure that's flexible enough):\r\n```c++\r\ntypedef struct {\r\n    PyMethodDef* ml;\r\n    int flags;\r\n    PyObject* qualname;\r\n    PyObject* closure;\r\n    PyObject* module;\r\n    PyObject* globals;\r\n    PyObject* code;\r\n    PyObject* defaults_tuple;\r\n    int f_index;\r\n    int lineno;\r\n} GlobalFunctionDef;\r\n\r\nvoid init_func() {\r\n    GlobalFunctionDef function_defs[] = {\r\n        {&__pyx_mdef_7pyarrow_3lib_37log_memory_allocations, 0,\r\n         __pyx_n_s_log_memory_allocations, NULL, __pyx_n_s_pyarrow_lib,\r\n         __pyx_d, ((PyObject *)__pyx_codeobj__302), __pyx_tuple__303,\r\n         14, 227},\r\n        // ... other functions ...\r\n    };\r\n\r\n    for (int i = 0; i < sizeof(function_defs); ++i) {\r\n        GlobalFunctionDef* def = &function_defs[i];\r\n        __pyx_t_7 = __Pyx_CyFunction_New(def->ml, def->flags, def->qualname,\r\n                                         def->closure, def->module, def->globals,\r\n                                         def->code, def->defaults_tuple);\r\n        __Pyx_GOTREF(__pyx_t_7);\r\n        if (def->defaults_tuple) {\r\n            __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, def->defaults_tuple);\r\n        }\r\n        if (PyDict_SetItem(__pyx_d, def->qualname, __pyx_t_7) < 0) {\r\n            __PYX_ERR(def->f_index, def->lineno, __pyx_L1_error);\r\n        }\r\n        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\r\n    }\r\n```",
            "created_at": "2024-02-21T16:11:38Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1957141019",
            "id": 1957141019,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50p5ob",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1957141019/reactions"
            },
            "updated_at": "2024-02-21T16:11:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1957141019",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm looking at the disassembly of `__pyx_pymod_exec_lib` and something else stands out: *more than half of the disassembly output* is made of such code snippets:\r\n```asm\r\n   aa2a4:\t31 c0                \txor    %eax,%eax\r\n   aa2a6:\t31 d2                \txor    %edx,%edx\r\n   aa2a8:\t31 f6                \txor    %esi,%esi\r\n   aa2aa:\t45 31 ff             \txor    %r15d,%r15d\r\n   aa2ad:\t48 89 85 b0 fe ff ff \tmov    %rax,-0x150(%rbp)\r\n   aa2b4:\t31 c0                \txor    %eax,%eax\r\n   aa2b6:\t31 db                \txor    %ebx,%ebx\r\n   aa2b8:\t31 c9                \txor    %ecx,%ecx\r\n   aa2ba:\t48 89 85 c0 fe ff ff \tmov    %rax,-0x140(%rbp)\r\n   aa2c1:\t45 31 db             \txor    %r11d,%r11d\r\n   aa2c4:\t45 31 d2             \txor    %r10d,%r10d\r\n   aa2c7:\t45 31 f6             \txor    %r14d,%r14d\r\n   aa2ca:\t48 89 95 a0 fe ff ff \tmov    %rdx,-0x160(%rbp)\r\n   aa2d1:\t45 31 e4             \txor    %r12d,%r12d\r\n   aa2d4:\t31 d2                \txor    %edx,%edx\r\n   aa2d6:\t45 31 ed             \txor    %r13d,%r13d\r\n   aa2d9:\t48 89 b5 a8 fe ff ff \tmov    %rsi,-0x158(%rbp)\r\n   aa2e0:\t41 b8 fe d2 04 00    \tmov    $0x4d2fe,%r8d\r\n   aa2e6:\t48 8d 35 aa 5c 1f 00 \tlea    0x1f5caa(%rip),%rsi        # 29ff97 <_fini+0x19db>\r\n   aa2ed:\tb8 01 00 00 00       \tmov    $0x1,%eax\r\n   aa2f2:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\r\n   aa2f8:\te9 17 e7 03 00       \tjmp    e8a14 <__pyx_pymod_exec_lib(_object*)+0x670de>\r\n   aa2fd:\t45 31 c9             \txor    %r9d,%r9d\r\n   aa300:\t45 31 d2             \txor    %r10d,%r10d\r\n   aa303:\t45 31 db             \txor    %r11d,%r11d\r\n   aa306:\t45 31 e4             \txor    %r12d,%r12d\r\n   aa309:\t4c 89 8d b0 fe ff ff \tmov    %r9,-0x150(%rbp)\r\n   aa310:\t45 31 ff             \txor    %r15d,%r15d\r\n   aa313:\t31 db                \txor    %ebx,%ebx\r\n   aa315:\t31 c9                \txor    %ecx,%ecx\r\n   aa317:\t4c 89 95 c0 fe ff ff \tmov    %r10,-0x140(%rbp)\r\n   aa31e:\t31 d2                \txor    %edx,%edx\r\n   aa320:\t45 31 d2             \txor    %r10d,%r10d\r\n   aa323:\t45 31 f6             \txor    %r14d,%r14d\r\n   aa326:\t4c 89 9d a0 fe ff ff \tmov    %r11,-0x160(%rbp)\r\n   aa32d:\t45 31 ed             \txor    %r13d,%r13d\r\n   aa330:\t45 31 db             \txor    %r11d,%r11d\r\n   aa333:\t41 b8 00 d3 04 00    \tmov    $0x4d300,%r8d\r\n   aa339:\t4c 89 a5 a8 fe ff ff \tmov    %r12,-0x158(%rbp)\r\n   aa340:\t48 8d 35 50 5c 1f 00 \tlea    0x1f5c50(%rip),%rsi        # 29ff97 <_fini+0x19db>\r\n   aa347:\t45 31 e4             \txor    %r12d,%r12d\r\n   aa34a:\tb8 01 00 00 00       \tmov    $0x1,%eax\r\n   aa34f:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\r\n   aa355:\te9 ba e6 03 00       \tjmp    e8a14 <__pyx_pymod_exec_lib(_object*)+0x670de>\r\n```\r\n\r\nand, looking at the sites where these code snippets are jumped from, it seems each of them corresponds to the expansion of `__PYX_ERR`.\r\n",
            "created_at": "2024-02-21T16:26:20Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1957195715",
            "id": 1957195715,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50qG_D",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1957195715/reactions"
            },
            "updated_at": "2024-02-21T16:26:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1957195715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Looking at one of the initialization functions, I see a lot of repeated snippets for creating function objects,\r\n> [...]\r\n> It seems that those could generate much shorter code by walking an array of constant-initialized structures,\r\n\r\nRepeating what I said on the mailing list: it isn't quite as simple as that because the function objects need to be created at the right time in the execution, which might be interspersed with other lines. But there may well still be useful optimizations there.\r\n\r\n(I think it might also be tricky based on how we represent these internally which is \"something that makes a function object, followed by an assignment\". That's more of an excuse than a good technical reason.)",
            "created_at": "2024-02-21T19:09:51Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1957725080",
            "id": 1957725080,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50sIOY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1957725080/reactions"
            },
            "updated_at": "2024-02-21T19:09:51Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1957725080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> it seems each of them corresponds to the expansion of __PYX_ERR.\r\n\r\nTo me `__PYX_ERR` looks fairly simple - it's difficult to see how it could be shrunk (or factored out into a function call) but it may well be worth a look.",
            "created_at": "2024-02-21T19:25:00Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1957748701",
            "id": 1957748701,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50sN_d",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1957748701/reactions"
            },
            "updated_at": "2024-02-21T19:25:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1957748701",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> To me `__PYX_ERR` looks fairly simple - it's difficult to see how it could be shrunk (or factored out into a function call) but it may well be worth a look.\r\n\r\nIs it possible to refactor `__PYX_ERR` to function call if it contains goto? But what I did is to do following (stupid and broken) refactor of `__PYX_MARK_ERR_POS`:\r\n\r\n![image](https://github.com/cython/cython/assets/827060/ac7944e2-2de9-4475-a15b-7d567ae170b6)\r\n\r\nI tried to compare result size for Cython's `ParseTreeTransforms.py` file. I was able to shrink the size of .so file from 1.8M to 1.6M with standard clang parameters coming from `cythonize` command.\r\n",
            "created_at": "2024-02-21T19:47:52Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1957784585",
            "id": 1957784585,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50sWwJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1957784585/reactions"
            },
            "updated_at": "2024-02-21T19:47:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1957784585",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> it seems each of them corresponds to the expansion of `__PYX_ERR`.\n\nThat macro is marked as cold code, which is probably why you see a bulk of them stuffed together in a cold code section, apart from the rest of the init function implementation (which, BTW, is marked as \"prefer short code over speed\").\n\nThat said, it might be worth trying if wrapping this tiny bit of code in a function makes a visible difference. It's cold code, so it probably won't get inlined and might save a few bytes of code space per call. And as you noted, there can be loads of calls. We can still limit this to the scope of the module init function, where it hurts most in large modules.\n",
            "created_at": "2024-02-21T19:51:27Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1957789686",
            "id": 1957789686,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50sX_2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1957789686/reactions"
            },
            "updated_at": "2024-02-21T19:51:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1957789686",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But what I did is to do following (stupid and broken) refactor of __PYX_MARK_ERR_POS:\r\n\r\nDoesn't quite work: `__pyx_filename`, `__pyx_lineno`, and `__pyx_clineno` are local variables in most functions (but global variables in the initialization functions. So you'd need to take the address of them and pass them into `__PYX_MARK_ERR_POS`.",
            "created_at": "2024-02-21T19:52:29Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1957791316",
            "id": 1957791316,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50sYZU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1957791316/reactions"
            },
            "updated_at": "2024-02-21T19:52:29Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1957791316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > But what I did is to do following (stupid and broken) refactor of __PYX_MARK_ERR_POS:\r\n> \r\n> Doesn't quite work: `__pyx_filename`, `__pyx_lineno`, and `__pyx_clineno` are local variables in most functions (but global variables in the initialization functions. So you'd need to take the address of them and pass them into `__PYX_MARK_ERR_POS`.\r\n\r\nI know that's why I called the refactor **stupid and broken**. I was just curious how much space can be saved moving to function from macro. My only goal was to get compilable code.",
            "created_at": "2024-02-21T19:53:42Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1957793421",
            "id": 1957793421,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50sY6N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1957793421/reactions"
            },
            "updated_at": "2024-02-21T19:55:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1957793421",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think it's also worth having another look at the string table generation. I think I might have made it significantly worse as part of the \"module state\" code refactor and I can see a fairly easy way out of it probably. I'll give that a go later this week.",
            "created_at": "2024-02-21T20:21:09Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1957839886",
            "id": 1957839886,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50skQO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1957839886/reactions"
            },
            "updated_at": "2024-02-21T20:21:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1957839886",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Repeating what I said on the mailing list: it isn't quite as simple as that because the function objects need to be created at the right time in the execution, which might be interspersed with other lines.\r\n\r\nOh, I see. I was probably being a bit simplistic here :-)",
            "created_at": "2024-02-22T14:40:01Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1959592251",
            "id": 1959592251,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50zQE7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1959592251/reactions"
            },
            "updated_at": "2024-02-22T14:40:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1959592251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "By the way, something much simpler might be to move each type initialization to its own function, so as to avoid having a single extremely large init function.",
            "created_at": "2024-02-22T14:41:11Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1959594652",
            "id": 1959594652,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50zQqc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1959594652/reactions"
            },
            "updated_at": "2024-02-22T14:41:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1959594652",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> By the way, something much simpler might be to move each type initialization to its own function, so as to avoid having a single extremely large init function.\r\n\r\nSee the ticket description.",
            "created_at": "2024-02-22T15:56:07Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1959747095",
            "id": 1959747095,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50z14X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1959747095/reactions"
            },
            "updated_at": "2024-02-22T15:56:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1959747095",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'll try to have a look at implementing a \"tuple table\" and \"code object table\". I suspect optimizing the int initialization isn't worth it.\r\n\r\nI think that may be all the metaphorical low-hanging fruit here though",
            "created_at": "2024-02-22T18:17:10Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1960007120",
            "id": 1960007120,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc5001XQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1960007120/reactions"
            },
            "updated_at": "2024-02-22T18:17:10Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1960007120",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Is it possible to refactor `__PYX_ERR` to function call if it contains goto? But what I did is to do following (stupid and broken) refactor of `__PYX_MARK_ERR_POS`:\r\n> \r\n> ![image](https://private-user-images.githubusercontent.com/827060/306754458-ac7944e2-2de9-4475-a15b-7d567ae170b6.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDg4MDU2NzgsIm5iZiI6MTcwODgwNTM3OCwicGF0aCI6Ii84MjcwNjAvMzA2NzU0NDU4LWFjNzk0NGUyLTJkZTktNDQ3NS1hMTViLTdkNTY3YWUxNzBiNi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMjI0JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDIyNFQyMDA5MzhaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT04OWNmY2MxNWY2NTYzNTFjMDI4NTgyOGM4N2IwMmM4MjA5MGRjMzU1ZGU1ZDFlMWM3Y2ZhZTE5NDg5OTBhNzFmJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.vbcQy6lfij6YnehvKUo7m89oohORrzus3W4ZK_mcRjA)\r\n> \r\n> I tried to compare result size for Cython's `ParseTreeTransforms.py` file. I was able to shrink the size of .so file from 1.8M to 1.6M with standard clang parameters coming from `cythonize` command.\r\n\r\nI played a little and it turned out that refactoring `__PYX_MARK_ERR_POS` to static function is not what reduces the resulting binary size. The main culprit is `__LINE__` macro. I found out that Cython can be configured to not generate C line number (and hence avoiding `__LINE__` macro) by setting `c_line_in_traceback=False`. This option is not documented and is available only from `Cython.Build.cythonize()`. E.g. when I compiled `ParseTreeTransforms.py` using following `setup.py`:\r\n```python\r\nfrom setuptools import setup\r\nfrom Cython.Build import cythonize\r\n\r\nsetup(\r\n    name=\"My hello app\",\r\n    ext_modules=cythonize(\"ParseTreeTransforms.py\", c_line_in_traceback=False),\r\n)\r\n```\r\nI was able to reduce the resulting binary size by 4%.\r\n\r\n> [!NOTE]  \r\n> I tried it only in clang, not sure if it will be the same in  GCC/MSVC though. ",
            "created_at": "2024-02-24T20:17:23Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1962707865",
            "id": 1962707865,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50_IuZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1962707865/reactions"
            },
            "updated_at": "2024-02-24T20:18:06Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1962707865",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `c_line_in_traceback=False`\n> I was able to reduce the resulting binary size by 4%.\n\nThat's quite possible, because it reduces the number of different error \nhandling cases from (more or less) the number of executed C source lines to \n(more or less) the number of Python source lines. That allows the C \ncompiler to collapse them into substantially less code.\n\nMaybe we can reorganise the __LINE__ setting somehow, to allow collapsing \nat least the rest of the error position setup?\n\nThat said, many libraries are probably quite happy without C code lines in \nstack traces.\n",
            "created_at": "2024-02-24T20:31:44Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1962724278",
            "id": 1962724278,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50_Mu2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1962724278/reactions"
            },
            "updated_at": "2024-02-24T20:31:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1962724278",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I found out that Cython can be configured to not generate C line number (and hence avoiding `__LINE__` macro) by setting `c_line_in_traceback=False`\r\n\r\nSo it can also be controlled by the `CYTHON_CLINE_IN_TRACEBACK`  C macro (which is off by default). Both need to be on for it to work. The C macro is also undocumented.\r\n\r\nI'm not sure quite why there's two controls for it, but that suggests the `cline = __LINE__` assignment should probably be guarded by the macro too given that it's pointless most of the time.\r\n\r\nEdit:\r\n\r\nIt's more complicated than this - there's three controls:\r\n* `Options.c_line_in_traceback` which can turn it off at the Cythonizing stage\r\n* `CYTHON_CLINE_IN_TRACEBACK` which can be set to either enable or disable it at C compile time, or left unset...\r\n* If `CYTHON_CLINE_IN_TRACEBACK` is unset then it becomes a runtime option controlled an attribute set on the \"cython runtime dict\"\r\nThis should probably all be documented somewhere, and maybe made more efficient if possible.",
            "created_at": "2024-02-24T20:32:28Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1962724472",
            "id": 1962724472,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50_Mx4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1962724472/reactions"
            },
            "updated_at": "2024-02-24T21:16:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1962724472",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There's a related traceback generation change that also seems to get a decent reduction in size https://github.com/cython/cython/pull/6032 (This issue is more about compile-time than size, but I suspect what improves one with improve both in this case)",
            "created_at": "2024-02-24T21:01:47Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1962730623",
            "id": 1962730623,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50_OR_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1962730623/reactions"
            },
            "updated_at": "2024-02-24T21:01:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1962730623",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Can you confirm that `--no-c-in-traceback` is the same as `Options.c_line_in_traceback`?\r\nI've just tried it on PyArrow and it has considerably reduced compile times on Windows:\r\nhttps://github.com/apache/arrow/pull/40225",
            "created_at": "2024-02-24T22:05:38Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1962742633",
            "id": 1962742633,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50_RNp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1962742633/reactions"
            },
            "updated_at": "2024-02-24T22:05:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1962742633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Can you confirm that `--no-c-in-traceback` is the same as `Options.c_line_in_traceback`? \r\n\r\nYes I think I can confirm. `no-c-in-traceback` is logical opposite to `c_line_in_traceback`\r\n\r\n```\r\n$ grep --color -RI c_line_in_traceback Cython\r\nCython/Distutils/old_build_ext.py:                    c_line_in_traceback = not no_c_in_traceback,\r\nCython/Distutils/build_ext.py:            'c_line_in_traceback': not getattr(ext, 'no_c_in_traceback', 0),\r\nCython/Compiler/Options.py:                         'c_line_in_traceback', 'gdb_debug',\r\nCython/Compiler/Options.py:    c_line_in_traceback=True,\r\nCython/Compiler/ModuleNode.py:        c_line_in_traceback=options.c_line_in_traceback)\r\nCython/Compiler/ModuleNode.py:        if options.c_line_in_traceback:\r\nCython/Compiler/CmdLine.py:    parser.add_argument(\"--no-c-in-traceback\", dest='c_line_in_traceback', action='store_false', help='bleh')\r\nCython/Compiler/Tests/TestCmdLine.py:        self.assertEqual(options.c_line_in_traceback, False)\r\nCython/Compiler/Tests/TestCmdLine.py:        self.check_default_options(options, ['c_line_in_traceback'])\r\nCython/Compiler/Code.py:    # c_line_in_traceback boolean         append the c file and line number to the traceback for exceptions?\r\nCython/Compiler/Code.py:    def __init__(self, emit_linenums=True, emit_code_comments=True, c_line_in_traceback=True):\r\nCython/Compiler/Code.py:        self.c_line_in_traceback = c_line_in_traceback\r\n```\r\n\r\nAgain it seems to be undocumented parameter of cython command... :-(\r\n\r\nhttps://github.com/cython/cython/blob/e6c621a91265d94a6c0dad9975e85b46c493706d/Cython/Compiler/CmdLine.py#L157\r\n\r\nMoreover it is a mess. We have `Options.c_line_in_traceback`, `no-c-in-traceback` which is basically an opposite plu a magicalf macros which somehow affect the C line traceback which I btw I was not able to create (maybe I am just stupid though :-D)",
            "created_at": "2024-02-24T22:17:11Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1962744740",
            "id": 1962744740,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50_Ruk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1962744740/reactions"
            },
            "updated_at": "2024-02-24T22:20:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1962744740",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">I'm not sure quite why there's two controls for it,\n\nFor historic reasons, as always. It used to add a lot of C code overhead before we changed the ERR macro to include it, that's why there is a code generation option for it (or more than one, also for historic reasons of increasing usability). And the feature itself can be turned on and off with a C compile time macro, which seems the most reasonable to me. It's a debug option for people interested in the C code, after all.\n\n\n> but that suggests the `cline = __LINE__` assignment should probably be guarded by the macro too\n\n+1\n\n",
            "created_at": "2024-02-25T06:26:58Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1962829955",
            "id": 1962829955,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc50_miD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1962829955/reactions"
            },
            "updated_at": "2024-02-25T06:26:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1962829955",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Linking to the improvements that we made so far for 3.1:\r\n\r\nMore efficient string constant storage:\r\nhttps://github.com/cython/cython/commit/f39526df12fb33db6eed318e37deb8d5dfe2a3ba\r\nhttps://github.com/cython/cython/commit/368a750952f97042f3e8728f18c350f80413c84d (fixed in https://github.com/cython/cython/commit/f5f83fbf803d1b3ba88f71d12bb48306815efd3c)\r\nhttps://github.com/cython/cython/commit/0d5af7b68d062b766cb59ee1b76ad342d004f8dc\r\n\r\nShorter code generation:\r\nhttps://github.com/cython/cython/commit/e6c621a91265d94a6c0dad9975e85b46c493706d\r\nhttps://github.com/cython/cython/commit/6526ecf4acfa829c1ec50a5d11db4cef18386e60\r\nhttps://github.com/cython/cython/commit/904741890210d681102780dbd9f41bdf1ae561d2\r\n\r\nEDIT: Overall, from what I tried, this can reduce the extension module size by 4-10%.",
            "created_at": "2024-02-27T11:20:41Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1966330797",
            "id": 1966330797,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc51M9Ot",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1966330797/reactions"
            },
            "updated_at": "2024-02-27T19:45:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1966330797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks a lot @scoder . The feedback and improvements here are really appreciated.\r\nIf there's an easy way to install a development version of Cython, we could give it a quick try on PyArrow.",
            "created_at": "2024-02-27T13:15:10Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1966525499",
            "id": 1966525499,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc51Nsw7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1966525499/reactions"
            },
            "updated_at": "2024-02-27T13:15:10Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1966525499",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "CyFunction generation: I actually think that most of them could just be pre-generated in a loop. I think think the ones that can't would:\r\n* have closures (doesn't apply to global scope anyway)\r\n* have non-literal default values (and we already make this distinction in the code generation)\r\n\r\nWe'd only be able to generate them in a loop - actually putting them in the module or class dicts would have to be done later since order really does matter. But potentially there's improvements there.",
            "created_at": "2024-02-27T18:22:21Z",
            "html_url": "https://github.com/cython/cython/issues/4425#issuecomment-1967341995",
            "id": 1967341995,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4425",
            "node_id": "IC_kwDOABDGAc51Q0Gr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1967341995/reactions"
            },
            "updated_at": "2024-02-27T18:22:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1967341995",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 39,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4425/comments",
    "created_at": "2021-10-23T13:52:15Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-10-23T13:54:05Z",
            "event": "labeled",
            "id": 5508301321,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "LE_lADOABDGAc49pDfezwAAAAFIUgIJ",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5508301321"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-12-14T16:55:30Z",
            "event": "mentioned",
            "id": 8039335260,
            "node_id": "MEE_lADOABDGAc49pDfezwAAAAHfLoVc",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8039335260"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-12-14T16:55:30Z",
            "event": "subscribed",
            "id": 8039335268,
            "node_id": "SE_lADOABDGAc49pDfezwAAAAHfLoVk",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8039335268"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-12-14T18:59:35Z",
            "event": "mentioned",
            "id": 8040345993,
            "node_id": "MEE_lADOABDGAc49pDfezwAAAAHfPfGJ",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8040345993"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-12-14T18:59:35Z",
            "event": "subscribed",
            "id": 8040346017,
            "node_id": "SE_lADOABDGAc49pDfezwAAAAHfPfGh",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8040346017"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-12-14T19:31:08Z",
            "event": "mentioned",
            "id": 8040565926,
            "node_id": "MEE_lADOABDGAc49pDfezwAAAAHfQUym",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8040565926"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
                "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
                "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
                "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
                "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oscarbenjamin",
                "id": 1159732,
                "login": "oscarbenjamin",
                "node_id": "MDQ6VXNlcjExNTk3MzI=",
                "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
                "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
                "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oscarbenjamin"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-12-14T19:31:08Z",
            "event": "subscribed",
            "id": 8040565935,
            "node_id": "SE_lADOABDGAc49pDfezwAAAAHfQUyv",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8040565935"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "f39526df12fb33db6eed318e37deb8d5dfe2a3ba",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/f39526df12fb33db6eed318e37deb8d5dfe2a3ba",
            "created_at": "2024-02-22T16:01:09Z",
            "event": "referenced",
            "id": 11893295610,
            "node_id": "REFE_lADOABDGAc49pDfezwAAAALE5Un6",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11893295610"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "99a17f194df2299bc170a7245cd0425c20a4a53b",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/99a17f194df2299bc170a7245cd0425c20a4a53b",
            "created_at": "2024-02-24T10:03:58Z",
            "event": "referenced",
            "id": 11910480413,
            "node_id": "REFE_lADOABDGAc49pDfezwAAAALF64Id",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11910480413"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "904741890210d681102780dbd9f41bdf1ae561d2",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/904741890210d681102780dbd9f41bdf1ae561d2",
            "created_at": "2024-02-27T06:50:27Z",
            "event": "referenced",
            "id": 11931636410,
            "node_id": "REFE_lADOABDGAc49pDfezwAAAALHLlK6",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11931636410"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-02-27T13:15:11Z",
            "event": "mentioned",
            "id": 11936211217,
            "node_id": "MEE_lADOABDGAc49pDfezwAAAALHdCER",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11936211217"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-02-27T13:15:11Z",
            "event": "subscribed",
            "id": 11936211248,
            "node_id": "SE_lADOABDGAc49pDfezwAAAALHdCEw",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11936211248"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4425/events",
    "html_url": "https://github.com/cython/cython/issues/4425",
    "id": 1034172382,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4425/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc49pDfe",
    "number": 4425,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4425/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4425/timeline",
    "title": "[BUG] Large files compile very slowly in the C compiler",
    "updated_at": "2024-02-27T19:45:57Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4425",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}