{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I do not know if this would fall into the realm of a bug or maybe just something of a convenience feature that might be added. That can be determined by the maintainers/authors.\r\n\r\nBackground of language_level (for those that do not know.\r\n\r\nTo set the language_level adding \r\n#cython: language_level={PYTHON MAJOR VERSION NUMBER}\r\nto the top of the pyx file will work if only compiling specifically for that python version.\r\n\r\nif you want to programmatically set the language level this can be done.\r\ncythonize(EXTENSIONS, compiler_directives={'language_level' : \"{PYTHON MAJOR VERSION NUMBER}\"))\r\n\r\nIn Cython there are 2 convenience classes Cython.Distutils.extension.Extension and Cython.Distutils.build_ext.build_ext. While there are great for integrating into the extension building portions of distutils/setuptools it does not allow for setting the language level without duplicating the code for the build_ext class and adding the language level support to it.\r\n\r\n\r\nI thought that the cython_directives in the Extension class would be used to do this exact thing.. It does not work if language_level is added to it.  There is no option for the build_ext or the Extension for \"compiler_directives\"\r\n\r\nI would like to request that the build_ext class gets extended to add the user option \"language_level\" this option can be set by the user. and if the option is not set by the user then in the finalize_options method of the class do an equality check for None. if it is None then set it to the corresponding python version.\r\n\r\nHere is an example of what the code would look like in Cython.Distutils.build_ext\r\n```python\r\nimport sys\r\n\r\nif 'setuptools' in sys.modules:\r\n    try:\r\n        from setuptools.command.build_ext import build_ext as _build_ext\r\n    except ImportError:\r\n        # We may be in the process of importing setuptools, which tries\r\n        # to import this.\r\n        from distutils.command.build_ext import build_ext as _build_ext\r\nelse:\r\n    from distutils.command.build_ext import build_ext as _build_ext\r\n\r\n\r\nclass new_build_ext(_build_ext, object):\r\n    user_options = [\r\n        (\r\n            'language-level=',\r\n            None,\r\n            'Sets the python language syntax to use \"2\", \"3\", \"3str\".' \r\n        )\r\n    ] + _build_ext.user_options\r\n\r\n    def initialize_options(self):\r\n        self.language_level = None\r\n        super(new_build_ext, self).initialize_options()\r\n        \r\n    def finalize_options(self):\r\n        if self.distribution.ext_modules:\r\n            if self.language_level is None:\r\n                self.language_level = str(sys.version_info[0])\r\n\r\n            assert self.language_level in ('2', '3', '3str'), 'Incorrect Cython language level (\"{0}\")'.format(self.language_level)\r\n           \r\n            nthreads = getattr(self, 'parallel', None)  # -j option in Py3.5+\r\n            nthreads = int(nthreads) if nthreads else None\r\n            \r\n            from Cython.Build.Dependencies import cythonize\r\n            \r\n            self.distribution.ext_modules[:] = cythonize(\r\n                self.distribution.ext_modules, \r\n                nthreads=nthreads, \r\n                force=self.force,\r\n                compiler_directives=dict(language_level=self.language_level)\r\n            )\r\n        super(new_build_ext, self).finalize_options()\r\n\r\n# This will become new_build_ext in the future.\r\nfrom .old_build_ext import old_build_ext as build_ext\r\n```\r\n\r\nI do not know if there is a way to set the language level using build_ext or Extension. I did a lot of digging and searching but came up empty handed. This is one of the reasons I did not make a PR for this and also because I do not know all of the inner workings of Cython and there could be use cases where the above would not work.\r\n\r\nOn a tangent but still related to build_ext. \r\n\r\nsetuptools has a nice feature called setup_requires. which only installs a package for the setup programs use and gets deleted if the setup program was run from pip or easy_install. it does not install it into the users site-packages folder.\r\n\r\nIf we wanted to use this feature with Cython the code below explains how to do this. This is only going to work if you use Extension from either setuptools or from distutils. otherwise you would need to add the extensions to ext_modules as outlined in the comments.\r\n\r\nyou need to subclass setuptools.command.build.build and override the initialize_options method.\r\n\r\nIt would look similar to the code below.\r\n\r\n```python\r\nimport setuptools\r\nimport setuptools.extension\r\nimport setuptools.command.build\r\n\r\nclass build(setuptools.command.build.build):\r\n\r\n    def initialize_options(self):\r\n        import Cython.Distutils.build_ext\r\n\r\n        self.distribution.cmdclass['build_ext'] = Cython.Distutils.build_ext.build_ext\r\n\r\n        # if you wanted to use the Extension class from Cython\r\n        # from Cython.Distutils.extension import Extension\r\n        # ext = Extension(....)\r\n        # self.distribution.ext_modules = [ext]\r\n\r\n        super(build, self).initialize_options()\r\n\r\n# and the call to setup\r\n\r\nsetuptools.setup(\r\n    name='some package name',\r\n    setup_requires=['Cython'],\r\n    ext_modules=[setuptools.extension.Extension(.....)],\r\n    cmdclass=dict(\r\n        build=build,\r\n        # this is done in build.initialize_options \r\n        # build_ext=Cython.Distutils.build_ext.build_ext\r\n    )\r\n)\r\n```\r\n\r\nI am hoping that information along these lines with a code example can get added to the documentation. Use case example would be installing a package from pypi where an extension gets compiled using Cython. After the package has been installed there is no further use of Cython after that.\r\n\r\nAll examples of using Cython are all under the assumption that Cython is already installed. There is no documentation on how to run a setup program without it being installed.\r\n\r\nAll code blocks in this issue are pseudo code and have not been tested, they are simply for example. There could be typos and things I may not have accounted for.\r\n\r\nThanks again for taking the time to read/review this.\r\n",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2995/comments",
    "created_at": "2019-06-12T06:11:47Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2995/events",
    "html_url": "https://github.com/cython/cython/issues/2995",
    "id": 455028557,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2995/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0NTUwMjg1NTc=",
    "number": 2995,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "language_level and Cython.Distutils.extension.Extension",
    "updated_at": "2019-06-12T06:13:17Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2995",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/10932297?v=4",
        "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
        "followers_url": "https://api.github.com/users/kdschlosser/followers",
        "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
        "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/kdschlosser",
        "id": 10932297,
        "login": "kdschlosser",
        "node_id": "MDQ6VXNlcjEwOTMyMjk3",
        "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
        "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
        "repos_url": "https://api.github.com/users/kdschlosser/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/kdschlosser"
    }
}