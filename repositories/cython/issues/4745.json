{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nC++ supports [user-defined conversion functions](https://en.cppreference.com/w/cpp/language/cast_operator), which can be used to allow implicit casts. Currently this does not appear to be supported by Cython. I tried to use\r\n```cython\r\noperator iterator()\r\n```\r\nwhich fails with `'operator' is not a type identifier`, since cython appears to always expect a type as first element.\r\nThis would e.g. be useful to allow implicit casts from `iterator` to `const_iterator`. In my implementation in #4528 the following usage is possible:\r\n```cython\r\nfrom libcpp.set cimport set\r\n\r\ncdef func(set[int].const_iterator d):\r\n    pass\r\n\r\ndef main():\r\n    cdef set[int] a = set[int]()\r\n    cdef set[int].iterator c = a.begin()\r\n    cdef set[int].const_iterator d = a.begin()\r\n    func(a.cbegin())\r\n    func(<set[int].const_iterator>a.begin())\r\n```\r\nwhile the following requires an implicit cast and therefor fails to compile:\r\n```cython\r\n    func(a.begin())\r\n```\r\n\r\n**Describe the solution you'd like**\r\nIt would be great to be able to specify these implicit casts for C++ classes.\r\n\r\n**Describe alternatives you've considered**\r\nAlways add multiple overloads when defining functions\r\n```cython\r\niterator insert(iterator, const T&) except +\r\niterator insert(const_iterator, const T&) except +\r\n```\r\nThis has the disadvantage, that this adds boilerplate and does not work for `cdef function`\r\n\r\n",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4745/comments",
    "created_at": "2022-04-18T15:53:49Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4745/events",
    "html_url": "https://github.com/cython/cython/issues/4745",
    "id": 1207183435,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4745/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5H9ChL",
    "number": 4745,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4745/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4745/timeline",
    "title": "[ENH] Add support for C++ user-defined conversion functions",
    "updated_at": "2022-04-18T15:53:49Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4745",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
        "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
        "followers_url": "https://api.github.com/users/maxbachmann/followers",
        "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
        "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/maxbachmann",
        "id": 44199644,
        "login": "maxbachmann",
        "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
        "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
        "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
        "repos_url": "https://api.github.com/users/maxbachmann/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/maxbachmann"
    }
}