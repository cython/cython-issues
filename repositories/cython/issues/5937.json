{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\n\nThis warning is new in Cython 3 I believe:\r\n\r\n```\r\n[213/220] Compiling C object scipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/meson-generated__ppoly.c.o\r\nIn function '__Pyx_XCLEAR_MEMVIEW',\r\n    inlined from '__pyx_pf_5scipy_11interpolate_6_ppoly_20evaluate_nd' at scipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/_ppoly.c:22469:5,\r\n    inlined from '__pyx_fuse_0__pyx_pw_5scipy_11interpolate_6_ppoly_21evaluate_nd' at scipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/_ppoly.c:22135:13:\r\nscipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/_ppoly.c:1577:46: warning: '__sync_fetch_and_sub_4' writing 4 bytes into a region of size 0 overflows the destination [-Wstringop-overflow=]\r\n 1577 |     #define __pyx_atomic_decr_aligned(value) __sync_fetch_and_sub(value, 1)\r\n      |                                              ^~~~~~~~~~~~~~~~~~~~\r\nscipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/_ppoly.c:1604:13: note: in expansion of macro '__pyx_atomic_decr_aligned'\r\n 1604 |             __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview))\r\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~\r\nscipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/_ppoly.c:46077:29: note: in expansion of macro '__pyx_sub_acquisition_count'\r\n46077 |     old_acquisition_count = __pyx_sub_acquisition_count(memview);\r\n      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nIn file included from /home/rgommers/mambaforge/envs/scipy-dev/include/python3.10/Python.h:74,\r\n                 from scipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/_ppoly.c:16:\r\n/home/rgommers/mambaforge/envs/scipy-dev/include/python3.10/object.h: In function '__pyx_fuse_0__pyx_pw_5scipy_11interpolate_6_ppoly_21evaluate_nd':\r\n/home/rgommers/mambaforge/envs/scipy-dev/include/python3.10/object.h:605:22: note: at offset 56 into destination object '_Py_NoneStruct' of size 16\r\n  605 | PyAPI_DATA(PyObject) _Py_NoneStruct; /* Don't use this directly */\r\n      |                      ^~~~~~~~~~~~~~\r\nIn function '__Pyx_XCLEAR_MEMVIEW',\r\n    inlined from '__pyx_pf_5scipy_11interpolate_6_ppoly_22evaluate_nd' at scipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/_ppoly.c:23624:5,\r\n    inlined from '__pyx_fuse_1__pyx_pw_5scipy_11interpolate_6_ppoly_23evaluate_nd' at scipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/_ppoly.c:23290:13:\r\nscipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/_ppoly.c:1577:46: warning: '__sync_fetch_and_sub_4' writing 4 bytes into a region of size 0 overflows the destination [-Wstringop-overflow=]\r\n 1577 |     #define __pyx_atomic_decr_aligned(value) __sync_fetch_and_sub(value, 1)\r\n      |                                              ^~~~~~~~~~~~~~~~~~~~\r\nscipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/_ppoly.c:1604:13: note: in expansion of macro '__pyx_atomic_decr_aligned'\r\n 1604 |             __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview))\r\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~\r\nscipy/interpolate/_ppoly.cpython-310-x86_64-linux-gnu.so.p/_ppoly.c:46077:29: note: in expansion of macro '__pyx_sub_acquisition_count'\r\n46077 |     old_acquisition_count = __pyx_sub_acquisition_count(memview);\r\n      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/home/rgommers/mambaforge/envs/scipy-dev/include/python3.10/object.h: In function '__pyx_fuse_1__pyx_pw_5scipy_11interpolate_6_ppoly_23evaluate_nd':\r\n/home/rgommers/mambaforge/envs/scipy-dev/include/python3.10/object.h:605:22: note: at offset 56 into destination object '_Py_NoneStruct' of size 16\r\n  605 | PyAPI_DATA(PyObject) _Py_NoneStruct; /* Don't use this directly */\r\n```\n\n### Code to reproduce the behaviour:\n\nI'm seeing this when building SciPy with Python 3.10 and GCC 12.2.0. The warning is triggered here: https://github.com/scipy/scipy/blob/2d6be1c71322c33a7151f1620d633711715b6a7b/scipy/interpolate/_ppoly.pyx#L174\r\n\r\nThat code seems to come down to:\r\n```cython\r\ndef evaluate_nd(..., tuple xs, ...):\r\n    cdef double[::1] y\r\n    cdef int ip, ndim\r\n\r\n    ndim = len(xs)\r\n    for ip in range(ndim-1, -1, -1):\r\n        y = xs[ip]\r\n```\r\nAnd then calling that with an `xs` input which is a tuple of ndarrays.\r\n\r\nPerhaps it's clear to someone what is happening here without having to create a full standalone reproducer. \n\n### Expected behaviour\n\nNo build warning.\n\n### OS\n\nLinux\n\n### Python version\n\n3.10.10\n\n### Cython version\n\n3.0.7 (also present in 3.0.4)\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I can reproduce that warning (although testing it on scipy's code is the first time I've seen it).\r\n\r\nI *think* it's a false positive. The internal code in question:\r\n\r\n```\r\nstatic CYTHON_INLINE void __Pyx_XCLEAR_MEMVIEW(__Pyx_memviewslice *memslice,\r\n                                             int have_gil, int lineno) {\r\n    __pyx_nonatomic_int_type old_acquisition_count;\r\n    struct __pyx_memoryview_obj *memview = memslice->memview;\r\n    if (unlikely(!memview || (PyObject *) memview == Py_None)) {\r\n        memslice->memview = NULL;\r\n        return;\r\n    }\r\n    old_acquisition_count = __pyx_sub_acquisition_count(memview);\r\n```\r\n\r\nSo I think it's detected that `memslice->memview` points to a `_Py_NoneStruct` object, and hasn't realized that `None` is a singleton so the `memview == Py_None` prevents `__pyx_sub_acquisition_count` from ever being run in that case.\r\n\r\nIn Cython <3 the reference counting was slightly more indirect the compiler probably couldn't work as much out.\r\n\r\nIf I comment out `y = None` at the end of the loop then the warning goes away.\r\n\r\nIt'd definitely be good if Cython could avoid generating this warning. We could possibly do so just by not inlining `__Pyx_XCLEAR_MEMVIEW` but that might have its own performance costs (or gains...). I can't think of too many other things we could do.\r\n\r\nIf we accept my belief that it's a false positive, then I think Scipy can safely ignore it for now. I just haven't quite convinced myself I'm completely sure I'm right yet.",
            "created_at": "2024-01-07T18:46:02Z",
            "html_url": "https://github.com/cython/cython/issues/5937#issuecomment-1880139418",
            "id": 1880139418,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5937",
            "node_id": "IC_kwDOABDGAc5wEKaa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1880139418/reactions"
            },
            "updated_at": "2024-01-07T18:46:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1880139418",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We could possibly do so just by not inlining `__Pyx_XCLEAR_MEMVIEW` but that might have its own performance costs (or gains...). I can't think of too many other things we could do.\r\n\r\nConfirmed that this does make the warning go away. Still not sure if we want to do it though.",
            "created_at": "2024-01-07T18:50:34Z",
            "html_url": "https://github.com/cython/cython/issues/5937#issuecomment-1880140531",
            "id": 1880140531,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5937",
            "node_id": "IC_kwDOABDGAc5wEKrz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1880140531/reactions"
            },
            "updated_at": "2024-01-07T18:50:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1880140531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for having a look @da-woods.\r\n \r\n> If I comment out `y = None` at the end of the loop then the warning goes away.\r\n\r\nThat `y = None` line doesn't seem to do much, it was probably just added as a safety measure. But looks like it can be deleted. So no warnings from Cython is always good, but the decision here shouldn't matter to SciPy.",
            "created_at": "2024-01-07T19:10:15Z",
            "html_url": "https://github.com/cython/cython/issues/5937#issuecomment-1880144966",
            "id": 1880144966,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5937",
            "node_id": "IC_kwDOABDGAc5wELxG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1880144966/reactions"
            },
            "updated_at": "2024-01-07T19:10:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1880144966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/98330?v=4",
                "events_url": "https://api.github.com/users/rgommers/events{/privacy}",
                "followers_url": "https://api.github.com/users/rgommers/followers",
                "following_url": "https://api.github.com/users/rgommers/following{/other_user}",
                "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rgommers",
                "id": 98330,
                "login": "rgommers",
                "node_id": "MDQ6VXNlcjk4MzMw",
                "organizations_url": "https://api.github.com/users/rgommers/orgs",
                "received_events_url": "https://api.github.com/users/rgommers/received_events",
                "repos_url": "https://api.github.com/users/rgommers/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rgommers"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hmm, not 100% of that \"can be deleted\". The code generated for it is:\r\n```C\r\n    __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dc_double(Py_None, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 184, __pyx_L1_error)\r\n    __PYX_XCLEAR_MEMVIEW(&__pyx_v_y, 1);\r\n    __pyx_v_y = __pyx_t_8;\r\n    __pyx_t_8.memview = NULL;\r\n    __pyx_t_8.data = NULL;\r\n  }\r\n```\r\nWhich may be needed for bookkeeping. However, for the `y = xs[ip]` line higher up in the for-loop we see the same pattern:\r\n```C\r\n *         y = xs[ip]             # <<<<<<<<<<<<<<\r\n    if (unlikely(__pyx_v_xs == Py_None)) {\r\n      PyErr_SetString(PyExc_TypeError, \"'NoneType' object is not subscriptable\");\r\n      __PYX_ERR(0, 174, __pyx_L1_error)\r\n    }\r\n    __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dc_double(PyTuple_GET_ITEM(__pyx_v_xs, __pyx_v_ip), PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 174, __pyx_L1_error)\r\n    __PYX_XCLEAR_MEMVIEW(&__pyx_v_y, 1);\r\n    __pyx_v_y = __pyx_t_8;\r\n    __pyx_t_8.memview = NULL;\r\n    __pyx_t_8.data = NULL;\r\n```\r\n\r\nIt's not clear to me if this line makes any difference or Cython gives any kind of guarantee for this code:\r\n```cython\r\n        # grab array pointers\r\n        nxx[ip] = y.shape[0]\r\n        xx[ip] = <double*>&y[0]\r\n        y = None\r\n```",
            "created_at": "2024-01-07T19:38:29Z",
            "html_url": "https://github.com/cython/cython/issues/5937#issuecomment-1880151414",
            "id": 1880151414,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5937",
            "node_id": "IC_kwDOABDGAc5wENV2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1880151414/reactions"
            },
            "updated_at": "2024-01-07T19:38:29Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1880151414",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/98330?v=4",
                "events_url": "https://api.github.com/users/rgommers/events{/privacy}",
                "followers_url": "https://api.github.com/users/rgommers/followers",
                "following_url": "https://api.github.com/users/rgommers/following{/other_user}",
                "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rgommers",
                "id": 98330,
                "login": "rgommers",
                "node_id": "MDQ6VXNlcjk4MzMw",
                "organizations_url": "https://api.github.com/users/rgommers/orgs",
                "received_events_url": "https://api.github.com/users/rgommers/received_events",
                "repos_url": "https://api.github.com/users/rgommers/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rgommers"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think it makes any difference - the assignment further up the loop takes care of the reference counting either way. Unless you're doing `if y is None` or possibly `if y` then I think it should all be largely the same.\r\n\r\nI don't see why it should make any difference to the \"grab array pointers\" code either.",
            "created_at": "2024-01-07T19:44:32Z",
            "html_url": "https://github.com/cython/cython/issues/5937#issuecomment-1880152915",
            "id": 1880152915,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5937",
            "node_id": "IC_kwDOABDGAc5wENtT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1880152915/reactions"
            },
            "updated_at": "2024-01-07T19:44:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1880152915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5937/comments",
    "created_at": "2024-01-07T17:57:52Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-01-07T19:10:16Z",
            "event": "mentioned",
            "id": 11411807519,
            "node_id": "MEE_lADOABDGAc57VeC9zwAAAAKoMl0f",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11411807519"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-01-07T19:10:16Z",
            "event": "subscribed",
            "id": 11411807521,
            "node_id": "SE_lADOABDGAc57VeC9zwAAAAKoMl0h",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11411807521"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5937/events",
    "html_url": "https://github.com/cython/cython/issues/5937",
    "id": 2069225661,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5937/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc57VeC9",
    "number": 5937,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5937/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5937/timeline",
    "title": "[BUG] new warning `__sync_fetch_and_sub_4` overflows destination",
    "updated_at": "2024-01-07T19:44:33Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5937",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/98330?v=4",
        "events_url": "https://api.github.com/users/rgommers/events{/privacy}",
        "followers_url": "https://api.github.com/users/rgommers/followers",
        "following_url": "https://api.github.com/users/rgommers/following{/other_user}",
        "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rgommers",
        "id": 98330,
        "login": "rgommers",
        "node_id": "MDQ6VXNlcjk4MzMw",
        "organizations_url": "https://api.github.com/users/rgommers/orgs",
        "received_events_url": "https://api.github.com/users/rgommers/received_events",
        "repos_url": "https://api.github.com/users/rgommers/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rgommers"
    }
}