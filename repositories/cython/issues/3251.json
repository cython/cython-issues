{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "In source file here: https://github.com/cython/cython/blob/master/Cython/Includes/libcpp/set.pxd\r\n\r\nI see no reason the KeyComparator and ValueComparator operations and template parameters omitted.\r\n\r\nIt means anyone wishing to use these which can be a fairly normal use case, one has to do something like I have done as follows:\r\n```\r\nfrom libcpp.utility cimport pair\r\n\r\ncdef extern from \"<set>\" namespace \"std\" nogil:\r\n    cdef cppclass set[T, KC]:\r\n        ctypedef T value_type\r\n        cppclass iterator:\r\n            T& operator*()\r\n            iterator operator++()\r\n            iterator operator--()\r\n            bint operator==(iterator)\r\n            bint operator!=(iterator)\r\n        cppclass reverse_iterator:\r\n            T& operator*()\r\n            iterator operator++()\r\n            iterator operator--()\r\n            bint operator==(reverse_iterator)\r\n            bint operator!=(reverse_iterator)\r\n        cppclass const_iterator(iterator):\r\n            pass\r\n        cppclass const_reverse_iterator(reverse_iterator):\r\n            pass\r\n        set() except +\r\n        set(set&) except +\r\n        set(KC&)\r\n        #set& operator=(set&)\r\n        bint operator==(set&, set&)\r\n        bint operator!=(set&, set&)\r\n        bint operator<(set&, set&)\r\n        bint operator>(set&, set&)\r\n        bint operator<=(set&, set&)\r\n        bint operator>=(set&, set&)\r\n        iterator begin()\r\n        const_iterator const_begin \"begin\"()\r\n        void clear()\r\n        size_t count(const T&)\r\n        bint empty()\r\n        iterator end()\r\n        const_iterator const_end \"end\"()\r\n        pair[iterator, iterator] equal_range(const T&)\r\n        #pair[const_iterator, const_iterator] equal_range(T&)\r\n        iterator erase(iterator)\r\n        iterator erase(iterator, iterator)\r\n        size_t erase(T&)\r\n        iterator find(T&)\r\n        const_iterator const_find \"find\"(T&)\r\n        pair[iterator, bint] insert(const T&) except +\r\n        iterator insert(iterator, const T&) except +\r\n        void insert(iterator, iterator) except +\r\n        #key_compare key_comp()\r\n        iterator lower_bound(T&)\r\n        const_iterator const_lower_bound \"lower_bound\"(T&)\r\n        size_t max_size()\r\n        reverse_iterator rbegin()\r\n        const_reverse_iterator const_rbegin \"rbegin\"()\r\n        reverse_iterator rend()\r\n        const_reverse_iterator const_rend \"rend\"()\r\n        size_t size()\r\n        void swap(set&)\r\n        iterator upper_bound(const T&)\r\n        const_iterator const_upper_bound \"upper_bound\"(const T&)\r\n        #value_compare value_comp()\r\n\r\nctypedef Node* Node_ptr\r\nctypedef bool(*node_comp)(const Node_ptr& lhs, const Node_ptr& rhs)\r\ncdef bool node_comparator(const Node_ptr& lhs, const Node_ptr& rhs):\r\n    return <object>lhs.data < <object>rhs.data\r\n\r\ncdef struct Node:\r\n  set[Node_ptr, node_comp]* children\r\n  bint flag_last\r\n  void* data\r\n\r\ncdef Node* construct_node(void* data):\r\n  cdef Node* n\r\n  n = <Node*>PyMem_Malloc(sizeof(Node))\r\n  if not n: raise MemoryError()\r\n  deref(n).children = new set[Node_ptr, node_comp](node_comparator)\r\n  deref(n).flag_last = False\r\n  deref(n).data = data\r\n  return n\r\n  \r\ncdef void destruct_node(Node* n):\r\n  for x in deref(n.children):\r\n    destruct_node(x)\r\n  del n.children\r\n  PyMem_Free(n)\r\n```\r\n\r\nI think there is a way to provide a default template parameter for this and ValueComparator is not needed as its the same.  Can this be modified to make it into the standard Cython includes?  Or is there something I am missing here for why it is left out?",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I also spent a while trying to figure out why my cython code wouldn't compile until I realized first template parameter in Cython (unordered_set) is actually hash and not compare like it is in c++ spec. For now I'm going to do something else, but it would be nice to see this feature implemented  ",
            "created_at": "2021-03-30T05:16:52Z",
            "html_url": "https://github.com/cython/cython/issues/3251#issuecomment-809916661",
            "id": 809916661,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3251",
            "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTkxNjY2MQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-03-30T05:16:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/809916661",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8923525?v=4",
                "events_url": "https://api.github.com/users/smerkousdavid/events{/privacy}",
                "followers_url": "https://api.github.com/users/smerkousdavid/followers",
                "following_url": "https://api.github.com/users/smerkousdavid/following{/other_user}",
                "gists_url": "https://api.github.com/users/smerkousdavid/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/smerkousdavid",
                "id": 8923525,
                "login": "smerkousdavid",
                "node_id": "MDQ6VXNlcjg5MjM1MjU=",
                "organizations_url": "https://api.github.com/users/smerkousdavid/orgs",
                "received_events_url": "https://api.github.com/users/smerkousdavid/received_events",
                "repos_url": "https://api.github.com/users/smerkousdavid/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/smerkousdavid/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/smerkousdavid/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/smerkousdavid"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3251/comments",
    "created_at": "2019-11-28T00:31:56Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3251/events",
    "html_url": "https://github.com/cython/cython/issues/3251",
    "id": 529631173,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3251/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1Mjk2MzExNzM=",
    "number": 3251,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "libcpp set definition incomplete for KeyComparator, ValueComparator",
    "updated_at": "2021-03-30T05:16:52Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3251",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5968641?v=4",
        "events_url": "https://api.github.com/users/GregoryMorse/events{/privacy}",
        "followers_url": "https://api.github.com/users/GregoryMorse/followers",
        "following_url": "https://api.github.com/users/GregoryMorse/following{/other_user}",
        "gists_url": "https://api.github.com/users/GregoryMorse/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/GregoryMorse",
        "id": 5968641,
        "login": "GregoryMorse",
        "node_id": "MDQ6VXNlcjU5Njg2NDE=",
        "organizations_url": "https://api.github.com/users/GregoryMorse/orgs",
        "received_events_url": "https://api.github.com/users/GregoryMorse/received_events",
        "repos_url": "https://api.github.com/users/GregoryMorse/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/GregoryMorse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/GregoryMorse/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/GregoryMorse"
    }
}