{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "**Describe the bug**\r\nSometimes you want to create shortcuts to not repeat yourself. So you do something similar to `__ne__ = __eq__` (or any other dunder method).\r\n\r\n**To Reproduce**\r\nCode to reproduce the behaviour:\r\n```cython\r\ncdef class AlwaysTrue:\r\n    \"\"\"Class that always returns True when checking for equality or inequality\"\"\"\r\n\r\n    cdef int value\r\n\r\n    def __init__(self, int value):\r\n        self.value = value\r\n\r\n    def __eq__(self, other):\r\n        return True\r\n\r\n    __ne__ = __eq__\r\n```\r\nCompiling this gives the following errors:\r\n```\r\nalways_true.c(3005): warning C4013: 'None' undefined; assuming extern returning int\r\nalways_true.c(3005): warning C4047: 'return': 'PyObject *' differs in levels of indirection from 'int'\r\n```\r\nHere is the cythonized C code:\r\n```c\r\nstatic PyObject *__pyx_tp_richcompare_11always_true_AlwaysTrue(PyObject *o1, PyObject *o2, int op) {\r\n  switch (op) {\r\n    case Py_EQ: {\r\n      return __pyx_pw_11always_true_10AlwaysTrue_3__eq__(o1, o2);\r\n    }\r\n    case Py_NE: {\r\n      return None(o1, o2);\r\n    }\r\n    default: {\r\n      return __Pyx_NewRef(Py_NotImplemented);\r\n    }\r\n  }\r\n}\r\n```\r\nThe following code should be fit for a test-case:\r\n```cython\r\ncdef class AlwaysTrue:\r\n    \"\"\"Class that always returns True when checking for equality\"\"\"\r\n\r\n    cdef int value\r\n\r\n    def __init__(self, int value):\r\n        self.value = value\r\n\r\n    def __eq__(self, other):\r\n        return True\r\n\r\n    __ne__ = __eq__\r\n\r\ndef test_shortcut_dunder():\r\n    \"\"\"\r\n    >>> a, b = test_shortcut_dunder()\r\n    >>> a == b\r\n    True\r\n    >>> a != b\r\n    True\r\n    \"\"\"\r\n    return AlwaysTrue(5), AlwaysTrue(10)\r\n```\r\n**Expected behavior**\r\nI would expect this to work and for Cython to reveal the `__ne__` dunder to Python.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Windows\r\n - Python version: 3.9.5\r\n - Cython version: 3.0.0a9\r\n\r\n**Additional context**\r\nIn my case I want to shortcut `__ror__` to `__or__`.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "I don't think this is ever likely to work. One of the things that `cdef class` does is convert a lot of the dunder methods into [\"type slots\"](https://docs.python.org/3/c-api/typeobj.html#pytypeobject-slots) defined in C, which can be called directly, bypassing the standard Python dictionary lookup.\r\n\r\nThe upshot of this is that Cython expects them to be a function, defined in the class. Thus assignment of something else to it will really confuse it.\r\n\r\nIt should probably complain before you get to the C code stage - the C code it's generating is probably pretty dodgy. Hence I'll mark it as \"error reporting\" instead of treating it as a missing feature.\r\n\r\n--------------------------\r\n\r\nIt's probably worth saying: if you want something that behaves exactly like a Python class then you should use a Python class instead of a `cdef class`. `cdef class`es will always have some limitations by nature (which gives them other advantages).",
            "created_at": "2021-08-09T16:06:50Z",
            "html_url": "https://github.com/cython/cython/issues/4332#issuecomment-895348600",
            "id": 895348600,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4332",
            "node_id": "IC_kwDOABDGAc41Xe94",
            "performed_via_github_app": null,
            "updated_at": "2021-08-09T16:08:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/895348600",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "It's probably worth adding: support for the `__r[op]__` special methods is a fairly recent addition to Cython 3 (https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#arithmetic-methods) and it probably isn't entirely complete yet (the arguments aren't typed yet for example).",
            "created_at": "2021-08-09T18:05:47Z",
            "html_url": "https://github.com/cython/cython/issues/4332#issuecomment-895428098",
            "id": 895428098,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4332",
            "node_id": "IC_kwDOABDGAc41XyYC",
            "performed_via_github_app": null,
            "updated_at": "2021-08-09T18:05:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/895428098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The upshot of this is that Cython expects them to be a function, defined in the class. Thus assignment of something else to it will really confuse it.\r\n\r\nUnderstandably, that said I do feel like this is a somewhat common thing to do. We assign `__ror__` to a function, would this not be detectable?\r\n\r\nCython already special-cases methods with these known names, is there I downside to doing the same with what appears to be attributes?",
            "created_at": "2021-08-09T18:50:27Z",
            "html_url": "https://github.com/cython/cython/issues/4332#issuecomment-895457156",
            "id": 895457156,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4332",
            "node_id": "IC_kwDOABDGAc41X5eE",
            "performed_via_github_app": null,
            "updated_at": "2021-08-09T18:50:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/895457156",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38372706?v=4",
                "events_url": "https://api.github.com/users/Bluenix2/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bluenix2/followers",
                "following_url": "https://api.github.com/users/Bluenix2/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bluenix2/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bluenix2",
                "id": 38372706,
                "login": "Bluenix2",
                "node_id": "MDQ6VXNlcjM4MzcyNzA2",
                "organizations_url": "https://api.github.com/users/Bluenix2/orgs",
                "received_events_url": "https://api.github.com/users/Bluenix2/received_events",
                "repos_url": "https://api.github.com/users/Bluenix2/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bluenix2/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bluenix2/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bluenix2"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> Cython already special-cases methods with these known names, is there I downside to doing the same with what appears to be attributes?\r\n\r\nThere's a surprising amount of hidden complication if you were to actually try to do it I think. For example a lot of the functions have some of the argument types special-cased (`__len__` is special-cased to return a `Py_ssize_t` for example). Thus if you did `__abs__ = __len__` (not too ridiculous... it's the l0 norm...) you now have a mismatch of return types.\r\n\r\nHow about if I do:\r\n```\r\ndef global_func(a, b):\r\n   ....\r\n\r\ncdef class C:\r\n   __len__ = global_func\r\n```\r\nIt looks like it should work, but have I now modified `global_func` so that the first argument is typed as `C` and the return value is a C integer? Or possibly made a copy of it with different argument types?\r\n\r\nThe easiest thing would be to say: \"OK - don't create the type slot and instead just do the assignment as a Python assignment\". That would probably work some of the time (because Python's default implementation of the type-slot just looks up the attribute). But it would fail for `__or__` and `__ror__` because they share a single type-slot in C. So once you've specialized `__or__` then Cython has taken over the whole thing. But maybe assignment to `__ror__` should block Cython taking over `__or__` and the whole thing should fall back on attribute lookups?\r\n\r\nIt's the sort of thing that could be made to work in some cases, but just gets quite hard to cover all the cases. And having a partly working version creates the expectation that it'll work generally. Which is why I'm  a bit sceptical.",
            "created_at": "2021-08-09T19:21:15Z",
            "html_url": "https://github.com/cython/cython/issues/4332#issuecomment-895478288",
            "id": 895478288,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4332",
            "node_id": "IC_kwDOABDGAc41X-oQ",
            "performed_via_github_app": null,
            "updated_at": "2021-08-09T19:21:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/895478288",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "While I assume that `__ne__ = __eq__` is just a meaningless example, I think it makes sense to allow at least assignments of other dunder methods of the same class – as long as both signatures are the same. That would allow aliasing slot methods.\r\n\r\nThat being said, it would be nice to see an actual use case for this first.",
            "created_at": "2021-08-09T19:34:02Z",
            "html_url": "https://github.com/cython/cython/issues/4332#issuecomment-895485899",
            "id": 895485899,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4332",
            "node_id": "IC_kwDOABDGAc41YAfL",
            "performed_via_github_app": null,
            "updated_at": "2021-08-09T19:34:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/895485899",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4332/comments",
    "created_at": "2021-08-09T13:51:54Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-08-09T16:07:00Z",
            "event": "labeled",
            "id": 5130673406,
            "label": {
                "color": "444444",
                "name": "Error Reporting"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDUxMzA2NzM0MDY=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5130673406"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4332/events",
    "html_url": "https://github.com/cython/cython/issues/4332",
    "id": 964019256,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425557478,
            "name": "Error Reporting",
            "node_id": "MDU6TGFiZWw0MjU1NTc0Nzg=",
            "url": "https://api.github.com/repos/cython/cython/labels/Error%20Reporting"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4332/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5NjQwMTkyNTY=",
    "number": 4332,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[BUG] Compilation error when shortcutting dunder method",
    "updated_at": "2021-08-09T19:34:02Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4332",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38372706?v=4",
        "events_url": "https://api.github.com/users/Bluenix2/events{/privacy}",
        "followers_url": "https://api.github.com/users/Bluenix2/followers",
        "following_url": "https://api.github.com/users/Bluenix2/following{/other_user}",
        "gists_url": "https://api.github.com/users/Bluenix2/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Bluenix2",
        "id": 38372706,
        "login": "Bluenix2",
        "node_id": "MDQ6VXNlcjM4MzcyNzA2",
        "organizations_url": "https://api.github.com/users/Bluenix2/orgs",
        "received_events_url": "https://api.github.com/users/Bluenix2/received_events",
        "repos_url": "https://api.github.com/users/Bluenix2/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Bluenix2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Bluenix2/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Bluenix2"
    }
}