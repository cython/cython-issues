{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Consider the following code for a simple arena memory allocator. I allocate some memory, and I sweep through it to check if any non-0 values exist. What I ended up discovering is something of a mystery. The value in memory at location 0 from the allocation appears to change in between accesses without any modifications taking place. I'm reporting it here in case it reveals an issue with Cython. I did gander over the .c file, and it appears sensible. But the results just simply are not. If I switch to calloc, there is no problem. \r\n\r\nNo threads or anything obvious that would otherwise be a smoking gun. \r\n\r\nThe memory struct is a simple POD, and I just fill it in immediately.\r\n\r\n`\r\n\r\n\tcdef memory result\r\n\tresult.max_size = 100000 * 4096\r\n\tresult.base = <unsigned char *>malloc(result.max_size * sizeof(char)) \r\n\tresult.used = 0\r\n\r\n\tcdef size_t i = 0\r\n\tprintf(\"i = %zu \\n\", i)\r\n\tprintf(\"result base at loc 0: %u \\n\", result.base[0])\r\n\tprintf(\"result base at loc i: %u \\n\", result.base[i])\r\n\r\n\tcdef:\r\n\t\tunsigned char res = 0\r\n\t\tsize_t good_memory_cells = 0\r\n\r\n\tfor i in range(result.max_size):\r\n\t\tres = result.base[i]\r\n\t\tif res == 0:\r\n\t\t\tgood_memory_cells += 1\r\n\t\telse:\r\n\t\t\tprintf(\"i = %zu \\n\", i)\r\n\t\t\tprintf(\"result base at loc 0: %u \\n\", result.base[0])\r\n\t\t\tprintf(\"result base at loc i: %u \\n\", result.base[i])\r\n\t\t\tprintf(\"result res: %u \\n\", res)\r\n\t\t\tprintf(\"non-zero memory!!! %u and %u at index %zu \\n\", res, result.base[i], i)`\r\n\r\nBelow, you'll see that the last printf reports that res != result.base[i] which, semantically should be impossible.\r\n\r\n> i = 0 \r\n> result base at loc 0: 0 \r\n> result base at loc i: 0 \r\n> i = 0 \r\n> result base at loc 0: 0 \r\n> result base at loc i: 0 \r\n> result res: 25 \r\n> non-zero memory!!! 25 and 0 at index 0 \r\n\r\nHow can res not possibly equal result.base[i] when i has not changed between accesses?\r\n\r\nMy file settings are #cython: language_level=3, boundscheck=False, wraparound=False, initializedcheck=False, nonecheck=False, cdivision=True\r\n\r\nOSX 10.13.6, Python 3.6.6, Cython 0.29.6 \r\n\r\nHere's the transpiled C code:\r\n\r\n`   static struct __pyx_t_4test_memory __pyx_f_4test_memory_allocate(void) {\r\n        struct __pyx_t_4test_memory __pyx_v_result;\r\n        size_t __pyx_v_i;\r\n        unsigned char __pyx_v_res;\r\n        size_t __pyx_v_good_memory_cells;\r\n        struct __pyx_t_4test_memory __pyx_r;\r\n        size_t __pyx_t_1;\r\n        size_t __pyx_t_2;\r\n        size_t __pyx_t_3;\r\n        int __pyx_t_4;\r\n\r\n      /* \"test_comp.pyx\":99\r\n     * \tcdef memory result\r\n     * \r\n     * \tresult.max_size = 100000 * 4096 #TODO(Jesse): Figure out a real upper bound. Basically just grab 100k pages.             # <<<<<<<<<<<<<<\r\n     * \tresult.base = <unsigned char *>malloc(result.max_size * sizeof(char)) #NOTE(Jesse): Because we only alloc _once_, we are certain the OS will hand us 0'd memory. No need to calloc.\r\n     * \tresult.used = 0\r\n     */\r\n      __pyx_v_result.max_size = 0x186A0000;\r\n\r\n      /* \"test_comp.pyx\":100\r\n     * \r\n     * \tresult.max_size = 100000 * 4096 #TODO(Jesse): Figure out a real upper bound. Basically just grab 100k pages.\r\n     * \tresult.base = <unsigned char *>malloc(result.max_size * sizeof(char)) #NOTE(Jesse): Because we only alloc _once_, we are certain the OS will hand us 0'd memory. No need to calloc.             # <<<<<<<<<<<<<<\r\n     * \tresult.used = 0\r\n     * \r\n     */\r\n      __pyx_v_result.base = ((unsigned char *)malloc((__pyx_v_result.max_size * (sizeof(char)))));\r\n\r\n      /* \"test_comp.pyx\":101\r\n     * \tresult.max_size = 100000 * 4096 #TODO(Jesse): Figure out a real upper bound. Basically just grab 100k pages.\r\n     * \tresult.base = <unsigned char *>malloc(result.max_size * sizeof(char)) #NOTE(Jesse): Because we only alloc _once_, we are certain the OS will hand us 0'd memory. No need to calloc.\r\n     * \tresult.used = 0             # <<<<<<<<<<<<<<\r\n     * \r\n     * \tcdef size_t i = 0\r\n     */\r\n      __pyx_v_result.used = 0;\r\n\r\n      /* \"test_comp.pyx\":103\r\n     * \tresult.used = 0\r\n     * \r\n     * \tcdef size_t i = 0             # <<<<<<<<<<<<<<\r\n     * \tprintf(\"i = %zu \\n\", i)\r\n     * \tprintf(\"result base at loc 0: %u \\n\", result.base[0])\r\n     */\r\n      __pyx_v_i = 0;\r\n\r\n      /* \"test_comp.pyx\":104\r\n     * \r\n     * \tcdef size_t i = 0\r\n     * \tprintf(\"i = %zu \\n\", i)             # <<<<<<<<<<<<<<\r\n     * \tprintf(\"result base at loc 0: %u \\n\", result.base[0])\r\n     * \tprintf(\"result base at loc i: %u \\n\", result.base[i])\r\n     */\r\n      (void)(printf(((char const *)\"i = %zu \\n\"), __pyx_v_i));\r\n\r\n      /* \"test_comp.pyx\":105\r\n     * \tcdef size_t i = 0\r\n     * \tprintf(\"i = %zu \\n\", i)\r\n     * \tprintf(\"result base at loc 0: %u \\n\", result.base[0])             # <<<<<<<<<<<<<<\r\n     * \tprintf(\"result base at loc i: %u \\n\", result.base[i])\r\n     * \r\n     */\r\n      (void)(printf(((char const *)\"result base at loc 0: %u \\n\"), (__pyx_v_result.base[0])));\r\n\r\n      /* \"test_comp.pyx\":106\r\n     * \tprintf(\"i = %zu \\n\", i)\r\n     * \tprintf(\"result base at loc 0: %u \\n\", result.base[0])\r\n     * \tprintf(\"result base at loc i: %u \\n\", result.base[i])             # <<<<<<<<<<<<<<\r\n     * \r\n     * \tcdef:\r\n     */\r\n      (void)(printf(((char const *)\"result base at loc i: %u \\n\"), (__pyx_v_result.base[__pyx_v_i])));\r\n\r\n      /* \"test_comp.pyx\":109\r\n     * \r\n     * \tcdef:\r\n     * \t\tunsigned char res = 0             # <<<<<<<<<<<<<<\r\n     * \t\tsize_t good_memory_cells = 0\r\n     * \r\n     */\r\n      __pyx_v_res = 0;\r\n\r\n      /* \"test_comp.pyx\":110\r\n     * \tcdef:\r\n     * \t\tunsigned char res = 0\r\n     * \t\tsize_t good_memory_cells = 0             # <<<<<<<<<<<<<<\r\n     * \r\n     * \tfor i in range(result.max_size):\r\n     */\r\n      __pyx_v_good_memory_cells = 0;\r\n\r\n      /* \"test_comp.pyx\":112\r\n     * \t\tsize_t good_memory_cells = 0\r\n     * \r\n     * \tfor i in range(result.max_size):             # <<<<<<<<<<<<<<\r\n     * \t\tres = result.base[i]\r\n     * \t\tif res == 0:\r\n     */\r\n      __pyx_t_1 = __pyx_v_result.max_size;\r\n      __pyx_t_2 = __pyx_t_1;\r\n      for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {\r\n        __pyx_v_i = __pyx_t_3;\r\n\r\n        /* \"test_comp.pyx\":113\r\n     * \r\n     * \tfor i in range(result.max_size):\r\n     * \t\tres = result.base[i]             # <<<<<<<<<<<<<<\r\n     * \t\tif res == 0:\r\n     * \t\t\tgood_memory_cells += 1\r\n     */\r\n        __pyx_v_res = (__pyx_v_result.base[__pyx_v_i]);\r\n\r\n        /* \"test_comp.pyx\":114\r\n     * \tfor i in range(result.max_size):\r\n     * \t\tres = result.base[i]\r\n     * \t\tif res == 0:             # <<<<<<<<<<<<<<\r\n     * \t\t\tgood_memory_cells += 1\r\n     * \t\telse:\r\n     */\r\n        __pyx_t_4 = ((__pyx_v_res == 0) != 0);\r\n        if (__pyx_t_4) {\r\n\r\n          /* \"test_comp.pyx\":115\r\n     * \t\tres = result.base[i]\r\n     * \t\tif res == 0:\r\n     * \t\t\tgood_memory_cells += 1             # <<<<<<<<<<<<<<\r\n     * \t\telse:\r\n     * \t\t\tprintf(\"i = %zu \\n\", i)\r\n     */\r\n          __pyx_v_good_memory_cells = (__pyx_v_good_memory_cells + 1);\r\n\r\n          /* \"test_comp.pyx\":114\r\n     * \tfor i in range(result.max_size):\r\n     * \t\tres = result.base[i]\r\n     * \t\tif res == 0:             # <<<<<<<<<<<<<<\r\n     * \t\t\tgood_memory_cells += 1\r\n     * \t\telse:\r\n     */\r\n          goto __pyx_L5;\r\n        }\r\n\r\n        /* \"test_comp.pyx\":117\r\n     * \t\t\tgood_memory_cells += 1\r\n     * \t\telse:\r\n     * \t\t\tprintf(\"i = %zu \\n\", i)             # <<<<<<<<<<<<<<\r\n     * \t\t\tprintf(\"result base at loc 0: %u \\n\", result.base[0])\r\n     * \t\t\tprintf(\"result base at loc i: %u \\n\", result.base[i])\r\n     */\r\n        /*else*/ {\r\n          (void)(printf(((char const *)\"i = %zu \\n\"), __pyx_v_i));\r\n\r\n          /* \"test_comp.pyx\":118\r\n     * \t\telse:\r\n     * \t\t\tprintf(\"i = %zu \\n\", i)\r\n     * \t\t\tprintf(\"result base at loc 0: %u \\n\", result.base[0])             # <<<<<<<<<<<<<<\r\n     * \t\t\tprintf(\"result base at loc i: %u \\n\", result.base[i])\r\n     * \t\t\tprintf(\"result res: %u \\n\", res)\r\n     */\r\n          (void)(printf(((char const *)\"result base at loc 0: %u \\n\"), (__pyx_v_result.base[0])));\r\n\r\n          /* \"test_comp.pyx\":119\r\n     * \t\t\tprintf(\"i = %zu \\n\", i)\r\n     * \t\t\tprintf(\"result base at loc 0: %u \\n\", result.base[0])\r\n     * \t\t\tprintf(\"result base at loc i: %u \\n\", result.base[i])             # <<<<<<<<<<<<<<\r\n     * \t\t\tprintf(\"result res: %u \\n\", res)\r\n     * \t\t\tprintf(\"non-zero memory!!! %u and %u at index %zu \\n\", res, result.base[i], i)\r\n     */\r\n          (void)(printf(((char const *)\"result base at loc i: %u \\n\"), (__pyx_v_result.base[__pyx_v_i])));\r\n\r\n          /* \"test_comp.pyx\":120\r\n     * \t\t\tprintf(\"result base at loc 0: %u \\n\", result.base[0])\r\n     * \t\t\tprintf(\"result base at loc i: %u \\n\", result.base[i])\r\n     * \t\t\tprintf(\"result res: %u \\n\", res)             # <<<<<<<<<<<<<<\r\n     * \t\t\tprintf(\"non-zero memory!!! %u and %u at index %zu \\n\", res, result.base[i], i)\r\n     * \r\n     */\r\n          (void)(printf(((char const *)\"result res: %u \\n\"), __pyx_v_res));\r\n\r\n          /* \"test_comp.pyx\":121\r\n     * \t\t\tprintf(\"result base at loc i: %u \\n\", result.base[i])\r\n     * \t\t\tprintf(\"result res: %u \\n\", res)\r\n     * \t\t\tprintf(\"non-zero memory!!! %u and %u at index %zu \\n\", res, result.base[i], i)             # <<<<<<<<<<<<<<\r\n     * \r\n     * \tif good_memory_cells == result.max_size:\r\n     */\r\n          (void)(printf(((char const *)\"non-zero memory!!! %u and %u at index %zu \\n\"), __pyx_v_res, (__pyx_v_result.base[__pyx_v_i]), __pyx_v_i));\r\n        }\r\n        __pyx_L5:;\r\n      }\r\n\r\n      /* \"test_comp.pyx\":123\r\n     * \t\t\tprintf(\"non-zero memory!!! %u and %u at index %zu \\n\", res, result.base[i], i)\r\n     * \r\n     * \tif good_memory_cells == result.max_size:             # <<<<<<<<<<<<<<\r\n     * \t\tprintf(\"safe!\")\r\n     * \r\n     */\r\n      __pyx_t_4 = ((__pyx_v_good_memory_cells == __pyx_v_result.max_size) != 0);\r\n      if (__pyx_t_4) {\r\n\r\n        /* \"test_comp.pyx\":124\r\n     * \r\n     * \tif good_memory_cells == result.max_size:\r\n     * \t\tprintf(\"safe!\")             # <<<<<<<<<<<<<<\r\n     * \r\n     * \treturn result\r\n     */\r\n        (void)(printf(((char const *)\"safe!\")));\r\n\r\n        /* \"test_comp.pyx\":123\r\n     * \t\t\tprintf(\"non-zero memory!!! %u and %u at index %zu \\n\", res, result.base[i], i)\r\n     * \r\n     * \tif good_memory_cells == result.max_size:             # <<<<<<<<<<<<<<\r\n     * \t\tprintf(\"safe!\")\r\n     * \r\n     */\r\n      }\r\n\r\n      /* \"test_comp.pyx\":126\r\n     * \t\tprintf(\"safe!\")\r\n     * \r\n     * \treturn result             # <<<<<<<<<<<<<<\r\n     * \r\n     * cdef struct tree_crown_pixels:\r\n     */\r\n      __pyx_r = __pyx_v_result;\r\n      goto __pyx_L0;\r\n\r\n      /* \"test_comp.pyx\":96\r\n     * \treturn result\r\n     * \r\n     * cdef memory memory_allocate() nogil:             # <<<<<<<<<<<<<<\r\n     * \tcdef memory result\r\n     * \r\n     */\r\n\r\n      /* function exit code */\r\n      __pyx_L0:;\r\n      return __pyx_r;\r\n    }\r\n`",
    "closed_at": "2019-03-15T22:19:52Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "`malloc()` makes no guarantees about the content of the memory that you get. `calloc()` initalises the memory to zero, `malloc()` does not.",
            "created_at": "2019-03-15T22:19:52Z",
            "html_url": "https://github.com/cython/cython/issues/2895#issuecomment-473459052",
            "id": 473459052,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2895",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzQ1OTA1Mg==",
            "updated_at": "2019-03-15T22:19:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/473459052",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "I understand those guarantees and that does not appear to be the issue. Please read the code carefully and notice that data at result.base[0] is 0 when it is first accessed after being allocated by malloc, but then changes its value spontaneously afterwards when saved on the stack even though no modifications have been made to that address. That is unexpected behavior and an indication of a bug.",
            "created_at": "2019-03-16T00:05:55Z",
            "html_url": "https://github.com/cython/cython/issues/2895#issuecomment-473477269",
            "id": 473477269,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2895",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzQ3NzI2OQ==",
            "updated_at": "2019-03-16T00:41:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/473477269",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/5846309?v=4",
                "events_url": "https://api.github.com/users/JesseRMeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/JesseRMeyer/followers",
                "following_url": "https://api.github.com/users/JesseRMeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/JesseRMeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/JesseRMeyer",
                "id": 5846309,
                "login": "JesseRMeyer",
                "node_id": "MDQ6VXNlcjU4NDYzMDk=",
                "organizations_url": "https://api.github.com/users/JesseRMeyer/orgs",
                "received_events_url": "https://api.github.com/users/JesseRMeyer/received_events",
                "repos_url": "https://api.github.com/users/JesseRMeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/JesseRMeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/JesseRMeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/JesseRMeyer"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "What is `memory` here?",
            "created_at": "2019-03-16T07:22:42Z",
            "html_url": "https://github.com/cython/cython/issues/2895#issuecomment-473507856",
            "id": 473507856,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2895",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzUwNzg1Ng==",
            "updated_at": "2019-03-16T07:22:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/473507856",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Note that accessing uninitialised memory is undefined behaviour in C. The C compiler knows that and can do whatever it wants with that access. Specifically, there is no requirement that reading uninitialised memory must return the same value each time you read it, because it returns arbitrary results anyway.",
            "created_at": "2019-03-16T07:27:21Z",
            "html_url": "https://github.com/cython/cython/issues/2895#issuecomment-473508104",
            "id": 473508104,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2895",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzUwODEwNA==",
            "updated_at": "2019-03-16T07:28:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/473508104",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "It's very straight forward.\r\n\r\n    cdef struct memory: \r\n    \t    unsigned char *base\r\n\t    size_t max_size\r\n\t    size_t used\r\n\r\n>  Note that accessing uninitialised memory is undefined behaviour in C\r\n\r\nThat may just be it, then. In practice, I write to the address right after the procedure ends, so that write may commit the page and avoid any actual bugs.",
            "created_at": "2019-03-16T12:49:16Z",
            "html_url": "https://github.com/cython/cython/issues/2895#issuecomment-473527446",
            "id": 473527446,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2895",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzUyNzQ0Ng==",
            "updated_at": "2019-03-16T13:34:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/473527446",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/5846309?v=4",
                "events_url": "https://api.github.com/users/JesseRMeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/JesseRMeyer/followers",
                "following_url": "https://api.github.com/users/JesseRMeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/JesseRMeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/JesseRMeyer",
                "id": 5846309,
                "login": "JesseRMeyer",
                "node_id": "MDQ6VXNlcjU4NDYzMDk=",
                "organizations_url": "https://api.github.com/users/JesseRMeyer/orgs",
                "received_events_url": "https://api.github.com/users/JesseRMeyer/received_events",
                "repos_url": "https://api.github.com/users/JesseRMeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/JesseRMeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/JesseRMeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/JesseRMeyer"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2895/comments",
    "created_at": "2019-03-15T20:11:05Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-03-15T22:19:52Z",
            "event": "closed",
            "id": 2207747674,
            "node_id": "MDExOkNsb3NlZEV2ZW50MjIwNzc0NzY3NA==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2207747674"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-03-15T22:20:05Z",
            "event": "labeled",
            "id": 2207747973,
            "label": {
                "color": "444444",
                "name": "R: invalid"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDIyMDc3NDc5NzM=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2207747973"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2895/events",
    "html_url": "https://github.com/cython/cython/issues/2895",
    "id": 421686127,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425557122,
            "name": "R: invalid",
            "node_id": "MDU6TGFiZWw0MjU1NTcxMjI=",
            "url": "https://api.github.com/repos/cython/cython/labels/R:%20invalid"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2895/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0MjE2ODYxMjc=",
    "number": 2895,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Baffling output behavior",
    "updated_at": "2019-03-16T13:34:49Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2895",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/5846309?v=4",
        "events_url": "https://api.github.com/users/JesseRMeyer/events{/privacy}",
        "followers_url": "https://api.github.com/users/JesseRMeyer/followers",
        "following_url": "https://api.github.com/users/JesseRMeyer/following{/other_user}",
        "gists_url": "https://api.github.com/users/JesseRMeyer/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/JesseRMeyer",
        "id": 5846309,
        "login": "JesseRMeyer",
        "node_id": "MDQ6VXNlcjU4NDYzMDk=",
        "organizations_url": "https://api.github.com/users/JesseRMeyer/orgs",
        "received_events_url": "https://api.github.com/users/JesseRMeyer/received_events",
        "repos_url": "https://api.github.com/users/JesseRMeyer/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/JesseRMeyer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JesseRMeyer/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/JesseRMeyer"
    }
}