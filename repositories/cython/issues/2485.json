{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "When using `const object[:]` I get the error `Const base type cannot be a Python object`. Is this a limitation that we cannot have readonly memoryviews with objects? Or, alternatively: should this be possible and is not support by Cython due to a bug?\r\n\r\nOne can produce a read-only memory-view by passing a non-writable numpy-array with dtype `object`.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "When I read this, it made me wonder how NumPy represents an `ndarray` of `object` type. My naive thought would be that it is an `ndarray` filled with `PyObject*`s under the hood. IOW it doesn't own the Python objects, but it shares them with the interpreter, which may use them elsewhere. If that's true, it means that a readonly Python object array only means the array must always point to the same objects in the same order, but the objects themselves are free to change. Meaning that a readonly object array is something very different than any other kind of readonly array.\r\n\r\nWe could probably confirm this by talking to a NumPy expert or diving into the source code. Came up with the follow quick test code instead.\r\n\r\n```python\r\nIn [1]: import sys\r\n\r\nIn [2]: import numpy as np\r\n\r\nIn [3]: l = 10 * [5]\r\n\r\nIn [4]: a = np.empty((1,), dtype=object)\r\n\r\nIn [5]: a[0] = l\r\n\r\nIn [6]: ar = a.copy()\r\n\r\nIn [7]: ar.setflags(write=False)\r\n\r\nIn [8]: sys.getsizeof(l)\r\nOut[8]: 144\r\n\r\nIn [9]: sys.getsizeof(a)\r\nOut[9]: 104\r\n\r\nIn [10]: sys.getsizeof(ar)\r\nOut[10]: 104\r\n\r\nIn [11]: ar[0] = 10 * [3]\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-11-a295c4b70dc9> in <module>()\r\n----> 1 ar[0] = 10 * [3]\r\n\r\nValueError: assignment destination is read-only\r\n\r\nIn [12]: ar\r\nOut[12]: array([list([5, 5, 5, 5, 5, 5, 5, 5, 5, 5])], dtype=object)\r\n\r\nIn [13]: l[3] = 2\r\n\r\nIn [14]: ar\r\nOut[14]: array([list([5, 5, 5, 2, 5, 5, 5, 5, 5, 5])], dtype=object)\r\n\r\nIn [15]: ar[0][0] = None\r\n\r\nIn [16]: ar\r\nOut[16]: array([list([None, 5, 5, 2, 5, 5, 5, 5, 5, 5])], dtype=object)\r\n```\r\n\r\nHere are the observations one can draw from this. First the size of a NumPy object array does not seem to include the size of the Python objects in it. Thus suggesting the NumPy object array merely contains `PyObject*`s and does not hold the memory for these objects. Second one cannot overwrite objects in the readonly NumPy object array, which supports the idea it contains `PyObject*`s. Third one can easily change objects within a readonly NumPy array by manipulating the objects it contains. This can even be done using the readonly NumPy object array itself. Thus the NumPy array has no influence over these Python objects. It wouldn't surprise me if Cython memoryviews are implemented similarly under the hood.\r\n\r\nGiven this, it makes me wonder, is this the behavior one would expect/want from `const object[:]`?",
            "created_at": "2018-09-10T19:52:02Z",
            "html_url": "https://github.com/cython/cython/issues/2485#issuecomment-420038357",
            "id": 420038357,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2485",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDAzODM1Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/420038357/reactions"
            },
            "updated_at": "2018-09-10T19:52:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/420038357",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Note that C++ const does not mean the object will not be modified, just\nthat you can't modify it from here...\n\nI think the issue here is that if one has a read-only object array, one\ncan't use memory views with it. I think it makes sense to support this\nspecial case; we already have to special case objects elsewhere. (Maybe not\nwith this syntax, if there's a better one to be had...)\n\nOn Mon, Sep 10, 2018 at 9:52 PM jakirkham <notifications@github.com> wrote:\n\n> When I read this, it made me wonder how NumPy represents an ndarray of\n> object type. My naive thought would be that it is an ndarray filled with\n> PyObject*s under the hood. IOW it doesn't own the Python objects, but it\n> shares them with the interpreter, which may use them elsewhere. If that's\n> true, it means that a readonly Python object array only means the array\n> must always point to the same objects in the same order, but the objects\n> themselves are free to change. Meaning that a readonly object array is\n> something very different than any other kind of readonly array.\n>\n> We could probably confirm this by talking to a NumPy expert or diving into\n> the source code. Came up with the follow quick test code instead.\n>\n> In [1]: import sys\n>\n> In [2]: import numpy as np\n>\n> In [3]: l = 10 * [5]\n>\n> In [4]: a = np.empty((1,), dtype=object)\n>\n> In [5]: a[0] = l\n>\n> In [6]: ar = a.copy()\n>\n> In [7]: ar.setflags(write=False)\n>\n> In [8]: sys.getsizeof(l)\n> Out[8]: 144\n>\n> In [9]: sys.getsizeof(a)\n> Out[9]: 104\n>\n> In [10]: sys.getsizeof(ar)\n> Out[10]: 104\n>\n> In [11]: ar[0] = 10 * [3]---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)<ipython-input-11-a295c4b70dc9> in <module>()----> 1 ar[0] = 10 * [3]\n> ValueError: assignment destination is read-only\n>\n> In [12]: ar\n> Out[12]: array([list([5, 5, 5, 5, 5, 5, 5, 5, 5, 5])], dtype=object)\n>\n> In [13]: l[3] = 2\n>\n> In [14]: ar\n> Out[14]: array([list([5, 5, 5, 2, 5, 5, 5, 5, 5, 5])], dtype=object)\n>\n> In [15]: ar[0][0] = None\n>\n> In [16]: ar\n> Out[16]: array([list([None, 5, 5, 2, 5, 5, 5, 5, 5, 5])], dtype=object)\n>\n> Here are the observations one can draw from this. First the size of a\n> NumPy object array does not seem to include the size of the Python objects\n> in it. Thus suggesting the NumPy object array merely contains PyObject*s\n> and does not hold the memory for these objects. Second one cannot overwrite\n> objects in the readonly NumPy object array, which supports the idea it\n> contains PyObject*s. Third one can easily change objects within a\n> readonly NumPy array by manipulating the objects it contains. This can even\n> be done using the readonly NumPy object array itself. Thus the NumPy array\n> has no influence over these Python objects. It wouldn't surprise me if\n> Cython memoryviews are implemented similarly under the hood.\n>\n> Given this, it makes me wonder, is this the behavior one would expect/want\n> from const object[:]?\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/cython/cython/issues/2485#issuecomment-420038357>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAdqgU3J0WWHcpmfub_8B4aHYx-lYQGAks5uZsLkgaJpZM4VIBqF>\n> .\n>\n",
            "created_at": "2018-09-17T12:53:03Z",
            "html_url": "https://github.com/cython/cython/issues/2485#issuecomment-422002831",
            "id": 422002831,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2485",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjAwMjgzMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/422002831/reactions"
            },
            "updated_at": "2018-09-17T12:53:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/422002831",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "NONE",
            "body": "A particular use case where const object memoryviews would be a great relief are NumPy's nditer traversals of object ndarrays.  A very basic example is this:\r\n```python\r\nimport numpy as np\r\ncimport numpy as np\r\n\r\ncdef class A(object):\r\n    cdef int data\r\n    def __init__(self, data):\r\n        self.data = data\r\n\r\ncdef nditer_with_ndarray(array_of_A):\r\n    cdef A scalar_A\r\n    cdef np.ndarray chunk\r\n    cdef int total = 0\r\n  \r\n    with np.nditer(array_of_A, flags=['refs_ok', 'external_loop'],\r\n            op_flags=['readonly'], op_dtypes=('object')) as it:\r\n\r\n        for chunk in it:\r\n            for i in range(chunk.shape[0]):\r\n                scalar_A = chunk[i]\r\n                total += scalar_A.data\r\n\r\n    return total\r\n\r\na = np.array([A(i) for i in range(10)])\r\nprint(f\"total={nditer_with_ndarray(a):d}\")\r\n```\r\nSo we accumulate (efficiently) some data across an ndarray of objects of an extension type.  If I were to use a memoryview instead of the legacy ndarray interface, I'd need to replace\r\n```\r\n    cdef np.ndarray chunk\r\n```\r\nby\r\n```\r\n    cdef const A[:] chunk\r\n```\r\nto comply with the read-only operand flag of the iterator -- analogous to a non-reference memoryview, e.g., `cdef const double[:] a`. If `const` is omitted, the iterator creation (correctly!) errors out with \"ValueError: buffer source array is read-only\".\r\n\r\nOf course one can hack around the problem by changing the `readonly` op_flag to `readwrite`, but it seems awkward to give up on the correct specification of the nditer only to make up for the memoryview limitation.  Moreover, once the nditer setup becomes more complicated (multiple operands, buffering, \"updateifcopy\", etc.), one ends up with with _multiple_ operand and iteration flags that make no sense for the iteration itself, and potentially unnecessary copies.\r\n\r\nFinally I'm having some confusion regarding the semantics of `cdef const object[:] a`:  [Above](https://github.com/cython/cython/issues/2485#issuecomment-422002831) it was suggested with a C++ analogy that it could or should mean that \"none of the objects pointed to by `a` are modified through `a`\", but in this context of nditer iteration the canonical semantics for `const object[:]` should be that \"none of of the references in `a` change\".  Maybe I'm misreading or misinterpreting the analogy though.",
            "created_at": "2022-03-26T10:51:11Z",
            "html_url": "https://github.com/cython/cython/issues/2485#issuecomment-1079660938",
            "id": 1079660938,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2485",
            "node_id": "IC_kwDOABDGAc5AWlGK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1079660938/reactions"
            },
            "updated_at": "2022-03-26T10:51:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1079660938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2168992?v=4",
                "events_url": "https://api.github.com/users/rluce/events{/privacy}",
                "followers_url": "https://api.github.com/users/rluce/followers",
                "following_url": "https://api.github.com/users/rluce/following{/other_user}",
                "gists_url": "https://api.github.com/users/rluce/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rluce",
                "id": 2168992,
                "login": "rluce",
                "node_id": "MDQ6VXNlcjIxNjg5OTI=",
                "organizations_url": "https://api.github.com/users/rluce/orgs",
                "received_events_url": "https://api.github.com/users/rluce/received_events",
                "repos_url": "https://api.github.com/users/rluce/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rluce/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rluce/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rluce"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "I think the only thing preventing it is a check in Nodes.py\r\n\r\nhttps://github.com/cython/cython/blob/master/Cython/Compiler/Nodes.py#L851-L853\r\n\r\nI think we do want to keep the check (because it makes sense to ban things like `cdef const object o`), but relax it for memoryviews. You'd probably find that they work fine without further modification, in a \"none of the references in `a` may be changed using `a`\" way.\r\n\r\nPR welcome...",
            "created_at": "2022-03-26T13:11:07Z",
            "html_url": "https://github.com/cython/cython/issues/2485#issuecomment-1079691738",
            "id": 1079691738,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2485",
            "node_id": "IC_kwDOABDGAc5AWsna",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1079691738/reactions"
            },
            "updated_at": "2022-03-26T13:11:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1079691738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2485/comments",
    "created_at": "2018-07-09T16:35:40Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2485/events",
    "html_url": "https://github.com/cython/cython/issues/2485",
    "id": 339523530,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2485/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMzk1MjM1MzA=",
    "number": 2485,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/cython/cython/issues/2485/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/2485/timeline",
    "title": "Constant memory view not available for object",
    "updated_at": "2022-03-26T13:11:07Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2485",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/70274?v=4",
        "events_url": "https://api.github.com/users/xhochy/events{/privacy}",
        "followers_url": "https://api.github.com/users/xhochy/followers",
        "following_url": "https://api.github.com/users/xhochy/following{/other_user}",
        "gists_url": "https://api.github.com/users/xhochy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/xhochy",
        "id": 70274,
        "login": "xhochy",
        "node_id": "MDQ6VXNlcjcwMjc0",
        "organizations_url": "https://api.github.com/users/xhochy/orgs",
        "received_events_url": "https://api.github.com/users/xhochy/received_events",
        "repos_url": "https://api.github.com/users/xhochy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/xhochy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xhochy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/xhochy"
    }
}