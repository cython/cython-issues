{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Consider the following example code that sums the values of a dictionary that maps strings to floats:\r\n\r\n```python\r\ndef f():\r\n    d: Dict[str, float]\r\n    d = {}\r\n\r\n    total: float\r\n    total = 0.0\r\n\r\n    # k: str  # I would like to avoid declaring these\r\n    # v: float\r\n\r\n    for k in d:\r\n        v = d[k]  # Secondarily, I am also curious on how to accelerate this\r\n        total += v\r\n```\r\n\r\nI find that if I manually declare `v` to be a float that Cython will nicely remove some Python object code.  However, this might also be inferred from the declaration `d: Dict[str, float]`.  I suspect that this kind of type inference is just out of scope for Cython, but I thought I'd ask to see if this was possible somehow.\r\n\r\nAlso, any additional tips for accelerating repeated dict access like this would be very welcome.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I think this is a reasonable to implement.\n\nAs for accelerated dict access, consider\n\n    for k, v in dict.items(): ...\n\nor\n\n   for v in dict.values(): ...\n\n\nOn Sat, Nov 4, 2017 at 6:21 PM, Matthew Rocklin <notifications@github.com>\nwrote:\n\n> Consider the following example code that sums the values of a dictionary\n> that maps strings to floats:\n>\n> def f():\n>     d: Dict[str, float]\n>     d = {}\n>\n>     total: float\n>     total = 0.0\n>\n>     # k: str  # I would like to avoid declaring these\n>     # v: float\n>\n>     for k in d:\n>         v = d[k]\n>         total += v\n>\n> I find that if I manually declare v to be a float that Cython will nicely\n> remove some Python object code. However, this might also be inferred from\n> the declaration d: Dict[str, float]. I suspect that this kind of type\n> inference is just out of scope for Cython, but I thought I'd ask to see if\n> this was possible somehow.\n>\n> Also, any additional tips for accelerating repeated dict access like this\n> would be very welcome.\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/cython/cython/issues/1979>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAdqgb-E58JFLQgX-WKXsgkN9O4vKrMpks5szQ2jgaJpZM4QSORH>\n> .\n>\n",
            "created_at": "2017-11-05T09:29:34Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-341956906",
            "id": 341956906,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTk1NjkwNg==",
            "performed_via_github_app": null,
            "updated_at": "2017-11-05T09:29:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/341956906",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "First of all, I agree that inferring the item type(s) of containers (especially when they are declared via PEP-484 typing) would be nice, and there's probably already a hugely outdated ticket for that which was written years before PEP-484. Cython's support for PEP-484 typing is definitely still young and in flux. It will have to mature over time. Feedback is always appreciated, as it allows us to see actual use cases that we can improve.\r\n\r\nRegarding your example, inferring `float` would be helpful, since it can be safely aliased to C `double`. But that's the special case. If the type was `int`, it wouldn't help, since Cython cannot safely map Python ints to any fixed size C integer type. You could use `cython.int` or `cython.long` for that, though, which request specific C integer semantics.\r\n\r\nRegarding `str` keys, there is no speed advantage to be gained for the loop you showed, and as Robert suggested, iterating only over `d.values()` generates much more efficient code already - if that suits your real use case. But also in other cases, `str` means \"`str` or a subtype\" in Python, but Cython can only make use of \"exactly `str`\" for optimisation, as subtypes can override the builtin type behaviour in arbitrary and unpredictable ways. If you type a variable as `cdef str k` in Cython, it will actually reject subtypes on assignment, for exactly that reason. That's why we currently ignore PEP-484 style annotations of type `str`. They simply don't have sufficiently tight semantics, similar to the `int` issue above.\r\n\r\nThe same subtyping issue applies also to a `Dict` annotation vs. `cdef dict d`, but this is again a special case that could be exploited at least for looping. The runtime special casing code is already mostly there as we apply an optimistic optimisation whenever we see code that loops over `something.items()` etc., which has a very high probability of `something` turning out to be exactly a `dict` in practice.",
            "created_at": "2017-11-05T09:31:02Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-341960146",
            "id": 341960146,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTk2MDE0Ng==",
            "performed_via_github_app": null,
            "updated_at": "2017-11-05T09:32:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/341960146",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I enabled the iteration optimisation for given `Dict` type declarations. It's a bit hackish, but it's a start.",
            "created_at": "2017-11-05T11:03:13Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-341964707",
            "id": 341964707,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTk2NDcwNw==",
            "performed_via_github_app": null,
            "updated_at": "2017-11-05T11:03:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/341964707",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Regarding str keys, there is no speed advantage to be gained for the loop you showed, and as Robert suggested, iterating only over d.values() generates much more efficient code already - if that suits your real use case. But also in other cases, str means \"str or a subtype\" in Python, but Cython can only make use of \"exactly str\" for optimisation, as subtypes can override the builtin type behaviour in arbitrary and unpredictable ways. If you type a variable as cdef str k in Cython, it will actually reject subtypes on assignment, for exactly that reason. That's why we currently ignore PEP-484 style annotations of type str. They simply don't have sufficiently tight semantics, similar to the int issue above.\r\n\r\n\r\nThat's interesting.  In my particular case I'm quite willing to be restrictive in my use of types in order to gain performance.  My objective is to retain Python interpretability while still gaining some Cython speedups, so the PEP-484 style annotations are quite attractive. I think I read that for `cython.int` I can also accomplish this by using `int` and providing a declaration as a file-level comment.  Are other similar options available for other similar situations?",
            "created_at": "2017-11-05T12:43:24Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-341970295",
            "id": 341970295,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTk3MDI5NQ==",
            "performed_via_github_app": null,
            "updated_at": "2017-11-05T12:43:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/341970295",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
                "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrocklin/followers",
                "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrocklin",
                "id": 306380,
                "login": "mrocklin",
                "node_id": "MDQ6VXNlcjMwNjM4MA==",
                "organizations_url": "https://api.github.com/users/mrocklin/orgs",
                "received_events_url": "https://api.github.com/users/mrocklin/received_events",
                "repos_url": "https://api.github.com/users/mrocklin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrocklin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "My current assumption for PEP-484 annotations is that they are primarily targeted at static type checking instead of compilation, as that's what they were designed for. Their interpretation by Cython should not conflict with their meaning in Python code.\r\n\r\nI think, what we could do at some point, is to automatically generate fused types for builtin Python types, so that `int` would be aliased as a fused type of all (relevant) C integer types and `object`, and `str` etc. would be an alias for \"`str` or `object`\". Meaning, we would optimise the code for the expected case, and generate a generic fallback implementation for the case of arbitrary subtypes. That would give you quite a bit of code explosion (because `int` wouldn't necessarily be the same for different variables, so you'd end up with the cross product of all declared types), and (sadly) also slower function calls due to the intermediate dispatch, but it would allow to optimise the code in functions while still keeping up full Python compatibility.\r\n\r\nWe could also extend the meaning of the `infer_types=True` compiler directive to infer PEP-484/526 annotations with C semantics where possible. Without that option, we only infer safe types that do not break Python semantics. Currently, if this option is enabled, Cython is already free to assume that an inferred expression like `C int + C int` does not overflow and should result in a C `int`. Cython could then infer an `int` annotation as meaning `C long`.",
            "created_at": "2017-11-05T14:27:48Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-341977097",
            "id": 341977097,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTk3NzA5Nw==",
            "performed_via_github_app": null,
            "updated_at": "2017-11-05T14:27:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/341977097",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> My current assumption for PEP-484 annotations is that they are primarily targeted at static type checking instead of compilation, as that's what they were designed for. Their interpretation by Cython should not conflict with their meaning in Python code.\r\n\r\nI'm inclined to rewrite this as \"Python types should not be misinterpreted for performance reasons\".  \r\n\r\nType annotations were, I think, built without a defining use case.  Static type checking certainly came first, but my understanding was that the annotations themselves were intended to be general purpose and used by a variety of projects later on in the language's lifetime.  Cython's use here seems like a potentially excellent example.  If I'm able to use Cython without deviating from the Python language then that will significantly impact the way and the extent to which I integrate Cython into all of my projects.\r\n\r\nThat being said, I appreciate that my request to interpret `int -> cython.int` is dangerous.  Maybe if I want to operate in this way then I need to accept `cython` as a runtime dependency.",
            "created_at": "2017-11-05T14:40:37Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-341977979",
            "id": 341977979,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTk3Nzk3OQ==",
            "performed_via_github_app": null,
            "updated_at": "2017-11-05T14:40:37Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/341977979",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
                "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrocklin/followers",
                "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrocklin",
                "id": 306380,
                "login": "mrocklin",
                "node_id": "MDQ6VXNlcjMwNjM4MA==",
                "organizations_url": "https://api.github.com/users/mrocklin/orgs",
                "received_events_url": "https://api.github.com/users/mrocklin/received_events",
                "repos_url": "https://api.github.com/users/mrocklin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrocklin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> accept cython as a runtime dependency\r\n\r\nAnd we should finally make it straight forward for user packages to depend on Cython's shadow module (`cython.py` a.k.a. `Cython/Shadow.py`) if they support optional Cython compilation. #1981",
            "created_at": "2017-11-05T14:59:49Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-341979320",
            "id": 341979320,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTk3OTMyMA==",
            "performed_via_github_app": null,
            "updated_at": "2017-11-05T14:59:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/341979320",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Regarding str keys, there is no speed advantage to be gained for the loop you showed, and as Robert suggested, iterating only over d.values() generates much more efficient code already - if that suits your real use case. But also in other cases, str means \"str or a subtype\" in Python, but Cython can only make use of \"exactly str\" for optimisation, as subtypes can override the builtin type behaviour in arbitrary and unpredictable ways. If you type a variable as cdef str k in Cython, it will actually reject subtypes on assignment, for exactly that reason. That's why we currently ignore PEP-484 style annotations of type str. They simply don't have sufficiently tight semantics, similar to the int issue above.\r\n\r\nI actually do care about accelerating `dict.__getitem__` or `dict.get`, and not just iterating over dict values.  In my case my objects are definitely Python strings, and not subtypes.  I would be happy to annotate with `k: cython.str` if necessary.",
            "created_at": "2017-11-05T15:19:53Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-341980839",
            "id": 341980839,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTk4MDgzOQ==",
            "performed_via_github_app": null,
            "updated_at": "2017-11-05T15:19:53Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/341980839",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
                "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrocklin/followers",
                "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrocklin",
                "id": 306380,
                "login": "mrocklin",
                "node_id": "MDQ6VXNlcjMwNjM4MA==",
                "organizations_url": "https://api.github.com/users/mrocklin/orgs",
                "received_events_url": "https://api.github.com/users/mrocklin/received_events",
                "repos_url": "https://api.github.com/users/mrocklin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrocklin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I tuned a couple of percent off the item lookup. You can try the latest master.\r\n\r\nThere is also an intermediate commit [here](https://github.com/cython/cython/commit/d07280baa131051b7ae98cb5e30c38e3409382fd), where I tried to special case dict lookups of `str` and `unicode` keys in Py3.5+. But it turned out to be slower for me, so undid the change later. Can't say why, so if you want to give it a try on your side, you could at least confirm that this is not worth pursuing. You'll have to use `cdef` typing on the string key variable or the decorator `@cython.locals(xyzkey=str)` to trigger it (you should see calls to `..._GetItemUnicode` in the C file). It suggests to me that typing as `str` is probably not worth it for lookups.",
            "created_at": "2017-11-05T20:41:36Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-342003734",
            "id": 342003734,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjAwMzczNA==",
            "performed_via_github_app": null,
            "updated_at": "2018-12-02T08:20:40Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/342003734",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "What are your thoughts on allowing `ctypes` in annotations?",
            "created_at": "2018-12-02T18:42:11Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-443531636",
            "id": 443531636,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzUzMTYzNg==",
            "performed_via_github_app": null,
            "updated_at": "2018-12-02T18:42:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/443531636",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "What would be the advantage over Cython types?",
            "created_at": "2018-12-02T20:20:02Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-443538517",
            "id": 443538517,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzUzODUxNw==",
            "performed_via_github_app": null,
            "updated_at": "2018-12-02T20:20:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/443538517",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "If someone doesn't have Cython, those would still work (be `import`able).",
            "created_at": "2020-11-27T01:38:17Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-734528874",
            "id": 734528874,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczNDUyODg3NA==",
            "performed_via_github_app": null,
            "updated_at": "2020-11-27T01:38:17Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/734528874",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Am I reading the history here correctly that this was already done ( https://github.com/cython/cython/commit/65b17751ca7e15d68d6d18ee0c55afadf5fc77fb )?",
            "created_at": "2020-11-27T01:41:27Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-734529448",
            "id": 734529448,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczNDUyOTQ0OA==",
            "performed_via_github_app": null,
            "updated_at": "2020-11-27T01:41:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/734529448",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "@jakirkham That commit specifically accelerates the loop operation (by treating the type as a hint). It doesn't apply the type anywhere else in Cython. (It's also mentioned in one of the comments above)",
            "created_at": "2020-11-27T07:50:48Z",
            "html_url": "https://github.com/cython/cython/issues/1979#issuecomment-734696448",
            "id": 734696448,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1979",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczNDY5NjQ0OA==",
            "performed_via_github_app": null,
            "updated_at": "2020-11-27T07:50:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/734696448",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 14,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1979/comments",
    "created_at": "2017-11-05T01:21:38Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "65b17751ca7e15d68d6d18ee0c55afadf5fc77fb",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/65b17751ca7e15d68d6d18ee0c55afadf5fc77fb",
            "created_at": "2017-11-05T11:00:53Z",
            "event": "referenced",
            "id": 1326426262,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDEzMjY0MjYyNjI=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1326426262"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-12-02T20:19:13Z",
            "event": "renamed",
            "id": 2000118218,
            "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjAwMDExODIxOA==",
            "performed_via_github_app": null,
            "rename": {
                "from": "Infer value type from parametrized dict type?",
                "to": "Infer value type from parametrized (PEP-484) dict type?"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/2000118218"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-12-02T20:24:24Z",
            "event": "labeled",
            "id": 2000120402,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDIwMDAxMjA0MDI=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/2000120402"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-12-02T20:24:24Z",
            "event": "labeled",
            "id": 2000120403,
            "label": {
                "color": "444444",
                "name": "Type Analysis"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDIwMDAxMjA0MDM=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/2000120403"
        },
        {
            "actor": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-11-27T07:50:48Z",
            "event": "mentioned",
            "id": 4044960607,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA0NDk2MDYwNw==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4044960607"
        },
        {
            "actor": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-11-27T07:50:48Z",
            "event": "subscribed",
            "id": 4044960608,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNDQ5NjA2MDg=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4044960608"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1979/events",
    "html_url": "https://github.com/cython/cython/issues/1979",
    "id": 271240065,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558824,
            "name": "Type Analysis",
            "node_id": "MDU6TGFiZWw0MjU1NTg4MjQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/Type%20Analysis"
        },
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1979/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUyNzEyNDAwNjU=",
    "number": 1979,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Infer value type from parametrized (PEP-484) dict type?",
    "updated_at": "2020-11-27T07:50:48Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1979",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
        "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
        "followers_url": "https://api.github.com/users/mrocklin/followers",
        "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
        "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mrocklin",
        "id": 306380,
        "login": "mrocklin",
        "node_id": "MDQ6VXNlcjMwNjM4MA==",
        "organizations_url": "https://api.github.com/users/mrocklin/orgs",
        "received_events_url": "https://api.github.com/users/mrocklin/received_events",
        "repos_url": "https://api.github.com/users/mrocklin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mrocklin"
    }
}