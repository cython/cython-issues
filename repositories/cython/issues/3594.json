{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "It looks like this is a valid cython code.\r\n```cython\r\nfrom cython import parallel\r\nx = parallel.threadid()\r\nprint(x)\r\n```\r\n\r\nBut this is not.\r\n```cython\r\nfrom cython import parallel\r\nprint(parallel.threadid())\r\n```\r\n\r\nThis might be just a symptom of a larger issue. Many things are not possible with the cython module when compiled with cython, compared to when run with python. Like accessing its `module` object.\r\n```cython\r\nimport cython\r\nx = cython\r\n```",
    "closed_at": "2020-05-15T17:15:14Z",
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "`print(parallel.threadid())` looks like a bug.\r\n\r\n---------------\r\n\r\nNot being able to assign the `cython` module isn't. The Cython module isn't really a proper module, should really only be `cimported` (a compile-time action), and doesn't have an actual module object associated with it. It can be `imported` so it's possible to write pure-Python code with optional Cython features.\r\n\r\nIf you were able to assign the cython module then people would do things like:\r\n\r\n```\r\nimport cython\r\n\r\nif something():\r\n     x = cython\r\nelse:\r\n     class Dummy:\r\n         def cclass(self, var):\r\n             return var\r\n    x = Dummy()\r\n\r\n@x.cclass\r\nclass C:\r\n    pass\r\n```\r\n\r\nSuddenly you've made the choice of whether `C` is a `cdef` or regular class a runtime decision rather than a compile-time decision...",
            "created_at": "2020-05-09T16:55:37Z",
            "html_url": "https://github.com/cython/cython/issues/3594#issuecomment-626205314",
            "id": 626205314,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3594",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNjIwNTMxNA==",
            "updated_at": "2020-05-09T16:55:37Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/626205314",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Cython explicitly tracks usage of its own special \"modules\" in the `InterpretCompilerDirectives` AST transformation in `ParseTreeTransforms.py`. PR welcome that adds support for this.",
            "created_at": "2020-05-10T09:22:56Z",
            "html_url": "https://github.com/cython/cython/issues/3594#issuecomment-626298486",
            "id": 626298486,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3594",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNjI5ODQ4Ng==",
            "updated_at": "2020-05-10T09:22:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/626298486",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Suddenly you've made the choice of whether `C` is a `cdef` or regular class a runtime decision rather than a compile-time decision...\r\n\r\nThat's true.\r\nHowever, I wonder if that's the right way to go about it as there are more ways to try to trick the compiler. Like having an intermediate decorator calling `cython.cclass`. I guess Cython could benefit from having an explicit notion of _\"compile-time executable\"_ code.\r\n\r\n> Cython explicitly tracks usage of its own special \"modules\" in the `InterpretCompilerDirectives` AST transformation in `ParseTreeTransforms.py`. PR welcome that adds support for this.\r\n\r\nI gave it a go. I think the method `ParallelRangeTransform.visit_CallNode` lacks a call to `self.visitchildren(node)` in order to visit the functions arguments and not just the function name.\r\nhttps://github.com/cython/cython/blob/f0b6dc27632e6777a1b90e66c98a8aa86d608dea/Cython/Compiler/ParseTreeTransforms.py#L1190-L1193\r\n\r\nBut when I changed `self.visit(node.function)` to a `self.visitchildren(node)`, then the compiler crash much later because `parallelRangeNode` doesn't have a method `analyse_types`. I guess the traversal shouldn't recurse into the argument of a `prange`.\r\nWhen add a call to `visitchildren` only when the node is not a parallel directive, then some tests fail unexplicably. And I already spent way too much time trying to reproduce the issue outside of `runtest.py` without any success.\r\nI give up.",
            "created_at": "2020-05-13T15:08:17Z",
            "html_url": "https://github.com/cython/cython/issues/3594#issuecomment-628054593",
            "id": 628054593,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3594",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODA1NDU5Mw==",
            "updated_at": "2020-05-13T15:08:17Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628054593",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
                "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
                "followers_url": "https://api.github.com/users/Celelibi/followers",
                "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Celelibi",
                "id": 6136274,
                "login": "Celelibi",
                "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
                "organizations_url": "https://api.github.com/users/Celelibi/orgs",
                "received_events_url": "https://api.github.com/users/Celelibi/received_events",
                "repos_url": "https://api.github.com/users/Celelibi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Celelibi"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@Celelibi As far as I can tell your \"add a call to visitchildren only when the node is not a parallel directive\" seems to work fine. Thanks for the pointer on what needed changing - I'm not sure why it wasn't working for you.",
            "created_at": "2020-05-13T18:34:16Z",
            "html_url": "https://github.com/cython/cython/issues/3594#issuecomment-628170640",
            "id": 628170640,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3594",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODE3MDY0MA==",
            "updated_at": "2020-05-13T18:34:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628170640",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "@da-woods, for what it's worth, here's the log of `runtest.py` for on the tests \"parallel\" on your PR.\r\n\r\n```\r\n$ python3 ./runtests.py -vv --no-cpp parallel\r\nPython 3.8.3rc1 (default, Apr 30 2020, 07:33:30) \r\n[GCC 9.3.0]\r\n\r\nRunning tests against Cython 3.0a3 879af4af720e18ad0546102cc4b9160e828a0999\r\nUsing Cython language level 2.\r\nBackends: c\r\n\r\nrunTest (__main__.CythonCompileTestCase)\r\ncompiling (c/cy2) parallel_compile_float_rank ... ok\r\nrunTest (__main__.CythonCompileTestCase)\r\ncompiling (c/cy2) e_cython_parallel ... ok\r\nrunTest (__main__.CythonRunTestCase)\r\ncompiling (c/cy2) and running numpy_parallel ... test_parallel_numpy_arrays (numpy_parallel)\r\nDoctest: numpy_parallel.test_parallel_numpy_arrays ... ok\r\nrunTest (__main__.CythonRunTestCase)\r\ncompiling (c/cy2) and running parallel ... \r\n#### 2020-05-14 13:09:33.803802\r\nouter_parallel_section (parallel)\r\nDoctest: parallel.outer_parallel_section ... ok\r\nparallel_exc_replace (parallel)\r\nDoctest: parallel.parallel_exc_replace ... ok\r\nparallel_exceptions2 (parallel)\r\nDoctest: parallel.parallel_exceptions2 ... ok\r\ntest_chunksize (parallel)\r\nDoctest: parallel.test_chunksize ... FAIL\r\ntest_clean_temps (parallel)\r\nDoctest: parallel.test_clean_temps ... ok\r\ntest_closure_parallel_privates (parallel)\r\nDoctest: parallel.test_closure_parallel_privates ... ok\r\ntest_closure_parallel_with_gil (parallel)\r\nDoctest: parallel.test_closure_parallel_with_gil ... ok\r\ntest_descending_prange (parallel)\r\nDoctest: parallel.test_descending_prange ... ok\r\ntest_else_clause (parallel)\r\nDoctest: parallel.test_else_clause ... ok\r\ntest_inner_private (parallel)\r\nDoctest: parallel.test_inner_private ... ok\r\ntest_nan_init (parallel)\r\nDoctest: parallel.test_nan_init ... ok\r\ntest_nested_break_continue (parallel)\r\nDoctest: parallel.test_nested_break_continue ... ok\r\ntest_nogil_cdef_except_clause (parallel)\r\nDoctest: parallel.test_nogil_cdef_except_clause ... ok\r\ntest_num_threads (parallel)\r\nDoctest: parallel.test_num_threads ... ok\r\ntest_parallel (parallel)\r\nDoctest: parallel.test_parallel ... ok\r\ntest_parallel_exc_cdef (parallel)\r\nDoctest: parallel.test_parallel_exc_cdef ... ok\r\ntest_parallel_exc_cpdef (parallel)\r\nDoctest: parallel.test_parallel_exc_cpdef ... ok\r\ntest_parallel_exc_nogil_swallow (parallel)\r\nDoctest: parallel.test_parallel_exc_nogil_swallow ... ok\r\ntest_parallel_exceptions (parallel)\r\nDoctest: parallel.test_parallel_exceptions ... ok\r\ntest_parallel_exceptions_unnested (parallel)\r\nDoctest: parallel.test_parallel_exceptions_unnested ... ok\r\ntest_parallel_with_gil_continue_unnested (parallel)\r\nDoctest: parallel.test_parallel_with_gil_continue_unnested ... ok\r\ntest_parallel_with_gil_return (parallel)\r\nDoctest: parallel.test_parallel_with_gil_return ... ok\r\ntest_pointer_temps (parallel)\r\nDoctest: parallel.test_pointer_temps ... ok\r\ntest_prange (parallel)\r\nDoctest: parallel.test_prange ... FAIL\r\ntest_prange_break (parallel)\r\nDoctest: parallel.test_prange_break ... ok\r\ntest_prange_continue (parallel)\r\nDoctest: parallel.test_prange_continue ... ok\r\ntest_prange_in_with (parallel)\r\nDoctest: parallel.test_prange_in_with ... ok\r\ntest_prange_matches_range (parallel)\r\nDoctest: parallel.test_prange_matches_range ... ok\r\ntest_propagation (parallel)\r\nDoctest: parallel.test_propagation ... ok\r\ntest_pure_mode (parallel)\r\nDoctest: parallel.test_pure_mode ... ok\r\ntest_reassign_start_stop_step (parallel)\r\nDoctest: parallel.test_reassign_start_stop_step ... ok\r\ntest_return (parallel)\r\nDoctest: parallel.test_return ... ok\r\nrunTest (__main__.CythonRunTestCase)\r\ncompiling (c/cy2) and running parallel_swap_assign_T425 ... swap (parallel_swap_assign_T425)\r\nDoctest: parallel_swap_assign_T425.swap ... ok\r\nswap5 (parallel_swap_assign_T425)\r\nDoctest: parallel_swap_assign_T425.swap5 ... ok\r\nswap_attr_values (parallel_swap_assign_T425)\r\nDoctest: parallel_swap_assign_T425.swap_attr_values ... ok\r\nswap_cmp5 (parallel_swap_assign_T425)\r\nDoctest: parallel_swap_assign_T425.swap_cmp5 ... ok\r\nswap_list_items (parallel_swap_assign_T425)\r\nDoctest: parallel_swap_assign_T425.swap_list_items ... ok\r\nswap_py (parallel_swap_assign_T425)\r\nDoctest: parallel_swap_assign_T425.swap_py ... ok\r\nswap_recursive_attr_values (parallel_swap_assign_T425)\r\nDoctest: parallel_swap_assign_T425.swap_recursive_attr_values ... ok\r\nrunTest (__main__.CythonRunTestCase)\r\ncompiling (c/cy2) and running pure_parallel ... prange_regression (pure_parallel)\r\nDoctest: pure_parallel.prange_regression ... ok\r\nprange_with_gil (pure_parallel)\r\nDoctest: pure_parallel.prange_with_gil ... ok\r\nprange_with_gil_call_nogil (pure_parallel)\r\nDoctest: pure_parallel.prange_with_gil_call_nogil ... ok\r\nrun (__main__.PureDoctestTestCase)\r\nrunning pure doctests in pure_parallel ... prange_regression (pure_doctest__pure_parallel)\r\nDoctest: pure_doctest__pure_parallel.prange_regression ... ok\r\nprange_with_gil (pure_doctest__pure_parallel)\r\nDoctest: pure_doctest__pure_parallel.prange_with_gil ... ok\r\nprange_with_gil_call_nogil (pure_doctest__pure_parallel)\r\nDoctest: pure_doctest__pure_parallel.prange_with_gil_call_nogil ... ok\r\nrunTest (__main__.CythonRunTestCase)\r\ncompiling (c/cy2) and running sequential_parallel ... \r\n#### 2020-05-14 13:09:43.883730\r\n\r\n=== C/C++ compiler error output: ===\r\nsequential_parallel.c: In function ‘__pyx_pf_19sequential_parallel_58test_chunksize’:\r\nsequential_parallel.c:17361:7: warning: variable ‘__pyx_t_3’ set but not used [-Wunused-but-set-variable]\r\n17361 |   int __pyx_t_3;\r\n      |       ^~~~~~~~~\r\nsequential_parallel.c: In function ‘__pyx_pf_19sequential_parallel_68test_inner_private’:\r\nsequential_parallel.c:19519:7: warning: variable ‘__pyx_t_4’ set but not used [-Wunused-but-set-variable]\r\n19519 |   int __pyx_t_4;\r\n      |       ^~~~~~~~~\r\n====================================\r\nouter_parallel_section (sequential_parallel)\r\nDoctest: sequential_parallel.outer_parallel_section ... ok\r\nparallel_exc_replace (sequential_parallel)\r\nDoctest: sequential_parallel.parallel_exc_replace ... ok\r\nparallel_exceptions2 (sequential_parallel)\r\nDoctest: sequential_parallel.parallel_exceptions2 ... ok\r\ntest_chunksize (sequential_parallel)\r\nDoctest: sequential_parallel.test_chunksize ... ok\r\ntest_clean_temps (sequential_parallel)\r\nDoctest: sequential_parallel.test_clean_temps ... ok\r\ntest_closure_parallel_privates (sequential_parallel)\r\nDoctest: sequential_parallel.test_closure_parallel_privates ... ok\r\ntest_closure_parallel_with_gil (sequential_parallel)\r\nDoctest: sequential_parallel.test_closure_parallel_with_gil ... ok\r\ntest_descending_prange (sequential_parallel)\r\nDoctest: sequential_parallel.test_descending_prange ... ok\r\ntest_else_clause (sequential_parallel)\r\nDoctest: sequential_parallel.test_else_clause ... ok\r\ntest_inner_private (sequential_parallel)\r\nDoctest: sequential_parallel.test_inner_private ... ok\r\ntest_nan_init (sequential_parallel)\r\nDoctest: sequential_parallel.test_nan_init ... ok\r\ntest_nested_break_continue (sequential_parallel)\r\nDoctest: sequential_parallel.test_nested_break_continue ... ok\r\ntest_nogil_cdef_except_clause (sequential_parallel)\r\nDoctest: sequential_parallel.test_nogil_cdef_except_clause ... ok\r\ntest_parallel_exc_cdef (sequential_parallel)\r\nDoctest: sequential_parallel.test_parallel_exc_cdef ... ok\r\ntest_parallel_exc_cpdef (sequential_parallel)\r\nDoctest: sequential_parallel.test_parallel_exc_cpdef ... ok\r\ntest_parallel_exc_nogil_swallow (sequential_parallel)\r\nDoctest: sequential_parallel.test_parallel_exc_nogil_swallow ... ok\r\ntest_parallel_exceptions (sequential_parallel)\r\nDoctest: sequential_parallel.test_parallel_exceptions ... ok\r\ntest_parallel_exceptions_unnested (sequential_parallel)\r\nDoctest: sequential_parallel.test_parallel_exceptions_unnested ... ok\r\ntest_parallel_with_gil_continue_unnested (sequential_parallel)\r\nDoctest: sequential_parallel.test_parallel_with_gil_continue_unnested ... ok\r\ntest_parallel_with_gil_return (sequential_parallel)\r\nDoctest: sequential_parallel.test_parallel_with_gil_return ... ok\r\ntest_pointer_temps (sequential_parallel)\r\nDoctest: sequential_parallel.test_pointer_temps ... ok\r\ntest_prange (sequential_parallel)\r\nDoctest: sequential_parallel.test_prange ... ok\r\ntest_prange_break (sequential_parallel)\r\nDoctest: sequential_parallel.test_prange_break ... ok\r\ntest_prange_continue (sequential_parallel)\r\nDoctest: sequential_parallel.test_prange_continue ... ok\r\ntest_prange_in_with (sequential_parallel)\r\nDoctest: sequential_parallel.test_prange_in_with ... ok\r\ntest_prange_matches_range (sequential_parallel)\r\nDoctest: sequential_parallel.test_prange_matches_range ... ok\r\ntest_propagation (sequential_parallel)\r\nDoctest: sequential_parallel.test_propagation ... ok\r\ntest_pure_mode (sequential_parallel)\r\nDoctest: sequential_parallel.test_pure_mode ... ok\r\ntest_reassign_start_stop_step (sequential_parallel)\r\nDoctest: sequential_parallel.test_reassign_start_stop_step ... ok\r\ntest_return (sequential_parallel)\r\nDoctest: sequential_parallel.test_return ... ok\r\nrunTest (__main__.CythonCompileTestCase)\r\ncompiling (c/cy2) breaking_loop ... \r\n=== C/C++ compiler error output: ===\r\nbreaking_loop.c:1418:12: warning: ‘__pyx_f_13breaking_loop_func’ defined but not used [-Wunused-function]\r\n 1418 | static int __pyx_f_13breaking_loop_func(CYTHON_UNUSED Py_ssize_t __pyx_v_n) {\r\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n====================================\r\nok\r\nrunTest (__main__.CythonCompileTestCase)\r\ncompiling (c/cy2) cimport_openmp ... ok\r\nrunTest (__main__.CythonCompileTestCase)\r\ncompiling (c/cy2) setup ... ok\r\nrunTest (__main__.CythonCompileTestCase)\r\ncompiling (c/cy2) simple_sum ... ok\r\n\r\n======================================================================\r\nFAIL: test_chunksize (parallel)\r\nDoctest: parallel.test_chunksize\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/doctest.py\", line 2204, in runTest\r\n    raise self.failureException(self.format_failure(new.getvalue()))\r\nAssertionError: Failed doctest test for parallel.test_chunksize\r\n  File \"/home/celelibi/code/cython/TEST_TMP/run/c/parallel/parallel.cpython-38-x86_64-linux-gnu.so\", line unknown line number, in test_chunksize\r\n\r\n----------------------------------------------------------------------\r\nFile \"/home/celelibi/code/cython/TEST_TMP/run/c/parallel/parallel.cpython-38-x86_64-linux-gnu.so\", line ?, in parallel.test_chunksize\r\nFailed example:\r\n    test_chunksize()\r\nExpected:\r\n    45\r\n    45\r\n    45\r\nGot:\r\n    45\r\n    270\r\n    360\r\n\r\n\r\n======================================================================\r\nFAIL: test_prange (parallel)\r\nDoctest: parallel.test_prange\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/doctest.py\", line 2204, in runTest\r\n    raise self.failureException(self.format_failure(new.getvalue()))\r\nAssertionError: Failed doctest test for parallel.test_prange\r\n  File \"/home/celelibi/code/cython/TEST_TMP/run/c/parallel/parallel.cpython-38-x86_64-linux-gnu.so\", line unknown line number, in test_prange\r\n\r\n----------------------------------------------------------------------\r\nFile \"/home/celelibi/code/cython/TEST_TMP/run/c/parallel/parallel.cpython-38-x86_64-linux-gnu.so\", line ?, in parallel.test_prange\r\nFailed example:\r\n    test_prange()\r\nExpected:\r\n    (9, 9, 45, 45)\r\nGot:\r\n    (9, 9, 360, 45)\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 88 tests in 25.571s\r\n\r\nFAILED (failures=2)\r\nTimes:\r\ncompile-c   :    19.37 sec  (  10,  1.937 / run) - slowest: 'c:parallel' (7.26s), 'c:sequential_parallel' (6.91s), 'c:parallel_swap_assign_T425' (2.02s), 'c:pure_parallel' (1.14s), 'c:numpy_parallel' (0.87s), 'c:setup' (0.32s), 'c:parallel_compile_float_rank' (0.23s), 'c:simple_sum' (0.21s)\r\ncython      :     5.46 sec  (  11,  0.497 / run) - slowest: 'c:parallel' (1.72s), 'c:sequential_parallel' (1.64s), 'c:e_cython_parallel' (1.05s), 'c:parallel_compile_float_rank' (0.39s), 'c:numpy_parallel' (0.35s), 'c:parallel_swap_assign_T425' (0.17s), 'c:pure_parallel' (0.07s), 'c:cimport_openmp' (0.02s)\r\nimport      :     0.00 sec  (   5,  0.001 / run) - slowest: 'c:parallel' (0.00s), 'c:sequential_parallel' (0.00s), 'c:numpy_parallel' (0.00s), 'c:parallel_swap_assign_T425' (0.00s), 'c:pure_parallel' (0.00s)\r\npyimport    :     0.00 sec  (   1,  0.000 / run) - slowest: 'py:pure_parallel' (0.00s)\r\npyrun       :     0.00 sec  (   1,  0.001 / run) - slowest: 'py:pure_parallel' (0.00s)\r\nrun         :     0.33 sec  (   5,  0.066 / run) - slowest: 'c:parallel' (0.32s), 'c:sequential_parallel' (0.01s), 'c:numpy_parallel' (0.00s), 'c:parallel_swap_assign_T425' (0.00s), 'c:pure_parallel' (0.00s)\r\nALL DONE\r\n```\r\n\r\nThe test failure doesn't depend on the C or C++ backend, doesn't depend on the compiler optimizations, doesn't depend on the version of python that runs `runtest.py`.\r\n\r\nI know the tests passed on travis, but I would suggest not to dismiss this issue right away as it might be the symptom of a race condition.",
            "created_at": "2020-05-14T13:00:12Z",
            "html_url": "https://github.com/cython/cython/issues/3594#issuecomment-628617993",
            "id": 628617993,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3594",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODYxNzk5Mw==",
            "updated_at": "2020-05-14T13:00:12Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628617993",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
                "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
                "followers_url": "https://api.github.com/users/Celelibi/followers",
                "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Celelibi",
                "id": 6136274,
                "login": "Celelibi",
                "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
                "organizations_url": "https://api.github.com/users/Celelibi/orgs",
                "received_events_url": "https://api.github.com/users/Celelibi/received_events",
                "repos_url": "https://api.github.com/users/Celelibi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Celelibi"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the output. I'm quite puzzled by it though. When I compare the .c file from tests/run/parallel.pyx (i.e. the two tests that are failing) with and without my PR the only differences are due to the extra test I added. If I revert the extra test I added then `diff` tells me that they're identical.\r\n\r\nSo I don't know I'm afraid... I guess the PR should be treated with caution because of what you say but I really don't understand where the differences could be coming from.",
            "created_at": "2020-05-14T16:31:00Z",
            "html_url": "https://github.com/cython/cython/issues/3594#issuecomment-628747558",
            "id": 628747558,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3594",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODc0NzU1OA==",
            "updated_at": "2020-05-14T16:31:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628747558",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3594/comments",
    "created_at": "2020-05-09T13:34:58Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-10T09:18:40Z",
            "event": "labeled",
            "id": 3320140691,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMzMjAxNDA2OTE=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3320140691"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-10T09:18:40Z",
            "event": "labeled",
            "id": 3320140692,
            "label": {
                "color": "444444",
                "name": "Type Analysis"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMzMjAxNDA2OTI=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3320140692"
        },
        {
            "actor": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
                "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
                "followers_url": "https://api.github.com/users/Celelibi/followers",
                "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Celelibi",
                "id": 6136274,
                "login": "Celelibi",
                "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
                "organizations_url": "https://api.github.com/users/Celelibi/orgs",
                "received_events_url": "https://api.github.com/users/Celelibi/received_events",
                "repos_url": "https://api.github.com/users/Celelibi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Celelibi"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-13T18:34:16Z",
            "event": "mentioned",
            "id": 3333386297,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMzMzM4NjI5Nw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3333386297"
        },
        {
            "actor": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
                "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
                "followers_url": "https://api.github.com/users/Celelibi/followers",
                "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Celelibi",
                "id": 6136274,
                "login": "Celelibi",
                "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
                "organizations_url": "https://api.github.com/users/Celelibi/orgs",
                "received_events_url": "https://api.github.com/users/Celelibi/received_events",
                "repos_url": "https://api.github.com/users/Celelibi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Celelibi"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-13T18:34:16Z",
            "event": "subscribed",
            "id": 3333386299,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMzMzODYyOTk=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3333386299"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T13:00:12Z",
            "event": "mentioned",
            "id": 3336489022,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMzNjQ4OTAyMg==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3336489022"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T13:00:12Z",
            "event": "subscribed",
            "id": 3336489025,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMzY0ODkwMjU=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3336489025"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-15T17:01:52Z",
            "event": "milestoned",
            "id": 3341790943,
            "milestone": {
                "title": "0.29.18"
            },
            "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDMzNDE3OTA5NDM=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3341790943"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "27ffe2c859c8952f5959c4b0fcc83597a37c03ad",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/27ffe2c859c8952f5959c4b0fcc83597a37c03ad",
            "created_at": "2020-05-15T17:13:33Z",
            "event": "referenced",
            "id": 3341836278,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNDE4MzYyNzg=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3341836278"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "27ffe2c859c8952f5959c4b0fcc83597a37c03ad",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/27ffe2c859c8952f5959c4b0fcc83597a37c03ad",
            "created_at": "2020-05-15T17:15:14Z",
            "event": "closed",
            "id": 3341842362,
            "node_id": "MDExOkNsb3NlZEV2ZW50MzM0MTg0MjM2Mg==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3341842362"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3594/events",
    "html_url": "https://github.com/cython/cython/issues/3594",
    "id": 615178004,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558824,
            "name": "Type Analysis",
            "node_id": "MDU6TGFiZWw0MjU1NTg4MjQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/Type%20Analysis"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3594/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 9,
        "created_at": "2020-04-26T18:38:16Z",
        "creator": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/78",
        "id": 5350516,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/78/labels",
        "node_id": "MDk6TWlsZXN0b25lNTM1MDUxNg==",
        "number": 78,
        "open_issues": 1,
        "state": "open",
        "title": "0.29.18",
        "updated_at": "2020-05-16T08:32:13Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/78"
    },
    "node_id": "MDU6SXNzdWU2MTUxNzgwMDQ=",
    "number": 3594,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "cython.parallel.threadid unavailable in function arguments",
    "updated_at": "2020-05-15T17:15:14Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3594",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
        "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
        "followers_url": "https://api.github.com/users/Celelibi/followers",
        "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
        "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Celelibi",
        "id": 6136274,
        "login": "Celelibi",
        "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
        "organizations_url": "https://api.github.com/users/Celelibi/orgs",
        "received_events_url": "https://api.github.com/users/Celelibi/received_events",
        "repos_url": "https://api.github.com/users/Celelibi/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Celelibi"
    }
}