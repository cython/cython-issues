{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "While trying to wrap some Fortran code into Python with Cython, I found that the `WRITE` statement of Fortran can cause the generated Python module to crash (segmentation fault).\r\n\r\nTo be precise, the `WRITE` statemen only causes crash if it contains a format string.  Without a format string it won't crash.  Namely, `WRITE(*,*) \"xxx\"` does not crash but `WRITE(*,\"(A)\") \"xxx\"` does.  When called by a normal Fortran or C++ procedure, the related Fortran subroutine works as expected and there is no crash.\r\n\r\nThe following is an example.  It contains three files:\r\n\r\n```\r\n    1. fortran_write.f90\r\n    2. testwrite.pyx\r\n    3. setup.py\r\n```\r\n\r\nFile `fortran_write.f90`:\r\n\r\n```\r\nmodule mod_write\r\nuse, intrinsic :: ISO_C_BINDING\r\nimplicit none\r\n\r\ncontains\r\n\r\nsubroutine fwrite(flag) bind(C, name=\"write_f\")\r\n    integer*4, intent(in) :: flag\r\n    write(*, *) \"In fwrite: flag=\", flag\r\n    if (flag .eq. 0) then\r\n      write(*, *) \"Message from fwrite (write_f).\"\r\n    else if (flag .eq. 1) then\r\n      write(*, *) \"MSG\", 1234, 12.34\r\n    else if (flag .eq. 2) then\r\n      write(*, \"(A40)\") \"Message from fwrite (write_f).\"\r\n    else if (flag .eq. 3) then\r\n      write(*, \"(I6)\") 1234\r\n    else if (flag .eq. 4) then\r\n      write(*, \"(F6.2)\") 12.34\r\n    end if\r\nend subroutine fwrite\r\nend module mod_write\r\n```\r\n\r\n---\r\n\r\nFile `testwrite.pyx`:\r\n\r\n```\r\n# distutils: language = c++\r\n\r\ncdef extern:\r\n  void write_f(int* flag)\r\n\r\ncdef writef(flag):\r\n  cdef int f;\r\n  f = flag\r\n  write_f(&f)\r\n\r\ndef run():\r\n  writef(0)\r\n  writef(1)\r\n  writef(2)\r\n  writef(3)\r\n  writef(4)\r\n```\r\n\r\n---\r\n\r\nFile `setup.py`:\r\n\r\n```\r\nfrom distutils.core import setup\r\nfrom distutils.extension import Extension\r\nfrom Cython.Build import cythonize\r\n\r\nextension = Extension(\r\n    name=\"testwrite\",\r\n    sources=[\"testwrite.pyx\"],\r\n    libraries=[\"testwrite\", \"gfortran\"],\r\n    library_dirs=[\"./\", \"/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/\"],\r\n    include_dirs=[\"./\"],\r\n    depends=['fortran_write.f90'],\r\n    extra_compile_args=[\"-std=c++11\"])\r\n\r\nsetup(\r\n    name=\"testwrite\",\r\n    ext_modules=cythonize([extension], language_level=\"3\")\r\n)\r\n```\r\n\r\n---\r\n\r\nCompile procedure:\r\n\r\n```\r\ngfortran -c fortran_write.f90\r\nar rcs libtestwrite.a fortran_write.o\r\npython setup.py build_ext --inplace\r\n```\r\n\r\n---\r\n\r\nTest procedure:\r\n\r\n```\r\npython -c \"import testwrite;testwrite.run()\"\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n In fwrite: flag=           0\r\n Message from fwrite (write_f).\r\n In fwrite: flag=           1\r\n MSG        1234   12.3400002\r\n In fwrite: flag=           2\r\n[1]    7631 segmentation fault  python -c \"import testwrite;testwrite.run()\"\r\n```\r\n\r\nExpected output:\r\n\r\n```\r\nIn fwrite: flag=           0\r\n Message from fwrite (write_f).\r\n In fwrite: flag=           1\r\n MSG        1234   12.3400002\r\n In fwrite: flag=           2\r\n          Message from fwrite (write_f).\r\n In fwrite: flag=           3\r\n  1234\r\n In fwrite: flag=           4\r\n 12.34\r\n ```\r\n\r\n ---\r\n\r\n By the way, `f2py` works fine.\r\n\r\nCompile procedure:\r\n\r\n ```\r\n f2py -c -m testwrite fortran_write.f90\r\n ```\r\n\r\n Test procedure:\r\n\r\n ```\r\n python -c \"import testwrite;testwrite.mod_write.fwrite(2)\"\r\n ```\r\n\r\n---\r\n\r\nSystem information\r\n\r\n```macOS Version 10.15.3```\r\n\r\n`gfortran -v`:\r\n```\r\nUsing built-in specs.\r\nCOLLECT_GCC=gfortran\r\nCOLLECT_LTO_WRAPPER=/usr/local/Cellar/gcc/9.2.0_1/libexec/gcc/x86_64-apple-darwin18/9.2.0/lto-wrapper\r\nTarget: x86_64-apple-darwin18\r\nConfigured with: ../configure --build=x86_64-apple-darwin18 --prefix=/usr/local/Cellar/gcc/9.2.0_1 --libdir=/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9 --disable-nls --enable-checking=release --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-9 --with-gmp=/usr/local/opt/gmp --with-mpfr=/usr/local/opt/mpfr --with-mpc=/usr/local/opt/libmpc --with-isl=/usr/local/opt/isl --with-system-zlib --with-pkgversion='Homebrew GCC 9.2.0_1' --with-bugurl=https://github.com/Homebrew/homebrew-core/issues --disable-multilib --with-native-system-header-dir=/usr/include --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\r\nThread model: posix\r\ngcc version 9.2.0 (Homebrew GCC 9.2.0_1)\r\n```\r\n\r\n`g++ -v`:\r\n```\r\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/4.2.1\r\nApple clang version 11.0.0 (clang-1100.0.33.16)\r\nTarget: x86_64-apple-darwin19.3.0\r\nThread model: posix\r\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\r\n```\r\n\r\n`cython --version`\r\n```Cython version 0.29.14```\r\n\r\n`python --version`:\r\n```Python 3.7.4```\r\n\r\n\r\n`f2py` version 2\r\n\r\n---\r\nI posted the same question at https://stackoverflow.com/questions/60693732/cython-segmentation-fault-when-calling-fortran-library-with-a-write-fmt-str-s but have not got any answer yet.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I wouldn't know why Cython should be doing anything differently. AFAICT, the way it calls the Fortran code is always the same, so if a certain (output) operation crashes inside of Fortran, I can't see that being Cython's fault.",
            "created_at": "2020-05-09T22:26:36Z",
            "html_url": "https://github.com/cython/cython/issues/3436#issuecomment-626243498",
            "id": 626243498,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3436",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNjI0MzQ5OA==",
            "updated_at": "2020-05-09T22:26:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/626243498",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3436/comments",
    "created_at": "2020-03-16T03:21:19Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1042334?v=4",
                "events_url": "https://api.github.com/users/fjdu/events{/privacy}",
                "followers_url": "https://api.github.com/users/fjdu/followers",
                "following_url": "https://api.github.com/users/fjdu/following{/other_user}",
                "gists_url": "https://api.github.com/users/fjdu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fjdu",
                "id": 1042334,
                "login": "fjdu",
                "node_id": "MDQ6VXNlcjEwNDIzMzQ=",
                "organizations_url": "https://api.github.com/users/fjdu/orgs",
                "received_events_url": "https://api.github.com/users/fjdu/received_events",
                "repos_url": "https://api.github.com/users/fjdu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fjdu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fjdu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fjdu"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-16T03:48:03Z",
            "event": "renamed",
            "id": 3131476819,
            "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzEzMTQ3NjgxOQ==",
            "rename": {
                "from": "Cython segmentation fault when calling Fortran library with a WRITE(*,FMT_STR) statement",
                "to": "Segmentation fault when cython generated code calls Fortran library executing a WRITE(*,FMT_STR) statement"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/3131476819"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3436/events",
    "html_url": "https://github.com/cython/cython/issues/3436",
    "id": 581970033,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3436/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1ODE5NzAwMzM=",
    "number": 3436,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Segmentation fault when cython generated code calls Fortran library executing a WRITE(*,FMT_STR) statement",
    "updated_at": "2020-05-09T22:26:36Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3436",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/1042334?v=4",
        "events_url": "https://api.github.com/users/fjdu/events{/privacy}",
        "followers_url": "https://api.github.com/users/fjdu/followers",
        "following_url": "https://api.github.com/users/fjdu/following{/other_user}",
        "gists_url": "https://api.github.com/users/fjdu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/fjdu",
        "id": 1042334,
        "login": "fjdu",
        "node_id": "MDQ6VXNlcjEwNDIzMzQ=",
        "organizations_url": "https://api.github.com/users/fjdu/orgs",
        "received_events_url": "https://api.github.com/users/fjdu/received_events",
        "repos_url": "https://api.github.com/users/fjdu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/fjdu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fjdu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/fjdu"
    }
}