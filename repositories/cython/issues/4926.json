{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nCython will create constants and dump them in the module state for pretty much any string, float, int, tuple, codeobject, and a few other things. This leads to a huge amount of global state, which I suspect makes things harder to compile (https://github.com/cython/cython/issues/4924) because a) the compiler has to reason about the state of non-local variables and b) it has to generate a lot of stringtab/cleanup/initialization code. For the example in the linked issue, every module-level constant that's defined creates an interned string (for its name) and an interned int (for its value).\r\n\r\n**Describe the solution you'd like**\r\n\r\nI think it's only worth interning these values if they are used:\r\n1. in a function (since a function can be called multiple times)\r\n2. more than once in the source\r\n3. in a loop.\r\n\r\nEssentially a value that's used once during module initialization doesn't benefit from being interned. Practically that's likely to get rid of most interned code objects, a good deal of \"code-object associated tuples\". Most other objects will probably remain as they are, but it could be worthwhile for modules defining many constants.\r\n\r\n**Additional context**\r\n\r\nPractically this is a little harder than it sounds. The generation of the cached constants is pretty built into the code generation - for example `IntNode` doesn't actually know how to create a Python int but instead always calls `code.get_py_int`. It'd really need an extra step before code generation to work out which constants need to be interned. In some cases I imagine it isn't obvious exactly how many times a constant is used before the code generation stage.\r\n\r\n(alternatively it might be possible to do something with insertion points and/or string replacement after the main code generation stage, but that feels hugely fragile.)",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I've done a bit of investigation about how many times each duplicated constant is used (https://github.com/da-woods/cython/tree/investigate-deduplication; not planning to merge this branch though, it's only for investigation). Essentially counting a use at global scope as 1 and a use at function scope as 2.\r\n\r\nFor Cython/Compiler/Nodes.py:\r\n* strings: 777 used only once, 945 used \"twice\" (almost all used once, but in a function), 2904 string constants total\r\n* numbers: 0 used once, 3 used \"twice\" (probably once in a function), 9 constants total\r\n* Others (mainly tuples and code objects): 780 used once, 89 used \"twice\" (probably once in a function), none used any more than that.\r\n\r\nObviously that may not be a perfectly typical module, but it suggest to me that there's a significant portion of interned constants that don't benefit from interning.",
            "created_at": "2022-07-27T09:38:57Z",
            "html_url": "https://github.com/cython/cython/issues/4926#issuecomment-1196499435",
            "id": 1196499435,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4926",
            "node_id": "IC_kwDOABDGAc5HUSHr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1196499435/reactions"
            },
            "updated_at": "2022-07-27T09:38:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1196499435",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I had a thought about a potential way of doing this that wouldn't take a huge amount of refactoring: the `get_float_const` functions could return C function calls getting the constants. When the code to set up the constants is generated at the end of the code-generation they could be made as simple inline calls returning a name or more complex calls that create the constant in situ (based on how many times the constants are used).\r\n\r\nIt'd obviously need validating that this method did make it easier for the C compiler (either in compilation times, ability to handle large files, or quality of compiled code).\r\n\r\nI think this might be better done after https://github.com/cython/cython/issues/3689 (if at all) since it interacts with the module state quite a bit.",
            "created_at": "2022-07-28T07:55:13Z",
            "html_url": "https://github.com/cython/cython/issues/4926#issuecomment-1197795462",
            "id": 1197795462,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4926",
            "node_id": "IC_kwDOABDGAc5HZOiG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1197795462/reactions"
            },
            "updated_at": "2022-07-28T07:55:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1197795462",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "With a tree visitor, it should be easy to recognise constants as \"cold code\". Just run through the module, skip over function nodes, lambdas, loop nodes, generator expressions etc., and mark all constants as \"slow\" that you find. There are a few special cases, such as function default arguments or the iterable of a for-loop, which can also be marked as \"slow\", but those are few. Or, we might be able to detect the same from the scope, with the additional information whether we're in a loop body or not. That might be valuable information anyway, since it could further inform the code generation or optimisation decisions.\r\n\r\nWe should still set up the constants in the same way as before, because non-interning also has a drawback, at least for strings. If we use different objects, they're not identical any more and thus take longer to compare for equality, e.g. in dicts. Especially building dict constants is quite common in module code. So there can be runtime effects as well.\r\n\r\nWe could have two string tables, one prepared, one unprepared, and then when we need an unprepared string, call the `InitString()` utility function for its (single) table entry to create the string object and return its reference. That way, we'd avoid additional setup code and still get interned, pre-hashed string values exactly like the prepared ones.\r\n\r\nThe same might work for code objects. I imagine the non-trivial constants (tuples and code objects) to bring the most value here. The large majority of code objects is really only used once, when creating a global function or a method in a module-level class. Those don't need to be stored in the module state, and they are relatively easy to detect (except for loop bodies, currently).\r\n\r\n\r\n> the `get_float_const` functions could return C function calls getting the constants. When the code to set up the constants is generated at the end of the code-generation they could be made as simple inline calls returning a name or more complex calls that create the constant in situ (based on how many times the constants are used).\r\n\r\nThis sounds like a good idea. It would use recursion for tuples of tuples, thus correctly reusing partially pre-computed tuples. And it would capture non-trivial setups inside of a function scope, which might really make it easier for the C compiler. It would also allow the current deduplication mechanism to detect and count duplicates in the user code, before generating the constant building functions when everything else is done.",
            "created_at": "2024-02-27T09:54:09Z",
            "html_url": "https://github.com/cython/cython/issues/4926#issuecomment-1966176856",
            "id": 1966176856,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4926",
            "node_id": "IC_kwDOABDGAc51MXpY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1966176856/reactions"
            },
            "updated_at": "2024-02-27T09:54:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1966176856",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > the `get_float_const` functions could return C function calls getting the constants. When the code to set up the constants is generated at the end of the code-generation they could be made as simple inline calls returning a name or more complex calls that create the constant in situ (based on how many times the constants are used).\r\n> \r\n> This sounds like a good idea. It would use recursion for tuples of tuples, thus correctly reusing partially pre-computed tuples. And it would capture non-trivial setups inside of a function scope, which might really make it easier for the C compiler. It would also allow the current deduplication mechanism to detect and count duplicates in the user code, before generating the constant building functions when everything else is done.\r\n\r\nOne additional thing is: we might need to do something close to this anyway in the future. In a full \"module state\" build `cdef` functions won't be able to access the module state. That'll obviously restrict them a lot in these builds. However, it'd be silly if a `cdef` function couldn't use these trivial constants just because they're on the module state, so we'd need to add a way of generating them as needed.",
            "created_at": "2024-02-27T18:16:37Z",
            "html_url": "https://github.com/cython/cython/issues/4926#issuecomment-1967333039",
            "id": 1967333039,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4926",
            "node_id": "IC_kwDOABDGAc51Qx6v",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1967333039/reactions"
            },
            "updated_at": "2024-02-27T18:16:37Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1967333039",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4926/comments",
    "created_at": "2022-07-27T07:50:43Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-07-27T07:54:18Z",
            "event": "renamed",
            "id": 7070590341,
            "node_id": "RTE_lADOABDGAc5OoMwbzwAAAAGlcKWF",
            "performed_via_github_app": null,
            "rename": {
                "from": "[ENH] Create de-deplicated/interned constants less aggressively",
                "to": "[ENH] Create de-duplicated/interned constants less aggressively"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/7070590341"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4926/events",
    "html_url": "https://github.com/cython/cython/issues/4926",
    "id": 1319160859,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4926/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5OoMwb",
    "number": 4926,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4926/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4926/timeline",
    "title": "[ENH] Create de-duplicated/interned constants less aggressively",
    "updated_at": "2024-02-27T18:16:38Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4926",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}