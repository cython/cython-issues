{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "It seems that Numba can unpack the C function pointer of functions wrapped with ctypes or cffi:\r\n\r\nhttps://web.archive.org/web/20160611082327/https://www.continuum.io/blog/developer-blog/calling-c-libraries-numba-using-cffi\r\nhttps://numba.pydata.org/numba-doc/0.12.2/interface_c.html\r\n\r\nWith some manual interaction, this can also be applied to Cython functions:\r\n\r\nhttps://numba.pydata.org/numba-doc/latest/extending/high-level.html#importing-cython-functions\r\n\r\nHowever, Cython could certainly make this easier. There has been some discussion about low-level calling interfaces between wrapper tools, e.g. https://github.com/cython/cython/wiki/enhancements-cep1000, but it never advanced much. Constructing a ctypes and/or cffi wrapper for a Cython function should be relatively easy for many interesting cases, especially involving ufuncs and other types of callbacks, and would enable Numba to call it directly as a C function.\r\n\r\nOTOH, supporting types like memory views probably won't be easy, since there is no good support for the buffer interface in ctypes (apparently only https://docs.python.org/3/library/ctypes.html#ctypes._CData.from_buffer). But that doesn't mean that simpler functions won't give enough of a motivation already.\r\n\r\nOn the interface side, Cython functions could grow a method `.as_ctypes()` and/or `.as_cffi()` that would import ctypes/cffi and build the necessary ABI(!) representation from it. That means that the object construction code cannot be generated directly but requires a bit of `sizeof()` testing. But it should be easy to implement this in Cython code, possibly using templates for C integer types etc. Numba could then just look for this method and call it, so that passing Cython functions into Numba would become fast instantaneously.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "A few thoughts:\r\n\r\n1. How/are are we dealing with closures (I think it might actually be possible because ctypes generates the code needed at runtime...)?\r\n\r\n2. I assume we're wrapping the innermost function (so for `def f(int a, double b):` we'd be wrapping \r\n```\r\nstatic PyObject *__pyx_pf_12example_func_f(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED int __pyx_v_a, CYTHON_UNUSED double __pyx_v_b)\r\n```\r\ninstead of\r\n```\r\nstatic PyObject *__pyx_pw_12example_func_1f(PyObject *__pyx_self, \r\n#if CYTHON_METH_FASTCALL\r\nPyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds\r\n#else\r\nPyObject *__pyx_args, PyObject *__pyx_kwds\r\n#endif\r\n); /*proto*/`\r\n```\r\nIs the (mostly unused) `self` argument a problem?\r\n\r\n3. I had a vague plan to wrap to C++ `std::function` in a somewhat similar way (https://github.com/cython/cython/issues/4159). Although no work actual done on it. It seems related enough to be worth mentioning here.",
            "created_at": "2022-02-19T09:22:11Z",
            "html_url": "https://github.com/cython/cython/issues/4649#issuecomment-1045975544",
            "id": 1045975544,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4649",
            "node_id": "IC_kwDOABDGAc4-WFH4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1045975544/reactions"
            },
            "updated_at": "2022-02-19T09:22:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1045975544",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Something very simple will usually go a long way. We can add the more difficult cases later.\n",
            "created_at": "2022-02-19T10:05:24Z",
            "html_url": "https://github.com/cython/cython/issues/4649#issuecomment-1045982482",
            "id": 1045982482,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4649",
            "node_id": "IC_kwDOABDGAc4-WG0S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1045982482/reactions"
            },
            "updated_at": "2022-02-19T10:05:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1045982482",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">     1. How/are are we dealing with closures (I think it might actually be possible because ctypes generates the code needed at runtime...)?\r\n\r\nctypes does not do any code generation. cffi (sometimes) does, but it's not what we're after here.\r\nThis is really just about providing a function pointer with signature metadata, in a format that Numba (and possibly other JIT compilers, e.g. PyPy) can understand.\r\n\r\n\r\n> Is the (mostly unused) `self` argument a problem?\r\n\r\nNot for module-level functions. We can generate a simple C function wrapper that just passes `NULL`.\r\n\r\n\r\n>     3. I had a vague plan to wrap to C++ `std::function` in a somewhat similar way ([[ENH] Python/Cython callable -> std::function #4159](https://github.com/cython/cython/issues/4159)). Although no work actual done on it. It seems related enough to be worth mentioning here.\r\n\r\nThis probably also applies equally to cdef functions and C/C++ functions. We currently generate a wrapper for them when used in a Python context *and* if they have a compatible signature. We could think about making that a general feature and always generating a wrapper when used as objects, but for non-Python signatures (i.e. with pointers) it would not itself be callable from Python but only expose the `.as_ctypes()` method.",
            "created_at": "2022-02-19T12:43:04Z",
            "html_url": "https://github.com/cython/cython/issues/4649#issuecomment-1046009158",
            "id": 1046009158,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4649",
            "node_id": "IC_kwDOABDGAc4-WNVG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1046009158/reactions"
            },
            "updated_at": "2022-02-19T12:43:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1046009158",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> > 1. How/are are we dealing with closures (I think it might actually be possible because ctypes generates the code needed at runtime...)?\r\n> \r\n> \r\n> ctypes does not do any code generation. cffi (sometimes) does, but it's not what we're after here.\r\n\r\nWhat I was referring to: ctypes can convert arbitrary Python callables (include closures, etc) into C function pointers: https://docs.python.org/3/library/ctypes.html#callback-functions. I think that does involve code generation to make it work (but I'm not 100% sure). I don't think that's quite what we'd want to do here, since it requires going through a Python callable, but it's close to useful.",
            "created_at": "2022-02-19T14:47:46Z",
            "html_url": "https://github.com/cython/cython/issues/4649#issuecomment-1046034370",
            "id": 1046034370,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4649",
            "node_id": "IC_kwDOABDGAc4-WTfC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1046034370/reactions"
            },
            "updated_at": "2022-02-19T14:47:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1046034370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "But I agree I'm probably getting hung up on the complicated \"handle every possible closure\" case, when something that handles basic global functions would be a good first step.",
            "created_at": "2022-02-19T14:59:39Z",
            "html_url": "https://github.com/cython/cython/issues/4649#issuecomment-1046036767",
            "id": 1046036767,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4649",
            "node_id": "IC_kwDOABDGAc4-WUEf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1046036767/reactions"
            },
            "updated_at": "2022-02-19T14:59:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1046036767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is it possible to also do this with Extension Type methods as well? I think this is a prerequisite for experimenting with lower-level protocol \"interfaces\", since Cython doesn't support multiple inheritance.",
            "created_at": "2022-02-20T04:14:59Z",
            "html_url": "https://github.com/cython/cython/issues/4649#issuecomment-1046159527",
            "id": 1046159527,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4649",
            "node_id": "IC_kwDOABDGAc4-WyCn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1046159527/reactions"
            },
            "updated_at": "2022-02-20T04:14:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1046159527",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11340332?v=4",
                "events_url": "https://api.github.com/users/goldenrockefeller/events{/privacy}",
                "followers_url": "https://api.github.com/users/goldenrockefeller/followers",
                "following_url": "https://api.github.com/users/goldenrockefeller/following{/other_user}",
                "gists_url": "https://api.github.com/users/goldenrockefeller/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/goldenrockefeller",
                "id": 11340332,
                "login": "goldenrockefeller",
                "node_id": "MDQ6VXNlcjExMzQwMzMy",
                "organizations_url": "https://api.github.com/users/goldenrockefeller/orgs",
                "received_events_url": "https://api.github.com/users/goldenrockefeller/received_events",
                "repos_url": "https://api.github.com/users/goldenrockefeller/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/goldenrockefeller/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/goldenrockefeller/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/goldenrockefeller"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "Bound methods would be tricky. Unbound methods should be ok but less generally useful",
            "created_at": "2022-02-20T07:59:29Z",
            "html_url": "https://github.com/cython/cython/issues/4649#issuecomment-1046183525",
            "id": 1046183525,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4649",
            "node_id": "IC_kwDOABDGAc4-W35l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1046183525/reactions"
            },
            "updated_at": "2022-02-20T07:59:29Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1046183525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "To be fast, I thought it would be better to deviate from Python's semantics a bit and just use the unbound methods. That way, an interface wrapper class would read the class of an object, and if that class is an extension type, it would cache and use the extension type's C/C++ methods. The interface wrapper would then avoid Python's function call overhead when calling methods on the object.\r\n",
            "created_at": "2022-02-20T16:07:51Z",
            "html_url": "https://github.com/cython/cython/issues/4649#issuecomment-1046269623",
            "id": 1046269623,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4649",
            "node_id": "IC_kwDOABDGAc4-XM63",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1046269623/reactions"
            },
            "updated_at": "2022-02-20T16:08:31Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1046269623",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11340332?v=4",
                "events_url": "https://api.github.com/users/goldenrockefeller/events{/privacy}",
                "followers_url": "https://api.github.com/users/goldenrockefeller/followers",
                "following_url": "https://api.github.com/users/goldenrockefeller/following{/other_user}",
                "gists_url": "https://api.github.com/users/goldenrockefeller/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/goldenrockefeller",
                "id": 11340332,
                "login": "goldenrockefeller",
                "node_id": "MDQ6VXNlcjExMzQwMzMy",
                "organizations_url": "https://api.github.com/users/goldenrockefeller/orgs",
                "received_events_url": "https://api.github.com/users/goldenrockefeller/received_events",
                "repos_url": "https://api.github.com/users/goldenrockefeller/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/goldenrockefeller/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/goldenrockefeller/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/goldenrockefeller"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4649/comments",
    "created_at": "2022-02-19T08:39:34Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-02-19T08:39:34Z",
            "event": "labeled",
            "id": 6105570305,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "LE_lADOABDGAc5EOW2bzwAAAAFr65wB",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6105570305"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-02-19T08:39:34Z",
            "event": "labeled",
            "id": 6105570306,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "LE_lADOABDGAc5EOW2bzwAAAAFr65wC",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6105570306"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-02-19T09:12:22Z",
            "event": "renamed",
            "id": 6105603793,
            "node_id": "RTE_lADOABDGAc5EOW2bzwAAAAFr7B7R",
            "performed_via_github_app": null,
            "rename": {
                "from": "[ENH] ctypes interface for Cython functions",
                "to": "[ENH] ctypes/cffi interface for Cython functions"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/6105603793"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4649/events",
    "html_url": "https://github.com/cython/cython/issues/4649",
    "id": 1144614299,
    "labels": [
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4649/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5EOW2b",
    "number": 4649,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4649/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4649/timeline",
    "title": "[ENH] ctypes/cffi interface for Cython functions",
    "updated_at": "2022-02-20T16:08:31Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4649",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder"
    }
}