{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Is your feature request related to a problem? Please describe.\n\nCreating cython objects seems slower than creating python default types, and thus I was looking at optimizing a bit my item initialization routines, and noticed in the generated C++ that kwargs is copied even when not needed.\n\n```cython\ncdef class A:\n    cdef int a\n    def __init__(self, a=2):\n        self.a = a\n\ncdef class B(A):\n    cdef int b\n    def __init__(self, b=3, **kwargs):\n        self.b = b\n        A.__init__(self, **kwargs)\n```\nIn the above example, it is clear that B won't be using kwargs after sending it to A. However the generated code will insert a PyDict_Copy for kwargs.\n\nBy default copying kwargs is the correct behaviour, indeed the following running with python:\n```python\n\nclass A:\n    def __init__(self, **kwargs):\n        self.a = kwargs.pop(\"a\")\n\nclass B(A):\n    def __init__(self, b=3, **kwargs):\n        self.b = b\n        A.__init__(self, **kwargs)\n        print(kwargs)\n\nB(a=2, b=4)\n\n```\n\nwill print `{'a': 2}`, which shows that the interpreter does a copy in this case.\n\nConsidering passing unused kwargs to a parent class is a common procedure, Cython could optimize when it sees kwargs won't be used anymore in the function. That's a very minor optimization, but still writing it here so that this small optimization possibility is known.\n\n\n### Describe the solution you'd like.\n\nCreating Cython objects as fast as creating native Python objects.\n\n### Describe alternatives you've considered.\n\nUsing a cdef function for A's init solves the issue (kwargs is not copied) and gives a performance boost (in addition to the copy, we avoid fetching the `__init__` attribute, and running the `__init__` wrapper)\n\n```cython\n\n\ncdef class A:\n    cdef int a\n    def __init__(self, **kwargs):\n        self.init(kwargs)\n    cdef void init(self, dict kwargs):\n        self.a = kwargs.get(\"a\", 2)\n\ncdef class B(A):\n    cdef int b\n    def __init__(self, b=3, **kwargs):\n        self.b = b\n        A.init(self, kwargs)\n```\n\n### Additional context\n\nCython from current git was used (3.1.a1)",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "It's worse than you're giving it credit for.\n\nModern versions of Python mostly go via the \"vectorcall\" protocol. Where the keywords aren't actually being passed as `dict` - they're being passed as a \"list\" of keys and a \"list\" of values (where \"list\" is not intended to mean a Python list).\n\nWhat that means is that when you call `B.__init__` Cython wraps these \"lists\" back up into a dictionary. Then it copies the dictionary. Then when you call `A.__init__` Python ends up unpacking that dictionary back into two \"lists\". And then Cython unpacks the \"lists\" back into a new dictionary.\n\nSo at very least - if you sure that Python is going to use vectorcall and put the dictionary in two \"lists\" - the copy is absolutely pointless. Being sure is a bit hard though, but it might be possible to push the dict copy one level lower to a point where Cython is sure.\n\nThere's potentially a bigger optimization where you're mostly forwarding `*args` and `**kwds` where you skip the unpacking entirely and don't even convert them back to Python objects. I did make a PR for that a few years ago, but it was quite complicated (especially for `**kwds`) and probably wouldn't quite have covered the examples here.",
            "created_at": "2025-02-16T12:30:36Z",
            "html_url": "https://github.com/cython/cython/issues/6676#issuecomment-2661410437",
            "id": 2661410437,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6676",
            "node_id": "IC_kwDOABDGAc6eoeaF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2661410437/reactions"
            },
            "updated_at": "2025-02-16T12:30:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2661410437",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I see, looking at it more deeply it's indeed worse than I thought.\n\nEven if kwargs is detected as unused (CYTHON_UNUSED) by __init__ or __cinit__, it will still parse the kwargs and make a copy.\n\nThat seems like improving this function wrapping code could improve performance for repeated calls. Any plan on that, or pointers were to look at ? Is it a task a new contributer could look at (if it's doable I could give a try) ?",
            "created_at": "2025-02-16T17:53:19Z",
            "html_url": "https://github.com/cython/cython/issues/6676#issuecomment-2661546306",
            "id": 2661546306,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6676",
            "node_id": "IC_kwDOABDGAc6eo_lC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2661546306/reactions"
            },
            "updated_at": "2025-02-16T17:53:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2661546306",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2546609?v=4",
                "events_url": "https://api.github.com/users/axeldavy/events{/privacy}",
                "followers_url": "https://api.github.com/users/axeldavy/followers",
                "following_url": "https://api.github.com/users/axeldavy/following{/other_user}",
                "gists_url": "https://api.github.com/users/axeldavy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/axeldavy",
                "id": 2546609,
                "login": "axeldavy",
                "node_id": "MDQ6VXNlcjI1NDY2MDk=",
                "organizations_url": "https://api.github.com/users/axeldavy/orgs",
                "received_events_url": "https://api.github.com/users/axeldavy/received_events",
                "repos_url": "https://api.github.com/users/axeldavy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/axeldavy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/axeldavy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/axeldavy",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Even if kwargs is detected as unused (CYTHON_UNUSED) by `__init__` or `__cinit__`, it will still parse the kwargs and make a copy.\n\nYeah - that might well be a worthwhile improvement. Although there's probably some validation code hidden in the parsing that might not easily be skipped. Probably also for `*args*` too although it's cheaper.\n\nThis would probably be something a new contributor could do (although it's possible it might end in the realization that there's a good reason we don't do it).  It also might end being a fairly minor change - I don't know how much real code this applies to.\n\nThat's probably just a case of looking at `__Pyx_ParseOptionalKeywords` and the places it's used from, and seeing if there's an easy way to modify it to skip writing the dict.\n\n------------------------------------------------\n\n> That seems like improving this function wrapping code could improve performance for repeated calls. Any plan on that, or pointers were to look at ? Is it a task a new contributer could look at (if it's doable I could give a try) ?\n\nI don't think there are immediate plans. Going back to my earlier suggestion:\n\n> So at very least - if you sure that Python is going to use vectorcall and put the dictionary in two \"lists\" - the copy is absolutely pointless. Being sure is a bit hard though, but it might be possible to push the dict copy one level lower to a point where Cython is sure.\n\nThat's probably harder - in principle you could move the dict copy into (something like) `__Pyx_PyObject_FastCallDict` and only perform the dict copy there if needed. But there's obviously quite a few paths through that. You need to a) know whether you need a dict copy (because we do already skip it in some cases where we know the dict is unique), b) know it's taking the `PyObject_VectorcallDict` path, and c) know that `PyObject_VectorcallDict` is going to use vectorcall and not `tp_call`.\n\nTo me that feels quite difficult to get right, and maybe more trouble than it's worth.",
            "created_at": "2025-02-16T18:58:33Z",
            "html_url": "https://github.com/cython/cython/issues/6676#issuecomment-2661570305",
            "id": 2661570305,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6676",
            "node_id": "IC_kwDOABDGAc6epFcB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2661570305/reactions"
            },
            "updated_at": "2025-02-16T18:58:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2661570305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I looked in detail at __Pyx_ParseOptionalKeywords and how the equivalent is done in getargs.c of CPython.\n\nIn think the current code should be doing well whenever **kwargs is not an expected argument.\n\nI my understanding when kwargs is an expected argument, the code checks for possible argument duplication for each argument/keyword. So if kwargs contains a lot of elements, this can be innefficient. Secondly, validated arguments are then appended to a new dict.\n\nI think the improvements could be:\n- When not doing vectorcall, check arguments duplication using dict GetItem instead of doing a loop.\n- For the vertorcall path argument duplication check, it could be possible to first build the kwargs dict, and then use dict GetItem for argument duplication checking. Alternatively, the check can be optimized a bit by checking hashes instead of the string content directly.\n- When not doing vectorcall, and if it is safe to reuse the parent kwargs, we could use it directly, and pop from it the used keyword arguments. If it is not safe, depending on the size of kwargs and arguments to parse, it might be more efficient to do a dict copy and then pop, instead of building a new dict.",
            "created_at": "2025-02-17T11:53:22Z",
            "html_url": "https://github.com/cython/cython/issues/6676#issuecomment-2662895709",
            "id": 2662895709,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6676",
            "node_id": "IC_kwDOABDGAc6euJBd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2662895709/reactions"
            },
            "updated_at": "2025-02-17T11:53:22Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2662895709",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2546609?v=4",
                "events_url": "https://api.github.com/users/axeldavy/events{/privacy}",
                "followers_url": "https://api.github.com/users/axeldavy/followers",
                "following_url": "https://api.github.com/users/axeldavy/following{/other_user}",
                "gists_url": "https://api.github.com/users/axeldavy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/axeldavy",
                "id": 2546609,
                "login": "axeldavy",
                "node_id": "MDQ6VXNlcjI1NDY2MDk=",
                "organizations_url": "https://api.github.com/users/axeldavy/orgs",
                "received_events_url": "https://api.github.com/users/axeldavy/received_events",
                "repos_url": "https://api.github.com/users/axeldavy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/axeldavy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/axeldavy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/axeldavy",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> When not doing vectorcall [...]\n\nI think Cython uses vectorcall pretty universally outside the Limited API, so it may not be worth spending *a lot* of time optimizing the non-vectorcall version.\n\n> [...] dict GetItem for argument duplication checking\n\nI haven't tested it myself recently, but I suspect the \"search through a list\" is competitive against a dictionary for a surprisingly long list. Not forever of course, but its worth being a bit careful because it probably is done this way for a reason.",
            "created_at": "2025-02-17T19:47:41Z",
            "html_url": "https://github.com/cython/cython/issues/6676#issuecomment-2663963673",
            "id": 2663963673,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6676",
            "node_id": "IC_kwDOABDGAc6eyNwZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2663963673/reactions"
            },
            "updated_at": "2025-02-17T19:47:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2663963673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "__init__ and __cinit__ are not vectorcall, and are one typical use case of kwargs (passing unhandled args to parent class).\n\nMy first attempt was adding this simple fast path at the beginning of `__Pyx_ParseOptionalKeywords`\n```\nif (!*first_kw_arg && !kwds_is_tuple && kwds && kwds2) {\n        // Check dict is unicode\n        if (!PyArg_ValidateKeywordArguments(kwds)) goto bad; // Python already sets the error\n        // Check for duplications\n        name = argnames;\n        while (*name) {\n            int check = PyDict_Contains(kwds, **name);\n            if (check < 0 && unlikely(PyErr_Occurred())) goto bad;\n            if (check == 1) goto arg_passed_twice;\n            name++;\n        }\n        // Fast copy\n        if (PyDict_Update(kwds2, kwds) < 0)\n           goto bad;\n        return 0;\n    }\n```\nFor one benchmark where I create an item with 10 keyword parameters and one positional argument, I get +40% speed.\n\nOfc the final solution will be different, but the idea was to try see if it was indeed a limiting factor.",
            "created_at": "2025-02-17T20:53:33Z",
            "html_url": "https://github.com/cython/cython/issues/6676#issuecomment-2664058231",
            "id": 2664058231,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6676",
            "node_id": "IC_kwDOABDGAc6eyk13",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2664058231/reactions"
            },
            "updated_at": "2025-02-17T20:53:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2664058231",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2546609?v=4",
                "events_url": "https://api.github.com/users/axeldavy/events{/privacy}",
                "followers_url": "https://api.github.com/users/axeldavy/followers",
                "following_url": "https://api.github.com/users/axeldavy/following{/other_user}",
                "gists_url": "https://api.github.com/users/axeldavy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/axeldavy",
                "id": 2546609,
                "login": "axeldavy",
                "node_id": "MDQ6VXNlcjI1NDY2MDk=",
                "organizations_url": "https://api.github.com/users/axeldavy/orgs",
                "received_events_url": "https://api.github.com/users/axeldavy/received_events",
                "repos_url": "https://api.github.com/users/axeldavy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/axeldavy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/axeldavy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/axeldavy",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "https://github.com/cython/cython/issues/3343 is related.",
            "created_at": "2025-02-23T11:24:12Z",
            "html_url": "https://github.com/cython/cython/issues/6676#issuecomment-2676799262",
            "id": 2676799262,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6676",
            "node_id": "IC_kwDOABDGAc6fjLce",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2676799262/reactions"
            },
            "updated_at": "2025-02-23T11:24:12Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2676799262",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6676/comments",
    "created_at": "2025-02-16T11:41:00Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-02-16T19:01:15Z",
            "event": "subscribed",
            "id": 16324969158,
            "node_id": "SE_lADOABDGAc6qO9p-zwAAAAPNC0LG",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/16324969158"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6676/events",
    "html_url": "https://github.com/cython/cython/issues/6676",
    "id": 2856049278,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6676/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6qO9p-",
    "number": 6676,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6676/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6676/timeline",
    "title": "[ENH] Avoid kwargs copies",
    "updated_at": "2025-02-23T11:24:14Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6676",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2546609?v=4",
        "events_url": "https://api.github.com/users/axeldavy/events{/privacy}",
        "followers_url": "https://api.github.com/users/axeldavy/followers",
        "following_url": "https://api.github.com/users/axeldavy/following{/other_user}",
        "gists_url": "https://api.github.com/users/axeldavy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/axeldavy",
        "id": 2546609,
        "login": "axeldavy",
        "node_id": "MDQ6VXNlcjI1NDY2MDk=",
        "organizations_url": "https://api.github.com/users/axeldavy/orgs",
        "received_events_url": "https://api.github.com/users/axeldavy/received_events",
        "repos_url": "https://api.github.com/users/axeldavy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/axeldavy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/axeldavy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/axeldavy",
        "user_view_type": "public"
    }
}