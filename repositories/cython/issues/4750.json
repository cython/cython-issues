{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Hello up there. I'm writing a custom string class. I already know that behaviour of `__add__` is different in between Cython 3 and Cython < 3. In particular I'm aware that Cython < 3 does not install user-provided `__radd__` into class's arithmetic methods.\r\n\r\nhttps://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html#arithmetic-special-methods\r\n\r\nSo for my class to support both Cython 3 and Cython < 3, in my `__add__` I wanted to add explicit check for \"reverted\" `__add__` call and manually invoke my `__radd__` in that case. But, as the test program shows, that manual `__radd__` invocation completely misses provided `__radd__` code definition, and, seemingly just wrongly calls `__radd__` from underlying base class.\r\n\r\nPlease find details of the bug below:\r\n\r\n\r\n**To Reproduce**\r\nCode to reproduce the behaviour:\r\n\r\n```cython\r\n# cython: language_level=3\r\n\r\ncdef class MyStr(unicode):\r\n\r\n    def __repr__(self):\r\n        return \"u(\" + unicode.__repr__(self) + \")\"\r\n\r\n    def __add__(a, b):\r\n        print('Add', type(a), type(b))\r\n\r\n        # Support for Cython 2 as Cython < 3 does not support __radd__:\r\n        # https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html#arithmetic-special-methods\r\n        if type(a) is not MyStr:\r\n            assert type(b) is MyStr, type(b)\r\n            return b.__radd__(a)\r\n\r\n        return MyStr(unicode.__add__(a, b))\r\n\r\n\r\n    def __radd__(b, a):\r\n        # a.__add__(b) returned NotImplementedError, e.g. for unicode.__add__(MyStr)\r\n        print('RAdd', type(b), type(a))\r\n        return MyStr(unicode(a).__add__(b))\r\n\r\n\r\n\r\n\r\na = MyStr(u'a')\r\nb = u'b'\r\n\r\nprint('a+b:', repr(a + b))\r\nprint('b+a:', repr(b + a))\r\n```\r\n\r\n**Expected behavior**\r\n\r\nWith Cython 3 it does work ok as expected:\r\n\r\n```console\r\n$ cythonize -i radd.pyx && python -c 'import radd'\r\nCompiling /home/kirr/tmp/trashme/radd.pyx because it changed.\r\n[1/1] Cythonizing /home/kirr/tmp/trashme/radd.pyx\r\n...\r\n\r\nAdd <class 'radd.MyStr'> <class 'str'>\r\na+b: u('ab')\r\nRAdd <class 'radd.MyStr'> <class 'str'>\r\nb+a: u('ba')\r\n```\r\n```console\r\n$ cython --version\r\nCython version 3.0.0a10\r\n```\r\n\r\nHowever with Cython `0.29.28-21-g60ca7eb74` (today's 0.29.x) it fails with RecursionError because provided `__radd__` is never called:\r\n\r\n```console\r\n$ cython --version\r\nCython version 0.29.28\r\n\r\n$ cythonize -i radd.pyx && python -c 'import radd'\r\nCompiling /home/kirr/tmp/trashme/radd.pyx because it changed.\r\n[1/1] Cythonizing /home/kirr/tmp/trashme/radd.pyx\r\n...\r\n\r\nAdd <class 'radd.MyStr'> <class 'str'>\r\na+b: u('ab')\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\n...\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nAdd <class 'str'> <class 'radd.MyStr'>\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"radd.pyx\", line 32, in init radd\r\n    print('b+a:', repr(b + a))\r\n  File \"radd.pyx\", line 15, in radd.MyStr.__add__\r\n    return b.__radd__(a)\r\n  File \"radd.pyx\", line 15, in radd.MyStr.__add__\r\n    return b.__radd__(a)\r\n  File \"radd.pyx\", line 15, in radd.MyStr.__add__\r\n    return b.__radd__(a)\r\n  [Previous line repeated 986 more times]\r\n  File \"radd.pyx\", line 9, in radd.MyStr.__add__\r\n    print('Add', type(a), type(b))\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Linux\r\n - Python version: 3.9.2\r\n - Cython version: 0.29.28-21-g60ca7eb74\r\n\r\n\r\nThanks beforehand,\r\nKirill",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I think your `__radd__` implementation does not match the way you call it in `__add__`. It converts `a` to `unicode` where it should convert `b`, according to the way you call it. I think it would be better to do the conversion already in `__add__` to avoid this pitfall.",
            "created_at": "2022-04-19T16:39:35Z",
            "html_url": "https://github.com/cython/cython/issues/4750#issuecomment-1102862853",
            "id": 1102862853,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4750",
            "node_id": "IC_kwDOABDGAc5BvFoF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1102862853/reactions"
            },
            "updated_at": "2022-04-19T16:39:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1102862853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "If you add `cython: binding=True` this works in 0.29.x. It's a bit odd - I can't immediately see what's going on.\r\n\r\nThe flow through the default Python `object.__add__` isn't particularly simple though - I recall it does some odd things selecting operators of derived classes in preference. So it _may_ not be Cython's fault. But I'm pretty puzzled at this stage",
            "created_at": "2022-04-19T19:00:07Z",
            "html_url": "https://github.com/cython/cython/issues/4750#issuecomment-1102984607",
            "id": 1102984607,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4750",
            "node_id": "IC_kwDOABDGAc5BvjWf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1102984607/reactions"
            },
            "updated_at": "2022-04-19T19:00:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1102984607",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "I think (but I'm not 100% sure) that the Python type initialization creates an `__radd__` slot as soon as you have an `__add__` function and this `__radd__` slot overrides the function that Cython has created. See https://github.com/python/cpython/blob/e2d78baed385c349d756e96d8f0def0268fa9c4f/Objects/typeobject.c#L8539 and related code. With `binding=True` Cython then overwrites that (because it adds the bound methods later).\r\n\r\nThis doesn't seem like something that Cython can easily do much about except possible create a warning that your defined `__radd__` function will likely be overridden without binding.\r\n\r\nI'm a little worried that Cython 3.0's new binop code may combine badly with `binding=False`. This needs investigating at some point.",
            "created_at": "2022-04-19T19:31:45Z",
            "html_url": "https://github.com/cython/cython/issues/4750#issuecomment-1103016743",
            "id": 1103016743,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4750",
            "node_id": "IC_kwDOABDGAc5BvrMn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1103016743/reactions"
            },
            "updated_at": "2022-04-19T19:31:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1103016743",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@scoder, @da-woods, thanks for feedback.\r\n\r\nMaybe I'm missing something, but with the following workaround, that I'm using:\r\n\r\n```diff\r\n--- a/radd.pyx.kirr\r\n+++ b/radd.pyx\r\n@@ -12,12 +12,15 @@ cdef class MyStr(unicode):\r\n         # https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html#arithmetic-special-methods\r\n         if type(a) is not MyStr:\r\n             assert type(b) is MyStr, type(b)\r\n-            return b.__radd__(a)\r\n+            return b.____radd__(a)\r\n \r\n         return MyStr(unicode.__add__(a, b))\r\n \r\n \r\n     def __radd__(b, a):\r\n+        return b.____radd(a)\r\n+\r\n+    def ____radd__(b, a):\r\n         # a.__add__(b) returned NotImplementedError, e.g. for unicode.__add__(MyStr)\r\n         print('RAdd', type(b), type(a))\r\n         return MyStr(unicode(a).__add__(b))\r\n```\r\n\r\nit seemingly works ok and from debugging print it can be seen that `__radd__` is called with `b=MyStr` and `a=something else` and it all produces correct result:\r\n\r\n```console\r\n$ cythonize -i radd.pyx && python -c 'import radd'\r\nCompiling /home/kirr/src/tools/py/cython/t/radd.pyx because it changed.\r\n...\r\n\r\nAdd <class 'radd.MyStr'> <class 'str'>\r\na+b: u('ab')\r\nAdd <class 'str'> <class 'radd.MyStr'>         <-- NOTE\r\nRAdd <class 'radd.MyStr'> <class 'str'>        <-- NOTE\r\nb+a: u('ba')                                   <-- NOTE\r\n```\r\n\r\nIn this particular example that `something else` is already unicode, but if that would be a non-unicode object, but with `__str__`, that `unicode(a)` would convert that to good unicode string that will handle further `.__add__(b)` well.\r\n\r\nOnce-again, I might be missing something, but isn't it ok?\r\n\r\n--------\r\n\r\n> If you add cython: binding=True this works in 0.29.x.\r\n> ...\r\n> I'm a little worried that Cython 3.0's new binop code may combine badly with binding=False\r\n\r\n@da-woods, I'm just interested in something that would work simultaneously for both Cython 3 and Cython < 3. And also a clear warning if `__radd__` is not being taken into effect. It took me some time to dig down and debug that Cython was mishandling even explicit call to `MyStr.__radd__` in my original code.\r\n\r\nKirill",
            "created_at": "2022-04-20T14:39:24Z",
            "html_url": "https://github.com/cython/cython/issues/4750#issuecomment-1104012484",
            "id": 1104012484,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4750",
            "node_id": "IC_kwDOABDGAc5BzeTE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1104012484/reactions"
            },
            "updated_at": "2022-04-20T14:39:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1104012484",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1794248?v=4",
                "events_url": "https://api.github.com/users/navytux/events{/privacy}",
                "followers_url": "https://api.github.com/users/navytux/followers",
                "following_url": "https://api.github.com/users/navytux/following{/other_user}",
                "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/navytux",
                "id": 1794248,
                "login": "navytux",
                "node_id": "MDQ6VXNlcjE3OTQyNDg=",
                "organizations_url": "https://api.github.com/users/navytux/orgs",
                "received_events_url": "https://api.github.com/users/navytux/received_events",
                "repos_url": "https://api.github.com/users/navytux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/navytux"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> is called with `b=MyStr` and `a=something else`\r\n\r\nThat's what I meant. \"something else\" is actually already a `str` here, so you have to convert `b` from `MyStr` to `str` (or `unicode`), not `a`. That's where the infinite recursion came from.",
            "created_at": "2022-04-20T14:53:00Z",
            "html_url": "https://github.com/cython/cython/issues/4750#issuecomment-1104027654",
            "id": 1104027654,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4750",
            "node_id": "IC_kwDOABDGAc5BziAG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1104027654/reactions"
            },
            "updated_at": "2022-04-20T14:53:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1104027654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The design of my `__radd__` is, like I tried to explain above, to support addition of `MyStr` to non-unicode objects, for example:\r\n\r\n```diff\r\n--- a/radd.pyx.kirr2\r\n+++ b/radd.pyx\r\n@@ -33,3 +33,10 @@ b = u'b'\r\n \r\n print('a+b:', repr(a + b))\r\n print('b+a:', repr(b + a))\r\n+\r\n+print()\r\n+class MyWorld:\r\n+    def __str__(self):\r\n+        return u\"мир\"\r\n+\r\n+print('MyWorld()+a:', repr(MyWorld()+a))\r\n```\r\n\r\ngives\r\n\r\n```console\r\n$ cythonize -i radd.pyx && python -c 'import radd'\r\nCompiling /home/kirr/src/tools/py/cython/t/radd.pyx because it changed.\r\n...\r\n# output as before\r\n\r\nAdd <class 'radd.MyWorld'> <class 'radd.MyStr'>    <-- NOTE\r\nRAdd <class 'radd.MyStr'> <class 'radd.MyWorld'>  <-- NOTE\r\nMyWorld()+a: u('мирa')                   <-- NOTE\r\n```\r\n\r\nIf I remove that `unicode` cast on `a` as follows:\r\n\r\n```diff\r\n--- a/radd.pyx.kirr3\r\n+++ b/radd.pyx\r\n@@ -23,7 +23,7 @@ cdef class MyStr(unicode):\r\n     def ____radd__(b, a):\r\n         # a.__add__(b) returned NotImplementedError, e.g. for unicode.__add__(MyStr)\r\n         print('RAdd', type(b), type(a))\r\n-        return MyStr(unicode(a).__add__(b))\r\n+        return MyStr(a.__add__(b))\r\n```\r\n\r\nMyWorld + MyStr starts crashing:\r\n\r\n```console\r\n$ cythonize -i radd.pyx && python -c 'import radd'\r\nCompiling /home/kirr/src/tools/py/cython/t/radd.pyx because it changed.\r\n...\r\n\r\nAdd <class 'radd.MyWorld'> <class 'radd.MyStr'>\r\nRAdd <class 'radd.MyStr'> <class 'radd.MyWorld'>\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"radd.pyx\", line 42, in init radd\r\n    print('MyWorld()+a:', repr(MyWorld()+a))\r\n  File \"radd.pyx\", line 15, in radd.MyStr.__add__\r\n    return b.____radd__(a)\r\n  File \"radd.pyx\", line 26, in radd.MyStr.____radd__\r\n    return MyStr(a.__add__(b))\r\nAttributeError: 'MyWorld' object has no attribute '__add__'\r\n```\r\n\r\n> That's where the infinite recursion came from.\r\n\r\nI thought I showed in https://github.com/cython/cython/issues/4750#issuecomment-1104012484 the output of run with `__radd__` problem worked-around via `____radd__` - there for X+MyStr both `MyStr.__add__` and `MyStr.____radd__` are called without RecursionError.\r\n\r\nI, once again, might be missing something, but for me the only problem here is that Cython mishandles explicit invocation of `MyStr.__radd__` in the original example.\r\n\r\nKirill",
            "created_at": "2022-04-20T15:06:11Z",
            "html_url": "https://github.com/cython/cython/issues/4750#issuecomment-1104042408",
            "id": 1104042408,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4750",
            "node_id": "IC_kwDOABDGAc5Bzlmo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1104042408/reactions"
            },
            "updated_at": "2022-04-20T15:06:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1104042408",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1794248?v=4",
                "events_url": "https://api.github.com/users/navytux/events{/privacy}",
                "followers_url": "https://api.github.com/users/navytux/followers",
                "following_url": "https://api.github.com/users/navytux/following{/other_user}",
                "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/navytux",
                "id": 1794248,
                "login": "navytux",
                "node_id": "MDQ6VXNlcjE3OTQyNDg=",
                "organizations_url": "https://api.github.com/users/navytux/orgs",
                "received_events_url": "https://api.github.com/users/navytux/received_events",
                "repos_url": "https://api.github.com/users/navytux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/navytux"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "( both https://github.com/cython/cython/issues/4750#issuecomment-1104012484 and https://github.com/cython/cython/issues/4750#issuecomment-1104042408 were trials with Cython `0.29.28-21-g60ca7eb74` )",
            "created_at": "2022-04-20T15:12:47Z",
            "html_url": "https://github.com/cython/cython/issues/4750#issuecomment-1104049768",
            "id": 1104049768,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4750",
            "node_id": "IC_kwDOABDGAc5BznZo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1104049768/reactions"
            },
            "updated_at": "2022-04-20T15:12:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1104049768",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1794248?v=4",
                "events_url": "https://api.github.com/users/navytux/events{/privacy}",
                "followers_url": "https://api.github.com/users/navytux/followers",
                "following_url": "https://api.github.com/users/navytux/following{/other_user}",
                "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/navytux",
                "id": 1794248,
                "login": "navytux",
                "node_id": "MDQ6VXNlcjE3OTQyNDg=",
                "organizations_url": "https://api.github.com/users/navytux/orgs",
                "received_events_url": "https://api.github.com/users/navytux/received_events",
                "repos_url": "https://api.github.com/users/navytux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/navytux"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> I, once again, might be missing something, but for me the only problem here is that Cython mishandles explicit invocation of `MyStr.__radd__` in the original example.\r\n\r\nIt's more that CPython installs its own `__radd__` function that hides the Cython function...\r\n\r\n> I'm just interested in something that would work simultaneously for both Cython 3 and Cython < 3\r\n\r\nIt should work with `binding=True` (in both cases).\r\n\r\nAlternatively a function with a different name would work (e.g. `_radd_implementation`) and just have `__radd__` call `_radd_implementation`.\r\n\r\n----------------------------------------\r\n\r\nI think there's a genuine issue here, although it's because of CPython behaviour that is probably hard to change. I'll try to add a warning to the reverse functions in 0.29.x so no-one else will get caught by it.",
            "created_at": "2022-04-20T18:44:58Z",
            "html_url": "https://github.com/cython/cython/issues/4750#issuecomment-1104331784",
            "id": 1104331784,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4750",
            "node_id": "IC_kwDOABDGAc5B0sQI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1104331784/reactions"
            },
            "updated_at": "2022-04-20T18:44:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1104331784",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks, @da-woods.",
            "created_at": "2022-04-20T18:47:39Z",
            "html_url": "https://github.com/cython/cython/issues/4750#issuecomment-1104334490",
            "id": 1104334490,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4750",
            "node_id": "IC_kwDOABDGAc5B0s6a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1104334490/reactions"
            },
            "updated_at": "2022-04-20T18:47:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1104334490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1794248?v=4",
                "events_url": "https://api.github.com/users/navytux/events{/privacy}",
                "followers_url": "https://api.github.com/users/navytux/followers",
                "following_url": "https://api.github.com/users/navytux/following{/other_user}",
                "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/navytux",
                "id": 1794248,
                "login": "navytux",
                "node_id": "MDQ6VXNlcjE3OTQyNDg=",
                "organizations_url": "https://api.github.com/users/navytux/orgs",
                "received_events_url": "https://api.github.com/users/navytux/received_events",
                "repos_url": "https://api.github.com/users/navytux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/navytux"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4750/comments",
    "created_at": "2022-04-19T11:00:42Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-04-20T14:39:25Z",
            "event": "mentioned",
            "id": 6463772446,
            "node_id": "MEE_lADOABDGAc5IA2xbzwAAAAGBRVce",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6463772446"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-04-20T14:39:25Z",
            "event": "subscribed",
            "id": 6463772455,
            "node_id": "SE_lADOABDGAc5IA2xbzwAAAAGBRVcn",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6463772455"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-04-20T14:39:25Z",
            "event": "mentioned",
            "id": 6463772461,
            "node_id": "MEE_lADOABDGAc5IA2xbzwAAAAGBRVct",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6463772461"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-04-20T14:39:25Z",
            "event": "subscribed",
            "id": 6463772469,
            "node_id": "SE_lADOABDGAc5IA2xbzwAAAAGBRVc1",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6463772469"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-04-20T18:47:39Z",
            "event": "mentioned",
            "id": 6465497602,
            "node_id": "MEE_lADOABDGAc5IA2xbzwAAAAGBX6oC",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6465497602"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-04-20T18:47:39Z",
            "event": "subscribed",
            "id": 6465497606,
            "node_id": "SE_lADOABDGAc5IA2xbzwAAAAGBX6oG",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6465497606"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4750/events",
    "html_url": "https://github.com/cython/cython/issues/4750",
    "id": 1208183899,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4750/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5IA2xb",
    "number": 4750,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4750/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4750/timeline",
    "title": "[BUG] 0.29.x: cdef class misses definition of __radd__, even if __radd__ is *explicitly* invoked",
    "updated_at": "2022-04-20T18:47:39Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4750",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1794248?v=4",
        "events_url": "https://api.github.com/users/navytux/events{/privacy}",
        "followers_url": "https://api.github.com/users/navytux/followers",
        "following_url": "https://api.github.com/users/navytux/following{/other_user}",
        "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/navytux",
        "id": 1794248,
        "login": "navytux",
        "node_id": "MDQ6VXNlcjE3OTQyNDg=",
        "organizations_url": "https://api.github.com/users/navytux/orgs",
        "received_events_url": "https://api.github.com/users/navytux/received_events",
        "repos_url": "https://api.github.com/users/navytux/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/navytux"
    }
}