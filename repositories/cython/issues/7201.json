{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe your issue\n\nWhen compiling dict display with duplicated keys, Cython uses `__Pyx_PyDict_NewPresized(8)` but it actually have only 1 entry.\n\n```cython\nd = {\n  \"foo\": 1,\n  \"foo\": 1,\n  \"foo\": 1,\n  \"foo\": 1,\n  \"foo\": 1,\n  \"foo\": 1,\n  \"foo\": 1,\n  \"foo\": 1,\n}\n```\n\n```\n  /* \"dict_test.pyx\":2\n * d = {\n *   \"foo\": 1,             # <<<<<<<<<<<<<<\n *   \"foo\": 1,\n *   \"foo\": 1,\n*/\n  __pyx_t_2 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_foo, __pyx_mstate_global->__pyx_int_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)\n  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_foo, __pyx_mstate_global->__pyx_int_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)\n...\n```\n\nAdditionally, using `_PyDict_NewPresized()` creates regular dict. There is an optimized for unicode-key-only dict but `_PyDict_NewPresized()` can not use it.\n\nSince `_PyDict_NewPresized()` is private API, how about just using `PyDict_New()`?\n\nRelating to #4635, https://github.com/python/cpython/issues/139772#issuecomment-3387963629",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "There's a few separate things here: \n\n* Cython doesn't account for duplicate keys and so asks for too big a dictionary in this case. I think this is a very minor issue (in that it'll be fairly rare and the consequences are small)\n* `_PyDict_NewPresized()` avoids the unicode-key optimisation. That may be an issue we should avoid. \n* It's all internal API anyway. That's a reasonable complaint but it would be nice if there was an efficient way to create a dictionary of known size/key-type, since it's a fairly common thing to do.",
            "created_at": "2025-10-11T06:54:18Z",
            "html_url": "https://github.com/cython/cython/issues/7201#issuecomment-3392997757",
            "id": 3392997757,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7201",
            "node_id": "IC_kwDOABDGAc7KPQl9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3392997757/reactions"
            },
            "updated_at": "2025-10-11T06:54:18Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3392997757",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> * Cython doesn't account for duplicate keys and so asks for too big a dictionary in this case. I think this is a very minor issue (in that it'll be fairly rare and the consequences are small)\n\nFWIW, CPython doesn't use preallocation unless distict keys count is guaranteed.\nThat is one of reason why CPython itself doesn't use `_PyDict_NewPresized()` at all.",
            "created_at": "2025-10-11T11:58:38Z",
            "html_url": "https://github.com/cython/cython/issues/7201#issuecomment-3393239387",
            "id": 3393239387,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7201",
            "node_id": "IC_kwDOABDGAc7KQLlb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3393239387/reactions"
            },
            "updated_at": "2025-10-11T11:58:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3393239387",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
                "events_url": "https://api.github.com/users/methane/events{/privacy}",
                "followers_url": "https://api.github.com/users/methane/followers",
                "following_url": "https://api.github.com/users/methane/following{/other_user}",
                "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/methane",
                "id": 199592,
                "login": "methane",
                "node_id": "MDQ6VXNlcjE5OTU5Mg==",
                "organizations_url": "https://api.github.com/users/methane/orgs",
                "received_events_url": "https://api.github.com/users/methane/received_events",
                "repos_url": "https://api.github.com/users/methane/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/methane",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Cython doesn't account for duplicate keys and so asks for too big a dictionary in this case. I think this is a very minor issue (in that it'll be fairly rare and the consequences are small)\n\nI concur with David here. I think duplicate keys in literals (!) are a) a very rare thing to expect in real code and b) would only lead to slightly larger dicts than needed. I really doubt that this is an issue in practice.\n\nAlso note that we only call `_PyDict_NewPresized()` for dict literals with more than 8 keys, so it's even less likely that a serious overallocation happens.\n\nThat written, if the question is whether CPython can remove this non-API function, then my answer is probably yes. I'd then be happy to use a public (simpler) variant of `_PyDict_FromItems()`, which seems a much better replacement.",
            "created_at": "2025-10-11T13:50:18Z",
            "html_url": "https://github.com/cython/cython/issues/7201#issuecomment-3393347884",
            "id": 3393347884,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7201",
            "node_id": "IC_kwDOABDGAc7KQmEs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3393347884/reactions"
            },
            "updated_at": "2025-10-11T13:50:18Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3393347884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> That written, if the question is whether CPython can remove this non-API function, then my answer is probably yes. I'd then be happy to use a public (simpler) variant of `_PyDict_FromItems()`, which seems a much better replacement.\n\n`_PyDict_FromItems()` is also private API, same to `_PyDict_NewPresized()`.",
            "created_at": "2025-10-12T01:50:43Z",
            "html_url": "https://github.com/cython/cython/issues/7201#issuecomment-3393824341",
            "id": 3393824341,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7201",
            "node_id": "IC_kwDOABDGAc7KSaZV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3393824341/reactions"
            },
            "updated_at": "2025-10-12T01:50:43Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3393824341",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
                "events_url": "https://api.github.com/users/methane/events{/privacy}",
                "followers_url": "https://api.github.com/users/methane/followers",
                "following_url": "https://api.github.com/users/methane/following{/other_user}",
                "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/methane",
                "id": 199592,
                "login": "methane",
                "node_id": "MDQ6VXNlcjE5OTU5Mg==",
                "organizations_url": "https://api.github.com/users/methane/orgs",
                "received_events_url": "https://api.github.com/users/methane/received_events",
                "repos_url": "https://api.github.com/users/methane/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/methane",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/7201/comments",
    "created_at": "2025-10-10T10:32:13Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/7201/events",
    "html_url": "https://github.com/cython/cython/issues/7201",
    "id": 3502292679,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/7201/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc7QwL7H",
    "number": 7201,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/7201/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/7201/timeline",
    "title": "Use of `_PyDict_NewPresized()` is not optimal",
    "type": null,
    "updated_at": "2025-10-12T01:50:43Z",
    "url": "https://api.github.com/repos/cython/cython/issues/7201",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
        "events_url": "https://api.github.com/users/methane/events{/privacy}",
        "followers_url": "https://api.github.com/users/methane/followers",
        "following_url": "https://api.github.com/users/methane/following{/other_user}",
        "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/methane",
        "id": 199592,
        "login": "methane",
        "node_id": "MDQ6VXNlcjE5OTU5Mg==",
        "organizations_url": "https://api.github.com/users/methane/orgs",
        "received_events_url": "https://api.github.com/users/methane/received_events",
        "repos_url": "https://api.github.com/users/methane/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/methane",
        "user_view_type": "public"
    }
}