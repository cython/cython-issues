{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nThe pure python mode of Cython is excellent, and should make it much easier to adopt cython code into Python codebases. However, there are a number of issues with the design choices around using type hints - specifically when using VSCode (and the Pyright type checker). Mypy also has similar issues.\r\n\r\nI think this is something we should care about. For a new user using VSCode, copying any cython example with the current library throws immediate \"unknown attribute\" errors that will definitely put people off. But this has already been somewhat improved in #4327 - so the next release should have a better new user experience. But I propose the API is further changed.\r\n\r\nHowever, the type hints and type stubs currently in use in Cython don't appear to conform to standard type specs, and the type stubs in the existing repo do not type check correctly.\r\n\r\nConsider the example below (ran against `master`)\n\n### Code to reproduce the behaviour:\n\n```python\r\nimport cython\r\nimport numpy as np\r\n\r\n@cython.ccall\r\ndef some_func_double(x: cython.double[:]) -> cython.double[:]:\r\n    y: cython.double[:] = np.zeros(N, dtype=np.float64)\r\n    return x\r\n```\r\n\n\n### Expected behaviour\n\nWith pyright, this produces the below output\r\n\r\n```\r\n<file>:6:39 - error: Expected no type arguments for class \"float\" (reportInvalidTypeArguments)\r\n<file>:6:60 - error: Expected no type arguments for class \"float\" (reportInvalidTypeArguments)  \r\n<file>:7:22 - error: Expected no type arguments for class \"float\" (reportInvalidTypeArguments)\r\n<file>:7:27 - error: Expression of type \"NDArray[floating[_64Bit]]\" is incompatible with declared type \"double\"\r\n    \"ndarray[Any, dtype[floating[_64Bit]]]\" is incompatible with \"float\" (reportAssignmentType)\r\n<file>:7:38 - error: Cannot access attribute \"shape\" for class \"double\"\r\n    Attribute \"shape\" is unknown (reportAttributeAccessIssue)\r\n```\r\n\r\nWith mypy, this code doesn't even type check!\r\n```\r\n<file>:1: error: Skipping analyzing \"cython\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\r\n```\r\n\r\nI can fix this by changing the `import cython` to `import Cython.Shadow as cython`. Then, `mypy` produces a similar set of errors:\r\n\r\n```\r\ntest_cython.py:6: error: \"float\" expects no type arguments, but 1 given  [type-arg]\r\ntest_cython.py:6: error: Invalid type comment or annotation  [valid-type]\r\ntest_cython.py:6: note: did you mean to use ',' instead of ':' ?\r\ntest_cython.py:7: error: \"float\" expects no type arguments, but 1 given  [type-arg]\r\ntest_cython.py:7: error: Invalid type comment or annotation  [valid-type]\r\ntest_cython.py:7: note: did you mean to use ',' instead of ':' ?\r\ntest_cython.py:7: error: Incompatible types in assignment (expression has type \"ndarray[Any, dtype[floating[_64Bit]]]\", variable has type \"float\")  [assignment]\r\ntest_cython.py:7: error: \"float\" has no attribute \"shape\"  [attr-defined]\r\nFound 6 errors in 1 file (checked 1 source file)\r\n```\n\n### OS\n\nLinux\n\n### Python version\n\n3.12\n\n### Cython version\n\n3.0.10, and master (3.1.0a0)\n\n### Additional context\n\nThere are a few issues here:\r\n\r\n1. In `Shadow.pyi`, `cython.double` is set to equal `builtins.double`. This type doesn't take any type variables, producing the error.\r\n2. The use of slices (e.g. `cython.double[:]`, `cython.double[::1]`) is not recognized as a valid type parameter specification. As far as I can see, there is no way to hack this into the type system as the implementation. So even if we took type variables, these would not be valid.\r\n3. The use of the type variable syntax `cython.double[:]` suggests that the type is a subset of `cython.double`. This means that external code which calls these functions with (for example) a numpy array incorrectly fails a type check.\r\n\r\n### Suggestions for solving\r\n\r\nIn the short term, I suggest that in the type stubs we type all cython types as `typing.Any`. This at least makes it clear that the onus is on the caller to check whether it's `cython.double` or `cython.double[:]` or `cython.double[::1]`, etc. \r\n\r\nI made and tested this change. Although `cython.double[:]` is not valid type syntax, it passes for now in Pyright (as I guess it doesn't check the details of a `typing.Any` type.\r\n\r\nThe suggestion for users would then be to write a `.pyi` file alongside your `.py` file to define the Python API.\r\n\r\nI attempted to write a minimal set of stubs that would at least pass type checking.\r\n\r\nIn the longer term, I would suggest that cython introduces a more type-hint standard way of specifying these types. For example, `MemoryView[*T]`, `CContig[T]` etc. that still translates correctly into the appropriate cython type, but would be much easier for type checkers to check against. So the code becomes something like\r\n\r\n```python\r\nimport cython\r\nimport numpy as np\r\n\r\n@cython.ccall\r\ndef some_func(x: MemoryView[cython.double]) -> MemoryView[cython.double]:\r\n    ...\r\n\r\n@cython.ccall\r\ndef some_2d_func(x: MemoryView[cython.double, CContig[cython.double]]) -> MemoryView[cython.double, CContig[cython.double]]:\r\n    ...\r\n```\r\n\r\nThis should provide a much nicer API.\r\n\r\nAlongside this, there are some noted minor bugs in `master`, including\r\n- `@cython.nogil` does not type check\r\n- `cython` does not have a `py.typed` marker for `mypy` to use (but `pyright` figures it out).\r\n\r\nIf you like this idea I'd be happy to look at writing a PR. I'd need a bit of help on exactly what should typecheck to memoryview.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I'm not convinced by your proposed replacement memoryview syntax. It seems less readable than what we have. It also implies that you can have a memoryview like `MemoryView[cython.double, CContig[cython.int]]`\r\n\r\nMostly this is just confirming my pre-existing prejudices against the whole Python typing ecosystem: it's verbose, fiddly, and it infects everything.\r\n\r\nPersonally, I'd be happier with your preferred short-term solution (type everything as `Any`) as the permanent long-term solution. But I suspect I should just leave this to someone who likes and understands typing...\r\n\r\n--------------------------------------------\r\n\r\n> Alongside this, there are some noted minor bugs in master, [...]\r\n\r\nDefinitely do a PR for these if you have time.",
            "created_at": "2024-06-26T20:09:27Z",
            "html_url": "https://github.com/cython/cython/issues/6272#issuecomment-2192539985",
            "id": 2192539985,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6272",
            "node_id": "IC_kwDOABDGAc6Cr4FR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2192539985/reactions"
            },
            "updated_at": "2024-06-26T20:09:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2192539985",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Haha - the typing system seems to be such a love it or hate it thing! For me, it's totally brought me back to Python - but mainly because of the toolchains it enables (particularly intellisense and reducing the need for testing). I think this should be the value of pure python mode - you can still use code formatting / checking tools and the full Python type checking ecosystem that your project needs, but just add a few decorators and get going.\r\n\r\nI do think right now pure python mode is in a bit of an odd place - it looks like Python, but is interpreted slightly differently by the Cython compiler and not totally understood by Python side type checkers. And whilst the `typing.Any` hack works for now (essentially short-circuiting the type checkers), there are some functions that seem impossible to type.\r\n\r\nFor another example I came across, `SomeStruct = cython.struct(x=x, y=y)` returns a dynamic class that is also a return type. As far as I can tell, no type checker supports using a variable as a type annotation, so the suggested use as both a return type and constructor will always throw type errors. This could be solved by allowing an alternative syntax\r\n\r\n```python\r\n@cython.struct\r\nclass SomeStruct:\r\n    x: cython.int\r\n    y: cython.int\r\n```\r\n\r\nSimilarly, type checkers have no way of knowing that `__cinit__` will get called on extension types, etc.  \r\n\r\nYou're totally right that the syntax I proposed doesn't really fit, and it is certainly verbose. I'm also not a type expert! I'll play about with it a bit and see what I can figure out. Maybe there will be some way to get the current syntax to type correctly using metaclasses or some other python magic that is unfamiliar to me.",
            "created_at": "2024-06-27T07:06:42Z",
            "html_url": "https://github.com/cython/cython/issues/6272#issuecomment-2193953041",
            "id": 2193953041,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6272",
            "node_id": "IC_kwDOABDGAc6CxRER",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2193953041/reactions"
            },
            "updated_at": "2024-06-27T07:06:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2193953041",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11441393?v=4",
                "events_url": "https://api.github.com/users/mwaddoups/events{/privacy}",
                "followers_url": "https://api.github.com/users/mwaddoups/followers",
                "following_url": "https://api.github.com/users/mwaddoups/following{/other_user}",
                "gists_url": "https://api.github.com/users/mwaddoups/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mwaddoups",
                "id": 11441393,
                "login": "mwaddoups",
                "node_id": "MDQ6VXNlcjExNDQxMzkz",
                "organizations_url": "https://api.github.com/users/mwaddoups/orgs",
                "received_events_url": "https://api.github.com/users/mwaddoups/received_events",
                "repos_url": "https://api.github.com/users/mwaddoups/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mwaddoups/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mwaddoups/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mwaddoups"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I do think right now pure python mode is in a bit of an odd place - it looks like Python, but is interpreted slightly differently by the Cython compiler and not totally understood by Python side type checkers. And whilst the `typing.Any` hack works for now (essentially short-circuiting the type checkers), there are some functions that seem impossible to type.\r\n\r\nYes - it is a bit of a mix. Some of it predates annotation typing completely, things like memoryviews are adapted from our existing Cython type syntax. And some of it makes sense to run uncompiled where as some of it is sufficiently tied to C types that it'll never make sense to run without Cython.\r\n\r\n> [...] struct [...]\r\n\r\nThe class-version of struct probably would be an improvement. Although implementing more options makes things harder to test.\r\n\r\n> Similarly, type checkers have no way of knowing that `__cinit__` will get called on extension types, etc.\r\n\r\nWhy is this an issue?\r\n\r\n-----\r\n\r\nGoing back a bit\r\n\r\n```\r\n<file>:7:27 - error: Expression of type \"NDArray[floating[_64Bit]]\" is incompatible with declared type \"double\"\r\n    \"ndarray[Any, dtype[floating[_64Bit]]]\" is incompatible with \"float\" (reportAssignmentType)\r\n```\r\n\r\nThis seems like a hard problem to solve without just using `Any`.",
            "created_at": "2024-06-27T21:30:35Z",
            "html_url": "https://github.com/cython/cython/issues/6272#issuecomment-2195695889",
            "id": 2195695889,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6272",
            "node_id": "IC_kwDOABDGAc6C36kR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2195695889/reactions"
            },
            "updated_at": "2024-06-27T21:30:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2195695889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6272/comments",
    "created_at": "2024-06-26T09:16:52Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-06-26T20:09:36Z",
            "event": "labeled",
            "id": 13303667175,
            "label": {
                "color": "444444",
                "name": "Pure Python Mode"
            },
            "node_id": "LE_lADOABDGAc6NjLnhzwAAAAMY9dnn",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13303667175"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6272/events",
    "html_url": "https://github.com/cython/cython/issues/6272",
    "id": 2374810081,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558499,
            "name": "Pure Python Mode",
            "node_id": "MDU6TGFiZWw0MjU1NTg0OTk=",
            "url": "https://api.github.com/repos/cython/cython/labels/Pure%20Python%20Mode"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6272/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6NjLnh",
    "number": 6272,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6272/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6272/timeline",
    "title": "[BUG] Memoryview pure python type hints don't conform to standard type spec",
    "updated_at": "2024-06-27T21:30:36Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6272",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/11441393?v=4",
        "events_url": "https://api.github.com/users/mwaddoups/events{/privacy}",
        "followers_url": "https://api.github.com/users/mwaddoups/followers",
        "following_url": "https://api.github.com/users/mwaddoups/following{/other_user}",
        "gists_url": "https://api.github.com/users/mwaddoups/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mwaddoups",
        "id": 11441393,
        "login": "mwaddoups",
        "node_id": "MDQ6VXNlcjExNDQxMzkz",
        "organizations_url": "https://api.github.com/users/mwaddoups/orgs",
        "received_events_url": "https://api.github.com/users/mwaddoups/received_events",
        "repos_url": "https://api.github.com/users/mwaddoups/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mwaddoups/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mwaddoups/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mwaddoups"
    }
}