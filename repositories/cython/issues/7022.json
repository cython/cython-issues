{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\n\nEarly returns in Cython functions result in leaks of frame objects when built with `CYTHON_TRACE=1` and run with a trace function installed using `sys.settrace()` (I didn't test `sys.monitoring`).\n\n### Code to reproduce the behaviour:\n\nBuilding this Cython module called `cymodule.pyx`\n```cython\n# cython: linetrace=True\n\ndef cython_func(no_op):\n    if no_op:\n        return\n    print(\"\", end=\"\")\n```\n\nUsing this `setup.py`\n```py\nfrom setuptools import setup, Extension\nfrom Cython.Build import cythonize\n\nsetup(\n    name=\"cython_demo\",\n    version=\"0.0.1\",\n    ext_modules=cythonize(\n        [\n            Extension(\n                \"cymodule\",\n                sources=[\"cymodule.pyx\"],\n                define_macros=[(\"CYTHON_TRACE\", 1)],\n            )\n        ],\n    ),\n    zip_safe=False,\n)\n```\n\nAnd this `pyproject.toml`\n```toml\n[build-system]\nrequires = [\"cython\", \"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n```\n\nThen running this Python script `test.py`\n```py\nimport gc\nimport types\n\nfrom cymodule import cython_func\n\nprint(len([x for x in gc.get_objects() if isinstance(x, types.FrameType)]))\nfor i in range(1000):\n    cython_func(True)\nprint(len([x for x in gc.get_objects() if isinstance(x, types.FrameType)]))\n```\n\nwith `python3.11 -m coverage run test.py` shows that there are 0 frames being tracked by the GC before calling the Cython function, and 1000 frames being tracked by the GC after calling the function.\n\nIf you change `cython_func(True)` to `cython_func(False)`, it returns 0 in both cases, as expected - the leak only happens for the early return.\n\n### Expected behaviour\n\nFrame objects shouldn't be leaked in either case ðŸ˜„ \n\n### OS\n\nLinux\n\n### Python version\n\nTested with 3.9 and 3.11\n\n### Cython version\n\nTested with 3.1.0a1 through the latest master\n\n### Additional context\n\nThe generated code has this for the early return path:\n```c\n    __Pyx_TraceLine(5,3,0,__PYX_ERR(0, 5, __pyx_L1_error))\n    __Pyx_XDECREF(__pyx_r);\n    __pyx_r = Py_None; __Pyx_INCREF(Py_None);\n    goto __pyx_L0;\n```\nvs this for case without the early return:\n```c\n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\n  __Pyx_TraceReturnValue(__pyx_r, 0, 0, __PYX_ERR(0, 3, __pyx_L1_error));\n  goto __pyx_L0;\n```\n\nThe case where it's working calls `__Pyx_TraceReturnValue` before the `goto`, the case where it's leaking does not.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/7022/comments",
    "created_at": "2025-07-18T00:54:02Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/7022/events",
    "html_url": "https://github.com/cython/cython/issues/7022",
    "id": 3241447740,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/7022/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc7BNJE8",
    "number": 7022,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/7022/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/7022/timeline",
    "title": "[BUG] `CYTHON_TRACE=1` leaks frames with `sys.settrace`",
    "type": null,
    "updated_at": "2025-07-18T00:54:02Z",
    "url": "https://api.github.com/repos/cython/cython/issues/7022",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29423?v=4",
        "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
        "followers_url": "https://api.github.com/users/godlygeek/followers",
        "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
        "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/godlygeek",
        "id": 29423,
        "login": "godlygeek",
        "node_id": "MDQ6VXNlcjI5NDIz",
        "organizations_url": "https://api.github.com/users/godlygeek/orgs",
        "received_events_url": "https://api.github.com/users/godlygeek/received_events",
        "repos_url": "https://api.github.com/users/godlygeek/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/godlygeek",
        "user_view_type": "public"
    }
}