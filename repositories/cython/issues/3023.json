{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "compiling the following code (within numpy, but I do not think that matters):\r\n```python\r\nimport array\r\n\r\ndef test_buffer():\r\n    cdef uint32_t[:] randoms\r\n    randoms = array.array(\"I\", [10])\r\n    memoryview(randoms)\r\n```\r\nwill leak a reference to `None` on every call. The culprit is the `memoryview(randoms)` line, although it split into two parts on the C-level (so I do not think the call to the python memoryview itself is actually involved).\r\n\r\nI can \"fix\" this by applying this patch:\r\n```diff\r\ndiff --git a/Cython/Utility/MemoryView.pyx b/Cython/Utility/MemoryView.pyx\r\nindex 9cb897761..56d85a008 100644\r\n--- a/Cython/Utility/MemoryView.pyx\r\n+++ b/Cython/Utility/MemoryView.pyx\r\n@@ -1018,7 +1018,7 @@ cdef memoryview_fromslice({{memviewslice_name}} memviewslice,\r\n     result.view.buf = <void *> memviewslice.data\r\n     result.view.ndim = ndim\r\n     (<__pyx_buffer *> &result.view).obj = Py_None\r\n-    Py_INCREF(Py_None)\r\n+    #Py_INCREF(Py_None)\r\n \r\n     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:\r\n         result.flags = PyBUF_RECORDS\r\n```\r\nbut it seems unlikely on first sight that it is correct (I have difficulties following the code though). Obviously that reduces the refcount of None by one so patches over the issue since it gets called...\r\n\r\nA reference count issue on None is harmless of course, but I am debugging numpy with `pytest-leaks` so its nice to keep even the harmless stuff clean.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "OK, tracking things down a bit: The memoryviewslice is created with `obj=None` (I guess a fast path thing). As such inside the `__dealloc__` (all the `memoryview` superclass), `Py_ReleaseBuffer` is skipped.\r\n\r\nMy best guess is that the cleanest fix would be to call `Py_ XDECREF(obj)` (or maybe no X) when skipping the Py_BufferRelease.\r\n\r\nEDIT: Hmm, no, that doesn't seem right, `obj` can be None otherwise too it seems to me. Maybe some special handling with a comment is actually right. But I am a bit unsure about the whole `obj=None` dynamics.",
            "created_at": "2019-06-30T01:57:09Z",
            "html_url": "https://github.com/cython/cython/issues/3023#issuecomment-507000244",
            "id": 507000244,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3023",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzAwMDI0NA==",
            "updated_at": "2019-06-30T02:08:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/507000244",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/61977?v=4",
                "events_url": "https://api.github.com/users/seberg/events{/privacy}",
                "followers_url": "https://api.github.com/users/seberg/followers",
                "following_url": "https://api.github.com/users/seberg/following{/other_user}",
                "gists_url": "https://api.github.com/users/seberg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seberg",
                "id": 61977,
                "login": "seberg",
                "node_id": "MDQ6VXNlcjYxOTc3",
                "organizations_url": "https://api.github.com/users/seberg/orgs",
                "received_events_url": "https://api.github.com/users/seberg/received_events",
                "repos_url": "https://api.github.com/users/seberg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seberg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seberg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seberg"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3023/comments",
    "created_at": "2019-06-28T23:10:53Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3023/events",
    "html_url": "https://github.com/cython/cython/issues/3023",
    "id": 462235829,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3023/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0NjIyMzU4Mjk=",
    "number": 3023,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "`None` being leaked in slicing (or memoryview creation)",
    "updated_at": "2019-06-30T02:08:28Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3023",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/61977?v=4",
        "events_url": "https://api.github.com/users/seberg/events{/privacy}",
        "followers_url": "https://api.github.com/users/seberg/followers",
        "following_url": "https://api.github.com/users/seberg/following{/other_user}",
        "gists_url": "https://api.github.com/users/seberg/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/seberg",
        "id": 61977,
        "login": "seberg",
        "node_id": "MDQ6VXNlcjYxOTc3",
        "organizations_url": "https://api.github.com/users/seberg/orgs",
        "received_events_url": "https://api.github.com/users/seberg/received_events",
        "repos_url": "https://api.github.com/users/seberg/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/seberg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/seberg/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/seberg"
    }
}