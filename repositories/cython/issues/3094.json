{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Consider the following class\r\n```\r\nclass A(object):\r\n  @my_decorator\r\n  def __new__(cls, *args, **kwargs):\r\n    return super(A, cls).__new__(cls, *args, **kwargs)\r\n```\r\n\r\nThis class generates the following error when instantiated \r\n\r\n`TypeError: unbound method cython_function_or_method object must be called with A instance as first argument (got type instance instead)`\r\n\r\n`__new__` is supposed to be [special-cased](https://docs.python.org/2/reference/datamodel.html#object.__new__) to not require a `@staticmethod` decorator.\r\n\r\nAdditionally, attempting to work around the issue by adding `@staticmethod` also does not work and generates the same error.\r\n\r\n```\r\nclass A(object):\r\n  @staticmethod\r\n  @my_decorator\r\n  def __new__(cls, *args, **kwargs):\r\n    return super(A, cls).__new__(cls, *args, **kwargs)\r\n```\r\n\r\nThis appears to occur because when Cython compiles to C, it inverts the order of the decorator application, applying `@staticmethod` first. Eg, it generates C code like\r\n\r\n```\r\n  /* \"module/A.py\"\r\n *     @staticmethod\r\n *     @my_decorator             # <<<<<<<<<<<<<<\r\n *     def __new__(cls, *args, **kwargs): \r\n */\r\n  __Pyx_GetModuleGlobalName(func_my_decorator, __pyx_n_s_cache_2); if (unlikely(!func_my_decorator)) __PYX_ERR(0, 72, __pyx_L1_error)\r\n  __Pyx_GOTREF(func_my_decorator);\r\n\r\n  /* \"module/A.py\"\r\n *     @staticmethod\r\n *     @my_decorator\r\n *     def __new__(cls, *args, **kwargs):             # <<<<<<<<<<<<<<\r\n */\r\n  func_new = __Pyx_CyFunction_NewEx(&__pyx_mdef_9module_15A_1__new__, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_A___new, NULL, __pyx_n_s_module, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!func_new)) __PYX_ERR(0, 75, __pyx_L1_error)\r\n  __Pyx_GOTREF(func_new);\r\n\r\n  /* \"module/A.py\":71\r\n *     @staticmethod             # <<<<<<<<<<<<<<\r\n *     @cache\r\n *     def __new__(cls, *args, **kwargs): \r\n */\r\n  func_staticmethod_new = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, func_new); if (unlikely(!func_staticmethod_new)) __PYX_ERR(0, 71, __pyx_L1_error)\r\n  __Pyx_GOTREF(func_staticmethod_new);\r\n```\r\n\r\nOne workaround is to declare the class using the semantically identical\r\n```\r\nclass A(object):\r\n  @my_decorator\r\n  def __new__(cls, *args, **kwargs):\r\n    return super(A, cls).__new__(cls, *args, **kwargs)\r\n  __new__ = staticmethod(__new__)\r\n```\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I believe that #3102 fixes this. But I can't tell for sure since I don't know your complete use case.",
            "created_at": "2019-08-27T17:49:23Z",
            "html_url": "https://github.com/cython/cython/issues/3094#issuecomment-525411067",
            "id": 525411067,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3094",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTQxMTA2Nw==",
            "updated_at": "2019-08-27T17:49:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/525411067",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "node_id": "MDQ6VXNlcjM2MjU3ODU=",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "#3102 is merged, please retest this with the master branch.",
            "created_at": "2019-08-28T18:51:38Z",
            "html_url": "https://github.com/cython/cython/issues/3094#issuecomment-525875427",
            "id": 525875427,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3094",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTg3NTQyNw==",
            "updated_at": "2019-08-28T18:51:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/525875427",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3094/comments",
    "created_at": "2019-08-23T13:56:45Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3094/events",
    "html_url": "https://github.com/cython/cython/issues/3094",
    "id": 484544600,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3094/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0ODQ1NDQ2MDA=",
    "number": 3094,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Cython mishandles decorated __new__",
    "updated_at": "2019-08-28T18:51:39Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3094",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1479535?v=4",
        "events_url": "https://api.github.com/users/danielcranford/events{/privacy}",
        "followers_url": "https://api.github.com/users/danielcranford/followers",
        "following_url": "https://api.github.com/users/danielcranford/following{/other_user}",
        "gists_url": "https://api.github.com/users/danielcranford/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/danielcranford",
        "id": 1479535,
        "login": "danielcranford",
        "node_id": "MDQ6VXNlcjE0Nzk1MzU=",
        "organizations_url": "https://api.github.com/users/danielcranford/orgs",
        "received_events_url": "https://api.github.com/users/danielcranford/received_events",
        "repos_url": "https://api.github.com/users/danielcranford/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/danielcranford/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/danielcranford/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/danielcranford"
    }
}