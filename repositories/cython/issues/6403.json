{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\r\n  File \"<frozen runpy>\", line 88, in _run_code\r\n  File \"D:\\Python312\\Scripts\\cython.exe\\__main__.py\", line 7, in <module>\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\Main.py\", line 754, in setuptools_main\r\n    return main(command_line = 1)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\Main.py\", line 782, in main\r\n    result = compile(sources, options)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\Main.py\", line 673, in compile\r\n    return compile_multiple(source, options)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\Main.py\", line 647, in compile_multiple\r\n    result = run_pipeline(source, options,\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\Main.py\", line 539, in run_pipeline\r\n    err, enddata = Pipeline.run_pipeline(pipeline, source)\r\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\Pipeline.py\", line 398, in run_pipeline\r\n    data = run(phase, data)\r\n           ^^^^^^^^^^^^^^^^\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\Pipeline.py\", line 375, in run\r\n    return phase(data)\r\n           ^^^^^^^^^^^\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\Pipeline.py\", line 52, in generate_pyx_code_stage\r\n    module_node.process_implementation(options, result)\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\ModuleNode.py\", line 222, in process_implementation\r\n    self.generate_c_code(env, options, result)\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\ModuleNode.py\", line 539, in generate_c_code\r\n    self.generate_declarations_for_modules(env, modules, globalstate)\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\ModuleNode.py\", line 754, in generate_declarations_for_modules\r\n    self.generate_type_definitions(\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\ModuleNode.py\", line 734, in generate_type_definitions\r\n    self.generate_objstruct_definition(entry.type, code)\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\ModuleNode.py\", line 1320, in generate_objstruct_definition\r\n    decl = attr_type.declaration_code(attr.cname)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\Python312\\Lib\\site-packages\\Cython\\Compiler\\PyrexTypes.py\", line 1931, in declaration_code\r\n    raise Exception(\"This may never happen, please report a bug\")\r\nException: This may never happen, please report a bug\r\n```\r\n\r\n### Code to reproduce the behaviour:\r\n\r\n```\r\nfrom cpython.unicode cimport Py_UCS1, Py_UCS2, PyUnicode_1BYTE_DATA, PyUnicode_2BYTE_DATA, PyUnicode_4BYTE_DATA, PyUnicode_KIND, PyUnicode_Substring\r\nfrom libc.string cimport memset\r\ncdef int k\r\n\r\ncdef fused pyucs:\r\n    Py_UCS1\r\n    Py_UCS2\r\n    Py_UCS4\r\n\r\nctypedef unsigned int uint\r\n\r\nasync def cut_line(unicode text) ->list[tuple[str, int, int, int]]:\r\n    cdef :\r\n        uint k=PyUnicode_KIND (text)\r\n        pyucs t\r\n    if k==2:\r\n        return _cut_line(text, PyUnicode_2BYTE_DATA(text), len(text))\r\n    elif k==1:\r\n        return _cut_line(text, PyUnicode_1BYTE_DATA(text), len(text))\r\n    else:\r\n        return _cut_line(text, PyUnicode_4BYTE_DATA(text), len(text))\r\n\r\ndef cut_douhao_and_strip(unicode text) ->list[str]:\r\n    cdef:\r\n        uint k = PyUnicode_KIND(text)\r\n        pyucs t\r\n    if k == 2:\r\n        return _cut_douhao_and_strip(text, PyUnicode_2BYTE_DATA(text), len(text))\r\n    elif k == 1:\r\n        return _cut_douhao_and_strip(text, PyUnicode_1BYTE_DATA(text), len(text))\r\n    else:\r\n        return _cut_douhao_and_strip(text, PyUnicode_4BYTE_DATA(text), len(text))\r\n\r\ncdef :\r\n    uint normal=0, kuohao=1, string=2, string3=3\r\n    Py_UCS4 left_kuohao0=c'(', left_kuohao1=c'[', left_kuohao2=c'{', right_kuohao0=c')', right_kuohao1=c']', right_kuohao2=c'}', dyh=c\"'\", \\\r\n        syh=c'\"', xhx=c'\\\\', hh=c'\\n', kongge=c' ', tab=c'\\t', kongbai0=c'\\r', fenhao=c';', douhao=c','\r\n    Py_UCS4[255] sp_chars\r\n#print(PyUnicode_Substring('aaa',0,0), '---')\r\ncdef  init_sp_chars():\r\n    memset(sp_chars, 0, sizeof(Py_UCS4)*255)\r\n    sp_chars[left_kuohao0]=1\r\n    sp_chars[left_kuohao1]=1\r\n    sp_chars[left_kuohao2]=1\r\n    sp_chars[right_kuohao0]=2\r\n    sp_chars[right_kuohao1]=2\r\n    sp_chars[right_kuohao2]=2\r\n    sp_chars[dyh]=3\r\n    sp_chars[syh]=3\r\n    sp_chars[xhx]=xhx\r\n    sp_chars[xhx]=douhao\r\n    sp_chars[hh]=5\r\n    sp_chars[kongge]=4\r\n    sp_chars[kongbai0]=4\r\n    sp_chars[tab]=tab\r\n    sp_chars[fenhao]=fenhao\r\ninit_sp_chars()\r\nassert left_kuohao2>left_kuohao1>left_kuohao0\r\nassert right_kuohao0<right_kuohao1<right_kuohao2\r\n\r\ncdef _cut_douhao_and_strip(unicode text, pyucs* t, uint l, ):\r\n    cdef :\r\n        uint _=0, i=0, start=0, end\r\n        list ll=[]\r\n    while (i < l):\r\n        #跳过一段连续空白\r\n        i=find_kongbai(t,i,l)\r\n        start=i\r\n        # i是第一个空白字符的位置\r\n        while(i<l):\r\n            c = t[i]\r\n            if c != left_kuohao0 and c != left_kuohao1 and c != left_kuohao2:\r\n                pass\r\n            else:\r\n                i = find_kuohao(t, i + 1, l, &_)\r\n                continue\r\n            #\r\n            if c != dyh and c != syh:\r\n                pass\r\n            else:\r\n                i = find_yh_str(t, i + 1, l, c, &_)\r\n                continue\r\n            #\r\n            if c!=douhao:\r\n                pass\r\n            else: #遇见逗号，提取两个逗号中间的文本，i是逗号的位置\r\n                end=trace_find_no_kongbai(t, i)\r\n                s=PyUnicode_Substring(text, start, end)\r\n                ll.append(s)\r\n                start=i+1\r\n                break\r\n            i+=1\r\n    #把最后一个逗号到最后一个字符之间的文本给提取\r\n    s = PyUnicode_Substring(text, start, l)\r\n    ll.append(s)\r\n    return ll\r\n\r\ncdef uint trace_find_no_kongbai(pyucs* t, uint i,):\r\n    cdef:\r\n        pyucs c\r\n    while(i>0):\r\n        c=t[i]\r\n        if c == kongge or c == tab or c == kongbai0:\r\n            i-=1\r\n        else:\r\n            return i\r\n    c = t[0]\r\n    if c == kongge or c == tab or c == kongbai0:\r\n        raise AssertionError\r\n    else:\r\n        return 0\r\n\r\ncdef uint find_kongbai(pyucs* t, uint i,  uint l, ):\r\n    cdef pyucs c\r\n    while(i<l):\r\n        c=t[i]\r\n        if c==kongge or c==tab:\r\n            i+=1\r\n            continue\r\n        else:\r\n            return i\r\n\r\ncdef list _cut_line(unicode text, pyucs* t, uint l):\r\n    cdef:\r\n        uint i=0, start=0, ii, suojin=0,  line_text=1\r\n        str suojin_text=''\r\n        pyucs c\r\n        list ll=[], lll=[]\r\n        object lts, lte\r\n    lts=lte=1\r\n    while(i<l):\r\n        c=t[i]\r\n        #\r\n        if c!=left_kuohao0 and c!=left_kuohao1 and c!=left_kuohao2:\r\n            pass\r\n        else:\r\n            i = find_kuohao(t, i + 1, l, &line_text)\r\n            continue\r\n        #\r\n        if c!=dyh and c!=syh:\r\n            pass\r\n        else:\r\n            i=find_yh_str(t, i+1, l, c, &line_text)\r\n            continue\r\n        #\r\n        if c!=hh:\r\n            if c!=fenhao:\r\n                pass\r\n            else: #c is ;\r\n                lte=line_text\r\n                ll.append((PyUnicode_Substring(text, start, i+1), suojin, lts, lte))\r\n                start=i+1\r\n        else: # c is \\n\r\n            line_text += 1\r\n            if want_hh(t, i, l):\r\n                lte = line_text\r\n                ll.append((PyUnicode_Substring(text, start, i+1), suojin, lts, lte))\r\n                lts=lte\r\n                i+=1\r\n                start = i\r\n                suojin=find_suojin(t, i, l)\r\n                #suojin_text=PyUnicode_Substring(text, i, i+suojin)\r\n                i += suojin\r\n                continue\r\n            else:\r\n                pass\r\n        i+=1\r\n    return ll\r\n\r\ncdef bint want_hh(pyucs* t, uint i, uint l):\r\n    cdef uint c, ii\r\n    while(0<i):\r\n        c=t[i]\r\n        if c==kongge or c==tab or c==kongbai0:\r\n            i-=1\r\n        elif c==xhx:\r\n            return False\r\n        else:\r\n            return True\r\n    #\r\n    c = t[0]\r\n    if c == xhx:\r\n        return False\r\n    else:\r\n        return True\r\n\r\ncdef uint find_suojin(pyucs* t, uint i, uint l):\r\n    cdef :\r\n        pyucs c, start_char\r\n        uint count=0\r\n    c=t[i]\r\n    if c==kongge or c==tab:\r\n        start_char=c\r\n        i-=1\r\n        while (i < l):\r\n            if t[i] == start_char:\r\n                count += 1\r\n                i += 1\r\n            else:\r\n                break\r\n        return count\r\n    else:\r\n        return  0\r\n\r\ncdef uint find_kuohao(pyucs* t, uint i, uint l, uint* line_text):\r\n    cdef :\r\n        uint ii, left_kuohao_count=1\r\n        pyucs c\r\n    while(i<l):\r\n        c=t[i]\r\n        if c!=left_kuohao0 and c!=left_kuohao1 and c!=left_kuohao2:\r\n            if c!=right_kuohao0 and c!=right_kuohao1 and c!=right_kuohao2:\r\n                if c!=dyh and c!=syh:\r\n                    line_text_try_add_1(c, line_text)\r\n                else:\r\n                    i=find_yh_str(t, i+1, l, c, line_text)\r\n                    continue\r\n            else:\r\n                left_kuohao_count-=1\r\n                if left_kuohao_count==0:\r\n                    return i+1\r\n        else:\r\n            left_kuohao_count +=1\r\n        i+=1\r\n\r\ncdef uint find_yh_str(pyucs* t, uint i, uint l, pyucs left_yh, uint* line_text):\r\n    cdef:\r\n        pyucs c\r\n    if l-i>2:\r\n        if t[i]!=left_yh:\r\n            line_text_try_add_1(t[i], line_text)\r\n            return find_no_multi_line_kuohao_str(t, i+1, l, left_yh, line_text)\r\n        else:\r\n            i+=1\r\n            if t[i]!=left_yh:\r\n                line_text_try_add_1(t[i], line_text)\r\n                return find_no_multi_line_kuohao_str(t, i + 1, l, left_yh, line_text)\r\n            else: #三引号'''\r\n                while(i<l):\r\n                    c=t[i]\r\n                    if c!=left_yh:\r\n                        line_text_try_add_1(c, line_text)\r\n                    elif t[i-1]!=xhx:\r\n                        if t[i+1]==left_yh:\r\n                            if t[i+2]==left_yh: #又一个三引号\r\n                                return i+3\r\n                            else:\r\n                                i=i+3\r\n                                pass\r\n                        else:\r\n                            i=i+2\r\n                            \r\n                    else:\r\n                        pass\r\n                    #\r\n                    i+=1\r\n                return l                   \r\n    else:\r\n        return l\r\n    \r\ncdef uint find_no_multi_line_kuohao_str(pyucs* t, uint i, uint l, pyucs left_yh, uint* line_text):\r\n    cdef:\r\n        pyucs c\r\n    while (i < l):\r\n        c = t[i]\r\n        if c != left_yh:\r\n            line_text_try_add_1(c, line_text)\r\n        elif t[i - 1] != xhx:\r\n            line_text_try_add_1(c, line_text)\r\n            return i + 1\r\n        else:\r\n            line_text_try_add_1(c, line_text)\r\n        i+=1\r\n    return l\r\n\r\n\r\ncdef inline void line_text_try_add_1(pyucs c, uint* line_text):\r\n    if c!=hh:\r\n        pass\r\n    else:\r\n        line_text[0] +=1\r\n#-----------------------------------------------------------------------------------------------------------------------\r\n```\r\n\r\n\r\n\r\n### Expected behaviour\r\n\r\ncomplie pass\r\n\r\n### OS\r\n\r\nWindows\r\n\r\n### Python version\r\n\r\n3.12.4\r\n\r\n### Cython version\r\n\r\n3.0.11\r\n\r\n### Additional context\r\n\r\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6403/comments",
    "created_at": "2024-09-21T16:34:09Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6403/events",
    "html_url": "https://github.com/cython/cython/issues/6403",
    "id": 2540402168,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6403/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6Xa3X4",
    "number": 6403,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6403/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6403/timeline",
    "title": "[BUG] Exception: This may never happen, please report a bug",
    "updated_at": "2024-09-21T20:20:13Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6403",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/79291813?v=4",
        "events_url": "https://api.github.com/users/xueer1551/events{/privacy}",
        "followers_url": "https://api.github.com/users/xueer1551/followers",
        "following_url": "https://api.github.com/users/xueer1551/following{/other_user}",
        "gists_url": "https://api.github.com/users/xueer1551/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/xueer1551",
        "id": 79291813,
        "login": "xueer1551",
        "node_id": "MDQ6VXNlcjc5MjkxODEz",
        "organizations_url": "https://api.github.com/users/xueer1551/orgs",
        "received_events_url": "https://api.github.com/users/xueer1551/received_events",
        "repos_url": "https://api.github.com/users/xueer1551/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/xueer1551/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xueer1551/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/xueer1551"
    }
}