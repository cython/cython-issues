{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I have question on two kinds operation in cython: array creation and conversion.\r\n\r\n## Array creation\r\nSay if I want a function that creates an empty float64 array and return (like numpy.empty), I can do following\r\n```cython\r\ncimport numpy as np\r\nnp.import_array()\r\ncdef double[:] empty(int n):\r\n    cdef np.npy_intp[1] dims = [n]\r\n    return np.PyArray_EMPTY(1, dims, np.NPY_DOUBLE, 0)\r\n```\r\nor use cython array\r\n```cython\r\nfrom cython.view cimport array\r\ncdef double[:] empty(int n):\r\n    return array(shape=(n,), itemsize=sizeof(double), format=b\"d\")\r\n```\r\n\r\nAlthough the latter one produces more python code according to annotations, the latter one is still faster according to my test. Is there anyway to make the latter one even faster with less python size code? The annoation indicates that many intermediate python variables are created:\r\n```cpp\r\n  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_1);\r\n  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_2);\r\n  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_3);\r\n  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_4);\r\n  __Pyx_GIVEREF(__pyx_t_2);\r\n  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);\r\n  __Pyx_GIVEREF(__pyx_t_3);\r\n  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);\r\n  __pyx_t_2 = 0;\r\n  __pyx_t_3 = 0;\r\n  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_4) < 0) __PYX_ERR(0, 22, __pyx_L1_error)\r\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\r\n  __pyx_t_4 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_4);\r\n  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_4) < 0) __PYX_ERR(0, 22, __pyx_L1_error)\r\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\r\n  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_b_d) < 0) __PYX_ERR(0, 22, __pyx_L1_error)\r\n  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_4);\r\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\r\n  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_4, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 22, __pyx_L1_error)\r\n  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;\r\n  __pyx_v_arr = __pyx_t_5;\r\n  __pyx_t_5.memview = NULL;\r\n  __pyx_t_5.data = NULL;\r\n```\r\nIt seems that although the initialization of Cython array is defined with __cinit__, we still cannot directly pass the arguments as C variables (unlike np.PyArray_EMPTY does)\r\n\r\n## Array conversion\r\nAfter dealing with created array, usually we would like to return it to use as numpy array. It seems that the only way will be `np.asarray`, but this will also produces a lot of python code, for example\r\n```\r\ncdef double[:,:,:] matrix = empty(n1, n2, n3)\r\n# some processing\r\nret = np.asarray(matrix)\r\n```\r\nThe line with `np.asarray` produces\r\n```cpp\r\n  __Pyx_GetModuleGlobalName(__pyx_t_34, __pyx_n_s_np); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1128, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_34);\r\n  __pyx_t_35 = __Pyx_PyObject_GetAttrStr(__pyx_t_34, __pyx_n_s_asarray); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1128, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_35);\r\n  __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;\r\n  __pyx_t_34 = __pyx_memoryview_fromslice(__pyx_v_matrix, 3, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1128, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_34);\r\n  __pyx_t_36 = NULL;\r\n  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_35))) {\r\n    __pyx_t_36 = PyMethod_GET_SELF(__pyx_t_35);\r\n    if (likely(__pyx_t_36)) {\r\n      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_35);\r\n      __Pyx_INCREF(__pyx_t_36);\r\n      __Pyx_INCREF(function);\r\n      __Pyx_DECREF_SET(__pyx_t_35, function);\r\n    }\r\n  }\r\n  __pyx_t_33 = (__pyx_t_36) ? __Pyx_PyObject_Call2Args(__pyx_t_35, __pyx_t_36, __pyx_t_34) : __Pyx_PyObject_CallOneArg(__pyx_t_35, __pyx_t_34);\r\n  __Pyx_XDECREF(__pyx_t_36); __pyx_t_36 = 0;\r\n  __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;\r\n  if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 1128, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_33);\r\n  __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;\r\n  __pyx_v_ret = __pyx_t_33;\r\n  __pyx_t_33 = 0;\r\n```\r\nIs there any better way to avoid these python side code? Or do we need to patch cython to achieve these two optimizations?",
    "closed_at": "2020-06-03T09:02:09Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Are you saying that creating a Cython array is faster for you than creating a NumPy array? That contradicts https://github.com/cython/cython/issues/1349, which claims the opposite. Could you back that with benchmark numbers?\n\nI would consider this a duplicate of that ticket, although this one looks more on the caller side than the internal array creation side. For a Cython internal type, that's probably still special enough to consider it part of https://github.com/cython/cython/issues/1349. We might be able to optimise away the keyword arguments in this specific case. Not sure if that's the main issue here, though. Profiling would tell.\n\nNote that „more C code” is not necessarily bad. Cython often generates more code that the C compiler can then optimise away, or that special cases certain likely situations at runtime, such as calling a method. (Which doesn't happen here, but that doesn't hurt much.)\n\nBTW, instead of creating a new NumPy array from a memory view that is already backed by a NumPy array that you created yourself, you could also just return the original NumPy array. But I guess your real world code is more complex than your example here.\n\nWe could probably override some NumPy methods and functions with more direct cdef versions, but that should be done on NumPy side since they own the Cython declarations for NumPy now.\n",
            "created_at": "2020-06-03T04:44:50Z",
            "html_url": "https://github.com/cython/cython/issues/3661#issuecomment-637948979",
            "id": 637948979,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3661",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzk0ODk3OQ==",
            "updated_at": "2020-06-03T04:44:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/637948979",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Closing as duplicate of #1349.",
            "created_at": "2020-06-03T09:02:09Z",
            "html_url": "https://github.com/cython/cython/issues/3661#issuecomment-638064311",
            "id": 638064311,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3661",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzODA2NDMxMQ==",
            "updated_at": "2020-06-03T09:02:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/638064311",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "I didn't find any numbers in that issue, this is my little benchmark @scoder :\r\n`lib.pyx`:\r\n```cython\r\n \r\ncimport numpy as np\r\nnp.import_array()\r\ncdef double[:] empty_np1(int n):\r\n    cdef np.npy_intp[1] dims = [n]\r\n    return np.PyArray_EMPTY(1, dims, np.NPY_DOUBLE, 0)\r\ncdef double[:,:] empty_np2(int n1, int n2):\r\n    cdef np.npy_intp[2] dims = [n1, n2]\r\n    return np.PyArray_EMPTY(2, dims, np.NPY_DOUBLE, 0)\r\n\r\nfrom cython.view cimport array\r\ncdef double[:] empty_cy1(int n):\r\n    return array(shape=(n,), itemsize=sizeof(double), format=b\"d\")\r\ncdef double[:,:] empty_cy2(int n1, int n2):\r\n    return array(shape=(n1, n2), itemsize=sizeof(double), format=b\"d\")\r\n\r\ndef test_np1(int n):\r\n    cdef double[:] data = empty_np1(n)\r\n    return data\r\n\r\ndef test_np2(int n1, int n2):\r\n    cdef double[:,:] data = empty_np2(n1, n2)\r\n    return data\r\n\r\ndef test_cy1(int n):\r\n    cdef double[:] data = empty_cy1(n)\r\n    return data\r\n\r\ndef test_cy2(int n1, int n2):\r\n    cdef double[:,:] data = empty_cy2(n1, n2)\r\n    return data\r\n```\r\n`setup.py`:\r\n```python\r\n \r\nimport numpy as np\r\nfrom setuptools import setup\r\nfrom Cython.Build import cythonize\r\n\r\nsetup(\r\n    name='test',\r\n    ext_modules=cythonize(\"lib.pyx\", include_path=[np.get_include()]),\r\n    include_dirs=[np.get_include()],\r\n    zip_safe=False\r\n)\r\n```\r\n`test.py`:\r\n```cython\r\nimport timeit\r\n\r\nn = 1000\r\nm = 1000\r\nsetup = \"from lib import test_np1, test_np2, test_cy1, test_cy2\"\r\n\r\nprint(timeit.timeit(f\"test_np1({n})\", number=m, setup=setup))\r\nprint(timeit.timeit(f\"test_cy1({n})\", number=m, setup=setup))\r\n\r\nprint(timeit.timeit(f\"test_np2({n}, {n})\", number=m, setup=setup))\r\nprint(timeit.timeit(f\"test_cy2({n}, {n})\", number=m, setup=setup))\r\n```\r\n\r\nThe result on my computer is\r\n```\r\n0.0007574100745841861\r\n0.0005825329571962357\r\n0.0012563359923660755\r\n0.0006479700095951557\r\n```",
            "created_at": "2020-06-03T19:31:39Z",
            "html_url": "https://github.com/cython/cython/issues/3661#issuecomment-638414820",
            "id": 638414820,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3661",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQxNDgyMA==",
            "updated_at": "2020-06-03T19:31:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/638414820",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/9154441?v=4",
                "events_url": "https://api.github.com/users/cmpute/events{/privacy}",
                "followers_url": "https://api.github.com/users/cmpute/followers",
                "following_url": "https://api.github.com/users/cmpute/following{/other_user}",
                "gists_url": "https://api.github.com/users/cmpute/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cmpute",
                "id": 9154441,
                "login": "cmpute",
                "node_id": "MDQ6VXNlcjkxNTQ0NDE=",
                "organizations_url": "https://api.github.com/users/cmpute/orgs",
                "received_events_url": "https://api.github.com/users/cmpute/received_events",
                "repos_url": "https://api.github.com/users/cmpute/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cmpute/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cmpute/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cmpute"
            }
        },
        {
            "author_association": "NONE",
            "body": "Even if I increase n to `n=10000`, it still seems that cython version is faster\r\n```\r\n0.0007353579858317971\r\n0.000572100980207324\r\n0.007961040013469756\r\n0.006955094053409994\r\n```\r\n\r\nFor numpy array conversion, I think I will create an issue in Numpy repo, thanks for the info.",
            "created_at": "2020-06-03T19:33:41Z",
            "html_url": "https://github.com/cython/cython/issues/3661#issuecomment-638415929",
            "id": 638415929,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3661",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQxNTkyOQ==",
            "updated_at": "2020-06-03T19:33:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/638415929",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/9154441?v=4",
                "events_url": "https://api.github.com/users/cmpute/events{/privacy}",
                "followers_url": "https://api.github.com/users/cmpute/followers",
                "following_url": "https://api.github.com/users/cmpute/following{/other_user}",
                "gists_url": "https://api.github.com/users/cmpute/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cmpute",
                "id": 9154441,
                "login": "cmpute",
                "node_id": "MDQ6VXNlcjkxNTQ0NDE=",
                "organizations_url": "https://api.github.com/users/cmpute/orgs",
                "received_events_url": "https://api.github.com/users/cmpute/received_events",
                "repos_url": "https://api.github.com/users/cmpute/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cmpute/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cmpute/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cmpute"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3661/comments",
    "created_at": "2020-06-02T19:47:57Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-06-03T09:01:35Z",
            "event": "labeled",
            "id": 3401168053,
            "label": {
                "color": "444444",
                "name": "R: duplicate"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDM0MDExNjgwNTM=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3401168053"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-06-03T09:02:09Z",
            "event": "closed",
            "id": 3401170693,
            "node_id": "MDExOkNsb3NlZEV2ZW50MzQwMTE3MDY5Mw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3401170693"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-06-03T19:31:39Z",
            "event": "mentioned",
            "id": 3403728970,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwMzcyODk3MA==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3403728970"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-06-03T19:31:39Z",
            "event": "subscribed",
            "id": 3403728974,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDM3Mjg5NzQ=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3403728974"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3661/events",
    "html_url": "https://github.com/cython/cython/issues/3661",
    "id": 629468767,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556894,
            "name": "R: duplicate",
            "node_id": "MDU6TGFiZWw0MjU1NTY4OTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/R:%20duplicate"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3661/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2Mjk0Njg3Njc=",
    "number": 3661,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Faster array creation and conversion",
    "updated_at": "2020-06-03T19:33:41Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3661",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/9154441?v=4",
        "events_url": "https://api.github.com/users/cmpute/events{/privacy}",
        "followers_url": "https://api.github.com/users/cmpute/followers",
        "following_url": "https://api.github.com/users/cmpute/following{/other_user}",
        "gists_url": "https://api.github.com/users/cmpute/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/cmpute",
        "id": 9154441,
        "login": "cmpute",
        "node_id": "MDQ6VXNlcjkxNTQ0NDE=",
        "organizations_url": "https://api.github.com/users/cmpute/orgs",
        "received_events_url": "https://api.github.com/users/cmpute/received_events",
        "repos_url": "https://api.github.com/users/cmpute/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/cmpute/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cmpute/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/cmpute"
    }
}