{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\r\n\r\nI am compiling code where I define a union type in `_partitioner.pxd` file, and then I cimport it within `_splitter.pxd` file for use in their corresponding `.pyx` files. However, when I compile the code, I get the following error:\r\n\r\n```\r\n  [7/21] Compiling C object sklearn/tree/_partitioner.cpython-310-darwin.so.p/meson-generated_sklearn_tree__partitioner.pyx.c.o\r\n  FAILED: sklearn/tree/_partitioner.cpython-310-darwin.so.p/meson-generated_sklearn_tree__partitioner.pyx.c.o\r\n  arm64-apple-darwin20.0.0-clang -Isklearn/tree/_partitioner.cpython-310-darwin.so.p -Isklearn/tree -I../../sklearn/tree -I../../../../miniforge3/envs/sklearn-dev/lib/python3.10/site-packages/numpy/_core/include -Isklearn -Isklearn/utils -I/Users/adam2392/miniforge3/envs/sklearn-dev/include/python3.10 -fvisibility=hidden -fdiagnostics-color=always -DNDEBUG -Wall -Winvalid-pch -std=c11 -O3 -Wno-unused-but-set-variable -Wno-unused-function -Wno-conversion -Wno-misleading-indentation -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe -isystem /Users/adam2392/miniforge3/envs/sklearn-dev/include -D_FORTIFY_SOURCE=2 -isystem /Users/adam2392/miniforge3/envs/sklearn-dev/include -DNPY_NO_DEPRECATED_API=NPY_1_9_API_VERSION -MD -MQ sklearn/tree/_partitioner.cpython-310-darwin.so.p/meson-generated_sklearn_tree__partitioner.pyx.c.o -MF sklearn/tree/_partitioner.cpython-310-darwin.so.p/meson-generated_sklearn_tree__partitioner.pyx.c.o.d -o sklearn/tree/_partitioner.cpython-310-darwin.so.p/meson-generated_sklearn_tree__partitioner.pyx.c.o -c sklearn/tree/_partitioner.cpython-310-darwin.so.p/sklearn/tree/_partitioner.pyx.c\r\n  sklearn/tree/_partitioner.cpython-310-darwin.so.p/sklearn/tree/_partitioner.pyx.c:2217:3: error: unknown type name '__pyx_t_7sklearn_4tree_12_partitioner_SplitValue'\r\n    __pyx_t_7sklearn_4tree_12_partitioner_SplitValue split_value;\r\n    ^\r\n  1 error generated.\r\n```\r\n\r\nThe corresponding line in the generated C file shows:\r\n\r\n```C\r\n/* \"_splitter.pxd\":14\r\n * \r\n * \r\n * cdef struct SplitRecord:             # <<<<<<<<<<<<<<\r\n *     # Data to track sample split\r\n *     intp_t feature         # Which feature to split on.\r\n */\r\nstruct __pyx_t_7sklearn_4tree_9_splitter_SplitRecord {\r\n  __pyx_t_7sklearn_5utils_9_typedefs_intp_t feature;\r\n  __pyx_t_7sklearn_5utils_9_typedefs_intp_t pos;\r\n  __pyx_t_7sklearn_4tree_12_partitioner_SplitValue split_value;\r\n  __pyx_t_7sklearn_5utils_9_typedefs_float64_t improvement;\r\n  __pyx_t_7sklearn_5utils_9_typedefs_float64_t impurity_left;\r\n  __pyx_t_7sklearn_5utils_9_typedefs_float64_t impurity_right;\r\n  __pyx_t_7sklearn_5utils_9_typedefs_float64_t lower_bound;\r\n  __pyx_t_7sklearn_5utils_9_typedefs_float64_t upper_bound;\r\n  unsigned char missing_go_to_left;\r\n  __pyx_t_7sklearn_5utils_9_typedefs_intp_t n_missing;\r\n};\r\n```\r\n\r\n### Code to reproduce the behaviour:\r\n\r\nThis is within `_partitioner.pxd`\r\n\r\n```cython\r\nctypedef union SplitValue:\r\n    double threshold\r\n    uint64_t cat_split\r\n```\r\n\r\n```cython\r\nfrom ._partitioner cimport SplitValue\r\n\r\ncdef struct SplitRecord:\r\n    int feature\r\n    SplitValue split_value    # Generalized threshold for categorical and\r\n```\r\n\r\n### Expected behaviour\r\n\r\nI would expect this code to compile fine.\r\n\r\n### OS\r\n\r\nmacOSX\r\n\r\n### Python version\r\n\r\nPython 3.10.14\r\n\r\n### Cython version\r\n\r\nCython version 3.0.10\r\n\r\n### Additional context\r\n\r\nThis arose from work in scikit-learn: https://github.com/scikit-learn/scikit-learn/pull/29437",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6290/comments",
    "created_at": "2024-07-16T23:28:56Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6290/events",
    "html_url": "https://github.com/cython/cython/issues/6290",
    "id": 2412211034,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6290/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6Px2ta",
    "number": 6290,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6290/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6290/timeline",
    "title": "[BUG] Unable to cimport a ctypedef `union` type across `.pxd/pyx` files",
    "updated_at": "2024-07-16T23:29:45Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6290",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3460267?v=4",
        "events_url": "https://api.github.com/users/adam2392/events{/privacy}",
        "followers_url": "https://api.github.com/users/adam2392/followers",
        "following_url": "https://api.github.com/users/adam2392/following{/other_user}",
        "gists_url": "https://api.github.com/users/adam2392/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/adam2392",
        "id": 3460267,
        "login": "adam2392",
        "node_id": "MDQ6VXNlcjM0NjAyNjc=",
        "organizations_url": "https://api.github.com/users/adam2392/orgs",
        "received_events_url": "https://api.github.com/users/adam2392/received_events",
        "repos_url": "https://api.github.com/users/adam2392/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/adam2392/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/adam2392/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/adam2392"
    }
}