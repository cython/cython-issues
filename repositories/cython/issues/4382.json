{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "The use of undocumented CPython internals in Cython causes subtle bugs and makes in unnecessarily difficult for Cython based modules to be used across different versions of (C)Python.\r\n\r\nThe latest example of a breakage (amongst many) is https://bugs.python.org/issue43760\r\n\r\nWe[1] are happy to consider API extensions to support Cython. We regard Cython as an important part of the Python ecosystem, and would love to cooperate, rather than conflict with Cython.\r\nThis cooperation has proved fruitful in the past.\r\nFor example, [PEP 590](https://www.python.org/dev/peps/pep-0590/) was designed to suuport Cython generated callables. Because it had to be designed to be both fast and general it has proved beneficial to CPython performance as well.\r\n\r\nCython has many  `__Pyx_Blah` functions which access CPython internals. Moving these to the CPython C-API has a lot of advantages for both CPython and Cython:\r\n\r\n* Improved reliability of Cython generated code. Subtle changes in the implicit semantics of CPython internals will not break Cython code in non-obvious ways.\r\n* Improved portability of Cython modules across Python versions.\r\n* Reduced maintenance for Cython: Just use the CPython API; no need to worry about CPython internals\r\n* Reduced maintenance for CPython: We can treat C structs as opaque and not worry about breakage, as long as we maintain the C API functions\r\n\r\n#### Performance\r\n\r\nI assume that there are two reasons that Cython uses the direct access to CPython internals:\r\n* There is no suitable API. As stated above, if there is no suitable API for a given purpose then please propose one[2].\r\n* For performance. \r\n\r\nRegarding performance, a well designed API may well be faster than probing and modifying CPython internals. It allows the CPython VM to make decisions as when to modify state lazily and when to cache values.\r\n\r\nThere will be a few things where the overhead of a call would be too high, but they should be very few, and understood by both CPython developers and Cython developers. The obvious example is `Py_INCREF` and `Py_DECREF`.\r\n\r\n[1] The CPython developers. I hope the other CPython developers don't mind me speaking for them.\r\n\r\n[2] Please propose APIs at as high and as abstract a level as possible. E.g don't propose an API for inserting Python frames in the frame stack, and for creating code objects. Propose an API for inserting a frame into the frame stack with writable location information.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Thank you for your comments, Mark. Let me clarify a couple of points.\r\n\r\nThere are certainly two types of Cython users. Those who only want to generate their C code and have it work across CPython versions, and those who additionally care about performance. For the first, your requests seem reasonable. For the latter, not so much.\r\n\r\n> Propose an API for inserting a frame into the frame stack with writable location information.\r\n\r\nThat's pretty much what happened in [this recent discussion](https://mail.python.org/archives/list/python-dev@python.org/thread/ZWTBR5ESYR26BUIVMXOKPFRLGGYDJSFC/) on the python-dev mailing list.\r\n\r\n> Cython has many `__Pyx_Blah` functions which access CPython internals. Moving these to the CPython C-API has a lot of advantages for both CPython and Cython\r\n\r\nA few of these were written to mimic CPython features that do not have a (suitable) C-API, but many *are* part of the C-API, in one way or another. Most of them exist for performance reasons and in order to be inlined in Cython. They are unlikely to go away.\r\n\r\nHowever, when we touch internals, we usually make it optional by providing alternative implementations â€“ if possible. As long as there is some kind of official C-API way to do things, we'll have at least a fallback implementation that does them that way, if only to cater for PyPy and friends. The generated C code automatically selects the right implementation based on the Python implementation and version. If a newer CPython version has specific needs or restrictions, we can accommodate it in that infrastructure. See the list of C compile time options [here](https://github.com/cython/cython/blob/e2a23fe11063ee13c886e89007207a07a397e016/Cython/Utility/ModuleSetupCode.c#L56). I think this is an excellent way to cater for all sides.\r\n\r\nNow, previously, it used to be the case that CPython's C-API was more stable than Cython. This seems to have shifted. Over the years, I was advocating for generating the C code from Cython modules locally and shipping it as part of the source distribution. As long as the C-API (or the exposed internals) were stable enough, that was a good idea. If they no longer are, then it's less of a good idea. The C code can get outdated and it's then really hard for users to regenerate it when all they want to do is pip-install a package into a new CPython version for which there's no wheel (and possibly never will be, for an unmaintained package). This was a problem with the `line_profiler` package, for example, which, for a very long while, didn't receive an update with freshly generated C sources to support CPython 3.7, and the C sources failed to compile on that newly released CPython version at the time.\r\n\r\nI'm wondering if setuptools can help with this. If it gained a \"forced recythonize\" option to override existing C sources and recreate them from scratch, using a freshly installed Cython, then users would gain a much simpler upgrade path.\r\n\r\nAlso, wheels work very smoothly these days, so maybe it's generally time to accept a complete regenerate-rebuild cycle for all platforms for which there is no distribution wheel?\r\n\r\nI really think that the underlying issues can largely be solved on the distribution side, rather than letting Cython generate less adaptive code.",
            "created_at": "2021-09-20T14:50:02Z",
            "html_url": "https://github.com/cython/cython/issues/4382#issuecomment-922998870",
            "id": 922998870,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4382",
            "node_id": "IC_kwDOABDGAc43A9hW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/922998870/reactions"
            },
            "updated_at": "2021-09-20T14:50:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/922998870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "I have no doubt that parts of the C-API are too slow for Cython, I mentioned `Py_DECREF` and `Py_INCREF` early.\r\nHowever, you seem to be taking a dogmatic view that all calls to the C-API are too slow and must be replaced with Cython versions.\r\n\r\nWhat evidence do you have for this?\r\nWhich parts of the C-API are too slow?\r\n\r\nIf you want any new APIs please file an issue. Suggestions in the middle of a email thread just get lost, I'm afraid.",
            "created_at": "2021-09-21T12:18:33Z",
            "html_url": "https://github.com/cython/cython/issues/4382#issuecomment-923928757",
            "id": 923928757,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4382",
            "node_id": "IC_kwDOABDGAc43Egi1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/923928757/reactions"
            },
            "updated_at": "2021-09-21T12:18:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/923928757",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
                "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
                "followers_url": "https://api.github.com/users/markshannon/followers",
                "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
                "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/markshannon",
                "id": 9448417,
                "login": "markshannon",
                "node_id": "MDQ6VXNlcjk0NDg0MTc=",
                "organizations_url": "https://api.github.com/users/markshannon/orgs",
                "received_events_url": "https://api.github.com/users/markshannon/received_events",
                "repos_url": "https://api.github.com/users/markshannon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/markshannon"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> you seem to be taking a dogmatic view that all calls to the C-API are too slow and must be replaced with Cython versions.\r\n\r\nNo, certainly not. But I am questioning that exposing and using internals between CPython and Cython is a bad thing per se. I personally think that it's great to be able to interface at a low level and to hook directly into existing data structures. After all, there _is_ an implementation and not just an interface. That implementation might change, but so might the interfaces to it. Both have happened before, and both are happening right now.\r\n\r\nCython is a code generator, and as such, I think it can afford to take advantage of deeper implementation details â€“ not only of CPython version x.y, but of whatever Python implementation in whatever version it compiles on.\r\n\r\nI suggest to think of Cython as a replacement of the C-API, rather than a user of the C-API, and of the code that it generates as an integration into CPython/PyPy/GraalVM/â€¦ rather than an external plugin.\r\n\r\nAs I wrote before:\r\n> I really think that the underlying issues can largely be solved on the distribution side, rather than letting Cython generate less adaptive code.",
            "created_at": "2021-09-21T13:00:54Z",
            "html_url": "https://github.com/cython/cython/issues/4382#issuecomment-923964747",
            "id": 923964747,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4382",
            "node_id": "IC_kwDOABDGAc43EpVL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/923964747/reactions"
            },
            "updated_at": "2021-09-21T13:00:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/923964747",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'll echo that we do try to use the public C-API and only rely on internals/our own implementations when they are insufficiently flexible and/or there are are material, measured performance gains (for some still-supported versions of Python at least). The fact that this is generated code not intended for human consumption, and that its widespread use has a multiplicative effect for every optimization, means the balance is different than for hand-written code. \r\n\r\nI, too, would like to see better support for regenerating it on the distribution side rather than a maintainer having to ship the .c files pinned to some specific Cython version and manual efforts to get packages to \"recythonize\" for new Python releases. ",
            "created_at": "2021-09-22T07:16:11Z",
            "html_url": "https://github.com/cython/cython/issues/4382#issuecomment-924653509",
            "id": 924653509,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4382",
            "node_id": "IC_kwDOABDGAc43HRfF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/924653509/reactions"
            },
            "updated_at": "2021-09-22T07:16:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/924653509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "NONE",
            "body": "I think it's fine if Cython uses implementations details for performance, but it should do so only in `#if PY_VERSION_HEX < 0x030B0000` blocks. That way the generated code falls back on the documented API if it's used with a future Python version that that Cython version wasn't tested against.\r\n\r\nThis would allow CPython to freely change the implementation details without waiting for Cython; and users would lose performance only temporarily until Cython has caught up.",
            "created_at": "2021-11-05T14:17:06Z",
            "html_url": "https://github.com/cython/cython/issues/4382#issuecomment-961931887",
            "id": 961931887,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4382",
            "node_id": "IC_kwDOABDGAc45Vepv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/961931887/reactions"
            },
            "updated_at": "2021-11-05T14:17:06Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/961931887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/243140?v=4",
                "events_url": "https://api.github.com/users/dgrunwald/events{/privacy}",
                "followers_url": "https://api.github.com/users/dgrunwald/followers",
                "following_url": "https://api.github.com/users/dgrunwald/following{/other_user}",
                "gists_url": "https://api.github.com/users/dgrunwald/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dgrunwald",
                "id": 243140,
                "login": "dgrunwald",
                "node_id": "MDQ6VXNlcjI0MzE0MA==",
                "organizations_url": "https://api.github.com/users/dgrunwald/orgs",
                "received_events_url": "https://api.github.com/users/dgrunwald/received_events",
                "repos_url": "https://api.github.com/users/dgrunwald/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dgrunwald/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dgrunwald/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dgrunwald"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "FWIW, I was recently asked what the performance difference is between the Limited API and CPython-optimised Cython, and had no answer. I then tried it with a simple caching example that uses ints, dicts and lists, and got a bit more than a 10% slowdown for the Limited API case. So, there are visible differences in the tricks that Cython pulls in the C-API, but in the end, these tricks have to add up to reach that difference, and are obviously highly code specific.",
            "created_at": "2022-04-15T08:44:35Z",
            "html_url": "https://github.com/cython/cython/issues/4382#issuecomment-1099970367",
            "id": 1099970367,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4382",
            "node_id": "IC_kwDOABDGAc5BkDc_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1099970367/reactions"
            },
            "updated_at": "2022-04-15T08:44:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1099970367",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4382/comments",
    "created_at": "2021-09-20T10:55:23Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-09-20T13:33:24Z",
            "event": "labeled",
            "id": 5328360013,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "LE_lADOABDGAc47p20QzwAAAAE9mFJN",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5328360013"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-09-20T13:33:24Z",
            "event": "labeled",
            "id": 5328360016,
            "label": {
                "color": "f9d0c4",
                "name": "performance"
            },
            "node_id": "LE_lADOABDGAc47p20QzwAAAAE9mFJQ",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5328360016"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-09-20T13:33:24Z",
            "event": "labeled",
            "id": 5328360019,
            "label": {
                "color": "444444",
                "name": "Python Semantics"
            },
            "node_id": "LE_lADOABDGAc47p20QzwAAAAE9mFJT",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5328360019"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-09-25T01:50:04Z",
            "event": "subscribed",
            "id": 5358960695,
            "node_id": "SE_lADOABDGAc47p20QzwAAAAE_a0A3",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5358960695"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4382/events",
    "html_url": "https://github.com/cython/cython/issues/4382",
    "id": 1000828176,
    "labels": [
        {
            "color": "f9d0c4",
            "default": false,
            "description": null,
            "id": 414805151,
            "name": "performance",
            "node_id": "MDU6TGFiZWw0MTQ4MDUxNTE=",
            "url": "https://api.github.com/repos/cython/cython/labels/performance"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556315,
            "name": "Python Semantics",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMTU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Python%20Semantics"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4382/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc47p20Q",
    "number": 4382,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/cython/cython/issues/4382/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4382/timeline",
    "title": "[ENH] Please stop using undocumented CPython internals.",
    "updated_at": "2022-04-15T08:44:35Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4382",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/markshannon",
        "id": 9448417,
        "login": "markshannon",
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/markshannon"
    }
}