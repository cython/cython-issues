{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Following Cython code with fused type cannot be compiled  with Cython 0.29.7/ Python 3.7.2/Ubuntu linux 18.04.\r\n\r\nThis error happends only if I use fused type to specialize template.\r\n\r\n```python\r\n\r\ncdef extern from \"func.h\":\r\n    void func1[L](L arg);\r\n\r\nctypedef fused Num:\r\n    long\r\n\r\ndef test(Num n):\r\n    cdef void (*p_func1) (Num)\r\n    p_func1 = func1[Num]\r\n```\r\n\r\n\r\nThe error is:\r\n\r\n```\r\n1/1] Cythonizing test.pyx\r\n/usr/local/lib/python3.7/site-packages/Cython/Compiler/Main.py:367: FutureWarning: Cython directive 'language_level' not set, using 2 for now (Py2). This will change in a later release! File: /home/ishimoto/src/cython_bug/test.pyx\r\n  tree = Parsing.p_module(s, pxd, full_module_name)\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\nctypedef fused Num:\r\n    long\r\n\r\ndef test(Num n):\r\n    cdef void (*p_func1) (Num)\r\n    p_func1 = func1[Num]\r\n                  ^\r\n------------------------------------------------------------\r\n\r\ntest.pyx:10:19: Compiler crash in AnalyseExpressionsTransform\r\n\r\nModuleNode.body = StatListNode(test.pyx:2:0)\r\nStatListNode.stats[1] = FusedCFuncDefNode(test.pyx:8:0,\r\n    defaults = [...]/1,\r\n    fused_compound_types = [...]/1,\r\n    match = \"dest_sig[{{dest_sig_idx}}] = '{{specialized_type_name}}'\",\r\n    no_match = 'dest_sig[{{dest_sig_idx}}] = None',\r\n    nodes = [...]/1,\r\n    specialized_pycfuncs = [...]/1)\r\nFusedCFuncDefNode.stats[1] = DefNode(test.pyx:8:0,\r\n    modifiers = [...]/0,\r\n    name = 'test',\r\n    np_args_idx = [...]/0,\r\n    num_required_args = 1,\r\n    outer_attrs = [...]/2,\r\n    py_wrapper_required = True,\r\n    reqd_kw_flags_cname = '0',\r\n    specialized_signature_string = 'long',\r\n    used = True)\r\nFile 'Nodes.py', line 436, in analyse_expressions: StatListNode(test.pyx:9:4)\r\nFile 'Nodes.py', line 5156, in analyse_expressions: SingleAssignmentNode(test.pyx:10:19)\r\nFile 'Nodes.py', line 5309, in analyse_types: SingleAssignmentNode(test.pyx:10:19)\r\nFile 'ExprNodes.py', line 895, in coerce_to: IndexNode(test.pyx:10:19,\r\n    is_subscript = True,\r\n    result_is_used = True,\r\n    type_indices = [...]/1,\r\n    use_managed_ref = True)\r\n\r\nCompiler crash traceback from this point on:\r\n  File \"/usr/local/lib/python3.7/site-packages/Cython/Compiler/ExprNodes.py\", line 895, in coerce_to\r\n    for signature in src_type.get_all_specialized_function_types():\r\n  File \"/usr/local/lib/python3.7/site-packages/Cython/Compiler/PyrexTypes.py\", line 2986, in get_all_specialized_function_types\r\n    if self.entry.fused_cfunction:\r\nAttributeError: 'CFuncType' object has no attribute 'entry'\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 16, in <module>\r\n    ext_modules=cythonize(ext_modules),\r\n  File \"/usr/local/lib/python3.7/site-packages/Cython/Build/Dependencies.py\", line 1097, in cythonize\r\n    cythonize_one(*args)\r\n  File \"/usr/local/lib/python3.7/site-packages/Cython/Build/Dependencies.py\", line 1220, in cythonize_one\r\n    raise CompileError(None, pyx_file)\r\nCython.Compiler.Errors.CompileError: test.pyx\r\n```\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I encountered what I think is the same error, but with different error message. I just post this here to make it easier to find if somebody looks for my error.\r\n\r\nCode is\r\n\r\n```\r\nfrom libcpp.unordered_map cimport unordered_map\r\ncimport cython\r\n\r\ncdef:\r\n    unordered_map[int, double] data    # This works fine\r\n    unordered_map[cython.integral, double] data    # This will crash the compiler\r\n```\r\n\r\nError message is\r\n\r\n```\r\npython3 setup.py build_ext --inplace\r\nrunning build_ext\r\nskipping 'test_000.cpp' Cython extension (up-to-date)\r\ncythoning test_001.pyx to test_001.cpp\r\n/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Main.py:369: FutureWarning: Cython directive 'language_level' not set, using 2 for now (Py2). This will change in a later release! File: /home/ohaas/HESSENBOX-DA/PhD/code/openChargeState/test/unorderedMapc++ArrayKey/test_001.pyx\r\n  tree = Parsing.p_module(s, pxd, full_module_name)\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\ncimport cython\r\n\r\n\r\ncdef:\r\n    unordered_map[int, double] data\r\n    unordered_map[cython.integral, double] data\r\n                 ^\r\n------------------------------------------------------------\r\n\r\ntest_001.pyx:9:18: Compiler crash in AnalyseDeclarationsTransform\r\n\r\nFile 'ModuleNode.py', line 124, in analyse_declarations: ModuleNode(test_001.pyx:2:0,\r\n    full_module_name = 'test_001')\r\nFile 'Nodes.py', line 431, in analyse_declarations: StatListNode(test_001.pyx:2:0)\r\nFile 'Nodes.py', line 431, in analyse_declarations: StatListNode(test_001.pyx:8:4)\r\nFile 'Nodes.py', line 1327, in analyse_declarations: CVarDefNode(test_001.pyx:9:4,\r\n    modifiers = [...]/0,\r\n    visibility = 'private')\r\nFile 'Nodes.py', line 1158, in analyse: TemplatedTypeNode(test_001.pyx:9:18)\r\n\r\nCompiler crash traceback from this point on:\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Nodes.py\", line 1158, in analyse\r\n    self.type = base_type.specialize_here(self.pos, template_types)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 3677, in specialize_here\r\n    return self.specialize(dict(zip(self.templates, template_values)))\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 3695, in specialize\r\n    specialized.scope = self.scope.specialize(values, specialized)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Symtab.py\", line 2483, in specialize\r\n    entry.type.specialize(values),\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 415, in specialize\r\n    base_type = self.typedef_base_type.specialize(values)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 3695, in specialize\r\n    specialized.scope = self.scope.specialize(values, specialized)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Symtab.py\", line 2493, in specialize\r\n    utility_code=e.utility_code)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Symtab.py\", line 2431, in declare_cfunction\r\n    cname=cname, visibility=visibility)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Symtab.py\", line 2395, in declare_var\r\n    entry.func_cname = \"%s::%s\" % (self.type.empty_declaration_code(), cname)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 51, in empty_declaration_code\r\n    self._empty_declaration = self.declaration_code('')\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 3749, in declaration_code\r\n    for param in template_params\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 3750, in <listcomp>\r\n    if not is_optional_template_param(param) and not param.is_fused]\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 1582, in declaration_code\r\n    return self.const_base_type.declaration_code(\"const %s\" % entity_code, for_display, dll_linkage, pyrex)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 1649, in declaration_code\r\n    raise Exception(\"This may never happen, please report a bug\")\r\nException: This may never happen, please report a bug\r\n```",
            "created_at": "2020-07-27T17:56:18Z",
            "html_url": "https://github.com/cython/cython/issues/2943#issuecomment-664547517",
            "id": 664547517,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2943",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU0NzUxNw==",
            "performed_via_github_app": null,
            "updated_at": "2020-07-27T17:57:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/664547517",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/4050664?v=4",
                "events_url": "https://api.github.com/users/oliverhaas/events{/privacy}",
                "followers_url": "https://api.github.com/users/oliverhaas/followers",
                "following_url": "https://api.github.com/users/oliverhaas/following{/other_user}",
                "gists_url": "https://api.github.com/users/oliverhaas/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oliverhaas",
                "id": 4050664,
                "login": "oliverhaas",
                "node_id": "MDQ6VXNlcjQwNTA2NjQ=",
                "organizations_url": "https://api.github.com/users/oliverhaas/orgs",
                "received_events_url": "https://api.github.com/users/oliverhaas/received_events",
                "repos_url": "https://api.github.com/users/oliverhaas/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oliverhaas/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oliverhaas/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oliverhaas"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "@oliverhaas I don't think it is the same bug. You're trying to declare a fused variable at the module scope. That definitely doesn't make sense. In a function Cython can pick which \"version\" of the function gets run; here there's never an opportunity to decide so it stays in an indeterminate \"could be any of these types\"-state.\r\n\r\nIt should probably give you a better error message though.",
            "created_at": "2020-07-27T20:25:12Z",
            "html_url": "https://github.com/cython/cython/issues/2943#issuecomment-664619536",
            "id": 664619536,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2943",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDYxOTUzNg==",
            "performed_via_github_app": null,
            "updated_at": "2020-07-27T20:25:12Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/664619536",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yes, you're right. When I was simplifying my use case I went too far and made a nonsensical example.\r\n\r\nThis one should be more fitting:\r\n\r\n```\r\nfrom libcpp.unordered_map cimport unordered_map\r\ncimport cython\r\n\r\ncdef void someFun(cython.integral var) nogil:\r\n    cdef unordered_map[int, double] data0\r\n    cdef unordered_map[cython.integral, double] data1\r\n    return\r\n```\r\n\r\n```\r\npython3 setup.py build_ext --inplace\r\nrunning build_ext\r\nskipping 'test_000.cpp' Cython extension (up-to-date)\r\ncythoning test_001.pyx to test_001.cpp\r\n/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Main.py:369: FutureWarning: Cython directive 'language_level' not set, using 2 for now (Py2). This will change in a later release! File: /home/ohaas/HESSENBOX-DA/PhD/code/openChargeState/test/unorderedMapc++ArrayKey/test_001.pyx\r\n  tree = Parsing.p_module(s, pxd, full_module_name)\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\nfrom libcpp.unordered_map cimport unordered_map\r\ncimport cython\r\n\r\ncdef void someFun(cython.integral var) nogil:\r\n    cdef unordered_map[int, double] data\r\n    cdef unordered_map[cython.integral, double] data\r\n                      ^\r\n------------------------------------------------------------\r\n\r\ntest_001.pyx:7:23: Compiler crash in AnalyseDeclarationsTransform\r\n\r\nModuleNode.body = StatListNode(test_001.pyx:2:0)\r\nStatListNode.stats[2] = StatListNode(test_001.pyx:5:5)\r\nStatListNode.stats[0] = CFuncDefNode(test_001.pyx:5:5,\r\n    args = [...]/1,\r\n    has_fused_arguments = True,\r\n    modifiers = [...]/0,\r\n    visibility = 'private')\r\nFusedCFuncDefNode.stats[0] = CFuncDefNode(test_001.pyx:5:5,\r\n    args = [...]/1,\r\n    modifiers = [...]/0,\r\n    visibility = 'private')\r\nFile 'Nodes.py', line 431, in analyse_declarations: StatListNode(test_001.pyx:6:4,\r\n    is_terminator = True)\r\nFile 'Nodes.py', line 1327, in analyse_declarations: CVarDefNode(test_001.pyx:7:9,\r\n    modifiers = [...]/0,\r\n    visibility = 'private')\r\nFile 'Nodes.py', line 1158, in analyse: TemplatedTypeNode(test_001.pyx:7:23)\r\n\r\nCompiler crash traceback from this point on:\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Nodes.py\", line 1158, in analyse\r\n    self.type = base_type.specialize_here(self.pos, template_types)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 3677, in specialize_here\r\n    return self.specialize(dict(zip(self.templates, template_values)))\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 3695, in specialize\r\n    specialized.scope = self.scope.specialize(values, specialized)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Symtab.py\", line 2483, in specialize\r\n    entry.type.specialize(values),\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 415, in specialize\r\n    base_type = self.typedef_base_type.specialize(values)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 3695, in specialize\r\n    specialized.scope = self.scope.specialize(values, specialized)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Symtab.py\", line 2493, in specialize\r\n    utility_code=e.utility_code)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Symtab.py\", line 2431, in declare_cfunction\r\n    cname=cname, visibility=visibility)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/Symtab.py\", line 2395, in declare_var\r\n    entry.func_cname = \"%s::%s\" % (self.type.empty_declaration_code(), cname)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 51, in empty_declaration_code\r\n    self._empty_declaration = self.declaration_code('')\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 3749, in declaration_code\r\n    for param in template_params\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 3750, in <listcomp>\r\n    if not is_optional_template_param(param) and not param.is_fused]\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 1582, in declaration_code\r\n    return self.const_base_type.declaration_code(\"const %s\" % entity_code, for_display, dll_linkage, pyrex)\r\n  File \"/usr/local/lib/python3.5/dist-packages/Cython/Compiler/PyrexTypes.py\", line 1649, in declaration_code\r\n    raise Exception(\"This may never happen, please report a bug\")\r\nException: This may never happen, please report a bug\r\nbuilding 'test_001' extension\r\nx86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/local/lib/python3.5/dist-packages/numpy/core/include -I/usr/local/include/ -I/usr/include/python3.5m -c test_001.cpp -o build/temp.linux-x86_64-3.5/test_001.o -O1 -std=c++11\r\ncc1plus: warning: command line option ‘-Wstrict-prototypes’ is valid for C/ObjC but not for C++\r\ntest_001.cpp:1:2: error: #error Do not use this file, it is the result of a failed Cython compilation.\r\n #error Do not use this file, it is the result of a failed Cython compilation.\r\n  ^\r\nerror: command 'x86_64-linux-gnu-gcc' failed with exit status 1\r\n```\r\n",
            "created_at": "2020-07-28T09:05:40Z",
            "html_url": "https://github.com/cython/cython/issues/2943#issuecomment-664901358",
            "id": 664901358,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2943",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDkwMTM1OA==",
            "performed_via_github_app": null,
            "updated_at": "2020-07-28T09:06:12Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/664901358",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/4050664?v=4",
                "events_url": "https://api.github.com/users/oliverhaas/events{/privacy}",
                "followers_url": "https://api.github.com/users/oliverhaas/followers",
                "following_url": "https://api.github.com/users/oliverhaas/following{/other_user}",
                "gists_url": "https://api.github.com/users/oliverhaas/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oliverhaas",
                "id": 4050664,
                "login": "oliverhaas",
                "node_id": "MDQ6VXNlcjQwNTA2NjQ=",
                "organizations_url": "https://api.github.com/users/oliverhaas/orgs",
                "received_events_url": "https://api.github.com/users/oliverhaas/received_events",
                "repos_url": "https://api.github.com/users/oliverhaas/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oliverhaas/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oliverhaas/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oliverhaas"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't see why this shouldn't generally work, so it's a bug.\r\nNeeds investigation to find where things go wrong, but might be easy to fix in the end.\r\nThis line in the traceback seems suggestive:\r\n```cython\r\nif not is_optional_template_param(param) and not param.is_fused]\r\n```\r\nApparently, `param` was not detected as fused type, probably during the original analysis of the template arguments.",
            "created_at": "2020-07-28T09:17:58Z",
            "html_url": "https://github.com/cython/cython/issues/2943#issuecomment-664911409",
            "id": 664911409,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2943",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDkxMTQwOQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-07-28T09:17:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/664911409",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2943/comments",
    "created_at": "2019-05-02T09:55:45Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/4050664?v=4",
                "events_url": "https://api.github.com/users/oliverhaas/events{/privacy}",
                "followers_url": "https://api.github.com/users/oliverhaas/followers",
                "following_url": "https://api.github.com/users/oliverhaas/following{/other_user}",
                "gists_url": "https://api.github.com/users/oliverhaas/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oliverhaas",
                "id": 4050664,
                "login": "oliverhaas",
                "node_id": "MDQ6VXNlcjQwNTA2NjQ=",
                "organizations_url": "https://api.github.com/users/oliverhaas/orgs",
                "received_events_url": "https://api.github.com/users/oliverhaas/received_events",
                "repos_url": "https://api.github.com/users/oliverhaas/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oliverhaas/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oliverhaas/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oliverhaas"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-07-27T20:25:12Z",
            "event": "mentioned",
            "id": 3591513051,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU5MTUxMzA1MQ==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3591513051"
        },
        {
            "actor": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/4050664?v=4",
                "events_url": "https://api.github.com/users/oliverhaas/events{/privacy}",
                "followers_url": "https://api.github.com/users/oliverhaas/followers",
                "following_url": "https://api.github.com/users/oliverhaas/following{/other_user}",
                "gists_url": "https://api.github.com/users/oliverhaas/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oliverhaas",
                "id": 4050664,
                "login": "oliverhaas",
                "node_id": "MDQ6VXNlcjQwNTA2NjQ=",
                "organizations_url": "https://api.github.com/users/oliverhaas/orgs",
                "received_events_url": "https://api.github.com/users/oliverhaas/received_events",
                "repos_url": "https://api.github.com/users/oliverhaas/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oliverhaas/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oliverhaas/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oliverhaas"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-07-27T20:25:12Z",
            "event": "subscribed",
            "id": 3591513053,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1OTE1MTMwNTM=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3591513053"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-07-28T09:08:17Z",
            "event": "labeled",
            "id": 3593394601,
            "label": {
                "color": "f9d0c4",
                "name": "C++"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDM1OTMzOTQ2MDE=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3593394601"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-07-28T09:08:17Z",
            "event": "labeled",
            "id": 3593394604,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDM1OTMzOTQ2MDQ=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3593394604"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2943/events",
    "html_url": "https://github.com/cython/cython/issues/2943",
    "id": 439510080,
    "labels": [
        {
            "color": "f9d0c4",
            "default": false,
            "description": null,
            "id": 414805136,
            "name": "C++",
            "node_id": "MDU6TGFiZWw0MTQ4MDUxMzY=",
            "url": "https://api.github.com/repos/cython/cython/labels/C++"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2943/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0Mzk1MTAwODA=",
    "number": 2943,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Compiler crashes when fused type is used as part of C++ template specialization",
    "updated_at": "2020-07-28T09:17:58Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2943",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/1088786?v=4",
        "events_url": "https://api.github.com/users/atsuoishimoto/events{/privacy}",
        "followers_url": "https://api.github.com/users/atsuoishimoto/followers",
        "following_url": "https://api.github.com/users/atsuoishimoto/following{/other_user}",
        "gists_url": "https://api.github.com/users/atsuoishimoto/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/atsuoishimoto",
        "id": 1088786,
        "login": "atsuoishimoto",
        "node_id": "MDQ6VXNlcjEwODg3ODY=",
        "organizations_url": "https://api.github.com/users/atsuoishimoto/orgs",
        "received_events_url": "https://api.github.com/users/atsuoishimoto/received_events",
        "repos_url": "https://api.github.com/users/atsuoishimoto/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/atsuoishimoto/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/atsuoishimoto/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/atsuoishimoto"
    }
}