{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\r\n\r\nHello!\r\n\r\nI've just tested the newly released 3.0b3 to build psycopg-c for Python 3.12, and it seems working largely ok.\r\n\r\nThe only different behaviour I have found is in [two](https://github.com/psycopg/psycopg/blob/580ea8c57b2e57ab1e7e6392e130348ac4d9b146/tests/test_errors.py#L172-L184) [tests](https://github.com/psycopg/psycopg/blob/580ea8c57b2e57ab1e7e6392e130348ac4d9b146/tests/test_connection.py#L104-L110), which both happen to raise an exception, destroy an object, and verify certain conditions after some object `__del__` has been invoked.\r\n\r\nAs far as I can see, the `__del__` method of the objects is not called. Note that the objects themselves are not Cython objects but they refer to Cython objects. The tests pass if pure Python objects are used instead of Cython, and until Python 3.11. [This changeset](https://github.com/psycopg/psycopg/commit/2eced44beeec34d847ab0fe5feabbfebb7a90aa6) introduce the xfails to skip them.\r\n\r\nMaybe there is some reference loop that doesn't get broken?\r\n\r\nI don't know if the error comes from Cython or if it is something regarding Python 3.12, but I thought about mentioning it.\r\n\r\n### Code to reproduce the behaviour:\r\n\r\nCheck out psycopg, go to the current master (before the tests are skipped)\r\n```\r\ngit clone https://github.com/psycopg/psycopg.git\r\ncd psycopg\r\ngit checkout 580ea8c5\r\n```\r\n\r\nRun a docker image with Python 3.12 rc. The command assumes that there is a postgres server running on the docker host, and that the docker network is set up in a standard way (the host can be reached from the guest on 172.17.0.1)\r\n```\r\ndocker run -ti --rm --volume `pwd`:/src --workdir /src -e PSYCOPG_TEST_DSN \"host=172.17.0.1 user=$(whoami)\" python:3.12-rc-bullseye bash\r\n```\r\n\r\nInto the docker container, install psycopg and test dependencies, then build the C extension. At the time of writing this uses Cython 3.0.0b3 (edited - not a3).\r\n```\r\npip install -q ./psycopg[test]\r\npip install -v ./psycopg_c\r\n...\r\n  Running command Getting requirements to build wheel\r\n  Getting requirements to build wheel ... done\r\n  Running command pip subprocess to install backend dependencies\r\n  Collecting Cython>=3.0.0a11\r\n    Downloading Cython-3.0.0b3-py2.py3-none-any.whl (1.2 MB)\r\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.2/1.2 MB 1.2 MB/s eta 0:00:00\r\n  Installing collected packages: Cython\r\n  Successfully installed Cython-3.0.0b3\r\n...\r\n\r\nSuccessfully built psycopg-c\r\nInstalling collected packages: psycopg-c\r\nSuccessfully installed psycopg-c-3.2.0.dev1\r\n```\r\n\r\nRun the failing test\r\n```\r\n/src# pytest tests/test_connection.py::test_connection_warn_close\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.12.0a7, pytest-7.3.1, pluggy-1.0.0\r\nUsing --randomly-seed=3197426779\r\ndefault selector: EpollSelector\r\nServer version: PostgreSQL 15.2 (Ubuntu 15.2-1.pgdg22.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0, 64-bit\r\nlibpq wrapper implementation: c\r\nlibpq used: 130010\r\nlibpq compiled: 130010\r\nrootdir: /src\r\nconfigfile: pyproject.toml\r\nplugins: randomly-3.12.0, anyio-3.6.2, cov-4.1.0\r\ncollected 1 item\r\n\r\ntests/test_connection.py F                                               [100%]\r\n\r\n=================================== FAILURES ===================================\r\n__________________________ test_connection_warn_close __________________________\r\n\r\nconn_cls = <class 'psycopg.Connection'>, dsn = 'host=192.168.64.1 user=piro'\r\nrecwarn = WarningsRecorder(record=True)\r\n\r\n    def test_connection_warn_close(conn_cls, dsn, recwarn):\r\n        conn = conn_cls.connect(dsn)\r\n        conn.close()\r\n        del conn\r\n        assert not recwarn, [str(w.message) for w in recwarn.list]\r\n    \r\n        conn = conn_cls.connect(dsn)\r\n        del conn\r\n        assert \"IDLE\" in str(recwarn.pop(ResourceWarning).message)\r\n    \r\n        conn = conn_cls.connect(dsn)\r\n        conn.execute(\"select 1\")\r\n        del conn\r\n        assert \"INTRANS\" in str(recwarn.pop(ResourceWarning).message)\r\n    \r\n        conn = conn_cls.connect(dsn)\r\n        try:\r\n            conn.execute(\"select wat\")\r\n        except Exception:\r\n            pass\r\n        del conn\r\n>       assert \"INERROR\" in str(recwarn.pop(ResourceWarning).message)\r\nE       AssertionError: <class 'ResourceWarning'> not found in warning list\r\n\r\ntests/test_connection.py:110: AssertionError\r\n=========================== short test summary info ============================\r\nFAILED tests/test_connection.py::test_connection_warn_close - AssertionError:...\r\n============================== 1 failed in 0.07s ===============================\r\n```\r\n\r\n### Expected behaviour\r\n\r\nThe test passes using Python 3.7-3.11 and using Python 3.12 if Cython is not involved (for instance setting the env var `PSYCOPG_IMPL=python` before running the test).\r\n\r\nThe test tries to verify if the warning is raised on deleting an open connection (https://github.com/psycopg/psycopg/blob/580ea8c57b2e57ab1e7e6392e130348ac4d9b146/psycopg/psycopg/connection.py#L143-L160). It doesn't work only checking INERROR after an exception is raised.\r\n\r\nThe only other test failing is `tests/test_errors.py::test_diag_survives_cursor`.\r\n\r\n### OS\r\n\r\nLinux\r\n\r\n### Python version\r\n\r\n3.12\r\n\r\n### Cython version\r\n\r\n3.0.0b3\r\n\r\n### Additional context\r\n\r\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I would try to claim that the test is fragile and assumes there is no internal storage of the object when raising an exception. [The documentation](https://docs.python.org/3/reference/datamodel.html#object.__del__) has caveats around the relationship between `obj.__del__()` (which should be mapped to the `tp_finalize` slot) and `del obj`. PyPy adds even more caveats around when exactly the call to `__del__` occurs. \r\n\r\nDoes the test pass if you add a few calls to `gc.collect()` after `del conn`?",
            "created_at": "2023-05-27T19:33:36Z",
            "html_url": "https://github.com/cython/cython/issues/5448#issuecomment-1565658626",
            "id": 1565658626,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5448",
            "node_id": "IC_kwDOABDGAc5dUg4C",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1565658626/reactions"
            },
            "updated_at": "2023-05-27T19:33:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1565658626",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
                "events_url": "https://api.github.com/users/mattip/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattip/followers",
                "following_url": "https://api.github.com/users/mattip/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattip",
                "id": 823911,
                "login": "mattip",
                "node_id": "MDQ6VXNlcjgyMzkxMQ==",
                "organizations_url": "https://api.github.com/users/mattip/orgs",
                "received_events_url": "https://api.github.com/users/mattip/received_events",
                "repos_url": "https://api.github.com/users/mattip/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattip"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I know that `__del__` invocation is not totally reliable.\r\n\r\nNo, the tests don't pass after a few rounds of `gc.collect()` either. [The changeset introducing the xfails](https://github.com/psycopg/psycopg/commit/2eced44beeec34d847ab0fe5feabbfebb7a90aa6), linked above, also introduces a sequence of gc calls in one of the tests (there was one already in the other).\r\n\r\nThese tests happen to be reliable in all previous Python versions and in Python 3.12 if Cython is not involved. This doesn't mean that this is necessarily a regression (in Cython or in Python), although it has a certain smell.\r\n",
            "created_at": "2023-05-27T23:39:41Z",
            "html_url": "https://github.com/cython/cython/issues/5448#issuecomment-1565741556",
            "id": 1565741556,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5448",
            "node_id": "IC_kwDOABDGAc5dU1H0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1565741556/reactions"
            },
            "updated_at": "2023-05-27T23:39:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1565741556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/199429?v=4",
                "events_url": "https://api.github.com/users/dvarrazzo/events{/privacy}",
                "followers_url": "https://api.github.com/users/dvarrazzo/followers",
                "following_url": "https://api.github.com/users/dvarrazzo/following{/other_user}",
                "gists_url": "https://api.github.com/users/dvarrazzo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dvarrazzo",
                "id": 199429,
                "login": "dvarrazzo",
                "node_id": "MDQ6VXNlcjE5OTQyOQ==",
                "organizations_url": "https://api.github.com/users/dvarrazzo/orgs",
                "received_events_url": "https://api.github.com/users/dvarrazzo/received_events",
                "repos_url": "https://api.github.com/users/dvarrazzo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dvarrazzo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dvarrazzo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dvarrazzo"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5448/comments",
    "created_at": "2023-05-25T16:48:16Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5448/events",
    "html_url": "https://github.com/cython/cython/issues/5448",
    "id": 1726162975,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5448/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5m4ygf",
    "number": 5448,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5448/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5448/timeline",
    "title": "[BUG] unexpected behaviour with exceptions in Python 3.12a7 and Cython 3.0.0b3",
    "updated_at": "2023-05-27T23:39:42Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5448",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/199429?v=4",
        "events_url": "https://api.github.com/users/dvarrazzo/events{/privacy}",
        "followers_url": "https://api.github.com/users/dvarrazzo/followers",
        "following_url": "https://api.github.com/users/dvarrazzo/following{/other_user}",
        "gists_url": "https://api.github.com/users/dvarrazzo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dvarrazzo",
        "id": 199429,
        "login": "dvarrazzo",
        "node_id": "MDQ6VXNlcjE5OTQyOQ==",
        "organizations_url": "https://api.github.com/users/dvarrazzo/orgs",
        "received_events_url": "https://api.github.com/users/dvarrazzo/received_events",
        "repos_url": "https://api.github.com/users/dvarrazzo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dvarrazzo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dvarrazzo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dvarrazzo"
    }
}