{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\n\nI suspect that the underlying issues here are closely related to the following other bugs:\n- #5416\n- #5037\n- #1434 (I actually think the original report on this issue is resolved now, but some of the follow-up discussions indicate other related problems; it may make sense to split up that issue)\n\nIt appears that a `staticmethod` accepts a fused type, invocations of that method do not properly namespace the access to that method in the class's vtable. When compiled with a C compiler with default settings this produces a warning about an implicit declaration and then fails with an undefined symbol at runtime. When compiled with a C++ compiler, we see compile-time errors by default due to the undeclared function, e.g. \n\n```bash\n/home/nfs/vyasr/local/testing/cython/class_fused/declarations.cpp:4290:28: error: ‘__pyx_fuse_0make_static’ was not declared in this scope\n 4290 |   __pyx_t_2 = ((PyObject *)__pyx_fuse_0make_static(1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)\n```\n\n### Code to reproduce the behaviour:\n\n```cython\n# example code\n# distutils: language = c++\n\n\nctypedef fused IntOrFloat:\n    int\n    float\n\n\ncdef class A:\n    @staticmethod\n    cdef A make_static(IntOrFloat a):\n        return A()\n\n    cdef A make(self, IntOrFloat a):\n        return A()\n\n\ncdef A a = A()\ncdef A b = A.make_static(1)  # Fails\n# cdef A b = A().make(1)  # Succeeds\n```\n\n\n### Expected behaviour\n\nIf we inspect the generated file, the relevant function is placed inside a custom vtable struct:\n```cpp\n  struct __pyx_vtabstruct_12declarations_A {\n    struct __pyx_obj_12declarations_A *(*__pyx_fuse_0make_static)(int);\n    struct __pyx_obj_12declarations_A *(*__pyx_fuse_1make_static)(float);\n    struct __pyx_obj_12declarations_A *(*__pyx_fuse_0make)(struct __pyx_obj_12declarations_A *, int);\n    struct __pyx_obj_12declarations_A *(*__pyx_fuse_1make)(struct __pyx_obj_12declarations_A *, float);\n  };\n  static struct __pyx_vtabstruct_12declarations_A *__pyx_vtabptr_12declarations_A;\n```\n\nThe problem is that at the call site it is being accessed as if it were available in the global scope:\n```\n    /* \"declarations.pyx\":19\n   *\n   * cdef A a = A()\n   * cdef A b = A.make_static(1)  # Fails             # <<<<<<<<<<<<<<\n   * # cdef A b = A().make(1)  # Succeeds\n   */\n    __pyx_t_2 = ((PyObject *)__pyx_fuse_0make_static(1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)\n```\nThis code should properly access this via the `__pyx_vtabstruct_12declarations_A` struct.\n\n### OS\n\nUbuntu 20.04\n\n### Python version\n\n3.13.1\n\n### Cython version\n\n3.0.12\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I haven't checked the code-gen for non-fused types. But intuitively I wouldn't expect static methods to be in a vtable at all.",
            "created_at": "2025-03-18T21:22:44Z",
            "html_url": "https://github.com/cython/cython/issues/6740#issuecomment-2734763919",
            "id": 2734763919,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6740",
            "node_id": "IC_kwDOABDGAc6jAS-P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2734763919/reactions"
            },
            "updated_at": "2025-03-18T21:22:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2734763919",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6740/comments",
    "created_at": "2025-03-18T20:50:15Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6740/events",
    "html_url": "https://github.com/cython/cython/issues/6740",
    "id": 2929818883,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6740/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6uoX0D",
    "number": 6740,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6740/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6740/timeline",
    "title": "[BUG] Cython does not properly access the vtable for staticmethods accepting fused types",
    "type": null,
    "updated_at": "2025-03-18T21:22:46Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6740",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vyasr",
        "id": 1538165,
        "login": "vyasr",
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vyasr",
        "user_view_type": "public"
    }
}