{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Is your feature request related to a problem? Please describe.\n\nIt can sometimes happen that Cython infers a C type for a value or variable, but then all usages require a Python object and generate separate object conversion code. There are probably cases where this could be detected and avoided.\n\nThis specifically applies to types with an equivalent C type that we try to prefer:\n- Python `bool` -> `bint` (which, luckily, is a cheap conversion)\n- Python `float` -> C `double`\n- ctuples\n\n\n### Describe the solution you'd like.\n\n_No response_\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "There's a few of things we could potentially do for this:\n\n* warn users about code that they've written where they've added typing that causes boxing/unboxing - this is probably easiest and highest impact\n* Adjust our own type inference to avoid it. I suspect this is hard to implement generally.\n* Possibly change how we interpret annotations to avoid it (e.g. an annotation of `float` is currently interpreted as \"C double\" but in principle we could pick either \"C double\" or \"Python float\" and we'd still be respecting the annotation). This might be a bit opaque.",
            "created_at": "2025-05-29T20:52:40Z",
            "html_url": "https://github.com/cython/cython/issues/6925#issuecomment-2920558736",
            "id": 2920558736,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6925",
            "node_id": "IC_kwDOABDGAc6uFDCQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2920558736/reactions"
            },
            "updated_at": "2025-05-29T20:52:40Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2920558736",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Adjust our own type inference to avoid it. I suspect this is hard to implement generally.\n\nIt would only be a heuristic, rarely perfect. It would never beat dedicated user declarations, but could help e.g. in fused functions, where type inference can simplify the cross-type coding considerably.\n\nWe could count usage types, possibly treating inside/outside of loops differently, and base our decision on that during the type inference cycle.",
            "created_at": "2025-05-30T06:06:33Z",
            "html_url": "https://github.com/cython/cython/issues/6925#issuecomment-2921325851",
            "id": 2921325851,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6925",
            "node_id": "IC_kwDOABDGAc6uH-Ub",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2921325851/reactions"
            },
            "updated_at": "2025-05-30T06:06:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2921325851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I have another idea which I am playing with right now. Maybe, we can use `PyCapsule` for optimising boxing/unboxing. We can introduce type `list[int]` ( in pure python `list[cython.int]`). Assigning to/from this type will cause wrapping/unwrapping the value with capsule.\n\nHence code:\n\n```cython\ncdef int i = 0\ncdef list[int] j = []\nj[0] = i\n```\n\nwill be translated to:\n```c\nstatic int __pyx_v_7capsule_i;\n__pyx_v_7capsule_i = 0;\n...\n/*\n * cdef list[int] j = ()\n * j[0] = i             # <<<<<<<<<<<<<<\n *Â·\n*/\n  __pyx_t_2 = PyCapsule_New((void *) &__pyx_v_7foo_i, NULL, NULL);\n  if (unlikely((__Pyx_SetItemInt(__pyx_v_7foo_j, 0, ((PyObject *)__pyx_t_2), long, 1, __Pyx_PyLong_From_long, 1, 0, 1, 1) < 0))) __PYX_ERR(0, 9, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n```\n\nOf course this solution will have some overhead of creating new PyObject via `PyCapsule_New` but I iI am thinking that it should have smaller footprint than doing full conversion to C <-> PyObject as is now... Moreover using pointers will introduce limits (e.g. I suppose Capsule cannot be used to return data from function: `cdef bar() -> list[int]:`)",
            "created_at": "2025-06-15T08:34:14Z",
            "html_url": "https://github.com/cython/cython/issues/6925#issuecomment-2973589783",
            "id": 2973589783,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6925",
            "node_id": "IC_kwDOABDGAc6xPWEX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2973589783/reactions"
            },
            "updated_at": "2025-06-15T08:36:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2973589783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think the \"data from functions\" would be the big issue there - it's probably generally quite to reason that you definitely aren't going to pass your fake capsules anywhere external.\n\nThe other thing is that Python does a couple of optimizations to make allocating small/medium ints efficient:\n* small ints are shared so you get a new reference rather than a new objects\n* medium ints are allocated with a freelist (i.e. it can usually reuse memory and avoid an allocation)\n\nSo I'd be surprised if it beat the int version. I haven't measured it though",
            "created_at": "2025-06-15T08:46:42Z",
            "html_url": "https://github.com/cython/cython/issues/6925#issuecomment-2973596182",
            "id": 2973596182,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6925",
            "node_id": "IC_kwDOABDGAc6xPXoW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2973596182/reactions"
            },
            "updated_at": "2025-06-15T08:46:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2973596182",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I am aware about limitations of integers. It's an experiment I am playing with. Not 100% sure it is worth it too. I will try to create minimal solution and measure the difference. Maybe, it will be more efficient for other data types - e.g. strings (`char *`/`cython.p_char`)?\n\nEDIT: Maybe we can also have freelist of capsules too which will be reused hence in this case user will pass just pointers and it can be reused on only conversion numbers but also other data structurs (e.g. `struct`)\n\nEDIT2:\n> you definitely aren't going to pass your fake capsules anywhere external.\n\nthe solution is not intended to leak outside the cython. The main motivation is to allow store C values into the python containers and use it work with it inside the cython - this will allow users fluent integration of C code. Additional questionable benefit is performance - not sure if it will yield any at least in numbers as mentioned above.\n",
            "created_at": "2025-06-15T08:55:31Z",
            "html_url": "https://github.com/cython/cython/issues/6925#issuecomment-2973600513",
            "id": 2973600513,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6925",
            "node_id": "IC_kwDOABDGAc6xPYsB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2973600513/reactions"
            },
            "updated_at": "2025-06-15T09:11:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2973600513",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> strings (`char *`/`cython.p_char`)\n\nPython bytes/str objects are actually quite efficient. In comparison, C's `char*` lacks length information and is therefore much more inefficient (and sometimes dangerous) as a replacement.",
            "created_at": "2025-06-18T08:11:16Z",
            "html_url": "https://github.com/cython/cython/issues/6925#issuecomment-2983159618",
            "id": 2983159618,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6925",
            "node_id": "IC_kwDOABDGAc6xz2dC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2983159618/reactions"
            },
            "updated_at": "2025-06-18T08:11:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2983159618",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6925/comments",
    "created_at": "2025-05-29T05:28:20Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-05-29T05:30:21Z",
            "event": "labeled",
            "id": 17861997120,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "LE_lADOABDGAc64ulqzzwAAAAQoqHJA",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/17861997120"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-05-29T05:30:21Z",
            "event": "labeled",
            "id": 17861997126,
            "label": {
                "color": "444444",
                "name": "Optimization"
            },
            "node_id": "LE_lADOABDGAc64ulqzzwAAAAQoqHJG",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/17861997126"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-05-29T08:36:12Z",
            "event": "renamed",
            "id": 17864277778,
            "node_id": "RTE_lADOABDGAc64ulqzzwAAAAQoyz8S",
            "performed_via_github_app": null,
            "rename": {
                "from": "[ENH] Detect inefficient unboxing+boxing cycles",
                "to": "[ENH] Detect and avoid inefficient unboxing+boxing cycles"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/17864277778"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53637421?v=4",
                "events_url": "https://api.github.com/users/GalaxySnail/events{/privacy}",
                "followers_url": "https://api.github.com/users/GalaxySnail/followers",
                "following_url": "https://api.github.com/users/GalaxySnail/following{/other_user}",
                "gists_url": "https://api.github.com/users/GalaxySnail/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/GalaxySnail",
                "id": 53637421,
                "login": "GalaxySnail",
                "node_id": "MDQ6VXNlcjUzNjM3NDIx",
                "organizations_url": "https://api.github.com/users/GalaxySnail/orgs",
                "received_events_url": "https://api.github.com/users/GalaxySnail/received_events",
                "repos_url": "https://api.github.com/users/GalaxySnail/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/GalaxySnail/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GalaxySnail/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/GalaxySnail",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-06-11T02:03:20Z",
            "event": "subscribed",
            "id": 18085244020,
            "node_id": "SE_lADOABDGAc64ulqzzwAAAAQ19ux0",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/18085244020"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6925/events",
    "html_url": "https://github.com/cython/cython/issues/6925",
    "id": 3099220659,
    "labels": [
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556272,
            "name": "Optimization",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNzI=",
            "url": "https://api.github.com/repos/cython/cython/labels/Optimization"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6925/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc64ulqz",
    "number": 6925,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6925/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6925/timeline",
    "title": "[ENH] Detect and avoid inefficient unboxing+boxing cycles",
    "type": null,
    "updated_at": "2025-06-18T08:11:16Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6925",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder",
        "user_view_type": "public"
    }
}