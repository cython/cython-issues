{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "With current cython master pandas does not build.  Bisecting identifies the current latest commit (\r\n5204d86989493855fdd0acd20debd9d0a270bb23 ) as the first bad commit.\r\n\r\nattn @WillAyd \r\n\r\n\r\n<details>\r\n\r\n```\r\n(bleeding) ✔  ~/source/other_source/pandas [master {pandas/master}|✚ 2]\r\njupiter@15:19  ➤  pip install -v .\r\nNon-user install because user site-packages disabled\r\nCreated temporary directory: /tmp/pip-ephem-wheel-cache-zcmyaxf3\r\nCreated temporary directory: /tmp/pip-req-tracker-dfm6xgbp\r\nInitialized build tracking at /tmp/pip-req-tracker-dfm6xgbp\r\nCreated build tracker: /tmp/pip-req-tracker-dfm6xgbp\r\nEntered build tracker: /tmp/pip-req-tracker-dfm6xgbp\r\nCreated temporary directory: /tmp/pip-install-_tjupc3v\r\nProcessing /home/tcaswell/source/other_source/pandas\r\n  Created temporary directory: /tmp/pip-req-build-eh2hlgu3\r\n  Added file:///home/tcaswell/source/other_source/pandas to build tracker '/tmp/pip-req-tracker-dfm6xgbp'\r\n    Running setup.py (path:/tmp/pip-req-build-eh2hlgu3/setup.py) egg_info for package from file:///home/tcaswell/source/other_source/pandas\r\n    Running command python setup.py egg_info\r\n    warning: pandas/_libs/groupby.pyx:1101:26: Unreachable code\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n        cdef Py_ssize_t itemsize\r\n        cdef bint dtype_signed\r\n        cdef char kind\r\n        itemsize = -1\r\n        cdef bint ___pyx_int64_t_is_signed\r\n        ___pyx_int64_t_is_signed = not (<___pyx_int64_t> -1 > 0)\r\n                                        ^\r\n    ------------------------------------------------------------\r\n\r\n    (tree fragment):19:37: '___pyx_int64_t' is not a type identifier\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n        cdef char kind\r\n        itemsize = -1\r\n        cdef bint ___pyx_int64_t_is_signed\r\n        ___pyx_int64_t_is_signed = not (<___pyx_int64_t> -1 > 0)\r\n        cdef bint ___pyx_uint64_t_is_signed\r\n        ___pyx_uint64_t_is_signed = not (<___pyx_uint64_t> -1 > 0)\r\n                                         ^\r\n    ------------------------------------------------------------\r\n\r\n    (tree fragment):21:38: '___pyx_uint64_t' is not a type identifier\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: undeclared name not builtin: ___pyx_int64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: '___pyx_int64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n        ctypedef struct __Pyx_memviewslice:\r\n            void *memview\r\n\r\n        void __PYX_XDEC_MEMVIEW(__Pyx_memviewslice *, int have_gil)\r\n        bint __pyx_memoryview_check(object)\r\n        ctypedef long long ___pyx_int64_t \"__pyx_t_5numpy_int64_t\"\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    __pyxutil:15:4: Previous declaration is here\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: undeclared name not builtin: ___pyx_uint64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: '___pyx_uint64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n\r\n        void __PYX_XDEC_MEMVIEW(__Pyx_memviewslice *, int have_gil)\r\n        bint __pyx_memoryview_check(object)\r\n        ctypedef long long ___pyx_int64_t \"__pyx_t_5numpy_int64_t\"\r\n        ctypedef double ___pyx_float64_t \"__pyx_t_5numpy_float64_t\"\r\n        ctypedef unsigned long long ___pyx_uint64_t \"__pyx_t_5numpy_uint64_t\"\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    __pyxutil:17:4: Previous declaration is here\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: undeclared name not builtin: ___pyx_float64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: '___pyx_float64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            void *memview\r\n\r\n        void __PYX_XDEC_MEMVIEW(__Pyx_memviewslice *, int have_gil)\r\n        bint __pyx_memoryview_check(object)\r\n        ctypedef long long ___pyx_int64_t \"__pyx_t_5numpy_int64_t\"\r\n        ctypedef double ___pyx_float64_t \"__pyx_t_5numpy_float64_t\"\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    __pyxutil:16:4: Previous declaration is here\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: undeclared name not builtin: ___pyx_int64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: '___pyx_int64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: Previous declaration is here\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: undeclared name not builtin: ___pyx_float64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: '___pyx_float64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: Previous declaration is here\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: undeclared name not builtin: ___pyx_uint64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: '___pyx_uint64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: Previous declaration is here\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n        cdef Py_ssize_t itemsize\r\n        cdef bint dtype_signed\r\n        cdef char kind\r\n        itemsize = -1\r\n        cdef bint ___pyx_int64_t_is_signed\r\n        ___pyx_int64_t_is_signed = not (<___pyx_int64_t> -1 > 0)\r\n                                        ^\r\n    ------------------------------------------------------------\r\n\r\n    (tree fragment):19:37: '___pyx_int64_t' is not a type identifier\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n        cdef char kind\r\n        itemsize = -1\r\n        cdef bint ___pyx_int64_t_is_signed\r\n        ___pyx_int64_t_is_signed = not (<___pyx_int64_t> -1 > 0)\r\n        cdef bint ___pyx_uint64_t_is_signed\r\n        ___pyx_uint64_t_is_signed = not (<___pyx_uint64_t> -1 > 0)\r\n                                         ^\r\n    ------------------------------------------------------------\r\n\r\n    (tree fragment):21:38: '___pyx_uint64_t' is not a type identifier\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: undeclared name not builtin: ___pyx_int64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: '___pyx_int64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: Previous declaration is here\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: undeclared name not builtin: ___pyx_uint64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: '___pyx_uint64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: Previous declaration is here\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: undeclared name not builtin: ___pyx_float64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: '___pyx_float64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n            values = [self.right, self.left]\r\n\r\n            sort_order = np.lexsort(values)\r\n            return is_monotonic(sort_order, False)[0]\r\n\r\n        def get_indexer(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:122:4: Previous declaration is here\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: undeclared name not builtin: ___pyx_int64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: '___pyx_int64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: Previous declaration is here\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: undeclared name not builtin: ___pyx_float64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: '___pyx_float64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: Previous declaration is here\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: undeclared name not builtin: ___pyx_uint64_t\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: '___pyx_uint64_t' redeclared\r\n\r\n    Error compiling Cython file:\r\n    ------------------------------------------------------------\r\n    ...\r\n                    raise KeyError(\r\n                        'indexer does not intersect a unique set of intervals')\r\n                old_len = result.data.n\r\n            return result.to_array().astype('intp')\r\n\r\n        def get_indexer_non_unique(self, scalar_t[:] target):\r\n       ^\r\n    ------------------------------------------------------------\r\n\r\n    pandas/_libs/intervaltree.pxi:150:4: Previous declaration is here\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-req-build-eh2hlgu3/setup.py\", line 794, in <module>\r\n        setup_package()\r\n      File \"/tmp/pip-req-build-eh2hlgu3/setup.py\", line 764, in setup_package\r\n        ext_modules=maybe_cythonize(extensions, compiler_directives=directives),\r\n      File \"/tmp/pip-req-build-eh2hlgu3/setup.py\", line 537, in maybe_cythonize\r\n        return cythonize(extensions, *args, **kwargs)\r\n      File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/Cython/Build/Dependencies.py\", line 1105, in cythonize\r\n        cythonize_one(*args)\r\n      File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/Cython/Build/Dependencies.py\", line 1263, in cythonize_one\r\n        raise CompileError(None, pyx_file)\r\n    Cython.Compiler.Errors.CompileError: pandas/_libs/interval.pyx\r\n    Compiling pandas/_libs/algos.pyx because it changed.\r\n    Compiling pandas/_libs/groupby.pyx because it changed.\r\n    Compiling pandas/_libs/hashing.pyx because it changed.\r\n    Compiling pandas/_libs/hashtable.pyx because it changed.\r\n    Compiling pandas/_libs/index.pyx because it changed.\r\n    Compiling pandas/_libs/indexing.pyx because it changed.\r\n    Compiling pandas/_libs/internals.pyx because it changed.\r\n    Compiling pandas/_libs/interval.pyx because it changed.\r\n    Compiling pandas/_libs/join.pyx because it changed.\r\n    Compiling pandas/_libs/lib.pyx because it changed.\r\n    Compiling pandas/_libs/missing.pyx because it changed.\r\n    Compiling pandas/_libs/parsers.pyx because it changed.\r\n    Compiling pandas/_libs/reduction.pyx because it changed.\r\n    Compiling pandas/_libs/ops.pyx because it changed.\r\n    Compiling pandas/_libs/ops_dispatch.pyx because it changed.\r\n    Compiling pandas/_libs/properties.pyx because it changed.\r\n    Compiling pandas/_libs/reshape.pyx because it changed.\r\n    Compiling pandas/_libs/sparse.pyx because it changed.\r\n    Compiling pandas/_libs/tslib.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/c_timestamp.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/ccalendar.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/conversion.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/fields.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/frequencies.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/nattype.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/np_datetime.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/offsets.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/parsing.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/period.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/resolution.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/strptime.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/timedeltas.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/timestamps.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/timezones.pyx because it changed.\r\n    Compiling pandas/_libs/tslibs/tzconversion.pyx because it changed.\r\n    Compiling pandas/_libs/testing.pyx because it changed.\r\n    Compiling pandas/_libs/window/aggregations.pyx because it changed.\r\n    Compiling pandas/_libs/window/indexers.pyx because it changed.\r\n    Compiling pandas/_libs/writers.pyx because it changed.\r\n    Compiling pandas/io/sas/sas.pyx because it changed.\r\n    [ 1/40] Cythonizing pandas/_libs/algos.pyx\r\n    [ 2/40] Cythonizing pandas/_libs/groupby.pyx\r\n    [ 3/40] Cythonizing pandas/_libs/hashing.pyx\r\n    [ 4/40] Cythonizing pandas/_libs/hashtable.pyx\r\n    [ 5/40] Cythonizing pandas/_libs/index.pyx\r\n    [ 6/40] Cythonizing pandas/_libs/indexing.pyx\r\n    [ 7/40] Cythonizing pandas/_libs/internals.pyx\r\n    [ 8/40] Cythonizing pandas/_libs/interval.pyx\r\nCleaning up...\r\n  Removing source in /tmp/pip-req-build-eh2hlgu3\r\nRemoved file:///home/tcaswell/source/other_source/pandas from build tracker '/tmp/pip-req-tracker-dfm6xgbp'\r\nRemoved build tracker: '/tmp/pip-req-tracker-dfm6xgbp'\r\nERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.\r\nException information:\r\nTraceback (most recent call last):\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/cli/base_command.py\", line 186, in _main\r\n    status = self.run(options, args)\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/commands/install.py\", line 331, in run\r\n    resolver.resolve(requirement_set)\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/legacy_resolve.py\", line 177, in resolve\r\n    discovered_reqs.extend(self._resolve_one(requirement_set, req))\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/legacy_resolve.py\", line 333, in _resolve_one\r\n    abstract_dist = self._get_abstract_dist_for(req_to_install)\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/legacy_resolve.py\", line 282, in _get_abstract_dist_for\r\n    abstract_dist = self.preparer.prepare_linked_requirement(req)\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/operations/prepare.py\", line 515, in prepare_linked_requirement\r\n    abstract_dist = _get_prepared_distribution(\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/operations/prepare.py\", line 95, in _get_prepared_distribution\r\n    abstract_dist.prepare_distribution_metadata(finder, build_isolation)\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/distributions/sdist.py\", line 40, in prepare_distribution_metadata\r\n    self.req.prepare_metadata()\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/req/req_install.py\", line 564, in prepare_metadata\r\n    self.metadata_directory = self._generate_metadata()\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/req/req_install.py\", line 538, in _generate_metadata\r\n    return generate_metadata_legacy(\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/operations/build/metadata_legacy.py\", line 115, in generate_metadata\r\n    call_subprocess(\r\n  File \"/home/tcaswell/.virtualenvs/bleeding/lib/python3.9/site-packages/pip/_internal/utils/subprocess.py\", line 242, in call_subprocess\r\n    raise InstallationError(exc_msg)\r\npip._internal.exceptions.InstallationError: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.\r\n```\r\n\r\n</details>",
    "closed_at": "2020-04-26T08:35:33Z",
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Most of it is probably related to https://github.com/cython/cython/issues/3544 and fixed by https://github.com/cython/cython/pull/3546. If it's possible to report whether the fix works that'd be nice.\r\n\r\nQuick summary is: double underscore names were changed so they followed Python rules and get mangled within a class. This looks like a bad idea in hindsight since (a) a lot of C names start with double underscores and (b) a lot of people have liked to use double underscores in their code.\r\n\r\n-------------------------\r\n\r\nI'm slightly surprised at where the your bisection points to, so it's possible that I've misidentified the error.",
            "created_at": "2020-04-24T19:47:41Z",
            "html_url": "https://github.com/cython/cython/issues/3548#issuecomment-619208387",
            "id": 619208387,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3548",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTIwODM4Nw==",
            "updated_at": "2020-04-24T19:52:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/619208387",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@da-woods It builds with your branch, but it does not contain what I think is the offending commit.   If I cherry-pick the tip of master to your branch it also works.",
            "created_at": "2020-04-24T23:27:59Z",
            "html_url": "https://github.com/cython/cython/issues/3548#issuecomment-619279217",
            "id": 619279217,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3548",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTI3OTIxNw==",
            "updated_at": "2020-04-24T23:27:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/619279217",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
                "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
                "followers_url": "https://api.github.com/users/tacaswell/followers",
                "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
                "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tacaswell",
                "id": 199813,
                "login": "tacaswell",
                "node_id": "MDQ6VXNlcjE5OTgxMw==",
                "organizations_url": "https://api.github.com/users/tacaswell/orgs",
                "received_events_url": "https://api.github.com/users/tacaswell/received_events",
                "repos_url": "https://api.github.com/users/tacaswell/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tacaswell"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for the report. Don't really know why it breaks (seems to be related to memory views), but it's not an important commit, so I just reverted it.",
            "created_at": "2020-04-26T08:35:33Z",
            "html_url": "https://github.com/cython/cython/issues/3548#issuecomment-619509851",
            "id": 619509851,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3548",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTUwOTg1MQ==",
            "updated_at": "2020-04-26T08:35:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/619509851",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Reverting that commit does not fix the problem.  I'm re-running the bisection, hopefully I didn't make a mistake the first time....",
            "created_at": "2020-04-27T03:24:22Z",
            "html_url": "https://github.com/cython/cython/issues/3548#issuecomment-619690546",
            "id": 619690546,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3548",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTY5MDU0Ng==",
            "updated_at": "2020-04-27T03:24:22Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/619690546",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
                "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
                "followers_url": "https://api.github.com/users/tacaswell/followers",
                "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
                "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tacaswell",
                "id": 199813,
                "login": "tacaswell",
                "node_id": "MDQ6VXNlcjE5OTgxMw==",
                "organizations_url": "https://api.github.com/users/tacaswell/orgs",
                "received_events_url": "https://api.github.com/users/tacaswell/received_events",
                "repos_url": "https://api.github.com/users/tacaswell/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tacaswell"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Sorry, I screwed up.  I re-ran the bisect and got\r\n\r\n```\r\ngit bisect start\r\n# good: [f18e3c9f9ce35ebf2cf2713775f35c47351e9c15] Make \"cimport numpy\" without import_array() safer by automatically calling it (GH-3524)\r\ngit bisect good f18e3c9f9ce35ebf2cf2713775f35c47351e9c15\r\n# bad: [203ec86c39165c4001aa9238268f1911db1e8728] Update and split changelog for 3.0a2.\r\ngit bisect bad 203ec86c39165c4001aa9238268f1911db1e8728\r\n# good: [090809daa9f8332fc5f68c498508383bd2f8d5d6] Disable the PEP-487 test in PyPy because it fails in travis (PyPy 7.1.1).\r\ngit bisect good 090809daa9f8332fc5f68c498508383bd2f8d5d6\r\n# good: [0917df8f32515daa0c67d0caf2104462aebd36ae] Guard helper function against missing usage when direct type slot access is disabled.\r\ngit bisect good 0917df8f32515daa0c67d0caf2104462aebd36ae\r\n# good: [3de7a4b8fb7ce045222e13ca02541f6a70e89c2e] Tune some internal calls into fastcall/vectorcall (GH-3540)\r\ngit bisect good 3de7a4b8fb7ce045222e13ca02541f6a70e89c2e\r\n# bad: [b709334b7af7cbafa017a8f27dc9bbeafda5af94] Remove unused import.\r\ngit bisect bad b709334b7af7cbafa017a8f27dc9bbeafda5af94\r\n# bad: [abeb082098c13e243a2e2658f9eb45f1c151b091] Mangle __arg argument names in methods (GH-3123)\r\ngit bisect bad abeb082098c13e243a2e2658f9eb45f1c151b091\r\n# first bad commit: [abeb082098c13e243a2e2658f9eb45f1c151b091] Mangle __arg argument names in methods (GH-3123)\r\n```\r\n\r\nwhich makes a lot more sense and points to @da-woods 's PR  #3546 actually being the fix.",
            "created_at": "2020-04-27T04:36:56Z",
            "html_url": "https://github.com/cython/cython/issues/3548#issuecomment-619711186",
            "id": 619711186,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3548",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTcxMTE4Ng==",
            "updated_at": "2020-04-27T04:36:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/619711186",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
                "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
                "followers_url": "https://api.github.com/users/tacaswell/followers",
                "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
                "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tacaswell",
                "id": 199813,
                "login": "tacaswell",
                "node_id": "MDQ6VXNlcjE5OTgxMw==",
                "organizations_url": "https://api.github.com/users/tacaswell/orgs",
                "received_events_url": "https://api.github.com/users/tacaswell/received_events",
                "repos_url": "https://api.github.com/users/tacaswell/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tacaswell"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ok, thanks for the update. I put the commit back in that I had reverted and will merge #3546 then.",
            "created_at": "2020-04-27T09:54:39Z",
            "html_url": "https://github.com/cython/cython/issues/3548#issuecomment-619870572",
            "id": 619870572,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3548",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTg3MDU3Mg==",
            "updated_at": "2020-04-27T09:54:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/619870572",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "happy to report the master branches are building together again :)\r\n\r\nThank you for you quick response and sorry again for the incorrect initial assessment. ",
            "created_at": "2020-04-27T14:23:51Z",
            "html_url": "https://github.com/cython/cython/issues/3548#issuecomment-620020218",
            "id": 620020218,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3548",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDAyMDIxOA==",
            "updated_at": "2020-04-27T14:24:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/620020218",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
                "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
                "followers_url": "https://api.github.com/users/tacaswell/followers",
                "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
                "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tacaswell",
                "id": 199813,
                "login": "tacaswell",
                "node_id": "MDQ6VXNlcjE5OTgxMw==",
                "organizations_url": "https://api.github.com/users/tacaswell/orgs",
                "received_events_url": "https://api.github.com/users/tacaswell/received_events",
                "repos_url": "https://api.github.com/users/tacaswell/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tacaswell"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3548/comments",
    "created_at": "2020-04-24T19:21:53Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
                "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
                "followers_url": "https://api.github.com/users/WillAyd/followers",
                "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
                "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/WillAyd",
                "id": 609873,
                "login": "WillAyd",
                "node_id": "MDQ6VXNlcjYwOTg3Mw==",
                "organizations_url": "https://api.github.com/users/WillAyd/orgs",
                "received_events_url": "https://api.github.com/users/WillAyd/received_events",
                "repos_url": "https://api.github.com/users/WillAyd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/WillAyd"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-24T19:21:53Z",
            "event": "mentioned",
            "id": 3270727068,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI3MDcyNzA2OA==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3270727068"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
                "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
                "followers_url": "https://api.github.com/users/WillAyd/followers",
                "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
                "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/WillAyd",
                "id": 609873,
                "login": "WillAyd",
                "node_id": "MDQ6VXNlcjYwOTg3Mw==",
                "organizations_url": "https://api.github.com/users/WillAyd/orgs",
                "received_events_url": "https://api.github.com/users/WillAyd/received_events",
                "repos_url": "https://api.github.com/users/WillAyd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/WillAyd"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-24T19:21:53Z",
            "event": "subscribed",
            "id": 3270727070,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNzA3MjcwNzA=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3270727070"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-24T23:27:59Z",
            "event": "mentioned",
            "id": 3271323832,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI3MTMyMzgzMg==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3271323832"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-24T23:27:59Z",
            "event": "subscribed",
            "id": 3271323834,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNzEzMjM4MzQ=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3271323834"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "f09e61ab721ad51526ec7a6798fc01d8346f539d",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/f09e61ab721ad51526ec7a6798fc01d8346f539d",
            "created_at": "2020-04-26T08:32:22Z",
            "event": "referenced",
            "id": 3272696438,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzI2OTY0Mzg=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3272696438"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-26T08:35:33Z",
            "event": "closed",
            "id": 3272699000,
            "node_id": "MDExOkNsb3NlZEV2ZW50MzI3MjY5OTAwMA==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3272699000"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-27T04:36:57Z",
            "event": "mentioned",
            "id": 3273927879,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI3MzkyNzg3OQ==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3273927879"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-27T04:36:57Z",
            "event": "subscribed",
            "id": 3273927883,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNzM5Mjc4ODM=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3273927883"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-27T09:54:50Z",
            "event": "milestoned",
            "id": 3274957039,
            "milestone": {
                "title": "3.0"
            },
            "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDMyNzQ5NTcwMzk=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3274957039"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-27T09:54:58Z",
            "event": "labeled",
            "id": 3274957606,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMyNzQ5NTc2MDY=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3274957606"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "25b7d7e415d179077a6d8ee150d9bc59bc5e09e0",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/25b7d7e415d179077a6d8ee150d9bc59bc5e09e0",
            "created_at": "2020-04-27T10:14:43Z",
            "event": "referenced",
            "id": 3275037989,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzUwMzc5ODk=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3275037989"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3548/events",
    "html_url": "https://github.com/cython/cython/issues/3548",
    "id": 606529962,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3548/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 209,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\n– New version scheme: 3.x instead of 0.x.\r\n– Change default `language_level` from `2` to `3`.\r\n– Change default for `binding` directive from `False` to `True`.\r\n– Fix some Python compatibility issues (if possible, allowing for breaking changes).\r\n",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 19,
        "state": "open",
        "title": "3.0",
        "updated_at": "2020-04-28T12:50:47Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "MDU6SXNzdWU2MDY1Mjk5NjI=",
    "number": 3548,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "changes on cython master broke the pandas build",
    "updated_at": "2020-04-27T14:24:03Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3548",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
        "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
        "followers_url": "https://api.github.com/users/tacaswell/followers",
        "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
        "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tacaswell",
        "id": 199813,
        "login": "tacaswell",
        "node_id": "MDQ6VXNlcjE5OTgxMw==",
        "organizations_url": "https://api.github.com/users/tacaswell/orgs",
        "received_events_url": "https://api.github.com/users/tacaswell/received_events",
        "repos_url": "https://api.github.com/users/tacaswell/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tacaswell"
    }
}