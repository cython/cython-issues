{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThere is currently no way to define function pointers in pure Python syntax, e.g.\r\n```cython\r\nint (*grail)(int, char*) except -1\r\n```\r\n\r\n**Describe the solution you'd like**\r\nopen for debate\r\n\r\nSee:\r\nhttps://github.com/cython/cython/pull/333\r\nhttps://docs.python.org/3/library/typing.html#typing.Callable",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I don't think we should use `typing.Callable` (because I think it implies a Python capable to me), but it might be consistent to borrow it's syntax?",
            "created_at": "2021-07-13T07:11:19Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-878837556",
            "id": 878837556,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3ODgzNzU1Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/878837556/reactions"
            },
            "updated_at": "2021-07-13T07:11:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/878837556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "For the `except` declarations (and any Cython-specific markers in general), perhaps that could be done by passing a call to the `exceptval()` decorator as a third \"index\"?\r\n```py\r\ngrail = cython.FuncPointer[[int, pointer(char)], int, exceptval(-1)]\r\n```\r\nThe mismatch between typing-style indexing and function calls does look rather odd though. Abusing slice syntax to do `\"return\": int` might also be reasonable, since the return value isn't very well identified here.",
            "created_at": "2021-07-13T11:28:11Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-879007793",
            "id": 879007793,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3OTAwNzc5Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/879007793/reactions"
            },
            "updated_at": "2021-07-13T11:28:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/879007793",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the return value isn't very well identified here.\n\nI'd rather rely on keyword arguments for the readability.\n\nWe can easily require some kind of strict spelling, even if Python syntax does not enforce it by itself, since users will want to run it through Cython in the end.\n",
            "created_at": "2021-07-13T12:07:36Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-879031424",
            "id": 879031424,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3OTAzMTQyNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/879031424/reactions"
            },
            "updated_at": "2021-07-13T12:07:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/879031424",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@scoder Why not use the syntax similar to `cython.typedef`?  For example:\r\n\r\n`ctypedef int (*grail)(int, char*) except -1`\r\n\r\nbecomes:\r\n\r\n`grail = typedef(int, function=True)(int, pointer(char), _except=-1)`\r\n\r\nThis is relatively similar to the `ctypedef` statement, and easy to implement in Python (just add `__new__` to `Shadow.typedef` that returns a different class when the argument `function` is given). \r\n\r\nAnother option is to lose the `function` argument, but than you might need to check the source code for the calling line of code (e.g. using the frame or [traceback](https://stackoverflow.com/a/72817601/2642356)) whether this is a function definition, or a regular type.",
            "created_at": "2023-09-21T20:59:13Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-1730294447",
            "id": 1730294447,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc5nIjKv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1730294447/reactions"
            },
            "updated_at": "2023-09-21T21:00:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1730294447",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4324329?v=4",
                "events_url": "https://api.github.com/users/erezinman/events{/privacy}",
                "followers_url": "https://api.github.com/users/erezinman/followers",
                "following_url": "https://api.github.com/users/erezinman/following{/other_user}",
                "gists_url": "https://api.github.com/users/erezinman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/erezinman",
                "id": 4324329,
                "login": "erezinman",
                "node_id": "MDQ6VXNlcjQzMjQzMjk=",
                "organizations_url": "https://api.github.com/users/erezinman/orgs",
                "received_events_url": "https://api.github.com/users/erezinman/received_events",
                "repos_url": "https://api.github.com/users/erezinman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/erezinman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/erezinman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/erezinman",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm currently attempting to implement something like this.\n\nMy suggestion:\n```\ncython.pointer[cython.function_type([cython.int], cython.double)]   # double (*)(int) except *\ncython.pointer[cython.function_type([cython.int], cython.double, nogil=True)]  # double (*)(int) except * nogil\ncython.pointer[cython.function_type([cython.int], cython.double, has_varargs=True)]  # double (*)(int, ...) except *\ncython.pointer[cython.function_type([cython.int], cython.double, noexcept=True)]  # double (*)(int) noexcept\ncython.pointer[cython.function_type([cython.int], cython.double, except_plus=True)]  # double (*)(int) except +\ncython.pointer[cython.function_type([cython.int], cython.double, except_val=-1)]  # double (*)(int) except? -1\n```",
            "created_at": "2025-08-29T10:31:31Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-3236563217",
            "id": 3236563217,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc7A6gkR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3236563217/reactions"
            },
            "updated_at": "2025-08-29T10:35:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3236563217",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/146099301?v=4",
                "events_url": "https://api.github.com/users/dgrunwald-qt/events{/privacy}",
                "followers_url": "https://api.github.com/users/dgrunwald-qt/followers",
                "following_url": "https://api.github.com/users/dgrunwald-qt/following{/other_user}",
                "gists_url": "https://api.github.com/users/dgrunwald-qt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dgrunwald-qt",
                "id": 146099301,
                "login": "dgrunwald-qt",
                "node_id": "U_kgDOCLVMZQ",
                "organizations_url": "https://api.github.com/users/dgrunwald-qt/orgs",
                "received_events_url": "https://api.github.com/users/dgrunwald-qt/received_events",
                "repos_url": "https://api.github.com/users/dgrunwald-qt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dgrunwald-qt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dgrunwald-qt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dgrunwald-qt",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Time for bikeshedding. Alternatives for `except_plus`:\n- `exceptval='+'` (It cannot be combined with other exception values anyway.)\n- `except_cpp=True`\n\nSince `except +` is not currently needed for _implementing_ functions, I don't think it's available yet in Python code, so this is a new piece of ground.",
            "created_at": "2025-08-29T19:13:42Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-3237966665",
            "id": 3237966665,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc7A_3NJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3237966665/reactions"
            },
            "updated_at": "2025-08-29T19:23:14Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3237966665",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `cython.pointer[cython.function_type([cython.int], cython.double, except_val=-1)]  # double (*)(int) except? -1`\n\nThis is not completely the same. `except_val=-1` should correspond to `except -1`. I propose to add `check_exception=True` for the `except?` case.\n\nNote: The decorator is called `exceptval`, so I prefer to call the option likewise, not `except_val`.",
            "created_at": "2025-08-29T19:21:39Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-3237988339",
            "id": 3237988339,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc7A_8fz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3237988339/reactions"
            },
            "updated_at": "2025-08-29T19:21:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3237988339",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `exceptval='+'` (It cannot be combined with other exception values anyway.)\n\nYou can at least combine it with `*`; I'm not sure about anything else.\n\nhttps://github.com/cython/cython/blob/f8b2fcc1014bc9bdf2a849b997a1bd03fd6a8918/tests/run/cpp_exceptions.pyx#L25",
            "created_at": "2025-08-29T19:46:23Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-3238070823",
            "id": 3238070823,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc7BAQon",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3238070823/reactions"
            },
            "updated_at": "2025-08-29T19:46:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3238070823",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "`exceptval='+'` might be confused for `except '+'`. But if exception values won't ever be strings, we can use this.\n\nIn my current implementation, `cython.pointer[cython.function_type([cython.int], cython.double, noexcept=True, except_val=-1)]` will end up as `double (*)(int) except -1`; and without the `noexcept=True` you get `except? -1`.\nBut I guess we can accept either `check_exception` or `noexcept` (with an error if both are specified), and have `exceptval=-1` without either of them default to `except -1`. Then the new syntax would somewhat match the pyx syntax.\n\nPutting it all together:\n```\ncython.pointer[cython.function_type([cython.int], cython.double)]   # double (*)(int) except *\ncython.pointer[cython.function_type([cython.int], cython.double, nogil=True)]  # double (*)(int) except * nogil\ncython.pointer[cython.function_type([cython.int], cython.double, has_varargs=True)]  # double (*)(int, ...) except *\ncython.pointer[cython.function_type([cython.int], cython.double, noexcept=True)]  # double (*)(int) noexcept\ncython.pointer[cython.function_type([cython.int], cython.double, exceptval='+')]  # double (*)(int) except +\ncython.pointer[cython.function_type([cython.int], cython.double, exceptval='+', check_exception=True)]  # double (*)(int) except +*\ncython.pointer[cython.function_type([cython.int], cython.double, exceptval=-1)]  # double (*)(int) except -1\ncython.pointer[cython.function_type([cython.int], cython.double, exceptval=-1, check_exception=True)]  # double (*)(int) except? -1\ncython.pointer[cython.function_type([cython.int], cython.double, exceptval=-1, noexcept=False)]  # double (*)(int) except? -1\n```",
            "created_at": "2025-09-01T10:07:26Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-3241735570",
            "id": 3241735570,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc7BOPWS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3241735570/reactions"
            },
            "updated_at": "2025-09-01T10:07:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3241735570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/146099301?v=4",
                "events_url": "https://api.github.com/users/dgrunwald-qt/events{/privacy}",
                "followers_url": "https://api.github.com/users/dgrunwald-qt/followers",
                "following_url": "https://api.github.com/users/dgrunwald-qt/following{/other_user}",
                "gists_url": "https://api.github.com/users/dgrunwald-qt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dgrunwald-qt",
                "id": 146099301,
                "login": "dgrunwald-qt",
                "node_id": "U_kgDOCLVMZQ",
                "organizations_url": "https://api.github.com/users/dgrunwald-qt/orgs",
                "received_events_url": "https://api.github.com/users/dgrunwald-qt/received_events",
                "repos_url": "https://api.github.com/users/dgrunwald-qt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dgrunwald-qt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dgrunwald-qt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dgrunwald-qt",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `exceptval='+'` might be confused for `except '+'`. But if exception values won't ever be strings, we can use this.\n\nWe could probably run into user code wanting to do this:\n```cython\ncython.pointer[cython.function_type([cython.int], cython.char, exceptval='+')]  # char (*)(int) except '+'\n```\nSo, yeah, I don't think this is a safe API in the end. Let's have a dedicated spelling for C++ exception handling.\n\n> In my current implementation, `cython.pointer[cython.function_type([cython.int], cython.double, noexcept=True, except_val=-1)]` will end up as `double (*)(int) except -1`; and without the `noexcept=True` you get `except? -1`.\n\n`noexcept` is the explicit way to say that a function never raises an exception, so this doesn't fit here. `except?` really needs to be spelled out with an explicit exception check option as it is orthogonal to the exception value and both are the opposite of `noexcept`.\n",
            "created_at": "2025-09-01T13:35:50Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-3242408673",
            "id": 3242408673,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc7BQzrh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3242408673/reactions"
            },
            "updated_at": "2025-09-01T13:35:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3242408673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "New version in updated PR:\n```\ncython.pointer[cython.function_type([cython.int], cython.double)]   # double (*)(int) except *\ncython.pointer[cython.function_type([cython.int], cython.double, nogil=True)]  # double (*)(int) except * nogil\ncython.pointer[cython.function_type([cython.int], cython.double, has_varargs=True)]  # double (*)(int, ...) except *\ncython.pointer[cython.function_type([cython.int], cython.double, noexcept=True)]  # double (*)(int) noexcept\ncython.pointer[cython.function_type([cython.int], cython.double, check_exception=False)]  # double (*)(int) noexcept\ncython.pointer[cython.function_type([cython.int], cython.double, except_plus=True)]  # double (*)(int) except +\ncython.pointer[cython.function_type([cython.int], cython.double, exceptval=-1)]  # double (*)(int) except -1\ncython.pointer[cython.function_type([cython.int], cython.double, exceptval=-1, check_exception=True)]  # double (*)(int) except? -1\n```",
            "created_at": "2025-09-01T15:37:21Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-3242766849",
            "id": 3242766849,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc7BSLIB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3242766849/reactions"
            },
            "updated_at": "2025-09-01T15:37:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3242766849",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/146099301?v=4",
                "events_url": "https://api.github.com/users/dgrunwald-qt/events{/privacy}",
                "followers_url": "https://api.github.com/users/dgrunwald-qt/followers",
                "following_url": "https://api.github.com/users/dgrunwald-qt/following{/other_user}",
                "gists_url": "https://api.github.com/users/dgrunwald-qt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dgrunwald-qt",
                "id": 146099301,
                "login": "dgrunwald-qt",
                "node_id": "U_kgDOCLVMZQ",
                "organizations_url": "https://api.github.com/users/dgrunwald-qt/orgs",
                "received_events_url": "https://api.github.com/users/dgrunwald-qt/received_events",
                "repos_url": "https://api.github.com/users/dgrunwald-qt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dgrunwald-qt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dgrunwald-qt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dgrunwald-qt",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `cython.pointer[cython.function_type([cython.int], cython.double, check_exception=False)]  # double (*)(int) noexcept`\n\nThis should map to `double (*)(int)`. I don't remember right now if we defaulted this to `except -1.0` or an implicit `noexcept`. In any case, the `check_exception=False` should have no effect in this case, it's redundant, because a `double` return has a known error return value and doesn't need an additional exception check.",
            "created_at": "2025-09-02T08:27:30Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-3244331315",
            "id": 3244331315,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc7BYJEz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3244331315/reactions"
            },
            "updated_at": "2025-09-02T08:27:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3244331315",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I don't remember right now if we defaulted this to `except -1.0` or an implicit `noexcept`\n\nI looked it up in the ticket: https://github.com/cython/cython/issues/4280#issuecomment-1100592792\nWe decided at the time that function pointers should behave like Cython implemented function signatures, i.e. use the default exception value of `except? -1.0` for a `double` return value, and with the additional `check_exception=False` option, turn into `except -1.0`.\n\n(This does not apply to function pointers in `cdef extern` blocks, but these cannot currently appear in Python code anyway.)",
            "created_at": "2025-09-02T08:43:39Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-3244384903",
            "id": 3244384903,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc7BYWKH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3244384903/reactions"
            },
            "updated_at": "2025-09-02T08:43:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3244384903",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'd probably go for `except_cpp` rather than `except_plus`. In that the intent is clear without knowing the traditional Cython syntax (where I guess `except +` is mainly an attempt to do something without adding too much new syntax).\n\n>> `cython.pointer[cython.function_type([cython.int], cython.double, check_exception=False)]  # double (*)(int) noexcept`\n>\n> We decided at the time that function pointers should behave like Cython implemented function signatures, i.e. use the default exception value of `except? -1.0` for a double return value, and with the additional `check_exception=False` option, turn into except -1.0.\n\nA quick test tells me that\n\n```\nctypedef double (*some_ptr_type)()\n```\n\nis currently interpreted as `except *`\n\nTo me that seems consistent with\n\n```\ncython.pointer[cython.function_type([cython.int], cython.double)]   # double (*)(int) except *\ncython.pointer[cython.function_type([cython.int], cython.double, check_exception=False)]  # double (*)(int) noexcept\n```\n\nI'd prefer keeping the behaviour as consistent as possible with the `cdef` syntax, so the list that @dgrunwald-qt proposes looks right to me.",
            "created_at": "2025-09-02T20:00:11Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-3246617119",
            "id": 3246617119,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc7Bg3If",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3246617119/reactions"
            },
            "updated_at": "2025-09-02T20:00:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3246617119",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `except_cpp` rather than `except_plus`.\n\n+1\n\n> keeping the behaviour as consistent as possible with the `cdef` syntax\n\nAbsolutely. I think a direct comparison test would help assuring that and keeping it that way.",
            "created_at": "2025-09-03T03:10:15Z",
            "html_url": "https://github.com/cython/cython/issues/4279#issuecomment-3247533530",
            "id": 3247533530,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4279",
            "node_id": "IC_kwDOABDGAc7BkW3a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3247533530/reactions"
            },
            "updated_at": "2025-09-03T03:10:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3247533530",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 15,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4279/comments",
    "created_at": "2021-07-13T06:53:44Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-07-13T06:53:44Z",
            "event": "labeled",
            "id": 5011620423,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDUwMTE2MjA0MjM=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5011620423"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-07-13T06:53:44Z",
            "event": "labeled",
            "id": 5011620425,
            "label": {
                "color": "444444",
                "name": "Pure Python Mode"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDUwMTE2MjA0MjU=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5011620425"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-09-21T20:59:14Z",
            "event": "mentioned",
            "id": 10440322850,
            "node_id": "MEE_lADOABDGAc44MuN_zwAAAAJuSq8i",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/10440322850"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-09-21T20:59:14Z",
            "event": "subscribed",
            "id": 10440322857,
            "node_id": "SE_lADOABDGAc44MuN_zwAAAAJuSq8p",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/10440322857"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53637421?v=4",
                "events_url": "https://api.github.com/users/GalaxySnail/events{/privacy}",
                "followers_url": "https://api.github.com/users/GalaxySnail/followers",
                "following_url": "https://api.github.com/users/GalaxySnail/following{/other_user}",
                "gists_url": "https://api.github.com/users/GalaxySnail/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/GalaxySnail",
                "id": 53637421,
                "login": "GalaxySnail",
                "node_id": "MDQ6VXNlcjUzNjM3NDIx",
                "organizations_url": "https://api.github.com/users/GalaxySnail/orgs",
                "received_events_url": "https://api.github.com/users/GalaxySnail/received_events",
                "repos_url": "https://api.github.com/users/GalaxySnail/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/GalaxySnail/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GalaxySnail/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/GalaxySnail",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-02-15T10:09:23Z",
            "event": "subscribed",
            "id": 16321208840,
            "node_id": "SE_lADOABDGAc44MuN_zwAAAAPM0eII",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/16321208840"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8208953?v=4",
                "events_url": "https://api.github.com/users/Julien00859/events{/privacy}",
                "followers_url": "https://api.github.com/users/Julien00859/followers",
                "following_url": "https://api.github.com/users/Julien00859/following{/other_user}",
                "gists_url": "https://api.github.com/users/Julien00859/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Julien00859",
                "id": 8208953,
                "login": "Julien00859",
                "node_id": "MDQ6VXNlcjgyMDg5NTM=",
                "organizations_url": "https://api.github.com/users/Julien00859/orgs",
                "received_events_url": "https://api.github.com/users/Julien00859/received_events",
                "repos_url": "https://api.github.com/users/Julien00859/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Julien00859/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Julien00859/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Julien00859",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-05-24T13:27:38Z",
            "event": "subscribed",
            "id": 17800269324,
            "node_id": "SE_lADOABDGAc44MuN_zwAAAAQk-o4M",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/17800269324"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/146099301?v=4",
                "events_url": "https://api.github.com/users/dgrunwald-qt/events{/privacy}",
                "followers_url": "https://api.github.com/users/dgrunwald-qt/followers",
                "following_url": "https://api.github.com/users/dgrunwald-qt/following{/other_user}",
                "gists_url": "https://api.github.com/users/dgrunwald-qt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dgrunwald-qt",
                "id": 146099301,
                "login": "dgrunwald-qt",
                "node_id": "U_kgDOCLVMZQ",
                "organizations_url": "https://api.github.com/users/dgrunwald-qt/orgs",
                "received_events_url": "https://api.github.com/users/dgrunwald-qt/received_events",
                "repos_url": "https://api.github.com/users/dgrunwald-qt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dgrunwald-qt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dgrunwald-qt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dgrunwald-qt",
                "user_view_type": "public"
            },
            "commit_id": "a7bc96cb3efd8085e772689237ed520cbac020f3",
            "commit_url": "https://api.github.com/repos/dgrunwald-qt/cython/commits/a7bc96cb3efd8085e772689237ed520cbac020f3",
            "created_at": "2025-08-29T11:33:24Z",
            "event": "referenced",
            "id": 19410002832,
            "node_id": "REFE_lADOABDGAc44MuN_zwAAAASE7SOQ",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/19410002832"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-09-01T13:37:02Z",
            "event": "connected",
            "id": 19442662034,
            "node_id": "COE_lADOABDGAc44MuN_zwAAAASG33qS",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/19442662034"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/146099301?v=4",
                "events_url": "https://api.github.com/users/dgrunwald-qt/events{/privacy}",
                "followers_url": "https://api.github.com/users/dgrunwald-qt/followers",
                "following_url": "https://api.github.com/users/dgrunwald-qt/following{/other_user}",
                "gists_url": "https://api.github.com/users/dgrunwald-qt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dgrunwald-qt",
                "id": 146099301,
                "login": "dgrunwald-qt",
                "node_id": "U_kgDOCLVMZQ",
                "organizations_url": "https://api.github.com/users/dgrunwald-qt/orgs",
                "received_events_url": "https://api.github.com/users/dgrunwald-qt/received_events",
                "repos_url": "https://api.github.com/users/dgrunwald-qt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dgrunwald-qt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dgrunwald-qt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dgrunwald-qt",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-09-02T20:00:13Z",
            "event": "mentioned",
            "id": 19467937254,
            "node_id": "MEE_lADOABDGAc44MuN_zwAAAASIYSXm",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/19467937254"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/146099301?v=4",
                "events_url": "https://api.github.com/users/dgrunwald-qt/events{/privacy}",
                "followers_url": "https://api.github.com/users/dgrunwald-qt/followers",
                "following_url": "https://api.github.com/users/dgrunwald-qt/following{/other_user}",
                "gists_url": "https://api.github.com/users/dgrunwald-qt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dgrunwald-qt",
                "id": 146099301,
                "login": "dgrunwald-qt",
                "node_id": "U_kgDOCLVMZQ",
                "organizations_url": "https://api.github.com/users/dgrunwald-qt/orgs",
                "received_events_url": "https://api.github.com/users/dgrunwald-qt/received_events",
                "repos_url": "https://api.github.com/users/dgrunwald-qt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dgrunwald-qt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dgrunwald-qt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dgrunwald-qt",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-09-02T20:00:13Z",
            "event": "subscribed",
            "id": 19467937266,
            "node_id": "SE_lADOABDGAc44MuN_zwAAAASIYSXy",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/19467937266"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4279/events",
    "html_url": "https://github.com/cython/cython/issues/4279",
    "id": 942859135,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558499,
            "name": "Pure Python Mode",
            "node_id": "MDU6TGFiZWw0MjU1NTg0OTk=",
            "url": "https://api.github.com/repos/cython/cython/labels/Pure%20Python%20Mode"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4279/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5NDI4NTkxMzU=",
    "number": 4279,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 4,
        "-1": 0,
        "confused": 0,
        "eyes": 2,
        "heart": 2,
        "hooray": 0,
        "laugh": 0,
        "rocket": 2,
        "total_count": 10,
        "url": "https://api.github.com/repos/cython/cython/issues/4279/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4279/timeline",
    "title": "[ENH] Allow function pointers in Python code",
    "type": null,
    "updated_at": "2025-09-03T03:10:15Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4279",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder",
        "user_view_type": "public"
    }
}