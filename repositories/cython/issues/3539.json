{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Pretty sure this some of inconsistency is a bug, given the `decode`/`for` cases are really optimizations (see the `decode` cases differing).\r\n\r\nThe runtime cases probably should match the explicit cases, because otherwise we have behaviour depending on constant propagation, which is never fun.\r\n\r\nAnd I think in general if we allow a slice with `None` as the stop value we should also allow negatives?\r\n\r\n```PYTHON\r\ndef test_omit_plain(char* s):\r\n    \"\"\"reads until null\"\"\"\r\n    return s[10:]\r\n\r\ndef test_omit_decode(char* s):\r\n    \"\"\"reads until null\"\"\"\r\n    return s[10:].decode(\"utf8\")\r\n\r\ndef test_omit_iter(char* s):\r\n    \"\"\"reads until null (allocates bytes as per test_omit_plain then iterates over that)\"\"\"\r\n    cdef char c\r\n    return [chr(c) for c in s[10:]]\r\n\r\n\r\ndef test_explicit_plain(char* s):\r\n    \"\"\" identical to test_omit_plain \"\"\"\r\n    return s[10:None]\r\n\r\ndef test_explicit_decode(char* s):\r\n    \"\"\" identical to test_omit_decode \"\"\"\r\n    return s[10:None].decode(\"utf8\")\r\n\r\ndef test_explicit_iter(char* s):\r\n    \"\"\" identical to test_omit_iter \"\"\"\r\n    cdef char c\r\n    return [chr(c) for c in s[10:None]]\r\n\r\n\r\ndef test_neg_plain(char* s):\r\n    \"\"\" SystemError(\"Negative size passed to PyBytes_FromStringAndSize\") \"\"\"\r\n    return s[10:-5]\r\n\r\ndef test_neg_decode(char* s):\r\n    \"\"\" computes strlen(s) - 5 \"\"\"\r\n    return s[10:-5].decode(\"utf8\")\r\n\r\ndef test_neg_iter(char* s):\r\n    \"\"\" SystemError(\"Negative size passed to PyBytes_FromStringAndSize\") \"\"\"\r\n    cdef char c\r\n    return [chr(c) for c in s[10:-5]]\r\n\r\n\r\ndef test_empty_plain(char* s):\r\n    \"\"\" SystemError(\"Negative size passed to PyBytes_FromStringAndSize\") \"\"\"\r\n    return s[10:5]\r\n\r\ndef test_empty_decode(char* s):\r\n    \"\"\" returns u\"\" \"\"\"\r\n    return s[10:5].decode(\"utf8\")\r\n\r\ndef test_empty_iter(char* s):\r\n    \"\"\" SystemError(\"Negative size passed to PyBytes_FromStringAndSize\") \"\"\"\r\n    cdef char c\r\n    return [chr(c) for c in s[10:5]]\r\n\r\n\r\ndef test_runtime_plain(char* s, object o):\r\n    \"\"\" reads to PY_SSIZE_T_MAX if o is None; raises SystemError when negative \"\"\"\r\n    return s[10:o]\r\n\r\ndef test_runtime_decode(char* s, object o):\r\n    \"\"\" reads to PY_SSIZE_T_MAX if o is None; uses strlen - o when negative \"\"\"\r\n    return s[10:o].decode(\"utf8\")\r\n\r\ndef test_runtime_iter(char* s, object o):\r\n    \"\"\" reads to PY_SSIZE_T_MAX if o is None; raises SystemError when negative \"\"\"\r\n    cdef char c\r\n    return [chr(c) for c in s[10:o]]\r\n```\r\n\r\n(Ran into this while having started on #3536 and optimizing the `char*` case there, then finding out behaviour then differed. Filing this largely because I'm interested in what others think behaviour should be for these tests.)",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks for coming up with this list.\r\nGenerally speaking, whenever there is \"expected\" Python behaviour that we can implement, we should do that instead of rejecting code or raising exceptions.\r\n\r\n`SystemError` seems like the worst reaction. If anything, we should raise `IndexError`.\r\n\r\nFor empty slices, the expected behaviour seems obvious. It should behave as for the empty string. Definitely not raise an exception.\r\n\r\nFor negative slice bounds on `char*` â€“ I'd say, that's not an obvious case. But since we already end up with a call to `strlen()` for the unbounded case, I think we could also support negative right bounds through that.\r\n\r\nThe runtime cases above should also end up with a call to `strlen()` if the right bound is unknown. The usual approach in Cython is to do things at compile time if we can, and at runtime if we must. So there's just a bit more C code to generate here.",
            "created_at": "2020-04-22T04:14:21Z",
            "html_url": "https://github.com/cython/cython/issues/3539#issuecomment-617538381",
            "id": 617538381,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3539",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzUzODM4MQ==",
            "updated_at": "2020-04-22T04:14:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/617538381",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3539/comments",
    "created_at": "2020-04-22T01:27:03Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-22T04:14:17Z",
            "event": "labeled",
            "id": 3258757318,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMyNTg3NTczMTg=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3258757318"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-22T04:14:17Z",
            "event": "labeled",
            "id": 3258757320,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMyNTg3NTczMjA=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3258757320"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-04-22T04:14:17Z",
            "event": "labeled",
            "id": 3258757322,
            "label": {
                "color": "444444",
                "name": "Python Semantics"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMyNTg3NTczMjI=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3258757322"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3539/events",
    "html_url": "https://github.com/cython/cython/issues/3539",
    "id": 604385055,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556315,
            "name": "Python Semantics",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMTU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Python%20Semantics"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3539/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2MDQzODUwNTU=",
    "number": 3539,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Inconsistent behaviour for char* slices when stop is negative/None ",
    "updated_at": "2020-04-22T04:14:22Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3539",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
        "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
        "followers_url": "https://api.github.com/users/gsnedders/followers",
        "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gsnedders",
        "id": 176218,
        "login": "gsnedders",
        "node_id": "MDQ6VXNlcjE3NjIxOA==",
        "organizations_url": "https://api.github.com/users/gsnedders/orgs",
        "received_events_url": "https://api.github.com/users/gsnedders/received_events",
        "repos_url": "https://api.github.com/users/gsnedders/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gsnedders"
    }
}