{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nWhen a local variable has multiple types that happen to be compatible, Cython's output will vary between invocations. Different invocations will pick different types.\r\n\r\nI think the key thing is that the types are compatible (thus avoiding any compiler errors) and similar enough (to avoid Cython using e.g. PyObject).\r\n\r\nThe net effect is the output C code varies between invocations, which makes build systems that use content hashing to detect file changes rebuild more than necessary (e.g. Bazel and others).\r\n\r\nMy guess is this is related to some `set` object. A coworker pointed to the sets in FlowControl.py and TypeInference.py, but we weren't able to track it down exactly. Setting `PYTHONHASHSEED=0` doesn't avoid the issue, which tends to implicate `sets` as the culprit. These files look similar between the 3.x and 0.29 releases, so I wouldn't be surprised if this still exists in 3.x, but haven't tested that myself.\n\n### Code to reproduce the behaviour:\n\nThe case I ran into is pandas's timedeltas.pyx file. It has a series of if-else blocks where each uses the same variable name, but some of the blocks assign a different, but compatible, type. When transpiled into C, with the variable hoisted up and declared, Cython alternates between picking int64_t and npy_timedelta (an alias for int64_t) for the variable type.\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/2110b742039c2ed0b1089015e2c39b6ef905dd7b/pandas/_libs/tslibs/timedeltas.pyx#L1848\r\n\r\nAdding `new_value: int64_t` to the panda's timedeltas.pyx file works around the issue.\r\n\r\nI unfortunately don't have a simple repro, as I ran into this using Bazel with some bespoke build infrastructure.\n\n### Expected behaviour\n\nCython produces the same output when variables use different types in the same scope.\n\n### OS\n\nLinux\n\n### Python version\n\n3.11\n\n### Cython version\n\n0.29.35\n\n### Additional context\n\nIf there are some suggested patches to try out, let me know. Its easy for me to locally patch Cython and validate behavior.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Here's a substantially simpler version that looks to reproduce it for me:\r\n\r\n```\r\nfrom libc.stdint cimport int64_t\r\n\r\nctypedef int64_t npy_timedelta\r\n\r\nclass C:\r\n    def __new__(cls, value):\r\n        if value:\r\n            new_value = delta_to_nanoseconds(value)\r\n            return super().__new__()\r\n        else:\r\n            new_value = get_timedelta64_value(value)\r\n            return super().__new__()\r\n\r\n\r\ncdef npy_timedelta get_timedelta64_value(object obj) nogil:\r\n    return 0\r\n\r\n\r\ncpdef int64_t delta_to_nanoseconds(\r\n    delta\r\n):\r\n    return 0\r\n```",
            "created_at": "2024-02-10T16:29:47Z",
            "html_url": "https://github.com/cython/cython/issues/5986#issuecomment-1937056871",
            "id": 1937056871,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5986",
            "node_id": "IC_kwDOABDGAc5zdSRn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1937056871/reactions"
            },
            "updated_at": "2024-02-10T16:29:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1937056871",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It looks like the issue is that `cf_assignments` varies in order (so it's presumably due to sets in `FlowControl` rather than `TypeInference`).\r\n\r\nI don't think I'm getting too much further though for the moment.\r\n\r\nI'm also not sure what rules we should use to pick the preferred type. The one complication is that `extern` typedefs often aren't completely true.",
            "created_at": "2024-02-10T16:55:51Z",
            "html_url": "https://github.com/cython/cython/issues/5986#issuecomment-1937062153",
            "id": 1937062153,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5986",
            "node_id": "IC_kwDOABDGAc5zdTkJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1937062153/reactions"
            },
            "updated_at": "2024-02-10T16:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1937062153",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">I'm also not sure what rules we should use to pick the preferred type. The one complication is that `extern` typedefs often aren't completely true.\r\n\r\nWe probably compare types for \"same as\" equality, resolving typedefs to basic types for comparison.\r\n\r\nProposal:\r\n- If both typedefs and basic types are involved, prefer the basic type.\r\n- If different typedefs are involved that refer to the same basic type, prefer that basic type as well.\r\n- If different extern types or typedefs are involved, do not consider them sufficiently safe to be equal and do not infer a common type, even if they all resolve to the same basic type.\r\n\r\nIn the reproducing example above, this would probably disable type inference, which seems the correct thing to do. Both types are externally defined typedefs that are not guaranteed to be equal at C compile time.\r\n\r\nIf we feel ambitious, we could add the rule that if two extern typedefs refer to the same other extern typedef, we reduce it to that common typedef and continue comparing with that. Thus, we could also infer something like \"stdint.int64_t\" if e.g. NumPy's typedef refers to it.\r\n\r\nAnother possible rule is that we could prefer a typedef that is declared on a larger type than another typedef. But that's touching slightly muddy waters again.\r\n\r\nIt sounds like we're reducing a tree of type(def)s to a common ancestor, mostly.\r\n",
            "created_at": "2024-02-11T07:01:54Z",
            "html_url": "https://github.com/cython/cython/issues/5986#issuecomment-1937454185",
            "id": 1937454185,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5986",
            "node_id": "IC_kwDOABDGAc5zezRp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1937454185/reactions"
            },
            "updated_at": "2024-02-19T10:40:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1937454185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I spent some time testing with python-pandas 2.2.3 on this issue and found, the result depends on the length of path, maybe the libc version and it becomes a bit more stable, if ASLR is disabled (but not fully deterministic).\nThis suggests, that details of memory alignment could play a role.\n\nhttps://rb.zq1.de/other/cythonreproducer.tar.xz has my small reproducer \n```\n( cd /tmp/cythonreproducer/; for r in $(seq 19 40) ; do export r; ./t.sh ;done)|sort|uniq -c\n     13 594dad0383b7f5baa109\n      9 e04fe3ec12d95aa9e434\n```",
            "created_at": "2025-04-01T13:09:33Z",
            "html_url": "https://github.com/cython/cython/issues/5986#issuecomment-2769308025",
            "id": 2769308025,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5986",
            "node_id": "IC_kwDOABDGAc6lEEl5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2769308025/reactions"
            },
            "updated_at": "2025-04-01T13:20:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2769308025",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/637990?v=4",
                "events_url": "https://api.github.com/users/bmwiedemann/events{/privacy}",
                "followers_url": "https://api.github.com/users/bmwiedemann/followers",
                "following_url": "https://api.github.com/users/bmwiedemann/following{/other_user}",
                "gists_url": "https://api.github.com/users/bmwiedemann/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bmwiedemann",
                "id": 637990,
                "login": "bmwiedemann",
                "node_id": "MDQ6VXNlcjYzNzk5MA==",
                "organizations_url": "https://api.github.com/users/bmwiedemann/orgs",
                "received_events_url": "https://api.github.com/users/bmwiedemann/received_events",
                "repos_url": "https://api.github.com/users/bmwiedemann/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bmwiedemann/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bmwiedemann/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bmwiedemann",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5986/comments",
    "created_at": "2024-02-08T22:14:43Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5986/events",
    "html_url": "https://github.com/cython/cython/issues/5986",
    "id": 2126155905,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5986/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5-upCB",
    "number": 5986,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/cython/cython/issues/5986/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5986/timeline",
    "title": "[BUG] Non-deterministic output for local vars with multiple types",
    "type": null,
    "updated_at": "2025-04-01T13:20:50Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5986",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/34175098?v=4",
        "events_url": "https://api.github.com/users/rickeylev/events{/privacy}",
        "followers_url": "https://api.github.com/users/rickeylev/followers",
        "following_url": "https://api.github.com/users/rickeylev/following{/other_user}",
        "gists_url": "https://api.github.com/users/rickeylev/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rickeylev",
        "id": 34175098,
        "login": "rickeylev",
        "node_id": "MDQ6VXNlcjM0MTc1MDk4",
        "organizations_url": "https://api.github.com/users/rickeylev/orgs",
        "received_events_url": "https://api.github.com/users/rickeylev/received_events",
        "repos_url": "https://api.github.com/users/rickeylev/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rickeylev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rickeylev/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rickeylev",
        "user_view_type": "public"
    }
}