{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "This may be a bug or it could be simply a question I am not sure. I do know that using the six.add_metaclass decorator appears to not work.\r\n\r\n\r\nThis is what I am attempting to do.\r\n\r\nI have a sizeable library some 200K lines of code. There is quite a bit of \"voodoo magic\" code using metaclases. this is done to dynamically add parent classes based on specific input at the time a class instance is needed.\r\n\r\nThe majority of the library is python code there is a separate extension that does get compiled and is used by the library. This extension does not have any metaclasses as it does rely on c++ code.\r\n\r\nThe portion of the library I am attempting to compile into extension modules is only for the purposes of increased performance. The code in pure python that I am trying to compile.\r\n\r\n\r\nI know that Cython does support support metaclasses for python classes. So this should not be an issue. What I am seeing is that the cythonizing process only looks for (metaclass=some_meta_class) or \\_\\_metaclass\\_\\_ = some_meta_class. The issue I am having is that the library I am writing needs to be able to support python 2.7.x and 3.5+. I do not want to have to maintain 2 sets of code for something as simple as this. That is the reason why there is the six.add_metaclass decorator so 2 sets of code would not have to be in place.\r\n\r\nMy question is this.. Does Cython know to look for the @six.add_metaclass(some_metaclass) before a class definition?. \r\n\r\nIf it does not is this something that could be added?. I know I can write into the build process parsing the files and place the metaclass declaration where it needs to be based on the python version, But seeing as how cython is supposed to support metaclasses It should also support having that decorator in place and make the adjustments needed in the cpp output file.\r\n\r\nI do not know what the plans are for Cython when Python 2 becomes EOL. It is going to be a really long while before all programs that are running Python 2.x get upgraded to 3.x so I am hoping that Cython is going to continue to support Python 2.x and this can be added if it is not already.\r\n\r\nIf it is added then there is an issue with the metaclasses. I am using the \\_\\_init\\_\\_ of a metaclass to set in place a class attribute. and this class attribute is not getting defined. \r\n\r\nAny help would be greatly appreciated.\r\n",
    "closed_at": "2019-10-25T17:46:24Z",
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "If you're compiling Cython code, there's not as strong a need to use `six`. Just use Python 3 syntax and it'll be translated back to the Python 2 equivalents where required. If you need it to be pure-Python too, you could always apply the decorator in a non-compiled module, or otherwise rearrange your code such that it's not affected by Cython. See #2800 for the EOL plan - soonish. Python 2.7 was released a decade ago, support is going to end eventually.",
            "created_at": "2019-10-25T09:40:52Z",
            "html_url": "https://github.com/cython/cython/issues/3207#issuecomment-546283362",
            "id": 546283362,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3207",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjI4MzM2Mg==",
            "updated_at": "2019-10-25T09:40:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/546283362",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            }
        },
        {
            "author_association": "NONE",
            "body": "OK so for the time being if I use the python 3 syntax Cython is going to do what it needs to do if compiled for Python 2. That's what I needed to know. after I wrote this I hammered out a simple bit of code that parses the files and removes the decorator. It really was not that hard to do because I had to iterate over the files and folders to change the extension from .py to .pyx and to move the files to a temp folder anyhow. so instead of using shutuil to copy the file I just make a new file using open to write the converted code.",
            "created_at": "2019-10-25T17:46:20Z",
            "html_url": "https://github.com/cython/cython/issues/3207#issuecomment-546447835",
            "id": 546447835,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3207",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjQ0NzgzNQ==",
            "updated_at": "2019-10-25T17:46:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/546447835",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10932297?v=4",
                "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
                "followers_url": "https://api.github.com/users/kdschlosser/followers",
                "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
                "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kdschlosser",
                "id": 10932297,
                "login": "kdschlosser",
                "node_id": "MDQ6VXNlcjEwOTMyMjk3",
                "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
                "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
                "repos_url": "https://api.github.com/users/kdschlosser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kdschlosser"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You may also consider supporting Python 2.x *only* with compiled extension modules, by writing your code in Python 3 syntax and leaving the rest to Cython.",
            "created_at": "2019-10-26T04:34:43Z",
            "html_url": "https://github.com/cython/cython/issues/3207#issuecomment-546567933",
            "id": 546567933,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3207",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjU2NzkzMw==",
            "updated_at": "2019-10-26T04:34:43Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/546567933",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "At the moment because I am still developing the library I set the build routine up so that I can compile  the library as all c extension via a command line switch. I do also like being able to provide the option to the user if they want to use the library either way compiled as pyd's or as normal python. I personally like to be able to view the code in a library. it is easier for me to learn how to use it. once I have learned what it can do and wrote whatever it is i needed to interact with it if the option was there then i would switch it out for c extensions if available. I know that the speed difference is quite large. I still have to make the compile process multi threaded so it doesn't take 15 minutes to compile the thing. \r\n\r\nI am still running into an issue with the metaclass tho. and I am not sure what is causing it.\r\n\r\nI wrote a test setup program and library with what I am trying to to do and that works without issue. but when I compile my library it does doesn't. The mechanics are the same so it should be working correctly.\r\n\r\nThere are only a few small differences in the build routine. The test library sub classes Cython.Distutils.extension.Extension so Cython has to be already installed. In the library I am having issue with the setup program installs Cython only for the build process. so I am not able to subclass the Extension class in Cython because it has not been installed yet. and I am not using the build_ext from Cython either.. actually I am not using it in the test either so that shouldn't be the issue. \r\n\r\nThe thing is it compiles properly it just doesn't behave properly. That class attribute that gets set in the metaclasses \\_\\_init\\_\\_ does not get created and I am not sure why but it does get created in the test.. it's baffling.\r\n",
            "created_at": "2019-10-26T05:52:32Z",
            "html_url": "https://github.com/cython/cython/issues/3207#issuecomment-546572826",
            "id": 546572826,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3207",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjU3MjgyNg==",
            "updated_at": "2019-10-26T05:52:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/546572826",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10932297?v=4",
                "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
                "followers_url": "https://api.github.com/users/kdschlosser/followers",
                "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
                "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kdschlosser",
                "id": 10932297,
                "login": "kdschlosser",
                "node_id": "MDQ6VXNlcjEwOTMyMjk3",
                "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
                "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
                "repos_url": "https://api.github.com/users/kdschlosser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kdschlosser"
            }
        },
        {
            "author_association": "NONE",
            "body": "here is the cpp code that is generated by Cython for that section of the metaclass\r\n\r\n```cpp\r\n\r\n  /* \"singleton.pyx\":142\r\n *         super(InstanceSingleton, cls).__init__(name, bases, dct)\r\n * \r\n *         cls._instances = getattr(cls, '_instances', {})             # <<<<<<<<<<<<<<\r\n * \r\n *         if (\r\n */\r\n\r\n#line 142 \"singleton.pyx\"\r\n  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)\r\n\r\n#line 142 \"singleton.pyx\"\r\n  __Pyx_GOTREF(__pyx_t_2);\r\n\r\n#line 142 \"singleton.pyx\"\r\n  __pyx_t_3 = __Pyx_GetAttr3(__pyx_v_cls, __pyx_n_s_instances, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 142, __pyx_L1_error)\r\n\r\n#line 142 \"singleton.pyx\"\r\n  __Pyx_GOTREF(__pyx_t_3);\r\n\r\n#line 142 \"singleton.pyx\"\r\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\r\n\r\n#line 142 \"singleton.pyx\"\r\n  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cls, __pyx_n_s_instances, __pyx_t_3) < 0) __PYX_ERR(0, 142, __pyx_L1_error)\r\n\r\n#line 142 \"singleton.pyx\"\r\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\r\n```\r\n\r\nI have to use the getattr with a default if it does not exist because of a dynamic class creation.\r\n\r\nIf i give a better description of how the program is supposed to run then maybe it might shed some light.\r\n\r\nThis library is a python binding to a cpp library called OpenZWave. OpenZWave is a library that handles communications with ZWave devices and those devices are wireless and use the ZWave protocol.\r\n\r\nThe way the protocol is written there are \"modules\" or pre defined sets of instructions these modules define what a device supports. the only way to know what the device supports is by querying the device. this does not take place in OpenZWave until after the device is added to the program.. The library I wrote follows the same layout as the ZWave protocol. so there is a python class that represents each of the modules.. and there are a lot of them.. over 100. I am using the metaclass to build the class that represents the device. part of the process is the dynamically created class sub classes the module classes the device supports.\r\n\r\nI am starting to hate that word classes LOL\r\n\r\nNow this does not seem to be all that difficult.. Unless... you only want a single instance that represents a device to ever be created.. Plus.. you also want to have an IDE be able to track a data path and also offer all of it's features... so the base class of the dynamic class is the same class that has the metaclass that builds the dynamic class and when the dynamic class gets made it is going to call the \\_\\_init\\_\\_ of the meta class again. and that is the reason why there is the getattr with the default because I do not want to erase any of the stored values if it already exists. This is where I believe the issue is with the Cython compilation is because of the getattr.\r\n\r\nI am going to put the same kind of thing in place in my test program and see if the behavior gets duplicated.\r\n\r\n",
            "created_at": "2019-10-26T06:17:39Z",
            "html_url": "https://github.com/cython/cython/issues/3207#issuecomment-546574384",
            "id": 546574384,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3207",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjU3NDM4NA==",
            "updated_at": "2019-10-26T06:17:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/546574384",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10932297?v=4",
                "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
                "followers_url": "https://api.github.com/users/kdschlosser/followers",
                "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
                "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kdschlosser",
                "id": 10932297,
                "login": "kdschlosser",
                "node_id": "MDQ6VXNlcjEwOTMyMjk3",
                "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
                "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
                "repos_url": "https://api.github.com/users/kdschlosser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kdschlosser"
            }
        },
        {
            "author_association": "NONE",
            "body": "OK so I managed to get past that problem.. Even tho the code I had originally has worked fine without being compiled as a c extension I had to make some adjustments in order to get it to work properly when compiled. \r\n\r\n```cpp\r\n/* \"singleton.pyx\":142\r\n *         super(InstanceSingleton, cls).__init__(name, bases, dct)\r\n * \r\n *         cls._instances = getattr(cls, '_instances', {})             # <<<<<<<<<<<<<<\r\n * \r\n *         if (\r\n */\r\n```\r\n\r\nyou see the call to super is before the creation of the class attribute.. This is what it did not like. Not sure why. I had to move the the creation of the class attribute to before the call to super.. strange behavior. I even tried adding it to the dict passed to \\_\\_init\\_\\_ before the call to super and that did not work either. which it should have I would have thought. That is supposed to be what gets used when the class gets created to set any of the class level attributes/methods/properties.\r\n\r\nThis is what I tried and it did not work. maybe someone would be willing to explain to me why?\r\nAll 3 failures work without being compiled. it is only when it is compiled as a c extension there is an issue.\r\n\r\n```python\r\nclass InstanceSingleton(type):\r\n\r\n    def __init__(cls, name, bases, dct):\r\n        super(InstanceSingleton, cls).__init__(name, bases, dct)\r\n        cls._instances = getattr(cls, '_instances', {})\r\n```\r\n\r\n```python\r\nclass InstanceSingleton(type):\r\n\r\n    def __init__(cls, name, bases, dct):\r\n        dct['_instances'] = dct.get('_instances', {})\r\n        super(InstanceSingleton, cls).__init__(name, bases, dct)\r\n```\r\n\r\n```python\r\nclass InstanceSingleton(type):\r\n\r\n    def __init__(cls, name, bases, dct):\r\n        super(InstanceSingleton, cls).__init__(name, bases, dct)\r\n        if not hasattr(cls, '_instances'):\r\n            cls._instances = {}\r\n```\r\n\r\n\r\nand this is what works.\r\n```python\r\nclass InstanceSingleton(type):\r\n\r\n    def __init__(cls, name, bases, dct):\r\n        cls._instances = getattr(cls, '_instances', {})\r\n        super(InstanceSingleton, cls).__init__(name, bases, dct)\r\n```\r\n",
            "created_at": "2019-10-26T16:10:00Z",
            "html_url": "https://github.com/cython/cython/issues/3207#issuecomment-546616193",
            "id": 546616193,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3207",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjYxNjE5Mw==",
            "updated_at": "2019-10-26T16:10:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/546616193",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10932297?v=4",
                "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
                "followers_url": "https://api.github.com/users/kdschlosser/followers",
                "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
                "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kdschlosser",
                "id": 10932297,
                "login": "kdschlosser",
                "node_id": "MDQ6VXNlcjEwOTMyMjk3",
                "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
                "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
                "repos_url": "https://api.github.com/users/kdschlosser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kdschlosser"
            }
        },
        {
            "author_association": "NONE",
            "body": "I am now onto the next problem.. I will open another issue for this.\r\n",
            "created_at": "2019-10-26T17:30:12Z",
            "html_url": "https://github.com/cython/cython/issues/3207#issuecomment-546623435",
            "id": 546623435,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3207",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjYyMzQzNQ==",
            "updated_at": "2019-10-26T17:30:12Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/546623435",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10932297?v=4",
                "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
                "followers_url": "https://api.github.com/users/kdschlosser/followers",
                "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
                "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kdschlosser",
                "id": 10932297,
                "login": "kdschlosser",
                "node_id": "MDQ6VXNlcjEwOTMyMjk3",
                "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
                "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
                "repos_url": "https://api.github.com/users/kdschlosser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kdschlosser"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3207/comments",
    "created_at": "2019-10-25T05:52:30Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10932297?v=4",
                "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
                "followers_url": "https://api.github.com/users/kdschlosser/followers",
                "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
                "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kdschlosser",
                "id": 10932297,
                "login": "kdschlosser",
                "node_id": "MDQ6VXNlcjEwOTMyMjk3",
                "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
                "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
                "repos_url": "https://api.github.com/users/kdschlosser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kdschlosser"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-10-25T17:46:24Z",
            "event": "closed",
            "id": 2744979498,
            "node_id": "MDExOkNsb3NlZEV2ZW50Mjc0NDk3OTQ5OA==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2744979498"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-10-26T04:35:06Z",
            "event": "labeled",
            "id": 2745863822,
            "label": {
                "color": "fef2c0",
                "name": "support question"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDI3NDU4NjM4MjI=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2745863822"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3207/events",
    "html_url": "https://github.com/cython/cython/issues/3207",
    "id": 512317723,
    "labels": [
        {
            "color": "fef2c0",
            "default": false,
            "id": 414800623,
            "name": "support question",
            "node_id": "MDU6TGFiZWw0MTQ4MDA2MjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/support%20question"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3207/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1MTIzMTc3MjM=",
    "number": 3207,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "metaclasses added to a class using the six.add_metaclass decorator",
    "updated_at": "2019-10-26T17:30:12Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3207",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/10932297?v=4",
        "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
        "followers_url": "https://api.github.com/users/kdschlosser/followers",
        "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
        "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/kdschlosser",
        "id": 10932297,
        "login": "kdschlosser",
        "node_id": "MDQ6VXNlcjEwOTMyMjk3",
        "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
        "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
        "repos_url": "https://api.github.com/users/kdschlosser/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/kdschlosser"
    }
}