{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\r\n\r\nIn the following code snippet, I have the variable `data` that I declared as a `dict` type in the `@cython.locals` decorator. I also have another variable in there `ret` that in this scenario I declare as a `tuple`. In an near-exact copy of the same function, I have `ret` declared as a `list`. Here is the `list` version of the same function:\r\n```cython\r\nimport math\r\nimport time\r\n\r\ncimport cython  # noqa: E999\r\n\r\n@cython.cfunc\r\n@cython.returns(dict)\r\n@cython.locals(data=dict, i=cython.int, n=cython.int, ret=list, j=cython.int, boundary=cython.int, tmp_time_start=cython.double, tmp_time_end=cython.double)\r\ndef is_prime_cython(value_max: cython.int, num_loops: cython.int, bounding: str, runtime: str, compilation: str, call_type: str, subcall: str) -> dict:\r\n    data = {\r\n        \"divisions\": dict(),\r\n        \"primes\": dict(),\r\n        \"times\": dict(),\r\n    }\r\n\r\n    for i in range(num_loops):\r\n        data[\"divisions\"][i] = dict()\r\n        data[\"times\"][i] = []\r\n        data[\"primes\"][i] = []\r\n        data[\"primes\"][i].append(2)\r\n        for n in range(3, value_max, 2):\r\n            tmp_time_start = time.perf_counter()\r\n            boundary = n\r\n            if bounding == \"Half\":\r\n                boundary = math.floor(n / 2)\r\n            elif bounding == \"Sqrt\":\r\n                boundary = math.floor(math.sqrt(n))\r\n            ret = [n % j for j in data[\"primes\"] if j <= boundary]\r\n            tmp_time_end = time.perf_counter()\r\n            data[\"times\"][i].append(tmp_time_end - tmp_time_start)\r\n\r\n            data[\"divisions\"][i][n] = len(ret)\r\n            if all(ret):\r\n                data[\"primes\"][i].append(n)\r\n\r\n    return data\r\n```\r\nThe `list` version compiles perfectly fine when I run my setup,py, but when I run the compiling setup,py for the `tuple` version I get this error: `local variable 'data' referenced before assignment` in reference to this line: `ret = tuple(n % j for j in data[\"primes\"] if j <= boundary)`\r\nThe only way to fix this is to instead remove the `data=dict` declaration inside the `@cython.locals` decorator, and instead replace the assignment of the `data` variable to a declarion like so:\r\n```cython\r\ncdef dict data = {\r\n    \"divisions\": dict(),\r\n    \"primes\": dict(),\r\n    \"times\": dict(),\r\n}\r\n```\r\n\r\nAnother solution is to change the line where I assign `ret` a value, as the `tuple` version looks like this:\r\n```cython\r\nret = tuple(n % j for j in data[\"primes\"] if j <= boundary)\r\n```\r\nThis is a generator expression being cast to tuple, where the fix would be to wrap the inner comprehension with square brackets to make it into a list comprehension like so:\r\n```cython\r\nret = tuple([n % j for j in data[\"primes\"] if j <= boundary])\r\n```\r\nBut I would say the original generator-to-tuple cast works fine in native python, so I'm not sure why the compiler fails to work with generators / generator-to-tuple casting.\r\n\r\n### Code to reproduce the behaviour:\r\n\r\n```cython\r\nimport math\r\nimport time\r\n\r\ncimport cython  # noqa: E999\r\n\r\n@cython.cfunc\r\n@cython.returns(dict)\r\n@cython.locals(data=dict, i=cython.int, n=cython.int, ret=tuple, j=cython.int, boundary=cython.int, tmp_time_start=cython.double, tmp_time_end=cython.double)\r\ndef is_prime_cython(value_max: cython.int, num_loops: cython.int, bounding: str, runtime: str, compilation: str, call_type: str, subcall: str) -> dict:\r\n    data = {\r\n        \"divisions\": dict(),\r\n        \"primes\": dict(),\r\n        \"times\": dict(),\r\n    }\r\n\r\n    for i in range(num_loops):\r\n        data[\"divisions\"][i] = dict()\r\n        data[\"times\"][i] = []\r\n        data[\"primes\"][i] = []\r\n        data[\"primes\"][i].append(2)\r\n        for n in range(3, value_max, 2):\r\n            tmp_time_start = time.perf_counter()\r\n            boundary = n\r\n            if bounding == \"Half\":\r\n                boundary = math.floor(n / 2)\r\n            elif bounding == \"Sqrt\":\r\n                boundary = math.floor(math.sqrt(n))\r\n            ret = tuple(n % j for j in data[\"primes\"] if j <= boundary)\r\n            tmp_time_end = time.perf_counter()\r\n            data[\"times\"][i].append(tmp_time_end - tmp_time_start)\r\n\r\n            data[\"divisions\"][i][n] = len(ret)\r\n            if all(ret):\r\n                data[\"primes\"][i].append(n)\r\n\r\n    return data\r\n```\r\n\r\n\r\n### Expected behaviour\r\n\r\nThe code should compile in both versions of the script, regardless of whether the `ret` variable is declared as a `list` or a `tuple`.\r\n\r\n### Environment\r\n\r\nOS: Windows 11\r\nPython version: 3.10.5\r\nCython version: 3.0.0a11\r\n\r\n\r\n### Additional context\r\n\r\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "Seems this is related to #1159 and #1479, this was supposedly fixed in #4254 but it doesn't seem to be the case.",
            "created_at": "2022-08-31T07:02:03Z",
            "html_url": "https://github.com/cython/cython/issues/5001#issuecomment-1232541718",
            "id": 1232541718,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5001",
            "node_id": "IC_kwDOABDGAc5JdxgW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1232541718/reactions"
            },
            "updated_at": "2022-08-31T07:02:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1232541718",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14364070?v=4",
                "events_url": "https://api.github.com/users/HunterAP23/events{/privacy}",
                "followers_url": "https://api.github.com/users/HunterAP23/followers",
                "following_url": "https://api.github.com/users/HunterAP23/following{/other_user}",
                "gists_url": "https://api.github.com/users/HunterAP23/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HunterAP23",
                "id": 14364070,
                "login": "HunterAP23",
                "node_id": "MDQ6VXNlcjE0MzY0MDcw",
                "organizations_url": "https://api.github.com/users/HunterAP23/orgs",
                "received_events_url": "https://api.github.com/users/HunterAP23/received_events",
                "repos_url": "https://api.github.com/users/HunterAP23/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HunterAP23/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HunterAP23/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HunterAP23"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Seems this is related to #1159 and #1479, this was supposedly fixed in #4254 but it doesn't seem to be the case.\r\n\r\nI suspect that this issue was introduced in #4254 and it works fine in Cython 0.29.x.\r\n\r\nI don't think it's hugely related to the first two issues (apart from a similar error message)\r\n\r\nNot completely sure why, but this should work.",
            "created_at": "2022-08-31T07:13:28Z",
            "html_url": "https://github.com/cython/cython/issues/5001#issuecomment-1232551534",
            "id": 1232551534,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5001",
            "node_id": "IC_kwDOABDGAc5Jdz5u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1232551534/reactions"
            },
            "updated_at": "2022-08-31T07:13:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1232551534",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I suspect that this issue was introduced in https://github.com/cython/cython/pull/4254 and it works fine in Cython 0.29.x.\r\n\r\nI can confirm that the issue persists with Cython 0.29.32\r\n\r\nI looked further into it and it seems that whatever bugs have been reported about this so far are set to be fixed for Cython 3.0.0's full release.\r\n\r\nIt just seems strange that declaring `data=dict` in the `@cython.locals` decorator would cause the generator comprehension to fail, whereas either changing the `data` variable declaration to be inside the function with the same `dict` type OR replacing the generator comprehension with list comprehension fixes the issue.\r\n\r\nThe latter solution would lead me to believe that it's an issue with generators, but the former issue makes it seem like some issue with using generators with cython-typed variables.",
            "created_at": "2022-08-31T07:18:08Z",
            "html_url": "https://github.com/cython/cython/issues/5001#issuecomment-1232555946",
            "id": 1232555946,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5001",
            "node_id": "IC_kwDOABDGAc5Jd0-q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1232555946/reactions"
            },
            "updated_at": "2022-08-31T07:21:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1232555946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14364070?v=4",
                "events_url": "https://api.github.com/users/HunterAP23/events{/privacy}",
                "followers_url": "https://api.github.com/users/HunterAP23/followers",
                "following_url": "https://api.github.com/users/HunterAP23/following{/other_user}",
                "gists_url": "https://api.github.com/users/HunterAP23/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HunterAP23",
                "id": 14364070,
                "login": "HunterAP23",
                "node_id": "MDQ6VXNlcjE0MzY0MDcw",
                "organizations_url": "https://api.github.com/users/HunterAP23/orgs",
                "received_events_url": "https://api.github.com/users/HunterAP23/received_events",
                "repos_url": "https://api.github.com/users/HunterAP23/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HunterAP23/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HunterAP23/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HunterAP23"
            }
        },
        {
            "author_association": "NONE",
            "body": "I've narrowed this down even further. To reiterate, this currently fails to compile if `data` is defined in the `@cython.locals` decorator:\r\n```cython\r\nret = tuple(n % j for j in data[\"primes\"] if j <= boundary)\r\n```\r\nBut if you put another pair of parenthesis around the comprehension, then it works fine:\r\n```cython\r\nret = tuple((n % j for j in data[\"primes\"] if j <= boundary))\r\n```\r\nAnd the issue does not occur if you remove the tuple cast, so it's an issue with casting a generator to a tuple while using a single pair of parenthesis, or something related to generator comprehension with dictionaries? Not really sure what's happening here",
            "created_at": "2022-08-31T14:21:21Z",
            "html_url": "https://github.com/cython/cython/issues/5001#issuecomment-1233005189",
            "id": 1233005189,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5001",
            "node_id": "IC_kwDOABDGAc5JfiqF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1233005189/reactions"
            },
            "updated_at": "2022-08-31T16:03:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1233005189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14364070?v=4",
                "events_url": "https://api.github.com/users/HunterAP23/events{/privacy}",
                "followers_url": "https://api.github.com/users/HunterAP23/followers",
                "following_url": "https://api.github.com/users/HunterAP23/following{/other_user}",
                "gists_url": "https://api.github.com/users/HunterAP23/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HunterAP23",
                "id": 14364070,
                "login": "HunterAP23",
                "node_id": "MDQ6VXNlcjE0MzY0MDcw",
                "organizations_url": "https://api.github.com/users/HunterAP23/orgs",
                "received_events_url": "https://api.github.com/users/HunterAP23/received_events",
                "repos_url": "https://api.github.com/users/HunterAP23/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HunterAP23/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HunterAP23/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HunterAP23"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for the detailed investigation. I think what's happening with `cython.locals` is that it's essentially redeclaring it in the decorator. Kind of like\r\n\r\n```\r\n# I know this isn't valid syntax, but it's just to illustrate the point\r\nret = tuple(cdef dict data; n % j for j in data[\"primes\"] if j <= boundary)\r\n```\r\n\r\nHow far `locals` declarations should propagate into other scopes is kind of an awkward question - we probably would want a locals declaration of `j` to work for example. But \"redeclaring\" `data` here probably makes little sense.\r\n\r\n------------------------------------\r\n\r\nI'm not quite sure why the extra pair of brackets make a difference. Possibly it's just causing the compile to miss an optimization somewhere. I expect there's a specific optimization for generator expression directly filling a tuple, and if the problem is a combination of that and the `locals` declaration. But I could be wrong - I haven't looked in detail",
            "created_at": "2022-08-31T17:00:58Z",
            "html_url": "https://github.com/cython/cython/issues/5001#issuecomment-1233192926",
            "id": 1233192926,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5001",
            "node_id": "IC_kwDOABDGAc5JgQfe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1233192926/reactions"
            },
            "updated_at": "2022-08-31T17:00:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1233192926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5001/comments",
    "created_at": "2022-08-31T06:33:51Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14364070?v=4",
                "events_url": "https://api.github.com/users/HunterAP23/events{/privacy}",
                "followers_url": "https://api.github.com/users/HunterAP23/followers",
                "following_url": "https://api.github.com/users/HunterAP23/following{/other_user}",
                "gists_url": "https://api.github.com/users/HunterAP23/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HunterAP23",
                "id": 14364070,
                "login": "HunterAP23",
                "node_id": "MDQ6VXNlcjE0MzY0MDcw",
                "organizations_url": "https://api.github.com/users/HunterAP23/orgs",
                "received_events_url": "https://api.github.com/users/HunterAP23/received_events",
                "repos_url": "https://api.github.com/users/HunterAP23/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HunterAP23/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HunterAP23/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HunterAP23"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-08-31T06:54:39Z",
            "event": "renamed",
            "id": 7293647428,
            "node_id": "RTE_lADOABDGAc5Q4AmczwAAAAGyvDpE",
            "performed_via_github_app": null,
            "rename": {
                "from": "[BUG] Failed compilation when declaring one variable in the @cython.locals decorator as a dict and another as a tuple",
                "to": "[BUG] Failed compilation when casting a generator to a tuple"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/7293647428"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5001/events",
    "html_url": "https://github.com/cython/cython/issues/5001",
    "id": 1356859804,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5001/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5Q4Amc",
    "number": 5001,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5001/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5001/timeline",
    "title": "[BUG] Failed compilation when casting a generator to a tuple",
    "updated_at": "2022-08-31T17:00:58Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5001",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/14364070?v=4",
        "events_url": "https://api.github.com/users/HunterAP23/events{/privacy}",
        "followers_url": "https://api.github.com/users/HunterAP23/followers",
        "following_url": "https://api.github.com/users/HunterAP23/following{/other_user}",
        "gists_url": "https://api.github.com/users/HunterAP23/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/HunterAP23",
        "id": 14364070,
        "login": "HunterAP23",
        "node_id": "MDQ6VXNlcjE0MzY0MDcw",
        "organizations_url": "https://api.github.com/users/HunterAP23/orgs",
        "received_events_url": "https://api.github.com/users/HunterAP23/received_events",
        "repos_url": "https://api.github.com/users/HunterAP23/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/HunterAP23/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/HunterAP23/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/HunterAP23"
    }
}