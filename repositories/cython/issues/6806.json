{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nParallel build output to console gets all jumbled up...\n\nI am not exactly sure as to why Cython is using the multiprocessing library to handle parallel compiling. It is not necessary to do that. \n\nHere is the reason why...\n\nAll that is being done is the compiler is being called using subprocess. Now the really cool thing about how a computers OS works is it assigns a core that is not under heavy load to the new process. As we know compiling typically will peg the core to 100% even if it's only for a very short period of time. A new spawned compiler process is always going to end up on a core that doesn't have one running on it. It plays round robin with the cores and processes. There is no need to use multiprocessing at all..\n\nAll that needs to be done is this...\n\nDivide the number of source files to be compiled by the number of cores the computer has. If the result is not an even number then round up to the next whole number. create a new thread passing that number of source files to the thread until there are no more source files left. I also pass a `threading.Event` object to each of the threads and that object gets set just before the thread terminates. The event object gets placed into a list and the main thread iterates over the list of events calling `wait()` on each one. When all of the threads are finished then I am able to link all of the compiled objects.\n\nBy doing this you have the ability to handle the stdout and stderr coming from each of the subprocesses. Using a single `threading.Lock` that is shared across all of the threads and that lock gets used when outputting from each subprocess to the console. It keeps the output all nice and neat.\n\nThis is a far better way to go about it because not only does it fix the console output it is also faster, and it uses quite a bit less in the resource department....\n\nI do not know if there is a specific reason as to why multiprocessing is being used but to get the output to the console to be correct is going to be a very large headache.\n\n### Code to reproduce the behaviour:\n\nI will be able to provide a running example in the next couple of days. It's rather complicated to show what is going on from a keyed example in an issue.\n\nJust for the sake of explaining how to duplicate the problem. Take a python library that has a lot of modules to it. cythonize each of the python source files. have Cython compile each of those cythonized modules as a python extension. when you pass the list of extensions to the cython compiler with parallel set to `True` you will see the console output is a complete mess...\n\nI have attached a screen shot to show what I am talking about...\n\nThis is with parallel set to `False`\n\n![Image](https://github.com/user-attachments/assets/9cea79fc-5785-45d0-bbfa-2a7dd73c0c44)\n\nand this is with parallel set to `True`\n\n![Image](https://github.com/user-attachments/assets/24a7f1c3-a979-4c25-afb4-540eb1ee8eed)\n\nThat's just not right.... LOL...\n\nHow it spits the data out is also nuts. It's like it is reading a single byte at a time from the subprocess output and then writing it to the console. \n\n### Expected behaviour\n\nFor the output to the console to be correct. \n\n### OS\n\nWindows\n\n### Python version\n\n3.11\n\n### Cython version\n\n3.0.0\n\n### Additional context\n\nIf someone could point me to where the code is that handles the compiling I would be more than willing to spend some time to help out with fixing it.\n\n\nI also wanted to say thanks for the mention of pyMSVC in the documentation. I just noticed that was there, I am the author of the library. \n\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I think we use multiprocessing rather than threading because we're not at all confident that Cython itself is thread-safe - there's a lot of hidden global state scattered around. We've fixed a few obvious issues as and when we discovered they were causing bugs (like contextmanagers to swallow error handling) but trying to get it to a state where we're confident about running multi-threaded isn't a big priority.",
            "created_at": "2025-04-26T09:02:35Z",
            "html_url": "https://github.com/cython/cython/issues/6806#issuecomment-2831975951",
            "id": 2831975951,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6806",
            "node_id": "IC_kwDOABDGAc6ozIYP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2831975951/reactions"
            },
            "updated_at": "2025-04-26T09:02:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2831975951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "But here is the thing. When using the parallel option that means more than a single \"extension\" is getting compiled. each extension is it's own thing and not connected to other extensions. Extension being the python c extension. These are python modules and they are self contained. There should be no issue with thread safety with this...\n\nThat is the ONLY use of the parallel feature is when you are compiling more than one extension module.  You should also be able to compile each C/CPP source file listed in an extensions sources variable in parallel as well using the same mechanism I explained above. the linker is what brings all of the compiled pieces together into a single extension. That gets done by the thread that is handling the extension as a whole.\n\nMaybe there is some confusion between an extension and a c-lib as these are pretty close in design in the setuptools/distutils world. an extension can be dependent on a c-lib but not vice versa. so c-libs would always have to be compiled before an extension and Cython would have to generate the C code which is what gets compiled. The output to the console that is getting all jumbled up is when the extensions are being compiled which is after Cython generated the c code.\n\nThe threads are not what is doing the work. It's the compiler that is doing the work the threads only handle starting the compiler process and that process gets pinned to the core that has the lowest use at the time the process is started. That is what gives you parallel compiling. multiple threads starting multiple compiler processes. The threads are simply managers of the output to the console essentially..\n\n \nHere is a code example where the c source files get iterated over.\n\n```python\n\nobject_lock = threading.Lock()\nobjects = []\n\ndef do(files, evt):\n    objs = []\n\n    for f in files:\n        # the compile_cpp and compile_c functions are platform dependent. \n        # those functions put together the compiler arguments and call the \n        # spawn function seen below.\n\n        if f.endswith('cpp'):\n            obj = self.compile_cpp(f)\n        else:\n            obj = self.compile_c(f)\n\n        objs.append(obj)\n\n    with object_lock:\n        objects.extend(objs)\n\n    evt.set()\n\n\nsources = self.sources[:]\n\nnum_files = int(len(files) / os.cpu_count())\noverflow_files = len(files) % num_files\n\nevents = []\n\nwhile sources:\n    chunk = num_files\n    if overflow_files:\n        chunk += 1\n        overflow_files -= 1\n\n    source_files = sources[:chunk ]\n    sources = sources[chunk:]\n    \n    e = threading.Event()\n    t = threading.Thread(target=do, args=(source_files[:], e))\n    t.daemon = True\n    events.append(e)\n    t.start()\n\nfor e in events:\n    e.wait()\n\nself.link(objects)\n```\n\nand here is the function that spawns the compiler processes. This function gets called from the threads that are running...\nThis function pumps the subprocess for output data and only after it has collected an entire line of data does it acquire the lock before outputting to the console.\n\n```\n    def spawn(self, cmd, search_path=1, level=1, cwd=None):\n        if isinstance(cmd, (list, tuple)):\n            cmd_ = ' '.join(str(item) for item in cmd)\n        else:\n            cmd_ = cmd\n\n        LOG.debug(cmd_)\n\n        if sys.platform.startswith('win'):\n            p = subprocess.Popen(\n                cmd,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                stdin=subprocess.PIPE,\n                cwd=cwd\n            )\n        else:\n            p = subprocess.Popen(\n                SHELL,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                stdin=subprocess.PIPE,\n                cwd=cwd\n            )\n\n            cmd_ += '\\n'\n            p.stdin.write(cmd_.encode('utf-8'))\n            p.stdin.close()\n\n        while p.poll() is None:\n            for line in iter(p.stdout.readline, b''):\n                line = line.strip()\n                if line:\n                    with print_lock:\n                        sys.stdout.write(line.decode('utf-8') + '\\n')\n                        sys.stdout.flush()\n\n            for line in iter(p.stderr.readline, b''):\n                line = line.strip()\n                if line:\n                    with print_lock:\n                        sys.stderr.write(line.decode('utf-8') + '\\n')\n                        sys.stderr.flush()\n\n        if not p.stdout.closed:\n            p.stdout.close()\n\n        if not p.stderr.closed:\n            p.stderr.close()\n\n        with print_lock:\n            sys.stdout.flush()\n            sys.stderr.flush()\n```\n\n\n",
            "created_at": "2025-04-26T10:00:33Z",
            "html_url": "https://github.com/cython/cython/issues/6806#issuecomment-2832006280",
            "id": 2832006280,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6806",
            "node_id": "IC_kwDOABDGAc6ozPyI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2832006280/reactions"
            },
            "updated_at": "2025-04-26T10:00:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2832006280",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10932297?v=4",
                "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
                "followers_url": "https://api.github.com/users/kdschlosser/followers",
                "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
                "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kdschlosser",
                "id": 10932297,
                "login": "kdschlosser",
                "node_id": "MDQ6VXNlcjEwOTMyMjk3",
                "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
                "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
                "repos_url": "https://api.github.com/users/kdschlosser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kdschlosser",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This discussion is confusing two things that run in parallel but independently. The first is the translation that Cython does, .py(x) to .c or .cpp. If you are using the `cython` command for this, there is no parallelism in Cython. If you use `cythonize`, you can pass `-j` to get parallel translation using multiprocessing. This is done for the reasons that @da-woods mentioned.\n\n*After* this is done, the C/C++ compiler needs to run in order to compile the C/C++ files to binary extension modules (and this is what you seem to refer to exclusively). If you use `cythonize` for the complete build, which currently employs setuptools via an actual call to `setuptools.setup()`, the parallelism is applied via `multiprocessing` to allow changing the base directory for each build (in case that's necessary). Otherwise, the parallelism is not applied by Cython but by the build tool, which may be setuptools or something else (like meson etc.). These may or may not use multiprocessing, but either way, Cython does not control this part.\n\nCould you describe how you're executing the build? That might point to the tool that is responsible here.",
            "created_at": "2025-04-26T10:25:50Z",
            "html_url": "https://github.com/cython/cython/issues/6806#issuecomment-2832018306",
            "id": 2832018306,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6806",
            "node_id": "IC_kwDOABDGAc6ozSuC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2832018306/reactions"
            },
            "updated_at": "2025-04-26T10:34:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2832018306",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "FWIW I can see this building Cython itself on Windows (just with `setup.py build_ext -if -j4`). I don't think I've ever seen it on Linux.\n\nSo it's relatively easy to reproduce.",
            "created_at": "2025-04-26T10:46:36Z",
            "html_url": "https://github.com/cython/cython/issues/6806#issuecomment-2832028716",
            "id": 2832028716,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6806",
            "node_id": "IC_kwDOABDGAc6ozVQs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2832028716/reactions"
            },
            "updated_at": "2025-04-26T10:46:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2832028716",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "To describe my build..\n\nIt's cross platform Windows, macOS and Linux/other Posix like OS's.\n\nIt consists of compiling a C static library and that static library is what Cython is used for. Not that in and of itself is not so much the problem as that all works without issue and compiles in parallel because it is running the code that I have written to compile.  This all works and I am able to run my project once installed into Python without any issue. The issue comes when I Cythonize all of the python source files in my project which is  over 150 source files. the issue is not with Cythonizing specifically but it is instead when it compiles the generated code from the Cythonizing. When I call `cythonize` in a python source file it returns a subclassed version of `setuptoold.Extension`.... How these extensions are compiled is in the mechanics of Cythons monkeypatching of setuptools/distutils. \n\nThere is something screwy going on with that portion of the code because I don't import Cython until the `run` method of `build_ext` is called in which I have already subclassed the setuptools version of it. For some reason it is not getting used for the build, if it did the code I wrote to handle the parallel building would be used. Cython is not honoring the use of my build_ext and it is instead still using it's own monkey patched version which I am not exactly sure how it is doing that when I didn't subclass Cythons version of `build_ext` and Cython was not imported until things were already running so it couldn't have monkey patched the setuptools build_ext prior to me subclassing it. It's almost like Cython is creating a new setup routine for each of the extensions I am compiling using it's own `build_ext` to handle the compiling. Maybe it's doing an instance check to see if the `build_ext` that is being used is the Cython one and if it's not there is some voodoo magic code that runs to force the use of Cython's `build_ext` \n\nI cannot find where Cython is doing this side step around using my subclassed `build_ext`.",
            "created_at": "2025-04-26T18:02:19Z",
            "html_url": "https://github.com/cython/cython/issues/6806#issuecomment-2832490088",
            "id": 2832490088,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6806",
            "node_id": "IC_kwDOABDGAc6o1F5o",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2832490088/reactions"
            },
            "updated_at": "2025-04-26T18:02:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2832490088",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10932297?v=4",
                "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
                "followers_url": "https://api.github.com/users/kdschlosser/followers",
                "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
                "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kdschlosser",
                "id": 10932297,
                "login": "kdschlosser",
                "node_id": "MDQ6VXNlcjEwOTMyMjk3",
                "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
                "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
                "repos_url": "https://api.github.com/users/kdschlosser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kdschlosser",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "and as far as the paths are concerned with respect to compiling an extension module. The paths supplied to compile extension modules are either going to be relative to the setup script or they are going to be absolute. unless someone specifically overrides how the compiling works to inject their own code to change the directory that python is running in this would still be a non issue.\n\nThere is more than one area of the build that could run in parallel when using Cython. Calling `cythonize` from multiple threads doesn't speed anything up because that is python code that is running so the only way to get that to run in parallel would be using multiprocessing. Cythonizing doesn't take a large amount of time to do so i am not sure if there would be a benefit to doing this in parallel. Then you have compiling each extension (cythonized code) in parallel to each other. The internal mechanics of setuptools/distutils does this exact thing but it does it using multiprocessing which really doesn't need to be done. the compiler is not going to be changing the path that python is running in and the ability to pass the working directory to the subprocess when the compiler is run exists to handle keeping paths correct. When this is done all of the source files are passed to the compiler when a subprocess is made for the compiler. setuptools creates a new python process for the sole purpose of creating a subprocess for the compiler. That subprocess doesn't even end up running on the same core as the Python process. This is done for each extension that mneeds to be compiled. This doesn't need to be done this way but it is the way that setuptools has been written. It's problematic especially on Windows and it's a bear to locate issues in the build system. There is a 3rd way of having things compile in parallel and that is at the c source level. This is what build systems like Ninja do and also GNU Make if a makefile is written the proper way to allow it. It makes a call to the compiler passing only a single source file instead of multiple files. There has never been an issue with compiling this way because a compiler simply compiles one at a time if multiple source files are passed to it. so instead of passing 10 source files to be compiled where the compiler compiles one at a time, instead you run the compiler 10 times passing a single source file each time. This would allow for 10 compiler processes to run and the OS handles what core that process runs on. doing this manually would require a person to execute the compiler from 10 different console sessions. When doing the one source file at a time way you cannot have the compiler handle calling the linker. The linker needs to be run specifically to link all of the compiled objects together and it must be called only when all of the source files have been compiled. \n\nSince Cython monkeypatches setuptools/distutils would it not be helpful to users to have the console output from the build be correct? Would it also be helpful at the same time when correcting the console output issue to actually fix it in a manner that would speed up compiling n times where n is the number of cores in the users computer. would it not be nice if this would work even if the person is compiling only a single extension module?\n",
            "created_at": "2025-04-26T18:42:54Z",
            "html_url": "https://github.com/cython/cython/issues/6806#issuecomment-2832518426",
            "id": 2832518426,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6806",
            "node_id": "IC_kwDOABDGAc6o1M0a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2832518426/reactions"
            },
            "updated_at": "2025-04-26T18:42:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2832518426",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10932297?v=4",
                "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
                "followers_url": "https://api.github.com/users/kdschlosser/followers",
                "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
                "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kdschlosser",
                "id": 10932297,
                "login": "kdschlosser",
                "node_id": "MDQ6VXNlcjEwOTMyMjk3",
                "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
                "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
                "repos_url": "https://api.github.com/users/kdschlosser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kdschlosser",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I can reproduce this on Windows with just setuptools and no Cython (Python 3.13, setuptools 70.0.0):\n\n```\n# make_files.py - just to create a bunch of dummy c files\n\nfor i in range(100):\n    with open(f\"f{i}.c\", \"w\") as f:\n        f.write(\"\"\"\n#include <Python.h>\n\nPyObject *PyInit_f%s(void) {\n    return NULL;\n}\n\"\"\" % i)\n```\n\n```\n# setup.py\nfrom setuptools import Extension, setup\n\nextensions = [\n    Extension(\n        name=f\"f{i}\",\n        sources=[f\"f{i}.c\"])\n    for i in range(100)\n]\n\nsetup(\n    ext_modules=extensions\n)\n```\n\nand running `python setup.py build_ext -if -j4`.\n\nIt's less corrupted than your example - the output from msvc largely seems to be preserved, but the output from setuptools itself looks messed up:\n\n```\n   Creating liGbernaerrya tbiunigl dc\\otdeem\np.win-amd64-cpython-313\\Release\\f59.cp313-win_amd64.lib and object build\\temp.win-amd64-cpython-313\\Release\\f59.cp313-win_amd64.exp\nFinished generating coGdeen\nerating code\n   Creating library build\\temp.win-amd64-cpython-313\\Release\\f58.cp313-win_amd64.lib and object build\\temp.win-amd64-cpython-313\\Releasebuilding 'f60' extension\n\\f\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\bin\\HostX86\\x64\\cl.exe\" /c /nologo /O2 /W3 /GL /DNDEBUG /MD -IC:\\Users\\David\\AppData\\Local\\Programs\\Python\\Python313\\include -IC:\\Users\\David\\AppData\\Local\\Programs\\Python\\Python313\\Include \"-IC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\" \"-IC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\ATLMFC\\include\" \"-IC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\VS\\include\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.19041.0\\ucrt\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\\\include\\10.0.19041.0\\\\um\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\\\include\\10.0.19041.0\\\\shared\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\\\include\\10.0.19041.0\\\\winrt\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\\\include\\10.0.19041.0\\\\cppwinrt\" /Tcf60.c /Fobuild\\temp.win-amd64-cpython-313\\Release\\f60.obj\n58.cp313-win_amd64.exp\nGenerFinishaedt ingge nceroadtei\nng code\nFinished generating code\nf60.c\nbuilding 'f61' extension\n```\n\n> Since Cython monkeypatches setuptools/distutils would it not be helpful to users to have the console output from the build be correct? Would it also be helpful at the same time when correcting the console output issue to actually fix it in a manner that would speed up compiling n times where n is the number of cores in the users computer. would it not be nice if this would work even if the person is compiling only a single extension module?\n\nI don't personally want to be rewriting large chunks of setuptools/distutils. The Cython monkeypatches are as thin as we can make them - it largely just runs the conversion from .pyx to .c if needed and then calls `super()`.\n\nMy proposal would be that this should be fixed in setuptools in the first instance. And then, if Cython is doing anything that adds to the problem we can try to fix it here.",
            "created_at": "2025-04-27T10:58:32Z",
            "html_url": "https://github.com/cython/cython/issues/6806#issuecomment-2833387481",
            "id": 2833387481,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6806",
            "node_id": "IC_kwDOABDGAc6o4g_Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2833387481/reactions"
            },
            "updated_at": "2025-04-27T10:58:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2833387481",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6806/comments",
    "created_at": "2025-04-26T07:20:37Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-04-26T10:25:51Z",
            "event": "mentioned",
            "id": 17415649824,
            "node_id": "MEE_lADOABDGAc60GaxxzwAAAAQODbog",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/17415649824"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-04-26T10:25:51Z",
            "event": "subscribed",
            "id": 17415649827,
            "node_id": "SE_lADOABDGAc60GaxxzwAAAAQODboj",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/17415649827"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6806/events",
    "html_url": "https://github.com/cython/cython/issues/6806",
    "id": 3021581425,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6806/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc60Gaxx",
    "number": 6806,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6806/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6806/timeline",
    "title": "[BUG] Parallel compilation = jumbled console output.",
    "type": null,
    "updated_at": "2025-04-27T10:58:33Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6806",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10932297?v=4",
        "events_url": "https://api.github.com/users/kdschlosser/events{/privacy}",
        "followers_url": "https://api.github.com/users/kdschlosser/followers",
        "following_url": "https://api.github.com/users/kdschlosser/following{/other_user}",
        "gists_url": "https://api.github.com/users/kdschlosser/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/kdschlosser",
        "id": 10932297,
        "login": "kdschlosser",
        "node_id": "MDQ6VXNlcjEwOTMyMjk3",
        "organizations_url": "https://api.github.com/users/kdschlosser/orgs",
        "received_events_url": "https://api.github.com/users/kdschlosser/received_events",
        "repos_url": "https://api.github.com/users/kdschlosser/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/kdschlosser/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kdschlosser/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/kdschlosser",
        "user_view_type": "public"
    }
}