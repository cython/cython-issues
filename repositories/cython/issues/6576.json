{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\r\n\r\nHello, friends!\r\n\r\nI'm trying to write a system that can be run in both python and C++. If you build classes around the 'cdef class', then C++ can only work with it through the python C API, and the nature of such code will be very dynamic. That's why I'm trying to build classes around the 'cdef cppclass'\r\n\r\nthere is actually more cython code, and there is an internal state of the C++ object, but for this particular example it doesn't matter, so I made a very minimalistic example to illustrate the problem.\r\n\r\n```cython\r\n### apple.pyx\r\ncdef cppclass Apple:\r\n    PyApple pyObj\r\n    void Func():\r\n        pyObj.Func()\r\n\r\ncdef class PyApple:\r\n    cpdef void Func(self):\r\n        print(\"Python Func definition\")\r\n```\r\n\r\nI compile (cythonize) the code in a standard way from the documentation, using the language=\"c++\". I get apple.cpp. To simplify the demonstration, I simply paste my main function template at the end of this file.\r\n\r\n```cpp\r\n// the code inserted at the end apple.cpp\r\nstruct PyScopeInit\r\n{\r\n    PyScopeInit(){ Py_Initialize(); }\r\n    ~PyScopeInit(){ Py_Finalize(); }\r\n};\r\n\r\nint main()\r\n{\r\n    const char* moduleName = \"apple\";\r\n    if (PyImport_AppendInittab(moduleName, PyInit_apple) == -1)\r\n    {\r\n        PyErr_Print();\r\n        return 1;\r\n    }\r\n\r\n    PyScopeInit scopeInit;\r\n   \r\n    { //this must be done 1 time, otherwise the static module info will not be filled in.\r\n        PyObject* pModule = PyImport_ImportModule(moduleName);\r\n        if (!pModule) {\r\n            PyErr_Print();\r\n            return 1;\r\n        }\r\n        Py_XDECREF(pModule);\r\n    }\r\n\r\n    __pyx_t_5apple_Apple obj; ///< ok\r\n    obj.Func();               ///< crushing\r\n}\r\n```\r\n\r\nthe crash occurs at this moment because __pyx_vtab is null:\r\n\r\n```cpp\r\n  /* \"apple.pyx\":4\r\n *     PyApple pyObj\r\n *     void Func():\r\n *         pyObj.Func()             # <<<<<<<<<<<<<<\r\n *\r\n * cdef class PyApple:\r\n */\r\n  ((struct __pyx_vtabstruct_5apple_PyApple *)pyObj->__pyx_vtab)->Func(pyObj, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4, __pyx_L1_error)\r\n```\r\n\r\nLooking at the Apple constructor, pyObj is initialized as Py_None, and __pyx_vtab is null after this initialization.\r\n\r\n```cpp\r\n//part of Apple ctor:\r\npyObj = ((struct __pyx_obj_5apple_PyApple *)Py_None); Py_INCREF(Py_None);\r\n```\r\n\r\nI thought that maybe the explicit initialization of PyApple was missing, so I added it in apple.pyx:\r\n\r\n```cython\r\n### edited apple.pyx\r\ncdef cppclass Apple:\r\n    PyApple pyObj\r\n    Apple():\r\n        pyObj = PyApple()\r\n    void Func():\r\n        pyObj.Func()\r\n\r\ncdef class PyApple:\r\n    cpdef void Func(self):\r\n        print(\"Python Func definition\")\r\n```\r\n\r\nI get apple.cpp. after editing of apple.pyx and recompile, pyObj is still initialized as Py_None, but after that, a call to the _Pyx_f___init__Apple method was added. And there's the most interesting part. I'll copy the definition of this method, with just the right pieces that raise questions. I will reflect them in the comments to the code.\r\n\r\n```cpp\r\n//definition\r\nvoid __pyx_t_5apple_Apple::__pyx_f___init__Apple(void) {\r\n  CYTHON_UNUSED struct __pyx_obj_5apple_PyApple *__pyx_v_pyObj = NULL;\r\n  PyObject *__pyx_t_1 = NULL;\r\n\r\n// after this initialization, the __pyx_t_1 object has the correct __pyx_vtab\r\n  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5apple_PyApple)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)\r\n// filling in the __pyx_v_pyObj object, but not the pyObj class field!\r\n  __pyx_v_pyObj = ((struct __pyx_obj_5apple_PyApple *)__pyx_t_1);\r\n  __pyx_t_1 = 0;\r\n\r\n  /* function exit code */\r\n  goto __pyx_L0;\r\n  __pyx_L1_error:;\r\n  __Pyx_XDECREF(__pyx_t_1);\r\n  __pyx_L0:;\r\n  __Pyx_XDECREF((PyObject *)__pyx_v_pyObj);\r\n}\r\n```\r\n\r\nIt's still crushing, but it's easy to fix now. In the definition of __pyx_f___init__, it is enough for Apple to fill in pyObj and not delete this link at the end of the function.\r\n\r\n```cpp\r\n// ...\r\n  __pyx_v_pyObj = ((struct __pyx_obj_5apple_PyApple *)__pyx_t_1);\r\n// filling member of class\r\n  pyObj = __pyx_v_pyObj;\r\n// ...\r\n// delete this line\r\n__Pyx_XDECREF((PyObject *)__pyx_v_pyObj);\r\n```\r\n\r\nAfter that, the __pyx_vtab field of the pyObj class is correct and the calls occur correctly. But this requires an edit apple.cpp and I think that this is not quite the right option. What am I missing, why doesn't it work right after cythonizing?\r\n\r\nThe answer came to me by accident. I tried to access the field explicitly using **this** in the constructor. \r\n\r\n```cython\r\ncdef cppclass Apple:\r\n    PyApple pyObj\r\n    Apple():\r\n        #with 'this' its work\r\n        this.pyObj = PyApple()\r\n    \r\n    void Func():\r\n        #but there is no need for 'this'\r\n        pyObj.Func()\r\n\r\ncdef class PyApple:\r\n    cpdef void Func(self):\r\n        print(\"Python Func definition\")\r\n```\r\n\r\nThe pyObj class field is now initialized correctly in the auto-generated code. But as you can see, there is a difference in accessing fields in the constructor and in methods. In the constructor, you must use **this** to access the field, otherwise it will be interpreted as creating a new local variable. In normal methods, both options work the same way.\r\n\r\n### Code to reproduce the behaviour:\r\n\r\nin description\r\n\r\n### Expected behaviour\r\n\r\nthe same treatment of cppclass members from its methods\r\n\r\n### OS\r\n\r\nI've tried it on: \r\n- Ubuntu 22.04\r\n- Windows 10\r\n\r\n### Python version\r\n\r\n3.12.7\r\n\r\n### Cython version\r\n\r\n3.0.11\r\n\r\n### Additional context\r\n\r\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6576/comments",
    "created_at": "2024-12-23T12:51:36Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6576/events",
    "html_url": "https://github.com/cython/cython/issues/6576",
    "id": 2756014897,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6576/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6kRXMx",
    "number": 6576,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6576/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6576/timeline",
    "title": "[BUG] from within cppclass, accessing fields from the constructor and from the method is different",
    "updated_at": "2024-12-23T12:55:56Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6576",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/71624171?v=4",
        "events_url": "https://api.github.com/users/simplepersonru/events{/privacy}",
        "followers_url": "https://api.github.com/users/simplepersonru/followers",
        "following_url": "https://api.github.com/users/simplepersonru/following{/other_user}",
        "gists_url": "https://api.github.com/users/simplepersonru/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/simplepersonru",
        "id": 71624171,
        "login": "simplepersonru",
        "node_id": "MDQ6VXNlcjcxNjI0MTcx",
        "organizations_url": "https://api.github.com/users/simplepersonru/orgs",
        "received_events_url": "https://api.github.com/users/simplepersonru/received_events",
        "repos_url": "https://api.github.com/users/simplepersonru/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/simplepersonru/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/simplepersonru/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/simplepersonru",
        "user_view_type": "public"
    }
}