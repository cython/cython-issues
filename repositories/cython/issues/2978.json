{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I ran across a bug today (tested with 0.29.8), where if you define a `struct` to match the dtype of a structured array, and the structured array has a string field, if you pass a single \"row\" from that array into a cython `cpdef` function expecting the matching struct, and the record does not have a string of the same length as the char array, cython throws an error. This error does not occur if you are operating fully on the cython side and never cross the python/cython boundary.\r\n\r\nIn the below gist is a minimal example that demonstrates the bug\r\nhttps://gist.github.com/synapticarbors/0f9014084994f384c0713dc27be96006\r\n\r\nI'm copying the example below in full:\r\n\r\n**testlib.pyx**\r\n\r\n```cython\r\nimport numpy as np\r\ncimport numpy as np\r\n\r\n\r\ncdef packed struct foo_type:\r\n    np.float64_t x\r\n    char[4] y\r\n    np.int64_t z\r\n\r\n\r\ncpdef double get_foo_x(foo_type f):\r\n    return f.x\r\n\r\n\r\ncpdef double foo_test_struct():\r\n    cdef:\r\n        foo_type f\r\n\r\n    f.x = 1.0\r\n    for i, c in enumerate(b'ab'):\r\n        f.y[i] = c\r\n    f.z = 2\r\n\r\n    return get_foo_x(f)\r\n\r\n\r\ncpdef double foo_test_nparray():\r\n    cdef:\r\n        foo_type[:] x\r\n\r\n    N = 5\r\n    dtype = [('x', np.float64), ('y', 'S4'), ('z', np.int64)]\r\n    xarr = np.zeros(N, dtype=dtype)\r\n\r\n    xarr['x'] = np.arange(N) + 1.0\r\n    xarr['y'] = b'ab'\r\n    xarr['z'] = np.arange(N, 0, -1)\r\n\r\n    x = xarr\r\n\r\n    return get_foo_x(x[0])\r\n```\r\n\r\n**test.py**\r\n\r\n```python\r\nimport numpy as np\r\n\r\nimport testlib\r\n\r\nprint('####################')\r\nprint('Internally created struct: {} (expected: 1.0)'.format(testlib.foo_test_struct()))\r\nprint('####################')\r\nprint('Internally created np array: {} (expected: 1.0)'.format(testlib.foo_test_nparray()))\r\nprint('####################')\r\nprint('####################')\r\nprint('Testing np record from python -> cython')\r\nN = 5\r\ndtype = [('x', np.float64), ('y', 'S4'), ('z', np.int64)]\r\nx = np.zeros(N, dtype=dtype)\r\n\r\nx['x'] = np.arange(N).astype(np.float64) + 1\r\nx['y'] = b'ab'\r\nx['z'] = np.arange(N, 0, -1)\r\n\r\n# Set first record to have a string that takes up the entire 4 elements\r\nx['y'][0] = 'abcd'\r\n\r\n# This works\r\nprint('Externally created np array w/full string: {} (expected: 1.0)'.format(testlib.get_foo_x(x[0])))\r\n\r\n# This crashes\r\nprint('Externally created np array w/short string: {} (expected: 2.0)'.format(testlib.get_foo_x(x[1])))\r\n```\r\n\r\nRunning `test.py` gives the following output:\r\n\r\n```\r\n####################\r\nInternally created struct: 1.0 (expected: 1.0)\r\n####################\r\nInternally created np array: 1.0 (expected: 1.0)\r\n####################\r\n####################\r\nTesting np record from python -> cython\r\nExternally created np array w/full string: 1.0 (expected: 1.0)\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 27, in <module>\r\n    print('Externally created np array w/full string: {} (expected: 2.0)'.format(testlib.get_foo_x(x[1])))\r\n  File \"testlib.pyx\", line 11, in testlib.get_foo_x\r\n    cpdef double get_foo_x(foo_type f):\r\n  File \"stringsource\", line 25, in FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7testlib_foo_type\r\n  File \"stringsource\", line 93, in carray.from_py.__Pyx_carray_from_py_char\r\nIndexError: not enough values found during array assignment, expected 4, got 2\r\n```\r\n\r\nIt looks like the source of the problem is:\r\n\r\nhttps://github.com/cython/cython/blob/084a25f55d0b4cf8b4c3cd496ec57bb3e2f57f71/Cython/Utility/CConvert.pyx#L76-L98\r\n\r\nI think when it iterates over the character array it doesn't take into account what comes after the null terminated end of the string and then thinks there isn't enough data there.",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2978/comments",
    "created_at": "2019-05-31T18:50:40Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2978/events",
    "html_url": "https://github.com/cython/cython/issues/2978",
    "id": 450935225,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2978/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0NTA5MzUyMjU=",
    "number": 2978,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Error when passing single numpy record to cython function containing string",
    "updated_at": "2019-05-31T18:50:40Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2978",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/589279?v=4",
        "events_url": "https://api.github.com/users/synapticarbors/events{/privacy}",
        "followers_url": "https://api.github.com/users/synapticarbors/followers",
        "following_url": "https://api.github.com/users/synapticarbors/following{/other_user}",
        "gists_url": "https://api.github.com/users/synapticarbors/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/synapticarbors",
        "id": 589279,
        "login": "synapticarbors",
        "node_id": "MDQ6VXNlcjU4OTI3OQ==",
        "organizations_url": "https://api.github.com/users/synapticarbors/orgs",
        "received_events_url": "https://api.github.com/users/synapticarbors/received_events",
        "repos_url": "https://api.github.com/users/synapticarbors/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/synapticarbors/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/synapticarbors/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/synapticarbors"
    }
}