{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nWhen running scikit-image test suite under Thread Sanitizer (using nascheme TSAN images for NumPy and SciPy https://github.com/nascheme/cpython_sanity), a segfault related to Traceback generation gets hit from time to time. More specifically, when the tests for `skimage.graph` are ran, the following traceback is shown in gdb:\n\n```\n#0  0x000055b2571f2504 in __tsan_atomic32_load ()\n#1  0x00007f73497f845f in _Py_atomic_load_uint32_relaxed (obj=0xc) at ./Include/cpython/pyatomic_gcc.h:339\n#2  Py_INCREF (op=0x0) at ./Include/object.h:810\n#3  _Py_NewRef (obj=0x0) at ./Include/object.h:1058\n#4  _PyFunction_FromConstructor (constr=constr@entry=0x7ffdde22c348) at Objects/funcobject.c:116\n#5  0x00007f73497f2bf5 in PyFrame_New (tstate=0x7f7349da8e30 <_PyRuntime+310448>, code=0x7f73101e00e0, globals=<optimized out>, locals=0x0)\n    at Objects/frameobject.c:1920\n#6  0x00007f72fad56118 in __Pyx_AddTraceback (funcname=0x7f72fadf2c5a \"View.MemoryView._err_dim\", c_line=0, py_line=1253, \n    filename=0x7f72fadedda5 \"<stringsource>\") at skimage/graph/_mcp.cpython-313t-x86_64-linux-gnu.so.p/_mcp.c:44128\n#7  0x00007f72fadc028c in __pyx_memoryview_err_dim (__pyx_v_error=0x7f7349d2d598 <_PyExc_IndexError>, __pyx_v_msg=0x7f7309b15700, \n    __pyx_v_dim=0) at skimage/graph/_mcp.cpython-313t-x86_64-linux-gnu.so.p/_mcp.c:16458\n#8  0x00007f72fadc7337 in __pyx_memoryview_slice_memviewslice (__pyx_v_dst=0x7ffdde22cac8, __pyx_v_shape=3, __pyx_v_stride=1, \n    __pyx_v_suboffset=-1, __pyx_v_dim=0, __pyx_v_new_ndim=0, __pyx_v_suboffset_dim=0x7ffdde22cc70, __pyx_v_start=3, __pyx_v_stop=0, \n    __pyx_v_step=0, __pyx_v_have_start=0, __pyx_v_have_stop=0, __pyx_v_have_step=0, __pyx_v_is_slice=0)\n    at skimage/graph/_mcp.cpython-313t-x86_64-linux-gnu.so.p/_mcp.c:12972\n#9  0x00007f72fadc5bda in __pyx_memview_slice (__pyx_v_memview=0x7f730b102d80, __pyx_v_indices=0x7f730a8f7cc0)\n    at skimage/graph/_mcp.cpython-313t-x86_64-linux-gnu.so.p/_mcp.c:12574\n```\n\nWhich in turn calls `PyFrame_New`, defined in the CPython API:\n\n```\n#6  0x00007f72fad56118 in __Pyx_AddTraceback (funcname=0x7f72fadf2c5a \"View.MemoryView._err_dim\", c_line=0, py_line=1253, \n    filename=0x7f72fadedda5 \"<stringsource>\") at skimage/graph/_mcp.cpython-313t-x86_64-linux-gnu.so.p/_mcp.c:44128\n44128\t    py_frame = PyFrame_New(\n(gdb) l\n44123\t            goto bad;\n44124\t        }\n44125\t        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);\n44126\t        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);\n44127\t    }\n44128\t    py_frame = PyFrame_New(\n44129\t        tstate,            /*PyThreadState *tstate,*/\n44130\t        py_code,           /*PyCodeObject *code,*/\n44131\t        __pyx_mstate_global->__pyx_d,    /*PyObject *globals,*/\n44132\t        0                  /*PyObject *locals*/\n```\n\nI haven't been able to produce a small reproducing snippet, however, after inspecting the CPython issue tracker, it seems that frame handling is not thread-safe, c.f., https://github.com/python/cpython/issues/118680 and https://github.com/python/cpython/issues/128421. I don't know if the call to `PyFrame_New` needs to be enclosed in a critical section.\n\n### Code to reproduce the behaviour:\n\n```cython\n# example code\n```\n\n\n### Expected behaviour\n\n_No response_\n\n### OS\n\nLinux\n\n### Python version\n\n3.13.2t\n\n### Cython version\n\n3.1.0b0 (nightly wheel)\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I'll have a look in more detail tomorrow. A quick look through `PyFrame_New` doesn't show anything obvious.\n\nThe line it's failing on is increfing the function name. Which comes from the code object and the code object is just a constant - nothing should be changing any of that.\n\nWe have an internal cache of the code objects in Cython. My belief is that I've made that thread-safe, but it's possible that I've missed something. But that'd be what I'm most suspicious of.",
            "created_at": "2025-03-11T22:29:51Z",
            "html_url": "https://github.com/cython/cython/issues/6718#issuecomment-2715846002",
            "id": 2715846002,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6718",
            "node_id": "IC_kwDOABDGAc6h4IVy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2715846002/reactions"
            },
            "updated_at": "2025-03-11T22:29:51Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2715846002",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Could you define the macro `__PYX_DEBUG_ATOMICS` when you compile, and report back to me what it says when you compile - there should be a message like\n\n> Using standard C atomics\n\nWhich _might_ be relevant?",
            "created_at": "2025-03-11T22:35:48Z",
            "html_url": "https://github.com/cython/cython/issues/6718#issuecomment-2715854731",
            "id": 2715854731,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6718",
            "node_id": "IC_kwDOABDGAc6h4KeL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2715854731/reactions"
            },
            "updated_at": "2025-03-11T22:35:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2715854731",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> We have an internal cache of the code objects in Cython. My belief is that I've made that thread-safe, but it's possible that I've missed something. But that'd be what I'm most suspicious of.\n\nActually, https://github.com/cython/cython/pull/6665 fixed other segfaults that were also appearing under the same test suite\n\n> Could you define the macro __PYX_DEBUG_ATOMICS when you compile, and report back to me what it says when you compile - there should be a message like\n\nLet me check it!",
            "created_at": "2025-03-11T22:47:13Z",
            "html_url": "https://github.com/cython/cython/issues/6718#issuecomment-2715871116",
            "id": 2715871116,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6718",
            "node_id": "IC_kwDOABDGAc6h4OeM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2715871116/reactions"
            },
            "updated_at": "2025-03-11T22:47:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2715871116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1878982?v=4",
                "events_url": "https://api.github.com/users/andfoy/events{/privacy}",
                "followers_url": "https://api.github.com/users/andfoy/followers",
                "following_url": "https://api.github.com/users/andfoy/following{/other_user}",
                "gists_url": "https://api.github.com/users/andfoy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/andfoy",
                "id": 1878982,
                "login": "andfoy",
                "node_id": "MDQ6VXNlcjE4Nzg5ODI=",
                "organizations_url": "https://api.github.com/users/andfoy/orgs",
                "received_events_url": "https://api.github.com/users/andfoy/received_events",
                "repos_url": "https://api.github.com/users/andfoy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/andfoy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/andfoy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/andfoy",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6718/comments",
    "created_at": "2025-03-11T21:57:04Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6718/events",
    "html_url": "https://github.com/cython/cython/issues/6718",
    "id": 2911973741,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6718/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6tkTFt",
    "number": 6718,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6718/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6718/timeline",
    "title": "[BUG] Segfault on __Pyx_AddTraceback under free-threaded Python",
    "updated_at": "2025-03-11T22:47:25Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6718",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1878982?v=4",
        "events_url": "https://api.github.com/users/andfoy/events{/privacy}",
        "followers_url": "https://api.github.com/users/andfoy/followers",
        "following_url": "https://api.github.com/users/andfoy/following{/other_user}",
        "gists_url": "https://api.github.com/users/andfoy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/andfoy",
        "id": 1878982,
        "login": "andfoy",
        "node_id": "MDQ6VXNlcjE4Nzg5ODI=",
        "organizations_url": "https://api.github.com/users/andfoy/orgs",
        "received_events_url": "https://api.github.com/users/andfoy/received_events",
        "repos_url": "https://api.github.com/users/andfoy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/andfoy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/andfoy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/andfoy",
        "user_view_type": "public"
    }
}