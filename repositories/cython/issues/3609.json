{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I think assigning to a struct member should be treated like assigning to the struct as a whole regarding data sharing mode.\r\n\r\nIn the following example, `tid` is made private in the parallel block, `s` isn't, and both values disagree.\r\n```cython\r\nimport time\r\nfrom cython import parallel\r\n\r\n\r\ncdef struct mystruct:\r\n    int tid\r\n\r\ndef main():\r\n    cdef int tid\r\n    cdef mystruct s\r\n\r\n    with nogil, parallel.parallel():\r\n        tid = parallel.threadid()\r\n        s.tid = parallel.threadid()\r\n\r\n        with gil:\r\n            time.sleep(1)\r\n            print(\"tid = %d, s.tid = %d\" % (tid, s.tid))\r\n```\r\n\r\nThe workaround is pretty simple, assign `s` as a whole with `s = mystruct(0)` and then change its members as needed.\r\n\r\nThe situation seems to be even worse with python objects although I have no use-case for it.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I tried to look into this issue. I guess the code responsible for collecting the assignment in the parallel sections is in `TypeInference.py`, in the method `MarkParallelAssignments.mark_assignment`.\r\n\r\nhttps://github.com/cython/cython/blob/917dbeef5422b3ef49874d60bbb70c294c5c45e2/Cython/Compiler/TypeInference.py#L42-L48\r\n\r\nThis method only handle the case of assigning to a simple variable. It completely ignores the case where it is an `AttributeNode`.\r\n\r\nI thought that adding something like this could do it.\r\n```python\r\n        elif isinstance(lhs, ExprNodes.AttributeNode):\r\n            self.mark_assignment(lhs.obj, rhs, inplace_op)\r\n```\r\nBut it turns out `lhs.obj` have an `entry` attribute set to `None`. I'm not sure where it's supposed to get set.",
            "created_at": "2020-05-21T21:24:00Z",
            "html_url": "https://github.com/cython/cython/issues/3609#issuecomment-632353982",
            "id": 632353982,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3609",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjM1Mzk4Mg==",
            "updated_at": "2020-05-21T21:24:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/632353982",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
                "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
                "followers_url": "https://api.github.com/users/Celelibi/followers",
                "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Celelibi",
                "id": 6136274,
                "login": "Celelibi",
                "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
                "organizations_url": "https://api.github.com/users/Celelibi/orgs",
                "received_events_url": "https://api.github.com/users/Celelibi/received_events",
                "repos_url": "https://api.github.com/users/Celelibi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Celelibi"
            }
        },
        {
            "author_association": "NONE",
            "body": "One way to make it work is to propagate the call to `AttributeNode.analyse_target_declaration` to `self.obj` instead of doing nothing.\r\nhttps://github.com/cython/cython/blob/917dbeef5422b3ef49874d60bbb70c294c5c45e2/Cython/Compiler/ExprNodes.py#L6874-L6875\r\n\r\nBut I'm not sure it's the right way to do it since many `ExprNode` subclasses don't implement `analyse_target_declaration` because they're not supposed to be assignable. And here I'd want to pretend that the object we take the attribute on, is assigned. Just to make it private in the parallel section.\r\n\r\nWould that be an abuse of `analyse_target_declaration`?\r\nAnd what to do when the base object isn't a `NameNode`? As far as I know, it could be any expression that can evaluate to a struct or to a python object, like a function call or a pointer cast.\r\n\r\nOverall it looks like the mechanism to determine which variable is private or shared has a lot of holes. It would need a lot more design decisions than I can make to make it right.",
            "created_at": "2020-05-22T20:17:24Z",
            "html_url": "https://github.com/cython/cython/issues/3609#issuecomment-632894792",
            "id": 632894792,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3609",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjg5NDc5Mg==",
            "updated_at": "2020-05-22T20:17:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/632894792",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
                "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
                "followers_url": "https://api.github.com/users/Celelibi/followers",
                "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Celelibi",
                "id": 6136274,
                "login": "Celelibi",
                "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
                "organizations_url": "https://api.github.com/users/Celelibi/orgs",
                "received_events_url": "https://api.github.com/users/Celelibi/received_events",
                "repos_url": "https://api.github.com/users/Celelibi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Celelibi"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think this is not an entirely clear case. I can think of use cases where threads work on different fields in a shared struct, for example. Making the whole struct private because one field gets assigned doesn't strike me as an obvious choice.",
            "created_at": "2020-05-22T20:28:54Z",
            "html_url": "https://github.com/cython/cython/issues/3609#issuecomment-632897332",
            "id": 632897332,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3609",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjg5NzMzMg==",
            "updated_at": "2020-05-22T20:28:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/632897332",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "That's precisely the kind of use-case for an \"expert mode\" where the user can force the sharing mode. BTW, in this case, making the struct private or shared is not much of a choice cython can make. Only one of the sharing mode make sens for a given code.\r\n\r\nAnyway, I don't think that sharing variables by default is the right thing to do. It easily lead to code that silently violate the assumption that the thread execution order doesn't matter. However, I think we can guaranty the assumption to hold with a rule like this:\r\n- The whole world outiside of the thread-local variable virtually get `const`-like qualifier.\r\n\r\nThe `const` consistency is easily analyzable and this could even exhibit potential bugs when using a function that take a non-const pointer.\r\n\r\nFor example, something like this should produce a warning.\r\n```cython\r\nfrom cython import parallel\r\n\r\ncdef int x\r\ncdef int *tl\r\n\r\nwith nogil, parallel.parallel():\r\n    tl = &x\r\n```\r\n`tl` is assigned in the parallel section, therefore it is thread-local and doesn't get the const-like behavior. Its type is `int *`.\r\nHowever, `x` is only read in the parallel section, therefore it gets the const-like behavior, its type is equivalent to `const int`, and `tl = &x` tries to assign a `const int *` to an `int *` which should generate a warning.",
            "created_at": "2020-05-22T22:22:24Z",
            "html_url": "https://github.com/cython/cython/issues/3609#issuecomment-632930992",
            "id": 632930992,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3609",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjkzMDk5Mg==",
            "updated_at": "2020-05-22T22:22:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/632930992",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
                "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
                "followers_url": "https://api.github.com/users/Celelibi/followers",
                "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Celelibi",
                "id": 6136274,
                "login": "Celelibi",
                "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
                "organizations_url": "https://api.github.com/users/Celelibi/orgs",
                "received_events_url": "https://api.github.com/users/Celelibi/received_events",
                "repos_url": "https://api.github.com/users/Celelibi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Celelibi"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3609/comments",
    "created_at": "2020-05-13T20:01:49Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3609/events",
    "html_url": "https://github.com/cython/cython/issues/3609",
    "id": 617717976,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3609/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2MTc3MTc5NzY=",
    "number": 3609,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Assigning struct member doesn't make a variable private in parallel section",
    "updated_at": "2020-05-22T22:22:24Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3609",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4",
        "events_url": "https://api.github.com/users/Celelibi/events{/privacy}",
        "followers_url": "https://api.github.com/users/Celelibi/followers",
        "following_url": "https://api.github.com/users/Celelibi/following{/other_user}",
        "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Celelibi",
        "id": 6136274,
        "login": "Celelibi",
        "node_id": "MDQ6VXNlcjYxMzYyNzQ=",
        "organizations_url": "https://api.github.com/users/Celelibi/orgs",
        "received_events_url": "https://api.github.com/users/Celelibi/received_events",
        "repos_url": "https://api.github.com/users/Celelibi/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Celelibi"
    }
}