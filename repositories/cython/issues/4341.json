{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "**Describe the bug**\r\nBad C code generation, missing check for `Py_None` in optimized code.\r\nPremature (immature?) optimization is the root of all evil :wink: \r\n\r\n**To Reproduce**\r\nCode to reproduce the behaviour:\r\n```cython\r\n# cython: language_level=3\r\n\r\ndef foo(d):\r\n    cdef str typestr\r\n    cdef char typekind\r\n    typestr = d.get('typestr')\r\n    typekind = <char>ord(typestr[1])\r\n    return typekind\r\n```\r\n\r\nThe generated C code reads:\r\n\r\n```c\r\n  /* \"test.pyx\":7\r\n *     cdef char typekind\r\n *     typestr = d.get('typestr')\r\n *     typekind = <char>ord(typestr[1])             # <<<<<<<<<<<<<<\r\n *     return typekind\r\n */\r\n  __pyx_t_4 = __Pyx_GetItemInt_Unicode(__pyx_v_typestr, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == (Py_UCS4)-1)) __PYX_ERR(0, 7, __pyx_L1_error)\r\n  __pyx_v_typekind = ((char)((long)__pyx_t_4));\r\n```\r\nNote there is no check for `Py_None`. Note also that `__Pyx_GetItemInt_Unicode` does not perform typechecks and assume the input is `PyUnicode`.\r\n\r\n**Expected behavior**\r\n\r\nThe following trivial Cython code change inhibits the `_Pyx_GetItemInt_Unicode` optimization, and the generated C code adds a check for `Py_None`:\r\n\r\n```cython\r\ndef foo(...):\r\n    ...\r\n    typekind = <char>ord(typestr[1:2])\r\n    ...\r\n```\r\n\r\n```c\r\n  /* \"test.pyx\":7\r\n *     cdef char typekind\r\n *     typestr = d.get('typestr')\r\n *     typekind = <char>ord(typestr[1:2])             # <<<<<<<<<<<<<<\r\n *     return typekind\r\n */\r\n  if (unlikely(__pyx_v_typestr == Py_None)) {\r\n    PyErr_SetString(PyExc_TypeError, \"'NoneType' object is not subscriptable\");\r\n    __PYX_ERR(0, 7, __pyx_L1_error)\r\n  }\r\n  __pyx_t_1 = __Pyx_PyUnicode_Substring(__pyx_v_typestr, 1, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_1);\r\n  __pyx_t_4 = __Pyx_PyObject_Ord(__pyx_t_1); if (unlikely(__pyx_t_4 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(0, 7, __pyx_L1_error)\r\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\r\n  __pyx_v_typekind = ((char)__pyx_t_4);\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - Cython version0.29.24\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "At least\r\n\r\n> Note also that __Pyx_GetItemInt_Unicode does not perform typechecks and assume the input is PyUnicode.\r\n\r\nis ok I think - the type check should be when you assign to `typestr`.\r\n\r\nOff the top of my head I can't remember about local variables and `None` - would have to remind myself.",
            "created_at": "2021-08-14T13:22:19Z",
            "html_url": "https://github.com/cython/cython/issues/4341#issuecomment-898894185",
            "id": 898894185,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4341",
            "node_id": "IC_kwDOABDGAc41lAlp",
            "performed_via_github_app": null,
            "updated_at": "2021-08-14T13:22:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/898894185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Local variables can be None. There's an \"as_none_safe_node()\" call missing somewhere in the optimiser code.\n",
            "created_at": "2021-08-14T13:27:50Z",
            "html_url": "https://github.com/cython/cython/issues/4341#issuecomment-898894700",
            "id": 898894700,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4341",
            "node_id": "IC_kwDOABDGAc41lAts",
            "performed_via_github_app": null,
            "updated_at": "2021-08-14T13:27:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/898894700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Well, after quite a bit of time looking at the issue, this is a possible fix:\r\n\r\n```diff\r\ndiff --git a/Cython/Compiler/ExprNodes.py b/Cython/Compiler/ExprNodes.py\r\nindex 719b7f2bf..ceba70084 100644\r\n--- a/Cython/Compiler/ExprNodes.py\r\n+++ b/Cython/Compiler/ExprNodes.py\r\n@@ -3685,12 +3685,16 @@ class IndexNode(_IndexingBaseNode):\r\n             # Py_UNICODE/Py_UCS4 will automatically coerce to a unicode string\r\n             # if required, so this is fast and safe\r\n             self.type = PyrexTypes.c_py_ucs4_type\r\n+            # do the None check explicitly (not in a helper) to allow optimising it away\r\n+            self.base = self.base.as_none_safe_node(\"'NoneType' object is not subscriptable\")\r\n         elif self.index.type.is_int and base_type is bytearray_type:\r\n             if setting:\r\n                 self.type = PyrexTypes.c_uchar_type\r\n             else:\r\n                 # not using 'uchar' to enable fast and safe error reporting as '-1'\r\n                 self.type = PyrexTypes.c_int_type\r\n+            # do the None check explicitly (not in a helper) to allow optimising it away\r\n+            self.base = self.base.as_none_safe_node(\"'NoneType' object is not subscriptable\")\r\n         elif is_slice and base_type in (bytes_type, bytearray_type, str_type, unicode_type, list_type, tuple_type):\r\n             self.type = base_type\r\n         else:\r\n```\r\n\r\nNote however that I'm not confident this is the right way to do it. Look at the end of this method:\r\n\r\n```python\r\nclass IndexNode:\r\n\r\n    def analyse_as_pyobject(self, ...):\r\n        ...\r\n        self.wrap_in_nonecheck_node(env, getting)\r\n        return self\r\n```\r\n\r\nI would expect the `wrap_in_nonecheck_node()` call to handle the thing, but it does not, unless the `nonecheck` directive is on.\r\nPerhaps there is a \"smart fix\" that can be implemented in `wrap_in_nonecheck_node()`?\r\n\r\n@scoder If you can't think of a better fix, then I'll submit a PR with the patch above. Please advise.\r\n\r\n",
            "created_at": "2021-08-15T09:13:25Z",
            "html_url": "https://github.com/cython/cython/issues/4341#issuecomment-899020733",
            "id": 899020733,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4341",
            "node_id": "IC_kwDOABDGAc41lfe9",
            "performed_via_github_app": null,
            "updated_at": "2021-08-15T09:13:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/899020733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/294981?v=4",
                "events_url": "https://api.github.com/users/dalcinl/events{/privacy}",
                "followers_url": "https://api.github.com/users/dalcinl/followers",
                "following_url": "https://api.github.com/users/dalcinl/following{/other_user}",
                "gists_url": "https://api.github.com/users/dalcinl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dalcinl",
                "id": 294981,
                "login": "dalcinl",
                "node_id": "MDQ6VXNlcjI5NDk4MQ==",
                "organizations_url": "https://api.github.com/users/dalcinl/orgs",
                "received_events_url": "https://api.github.com/users/dalcinl/received_events",
                "repos_url": "https://api.github.com/users/dalcinl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dalcinl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dalcinl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dalcinl"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "I think the best fix would be to change `self.wrap_in_nonecheck_node(...)`? I'd think it should only skip the nonecheck if the `self.base` is a memoryview/ndarray?",
            "created_at": "2021-08-15T09:50:42Z",
            "html_url": "https://github.com/cython/cython/issues/4341#issuecomment-899024778",
            "id": 899024778,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4341",
            "node_id": "IC_kwDOABDGAc41lgeK",
            "performed_via_github_app": null,
            "updated_at": "2021-08-15T09:50:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/899024778",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4341/comments",
    "created_at": "2021-08-14T11:17:15Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/294981?v=4",
                "events_url": "https://api.github.com/users/dalcinl/events{/privacy}",
                "followers_url": "https://api.github.com/users/dalcinl/followers",
                "following_url": "https://api.github.com/users/dalcinl/following{/other_user}",
                "gists_url": "https://api.github.com/users/dalcinl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dalcinl",
                "id": 294981,
                "login": "dalcinl",
                "node_id": "MDQ6VXNlcjI5NDk4MQ==",
                "organizations_url": "https://api.github.com/users/dalcinl/orgs",
                "received_events_url": "https://api.github.com/users/dalcinl/received_events",
                "repos_url": "https://api.github.com/users/dalcinl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dalcinl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dalcinl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dalcinl"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-08-14T11:31:49Z",
            "event": "labeled",
            "id": 5158617182,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDUxNTg2MTcxODI=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5158617182"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-08-15T09:13:26Z",
            "event": "mentioned",
            "id": 5159520800,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE1OTUyMDgwMA==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5159520800"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-08-15T09:13:26Z",
            "event": "subscribed",
            "id": 5159520801,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNTk1MjA4MDE=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5159520801"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-08-15T22:31:48Z",
            "event": "subscribed",
            "id": 5160199265,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNjAxOTkyNjU=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/5160199265"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4341/events",
    "html_url": "https://github.com/cython/cython/issues/4341",
    "id": 970890392,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4341/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5NzA4OTAzOTI=",
    "number": 4341,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[BUG] Bad C code generation from indexing optimization",
    "updated_at": "2021-08-15T09:50:43Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4341",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/294981?v=4",
        "events_url": "https://api.github.com/users/dalcinl/events{/privacy}",
        "followers_url": "https://api.github.com/users/dalcinl/followers",
        "following_url": "https://api.github.com/users/dalcinl/following{/other_user}",
        "gists_url": "https://api.github.com/users/dalcinl/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dalcinl",
        "id": 294981,
        "login": "dalcinl",
        "node_id": "MDQ6VXNlcjI5NDk4MQ==",
        "organizations_url": "https://api.github.com/users/dalcinl/orgs",
        "received_events_url": "https://api.github.com/users/dalcinl/received_events",
        "repos_url": "https://api.github.com/users/dalcinl/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dalcinl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dalcinl/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dalcinl"
    }
}