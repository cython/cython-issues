{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nThe sample code below produces the following output:\r\n```\r\n__radd__(2.0, 1.0)\r\n__add__(1.0, 2.0)\r\n__add__(2.0, 1.0)\r\n```\r\nI expected:\r\n```\r\n__add__(1.0, 2.0)\r\n__add__(1.0, 2.0)\r\n__add__(2.0, 1.0)\r\n```\r\nWhen computing `x + y` for the first line, the code uses `y.__radd__(x)` instead of `x.__add__(y)`. Note that class `A` is an extension class (`cdef class`) while class `B` is a regular Python class.  \r\n\r\nThe expected behavior results when both `A` and `B` are regular Python classes, or when both are extension classes. The problem only arises when `A` is an extension class and `B` is regular Python class.\n\n### Code to reproduce the behaviour:\n\n```cython\r\n# sample code\r\ncdef class A:\r\n    cdef readonly double v\r\n    def __init__(self, v):\r\n        self.v = v\r\n        \r\n    def __add__(self, y):\r\n        return f'__add__({self.v}, {y.v if isinstance(y, A) else y})'\r\n        \r\n    def __radd__(self, x):\r\n        return f'__radd__({self.v}, {x.v if isinstance(x, A) else x})'\r\n\r\nclass B(A):\r\n    def __init__(self, v):\r\n        super().__init__(v=v)\r\n\r\nx = A(1)\r\ny = B(2)\r\nprint(x + y)           # uses y.__radd__(x) not x.__add__(y)\r\nprint(x.__add__(y))    # this works\r\nprint(y + x)           # uses y.__add__(x), as expected\r\n```\r\n\n\n### Expected behaviour\n\n```\r\n__add__(1.0, 2.0)\r\n__add__(1.0, 2.0)\r\n__add__(2.0, 1.0)\r\n```\r\n\n\n### OS\n\nmacOS Sequoia 15.2\n\n### Python version\n\n3.12.2\n\n### Cython version\n\n3.0.11\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Unfortunately I think this behaviour is pretty baked into Python and we can't do much about it.\r\n\r\nWhen `B` is created, the slot `nb_add` is set to the default `object` implementation of that slot (because that's what happens to all Python classes).\r\n\r\n`PyNumber_Add` spots that `B` is a subtype of `A`, and because of that prefer's `B`'s implementation of `nb_add` (called with `x` as the first argument and `y` as the second): https://github.com/python/cpython/blob/f826beca0cedb8e4b92896544c75fd0d9dcb0446/Objects/abstract.c#L954-L955\r\n\r\n`B`'s implementation of `nb_add` (i.e. the default object `nb_add`) looks at the first arg, sees that its `nb_add` is *not* the default object `nb_add`, looks at the second arg, sees that it's implementation is the default object `nb_add` and thus calls `__radd__`. https://github.com/python/cpython/blob/f826beca0cedb8e4b92896544c75fd0d9dcb0446/Objects/typeobject.c#L9611.\r\n\r\nI really can't see any way around this. Except possibly by making all `cdef classes`s fall back to Python's default object implementation of `nb_add`, which would be a significant performance hit because it's all based on string lookup.\r\n\r\nI'll leave this open because it is a bug, but I genuinely think it's unfixable.",
            "created_at": "2025-01-06T20:12:26Z",
            "html_url": "https://github.com/cython/cython/issues/6598#issuecomment-2573842760",
            "id": 2573842760,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6598",
            "node_id": "IC_kwDOABDGAc6ZablI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2573842760/reactions"
            },
            "updated_at": "2025-01-06T20:12:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2573842760",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Cython could make non-final cdef classes override `__init_subclass__()`. Call whatever would be called normally obviously, but then loop through the slot functions and re-assign them if this situation would occur. Probably doesn't work in limited API though?",
            "created_at": "2025-01-06T21:02:17Z",
            "html_url": "https://github.com/cython/cython/issues/6598#issuecomment-2573921305",
            "id": 2573921305,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6598",
            "node_id": "IC_kwDOABDGAc6ZauwZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2573921305/reactions"
            },
            "updated_at": "2025-01-06T21:02:17Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2573921305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yeah that might work. I think the implementation might be quite tricky though",
            "created_at": "2025-01-06T21:48:23Z",
            "html_url": "https://github.com/cython/cython/issues/6598#issuecomment-2573986549",
            "id": 2573986549,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6598",
            "node_id": "IC_kwDOABDGAc6Za-r1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2573986549/reactions"
            },
            "updated_at": "2025-01-06T21:48:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2573986549",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6598/comments",
    "created_at": "2025-01-06T17:25:23Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6598/events",
    "html_url": "https://github.com/cython/cython/issues/6598",
    "id": 2771109201,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6598/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6lK8VR",
    "number": 6598,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6598/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6598/timeline",
    "title": "[BUG] __radd__ etc misused by Python classes derived from Cython extension classes",
    "updated_at": "2025-01-06T21:48:24Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6598",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1808545?v=4",
        "events_url": "https://api.github.com/users/gplepage/events{/privacy}",
        "followers_url": "https://api.github.com/users/gplepage/followers",
        "following_url": "https://api.github.com/users/gplepage/following{/other_user}",
        "gists_url": "https://api.github.com/users/gplepage/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gplepage",
        "id": 1808545,
        "login": "gplepage",
        "node_id": "MDQ6VXNlcjE4MDg1NDU=",
        "organizations_url": "https://api.github.com/users/gplepage/orgs",
        "received_events_url": "https://api.github.com/users/gplepage/received_events",
        "repos_url": "https://api.github.com/users/gplepage/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gplepage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gplepage/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gplepage",
        "user_view_type": "public"
    }
}