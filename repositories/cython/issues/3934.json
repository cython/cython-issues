{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Hi,\r\n\r\nI created pythoncapi_compat.h header file to ease support multiple Python versions. In practice, it provides new functions of the Python C API to old Python versions (up to Python 2.7, including Python 3.5).\r\n\r\nhttps://github.com/pythoncapi/pythoncapi_compat\r\n\r\nWould it make sense to use it in Cython?\r\n\r\nCython/Utility/ModuleSetupCode.c contains code like:\r\n\r\n```\r\n#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)\r\n\r\n#if PY_VERSION_HEX >= 0x030900A4\r\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)\r\n  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)\r\n#else\r\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)\r\n  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)\r\n#endif\r\n```\r\n\r\npythoncapi_compat.h provides Py_SET_REFCNT(), Py_SET_SIZE() and Py_NewRef() on all Python versions (use existing functions if available). The advantage is use regular Py_xxx() functions rather than having to use custom __Pyx_xxx() functions.\r\n\r\nThe problem is that I don't understand Cython is implemented, and so I'm not sure how to include an header file in ModuleSetupCode.c for example.\r\n\r\nVictor",
    "closed_at": "2020-12-07T21:56:04Z",
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "I definitely don't make the decision on this but I guess the issues would be:\r\n* Currently Cython modules depend only on the Python headers and the C standard library (which is about as minimal dependencies as possible). This adds a new dependency, so if Cython did use it then would probably need to distribute pythoncapi_compat.h too (rather than relying on users installing it).\r\n* ModuleSetupCode.py includes compatibility workarounds for other implementations (mainly PyPy, but it looks like Pyston too). It doesn't immediately look like these workarounds overlap with what you've got in pythoncapi_compat.h but it's potentially something that Cython needs to support than may not be in your scope.",
            "created_at": "2020-12-05T11:45:24Z",
            "html_url": "https://github.com/cython/cython/issues/3934#issuecomment-739240429",
            "id": 739240429,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3934",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczOTI0MDQyOQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-12-05T11:45:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/739240429",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This adds a new dependency\r\n\r\nTechnically, I'm not sure that producing a `#include \"pythoncapi_compat.h\"` in the final C code would be convenient. A more convenient approach would be put copy/paste the pythoncapi_compat.h content in the C code directly (as the C preprocessor already does for includes), to not have to install the file on the system (outside Cython).\r\n\r\nAlso, I suggest to keep a copy of pythoncapi_compat.h in your Cython, and only update it when it's needed.\r\n\r\nThe idea is to externalize the maintenance of these \"compatibility\" functions outside Cython, to reduce Cython maintenance burden.\r\n\r\n> ModuleSetupCode.py includes compatibility workarounds for other implementations (mainly PyPy, but it looks like Pyston too).\r\n\r\npythoncapi_compat.h is part of a larger project to make the C API more abstract to better support Python implementations other than CPython. I'm interested to support PyPy, Pyston, etc. Right now, pythoncapi_compat.h only support a few functions and I didn't test it on PyPy or Pyston yet. I expect that it just works since it relies on functions which exists for a long time like Py_TYPE().\r\n\r\nMaybe using pythoncapi_compat.h in Cython right now doesn't provide any value and only gives you more work. If it would the case, it would be a bad idea ;-)",
            "created_at": "2020-12-05T22:44:01Z",
            "html_url": "https://github.com/cython/cython/issues/3934#issuecomment-739426197",
            "id": 739426197,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3934",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczOTQyNjE5Nw==",
            "performed_via_github_app": null,
            "updated_at": "2020-12-05T22:44:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/739426197",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/194129?v=4",
                "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
                "followers_url": "https://api.github.com/users/vstinner/followers",
                "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
                "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vstinner",
                "id": 194129,
                "login": "vstinner",
                "node_id": "MDQ6VXNlcjE5NDEyOQ==",
                "organizations_url": "https://api.github.com/users/vstinner/orgs",
                "received_events_url": "https://api.github.com/users/vstinner/received_events",
                "repos_url": "https://api.github.com/users/vstinner/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vstinner"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Some of the code in Cython certainly has a lot of overlap with what's being done in pythoncapi_compat.h, and it may make sense to join forces in the long run, but I'm not sure it has much value right now. \r\n\r\nIn particular, both taking on an additional dependency and shipping it as part of Cython itself have downsides (especially when it comes to versioning, and in cases that user wanted to use a library that itself included pythoncapi_compat.h). We also try hard to avoid defining symbols arbitrarily in the global namespace (by near ubiquitous use of the `__pyx` prefix) and there is value in consistency as well (if we used pythoncapi_compat.h, we could only do so for the subset that is already defined, and presumably only that functionality that is part of the latest Python's public API). \r\n\r\nIt seems to me that the primary value of pythoncapi_compat.h is amortizing the cost of supporting multiple Python versions (and, possibly, eventually a more limited C API) across a large number of modules written against the Python C API. In some sense though, Cython is already achieving this amortization for a huge number of extension libraries, so the cost/value of doing this by hand is very different than for a one-off hand-coded C module. \r\n\r\nIn summary, I would say it's worth keeping an eye on, but simply using pythoncapi_compat.h as is would probably not be worth it at this point. ",
            "created_at": "2020-12-06T09:21:27Z",
            "html_url": "https://github.com/cython/cython/issues/3934#issuecomment-739476820",
            "id": 739476820,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3934",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczOTQ3NjgyMA==",
            "performed_via_github_app": null,
            "updated_at": "2020-12-06T09:21:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/739476820",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> We also try hard to avoid defining symbols arbitrarily in the global namespace (by near ubiquitous use of the __pyx prefix) and there is value in consistency as well (...)\r\n\r\nI see, that makes sense.\r\n\r\nI close the issue.",
            "created_at": "2020-12-07T21:56:04Z",
            "html_url": "https://github.com/cython/cython/issues/3934#issuecomment-740203974",
            "id": 740203974,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3934",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc0MDIwMzk3NA==",
            "performed_via_github_app": null,
            "updated_at": "2020-12-07T21:56:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/740203974",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/194129?v=4",
                "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
                "followers_url": "https://api.github.com/users/vstinner/followers",
                "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
                "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vstinner",
                "id": 194129,
                "login": "vstinner",
                "node_id": "MDQ6VXNlcjE5NDEyOQ==",
                "organizations_url": "https://api.github.com/users/vstinner/orgs",
                "received_events_url": "https://api.github.com/users/vstinner/received_events",
                "repos_url": "https://api.github.com/users/vstinner/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vstinner"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3934/comments",
    "created_at": "2020-12-04T23:27:43Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/194129?v=4",
                "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
                "followers_url": "https://api.github.com/users/vstinner/followers",
                "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
                "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vstinner",
                "id": 194129,
                "login": "vstinner",
                "node_id": "MDQ6VXNlcjE5NDEyOQ==",
                "organizations_url": "https://api.github.com/users/vstinner/orgs",
                "received_events_url": "https://api.github.com/users/vstinner/received_events",
                "repos_url": "https://api.github.com/users/vstinner/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vstinner"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-12-07T21:56:04Z",
            "event": "closed",
            "id": 4081851125,
            "node_id": "MDExOkNsb3NlZEV2ZW50NDA4MTg1MTEyNQ==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4081851125"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3934/events",
    "html_url": "https://github.com/cython/cython/issues/3934",
    "id": 757471773,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3934/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU3NTc0NzE3NzM=",
    "number": 3934,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "[ENH] Use pythoncapi_compat.h in Cython?",
    "updated_at": "2020-12-07T21:56:04Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3934",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/194129?v=4",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vstinner",
        "id": 194129,
        "login": "vstinner",
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vstinner"
    }
}