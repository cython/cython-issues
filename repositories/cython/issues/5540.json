{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nEarlier today, I encountered an error about \"No suitable method found\" when compiling our codebase using Cython 3.0. I think this is probably due to some updates to Cython 0.29.x\r\n\r\nUnfortunately, the code is a bit large for me to create a MWE. As the library we work on is Open source, so I will try and point out the relevant lines of code below. Hopefully, this would give reasonable idea of what we are trying to do.\r\n\r\nWe have an object defined in c++ [code](https://gitlab.com/geostack/library/-/blame/master/bindings/python/src/geostack/include/pyFileHandler.h#L30)\r\n\r\n```c\r\n    using data_reader = pyException (*)(void *, TileDimensions<CTYPE>,\r\n                                        std::vector<RTYPE> &);\r\n```\r\n\r\nIn Cython, this is wrapped in the following way [here](https://gitlab.com/geostack/library/-/blame/master/bindings/python/src/geostack/raster/_cy_raster.pxd#L340)\r\n\r\n```cython\r\n        ctypedef pyException (*data_reader_d) (void*, TileDimensions[double], vector[double]&)\r\n        ctypedef pyException (*data_reader_f) (void*, TileDimensions[float], vector[float]&)\r\n        ctypedef pyException (*data_reader_f_i) (void*, TileDimensions[float], vector[uint32_t]&)\r\n        ctypedef pyException (*data_reader_d_i) (void*, TileDimensions[double], vector[uint32_t]&)\r\n        ctypedef pyException (*data_reader_f_byt) (void*, TileDimensions[float], vector[uint8_t]&)\r\n        ctypedef pyException (*data_reader_d_byt) (void*, TileDimensions[double], vector[uint8_t]&)\r\n\r\n        pyFileHandler(data_reader_f py_f, void* py_class, string filename) nogil except +\r\n        pyFileHandler(data_reader_d py_f, void* py_class, string filename) nogil except +\r\n        pyFileHandler(data_reader_f_i py_f, void* py_class, string filename) nogil except +\r\n        pyFileHandler(data_reader_d_i py_f, void* py_class, string filename) nogil except +\r\n        pyFileHandler(data_reader_f_byt py_f, void* py_class, string filename) nogil except +\r\n        pyFileHandler(data_reader_d_byt py_f, void* py_class, string filename) nogil except +\r\n\r\n```\r\n\r\nand [here](https://gitlab.com/geostack/library/-/blame/master/bindings/python/src/geostack/raster/_cy_raster.pxd#L391)\r\n\r\n```cython\r\nctypedef pyException (*data_reader_f) (void*, TileDimensions[float], vector[float]&)\r\nctypedef pyException (*data_reader_f_i) (void*, TileDimensions[float], vector[uint32_t]&)\r\nctypedef pyException (*data_reader_f_byt) (void*, TileDimensions[float], vector[uint8_t]&)\r\nctypedef pyException (*data_reader_d) (void*, TileDimensions[double], vector[double]&)\r\nctypedef pyException (*data_reader_d_i) (void*, TileDimensions[double], vector[uint32_t]&)\r\nctypedef pyException (*data_reader_d_byt) (void*, TileDimensions[double], vector[uint8_t]&)\r\n```\r\n\r\nThis is called in the cython code base [here](https://gitlab.com/geostack/library/-/blame/master/bindings/python/src/geostack/raster/_cy_raster.pxi.in#L853)\r\n\r\n```cython\r\n                self.thisptr.reset(new pyFileHandler[{{x_type}}, {{x_type}}](\r\n                    <data_reader_{{x_name}}> PyCapsule_GetPointer(self.func_capsule, \"setDataFunction\"),\r\n                    <void*> PyCapsule_GetPointer(self.cls_capsule, \"DataFileHandler\"),\r\n                    <string> \"\".encode('utf-8')))\r\n\r\n```\r\n\r\nI am not sure if this is the best way to do this wrapping in Cython. I believe the error happens because of multiple declarations for different types which causes Cython parser to throw strange errors. Though, this has been working fine with Cython 0.29.x, it seems this is not acceptable in Cython 3.0, so, any information on why this is not working or what is an appropriate way to approach would be helpful.\n\n### Code to reproduce the behaviour:\n\n```cython\r\n# example code\r\n```\r\n\n\n### Expected behaviour\n\n_No response_\n\n### OS\n\nlinux\n\n### Python version\n\n3.10.x\n\n### Cython version\n\n3.0.0\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Unless these typedefs are external, it's probably just a missing noexcept declaration somewhere.\n",
            "created_at": "2023-07-18T17:24:30Z",
            "html_url": "https://github.com/cython/cython/issues/5540#issuecomment-1640655479",
            "id": 1640655479,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5540",
            "node_id": "IC_kwDOABDGAc5hymp3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1640655479/reactions"
            },
            "updated_at": "2023-07-18T17:24:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1640655479",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "^ Seconding that this should be the resolution. I had a similar problem that took ...a while to figure out yesterday. \r\n\r\nBoth cython cdef functions and any ctypedef function pointers you define in Cython will now have `except *` in the signature by default. They will not be compatible with any extern ctypedef function pointer types from C files (and vice-versa). Use the `noexcept` keyword everywhere to omit this and regain the old types to be able to pass them back and forth and manipulate them freely. Details on this conversion are here: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html#exception-values-and-noexcept\r\n\r\nYou can also disable this exception handling change globally with a compiler directive. ",
            "created_at": "2023-07-19T03:07:30Z",
            "html_url": "https://github.com/cython/cython/issues/5540#issuecomment-1641315130",
            "id": 1641315130,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5540",
            "node_id": "IC_kwDOABDGAc5h1Hs6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1641315130/reactions"
            },
            "updated_at": "2023-07-19T03:08:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1641315130",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9628770?v=4",
                "events_url": "https://api.github.com/users/dialecticDolt/events{/privacy}",
                "followers_url": "https://api.github.com/users/dialecticDolt/followers",
                "following_url": "https://api.github.com/users/dialecticDolt/following{/other_user}",
                "gists_url": "https://api.github.com/users/dialecticDolt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dialecticDolt",
                "id": 9628770,
                "login": "dialecticDolt",
                "node_id": "MDQ6VXNlcjk2Mjg3NzA=",
                "organizations_url": "https://api.github.com/users/dialecticDolt/orgs",
                "received_events_url": "https://api.github.com/users/dialecticDolt/received_events",
                "repos_url": "https://api.github.com/users/dialecticDolt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dialecticDolt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dialecticDolt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dialecticDolt"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thank you for this comment. I spent the whole day trying to figure out why the code doesn't compile with the new Cython release. I read the section about exceptions but thought nothing of it as it stated:\r\n\r\n> The behaviour for cdef functions that are also extern is unchanged as `extern` functions are less likely to raise Python exceptions and rather tend to be plain C functions. \r\n\r\nBut I kept getting the `Function signature does not match previous declaration` errors and couldn't understand where was it coming from. Turns out the functions that were throwing this error were indeed `extern` (from a C header file) but they were declared with `__attribute__((weak))` and had to be defined in `.pyx` file. This created the difference between declarations in `.pxd` file (`extern` so I assume with implicit `noexcept`) and definitions in `.pyx` file (with the new default `except *` signature).\r\nTo fix this issue I had to add `noexcept` to declarations (`.pxd`) and definitions (`.pyx`) of the functions raising the errors.\r\n\r\nHope that would be useful to someone experiencing similar issue.",
            "created_at": "2023-07-19T09:14:25Z",
            "html_url": "https://github.com/cython/cython/issues/5540#issuecomment-1641725687",
            "id": 1641725687,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5540",
            "node_id": "IC_kwDOABDGAc5h2r73",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1641725687/reactions"
            },
            "updated_at": "2023-07-19T09:14:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1641725687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13535512?v=4",
                "events_url": "https://api.github.com/users/mfedoten/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfedoten/followers",
                "following_url": "https://api.github.com/users/mfedoten/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfedoten/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfedoten",
                "id": 13535512,
                "login": "mfedoten",
                "node_id": "MDQ6VXNlcjEzNTM1NTEy",
                "organizations_url": "https://api.github.com/users/mfedoten/orgs",
                "received_events_url": "https://api.github.com/users/mfedoten/received_events",
                "repos_url": "https://api.github.com/users/mfedoten/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfedoten/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfedoten/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfedoten"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5540/comments",
    "created_at": "2023-07-18T08:12:26Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5540/events",
    "html_url": "https://github.com/cython/cython/issues/5540",
    "id": 1809400189,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5540/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5r2UF9",
    "number": 5540,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5540/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5540/timeline",
    "title": "[BUG] Some incompatibility with upgrading from Cython 0.29.36 to Cython 3.0",
    "updated_at": "2023-07-19T09:14:25Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5540",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5336184?v=4",
        "events_url": "https://api.github.com/users/nikhil003/events{/privacy}",
        "followers_url": "https://api.github.com/users/nikhil003/followers",
        "following_url": "https://api.github.com/users/nikhil003/following{/other_user}",
        "gists_url": "https://api.github.com/users/nikhil003/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/nikhil003",
        "id": 5336184,
        "login": "nikhil003",
        "node_id": "MDQ6VXNlcjUzMzYxODQ=",
        "organizations_url": "https://api.github.com/users/nikhil003/orgs",
        "received_events_url": "https://api.github.com/users/nikhil003/received_events",
        "repos_url": "https://api.github.com/users/nikhil003/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/nikhil003/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nikhil003/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/nikhil003"
    }
}