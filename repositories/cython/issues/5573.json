{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nAfter upgrading from Cython 0.29.36 to Cython 3.0.0 produced code just hang infinitly when OpenMP is used and sub-function are called.\r\n\r\nLooking at produced code for bellow lines:\r\n```python\r\nfor j in prange(J):\r\n    foo_vec(x[:, j], y[:, j])\r\n```\r\n\r\nUsing Cython 0.29.36 produced code is:\r\n```c\r\n// for j in prange(J):\r\n\r\n  __pyx_t_1 = __pyx_v_J;\r\n  if ((1 == 0)) abort();\r\n  {\r\n      #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))\r\n          #undef likely\r\n          #undef unlikely\r\n          #define likely(x)   (x)\r\n          #define unlikely(x) (x)\r\n      #endif\r\n      __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;\r\n      if (__pyx_t_3 > 0)\r\n      {\r\n          #ifdef _OPENMP\r\n          #pragma omp parallel\r\n          #endif /* _OPENMP */\r\n          {\r\n              #ifdef _OPENMP\r\n              #pragma omp for firstprivate(__pyx_v_j) lastprivate(__pyx_v_j)\r\n              #endif /* _OPENMP */\r\n              for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){\r\n                  {\r\n                      __pyx_v_j = (Py_ssize_t)(0 + 1 * __pyx_t_2);\r\n\r\n//     foo_vec(x[:, j], y[:, j])\r\n\r\n                      __pyx_t_4.data = __pyx_v_x.data;\r\n                      __pyx_t_4.memview = __pyx_v_x.memview;\r\n                      __PYX_INC_MEMVIEW(&__pyx_t_4, 0);\r\n                      __pyx_t_4.shape[0] = __pyx_v_x.shape[0];\r\n__pyx_t_4.strides[0] = __pyx_v_x.strides[0];\r\n    __pyx_t_4.suboffsets[0] = -1;\r\n\r\n{\r\n    Py_ssize_t __pyx_tmp_idx = __pyx_v_j;\r\n    Py_ssize_t __pyx_tmp_stride = __pyx_v_x.strides[1];\r\n        __pyx_t_4.data += __pyx_tmp_idx * __pyx_tmp_stride;\r\n}\r\n\r\n__pyx_t_5.data = __pyx_v_y.data;\r\n                      __pyx_t_5.memview = __pyx_v_y.memview;\r\n                      __PYX_INC_MEMVIEW(&__pyx_t_5, 0);\r\n                      __pyx_t_5.shape[0] = __pyx_v_y.shape[0];\r\n__pyx_t_5.strides[0] = __pyx_v_y.strides[0];\r\n    __pyx_t_5.suboffsets[0] = -1;\r\n\r\n{\r\n    Py_ssize_t __pyx_tmp_idx = __pyx_v_j;\r\n    Py_ssize_t __pyx_tmp_stride = __pyx_v_y.strides[1];\r\n        __pyx_t_5.data += __pyx_tmp_idx * __pyx_tmp_stride;\r\n}\r\n\r\n__pyx_f_6my_ext_foo_vec(__pyx_t_4, __pyx_t_5);\r\n                      __PYX_XDEC_MEMVIEW(&__pyx_t_4, 0);\r\n                      __pyx_t_4.memview = NULL;\r\n                      __pyx_t_4.data = NULL;\r\n                      __PYX_XDEC_MEMVIEW(&__pyx_t_5, 0);\r\n                      __pyx_t_5.memview = NULL;\r\n                      __pyx_t_5.data = NULL;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n  }\r\n  #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))\r\n      #undef likely\r\n      #undef unlikely\r\n      #define likely(x)   __builtin_expect(!!(x), 1)\r\n      #define unlikely(x) __builtin_expect(!!(x), 0)\r\n  #endif\r\n```\r\n\r\nUsing Cython 3.0 produced code is:\r\n```c\r\n// for j in prange(J):\r\n\r\n  __pyx_t_1 = __pyx_v_J;\r\n  {\r\n      #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))\r\n          #undef likely\r\n          #undef unlikely\r\n          #define likely(x)   (x)\r\n          #define unlikely(x) (x)\r\n      #endif\r\n      __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;\r\n      if (__pyx_t_3 > 0)\r\n      {\r\n          #ifdef _OPENMP\r\n          #pragma omp parallel\r\n          #endif /* _OPENMP */\r\n          {\r\n              #ifdef _OPENMP\r\n              #pragma omp for firstprivate(__pyx_v_j) lastprivate(__pyx_v_j)\r\n              #endif /* _OPENMP */\r\n              for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){\r\n                  {\r\n                      __pyx_v_j = (Py_ssize_t)(0 + 1 * __pyx_t_2);\r\n\r\n//    foo_vec(x[:, j], y[:, j])\r\n\r\n                      __pyx_t_4.data = __pyx_v_x.data;\r\n                      __pyx_t_4.memview = __pyx_v_x.memview;\r\n                      __PYX_INC_MEMVIEW(&__pyx_t_4, 0);\r\n                      __pyx_t_4.shape[0] = __pyx_v_x.shape[0];\r\n__pyx_t_4.strides[0] = __pyx_v_x.strides[0];\r\n    __pyx_t_4.suboffsets[0] = -1;\r\n\r\n{\r\n    Py_ssize_t __pyx_tmp_idx = __pyx_v_j;\r\n    Py_ssize_t __pyx_tmp_stride = __pyx_v_x.strides[1];\r\n        __pyx_t_4.data += __pyx_tmp_idx * __pyx_tmp_stride;\r\n}\r\n\r\n__pyx_t_5.data = __pyx_v_y.data;\r\n                      __pyx_t_5.memview = __pyx_v_y.memview;\r\n                      __PYX_INC_MEMVIEW(&__pyx_t_5, 0);\r\n                      __pyx_t_5.shape[0] = __pyx_v_y.shape[0];\r\n__pyx_t_5.strides[0] = __pyx_v_y.strides[0];\r\n    __pyx_t_5.suboffsets[0] = -1;\r\n\r\n{\r\n    Py_ssize_t __pyx_tmp_idx = __pyx_v_j;\r\n    Py_ssize_t __pyx_tmp_stride = __pyx_v_y.strides[1];\r\n        __pyx_t_5.data += __pyx_tmp_idx * __pyx_tmp_stride;\r\n}\r\n\r\n__pyx_f_6my_ext_foo_vec(__pyx_t_4, __pyx_t_5); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 40, __pyx_L5_error)\r\n                      __PYX_XCLEAR_MEMVIEW(&__pyx_t_4, 0);\r\n                      __pyx_t_4.memview = NULL; __pyx_t_4.data = NULL;\r\n                      __PYX_XCLEAR_MEMVIEW(&__pyx_t_5, 0);\r\n                      __pyx_t_5.memview = NULL; __pyx_t_5.data = NULL;\r\n                      goto __pyx_L8;\r\n                      __pyx_L5_error:;\r\n                      {\r\n                          #ifdef WITH_THREAD\r\n                          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n                          #endif\r\n                          #ifdef _OPENMP\r\n                          #pragma omp flush(__pyx_parallel_exc_type)\r\n                          #endif /* _OPENMP */\r\n                          if (!__pyx_parallel_exc_type) {\r\n                            __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);\r\n                            __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;\r\n                            __Pyx_GOTREF(__pyx_parallel_exc_type);\r\n                          }\r\n                          #ifdef WITH_THREAD\r\n                          __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n                          #endif\r\n                      }\r\n                      __pyx_parallel_why = 4;\r\n                      goto __pyx_L7;\r\n                      __pyx_L7:;\r\n                      #ifdef _OPENMP\r\n                      #pragma omp critical(__pyx_parallel_lastprivates0)\r\n                      #endif /* _OPENMP */\r\n                      {\r\n                          __pyx_parallel_temp0 = __pyx_v_j;\r\n                      }\r\n                      __pyx_L8:;\r\n                      #ifdef _OPENMP\r\n                      #pragma omp flush(__pyx_parallel_why)\r\n                      #endif /* _OPENMP */\r\n                  }\r\n              }\r\n              #ifdef _OPENMP\r\n              Py_END_ALLOW_THREADS\r\n              #else\r\n{\r\n#ifdef WITH_THREAD\r\n              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n              #endif\r\n              #endif /* _OPENMP */\r\n              /* Clean up any temporaries */\r\n              __PYX_XCLEAR_MEMVIEW(&__pyx_t_4, 0);\r\n              __pyx_t_4.memview = NULL; __pyx_t_4.data = NULL;\r\n              __PYX_XCLEAR_MEMVIEW(&__pyx_t_5, 0);\r\n              __pyx_t_5.memview = NULL; __pyx_t_5.data = NULL;\r\n              #ifdef WITH_THREAD\r\n              __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n              #endif\r\n              #ifndef _OPENMP\r\n}\r\n#endif /* _OPENMP */\r\n          }\r\n      }\r\n      if (__pyx_parallel_exc_type) {\r\n        /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */\r\n        __pyx_parallel_why = 4;\r\n      }\r\n      if (__pyx_parallel_why) {\r\n        __pyx_v_j = __pyx_parallel_temp0;\r\n        switch (__pyx_parallel_why) {\r\n              case 4:\r\n          {\r\n              #ifdef WITH_THREAD\r\n              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n              #endif\r\n              __Pyx_GIVEREF(__pyx_parallel_exc_type);\r\n              __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);\r\n              __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;\r\n              #ifdef WITH_THREAD\r\n              __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n              #endif\r\n          }\r\n          goto __pyx_L1_error;\r\n        }\r\n      }\r\n  }\r\n  #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))\r\n      #undef likely\r\n      #undef unlikely\r\n      #define likely(x)   __builtin_expect(!!(x), 1)\r\n      #define unlikely(x) __builtin_expect(!!(x), 0)\r\n  #endif\r\n```\r\n\r\nI am not expecting any GIL check / any other check in `prange` body.\n\n### Code to reproduce the behaviour:\n\nmy_ext.pyx :\r\n\r\n```cython\r\ncimport cython\r\nfrom cython.parallel cimport prange\r\n\r\ncimport numpy as np\r\n\r\nnp.import_array()\r\n\r\n\r\ndef foo(np.ndarray x not None):\r\n    cdef int ndim = np.PyArray_NDIM(x)\r\n    y = np.PyArray_EMPTY(ndim, np.PyArray_DIMS(x), np.NPY_FLOAT64, 0)\r\n\r\n    if ndim == 1:\r\n        foo_vec(x, y)\r\n    elif ndim == 2:\r\n        foo_mat(x, y)\r\n\r\n    return y\r\n\r\n\r\n@cython.boundscheck(False)\r\n@cython.wraparound(False)\r\ncdef void foo_vec(const double[:] x, double[:] y) nogil:\r\n    cdef:\r\n        Py_ssize_t I = x.shape[0]\r\n        Py_ssize_t i\r\n\r\n    for i in range(I):\r\n        y[i] = x[i] * 2.0 + 1.0  # Do whatever computation on vec\r\n\r\n\r\n@cython.boundscheck(False)\r\n@cython.wraparound(False)\r\ncdef void foo_mat(const double[:, :] x,  double[:, :] y) nogil:\r\n    cdef:\r\n        Py_ssize_t J = x.shape[1]\r\n        Py_ssize_t j\r\n    \r\n    for j in prange(J):\r\n        foo_vec(x[:, j], y[:, j])\r\n\r\n```\r\n\r\nsetup.py :\r\n\r\n```python\r\nfrom setuptools import setup, Extension\r\nfrom Cython.Build import cythonize\r\nimport numpy as np\r\n\r\nsetup(\r\n    ext_modules=cythonize(\r\n        [Extension(\r\n            \"my_ext\", [\"my_ext.pyx\"],\r\n            include_dirs=[np.get_include()],\r\n            extra_compile_args=[\"-fopenmp\"],\r\n            extra_link_args=[\"-fopenmp\"],\r\n            define_macros=[(\"NPY_NO_DEPRECATED_API\", \"NPY_1_7_API_VERSION\")],\r\n        )],\r\n        language_level=3,\r\n        annotate=True,\r\n    )\r\n)\r\n```\r\n\n\n### Expected behaviour\n\nI am expecting code produced code that:\r\n- does not require any GIL check \r\n- works correctly on latest Cython version😀 \n\n### OS\n\nLinux\n\n### Python version\n\n3.10.6\n\n### Cython version\n\n3.0.0\n\n### Additional context\n\n_No response_",
    "closed_at": "2023-07-28T14:13:38Z",
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I finaly found that the `noexcept` is now required before `nogil` qualifier to tell cython that `cdef` function will not raise any exception.\r\n\r\nIt fix this issue.",
            "created_at": "2023-07-28T14:13:38Z",
            "html_url": "https://github.com/cython/cython/issues/5573#issuecomment-1655759003",
            "id": 1655759003,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5573",
            "node_id": "IC_kwDOABDGAc5isOCb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1655759003/reactions"
            },
            "updated_at": "2023-07-28T14:13:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1655759003",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1571398?v=4",
                "events_url": "https://api.github.com/users/arthurlm/events{/privacy}",
                "followers_url": "https://api.github.com/users/arthurlm/followers",
                "following_url": "https://api.github.com/users/arthurlm/following{/other_user}",
                "gists_url": "https://api.github.com/users/arthurlm/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/arthurlm",
                "id": 1571398,
                "login": "arthurlm",
                "node_id": "MDQ6VXNlcjE1NzEzOTg=",
                "organizations_url": "https://api.github.com/users/arthurlm/orgs",
                "received_events_url": "https://api.github.com/users/arthurlm/received_events",
                "repos_url": "https://api.github.com/users/arthurlm/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/arthurlm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/arthurlm/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/arthurlm"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@arthurlm This looks like a simpler duplicate of https://github.com/cython/cython/issues/5564. So thanks for the example - it'll hopefully be easier to investigate\r\n\r\nIt shouldn't be hanging without `noexcept` - this is a bug that I hope to fix in the near future. Although `noexcept` may well give a speed improvement.",
            "created_at": "2023-07-28T16:46:49Z",
            "html_url": "https://github.com/cython/cython/issues/5573#issuecomment-1655994720",
            "id": 1655994720,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5573",
            "node_id": "IC_kwDOABDGAc5itHlg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1655994720/reactions"
            },
            "updated_at": "2023-07-28T16:47:10Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1655994720",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "~Slightly alarmingly, I now don't understand how this ever worked....~\r\n\r\n~As far as I can tell we release the GIL inside the omp parallel block (so we release the GIL for *every* thread), and we reacquire the GIL inside the the omp parallel block (as at the end we require *every* thread to hold the GIL).~\r\n\r\nThis isn't true I think... ignore",
            "created_at": "2023-07-29T14:16:59Z",
            "html_url": "https://github.com/cython/cython/issues/5573#issuecomment-1656740714",
            "id": 1656740714,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5573",
            "node_id": "IC_kwDOABDGAc5iv9tq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1656740714/reactions"
            },
            "updated_at": "2023-07-29T18:55:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1656740714",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Got to the bottom of this.\r\n\r\nI believe there's a subtle error in your code: a` nogil` function says that it can be run without the GIL, but doesn't guarantee that it's run without the GIL. `prange` blocks must be run without the GIL (although you get away with it most of the time unless you hit something that needs to re-acquire the GIL). In your case you don't release the GIL before calling `foo_mat`, so one thread holds the GIL for the whole time.\r\n\r\nFrankly that's so subtle that I'm not sure anyone can be expected to spot it. Therefore my proposed fix is to get rid of the requirement and make absolutely 100% sure that the GIL is released before entering a `prange` block.",
            "created_at": "2023-07-29T21:27:52Z",
            "html_url": "https://github.com/cython/cython/issues/5573#issuecomment-1656905565",
            "id": 1656905565,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5573",
            "node_id": "IC_kwDOABDGAc5iwl9d",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1656905565/reactions"
            },
            "updated_at": "2023-07-29T21:27:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1656905565",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for your answer and your fix.\r\n`gil` / `nogil` / `with gil` / `with nogil` is more clear to me now.\r\n\r\nHowever thinking a little bit more on this, do we really want to implicitly add `with nogil` block automatically ?\r\nDoes this should not be a compiler error instead ? And we should let the programmer decide where he want to add the block ?\r\nFor example, in more complex case: the `prange` / `parallel` block could be called from function that already have done the check (or also use `prange`). So always adding the check might cause a small performances slow-down.\r\n\r\nI am not saying there is a perfect solution. I just want to explore all the possible fixes and improve my code 😀 ",
            "created_at": "2023-08-01T08:08:20Z",
            "html_url": "https://github.com/cython/cython/issues/5573#issuecomment-1659786161",
            "id": 1659786161,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5573",
            "node_id": "IC_kwDOABDGAc5i7lOx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1659786161/reactions"
            },
            "updated_at": "2023-08-01T08:08:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1659786161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1571398?v=4",
                "events_url": "https://api.github.com/users/arthurlm/events{/privacy}",
                "followers_url": "https://api.github.com/users/arthurlm/followers",
                "following_url": "https://api.github.com/users/arthurlm/following{/other_user}",
                "gists_url": "https://api.github.com/users/arthurlm/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/arthurlm",
                "id": 1571398,
                "login": "arthurlm",
                "node_id": "MDQ6VXNlcjE1NzEzOTg=",
                "organizations_url": "https://api.github.com/users/arthurlm/orgs",
                "received_events_url": "https://api.github.com/users/arthurlm/received_events",
                "repos_url": "https://api.github.com/users/arthurlm/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/arthurlm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/arthurlm/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/arthurlm"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> However thinking a little bit more on this, do we really want to implicitly add with nogil block automatically ?\r\nDoes this should not be a compiler error instead?\r\n\r\nI think if I was starting from scratch that might be how I'd do it. However, making it a compiler error now would break quite a bit of existing code, and probably require us to create a way to annotate a function to say \"this function MUST be called without the GIL\".\r\n\r\n>  For example, in more complex case: the prange / parallel block could be called from function that already have done the check (or also use prange). So always adding the check might cause a small performances slow-down.\r\n\r\nYes, that's very true. I think it's likely low cost compared to setting up a parallel/prange block. But I could be wrong.\r\n\r\nAgain, we could provide some way for the user to turn off the check, but that makes it more complicated.\r\n\r\n",
            "created_at": "2023-08-02T19:34:53Z",
            "html_url": "https://github.com/cython/cython/issues/5573#issuecomment-1662863997",
            "id": 1662863997,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5573",
            "node_id": "IC_kwDOABDGAc5jHUp9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1662863997/reactions"
            },
            "updated_at": "2023-08-02T19:34:53Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1662863997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5573/comments",
    "created_at": "2023-07-28T13:29:52Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1571398?v=4",
                "events_url": "https://api.github.com/users/arthurlm/events{/privacy}",
                "followers_url": "https://api.github.com/users/arthurlm/followers",
                "following_url": "https://api.github.com/users/arthurlm/following{/other_user}",
                "gists_url": "https://api.github.com/users/arthurlm/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/arthurlm",
                "id": 1571398,
                "login": "arthurlm",
                "node_id": "MDQ6VXNlcjE1NzEzOTg=",
                "organizations_url": "https://api.github.com/users/arthurlm/orgs",
                "received_events_url": "https://api.github.com/users/arthurlm/received_events",
                "repos_url": "https://api.github.com/users/arthurlm/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/arthurlm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/arthurlm/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/arthurlm"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-07-28T14:13:38Z",
            "event": "closed",
            "id": 9948612137,
            "node_id": "CE_lADOABDGAc5s3TE-zwAAAAJQ-8Yp",
            "performed_via_github_app": null,
            "state_reason": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/9948612137"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1571398?v=4",
                "events_url": "https://api.github.com/users/arthurlm/events{/privacy}",
                "followers_url": "https://api.github.com/users/arthurlm/followers",
                "following_url": "https://api.github.com/users/arthurlm/following{/other_user}",
                "gists_url": "https://api.github.com/users/arthurlm/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/arthurlm",
                "id": 1571398,
                "login": "arthurlm",
                "node_id": "MDQ6VXNlcjE1NzEzOTg=",
                "organizations_url": "https://api.github.com/users/arthurlm/orgs",
                "received_events_url": "https://api.github.com/users/arthurlm/received_events",
                "repos_url": "https://api.github.com/users/arthurlm/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/arthurlm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/arthurlm/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/arthurlm"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-07-28T16:46:50Z",
            "event": "mentioned",
            "id": 9950177126,
            "node_id": "MEE_lADOABDGAc5s3TE-zwAAAAJRE6dm",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/9950177126"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1571398?v=4",
                "events_url": "https://api.github.com/users/arthurlm/events{/privacy}",
                "followers_url": "https://api.github.com/users/arthurlm/followers",
                "following_url": "https://api.github.com/users/arthurlm/following{/other_user}",
                "gists_url": "https://api.github.com/users/arthurlm/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/arthurlm",
                "id": 1571398,
                "login": "arthurlm",
                "node_id": "MDQ6VXNlcjE1NzEzOTg=",
                "organizations_url": "https://api.github.com/users/arthurlm/orgs",
                "received_events_url": "https://api.github.com/users/arthurlm/received_events",
                "repos_url": "https://api.github.com/users/arthurlm/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/arthurlm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/arthurlm/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/arthurlm"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-07-28T16:46:50Z",
            "event": "subscribed",
            "id": 9950177134,
            "node_id": "SE_lADOABDGAc5s3TE-zwAAAAJRE6du",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/9950177134"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "ff57a5cafbc6be64d22493881edc0960258f757e",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/ff57a5cafbc6be64d22493881edc0960258f757e",
            "created_at": "2023-07-29T21:19:34Z",
            "event": "referenced",
            "id": 9955467263,
            "node_id": "REFE_lADOABDGAc5s3TE-zwAAAAJRZF__",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/9955467263"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5573/events",
    "html_url": "https://github.com/cython/cython/issues/5573",
    "id": 1826435390,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5573/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5s3TE-",
    "number": 5573,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/cython/cython/issues/5573/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5573/timeline",
    "title": "[BUG] OpenMP does not work anymore with function call on cython 3.0",
    "updated_at": "2023-08-02T19:34:53Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5573",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1571398?v=4",
        "events_url": "https://api.github.com/users/arthurlm/events{/privacy}",
        "followers_url": "https://api.github.com/users/arthurlm/followers",
        "following_url": "https://api.github.com/users/arthurlm/following{/other_user}",
        "gists_url": "https://api.github.com/users/arthurlm/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/arthurlm",
        "id": 1571398,
        "login": "arthurlm",
        "node_id": "MDQ6VXNlcjE1NzEzOTg=",
        "organizations_url": "https://api.github.com/users/arthurlm/orgs",
        "received_events_url": "https://api.github.com/users/arthurlm/received_events",
        "repos_url": "https://api.github.com/users/arthurlm/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/arthurlm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/arthurlm/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/arthurlm"
    }
}