{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "An env of either Cython or pypy only have not raised this error. \r\nHowever, an env installed both pypy+cython raised this error.\r\n\r\nThe standalone env of either pypy and cython can run correctly is equivalent that each mechanism can deal with __qualname__ method. However, the env installed both cannot deal with that I expected.\r\n\r\nPlease give me any solution for this problem.\r\n\r\n# env\r\n    - pypy: 7.3.9(v3.9.12) via miniconda\r\n    - CPython: 3.9.15\r\n    - diskcache: 0.5.4\r\n    - Cython==0.29.32\r\n    - MacOS: 12.6.2\r\n\r\n# PyPy Only Env\r\n- source: try1_diskcache_pypy_try.py\r\n\r\n```python\r\nfrom diskcache import FanoutCache\r\ncache = FanoutCache()\r\n@cache.memoize(typed=True, expire=1, tag='fib')\r\ndef fibonacci(number):\r\n    if number == 0:\r\n        return 0\r\n    elif number == 1:\r\n        return 1\r\n    else:\r\n        return fibonacci(number - 1) + fibonacci(number - 2)\r\nprint(sum(fibonacci(value) for value in range(100)))\r\n```\r\n\r\n```bash\r\n# Run by PyPy\r\npypy try1_diskcache_pypy_try.py \r\n573147844013817084100\r\n```\r\n\r\n## Env of CPython+Cython or PyPy+Cython\r\n\r\n- source: `try2_diskcache.pyx`\r\n```python\r\n# cython: language_level=3\r\n\r\nfrom diskcache import FanoutCache\r\ncache = FanoutCache()\r\n@cache.memoize(typed=True, expire=1, tag='fib')\r\ndef fibonacci(number):\r\n    if number == 0:\r\n        return 0\r\n    elif number == 1:\r\n        return 1\r\n    else:\r\n        return fibonacci(number - 1) + fibonacci(number - 2)\r\n```\r\n\r\n- source: try2_main.py\r\n```python\r\n# cython: language_level=3\r\nimport cython\r\nimport pyximport;pyximport.install()\r\nfrom try2_diskcache import fibonacci\r\nprint(sum(fibonacci(value) for value in range(100)))\r\n```\r\n\r\n- Result by CPython installed cython\r\n```text\r\n> python try2_main.py \r\n573147844013817084100\r\n```\r\n\r\n- Result by PyPy installed cython\r\n```bash\r\npypy try2_main.py \r\n\r\nTraceback (most recent call last):\r\n  File \"/opt/miniconda3/envs/rt_pypy39/lib/pypy3.9/site-packages/pyximport/pyximport.py\", line 216, in load_module\r\n    mod = imp.load_dynamic(name, so_path)\r\n  File \"/opt/miniconda3/envs/rt_pypy39/lib/pypy3.9/imp.py\", line 342, in load_dynamic\r\n    return _load(spec)\r\n  File \"<frozen importlib._bootstrap>\", line 711, in _load\r\n  File \"<frozen importlib._bootstrap>\", line 666, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 565, in module_from_spec\r\n  File \"<builtin>/frozen importlib._bootstrap_external\", line 1186, in create_module\r\n  File \"<frozen importlib._bootstrap>\", line 228, in _call_with_frames_removed\r\n  File \"try2_diskcache.pyx\", line 5, in init try2_diskcache\r\n    @cache.memoize(typed=True, expire=1, tag='fib')\r\n  File \"/opt/miniconda3/envs/rt_pypy39/lib/pypy3.9/site-packages/diskcache/core.py\", line 1868, in decorator\r\n    base = (full_name(func),) if name is None else (name,)\r\n  File \"/opt/miniconda3/envs/rt_pypy39/lib/pypy3.9/site-packages/diskcache/core.py\", line 25, in full_name\r\n    return func.__module__ + '.' + func.__qualname__\r\nAttributeError: 'builtin_function_or_method' object has no attribute '__qualname__'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"try2_main.py\", line 9, in <module>\r\n    from try2_diskcache import fibonacci\r\n  File \"/opt/miniconda3/envs/rt_pypy39/lib/pypy3.9/site-packages/pyximport/pyximport.py\", line 459, in load_module\r\n    module = load_module(fullname, self.path,\r\n  File \"/opt/miniconda3/envs/rt_pypy39/lib/pypy3.9/site-packages/pyximport/pyximport.py\", line 231, in load_module\r\n    raise exc.with_traceback(tb)\r\n  File \"/opt/miniconda3/envs/rt_pypy39/lib/pypy3.9/site-packages/pyximport/pyximport.py\", line 216, in load_module\r\n    mod = imp.load_dynamic(name, so_path)\r\n  File \"/opt/miniconda3/envs/rt_pypy39/lib/pypy3.9/imp.py\", line 342, in load_dynamic\r\n    return _load(spec)\r\n  File \"<frozen importlib._bootstrap>\", line 711, in _load\r\n  File \"<frozen importlib._bootstrap>\", line 666, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 565, in module_from_spec\r\n  File \"<builtin>/frozen importlib._bootstrap_external\", line 1186, in create_module\r\n  File \"<frozen importlib._bootstrap>\", line 228, in _call_with_frames_removed\r\n  File \"try2_diskcache.pyx\", line 5, in init try2_diskcache\r\n    @cache.memoize(typed=True, expire=1, tag='fib')\r\n  File \"/opt/miniconda3/envs/rt_pypy39/lib/pypy3.9/site-packages/diskcache/core.py\", line 1868, in decorator\r\n    base = (full_name(func),) if name is None else (name,)\r\n  File \"/opt/miniconda3/envs/rt_pypy39/lib/pypy3.9/site-packages/diskcache/core.py\", line 25, in full_name\r\n    return func.__module__ + '.' + func.__qualname__\r\nImportError: Building module try2_diskcache failed: [\"AttributeError: 'builtin_function_or_method' object has no attribute '__qualname__'\\n\"]\r\n```\r\n\r\n\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think this is due to a shortcoming in the cpyext layer of PyPy that emulates the Python c-api. A reproducer without using diskcache, (assuming this is run inside a venv created with PyPy3):\r\n```\r\n$ cat << EOF > simple.pyx\r\n# cython: language_level=3\r\n\r\ndef func(number):\r\n    return 42\r\nEOF\r\n\r\n$ cythonize -b simple.pyx\r\n...\r\n\r\n$ python -c \"import simple; simple.func.__qualname__\"\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nAttributeError: 'builtin_function_or_method' object has no attribute '__qualname__'\r\n```\r\n\r\nWhile Cython has an excellent test suite, some of the tests are skipped due to shortcomings in PyPy. The skipped tests are in [`test/pypy2_bugs.txt`](https://github.com/cython/cython/blob/master/tests/pypy2_bugs.txt), [`test/pypy_bugs.txt`](https://github.com/cython/cython/blob/master/tests/pypy_bugs.txt), [`tests/pypy_crash_bugs.txt`](https://github.com/cython/cython/blob/master/tests/pypy_crash_bugs.txt), [tests/pypy_implementation_detail_bugs.txt](https://github.com/cython/cython/blob/master/tests/pypy_implementation_detail_bugs.txt), but I don't see where that skips [`tests/run/qualname.pyx`](https://github.com/cython/cython/blob/master/tests/run/qualname.pyx). Or maybe that test is not exactly this case?",
            "created_at": "2022-12-20T10:42:55Z",
            "html_url": "https://github.com/cython/cython/issues/5182#issuecomment-1359162856",
            "id": 1359162856,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5182",
            "node_id": "IC_kwDOABDGAc5RAy3o",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1359162856/reactions"
            },
            "updated_at": "2022-12-20T10:43:22Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1359162856",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
                "events_url": "https://api.github.com/users/mattip/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattip/followers",
                "following_url": "https://api.github.com/users/mattip/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattip",
                "id": 823911,
                "login": "mattip",
                "node_id": "MDQ6VXNlcjgyMzkxMQ==",
                "organizations_url": "https://api.github.com/users/mattip/orgs",
                "received_events_url": "https://api.github.com/users/mattip/received_events",
                "repos_url": "https://api.github.com/users/mattip/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattip"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "(FWIW, if you already have a pure-python implementation of your code, you would see better performance by skipping Cython + PyPy and going with the pure-python version under PyPy).",
            "created_at": "2022-12-20T10:44:49Z",
            "html_url": "https://github.com/cython/cython/issues/5182#issuecomment-1359164951",
            "id": 1359164951,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5182",
            "node_id": "IC_kwDOABDGAc5RAzYX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1359164951/reactions"
            },
            "updated_at": "2022-12-20T10:44:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1359164951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
                "events_url": "https://api.github.com/users/mattip/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattip/followers",
                "following_url": "https://api.github.com/users/mattip/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattip",
                "id": 823911,
                "login": "mattip",
                "node_id": "MDQ6VXNlcjgyMzkxMQ==",
                "organizations_url": "https://api.github.com/users/mattip/orgs",
                "received_events_url": "https://api.github.com/users/mattip/received_events",
                "repos_url": "https://api.github.com/users/mattip/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattip"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "xref the PyPy issue https://foss.heptapod.net/pypy/pypy/-/issues/3878",
            "created_at": "2022-12-20T11:47:45Z",
            "html_url": "https://github.com/cython/cython/issues/5182#issuecomment-1359244126",
            "id": 1359244126,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5182",
            "node_id": "IC_kwDOABDGAc5RBGte",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1359244126/reactions"
            },
            "updated_at": "2022-12-20T11:47:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1359244126",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
                "events_url": "https://api.github.com/users/mattip/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattip/followers",
                "following_url": "https://api.github.com/users/mattip/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattip",
                "id": 823911,
                "login": "mattip",
                "node_id": "MDQ6VXNlcjgyMzkxMQ==",
                "organizations_url": "https://api.github.com/users/mattip/orgs",
                "received_events_url": "https://api.github.com/users/mattip/received_events",
                "repos_url": "https://api.github.com/users/mattip/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattip"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thank you very much! I wait for fixing.\r\n\r\nCombination of JIT(PyPy) + AOT(Cython/Numba) may make best performance on Python, which leads to selecting python  than other language for researcher especially I guess. The best performance Python may give researcher times dedicated into their research by saving learning another language. I hope.",
            "created_at": "2022-12-20T15:29:26Z",
            "html_url": "https://github.com/cython/cython/issues/5182#issuecomment-1359566708",
            "id": 1359566708,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5182",
            "node_id": "IC_kwDOABDGAc5RCVd0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1359566708/reactions"
            },
            "updated_at": "2022-12-20T15:29:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1359566708",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/34906909?v=4",
                "events_url": "https://api.github.com/users/bsnresearcher/events{/privacy}",
                "followers_url": "https://api.github.com/users/bsnresearcher/followers",
                "following_url": "https://api.github.com/users/bsnresearcher/following{/other_user}",
                "gists_url": "https://api.github.com/users/bsnresearcher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bsnresearcher",
                "id": 34906909,
                "login": "bsnresearcher",
                "node_id": "MDQ6VXNlcjM0OTA2OTA5",
                "organizations_url": "https://api.github.com/users/bsnresearcher/orgs",
                "received_events_url": "https://api.github.com/users/bsnresearcher/received_events",
                "repos_url": "https://api.github.com/users/bsnresearcher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bsnresearcher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bsnresearcher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bsnresearcher"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Combination of JIT(PyPy) + AOT(Cython/Numba) may make best performance on Python\r\n\r\nPlease be sure to measure this on your application. Benchmarking is hard but should be the first step in optimizing. There is [a large overhead](https://www.pypy.org/posts/2018/09/inside-cpyext-why-emulating-cpython-c-8083064623681286567.html) for using the Python c-api on alternative interpreters not based in C like PyPy and GraalPython. We (the PyPy team) are hopeful [HPy](https://hpyproject.org/) can make a dent in this, but it will take a while to happen. Even once it does, it is hard for me to believe that converting [diskcache](https://grantjenks.com/docs/diskcache/) into C will make it faster on PyPy: there will be missed JIT opportunities when code is frozen into C.",
            "created_at": "2022-12-20T16:18:45Z",
            "html_url": "https://github.com/cython/cython/issues/5182#issuecomment-1359658534",
            "id": 1359658534,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5182",
            "node_id": "IC_kwDOABDGAc5RCr4m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1359658534/reactions"
            },
            "updated_at": "2022-12-20T16:18:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1359658534",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
                "events_url": "https://api.github.com/users/mattip/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattip/followers",
                "following_url": "https://api.github.com/users/mattip/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattip",
                "id": 823911,
                "login": "mattip",
                "node_id": "MDQ6VXNlcjgyMzkxMQ==",
                "organizations_url": "https://api.github.com/users/mattip/orgs",
                "received_events_url": "https://api.github.com/users/mattip/received_events",
                "repos_url": "https://api.github.com/users/mattip/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattip"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Your qualname issue *may* be fixed by using the compiler directive `binding=True` (which makes the functions use Cython's own function type rather than the base builtin function). However, I haven't tested this suggestion, and if it doesn't work it's likely to be the same PyPy limitation (so we don't really need to follow it up here if it doesn't work)",
            "created_at": "2022-12-20T17:24:11Z",
            "html_url": "https://github.com/cython/cython/issues/5182#issuecomment-1359853061",
            "id": 1359853061,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5182",
            "node_id": "IC_kwDOABDGAc5RDbYF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1359853061/reactions"
            },
            "updated_at": "2022-12-20T17:24:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1359853061",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5182/comments",
    "created_at": "2022-12-20T06:50:11Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5182/events",
    "html_url": "https://github.com/cython/cython/issues/5182",
    "id": 1504069647,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5182/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5ZpkgP",
    "number": 5182,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5182/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5182/timeline",
    "title": "Why cython+pypy combination env using diskcache arises error: AttributeError: 'builtin_function_or_method' object has no attribute '__qualname__' ",
    "updated_at": "2022-12-20T17:24:11Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5182",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/34906909?v=4",
        "events_url": "https://api.github.com/users/bsnresearcher/events{/privacy}",
        "followers_url": "https://api.github.com/users/bsnresearcher/followers",
        "following_url": "https://api.github.com/users/bsnresearcher/following{/other_user}",
        "gists_url": "https://api.github.com/users/bsnresearcher/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/bsnresearcher",
        "id": 34906909,
        "login": "bsnresearcher",
        "node_id": "MDQ6VXNlcjM0OTA2OTA5",
        "organizations_url": "https://api.github.com/users/bsnresearcher/orgs",
        "received_events_url": "https://api.github.com/users/bsnresearcher/received_events",
        "repos_url": "https://api.github.com/users/bsnresearcher/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/bsnresearcher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bsnresearcher/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/bsnresearcher"
    }
}