{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Is your feature request related to a problem? Please describe.\n\nPR #6971 introduce compression of all strings stored as `PyObject *`. But generated C code still contains a lot of regular string constants which can be compressed too... E.g. when shared cython library is used, `__Pyx_modinit_function_export_code` contains following:\n\n```c\nstatic int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate) {\n  __Pyx_RefNannyDeclarations\n  CYTHON_UNUSED_VAR(__pyx_mstate);\n  PyObject *__pyx_t_1 = NULL;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext(\"__Pyx_modinit_function_export_code\", 0);\n  /*--- Function export code ---*/\n  __pyx_t_1 = __Pyx_ApiExport_GetApiDict(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_allocate_buffer_2, (void (*)(void))__pyx_array_allocate_buffer, \"int (struct __pyx_array_obj *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_array_cwrapper, (void (*)(void))__pyx_array_new, \"struct __pyx_array_obj *(PyObject *, Py_ssize_t, char *, char const *, char *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_memoryview_cwrapper, (void (*)(void))__pyx_memoryview_new, \"PyObject *(PyObject *, int, int, __Pyx_TypeInfo const *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_memoryview_check, (void (*)(void))__pyx_memoryview_check, \"int (PyObject *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_unellipsify, (void (*)(void))_unellipsify, \"PyObject *(PyObject *, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_assert_direct_dimensions, (void (*)(void))assert_direct_dimensions, \"int (Py_ssize_t *, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_memview_slice, (void (*)(void))__pyx_memview_slice, \"struct __pyx_memoryview_obj *(struct __pyx_memoryview_obj *, PyObject *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_slice_memviewslice, (void (*)(void))__pyx_memoryview_slice_memviewslice, \"int (__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_pybuffer_index, (void (*)(void))__pyx_pybuffer_index, \"char *(Py_buffer *, char *, Py_ssize_t, Py_ssize_t)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_transpose_memslice, (void (*)(void))__pyx_memslice_transpose, \"int (__Pyx_memviewslice *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_memoryview_fromslice, (void (*)(void))__pyx_memoryview_fromslice, \"PyObject *(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_get_slice_from_memview, (void (*)(void))__pyx_memoryview_get_slice_from_memoryview, \"__Pyx_memviewslice *(struct __pyx_memoryview_obj *, __Pyx_memviewslice *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_slice_copy, (void (*)(void))__pyx_memoryview_slice_copy, \"void (struct __pyx_memoryview_obj *, __Pyx_memviewslice *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_memoryview_copy, (void (*)(void))__pyx_memoryview_copy_object, \"PyObject *(struct __pyx_memoryview_obj *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_memoryview_copy_from_slice, (void (*)(void))__pyx_memoryview_copy_object_from_slice, \"PyObject *(struct __pyx_memoryview_obj *, __Pyx_memviewslice *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_abs_py_ssize_t, (void (*)(void))abs_py_ssize_t, \"Py_ssize_t (Py_ssize_t)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_get_best_order, (void (*)(void))__pyx_get_best_slice_order, \"char (__Pyx_memviewslice *, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_copy_strided_to_strided, (void (*)(void))_copy_strided_to_strided, \"void (char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_copy_strided_to_strided_2, (void (*)(void))copy_strided_to_strided, \"void (__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_slice_get_size, (void (*)(void))__pyx_memoryview_slice_get_size, \"Py_ssize_t (__Pyx_memviewslice *, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_fill_contig_strides_array, (void (*)(void))__pyx_fill_contig_strides_array, \"Py_ssize_t (Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_copy_data_to_temp, (void (*)(void))__pyx_memoryview_copy_data_to_temp, \"void *(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_err_extents, (void (*)(void))__pyx_memoryview_err_extents, \"int (int, Py_ssize_t, Py_ssize_t)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_err_dim, (void (*)(void))__pyx_memoryview_err_dim, \"int (PyObject *, PyObject *, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_err, (void (*)(void))__pyx_memoryview_err, \"int (PyObject *, PyObject *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_err_no_memory, (void (*)(void))__pyx_memoryview_err_no_memory, \"int (void)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_memoryview_copy_contents, (void (*)(void))__pyx_memoryview_copy_contents, \"int (__Pyx_memviewslice, __Pyx_memviewslice, int, int, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_broadcast_leading, (void (*)(void))__pyx_memoryview_broadcast_leading, \"void (__Pyx_memviewslice *, int, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_refcount_copying, (void (*)(void))__pyx_memoryview_refcount_copying, \"void (__Pyx_memviewslice *, int, int, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_refcount_objects_in_slice_with_g, (void (*)(void))__pyx_memoryview_refcount_objects_in_slice_with_gil, \"void (char *, Py_ssize_t *, Py_ssize_t *, int, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_refcount_objects_in_slice, (void (*)(void))__pyx_memoryview_refcount_objects_in_slice, \"void (char *, Py_ssize_t *, Py_ssize_t *, int, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_slice_assign_scalar, (void (*)(void))__pyx_memoryview_slice_assign_scalar, \"void (__Pyx_memviewslice *, int, size_t, void *, int)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_slice_assign_scalar_2, (void (*)(void))__pyx_memoryview__slice_assign_scalar, \"void (char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_pyx_unpickle_Enum__set_state, (void (*)(void))__pyx_unpickle_Enum__set_state, \"PyObject *(struct __pyx_MemviewEnum_obj *, PyObject *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  if (__Pyx_ExportFunction(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_format_from_typeinfo, (void (*)(void))__pyx_format_from_typeinfo, \"PyObject *(__Pyx_TypeInfo const *)\") < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __Pyx_RefNannyFinishContext();\n  return 0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_1);\n  __Pyx_RefNannyFinishContext();\n  return -1;\n}\n```\nAll function names (`__pyx_mstate_global->...`) are compressed because the parameter is `PyObject *` but signature is regular string which is not compressed.\n\n### Describe the solution you'd like.\n\nImplement similar logic for regular string constants as in #6971\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I'd be a bit worried that this will degrade performance if not used carefully.\n\nIt's probably fine in most cases - e.g. those ones are used once during initialization. But it does mean that the C compiler can no longer see the constants and optimize based on the values and can no longer assume that they're truly read-only.\n\nIt probably also uses more runtime memory: we end up having to store both compressed and uncompressed constants. (That's less of an issue for the Python strings because the memory allocation happens anyway).",
            "created_at": "2025-08-25T22:11:06Z",
            "html_url": "https://github.com/cython/cython/issues/7107#issuecomment-3221896547",
            "id": 3221896547,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7107",
            "node_id": "IC_kwDOABDGAc7ACj1j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3221896547/reactions"
            },
            "updated_at": "2025-08-25T22:11:06Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3221896547",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I agree that the goal of PR is **not** to migrate **all** C strings but several can be done:\n* C signatures are used only during initialisation (importing/exporting) and tend to be long\n* C function names are used only during initialisation (importing)\n* Several error messages which should not occur normally:\n  - module is imported twice (`__pyx_pymod_exec_`)\n  - missing module state (`__Pyx__PyModule_GetState()`)\n  - Interpreter change detected (`__Pyx_check_single_interpreter`)\n  ...\n\nAll of them should not normally happen or occurs only during initialisation. Moreover, they tend to be only in one place so we should not have problem of two version of same string (compressed and uncompressed constant.",
            "created_at": "2025-08-25T22:51:25Z",
            "html_url": "https://github.com/cython/cython/issues/7107#issuecomment-3221974552",
            "id": 3221974552,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7107",
            "node_id": "IC_kwDOABDGAc7AC24Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3221974552/reactions"
            },
            "updated_at": "2025-08-25T22:53:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3221974552",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think there can be a gain if we restrict this to bulks of one-time C strings that can be thrown away as a whole after use. Signatures and C function names probably compress quite well.\n\nI'd apply it only to the export/import functions for now, because it's a local change and thus easy to do. And it avoids the Python string constants for the function names, which is probably also worth it.\n\nYou can use the existing `__Pyx_DecompressString` function to load the concatenated byte string and then split it as you go. Names and signatures never contain `\\0` bytes, so you can also get away without a string index and just use `strchr(startpos, '\\0') + 1` to go from string to string.",
            "created_at": "2025-08-26T08:20:07Z",
            "html_url": "https://github.com/cython/cython/issues/7107#issuecomment-3223119674",
            "id": 3223119674,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7107",
            "node_id": "IC_kwDOABDGAc7AHOc6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3223119674/reactions"
            },
            "updated_at": "2025-08-26T08:20:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3223119674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> that can be thrown away as a whole after use. Signatures and C function names probably compress quite well.\n\nI think the signatures end up as the name string in a pycapsule so can't be thrown away (at least for export, probably not for import)",
            "created_at": "2025-08-26T08:24:20Z",
            "html_url": "https://github.com/cython/cython/issues/7107#issuecomment-3223134261",
            "id": 3223134261,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7107",
            "node_id": "IC_kwDOABDGAc7AHSA1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3223134261/reactions"
            },
            "updated_at": "2025-08-26T08:24:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3223134261",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ah, right, thanks. The docs say this:\n\n> The name string may either be NULL or a pointer to a valid C string. If non-NULL, this string must outlive the capsule. (Though it is permitted to free it inside the destructor.)\n\nhttps://docs.python.org/3/c-api/capsule.html#c.PyCapsule_New\n\nSo, then, the gain is probably less because the compressed string already takes space in both the extension module file and in memory, and we have to add the uncompressed signature strings to the memory usage.\n\nWe can still avoid the global string constants (and their pointers) for the function names, and by using two separate compressed byte strings for exported names and signatures, might still come out with lower resource usage than now.\n\nI think it's worth a try. It just requires a function pointer array and two compressed byte strings, the rest of the function export can then run in a loop over the ordered data.",
            "created_at": "2025-08-26T08:42:33Z",
            "html_url": "https://github.com/cython/cython/issues/7107#issuecomment-3223203657",
            "id": 3223203657,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7107",
            "node_id": "IC_kwDOABDGAc7AHi9J",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3223203657/reactions"
            },
            "updated_at": "2025-08-26T08:42:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3223203657",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> So, then, the gain is probably less because the compressed string already takes space in both the extension module file and in memory, and we have to add the uncompressed signature strings to the memory usage.\n\nI have a question here. In related PR #6971 the memory is allocated twice too (for compressed string and for string stored inside PyObject) is that correct? Also the memory is allocated for whole lifetime of the module. Or is there difference?",
            "created_at": "2025-08-27T19:54:26Z",
            "html_url": "https://github.com/cython/cython/issues/7107#issuecomment-3229557946",
            "id": 3229557946,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7107",
            "node_id": "IC_kwDOABDGAc7AfyS6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3229557946/reactions"
            },
            "updated_at": "2025-08-27T19:54:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3229557946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > So, then, the gain is probably less because the compressed string already takes space in both the extension module file and in memory, and we have to add the uncompressed signature strings to the memory usage.\n> \n> I have a question here. In related PR [#6971](https://github.com/cython/cython/pull/6971) the memory is allocated twice too (for compressed string and for string stored inside PyObject) is that correct? Also the memory is allocated for whole lifetime of the module. Or is there difference?\n\nYes that is correct. However it would also be true if it was not compressed since Python strings always own their own memory.",
            "created_at": "2025-08-27T19:56:48Z",
            "html_url": "https://github.com/cython/cython/issues/7107#issuecomment-3229563640",
            "id": 3229563640,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7107",
            "node_id": "IC_kwDOABDGAc7Afzr4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3229563640/reactions"
            },
            "updated_at": "2025-08-27T19:56:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3229563640",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Temporarily, we have three copies of the data: 1) compressed bytes, 2) uncompressed bytes, 3) decoded Unicode strings or separate bytes strings. After the initialisation, the uncompressed bytes copy is discarded, so we only end up with a compressed copy of the data that we don't need any more.\n\nThe same applies to the names here. For the signatures, though, we'd uncompress them and then use the uncompressed memory as is, so there'd only ever be two copies (compressed/uncompressed). That makes them somewhat more efficient than the Python bytes/str strings, even.\n\nWhat I meant in my comment was that static constant strings in the module (as they are now) make the module file larger but reduce the memory consumption at runtime because we wouldn't need the compressed copy but only the plain uncompressed data. That reduces the overall gain of this change because it adds the compressed data to the runtime memory.",
            "created_at": "2025-08-27T20:10:30Z",
            "html_url": "https://github.com/cython/cython/issues/7107#issuecomment-3229599578",
            "id": 3229599578,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/7107",
            "node_id": "IC_kwDOABDGAc7Af8da",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3229599578/reactions"
            },
            "updated_at": "2025-08-28T07:07:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3229599578",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/7107/comments",
    "created_at": "2025-08-25T18:56:50Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-08-25T18:57:00Z",
            "event": "issue_type_added",
            "id": 19328492977,
            "node_id": "ITAE_lADOABDGAc7H2MFuzwAAAASAEWWx",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/19328492977"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-08-25T18:57:22Z",
            "event": "labeled",
            "id": 19328498150,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "LE_lADOABDGAc7H2MFuzwAAAASAEXnm",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/19328498150"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-08-25T18:57:22Z",
            "event": "labeled",
            "id": 19328498158,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "LE_lADOABDGAc7H2MFuzwAAAASAEXnu",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/19328498158"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/7107/events",
    "html_url": "https://github.com/cython/cython/issues/7107",
    "id": 3352871278,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/7107/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc7H2MFu",
    "number": 7107,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/7107/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/7107/timeline",
    "title": "[ENH] Compress string constants",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T09:13:03Z",
        "description": "A request, idea, or new functionality",
        "id": 116421,
        "is_enabled": true,
        "name": "Feature",
        "node_id": "IT_kwDOAAdqws4AAcbF",
        "updated_at": "2024-10-08T08:31:16Z"
    },
    "updated_at": "2025-08-28T07:07:30Z",
    "url": "https://api.github.com/repos/cython/cython/issues/7107",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
        "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
        "followers_url": "https://api.github.com/users/matusvalo/followers",
        "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
        "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/matusvalo",
        "id": 827060,
        "login": "matusvalo",
        "node_id": "MDQ6VXNlcjgyNzA2MA==",
        "organizations_url": "https://api.github.com/users/matusvalo/orgs",
        "received_events_url": "https://api.github.com/users/matusvalo/received_events",
        "repos_url": "https://api.github.com/users/matusvalo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/matusvalo",
        "user_view_type": "public"
    }
}