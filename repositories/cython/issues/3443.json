{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "When working with C and C++ extensions, is common to have functions that must run without the GIL held (for instance, to make sure there are no deadlocks that involve other locks or native threads). This can be easily achieved doing:\r\n\r\n```\r\ncdef void my_func_wrapper(...):\r\n   with nogil:\r\n          my_func(...)\r\n```\r\n\r\nThe problem is that when exposing a large library or multiple methods and classes that fall in this situation, you end with tons of tons of wrappers like the one before, which feels very verbose and unnecessary\r\n\r\nCython already offers a solution for the opposite problem (taking the GIL always when the function is called) using the `with gil` declaration:\r\n\r\n```\r\ncdef void my_func_wrapper(...) with gil\r\n```\r\n\r\nbut there is no obvious way that I know to achieve the contrary (the original case I am discussing to drop always the GIL).\r\n\r\nFor this reason, I propose to add an analogous `with nogil` qualifier to function declarations:\r\n\r\n```\r\ncdef void my_func_wrapper(...) with nogil\r\n```\r\n\r\nthat basically generates the following code:\r\n\r\n```\r\nstatic double __pyx_f_3fib_my_func(void) {\r\n  #ifdef WITH_THREAD\r\n  PyThreadState *_save;\r\n  Py_UNBLOCK_THREADS\r\n  __Pyx_FastGIL_Remember();\r\n  #endif\r\n\r\n// FUNCTION CODE HERE //\r\n\r\n  /* function exit code */\r\n  #ifdef WITH_THREAD\r\n  __Pyx_FastGIL_Forget();\r\n  Py_BLOCK_THREADS\r\n  #endif\r\n}\r\n\r\n```\r\n\r\nI have a draft PR  if everyone agrees that this is a desired feature to add.\r\n\r\nAlso, if someone thinks the feature is good but the naming may confuse people as \"nogil\" already exists, we could explore other possibilities like:\r\n\r\n* Adding instead a decorator like `@cython.with_no_gil` or similar.\r\n* Some other keyword like `nevergil` instead.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "`nevergil` sounds great!",
            "created_at": "2020-03-17T16:20:11Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-600162620",
            "id": 600162620,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDE2MjYyMA==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-17T16:20:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/600162620",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/13689192?v=4",
                "events_url": "https://api.github.com/users/McSinyx/events{/privacy}",
                "followers_url": "https://api.github.com/users/McSinyx/followers",
                "following_url": "https://api.github.com/users/McSinyx/following{/other_user}",
                "gists_url": "https://api.github.com/users/McSinyx/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/McSinyx",
                "id": 13689192,
                "login": "McSinyx",
                "node_id": "MDQ6VXNlcjEzNjg5MTky",
                "organizations_url": "https://api.github.com/users/McSinyx/orgs",
                "received_events_url": "https://api.github.com/users/McSinyx/received_events",
                "repos_url": "https://api.github.com/users/McSinyx/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/McSinyx/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/McSinyx/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/McSinyx"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm ok with adding this, but compared to the with-gil function modifier, the latter saves both a modifier (nogil) and an indented block (with gil), whereas your proposal really only seems to save one indentation (with nogil).\n\nActually, the with-gil modifier was there before the context manager, simply because it was much easier to implement at the time. These days, we'd probably need a bit of a discussion to add it as a feature, if it wasn't there already.\n\nIIUC, however, your proposal also allows calling the function directly regardless of whether the GIL is held or not, right? That makes it sound appealing to me, and supports a real use case for it to be a modifier.\n",
            "created_at": "2020-03-18T09:01:02Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-600502197",
            "id": 600502197,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDUwMjE5Nw==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-18T09:01:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/600502197",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "As I understand, the following symmetric qualifier system is proposed:\r\n* `gil`: OK to be called with GIL (default, but such keyword is not allowed)\r\n* `nogil`: OK to be called without GIL (already exist)\r\n* `with gil`: must be called with GIL (by acquiring it) (also already exist)\r\n* `with nogil`: must be called without GIL (by releasing it) (to be implemented)\r\n\r\nWith version 3.0 coming in a *can't seem to let you go, can't seem to hold you close* future, I suggest a discussion on those keywords, which does not very welly reflect the actual meaning of the modifier.",
            "created_at": "2020-03-18T09:45:33Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-600521996",
            "id": 600521996,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDUyMTk5Ng==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-18T09:45:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/600521996",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/13689192?v=4",
                "events_url": "https://api.github.com/users/McSinyx/events{/privacy}",
                "followers_url": "https://api.github.com/users/McSinyx/followers",
                "following_url": "https://api.github.com/users/McSinyx/following{/other_user}",
                "gists_url": "https://api.github.com/users/McSinyx/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/McSinyx",
                "id": 13689192,
                "login": "McSinyx",
                "node_id": "MDQ6VXNlcjEzNjg5MTky",
                "organizations_url": "https://api.github.com/users/McSinyx/orgs",
                "received_events_url": "https://api.github.com/users/McSinyx/received_events",
                "repos_url": "https://api.github.com/users/McSinyx/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/McSinyx/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/McSinyx/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/McSinyx"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> IIUC, however, your proposal also allows calling the function directly regardless of whether the GIL is held or not, right? That makes it sound appealing to me, and supports a real use case for it to be a modifier.\r\n\r\nYeah, in my original idea calling the function with the gil held will release it, call the actual function and re-acquire it. On the other hand in my original idea calling this function without the GIL will just call the function without doing anything with the GIL but we can discuss what should happen if you prefer something different.\r\n\r\nAlso, one of the key ideas that I would like to explore with this is that you don't need to create the wrapper if you expose tons of functions that must be called without the GIL. For instance, this definition in a `pxd` file:\r\n\r\n```\r\ncdef extern from \"lunch.h\":\r\n    void my_func(...) with nogil\r\n```\r\n\r\nwill make sure that that `my_func` is always called without the GIL held, without the need to create the wrapper manually. \r\n\r\nWhat are your thoughts on these topics?",
            "created_at": "2020-03-18T20:26:04Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-600841758",
            "id": 600841758,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDg0MTc1OA==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-18T20:26:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/600841758",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/11718525?v=4",
                "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
                "followers_url": "https://api.github.com/users/pablogsal/followers",
                "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
                "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pablogsal",
                "id": 11718525,
                "login": "pablogsal",
                "node_id": "MDQ6VXNlcjExNzE4NTI1",
                "organizations_url": "https://api.github.com/users/pablogsal/orgs",
                "received_events_url": "https://api.github.com/users/pablogsal/received_events",
                "repos_url": "https://api.github.com/users/pablogsal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pablogsal"
            }
        },
        {
            "author_association": "NONE",
            "body": "Given a function that must be called with the GIL released, something like:\r\n\r\n```c\r\nint email_sre_team(const char *msg);\r\n```\r\n\r\nIf I didn't need to release the GIL, I'd be able to do:\r\n\r\n```py\r\ndef report_server_status(str host, str status):\r\n    if email_sre_team(\"Host %s is now %s\" % (host, status)):\r\n        raise RuntimeError(\"Couldn't send email to SREs\")\r\n```\r\n\r\n\r\nBut, because I need to release the GIL before making this network call, and because automatic type conversions can't be done while the GIL is released, that needs to be:\r\n\r\n```py\r\ndef report_server_status(str host, str status):\r\n    msg = \"Host %s is now %s\" % (host, status)\r\n    cdef const char *c_msg = msg\r\n    cdef int rc\r\n    with nogil:\r\n        rc = email_sre_team(c_msg)\r\n    if rc:\r\n        raise RuntimeError(\"Couldn't send email to SREs\")\r\n```\r\n\r\nIt would be tremendously useful if declaring a function in a `.pxd` file as `with nogil` (or whatever qualifier we settle on) would automatically drop the GIL after applying type conversions on the function's parameters and before calling the function, then reacquire it after the function call completes.",
            "created_at": "2020-03-19T03:55:51Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-600974751",
            "id": 600974751,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDk3NDc1MQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-19T03:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/600974751",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@McSinyx the declarations are more like this:\r\n\r\n-   'gil': GIL is assumed to be held, normal Python function behaviour, thus no special keyword\r\n-   `nogil`: assumes the GIL not be be held on entry (although it may be) and prevents the function body from using operations that require the GIL (except for operations that explicitly or implicitly acquire the GIL). Requires a C function signature.\r\n-   `with gil`: assures that the GIL is held during the function body, regardless of whether it was released before or not. Same as the `with gil:` context manager around the complete function body together with a `nogil` function declaration. Requires a C function signature.\r\n-   `with nogil`: assures that the GIL is released around the function body, regardless of whether it was held before or not. Same as the `with nogil:` context manager around the complete function body. When used on `def` and `cpdef` functions, the Python function wrapper will always require the GIL to be held on entry. `cdef` functions and the C entry point of `cpdef` functions will automatically be marked as `nogil` and can thus be called directly from `nogil` code.\r\n\r\nThe last bit is something that may require a bit more work on top of Pablo's current WIP branch.",
            "created_at": "2020-03-19T10:51:45Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-601113777",
            "id": 601113777,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTExMzc3Nw==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-19T10:51:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/601113777",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@pablogsal @godlygeek I first wrote something different here, please ignore that.\r\n\r\nI understand your use case regarding `extern` declarations of `with nogil` functions. Cython usually knows internally whether it really needs to free the GIL for the call (or if it's freed already), and thus what code it needs to generate around such a call or not.\r\n\r\nOne drawback is that a `nogil` function actually does *not* know whether the GIL is held or not when it's being called, and thus would _not_ release the GIL around such a call, even if the outer caller is holding the GIL.\r\n\r\nAnd secondly, note that a declaration is actually a pretty broad and global thing. The fact that a function can (or should) be called without holding the GIL does not mean that all usages will always _want_ it to be called with the GIL released. Once an external function is declared as `with nogil`, as in your example, all usages would then automatically (and implicitly) try to release the GIL for it. In order to hold the GIL around the call, a user would have to redeclare the function separately (maybe even under a different name). I'm not so happy about the implicit note in this. It's not visible from the code at all in such a case whether the GIL is being held or not, which makes the concurrency implications unclear.",
            "created_at": "2020-03-19T11:32:46Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-601130081",
            "id": 601130081,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTEzMDA4MQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-19T11:32:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/601130081",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@godlygeek your example can be rewritten like this, which makes it at least a bit less verbose:\r\n```cython\r\ndef report_server_status(str host, str status):\r\n    msg = f\"Host {host} is now {status}\".encode(\"ascii\")\r\n    cdef const char* c_msg = msg\r\n    with nogil:\r\n        if email_sre_team(c_msg):\r\n            raise RuntimeError(\"Couldn't send email to SREs\")\r\n```\r\nA `raise` statement will implicitly acquire the GIL if needed, so you can use it inside of `nogil` sections.\r\n\r\nI see an interest in the argument conversion part, but my guess is that your example is a bit of an edge case still. Other `nogil` use cases may require more than one external call, in which case you'd _want_ to release the GIL only once, not for each call. And not all conversions are so trivial that they can be written in place, e.g. the message string conversion in your example, which Cython would actually flag as illegal because you are taking a C pointer to a temporary Python object, the lifetime of which does not cover the function call into which you want to pass it.\r\n\r\nIn short, the feature may seem appealing at first sight, but I'm not sure it's worth the added complexity for real world applications.",
            "created_at": "2020-03-19T11:47:30Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-601135265",
            "id": 601135265,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTEzNTI2NQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-19T11:47:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/601135265",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> A `raise` statement will implicitly acquire the GIL if needed, so you can use it inside of `nogil` sections.\r\n\r\nI didn't realize that; good to know.\r\n\r\n> I see an interest in the argument conversion part, but my guess is that your example is a bit of an edge case still.\r\n\r\nPerhaps.  I'm currently wrapping a library where the GIL must always be released when calling into it.  This is a bit of a simplification, but it's something like: logs from the wrapped C++ library are enqueued to a buffer, and when that buffer fills they are flushed by a background thread to the Python `logging` module.  The GIL must never be held while calling into this library, as a deadlock can occur if a log statement in the library results in a log buffer filling up and needing to be flushed: the log flushing thread needs to acquire the GIL before it can flush those logs to Python, and the foreground thread can't progress to releasing the GIL until it has enqueued the new log message.  It's not quite this simple, but that's a close enough analogy to discuss the use case.\r\n\r\n> Other `nogil` use cases may require more than one external call, in which case you'd _want_ to release the GIL only once, not for each call.\r\n\r\nTrue, but this feature wouldn't preclude you from doing that, it would just simplify things if you choose not to do that, at some performance cost.\r\n\r\n> the message string conversion in your example, which Cython would actually flag as illegal because you are taking a C pointer to a temporary Python object\r\n\r\nI tested first; no such warning occurred.  The generated code is:\r\n\r\n```c\r\n__pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Host_s_is_now_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)\r\n__Pyx_GOTREF(__pyx_t_2);\r\n__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\r\n__pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 390, __pyx_L1_error)\r\n__pyx_t_4 = (email_sre_team(__pyx_t_3) != 0);\r\n```\r\n\r\nThe temporary Python string at `__pyx_t_2` does stay in scope through the call to `email_sre_team`.\r\n\r\n> `with nogil`: assures that the GIL is released around the function body, regardless of whether it was held before or not\r\n\r\nThe example I gave can actually be simplified by the use of a wrapper function with a `nogil` wrapped around the function's body:\r\n\r\n```py\r\ncdef int _email_sre_team_with_nogil(const char *msg):\r\n    with nogil:\r\n        return email_sre_team(msg)\r\n\r\ndef report_server_status(str host, str status):\r\n    if _email_sre_team_with_nogil(\"Host %s is now %s\" % (host, status)):\r\n        raise RuntimeError(\"Couldn't send email to SREs\")\r\n```\r\n\r\nIf the proposed `with nogil` modifier can be attached to external declarations and behaves exactly as though `with nogil:` is wrapped around the body of the call, then essentially it would just be generating exactly that wrapper automatically.",
            "created_at": "2020-03-19T16:16:07Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-601271393",
            "id": 601271393,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTI3MTM5Mw==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-19T16:16:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/601271393",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">> Other nogil use cases may require more than one external call, in which case you'd want to release the GIL only once, not for each call.\r\n\r\n> True, but this feature wouldn't preclude you from doing that, it would just simplify things if you choose not to do that, at some performance cost.\r\n\r\nThat's what I meant with my \"[declarations are global](https://github.com/cython/cython/issues/3443#issuecomment-601130081)\" comment above, though. Once you've declared a function as `with nogil`, it behaves that way. That limits the reuse of such declarations. For example, you couldn't publish .pxd files with such declarations on PyPI, simply because you can't know how people would use them. You're assigning a behaviour to an external function here that may or may not be desired. And this need may even differ between different usages inside of one package or module. In short, it's generally the _usage_ that decides about this kind of behavioural difference, not the _declaration_.\r\n\r\nI'm not saying that there is no use case for this within a given limited scope, it just adds limitations that users will have to be aware of, and that may not be obvious from their current work focus.",
            "created_at": "2020-03-20T17:10:22Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-601813036",
            "id": 601813036,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTgxMzAzNg==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-20T17:13:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/601813036",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I tested first; no such warning occurred.\r\n\r\nAh, right. :) I keep forgetting about the stuff that I fix over time …",
            "created_at": "2020-03-20T17:11:13Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-601813466",
            "id": 601813466,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTgxMzQ2Ng==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-20T17:11:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/601813466",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "I think we're talking about two separate things here.\r\n\r\n> Once you've declared a function as `with nogil`, it behaves that way. That limits the reuse of such declarations.\r\n\r\nIf I understand correctly, you're pointing out that if an external function is declared using the `with nogil` modifier, it will never be possible to continue to hold the GIL throughout a call to that external function, and that for many functions, there may be times when users want to hold the GIL while calling them.  I concede that this is the case, and that it does limit the reusability of these declarations, but I believe that there are many functions - nearly anything that does network IO, where wait times can be unbounded, for instance - where the GIL ought to be dropped on every call.  Even if it's not useful for most functions, it is useful for some.\r\n\r\n> Other `nogil` use cases may require more than one external call, in which case you'd _want_ to release the GIL only once, not for each call.\r\n\r\nAs far as I understand, this is an entirely separate concern from the above.  Here, you're saying that, if you want to make 3 calls in a row without the GIL, you wouldn't want to release and re-acquire the GIL 3 times, as it's far more efficient to only do it once.  That's certainly true, but the way I'm hoping that the `with nogil` modifier would work, nothing would stop the user from combining it with the `with nogil` context manager: if those 3 calls to `with nogil`-modified functions are made inside the block of the context manager, each of those 3 calls would perform the `PyEval_SaveThread()` /  `PyEval_RestoreThread` dance to drop the GIL, but since it has already been dropped by the context manager those calls are very cheap as there's no need for any synchronization across threads.",
            "created_at": "2020-03-20T18:34:38Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-601852274",
            "id": 601852274,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTg1MjI3NA==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-20T19:42:40Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/601852274",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Even if it's not useful for most functions, it is useful for some.\r\n\r\n… and we've always given users the ability to shoot themselves in the foot, _if_ they want to.\r\n\r\nI can see this being useful at least in some cases, so, why not. Let's make this a feature.",
            "created_at": "2020-03-24T18:49:47Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-603441728",
            "id": 603441728,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzQ0MTcyOA==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-24T18:49:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/603441728",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I can see this being useful at least in some cases, so, why not. Let's make this a feature.\r\n\r\nShould I start the support for such change in the draft PR?",
            "created_at": "2020-03-24T19:14:39Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-603453637",
            "id": 603453637,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzQ1MzYzNw==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-24T19:14:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/603453637",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/11718525?v=4",
                "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
                "followers_url": "https://api.github.com/users/pablogsal/followers",
                "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
                "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pablogsal",
                "id": 11718525,
                "login": "pablogsal",
                "node_id": "MDQ6VXNlcjExNzE4NTI1",
                "organizations_url": "https://api.github.com/users/pablogsal/orgs",
                "received_events_url": "https://api.github.com/users/pablogsal/received_events",
                "repos_url": "https://api.github.com/users/pablogsal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pablogsal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Should I start the support for such change in the draft PR?\r\n\r\nMy guess is that the `extern` function support isn't difficult to add on top of the general feature, and should also stay a somewhat local code change (possibly even just a new `GilStatNode` injected somewhere in `SimpleCallNode.analyse_types()`). So, I wouldn't mind. If you notice that it becomes visibly more complex than that, we should consider extracting it into a separate PR, but let's start by keeping it together for now.",
            "created_at": "2020-03-24T19:24:46Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-603458244",
            "id": 603458244,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzQ1ODI0NA==",
            "performed_via_github_app": null,
            "updated_at": "2020-03-24T19:24:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/603458244",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "+1 from me on this feature!\r\n\r\nIn terms of naming, what do you think of having keywords of \"acquiregil\" as an alternative to the existing \"with gil\" and \"releasegil\" instead of the proposed \"with nogil\" for the case where you want to release the GIL if it is being held before running the function and re-acquire it before returning the result?",
            "created_at": "2020-08-11T00:46:18Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-671660366",
            "id": 671660366,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTY2MDM2Ng==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-11T00:46:18Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/671660366",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1901085?v=4",
                "events_url": "https://api.github.com/users/ronf/events{/privacy}",
                "followers_url": "https://api.github.com/users/ronf/followers",
                "following_url": "https://api.github.com/users/ronf/following{/other_user}",
                "gists_url": "https://api.github.com/users/ronf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ronf",
                "id": 1901085,
                "login": "ronf",
                "node_id": "MDQ6VXNlcjE5MDEwODU=",
                "organizations_url": "https://api.github.com/users/ronf/orgs",
                "received_events_url": "https://api.github.com/users/ronf/received_events",
                "repos_url": "https://api.github.com/users/ronf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ronf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ronf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ronf"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ronf Since the semantics match the existing `with gil` and `with nogil` features, I think we should not add new names.",
            "created_at": "2020-08-12T06:49:27Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-672645273",
            "id": 672645273,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjY0NTI3Mw==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-12T06:49:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/672645273",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Ok - that works for me. Having played with this a bit more now, I see the parallel to actually using \"with gil\" or \"with nogil\" inside a function. I was just looking for something that was more explicit about the fact that you wanted functions declared this way to explicitly acquire or release the GIL before being run.\r\n\r\nQuestion: If you declare a function as \"with nogil\" and the GIL is not held at the time the function is called, does it leave the GIL unlocked after the function returns, preserving its previous state?",
            "created_at": "2020-08-12T06:59:52Z",
            "html_url": "https://github.com/cython/cython/issues/3443#issuecomment-672651441",
            "id": 672651441,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3443",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjY1MTQ0MQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-12T06:59:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/672651441",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1901085?v=4",
                "events_url": "https://api.github.com/users/ronf/events{/privacy}",
                "followers_url": "https://api.github.com/users/ronf/followers",
                "following_url": "https://api.github.com/users/ronf/following{/other_user}",
                "gists_url": "https://api.github.com/users/ronf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ronf",
                "id": 1901085,
                "login": "ronf",
                "node_id": "MDQ6VXNlcjE5MDEwODU=",
                "organizations_url": "https://api.github.com/users/ronf/orgs",
                "received_events_url": "https://api.github.com/users/ronf/received_events",
                "repos_url": "https://api.github.com/users/ronf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ronf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ronf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ronf"
            }
        }
    ],
    "comments": 18,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3443/comments",
    "created_at": "2020-03-17T14:26:47Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T10:26:11Z",
            "event": "mentioned",
            "id": 3144934729,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE0NDkzNDcyOQ==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3144934729"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T10:26:11Z",
            "event": "subscribed",
            "id": 3144934731,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNDQ5MzQ3MzE=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3144934731"
        },
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/13689192?v=4",
                "events_url": "https://api.github.com/users/McSinyx/events{/privacy}",
                "followers_url": "https://api.github.com/users/McSinyx/followers",
                "following_url": "https://api.github.com/users/McSinyx/following{/other_user}",
                "gists_url": "https://api.github.com/users/McSinyx/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/McSinyx",
                "id": 13689192,
                "login": "McSinyx",
                "node_id": "MDQ6VXNlcjEzNjg5MTky",
                "organizations_url": "https://api.github.com/users/McSinyx/orgs",
                "received_events_url": "https://api.github.com/users/McSinyx/received_events",
                "repos_url": "https://api.github.com/users/McSinyx/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/McSinyx/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/McSinyx/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/McSinyx"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T10:51:45Z",
            "event": "mentioned",
            "id": 3145025648,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE0NTAyNTY0OA==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3145025648"
        },
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/13689192?v=4",
                "events_url": "https://api.github.com/users/McSinyx/events{/privacy}",
                "followers_url": "https://api.github.com/users/McSinyx/followers",
                "following_url": "https://api.github.com/users/McSinyx/following{/other_user}",
                "gists_url": "https://api.github.com/users/McSinyx/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/McSinyx",
                "id": 13689192,
                "login": "McSinyx",
                "node_id": "MDQ6VXNlcjEzNjg5MTky",
                "organizations_url": "https://api.github.com/users/McSinyx/orgs",
                "received_events_url": "https://api.github.com/users/McSinyx/received_events",
                "repos_url": "https://api.github.com/users/McSinyx/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/McSinyx/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/McSinyx/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/McSinyx"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T10:51:45Z",
            "event": "subscribed",
            "id": 3145025651,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNDUwMjU2NTE=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3145025651"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/11718525?v=4",
                "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
                "followers_url": "https://api.github.com/users/pablogsal/followers",
                "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
                "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pablogsal",
                "id": 11718525,
                "login": "pablogsal",
                "node_id": "MDQ6VXNlcjExNzE4NTI1",
                "organizations_url": "https://api.github.com/users/pablogsal/orgs",
                "received_events_url": "https://api.github.com/users/pablogsal/received_events",
                "repos_url": "https://api.github.com/users/pablogsal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pablogsal"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T10:59:48Z",
            "event": "mentioned",
            "id": 3145052083,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE0NTA1MjA4Mw==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3145052083"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/11718525?v=4",
                "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
                "followers_url": "https://api.github.com/users/pablogsal/followers",
                "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
                "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pablogsal",
                "id": 11718525,
                "login": "pablogsal",
                "node_id": "MDQ6VXNlcjExNzE4NTI1",
                "organizations_url": "https://api.github.com/users/pablogsal/orgs",
                "received_events_url": "https://api.github.com/users/pablogsal/received_events",
                "repos_url": "https://api.github.com/users/pablogsal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pablogsal"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T10:59:48Z",
            "event": "subscribed",
            "id": 3145052087,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNDUwNTIwODc=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3145052087"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T11:32:46Z",
            "event": "mentioned",
            "id": 3145157500,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE0NTE1NzUwMA==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3145157500"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T11:32:47Z",
            "event": "subscribed",
            "id": 3145157502,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNDUxNTc1MDI=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3145157502"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/11718525?v=4",
                "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
                "followers_url": "https://api.github.com/users/pablogsal/followers",
                "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
                "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pablogsal",
                "id": 11718525,
                "login": "pablogsal",
                "node_id": "MDQ6VXNlcjExNzE4NTI1",
                "organizations_url": "https://api.github.com/users/pablogsal/orgs",
                "received_events_url": "https://api.github.com/users/pablogsal/received_events",
                "repos_url": "https://api.github.com/users/pablogsal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pablogsal"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T11:32:47Z",
            "event": "mentioned",
            "id": 3145157505,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE0NTE1NzUwNQ==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3145157505"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/11718525?v=4",
                "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
                "followers_url": "https://api.github.com/users/pablogsal/followers",
                "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
                "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pablogsal",
                "id": 11718525,
                "login": "pablogsal",
                "node_id": "MDQ6VXNlcjExNzE4NTI1",
                "organizations_url": "https://api.github.com/users/pablogsal/orgs",
                "received_events_url": "https://api.github.com/users/pablogsal/received_events",
                "repos_url": "https://api.github.com/users/pablogsal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pablogsal"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T11:32:47Z",
            "event": "subscribed",
            "id": 3145157508,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNDUxNTc1MDg=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3145157508"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T11:47:30Z",
            "event": "mentioned",
            "id": 3145201953,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE0NTIwMTk1Mw==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3145201953"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/29423?v=4",
                "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/godlygeek/followers",
                "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/godlygeek",
                "id": 29423,
                "login": "godlygeek",
                "node_id": "MDQ6VXNlcjI5NDIz",
                "organizations_url": "https://api.github.com/users/godlygeek/orgs",
                "received_events_url": "https://api.github.com/users/godlygeek/received_events",
                "repos_url": "https://api.github.com/users/godlygeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/godlygeek"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-19T11:47:30Z",
            "event": "subscribed",
            "id": 3145201956,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNDUyMDE5NTY=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3145201956"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-24T18:48:14Z",
            "event": "labeled",
            "id": 3161110833,
            "label": {
                "color": "444444",
                "name": "Cython Language Feature"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMxNjExMTA4MzM=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3161110833"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-24T18:48:14Z",
            "event": "labeled",
            "id": 3161110834,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMxNjExMTA4MzQ=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3161110834"
        },
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1901085?v=4",
                "events_url": "https://api.github.com/users/ronf/events{/privacy}",
                "followers_url": "https://api.github.com/users/ronf/followers",
                "following_url": "https://api.github.com/users/ronf/following{/other_user}",
                "gists_url": "https://api.github.com/users/ronf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ronf",
                "id": 1901085,
                "login": "ronf",
                "node_id": "MDQ6VXNlcjE5MDEwODU=",
                "organizations_url": "https://api.github.com/users/ronf/orgs",
                "received_events_url": "https://api.github.com/users/ronf/received_events",
                "repos_url": "https://api.github.com/users/ronf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ronf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ronf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ronf"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-08-12T06:49:28Z",
            "event": "mentioned",
            "id": 3646237515,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY0NjIzNzUxNQ==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3646237515"
        },
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1901085?v=4",
                "events_url": "https://api.github.com/users/ronf/events{/privacy}",
                "followers_url": "https://api.github.com/users/ronf/followers",
                "following_url": "https://api.github.com/users/ronf/following{/other_user}",
                "gists_url": "https://api.github.com/users/ronf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ronf",
                "id": 1901085,
                "login": "ronf",
                "node_id": "MDQ6VXNlcjE5MDEwODU=",
                "organizations_url": "https://api.github.com/users/ronf/orgs",
                "received_events_url": "https://api.github.com/users/ronf/received_events",
                "repos_url": "https://api.github.com/users/ronf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ronf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ronf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ronf"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-08-12T06:49:28Z",
            "event": "subscribed",
            "id": 3646237521,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NDYyMzc1MjE=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3646237521"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3443/events",
    "html_url": "https://github.com/cython/cython/issues/3443",
    "id": 583052784,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425559948,
            "name": "Cython Language Feature",
            "node_id": "MDU6TGFiZWw0MjU1NTk5NDg=",
            "url": "https://api.github.com/repos/cython/cython/labels/Cython%20Language%20Feature"
        },
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3443/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1ODMwNTI3ODQ=",
    "number": 3443,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Add a way to define functions that always run without the GIL",
    "updated_at": "2020-08-12T06:59:53Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3443",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/11718525?v=4",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/pablogsal",
        "id": 11718525,
        "login": "pablogsal",
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/pablogsal"
    }
}