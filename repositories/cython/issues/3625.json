{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "If I annotate a function using PEP484/526 syntax\r\n\r\n```Python\r\nimport cython\r\n\r\n@cython.cfunc\r\ndef fib(n : cython.int) -> cython.int:\r\n    if (n<=1):\r\n        return n\r\n    return fib(n-1) + fib(n-2)\r\n```\r\n\r\n ```cython -c``` tells me the last line interacts with Python, basically checking ```PyErr_Occurred()```. \r\n\r\nWhereas if I use decorators, there are no such checks, and Cython generates the same C code as it would with Pyrex syntax:\r\n\r\n```Python\r\nimport cython\r\n\r\n@cython.cfunc\r\n@cython.locals(n=cython.int)\r\n@cython.returns(cython.int)\r\ndef _fib(n):\r\n    if (n<=1):\r\n        return n\r\n    return _fib(n-1) + _fib(n-2)\r\n```\r\n\r\nThe return line using PEP484/526 syntax looks like this\r\n```C\r\n+08:     return _fib(n-1) + _fib(n-2)\r\n  __pyx_t_2 = __pyx_f_46_cython_magic_dd8e3b97486038017346fa36994a0695__fib((__pyx_v_n - 1)); if (unlikely(__pyx_t_2 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 8, __pyx_L1_error)\r\n  __pyx_t_3 = __pyx_f_46_cython_magic_dd8e3b97486038017346fa36994a0695__fib((__pyx_v_n - 2)); if (unlikely(__pyx_t_3 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 8, __pyx_L1_error)\r\n  __pyx_r = (__pyx_t_2 + __pyx_t_3);\r\n  goto __pyx_L0;\r\n```\r\n\r\nwhereas with decorators it looks like this\r\n```C\r\n+11:     return _fib(n-1) + _fib(n-2)\r\n  __pyx_r = (__pyx_f_46_cython_magic_6c3a15eed3bce3137103a8464b16a811__fib((__pyx_v_n - 1)) + __pyx_f_46_cython_magic_6c3a15eed3bce3137103a8464b16a811__fib((__pyx_v_n - 2)));\r\n  goto __pyx_L0;\r\n```\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Hmm, I thought that this was documented, but at least I can't find it right now.\r\n\r\nThis is intentional. When you use Python type annotations, it would be weird if you lost Python exception propagation semantics along the way, just by compiling the code. So the default behaviour is \"except? -1\" here for C integer types.\r\n\r\nhttps://github.com/cython/cython/blob/25d042da09bfee6e67b8b042c867623d8cf9a69d/Cython/Compiler/Nodes.py#L701-L710\r\n\r\nArguably, this would also be a better default for the decorator case. Probably worth discussing if Cython 3.0 is a good time to change it there as well.",
            "created_at": "2020-05-21T07:27:59Z",
            "html_url": "https://github.com/cython/cython/issues/3625#issuecomment-631931675",
            "id": 631931675,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3625",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTkzMTY3NQ==",
            "updated_at": "2020-05-21T07:27:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/631931675",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "See a3ffd72f344b543a57dbc213e1952ee20567d54d, looks like this has been around since 0.27.",
            "created_at": "2020-05-21T07:43:45Z",
            "html_url": "https://github.com/cython/cython/issues/3625#issuecomment-631938205",
            "id": 631938205,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3625",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTkzODIwNQ==",
            "updated_at": "2020-05-21T07:43:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/631938205",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> This is intentional. When you use Python type annotations, it would be weird if you lost Python exception propagation semantics along the way, just by compiling the code.\r\n\r\nEven if those type annotations use cython types (as in the OP)? Could those annotated types not be inspected whether they actually need python?",
            "created_at": "2020-05-21T09:16:35Z",
            "html_url": "https://github.com/cython/cython/issues/3625#issuecomment-631979459",
            "id": 631979459,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3625",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTk3OTQ1OQ==",
            "updated_at": "2020-05-21T09:16:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/631979459",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Could those annotated types not be inspected whether they actually need python?\r\n\r\nI read your question as \"could those annotated functions not be analysed to see if they actually raise exceptions\", is that what you meant? Then the answer is: yes, not entirely easily, but they could. We currently only let that analysis fall out for free at code generation time, but do not have it available when we determine the function type. It would be an improvement in this case. But lacking that earlier analysis, I think safe exception raising is better than silently ignoring them.",
            "created_at": "2020-05-21T09:33:17Z",
            "html_url": "https://github.com/cython/cython/issues/3625#issuecomment-631986930",
            "id": 631986930,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3625",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTk4NjkzMA==",
            "updated_at": "2020-05-21T09:33:17Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/631986930",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Also note that the exception check is really cheap here, especially since `-1` is not even a normal return value in the example at hand. I'd be surprised if it cost more than one CPU cycle on average.",
            "created_at": "2020-05-21T09:52:15Z",
            "html_url": "https://github.com/cython/cython/issues/3625#issuecomment-631995179",
            "id": 631995179,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3625",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTk5NTE3OQ==",
            "updated_at": "2020-05-21T09:52:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/631995179",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It it were documented, I would not had spent time convincing myself that is was a bug :)\r\n\r\nIn my timings for the Fibonacci toy function it accounts for 10% of the run-time. I guess that is quite unsignificant as the function does not do much but recurse and error check.\r\n\r\nAnyhow, with some experimentation I found that this is what is needed to make an annotated function behave like a real C function:\r\n\r\n```Python\r\n@cython.exceptval(check=False)\r\n@cython.cfunc\r\n@cython.nogil\r\ndef _fib(n : cython.int) -> cython.int:\r\n    if (n<=1):\r\n        return n\r\n    return _fib(n-1) + _fib(n-2)\r\n```\r\n\r\nMaybe it should be documented to avoid any surprises.\r\n",
            "created_at": "2020-05-21T14:20:58Z",
            "html_url": "https://github.com/cython/cython/issues/3625#issuecomment-632113486",
            "id": 632113486,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3625",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjExMzQ4Ng==",
            "updated_at": "2020-05-21T14:26:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/632113486",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1970862?v=4",
                "events_url": "https://api.github.com/users/sturlamolden/events{/privacy}",
                "followers_url": "https://api.github.com/users/sturlamolden/followers",
                "following_url": "https://api.github.com/users/sturlamolden/following{/other_user}",
                "gists_url": "https://api.github.com/users/sturlamolden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sturlamolden",
                "id": 1970862,
                "login": "sturlamolden",
                "node_id": "MDQ6VXNlcjE5NzA4NjI=",
                "organizations_url": "https://api.github.com/users/sturlamolden/orgs",
                "received_events_url": "https://api.github.com/users/sturlamolden/received_events",
                "repos_url": "https://api.github.com/users/sturlamolden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sturlamolden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sturlamolden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sturlamolden"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3625/comments",
    "created_at": "2020-05-21T02:29:14Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-21T07:27:49Z",
            "event": "labeled",
            "id": 3359577432,
            "label": {
                "color": "444444",
                "name": "Documentation"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNTk1Nzc0MzI=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3359577432"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "917dbeef5422b3ef49874d60bbb70c294c5c45e2",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/917dbeef5422b3ef49874d60bbb70c294c5c45e2",
            "created_at": "2020-05-21T07:38:39Z",
            "event": "referenced",
            "id": 3359607203,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNTk2MDcyMDM=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3359607203"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-21T07:50:32Z",
            "event": "milestoned",
            "id": 3359641496,
            "milestone": {
                "title": "3.0"
            },
            "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDMzNTk2NDE0OTY=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3359641496"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3625/events",
    "html_url": "https://github.com/cython/cython/issues/3625",
    "id": 622201530,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425561345,
            "name": "Documentation",
            "node_id": "MDU6TGFiZWw0MjU1NjEzNDU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Documentation"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3625/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 231,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\n– New version scheme: 3.x instead of 0.x.\r\n– Change default `language_level` from `2` to `3`.\r\n– Change default for `binding` directive from `False` to `True`.\r\n– Fix some Python compatibility issues (if possible, allowing for breaking changes).\r\n",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 21,
        "state": "open",
        "title": "3.0",
        "updated_at": "2020-05-21T07:50:32Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "MDU6SXNzdWU2MjIyMDE1MzA=",
    "number": 3625,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Cython in pure mode generates bogus interaction with Python when using PEP484/526 syntax instead of decorators",
    "updated_at": "2020-05-21T14:26:24Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3625",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1970862?v=4",
        "events_url": "https://api.github.com/users/sturlamolden/events{/privacy}",
        "followers_url": "https://api.github.com/users/sturlamolden/followers",
        "following_url": "https://api.github.com/users/sturlamolden/following{/other_user}",
        "gists_url": "https://api.github.com/users/sturlamolden/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/sturlamolden",
        "id": 1970862,
        "login": "sturlamolden",
        "node_id": "MDQ6VXNlcjE5NzA4NjI=",
        "organizations_url": "https://api.github.com/users/sturlamolden/orgs",
        "received_events_url": "https://api.github.com/users/sturlamolden/received_events",
        "repos_url": "https://api.github.com/users/sturlamolden/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/sturlamolden/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sturlamolden/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/sturlamolden"
    }
}