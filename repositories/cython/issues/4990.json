{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Is your feature request related to a problem? Please describe.\n\n```\r\nimport cython\r\n\r\ndef f(a):\r\n    if a == 1:\r\n        print(\"Yes\")\r\n\r\ndef g(a, b: cython.int):\r\n    if a == b:\r\n        print(\"Yes\")\r\n```\r\n\r\nIn `f` it spots that `a` is being compared to a constant and produces an optimized function\r\n\r\n```\r\n__pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_a, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_1);\r\n```\r\n(There's a related issue here https://github.com/cython/cython/issues/4819 where there's an unnecessary coercion to/from Python, but that's not the focus of this issue)\r\n\r\nIn `g` `a` is being compared to an integer, and so the same logic probably applies (`a` is most likely an integer itself). However because `b` is a variable and not a constant it does not make the optimization.\r\n```\r\n__pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_1);\r\n  __pyx_t_2 = PyObject_RichCompare(__pyx_v_a, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)\r\n```\n\n### Describe the solution you'd like.\n\nThere's two options for the generated code I think. The least intrusive would be to always create the Python int from `b`, but to call the optimized function:\r\n```\r\n__pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_1);\r\n__pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_a, __pyx_t_1, __pyx_v_b, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_2);\r\n```\r\n\r\nThe second option would be to have a function that creates the Python int from `b` on demand if it's needed. Something like\r\n```\r\n__pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_a, NULL, __pyx_v_b, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_1);\r\n```\r\nwhere `__Pyx_PyInt_EqObjC` is modified to accept a `NULL` second argument.\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\nI think the assumption that `object == c_int` is most likely to be an integer comparison is probably true. However if it isn't then this would likely be a pessimazation.\r\n\r\nI'm inclined to get this to work with constants first (https://github.com/cython/cython/issues/4819) and then come back to this issue.",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4990/comments",
    "created_at": "2022-08-21T09:19:17Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-08-21T09:19:31Z",
            "event": "labeled",
            "id": 7227449418,
            "label": {
                "color": "444444",
                "name": "Optimization"
            },
            "node_id": "LE_lADOABDGAc5QMa4xzwAAAAGuyiBK",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/7227449418"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4990/events",
    "html_url": "https://github.com/cython/cython/issues/4990",
    "id": 1345433137,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556272,
            "name": "Optimization",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNzI=",
            "url": "https://api.github.com/repos/cython/cython/labels/Optimization"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4990/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5QMa4x",
    "number": 4990,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4990/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4990/timeline",
    "title": "[ENH] Missed int comparison optimizations with non-constants",
    "updated_at": "2022-08-21T09:19:31Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4990",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}