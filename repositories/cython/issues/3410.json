{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "The following type of code seems to compile and run fine:\r\n\r\n**.py**\r\n```python3\r\nimport cython\r\n\r\nobj = [1,2,3]\r\nptr = cython.cast(cython.pointer(PyObject), obj)\r\nobj2 = cython.cast(object, ptr)\r\n```\r\n\r\n**.pxd**\r\n```python3\r\nimport cython\r\nfrom cpython.ref cimport PyObject\r\n\r\ncdef object obj\r\ncdef PyObject* ptr\r\ncdef list obj2\r\n```\r\n\r\nIt is also valid (C)Python syntax.\r\n\r\nHowever, if run without Cython compilation, it will throw a `NameError` due to `PyObject` being undefined in the `.py` file.\r\n\r\nI believe working around this requires the user to monkey-patch `globals()` as a dictionary in the module, since Cython would complain about the naming conflict with a direct assignment.\r\n\r\n`cython.pointer(PyObject)` also feels a bit verbose compared to, e.g., `cython.p_int`.\r\n\r\nWould it make sense to add `PyObject`, `p_PyObject`, etc to `Shadow.py` (or elsewhere) and allow using forms like `cython.PyObject`, `cython.p_PyObject`, etc?",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Or, actually, since `PyObject` requires an explicit `cimport` in order to be available, I suppose this question could also be generalized as:\r\n\r\n\"Would it make sense to support pure Python emulation for definitions that are usually accessible via `cimport` from or definition in `.pxd` files (such as `cpython.ref.PyObject`, `math.NAN`, `array.resize`, etc)?\"\r\n\r\nMaybe something like `cython.cimport('modulename')` or `cython.cimport('dataname', from='modulename')` could be an alternative, Python-compatible syntax for `cimports` that could load a normal Python file from an expected filepath when run interpreted? Idk; I apologise if this is dumb as I'm just spitballing here.",
            "created_at": "2020-03-11T03:36:52Z",
            "html_url": "https://github.com/cython/cython/issues/3410#issuecomment-597427667",
            "id": 597427667,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3410",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzQyNzY2Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/597427667/reactions"
            },
            "updated_at": "2020-03-11T07:04:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/597427667",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/37680486?v=4",
                "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
                "followers_url": "https://api.github.com/users/will-ca/followers",
                "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
                "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/will-ca",
                "id": 37680486,
                "login": "will-ca",
                "node_id": "MDQ6VXNlcjM3NjgwNDg2",
                "organizations_url": "https://api.github.com/users/will-ca/orgs",
                "received_events_url": "https://api.github.com/users/will-ca/received_events",
                "repos_url": "https://api.github.com/users/will-ca/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/will-ca"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think the main argument against would be: it'd be hard to come up with too many cases where both the pure Python and the Cython code are able to do much meaningful with the cimports. And given that, you might as well just use Cython syntax.\r\n\r\nThe main one I can really think of is a Cython module with `cpdef`s, where there is a fast path that otherwise behaves the same.",
            "created_at": "2020-03-11T07:42:44Z",
            "html_url": "https://github.com/cython/cython/issues/3410#issuecomment-597488288",
            "id": 597488288,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3410",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzQ4ODI4OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/597488288/reactions"
            },
            "updated_at": "2020-03-11T07:42:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/597488288",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If it were to be done, I guess you'd want to copy the interface of [`__import__`](https://docs.python.org/3/library/functions.html#__import__) as far as possible.",
            "created_at": "2020-03-11T07:46:03Z",
            "html_url": "https://github.com/cython/cython/issues/3410#issuecomment-597489432",
            "id": 597489432,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3410",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzQ4OTQzMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/597489432/reactions"
            },
            "updated_at": "2020-03-11T07:46:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/597489432",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I wouldn't mind adding `PyObject*` to `Shadow.py` (I mean, why not?), but I don't see a use case for that. @will-ca could you describe how you came up with this? What are/were you trying to achieve?\r\n\r\nI think, given that there's probably no need for `PyObject` as such, `PyObject*` could just become `cython.p_object` or so. Or keep the name `PyObject`, because that's what potential users would know. Yeah, maybe rather that. Not sure.",
            "created_at": "2020-03-21T14:27:46Z",
            "html_url": "https://github.com/cython/cython/issues/3410#issuecomment-602050926",
            "id": 602050926,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3410",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjA1MDkyNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/602050926/reactions"
            },
            "updated_at": "2020-03-21T14:27:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/602050926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "My use case was a short-lived and frequently re-created `cdef` instance attribute that could be assigned any Python object, and which would then be read exactly once by a typed function or method depending on how the instance was set up.\r\n\r\nSo, something like the following class:\r\n\r\n```python3\r\nclass addend_ptrwrapper:\r\n\tdef __cinit__(self, obj, nonzero=True):\r\n\t\tself.obj = cython.cast(cython.pointer(PyObject), obj)\r\n\t\tself.nonzero = nonzero\r\n\tdef __init__(self, obj, nonzero=True):\r\n\t\tif not cython.compiled:\r\n\t\t\taddend_ptrwrapper.__cinit__(self, obj, nonzero=nonzero)\r\n```\r\n\r\nThe benefit of using `object` instead of a specific type is that the same code can be used with any Python value. The benefit of using `PyObject*` instead of `object` seems to be that it runs quite a bit faster.\r\n\r\nUsing Pure Python Mode is generally nice IMHO because it technically removes a dependency, gives a way to still use the code without Cython, and makes it possible to roughly test changes without waiting for it to compile, etc.\r\n\r\n(In my actual use case, I have a class hierarchy with one base class and numerous subclasses that each wrap specific container types. But I wanted all of the subclasses to be able to be initialized from many different types of Python objects based on the same rules, so I have the `.__cinit__()` method of the base class implementing most of the shared behaviour, and storing its potentially-type-specialized results in `PyObject*` attributes that subsequently get read by the `.__cinit__()` methods of the subclasses in order to receive and/or create the final, typed containers. Using `PyObject*` instead of `object` there seemed to shave fully 10% of the run time overhead off of the function in which I was instantiating these objects.)\r\n\r\nWith the class above, storing the given object as `PyObject*` also seems to make it significantly faster to rapidly instantiate and operate on a lot of objects than when storing it as a reference-counted `object`:\r\n\r\n```\r\nWrapping floats with pointers:\r\n0.00036258797626942396\r\nWrapping floats with objects:\r\n0.0003903709875885397\r\n\r\nWrapping tuples with pointers:\r\n0.0003628609993029386\r\nWrapping tuples with objects:\r\n0.0003900729934684932\r\n\r\nWrapping and summing floats with pointers:\r\n0.0005354399909265339\r\nWrapping and summing floats with objects:\r\n0.0007126200071070343\r\n\r\nWrapping and summing tuple lengths with pointers:\r\n0.0005287950043566525\r\nWrapping and summing tuple lengths with objects:\r\n0.0006167329847812653\r\n```\r\n[wrapper_cdef.py](https://gist.github.com/will-ca/35dc57f07a88de947f31023432158d12)\r\n[wrapper_cdef.pxd](https://gist.github.com/will-ca/ad1d1ed9bd9ec3ec9ce14553a7487690)\r\n\r\n(IIRC, I assumed that this is probably safe to do in both cases because the `PyObject*`s are created and then fully used while the original, reference-counted objects still exist in the calling scope.)\r\n\r\nI assume it might also be faster in some cases when you have to call through a bunch of `cpdef` functions to pass `PyObject*` pointers instead of reference-counted `object`s, but I haven't tried that yet.",
            "created_at": "2020-03-26T06:15:48Z",
            "html_url": "https://github.com/cython/cython/issues/3410#issuecomment-604250639",
            "id": 604250639,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3410",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDI1MDYzOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/604250639/reactions"
            },
            "updated_at": "2020-03-26T07:53:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/604250639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/37680486?v=4",
                "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
                "followers_url": "https://api.github.com/users/will-ca/followers",
                "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
                "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/will-ca",
                "id": 37680486,
                "login": "will-ca",
                "node_id": "MDQ6VXNlcjM3NjgwNDg2",
                "organizations_url": "https://api.github.com/users/will-ca/orgs",
                "received_events_url": "https://api.github.com/users/will-ca/received_events",
                "repos_url": "https://api.github.com/users/will-ca/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/will-ca"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Oh, and as a recently potential user, I'd probably vote for a name based on `PyObject` if this does get added, rather than just `p_object`. Well, there's already [a section](https://github.com/cython/cython/wiki/FAQ#what-is-the-difference-between-pyobject-and-object) in the FAQ explaining the difference between the two, so I assume it's not just me who could have potentially been confused about how exactly they're related. `PyObject` might clearer to new users from high-level Python perspectives, and more consistent to people who have already used it.",
            "created_at": "2020-03-26T07:58:05Z",
            "html_url": "https://github.com/cython/cython/issues/3410#issuecomment-604283972",
            "id": 604283972,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3410",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDI4Mzk3Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/604283972/reactions"
            },
            "updated_at": "2020-03-26T07:58:05Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/604283972",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/37680486?v=4",
                "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
                "followers_url": "https://api.github.com/users/will-ca/followers",
                "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
                "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/will-ca",
                "id": 37680486,
                "login": "will-ca",
                "node_id": "MDQ6VXNlcjM3NjgwNDg2",
                "organizations_url": "https://api.github.com/users/will-ca/orgs",
                "received_events_url": "https://api.github.com/users/will-ca/received_events",
                "repos_url": "https://api.github.com/users/will-ca/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/will-ca"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The benefit of using PyObject* instead of object seems to be that it runs quite a bit faster.\r\n\r\nIt's also quite a lot more dangerous. Note that you are using borrowed references to the objects in your code. If they weren't kept in another list at the same time, you'd end up with dead object pointers.\r\n\r\nI haven't looked at the generated C code, but I wouldn't know why your pointer version should be _faster_ than the object version (and not slower). Maybe you can dig up the C code differences here?",
            "created_at": "2020-03-26T10:58:29Z",
            "html_url": "https://github.com/cython/cython/issues/3410#issuecomment-604363550",
            "id": 604363550,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3410",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDM2MzU1MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/604363550/reactions"
            },
            "updated_at": "2020-03-26T10:58:29Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/604363550",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This discussion probably belongs in the different issue\r\n\r\n---\r\n\r\n> `cython.pointer(PyObject)` also feels a bit verbose compared to, e.g., `cython.p_int`.\r\n\r\nAt first I tought that it would be nicer to be able to use `PyObject.pointer` over `cython.pointer(PyObject)`, but it is already implemented, but it is not for public use (maybe we should rethink it) - `PyObject._pointer()`",
            "created_at": "2023-07-11T15:41:46Z",
            "html_url": "https://github.com/cython/cython/issues/3410#issuecomment-1631061226",
            "id": 1631061226,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3410",
            "node_id": "IC_kwDOABDGAc5hOATq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1631061226/reactions"
            },
            "updated_at": "2023-07-11T15:41:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1631061226",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3410/comments",
    "created_at": "2020-03-11T01:26:49Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/37680486?v=4",
                "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
                "followers_url": "https://api.github.com/users/will-ca/followers",
                "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
                "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/will-ca",
                "id": 37680486,
                "login": "will-ca",
                "node_id": "MDQ6VXNlcjM3NjgwNDg2",
                "organizations_url": "https://api.github.com/users/will-ca/orgs",
                "received_events_url": "https://api.github.com/users/will-ca/received_events",
                "repos_url": "https://api.github.com/users/will-ca/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/will-ca"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-21T14:27:46Z",
            "event": "mentioned",
            "id": 3151782755,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE1MTc4Mjc1NQ==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3151782755"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/37680486?v=4",
                "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
                "followers_url": "https://api.github.com/users/will-ca/followers",
                "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
                "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/will-ca",
                "id": 37680486,
                "login": "will-ca",
                "node_id": "MDQ6VXNlcjM3NjgwNDg2",
                "organizations_url": "https://api.github.com/users/will-ca/orgs",
                "received_events_url": "https://api.github.com/users/will-ca/received_events",
                "repos_url": "https://api.github.com/users/will-ca/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/will-ca"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-03-21T14:27:46Z",
            "event": "subscribed",
            "id": 3151782756,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNTE3ODI3NTY=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3151782756"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3410/events",
    "html_url": "https://github.com/cython/cython/issues/3410",
    "id": 578952079,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3410/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1Nzg5NTIwNzk=",
    "number": 3410,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/3410/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/3410/timeline",
    "title": "`PyObject` and its pointers in `Shadow.py`?",
    "updated_at": "2023-07-11T15:41:46Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3410",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/37680486?v=4",
        "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
        "followers_url": "https://api.github.com/users/will-ca/followers",
        "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/will-ca",
        "id": 37680486,
        "login": "will-ca",
        "node_id": "MDQ6VXNlcjM3NjgwNDg2",
        "organizations_url": "https://api.github.com/users/will-ca/orgs",
        "received_events_url": "https://api.github.com/users/will-ca/received_events",
        "repos_url": "https://api.github.com/users/will-ca/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/will-ca"
    }
}