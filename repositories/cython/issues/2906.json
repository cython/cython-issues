{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "With gcc and `-Wconversion` enabled, I get the following kind of warnings with Cython 0.26.1:\r\n```\r\n/home/antoine/arrow/python/pyarrow/lib.cpp: In function ‘arrow::Type::type __Pyx_PyInt_As_enum____arrow_3a__3a_Type_3a__3a_type(PyObject*)’:\r\n/home/antoine/arrow/python/pyarrow/lib.cpp:147883:43: warning: the result of the conversion is unspecified because ‘-1’ is outside the range of type ‘arrow::Type::type’ [-Wconversion]\r\n                     return (target_type) -1;\\\r\n                                           ^\r\n/home/antoine/arrow/python/pyarrow/lib.cpp:147873:5: note: in expansion of macro ‘__PYX__VERIFY_RETURN_INT’\r\n     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)\r\n     ^~~~~~~~~~~~~~~~~~~~~~~~\r\n/home/antoine/arrow/python/pyarrow/lib.cpp:148536:26: note: in expansion of macro ‘__PYX_VERIFY_RETURN_INT’\r\n                 case  1: __PYX_VERIFY_RETURN_INT(enum  arrow::Type::type, digit, digits[0])\r\n                          ^\r\n```\r\n\r\nIt seems the `-1` return value from `__Pyx_PyInt_As_enum____arrow_3a__3a_Type_3a__3a_type` is supposed to denote an error... But `-1` is never checked for by callers, instead they call `PyErr_Occurred`. So perhaps returning `0` would work just as well.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "It seems that by defining the following macro:\r\n```cpp\r\n#if defined(__cplusplus) && __cplusplus >= 201103\r\n// Avoid conversion warnings with gcc and -Wconversion\r\n#include <type_traits>\r\n#define __PYX_SAFE_INT_CAST(target_type, value) \\\r\n  static_cast<target_type>(static_cast<typename std::make_signed<target_type>::type>(value))\r\n#else\r\n#define __PYX_SAFE_INT_CAST(target_type, value) \\\r\n  (target_type) value\r\n#endif\r\n```\r\n\r\nReplacing the given casts by `__PYX_SAFE_INT_CAST(target_type, -1)` then makes the warning disappears. Though how robust this solution is I cannot say.",
            "created_at": "2019-03-26T16:00:25Z",
            "html_url": "https://github.com/cython/cython/issues/2906#issuecomment-476718989",
            "id": 476718989,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2906",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjcxODk4OQ==",
            "updated_at": "2019-03-26T16:00:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/476718989",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Another possibility is this (force the warning off temporarily):\r\n```cpp\r\n#if defined(__GNUC__) && defined(__cplusplus) && __cplusplus >= 201103\r\n\r\n// Avoid conversion warnings with gcc and -Wconversion\r\ntemplate <typename DestType, typename SrcType>\r\nDestType __pyx_safe_int_cast(SrcType value) {\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wconversion\"\r\n  return static_cast<DestType>(value);\r\n#pragma GCC diagnostic pop\r\n}\r\n#define __PYX_SAFE_INT_CAST(target_type, value) \\\r\n  __pyx_safe_int_cast<target_type>(value)\r\n\r\n#else\r\n\r\n#define __PYX_SAFE_INT_CAST(target_type, value) \\\r\n  (target_type) value\r\n\r\n#endif\r\n```\r\n",
            "created_at": "2019-03-26T16:05:12Z",
            "html_url": "https://github.com/cython/cython/issues/2906#issuecomment-476721245",
            "id": 476721245,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2906",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjcyMTI0NQ==",
            "updated_at": "2019-03-26T16:05:12Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/476721245",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2906/comments",
    "created_at": "2019-03-26T15:41:41Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2906/events",
    "html_url": "https://github.com/cython/cython/issues/2906",
    "id": 425496128,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2906/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0MjU0OTYxMjg=",
    "number": 2906,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Casting -1 to unsigned C++ enum type generates warning",
    "updated_at": "2019-03-26T16:05:12Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2906",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
        "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
        "followers_url": "https://api.github.com/users/pitrou/followers",
        "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
        "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/pitrou",
        "id": 1721820,
        "login": "pitrou",
        "node_id": "MDQ6VXNlcjE3MjE4MjA=",
        "organizations_url": "https://api.github.com/users/pitrou/orgs",
        "received_events_url": "https://api.github.com/users/pitrou/received_events",
        "repos_url": "https://api.github.com/users/pitrou/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/pitrou"
    }
}