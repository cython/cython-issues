{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "With gcc and `-Wconversion` enabled, I get the following kind of warnings with Cython 0.26.1:\r\n```\r\n/home/antoine/arrow/python/pyarrow/lib.cpp: In function ‘arrow::Type::type __Pyx_PyInt_As_enum____arrow_3a__3a_Type_3a__3a_type(PyObject*)’:\r\n/home/antoine/arrow/python/pyarrow/lib.cpp:147883:43: warning: the result of the conversion is unspecified because ‘-1’ is outside the range of type ‘arrow::Type::type’ [-Wconversion]\r\n                     return (target_type) -1;\\\r\n                                           ^\r\n/home/antoine/arrow/python/pyarrow/lib.cpp:147873:5: note: in expansion of macro ‘__PYX__VERIFY_RETURN_INT’\r\n     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)\r\n     ^~~~~~~~~~~~~~~~~~~~~~~~\r\n/home/antoine/arrow/python/pyarrow/lib.cpp:148536:26: note: in expansion of macro ‘__PYX_VERIFY_RETURN_INT’\r\n                 case  1: __PYX_VERIFY_RETURN_INT(enum  arrow::Type::type, digit, digits[0])\r\n                          ^\r\n```\r\n\r\nIt seems the `-1` return value from `__Pyx_PyInt_As_enum____arrow_3a__3a_Type_3a__3a_type` is supposed to denote an error... But `-1` is never checked for by callers, instead they call `PyErr_Occurred`. So perhaps returning `0` would work just as well.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "It seems that by defining the following macro:\r\n```cpp\r\n#if defined(__cplusplus) && __cplusplus >= 201103\r\n// Avoid conversion warnings with gcc and -Wconversion\r\n#include <type_traits>\r\n#define __PYX_SAFE_INT_CAST(target_type, value) \\\r\n  static_cast<target_type>(static_cast<typename std::make_signed<target_type>::type>(value))\r\n#else\r\n#define __PYX_SAFE_INT_CAST(target_type, value) \\\r\n  (target_type) value\r\n#endif\r\n```\r\n\r\nReplacing the given casts by `__PYX_SAFE_INT_CAST(target_type, -1)` then makes the warning disappears. Though how robust this solution is I cannot say.",
            "created_at": "2019-03-26T16:00:25Z",
            "html_url": "https://github.com/cython/cython/issues/2906#issuecomment-476718989",
            "id": 476718989,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2906",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjcxODk4OQ==",
            "updated_at": "2019-03-26T16:00:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/476718989",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Another possibility is this (force the warning off temporarily):\r\n```cpp\r\n#if defined(__GNUC__) && defined(__cplusplus) && __cplusplus >= 201103\r\n\r\n// Avoid conversion warnings with gcc and -Wconversion\r\ntemplate <typename DestType, typename SrcType>\r\nDestType __pyx_safe_int_cast(SrcType value) {\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wconversion\"\r\n  return static_cast<DestType>(value);\r\n#pragma GCC diagnostic pop\r\n}\r\n#define __PYX_SAFE_INT_CAST(target_type, value) \\\r\n  __pyx_safe_int_cast<target_type>(value)\r\n\r\n#else\r\n\r\n#define __PYX_SAFE_INT_CAST(target_type, value) \\\r\n  (target_type) value\r\n\r\n#endif\r\n```\r\n",
            "created_at": "2019-03-26T16:05:12Z",
            "html_url": "https://github.com/cython/cython/issues/2906#issuecomment-476721245",
            "id": 476721245,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2906",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjcyMTI0NQ==",
            "updated_at": "2019-03-26T16:05:12Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/476721245",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I definitely prefer a proper C++ solution over mingling with the warnings of a specific compiler (and not others), although doing the latter would still be a reasonable fallback for older C++ versions. We are also clearly missing a test that uses C++ enums in various integer contexts. There are a couple of C-enum tests (e.g. [this](https://github.com/cython/cython/blob/master/tests/compile/enumintcompat.pyx) or other `tests/*/*enum*`) that give similar warnings with `-Wconversion`.\r\n\r\nWould you mind writing up a PR? Maybe you can extend the [cpp_enums](https://github.com/cython/cython/blob/master/tests/run/cpp_enums.pyx) test.\r\n\r\nI also think we should try enabling `-Wconversion` for at least some of Cython's own test suite (the overflow checks might be challenging), and see what that gives. Might uncover some more potential issues, or at least code that gets in the way of users who want warning-free code with that option. Cython should always strive to generate warnings-free code, and I can understand that some users want to enable specifically `-Wconversion` for their code.\r\n\r\nThis message (only in C++ mode) is also truly worrying:\r\n```\r\nenumboolctx.cpp:2750:34: warning: the result of the conversion is unspecified because ‘-1’ is outside the range of type ‘Truth’ [-Wconversion]\r\n             return (enum Truth) -1;\r\n```\r\nAccording to [an SO answer](https://stackoverflow.com/questions/31298526/enum-warning-outside-the-range), this is even undefined behaviour starting from C++17, meaning, it might lead to silent misbehaviour there, eventually.",
            "created_at": "2019-03-28T07:30:50Z",
            "html_url": "https://github.com/cython/cython/issues/2906#issuecomment-477481332",
            "id": 477481332,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2906",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzQ4MTMzMg==",
            "updated_at": "2019-03-28T07:30:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/477481332",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I definitely prefer a proper C++ solution over mingling with the warnings of a specific compiler\r\n\r\nI wouldn't call what I posted above a \"proper solution\". It silences the warning, but I don't think it suppresses the undefined behaviour.\r\n\r\nIs there a reason `-1` has to be used for error return here?",
            "created_at": "2019-03-28T09:43:39Z",
            "html_url": "https://github.com/cython/cython/issues/2906#issuecomment-477522124",
            "id": 477522124,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2906",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzUyMjEyNA==",
            "updated_at": "2019-03-28T09:43:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/477522124",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Is there a reason -1 has to be used for error return here?\r\n\r\nNo, it should just be something unique and not so likely to occur in practice (which would actually rather suggest something like `INT_MIN` than `-1`). That's impossible to decide out of thin air for an arbitrary user defined enum. This is strictly internal code without compatibility constraints, though, so any suggestion for improvement would be appreciated.\r\n\r\nOne idea is to allow users to define their own (efficient) exception value, e.g.\r\n```\r\ncdef enum xyz except? RARE_VALUE:\r\n    DEFAULT, RARE_VALUE, OTHER\r\n```\r\nMaybe with a default that just uses the first one with a `PyErr_Occurred()` check (i.e. `except? FIRST`). For module internal enums, users could then also add a dedicated exception return value that is not used for anything else, and declare it as `except EXC_VAL`, with out the `?`.",
            "created_at": "2019-03-30T19:00:05Z",
            "html_url": "https://github.com/cython/cython/issues/2906#issuecomment-478278113",
            "id": 478278113,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2906",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODI3ODExMw==",
            "updated_at": "2019-03-30T19:00:05Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/478278113",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`-1` is a conventional error value for CPython, which is probably why it was used here, but perhaps we could just return *any* value when `PyErr_Occurred` is called. (This assumes that we have a set of values to choose from, but that's typically the case.)",
            "created_at": "2019-03-30T20:44:46Z",
            "html_url": "https://github.com/cython/cython/issues/2906#issuecomment-478287917",
            "id": 478287917,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2906",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODI4NzkxNw==",
            "updated_at": "2019-03-30T20:44:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/478287917",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2906/comments",
    "created_at": "2019-03-26T15:41:41Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2906/events",
    "html_url": "https://github.com/cython/cython/issues/2906",
    "id": 425496128,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2906/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0MjU0OTYxMjg=",
    "number": 2906,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Casting -1 to unsigned C++ enum type generates warning",
    "updated_at": "2019-03-30T20:44:46Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2906",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
        "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
        "followers_url": "https://api.github.com/users/pitrou/followers",
        "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
        "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/pitrou",
        "id": 1721820,
        "login": "pitrou",
        "node_id": "MDQ6VXNlcjE3MjE4MjA=",
        "organizations_url": "https://api.github.com/users/pitrou/orgs",
        "received_events_url": "https://api.github.com/users/pitrou/received_events",
        "repos_url": "https://api.github.com/users/pitrou/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/pitrou"
    }
}