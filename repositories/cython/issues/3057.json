{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Currently we cannot control if a file has already been included with the `include` statement.\r\nI propose to add the `include_once` statement to only include a file once per module.\r\nThe full path of the included file is used to check if it was already included in the module.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Hmm, the barrier for adding a new keyword to the language is fairly high. In fact, we are trying to get away from special syntax, not add to it. What if users had a line like this in their code:\r\n`include_once = True`\r\nThat seems a very reasonable piece of code, which would break with your proposed change.\r\n\r\nCould you explain a bit more what your use case is? It's easier to understand _what_ you want when you explain _why_ you want it. An example would help.",
            "created_at": "2019-07-29T18:49:58Z",
            "html_url": "https://github.com/cython/cython/issues/3057#issuecomment-516116518",
            "id": 516116518,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3057",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjExNjUxOA==",
            "updated_at": "2019-07-29T18:49:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/516116518",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "We have multiple products that all share some common code base.\r\nWe want to deliver one and only one python module for each product.\r\nSplitting a product module is not an option because of symbol resolution in our C code base.\r\n\r\n\r\nHere is what our project looks like:\r\n\r\n```\r\n.\r\n├── libs/\r\n│   ├── lib_1/\r\n│   │   └── lib_1.pxi\r\n│   ├── lib_2/\r\n│   │   └── lib_2.pxi\r\n│   ├── lib_3/\r\n│   │   └── lib_3.pxi\r\n│   └── lib_common/\r\n│       ├── lib_common.c\r\n│       ├── lib_common.h\r\n│       └── lib_common.pxi\r\n├── product_a/\r\n│   └── product_a.pyx\r\n└── product_b/\r\n    └── product_b.pyx\r\n```\r\n\r\n```\r\n######## libs/lib_common/lib_common.c ########\r\n\r\nint lib_common_super_func_in_c(int val)\r\n{\r\n    return ~val;\r\n}\r\n\r\n\r\n######## libs/lib_common/lib_common.h ########\r\n\r\n#ifndef IS_LIB_COMMON_H\r\n#define IS_LIB_COMMON_H\r\n\r\nint lib_common_super_func_in_c(int);\r\n\r\n#endif /* IS_LIB_COMMON_H */\r\n\r\n\r\n######## libs/lib_common/lib_common.pxi ########\r\n\r\n#cython: language_level=3\r\n\r\ncdef extern from \"lib_common.h\":\r\n    int lib_common_super_func_in_c(int)\r\n\r\n\r\ncdef object lib_common_super_func(object val):\r\n    return lib_common_super_func_in_c(val)\r\n\r\n\r\nUSED_LIBS = []\r\n\r\n\r\ncdef void add_used_lib(str lib):\r\n    USED_LIBS.append(lib)\r\n\r\n\r\ncdef list get_used_libs():\r\n    return USED_LIBS\r\n\r\n\r\nadd_used_lib('lib_common')\r\n\r\n\r\n######## libs/lib_1/lib_1.pxi ########\r\n\r\n#cython: language_level=3\r\n\r\n\r\ninclude \"../lib_common/lib_common.pxi\"\r\n\r\n\r\ncdef object lib_1_super_func(object val):\r\n    return lib_common_super_func(val + 42)\r\n\r\n\r\nadd_used_lib('lib_1')\r\n\r\n\r\n######## libs/lib_2/lib_2.pxi ########\r\n\r\n#cython: language_level=3\r\n\r\n\r\ninclude \"../lib_common/lib_common.pxi\"\r\n\r\n\r\ncdef object lib_2_super_func(object val):\r\n    return lib_common_super_func(val - 99)\r\n\r\n\r\nadd_used_lib('lib_2')\r\n\r\n\r\n######## libs/lib_3/lib_3.pxi ########\r\n\r\n#cython: language_level=3\r\n\r\n\r\ninclude \"../lib_common/lib_common.pxi\"\r\n\r\n\r\ncdef object lib_3_super_func(object val):\r\n    return lib_common_super_func(val * 21)\r\n\r\n\r\nadd_used_lib('lib_3')\r\n\r\n\r\n######## product_a/product_a.pyx ########\r\n\r\n#cython: language_level=3\r\n\r\n\r\ninclude \"../libs/lib_1/lib_1.pxi\"\r\ninclude \"../libs/lib_2/lib_2.pxi\"\r\n\r\n\r\ncdef object product_a_super_func():\r\n    return lib_1_super_func(788) + lib_2_super_func(423)\r\n\r\n\r\nprint('super funcs: {}'.format(product_a_super_func()))\r\nprint('used libs: {}'.format(get_used_libs()))\r\n\r\n\r\n######## product_b/product_b.pyx ########\r\n\r\n#cython: language_level=3\r\n\r\n\r\ninclude \"../libs/lib_1/lib_1.pxi\"\r\ninclude \"../libs/lib_3/lib_3.pxi\"\r\n\r\n\r\ncdef object product_b_super_func():\r\n    return lib_1_super_func(54) - lib_3_super_func(4988)\r\n\r\n\r\nprint('super funcs: {}'.format(product_b_super_func()))\r\nprint('used libs: {}'.format(get_used_libs()))\r\n```\r\n\r\nThe issue is that `lib_1.pxi`, `lib_2.pxi` and `lib_3.pxi` all include `lib_common.pxi`.\r\n\r\nSo when cythonizing and compiling `product_a.pyx` and `product_b.pyx`, I get some duplicate function definitions and `USED_LIBS` is initialized multiple times.\r\n\r\nI can make it work by removing `include \"../lib_common/lib_common.pxi\"` in `lib_1.pxi`, `lib_2.pxi` and `lib_3.pxi` and add it in `product_a.pyx` and `product_b.pyx`, but we loose the dependency logic and we have to make sure that `lib_common.pxi` will never be included in one of the library files. It also messes up the syntax checker for the library files.\r\n\r\n\r\nAnother solution would be to use a header guard with a compile variable:\r\n\r\n```\r\n######## libs/lib_common/lib_common.hdr.pxi ########\r\n\r\n#cython: language_level=3\r\n\r\n\r\nIF not IS_LIB_COMMON_HDR_PXI:\r\n    DEF IS_LIB_COMMON_HDR_PXI = True\r\n    include \"lib_common.pxi\"\r\n\r\n```\r\n\r\nAnd to replace `include \"../lib_common/lib_common.pxi\"` by `include \"../lib_common/lib_common.hdr.pxi\"`.\r\n\r\nThe issue with this solution is that we need `IS_LIB_COMMON_HDR_PXI` to be defined before including `lib_common.hdr.pxi`.\r\n\r\nTo solve this issue we need to find a way to detect if `IS_LIB_COMMON_HDR_PXI` is defined or not.\r\nIt is also a nice feature to have by the way.\r\n\r\nI see two solutions:\r\n\r\n1. Add a `is_defined` function to the selection of builtin functions available at compile-time:\r\n```\r\nIF not is_defined('IS_LIB_COMMON_HDR_PXI'):\r\n    DEF IS_LIB_COMMON_HDR_PXI = True\r\n    include \"lib_common.pxi\"\r\n```\r\n\r\n\r\n2. Add `IFDEF` and `IFNDEF` statements:\r\n```\r\nIFNDEF IS_LIB_COMMON_HDR_PXI:\r\n    DEF IS_LIB_COMMON_HDR_PXI = True\r\n    include \"lib_common.pxi\"\r\n```",
            "created_at": "2019-08-01T11:19:39Z",
            "html_url": "https://github.com/cython/cython/issues/3057#issuecomment-517240957",
            "id": 517240957,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3057",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzI0MDk1Nw==",
            "updated_at": "2019-08-01T11:19:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/517240957",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/4773674?v=4",
                "events_url": "https://api.github.com/users/nicopauss/events{/privacy}",
                "followers_url": "https://api.github.com/users/nicopauss/followers",
                "following_url": "https://api.github.com/users/nicopauss/following{/other_user}",
                "gists_url": "https://api.github.com/users/nicopauss/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nicopauss",
                "id": 4773674,
                "login": "nicopauss",
                "node_id": "MDQ6VXNlcjQ3NzM2NzQ=",
                "organizations_url": "https://api.github.com/users/nicopauss/orgs",
                "received_events_url": "https://api.github.com/users/nicopauss/received_events",
                "repos_url": "https://api.github.com/users/nicopauss/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nicopauss/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nicopauss/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nicopauss"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The issue with this solution is that we need IS_LIB_COMMON_HDR_PXI to be defined before including lib_common.hdr.pxi.\r\n\r\nTrue. OTOH, Cython will give you a compile time error if you test the value and it's not defined, so these cases are safe and easy to detect. I would suggest defining the variable at the top of your main module file. I think I would also lean towards testing it inside of the included file rather than in all files that include it.",
            "created_at": "2019-08-02T19:20:34Z",
            "html_url": "https://github.com/cython/cython/issues/3057#issuecomment-517815989",
            "id": 517815989,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3057",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzgxNTk4OQ==",
            "updated_at": "2019-08-02T19:20:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/517815989",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3057/comments",
    "created_at": "2019-07-28T13:59:04Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3057/events",
    "html_url": "https://github.com/cython/cython/issues/3057",
    "id": 473747058,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3057/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0NzM3NDcwNTg=",
    "number": 3057,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Add include_once statement.",
    "updated_at": "2019-08-02T19:20:34Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3057",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/4773674?v=4",
        "events_url": "https://api.github.com/users/nicopauss/events{/privacy}",
        "followers_url": "https://api.github.com/users/nicopauss/followers",
        "following_url": "https://api.github.com/users/nicopauss/following{/other_user}",
        "gists_url": "https://api.github.com/users/nicopauss/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/nicopauss",
        "id": 4773674,
        "login": "nicopauss",
        "node_id": "MDQ6VXNlcjQ3NzM2NzQ=",
        "organizations_url": "https://api.github.com/users/nicopauss/orgs",
        "received_events_url": "https://api.github.com/users/nicopauss/received_events",
        "repos_url": "https://api.github.com/users/nicopauss/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/nicopauss/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nicopauss/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/nicopauss"
    }
}