{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "<!--\r\n**Note:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report. Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nIt would be useful to have support for a generic builtin `memoryview`. This can come in handy when the type and dimensionality of the `memoryview` are unknown. In these cases it's tricky to use the Cython `memoryview` as we don't have enough information to type it correctly (or maybe there are tricks I don't know?). The benefit being (much like other builtin types) Cython can translate operations on the `memoryview` into more efficient Python C API calls.\r\n\r\n**Describe the solution you'd like**\r\n\r\nHere's some sample code showing how this might be used.\r\n\r\n```cython\r\ndef nbytes(memoryview m):\r\n    cdef Py_ssize_t i, n = m.itemsize\r\n    for i in range(m.ndim):\r\n        n *= m.shape[i]\r\n    return n\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nIf one knows the type and dimensionality, a Cython `memoryview` can be used. However this doesn't cover the case discussed above (unless I'm missing something). Another alternative is to use the Python C API directly (though this may be less pleasant for other readers and could be buggy if not carefully used).\r\n\r\n**Additional context**\r\n\r\nNA",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "COLLABORATOR",
            "body": "What C API functions are you hoping that Cython will generate? There don't look to be a huge number and they're mostly about creating memoryviews: https://docs.python.org/3/c-api/memoryview.html. Similarly [the semi-public struct](https://github.com/python/cpython/blob/8784d3300ec4ffc58bc0e9ab3cff9a24187dbe4c/Include/memoryobject.h#L57) doesn't actually expose a lot of information - all the useful shape/strides/suboffset info is hidden an opaque array at the end.\r\n\r\nLooking at in more detail I think you'd get the information by accessing the buffer object so maybe there is something that Cython could do here...",
            "created_at": "2020-08-29T06:22:17Z",
            "html_url": "https://github.com/cython/cython/issues/3798#issuecomment-683244736",
            "id": 683244736,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3798",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzI0NDczNg==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-29T06:31:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/683244736",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yeah Iâ€™m hoping things like `memoryview(a)` are translated into `PyMemoryView_FromObject(a)`, `isinstance(mv, memoryview)` gets translated into an appropriate low-level type check, it may also be valuable to have a method to call `PyMemoryView_GetContiguous`, etc..\n\nAs to the underlying `Py_buffer`, I think we should be able to get access to it pretty easily as `PyMemoryView_GET_BUFFER` is a macro that does just that. Though agree queries around the buffer can routed through this mechanism.",
            "created_at": "2020-08-29T19:33:06Z",
            "html_url": "https://github.com/cython/cython/issues/3798#issuecomment-683333191",
            "id": 683333191,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3798",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzMzMzE5MQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-29T19:33:06Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/683333191",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "If you wanted to have a go at writing it then https://github.com/cython/cython/blob/be43235ba3f4fca32dceda46424b36afb3cb00c9/Cython/Compiler/Builtin.py#L252 is where all the types and their member functions are declared (a few are also in Optimize.py, but I think memoryviews would make most sense in Builtin.py. I think getting something basic working is likely to be fairly easy (these type declarations are pretty simple and repetitive).\r\n\r\nI suspect the hardest part will be providing fallback versions for PyPy, but that's something we can give suggestions on once it's clear what's needed.",
            "created_at": "2020-08-29T19:42:49Z",
            "html_url": "https://github.com/cython/cython/issues/3798#issuecomment-683334049",
            "id": 683334049,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3798",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzMzNDA0OQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-29T19:42:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/683334049",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the pointer. That seems like a good place to start.\r\n\r\nDo you think we could add [C inline properties]( https://cython.readthedocs.io/en/latest/src/userguide/extension_types.html#c-inline-properties ) for the various properties on `memoryview` as well? If so, would they ago in `Builtin.py` or would they go elsewhere? How does Cython handle this kind of thing usually?",
            "created_at": "2020-08-29T22:36:47Z",
            "html_url": "https://github.com/cython/cython/issues/3798#issuecomment-683349097",
            "id": 683349097,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3798",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzM0OTA5Nw==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-29T22:36:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/683349097",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> Do you think we could add C inline properties for the various properties on memoryview as well?\r\n\r\nIt doesn't look like we currently have any examples of handling this kind of thing for the core types. It'd probably need to go in `Builtin.py` with a new class (`BuiltinProperty`) alongside `BuiltinMethod` and `BuiltinAttribute` but that's easier said than done.",
            "created_at": "2020-08-30T08:30:01Z",
            "html_url": "https://github.com/cython/cython/issues/3798#issuecomment-683392396",
            "id": 683392396,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3798",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzM5MjM5Ng==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-30T08:30:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/683392396",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> How does Cython handle this kind of thing usually?\r\n\r\nThere is no \"usually\" here because most of the code in `Builtin.py` predates C inline properties by years, if not a decade or more. ;-)\r\n\r\nBut yes, inline properties seem right for this. I remember seeing a somewhat recent PR (this year?) that included an unrelated refactoring of `Builtin.py` to use a class for the extension type declarations. Can't find it right now, but it might be worth basing the changes on that.",
            "created_at": "2020-08-30T09:04:38Z",
            "html_url": "https://github.com/cython/cython/issues/3798#issuecomment-683395481",
            "id": 683395481,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3798",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzM5NTQ4MQ==",
            "performed_via_github_app": null,
            "updated_at": "2020-08-30T09:04:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/683395481",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3798/comments",
    "created_at": "2020-08-29T01:03:18Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3798/events",
    "html_url": "https://github.com/cython/cython/issues/3798",
    "id": 688426384,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3798/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2ODg0MjYzODQ=",
    "number": 3798,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[ENH] Builtin type support for `memoryview`",
    "updated_at": "2020-08-30T09:04:38Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3798",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
        "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
        "followers_url": "https://api.github.com/users/jakirkham/followers",
        "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
        "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jakirkham",
        "id": 3019665,
        "login": "jakirkham",
        "node_id": "MDQ6VXNlcjMwMTk2NjU=",
        "organizations_url": "https://api.github.com/users/jakirkham/orgs",
        "received_events_url": "https://api.github.com/users/jakirkham/received_events",
        "repos_url": "https://api.github.com/users/jakirkham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jakirkham"
    }
}