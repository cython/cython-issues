{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I'm not sure exactly what the conditions are to reproduce this; I've been going through `<algorithm>` (see #3179) and a few (but not all) of the functions which take predicates misbehave.\r\n\r\nExample (deduced as `bool (char, char)` instead of `bool (*)(char, char)`):\r\n```cython\r\nfrom libcpp cimport bool   \r\nfrom libcpp.string cimport string  \r\n \r\ncdef extern from \"<algorithm>\" namespace \"std\" nogil: \r\n    Iter1 search[Iter1, Iter2, BinaryPred](Iter1 first1, Iter1 last1, Iter2 first2, Iter2 last2, BinaryPred pred) except +\r\n     \r\ncdef bool is_equal(char lhs, char rhs): \r\n    return lhs == rhs \r\n \r\ndef in_quote(string quote, string word): \r\n    \"\"\" \r\n    Test search using cppreference example. \r\n \r\n    >>> in_quote(b\"why waste time learning, when ignorance is instantaneous?\", b\"learning\") \r\n    True \r\n    >>> in_quote(b\"why waste time learning, when ignorance is instantaneous?\", b\"lemming\") \r\n    False \r\n    \"\"\" \r\n    return search(quote.begin(), quote.end(), word.begin(), word.end(), is_equal) != word.end()\r\n```\r\n\r\n```\r\nIn file included from /Users/matthew/.ipython/cython/_cython_magic_f17ad9e8d5577187caa54cf4a2e070e8a5cf6430.cpp:674:\r\nIn file included from /Library/Developer/CommandLineTools/usr/include/c++/v1/ios:216:\r\nIn file included from /Library/Developer/CommandLineTools/usr/include/c++/v1/__locale:15:\r\nIn file included from /Library/Developer/CommandLineTools/usr/include/c++/v1/string:477:\r\nIn file included from /Library/Developer/CommandLineTools/usr/include/c++/v1/string_view:176:\r\nIn file included from /Library/Developer/CommandLineTools/usr/include/c++/v1/__string:56:\r\n/Library/Developer/CommandLineTools/usr/include/c++/v1/algorithm:1637:12: error: no matching function for call to '__search'\r\n    return _VSTD::__search<typename add_lvalue_reference<_BinaryPredicate>::type>\r\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/Library/Developer/CommandLineTools/usr/include/c++/v1/__config:447:15: note: expanded from macro '_VSTD'\r\n#define _VSTD std::_LIBCPP_NAMESPACE\r\n              ^\r\n/Users/matthew/.ipython/cython/_cython_magic_f17ad9e8d5577187caa54cf4a2e070e8a5cf6430.cpp:1373:22: note: in instantiation of function template specialization\r\n      'std::__1::search<std::__1::__wrap_iter<char *>, std::__1::__wrap_iter<char *>, bool (char, char)>' requested here\r\n    __pyx_t_1 = std::search<std::string::iterator,std::string::iterator,bool (char, char)>(__pyx_v_quote.begin(), __pyx_v_quote.end(), __pyx_v_word.begin(), __pyx_v_word.end...\r\n                     ^\r\n/Library/Developer/CommandLineTools/usr/include/c++/v1/algorithm:1589:1: note: candidate function not viable: no known conversion from 'bool (*)(char, char)' to\r\n      'bool (&)(char, char)' for 5th argument; dereference the argument with *\r\n__search(_RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1,\r\n^\r\n/Library/Developer/CommandLineTools/usr/include/c++/v1/algorithm:1551:1: note: candidate function not viable: no known conversion from 'bool (*)(char, char)' to\r\n      'bool (&)(char, char)' for 5th argument; dereference the argument with *\r\n__search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\r\n^\r\n1 error generated.\r\n```\r\n\r\nThe generated code calls `std::search<std::string::iterator, std::string::iterator, bool (char, char)>`; adding an explicit cast to `bool (*)(char, char)` or using `&is_equal` works.",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3180/comments",
    "created_at": "2019-10-12T06:15:01Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3180/events",
    "html_url": "https://github.com/cython/cython/issues/3180",
    "id": 506139598,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3180/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1MDYxMzk1OTg=",
    "number": 3180,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Incorrect type deduction of function pointer types",
    "updated_at": "2019-10-13T06:02:01Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3180",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6166539?v=4",
        "events_url": "https://api.github.com/users/mje-nz/events{/privacy}",
        "followers_url": "https://api.github.com/users/mje-nz/followers",
        "following_url": "https://api.github.com/users/mje-nz/following{/other_user}",
        "gists_url": "https://api.github.com/users/mje-nz/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mje-nz",
        "id": 6166539,
        "login": "mje-nz",
        "node_id": "MDQ6VXNlcjYxNjY1Mzk=",
        "organizations_url": "https://api.github.com/users/mje-nz/orgs",
        "received_events_url": "https://api.github.com/users/mje-nz/received_events",
        "repos_url": "https://api.github.com/users/mje-nz/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mje-nz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mje-nz/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mje-nz"
    }
}