{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\n\nGiven a trivial extension type definition that defines `__del__`, when compiled using [the limited API preview branch](https://github.com/cython/cython/issues/6082) and setting `define_macros=[(\"Py_LIMITED_API\", \"0x030B0000\"), (\"CYTHON_LIMITED_API\", None)],` in the Cython extension in setup.py, I see the following warning:\r\n```\r\n  test.c:6338:13: warning: '__pyx_pw_4test_1A_1__del__' defined but not used [-Wunused-function]\r\n   6338 | static void __pyx_pw_4test_1A_1__del__(PyObject *__pyx_v_self) {\r\n```\r\n\r\nThe issue is that the the deleter is called inside a block that looks like this:\r\n```\r\n  #if CYTHON_USE_TP_FINALIZE                                                                                                                                                                                \r\n  static void __pyx_tp_finalize_4test_A(PyObject *o) {                                                                                                                                                      \r\n    PyObject *etype, *eval, *etb;                                                                                                                                                                           \r\n    PyErr_Fetch(&etype, &eval, &etb);                                                                                                                                                                       \r\n    __pyx_pw_4test_1A_1__del__(pyx_v_self: o);                                                                                                                                                              \r\n    PyErr_Restore(etype, eval, etb);                                                                                                                                                                        \r\n  }                                                                                                                                                                                                         \r\n  #endif   \r\n```\r\n\r\nand when compiling under `CYTHON_LIMITED_API` the `CYTHON_USE_TP_FINALIZE` preprocessor variable is set to 0.\n\n### Code to reproduce the behaviour:\n\n```cython\r\n# example code\r\ncdef class A:\r\n    def __del__(self):\r\n        pass\r\n```\n\n### Expected behaviour\n\nI don't know enough about the limited API to know why we don't want to use the `tp_finalize` slot, but in this case it introduces a possible resource leak or some other issue. If all `__del__` is doing is deleting a C object, perhaps it would be reasonable to raise a hard error and require using `__dealloc__`, but that still leaves the possibility of other meaningful behaviors of `__del__`. At minimum it seems like if `__del__` becomes a no-op then we can't have that be silent and Cython should raise a hard error somewhere, right?\n\n### OS\n\nLinux\n\n### Python version\n\n3.12.6\n\n### Cython version\n\nlimited-api-preview branch as of https://github.com/cython/cython/commit/984b763b7ae3e35640b8ee3dea74de51cb450f92\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> I don't know enough about the limited API to know why we don't want to use the tp_finalize slot\r\n\r\nWe can't. We're missing `PyObject_CallFinalizerFromDealloc`, which isn't in the Limited API or even the doucmentation. That takes care of a lot of the \"see if the object gets resurrected\" which just isn't possible in the limited API.\r\n\r\n> If all `__del__` is doing is deleting a C object\r\n\r\nIn this case the right thing to do is using `__dealloc__`. `__dealloc__` is absolutely guaranteed to be called exactly once. `__del__` may be called 0, 1 or many times (largely because it relies on inheriting classes to call it via `super()`). So `__dealloc__` is the right place for C cleanup that _must_ happen, in the same way as `__cinit__` is the place for C initialization that _must_ happen.\r\n\r\n> At minimum it seems like if `__del__` becomes a no-op then we can't have that be silent and Cython should raise a hard error somewhere, right?\r\n\r\nI don't think it can be a hard compile-time error because `__del__` might be defined in a derived type that we can't see. (I could be misremembering this though).  Possibly a runtime warning might be worthwhile though.  The limited API isn't the only build that skips finalize.",
            "created_at": "2024-09-24T21:25:41Z",
            "html_url": "https://github.com/cython/cython/issues/6405#issuecomment-2372415531",
            "id": 2372415531,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6405",
            "node_id": "IC_kwDOABDGAc6NaDAr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2372415531/reactions"
            },
            "updated_at": "2024-09-24T21:26:06Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2372415531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We should probably also `ifdef` out the C code so that you don't see the C warning.",
            "created_at": "2024-09-24T21:26:41Z",
            "html_url": "https://github.com/cython/cython/issues/6405#issuecomment-2372417218",
            "id": 2372417218,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6405",
            "node_id": "IC_kwDOABDGAc6NaDbC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2372417218/reactions"
            },
            "updated_at": "2024-09-24T21:26:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2372417218",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6405/comments",
    "created_at": "2024-09-24T18:17:29Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6405/events",
    "html_url": "https://github.com/cython/cython/issues/6405",
    "id": 2546058766,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6405/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6XwcYO",
    "number": 6405,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6405/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6405/timeline",
    "title": "[BUG] Limited API compilation is not using __del__",
    "updated_at": "2024-09-24T21:26:41Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6405",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vyasr",
        "id": 1538165,
        "login": "vyasr",
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vyasr"
    }
}