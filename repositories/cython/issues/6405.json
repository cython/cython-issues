{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\n\nGiven a trivial extension type definition that defines `__del__`, when compiled using [the limited API preview branch](https://github.com/cython/cython/issues/6082) and setting `define_macros=[(\"Py_LIMITED_API\", \"0x030B0000\"), (\"CYTHON_LIMITED_API\", None)],` in the Cython extension in setup.py, I see the following warning:\r\n```\r\n  test.c:6338:13: warning: '__pyx_pw_4test_1A_1__del__' defined but not used [-Wunused-function]\r\n   6338 | static void __pyx_pw_4test_1A_1__del__(PyObject *__pyx_v_self) {\r\n```\r\n\r\nThe issue is that the the deleter is called inside a block that looks like this:\r\n```\r\n  #if CYTHON_USE_TP_FINALIZE                                                                                                                                                                                \r\n  static void __pyx_tp_finalize_4test_A(PyObject *o) {                                                                                                                                                      \r\n    PyObject *etype, *eval, *etb;                                                                                                                                                                           \r\n    PyErr_Fetch(&etype, &eval, &etb);                                                                                                                                                                       \r\n    __pyx_pw_4test_1A_1__del__(pyx_v_self: o);                                                                                                                                                              \r\n    PyErr_Restore(etype, eval, etb);                                                                                                                                                                        \r\n  }                                                                                                                                                                                                         \r\n  #endif   \r\n```\r\n\r\nand when compiling under `CYTHON_LIMITED_API` the `CYTHON_USE_TP_FINALIZE` preprocessor variable is set to 0.\n\n### Code to reproduce the behaviour:\n\n```cython\r\n# example code\r\ncdef class A:\r\n    def __del__(self):\r\n        pass\r\n```\n\n### Expected behaviour\n\nI don't know enough about the limited API to know why we don't want to use the `tp_finalize` slot, but in this case it introduces a possible resource leak or some other issue. If all `__del__` is doing is deleting a C object, perhaps it would be reasonable to raise a hard error and require using `__dealloc__`, but that still leaves the possibility of other meaningful behaviors of `__del__`. At minimum it seems like if `__del__` becomes a no-op then we can't have that be silent and Cython should raise a hard error somewhere, right?\n\n### OS\n\nLinux\n\n### Python version\n\n3.12.6\n\n### Cython version\n\nlimited-api-preview branch as of https://github.com/cython/cython/commit/984b763b7ae3e35640b8ee3dea74de51cb450f92\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> I don't know enough about the limited API to know why we don't want to use the tp_finalize slot\r\n\r\nWe can't. We're missing `PyObject_CallFinalizerFromDealloc`, which isn't in the Limited API or even the doucmentation. That takes care of a lot of the \"see if the object gets resurrected\" which just isn't possible in the limited API.\r\n\r\n> If all `__del__` is doing is deleting a C object\r\n\r\nIn this case the right thing to do is using `__dealloc__`. `__dealloc__` is absolutely guaranteed to be called exactly once. `__del__` may be called 0, 1 or many times (largely because it relies on inheriting classes to call it via `super()`). So `__dealloc__` is the right place for C cleanup that _must_ happen, in the same way as `__cinit__` is the place for C initialization that _must_ happen.\r\n\r\n> At minimum it seems like if `__del__` becomes a no-op then we can't have that be silent and Cython should raise a hard error somewhere, right?\r\n\r\nI don't think it can be a hard compile-time error because `__del__` might be defined in a derived type that we can't see. (I could be misremembering this though).  Possibly a runtime warning might be worthwhile though.  The limited API isn't the only build that skips finalize.",
            "created_at": "2024-09-24T21:25:41Z",
            "html_url": "https://github.com/cython/cython/issues/6405#issuecomment-2372415531",
            "id": 2372415531,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6405",
            "node_id": "IC_kwDOABDGAc6NaDAr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2372415531/reactions"
            },
            "updated_at": "2024-09-24T21:26:06Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2372415531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We should probably also `ifdef` out the C code so that you don't see the C warning.",
            "created_at": "2024-09-24T21:26:41Z",
            "html_url": "https://github.com/cython/cython/issues/6405#issuecomment-2372417218",
            "id": 2372417218,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6405",
            "node_id": "IC_kwDOABDGAc6NaDbC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2372417218/reactions"
            },
            "updated_at": "2024-09-24T21:26:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2372417218",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> In this case the right thing to do is using __dealloc__.\r\n\r\nRight, that's why I added\r\n\r\n> If all __del__ is doing is deleting a C object, perhaps it would be reasonable to raise a hard error and require using __dealloc__, but that still leaves the possibility of other meaningful behaviors of __del__.\r\n\r\nPerhaps a better example would be something like deleting a file, e.g.\r\n\r\n```\r\ncdef class A:\r\n    def __init__(self):\r\n        self.dir = tempfile.mkdtemp()\r\n    def __del__(self):\r\n        shutil.rmtree(self.dir.name)\r\n```\r\n\r\nBasically any pure Python cleanup. Is there simply no way to solve this in any of the builds that skip finalize?\r\n\r\n> We should probably also ifdef out the C code so that you don't see the C warning.\r\n\r\nYes that would be a nice cosmetic improvement at least.",
            "created_at": "2024-10-18T20:45:11Z",
            "html_url": "https://github.com/cython/cython/issues/6405#issuecomment-2423206984",
            "id": 2423206984,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6405",
            "node_id": "IC_kwDOABDGAc6QbzRI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2423206984/reactions"
            },
            "updated_at": "2024-10-18T20:45:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2423206984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  Is there simply no way to solve this in any of the builds that skip finalize?\r\n\r\nLooking at [PyObject_CallFinalizerFromDealloc](https://github.com/python/cpython/blob/c8fd4b12e3db49d795de55f74d9bac445c059f1b/Objects/object.c#L502) we're missing `PyObject_CallFinalizer` and `_Py_ResurrectReference`.\r\n\r\n`_Py_ResurrectReference` only relates to tracing of reference counting. I suspect we could omit that if needed.\r\n\r\n`PyObject_CallFinalizer` needs to check if the object is finalized and if it is \"gc\". That could probably be substituted by using the `gc` module. It also needs to set the finalized flag. I can't see a way to do that.\r\n\r\nIn principle we might be able to emulate that by adding our own pseudo-\"finalized\" flag to the classes but I'm pretty uncomfortable with that as a solution.\r\n\r\nFor `PyPy` (and similar) I suspect the `Py_SET_REFCNT` stuff just wouldn't work too.\r\n\r\nSo I think my conclusion is that it can't reasonably solved and a runtime or C-compile-time warning is the best that we can do.",
            "created_at": "2024-10-18T21:13:52Z",
            "html_url": "https://github.com/cython/cython/issues/6405#issuecomment-2423241770",
            "id": 2423241770,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6405",
            "node_id": "IC_kwDOABDGAc6Qb7wq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2423241770/reactions"
            },
            "updated_at": "2024-10-18T21:13:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2423241770",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is this a feature request that we should be making upstream? I'm happy to open a CPython issue. As per [the CPython docs](https://docs.python.org/3/c-api/stable.html#limited-api-scope-and-performance):\r\n\r\n> The goal for the Limited API is to allow everything that is possible with the full C API, but possibly with a performance penalty.\r\n\r\nIt seems like we're clearly missing some functionality if it is simply not possible to accomplish this with the limited API right now. Although it also feels like this is an obvious enough use case that there must have been some discussion about this already.",
            "created_at": "2024-10-18T23:33:20Z",
            "html_url": "https://github.com/cython/cython/issues/6405#issuecomment-2423371123",
            "id": 2423371123,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6405",
            "node_id": "IC_kwDOABDGAc6QcbVz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2423371123/reactions"
            },
            "updated_at": "2024-10-18T23:33:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2423371123",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It probably is worth making the request upstream.\r\n\r\n> The goal for the Limited API is to allow everything that is possible with the full C API, but possibly with a performance penalty.\r\n\r\nI kind of disagree with this view and think they may end up regretting it. But this feature is probably still just about on the right side of it.\r\n\r\nI guess the question is: what functionality does `__del__` give us that `__dealloc__` doesn't. And practically the real difference seems like the ability to resurrect things in the finalizer. I don't know how valuable that actually is. But if they're prepared to add it to the limited API then we'll use it.",
            "created_at": "2024-10-19T08:14:21Z",
            "html_url": "https://github.com/cython/cython/issues/6405#issuecomment-2423682871",
            "id": 2423682871,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6405",
            "node_id": "IC_kwDOABDGAc6Qdnc3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2423682871/reactions"
            },
            "updated_at": "2024-10-19T08:14:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2423682871",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It's actually a bit better than I thought. What we can't do is use `__dealloc__` at the same or higher as `__del__`. So:\r\n\r\n```\r\ncdef class A:  # can't work\r\n  def __dealloc__(self):\r\n    pass\r\n  def __del__(self):\r\n    pass\r\n\r\ncdef class B: # works\r\n  def __del__(self):\r\n    pass\r\n\r\ncdef class C(B):  # doesn't work\r\n  def __dealloc__(self):\r\n    pass\r\n```\r\n\r\n(with a few changes)",
            "created_at": "2024-10-19T11:17:42Z",
            "html_url": "https://github.com/cython/cython/issues/6405#issuecomment-2423768734",
            "id": 2423768734,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6405",
            "node_id": "IC_kwDOABDGAc6Qd8ae",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2423768734/reactions"
            },
            "updated_at": "2024-10-19T11:17:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2423768734",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "https://github.com/cython/cython/pull/6429 is as good as we can do right now I think",
            "created_at": "2024-10-19T11:44:35Z",
            "html_url": "https://github.com/cython/cython/issues/6405#issuecomment-2423779051",
            "id": 2423779051,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6405",
            "node_id": "IC_kwDOABDGAc6Qd-7r",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2423779051/reactions"
            },
            "updated_at": "2024-10-19T11:44:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2423779051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6405/comments",
    "created_at": "2024-09-24T18:17:29Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-09-26T01:55:05Z",
            "event": "subscribed",
            "id": 14408010762,
            "node_id": "SE_lADOABDGAc6XwcYOzwAAAANayMwK",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/14408010762"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6405/events",
    "html_url": "https://github.com/cython/cython/issues/6405",
    "id": 2546058766,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6405/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6XwcYO",
    "number": 6405,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 1,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/cython/cython/issues/6405/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6405/timeline",
    "title": "[BUG] Limited API compilation is not using __del__",
    "updated_at": "2024-10-19T11:44:36Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6405",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vyasr",
        "id": 1538165,
        "login": "vyasr",
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vyasr",
        "user_view_type": "public"
    }
}