{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nThe deleted copy constructor is mistakenly invoked with the 3.x series, leading to the following g++ error (Cython does not raise):\r\n```bash\r\n$ cythonize -i -3 test_cython_move.pyx\r\nCompiling /home/leof/dev/python/temp/test_cython_move.pyx because it changed.\r\n[1/1] Cythonizing /home/leof/dev/python/temp/test_cython_move.pyx\r\n/home/leof/dev/python/temp/test_cython_move.cpp: In function ‚ÄòPyObject* __pyx_pf_16test_cython_move_f(PyObject*)‚Äô:\r\n/home/leof/dev/python/temp/test_cython_move.cpp:3189:76: error: use of deleted function ‚Äòmy_obj<T>::my_obj(const my_obj<T>&) [with T = std::vector<long int>]‚Äô\r\n 3189 |   __pyx_v_m = __PYX_STD_MOVE_IF_SUPPORTED(((my_obj<std::vector<int64_t> > )__pyx_t_2));\r\n      |                                                                            ^~~~~~~~~\r\n/home/leof/dev/python/temp/test_cython_move.cpp:1859:52: note: in definition of macro ‚Äò__PYX_STD_MOVE_IF_SUPPORTED‚Äô\r\n 1859 |   #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)\r\n      |                                                    ^\r\n/home/leof/dev/python/temp/test_cython_move.cpp:1299:9: note: declared here\r\n 1299 |         my_obj(const my_obj&) = delete;\r\n      |         ^~~~~~\r\nerror: command '/usr/bin/gcc' failed with exit code 1\r\n```\r\n\r\nI see the line in the `f()` function gets compiled to \r\n- Cython 0.29.x:\r\n```c++\r\n  __pyx_v_m = ((my_obj<std::vector<int64_t> > )__pyx_fuse_2__pyx_f_16test_cython_move_get_resource_holder(__pyx_t_1, ((int64_t *)NULL)));\r\n```\r\n- Cython 3.x:\r\n```c++\r\n__pyx_v_m = __PYX_STD_MOVE_IF_SUPPORTED(((my_obj<std::vector<int64_t> > )__pyx_t_2));\r\n```\r\nMaybe the night is late and I am not thinking straight, so I could be wrong, but I feel the code generated by 0.29.x makes better sense (invoking move assignment).\n\n### Code to reproduce the behaviour:\n\n```cython\r\n# distutils: language = c++\r\n\r\ncimport cpython\r\nfrom libc.stdint cimport int32_t, int64_t, intptr_t\r\nfrom libcpp.vector cimport vector\r\nfrom libcpp cimport bool as cppbool\r\nfrom libcpp cimport nullptr_t, nullptr\r\nfrom libcpp.memory cimport unique_ptr\r\nfrom libcpp.utility cimport move\r\nfrom cython.operator cimport dereference as deref\r\n\r\n\r\ncdef extern from * nogil:\r\n    \"\"\"\r\n    template<typename T>\r\n    class my_obj {\r\n      public:\r\n        my_obj() noexcept = default;\r\n\r\n        explicit my_obj(T data): data_(data)\r\n        {\r\n        }\r\n\r\n        my_obj(const my_obj&) = delete;\r\n\r\n        my_obj& operator=(const my_obj&) = delete;\r\n\r\n        my_obj(my_obj&& other) noexcept\r\n        {\r\n            data_ = other.data_;\r\n        }\r\n\r\n        my_obj& operator=(my_obj&& other) noexcept\r\n        {\r\n            data_ = other.data_;\r\n            return *this;\r\n        }\r\n\r\n        ~my_obj() = default;\r\n\r\n        void swap(my_obj& other) noexcept\r\n        {\r\n            std::swap(data_, other.data_);\r\n        }\r\n\r\n        T get() const noexcept\r\n        {\r\n            return data_;\r\n        }\r\n\r\n      private:\r\n        T data_;\r\n    };\r\n    \"\"\"\r\n    # xref: cython/Cython/Includes/libcpp/memory.pxd\r\n    cdef cppclass my_obj[T]:\r\n        my_obj()\r\n        my_obj(T)\r\n        my_obj(my_obj[T]&)\r\n\r\n        # Modifiers\r\n        void swap(my_obj&)\r\n\r\n        # Observers\r\n        T get()\r\n\r\n\r\nctypedef fused ResT:\r\n    int\r\n    int32_t\r\n    int64_t\r\n\r\n\r\ncdef my_obj[ vector[ResT] ] get_resource_holder(object obj, ResT* __unused):\r\n    cdef my_obj[ vector[ResT] ] holder\r\n    cdef vector[ResT]* vec\r\n    if cpython.PySequence_Check(obj):\r\n        vec = new vector[ResT](len(obj))\r\n        for i in range(len(obj)):\r\n            deref(vec)[i] = obj[i]\r\n    else:\r\n        raise RuntimeError\r\n    return move(holder)\r\n\r\n\r\ndef f():\r\n    cdef my_obj[ vector[int64_t] ] m = get_resource_holder[int64_t]([1,2,3], <int64_t*>NULL)\r\n```\r\n\n\n### Expected behaviour\n\nWorks in both 0.29.x and 3.x.\n\n### OS\n\nLinux\n\n### Python version\n\n3.11.3\n\n### Cython version\n\n0.29.37 / 3.0.10\n\n### Additional context\n\nAny workaround to unblock us is also appreciated üôè",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "It's related to https://github.com/cython/cython/issues/6225 in that it shouldn't put move round a cast (but I don't know why it's generating the cast in the first place).\r\n\r\nThe difference between 0.29.x and 3.0.x is that it goes via a temp in 3.0.x. This is because `cdef` functions can raise exceptions by default. If you mark `get_resource_holder` as `noexcept` it'll go back to the old code.",
            "created_at": "2024-06-04T06:13:13Z",
            "html_url": "https://github.com/cython/cython/issues/6228#issuecomment-2146691718",
            "id": 2146691718,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6228",
            "node_id": "IC_kwDOABDGAc5_8-qG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2146691718/reactions"
            },
            "updated_at": "2024-06-04T06:13:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2146691718",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks, @da-woods! Adding `noexcept` works! Yeah I dunno why a cast is generated either, doesn't seem to be necessary (since by design the type of a temp is guaranteed to be the same) and gcc is not smart enough to eliminate the cast op.\r\n\r\nbtw the ugliness of `get_resource_holder` (having an `__unused` argument of type `ResT*`) was to work around the limitation of using fused types with C++ templates (#5544) üòÖ ",
            "created_at": "2024-06-04T13:46:48Z",
            "html_url": "https://github.com/cython/cython/issues/6228#issuecomment-2147582089",
            "id": 2147582089,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6228",
            "node_id": "IC_kwDOABDGAc6AAYCJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2147582089/reactions"
            },
            "updated_at": "2024-06-04T13:46:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2147582089",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6228/comments",
    "created_at": "2024-06-04T04:37:00Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-06-04T13:46:49Z",
            "event": "mentioned",
            "id": 13036813241,
            "node_id": "MEE_lADOABDGAc6LB4rWzwAAAAMJDfu5",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13036813241"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-06-04T13:46:49Z",
            "event": "subscribed",
            "id": 13036813271,
            "node_id": "SE_lADOABDGAc6LB4rWzwAAAAMJDfvX",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13036813271"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6228/events",
    "html_url": "https://github.com/cython/cython/issues/6228",
    "id": 2332527318,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6228/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6LB4rW",
    "number": 6228,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6228/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6228/timeline",
    "title": "[BUG] deleted copy constructor mistakenly invoked with Cython 3.x (but worked with Cython 0.29.x)",
    "updated_at": "2024-06-04T13:46:49Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6228",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
        "events_url": "https://api.github.com/users/leofang/events{/privacy}",
        "followers_url": "https://api.github.com/users/leofang/followers",
        "following_url": "https://api.github.com/users/leofang/following{/other_user}",
        "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/leofang",
        "id": 5534781,
        "login": "leofang",
        "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
        "organizations_url": "https://api.github.com/users/leofang/orgs",
        "received_events_url": "https://api.github.com/users/leofang/received_events",
        "repos_url": "https://api.github.com/users/leofang/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/leofang"
    }
}