{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\r\n\r\nWhen using Python 3.11 debug mode with pyarrow, we noticed some warnings that might be caused by cython (https://github.com/apache/arrow/issues/33765). The new debug warning comes from https://github.com/python/cpython/issues/95324 (PR: https://github.com/python/cpython/pull/95325). This warning was added to Python 3.11 in debug mode to help people catch bugs when a GC enabled object doesn't call `PyObject_GC_UnTrack` during deallocation.\r\n\r\nIn a specific pattern of class hierarchies (see below for full reproducer), this warning can be triggered by the cython generated extension module:\r\n\r\n```\r\n>>> import example\r\n>>> example.test()\r\ngc:0: ResourceWarning: Object of type example._example.MyClass is not untracked before destruction\r\n```\r\n\r\nThe `test()` function is a dummy function that creates a `MyClass` instance which directly goes out of scope when the function returns, so triggering a clean-up of the instance. This deallocation of the `MyClass` instance then triggers the debug warning.\r\n\r\n### Code to reproduce the behaviour:\r\n\r\nI created a full reproducer at https://github.com/jorisvandenbossche/cython-minimal-example. The essential cython code is as follows:\r\n\r\n```cython\r\ncdef class _Weakrefable:\r\n    cdef object __weakref__\r\n\r\n\r\ncdef class MyBaseClass(_Weakrefable):\r\n\r\n    cdef readonly:\r\n        object obj\r\n\r\n    def __init__(self):\r\n        pass\r\n\r\n\r\ncdef class MyClass(MyBaseClass):\r\n    pass\r\n```\r\n\r\n(the above mimics the class hierarchy we have in pyarrow)\r\n\r\nSo the final class (`MyClass`) has a base class (`MyBaseClass`) with python object attributes (and thus has `Py_TPFLAGS_HAVE_GC`), and so the `MyClass` is also GC tracked. The base class itself inherits from `_Weakrefable`, which is not GC tracked (because `__weakref__` PyObject attribute is special cased), but does have an additional `dealloc` logic that is called from the child class' dealloc.\r\n\r\nThe generated `tp_dealloc` for MyClass:\r\n\r\n```c++\r\nstatic void __pyx_tp_dealloc_7example_8_example_MyBaseClass(PyObject *o) {\r\n  struct __pyx_obj_7example_8_example_MyBaseClass *p = (struct __pyx_obj_7example_8_example_MyBaseClass *)o;\r\n  #if CYTHON_USE_TP_FINALIZE\r\n  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {\r\n    if (PyObject_CallFinalizerFromDealloc(o)) return;\r\n  }\r\n  #endif\r\n  PyObject_GC_UnTrack(o);\r\n  Py_CLEAR(p->obj);\r\n  #if CYTHON_USE_TYPE_SLOTS\r\n  if (PyType_IS_GC(Py_TYPE(o)->tp_base))\r\n  #endif\r\n  PyObject_GC_Track(o);\r\n  __pyx_tp_dealloc_7example_8_example__Weakrefable(o);\r\n}\r\n```\r\n\r\nSo this correctly calls `PyObject_GC_UnTrack(o);` before freeing any members. But the problem here in this specific case is that because the base class of `MyClass`, i.e. `MyBaseClass`, is GC tracked itself, the `if (PyType_IS_GC(Py_TYPE(o)->tp_base))` passes, and thus `PyObject_GC_Track(o);` is called before running the remainder of the dealloc function. However, the base class itself doesn't have any additional dealloc logic (this already _is_ the dealloc of the base class, because the child `MyClass` doesn't require any additional logic and thus uses the dealloc definition of its base class), and so the remainder consists of calling the dealloc of the base-base class `_Weakrefable`. But this class itself is not GC tracked, and thus doesn't call `PyObject_GC_UnTrack(o);` again, with the result that we are running deallocation logic with a tracked object. And then this causes the warning of *\"Object of type example._example.MyClass is not untracked before destruction\"*\r\n\r\nIf the `PyObject_GC_Track(o);` line in the above snippet is removed, the warning disappears.\r\n\r\n### Expected behaviour\r\n\r\nGenerate code that doesn't cause this warning.\r\n\r\n### Environment\r\n\r\nOS: Ubuntu 20.04\r\nPython version: Python 3.11.0 (debug build installed from conda-forge)\r\nCython version: 0.29.33 (latest from conda-forge)\r\n\r\n\r\n### Additional context\r\n\r\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "cc @scoder ",
            "created_at": "2023-01-27T17:27:42Z",
            "html_url": "https://github.com/cython/cython/issues/5231#issuecomment-1406824146",
            "id": 1406824146,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5231",
            "node_id": "IC_kwDOABDGAc5T2m7S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1406824146/reactions"
            },
            "updated_at": "2023-01-27T17:27:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1406824146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't quite get why we're tracking it again.\r\n\r\nThe comments in the code say\r\n\r\nhttps://github.com/cython/cython/blob/b2cad768499cf5763251fe757491e9fc24a1f583/Cython/Compiler/ModuleNode.py#L1736-L1737\r\n\r\nwhich is fair enough. But it's safe to call `PyObject_GC_UnTrack` multiple times. The only issue would seem to be if a finalizer  resurrects it. I think that the finalizer should only be called by the outermost cdef class so that shouldn't happen once we've untracked it.",
            "created_at": "2023-01-27T22:21:54Z",
            "html_url": "https://github.com/cython/cython/issues/5231#issuecomment-1407135170",
            "id": 1407135170,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5231",
            "node_id": "IC_kwDOABDGAc5T3y3C",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1407135170/reactions"
            },
            "updated_at": "2023-01-27T22:21:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1407135170",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thank you for the good analysis.\r\n\r\nI wonder if this does what is intended:\r\n> ```c\r\n>   #if CYTHON_USE_TYPE_SLOTS\r\n>   if (PyType_IS_GC(Py_TYPE(o)->tp_base))\r\n>   #endif\r\n>   PyObject_GC_Track(o);\r\n> ```\r\nThe `PyType_IS_GC()` check looks at the base type of the type itself, regardless of where we are in the type hierarchy. Shouldn't it look at the base type of the current level, i.e. `_Weakrefable` in the case of `MyBaseClass`, even if the current type is `MyClass`? As I understand it, it currently looks at `MyBaseClass` in that case, which is the type that defines the `tp_dealloc` function above. But `MyBaseClass` directly knows itself that it's a GC type, there's no use in a runtime check for that.",
            "created_at": "2023-01-30T14:00:06Z",
            "html_url": "https://github.com/cython/cython/issues/5231#issuecomment-1408675852",
            "id": 1408675852,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5231",
            "node_id": "IC_kwDOABDGAc5T9rAM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1408675852/reactions"
            },
            "updated_at": "2023-01-30T14:00:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1408675852",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5231/comments",
    "created_at": "2023-01-27T14:32:20Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1020496?v=4",
                "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
                "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
                "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
                "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jorisvandenbossche",
                "id": 1020496,
                "login": "jorisvandenbossche",
                "node_id": "MDQ6VXNlcjEwMjA0OTY=",
                "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
                "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
                "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jorisvandenbossche"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-01-27T14:33:13Z",
            "event": "renamed",
            "id": 8373943849,
            "node_id": "RTE_lADOABDGAc5c-auczwAAAAHzID4p",
            "performed_via_github_app": null,
            "rename": {
                "from": "[BUG] ",
                "to": "[BUG] GC tracked class with base class with __weakref__ triggers \"not untracked before destruction\" debug warning (Python 3.11)"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/8373943849"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-01-27T17:27:42Z",
            "event": "mentioned",
            "id": 8375552438,
            "node_id": "MEE_lADOABDGAc5c-auczwAAAAHzOMm2",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8375552438"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-01-27T17:27:42Z",
            "event": "subscribed",
            "id": 8375552452,
            "node_id": "SE_lADOABDGAc5c-auczwAAAAHzOMnE",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8375552452"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5231/events",
    "html_url": "https://github.com/cython/cython/issues/5231",
    "id": 1559866268,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5231/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5c-auc",
    "number": 5231,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5231/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5231/timeline",
    "title": "[BUG] GC tracked class with base class with __weakref__ triggers \"not untracked before destruction\" debug warning (Python 3.11)",
    "updated_at": "2023-01-30T14:00:28Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5231",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1020496?v=4",
        "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
        "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
        "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
        "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jorisvandenbossche",
        "id": 1020496,
        "login": "jorisvandenbossche",
        "node_id": "MDQ6VXNlcjEwMjA0OTY=",
        "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
        "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
        "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jorisvandenbossche"
    }
}