{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "**Describe the bug**\r\nHello up there. I've hit a situation where call to `bytes.__contains__(self)` is unconditionally translated to `PySequence_Contains(self)` even if type of self inherits from bytes and provides its own `.__contains__`. This incorrectly leads to `RecursionError` in my case. Please find details below.\r\n\r\n**To Reproduce**\r\nCode to reproduce the behaviour:\r\n```cython\r\n# cython: language_level=3\r\n\r\nclass MyBytes(bytes):\r\n    def __contains__(self, key):\r\n        print('__contains__')\r\n        return bytes.__contains__(self, key)\r\n\r\nx = MyBytes(b'zzz')\r\nb'a' in x\r\n```\r\n\r\nRunning it through pure python (both py2 and py3) works as expected:\r\n\r\n```console\r\n$ python containsbug.pyx\r\n__contains__\r\n```\r\n\r\nHowever running it through Cython leads to RecursionError:\r\n\r\n```console\r\n$ cythonize -i containsbug.pyx && python -c 'import containsbug'\r\nCompiling /home/kirr/src/tools/go/pygolang/containsbug.pyx because it changed.\r\n[1/1] Cythonizing /home/kirr/src/tools/go/pygolang/containsbug.pyx\r\nrunning build_ext\r\nbuilding 'containsbug' extension\r\ncreating /home/kirr/src/tools/go/pygolang/tmpgzlwnd7x/home\r\ncreating /home/kirr/src/tools/go/pygolang/tmpgzlwnd7x/home/kirr\r\ncreating /home/kirr/src/tools/go/pygolang/tmpgzlwnd7x/home/kirr/src\r\ncreating /home/kirr/src/tools/go/pygolang/tmpgzlwnd7x/home/kirr/src/tools\r\ncreating /home/kirr/src/tools/go/pygolang/tmpgzlwnd7x/home/kirr/src/tools/go\r\ncreating /home/kirr/src/tools/go/pygolang/tmpgzlwnd7x/home/kirr/src/tools/go/pygolang\r\nx86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -ffile-prefix-map=/build/python3.9-RNBry6/python3.9-3.9.2=. -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -ffile-prefix-map=/build/python3.9-RNBry6/python3.9-3.9.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/home/kirr/src/wendelin/venv/py3.venv/include -I/usr/include/python3.9 -c /home/kirr/src/tools/go/pygolang/containsbug.c -o /home/kirr/src/tools/go/pygolang/tmpgzlwnd7x/home/kirr/src/tools/go/pygolang/containsbug.o\r\nx86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fwrapv -O2 -Wl,-z,relro -g -fwrapv -O2 -g -ffile-prefix-map=/build/python3.9-RNBry6/python3.9-3.9.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /home/kirr/src/tools/go/pygolang/tmpgzlwnd7x/home/kirr/src/tools/go/pygolang/containsbug.o -o /home/kirr/src/tools/go/pygolang/containsbug.cpython-39-x86_64-linux-gnu.so\r\n__contains__\r\n__contains__\r\n__contains__\r\n__contains__\r\n...\r\n__contains__\r\n__contains__\r\n__contains__\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"containsbug.pyx\", line 9, in init containsbug\r\n    b'a' in x\r\n  File \"containsbug.pyx\", line 6, in containsbug.MyBytes.__contains__\r\n    return bytes.__contains__(self, key)\r\n  File \"containsbug.pyx\", line 6, in containsbug.MyBytes.__contains__\r\n    return bytes.__contains__(self, key)\r\n  File \"containsbug.pyx\", line 6, in containsbug.MyBytes.__contains__\r\n    return bytes.__contains__(self, key)\r\n  [Previous line repeated 985 more times]\r\n  File \"containsbug.pyx\", line 5, in containsbug.MyBytes.__contains__\r\n    print('__contains__')\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n__contains__\r\n```\r\n\r\n**Expected behavior**\r\nThe same output as when run through pure python.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Debian 11 GNU/Linux\r\n - Python version: 3.9.2, 2.7.18\r\n - Cython version: `0.29.28-26-gac29e8976`  (today's 0.29.x)\r\n\r\n**Additional context**\r\n\r\nThe code for `bytes.__contains__(self)` is translated as follows:\r\n\r\n```c\r\n  /* \"containsbug.pyx\":6\r\n *     def __contains__(self, key):\r\n *         print('__contains__')\r\n *         return bytes.__contains__(self, key)             # <<<<<<<<<<<<<<\r\n * \r\n * x = MyBytes(b'zzz')\r\n */\r\n  __Pyx_XDECREF(__pyx_r);\r\n  if (unlikely(__pyx_v_self == Py_None)) {\r\n    PyErr_Format(PyExc_TypeError, \"descriptor '%s' requires a '%s' object but received a 'NoneType'\", \"__contains__\", \"bytes\");\r\n    __PYX_ERR(0, 6, __pyx_L1_error)\r\n  }\r\n  if (!(likely(PyBytes_Check(__pyx_v_self))||(PyErr_Format(PyExc_TypeError, \"Expected %.16s, got %.200s\", \"bytes\", Py_TYPE(__pyx_v_self)->tp_name), 0))) __PYX_ERR(0, 6, __pyx_L1_error)\r\n  __pyx_t_2 = PySequence_Contains(((PyObject*)__pyx_v_self), __pyx_v_key); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 6, __pyx_L1_error)\r\n  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_1);\r\n  __pyx_r = __pyx_t_1;\r\n  __pyx_t_1 = 0;\r\n  goto __pyx_L0;\r\n```\r\nNOTE `PySequence_Contains(self)` call there which calls `MyBytes.__contains__` again and leads to recursion.\r\n\r\nThanks beforehand,\r\nKirill",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4785/comments",
    "created_at": "2022-05-12T11:50:22Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4785/events",
    "html_url": "https://github.com/cython/cython/issues/4785",
    "id": 1233866228,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4785/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5Ji030",
    "number": 4785,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4785/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4785/timeline",
    "title": "[BUG] Call to bytes.__contains__(self) is wrongly unconditionally translated to PySequence_Contains(self)",
    "updated_at": "2022-05-12T11:50:22Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4785",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1794248?v=4",
        "events_url": "https://api.github.com/users/navytux/events{/privacy}",
        "followers_url": "https://api.github.com/users/navytux/followers",
        "following_url": "https://api.github.com/users/navytux/following{/other_user}",
        "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/navytux",
        "id": 1794248,
        "login": "navytux",
        "node_id": "MDQ6VXNlcjE3OTQyNDg=",
        "organizations_url": "https://api.github.com/users/navytux/orgs",
        "received_events_url": "https://api.github.com/users/navytux/received_events",
        "repos_url": "https://api.github.com/users/navytux/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/navytux"
    }
}