{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nFirst thanks for the wonderful improvements Cython has seen recently. This is really game changing.\r\n\r\nMostly so far I've only encountered usability issues, and this is the first time I encounter what I think is really a bug.\r\n\r\n[Here](https://github.com/axeldavy/DearCyGui/blob/abf178118727cb149bb201a362c7b40f24e13b39/dearcygui/core.pyx#L1166) is the code that has an issue (below generated cpp):\r\n```\r\n      /* \"dearcygui/core.pyx\":1166\r\n *             while (<baseItem>child)._prev_sibling is not None and \\\r\n *                 already_attached.find((<baseItem>child)._prev_sibling.uuid) == already_attached.end():\r\n *                 (<baseItem>child)._prev_sibling.detach_item()             # <<<<<<<<<<<<<<\r\n *             already_attached.insert(uuid)\r\n * \r\n */\r\n      ((struct __pyx_vtabstruct_9dearcygui_4core_baseItem *)((struct __pyx_obj_9dearcygui_4core_baseItem *)__pyx_v_child)->_prev_sibling->__pyx_vtab)->detach_item(((struct __pyx_obj_9dearcygui_4core_baseItem *)__pyx_v_child)->_prev_sibling, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1166, __pyx_L1_error)\r\n    }\r\n```\r\n\r\n[Here](https://github.com/axeldavy/DearCyGui/blob/c9dde3e3327e4a11bef868c4e4d058b18fc6363b/dearcygui/core.pyx#L1169) is the code with a workaround that prevents the issue (below generated cpp):\r\n\r\n\r\n```\r\n    (Note: sibling is declared as cdef baseItem sibling)\r\n\r\n      /* \"dearcygui/core.pyx\":1169\r\n *                 # Setting sibling here rather than calling detach_item directly avoids\r\n *                 # crash due to refcounting bug.\r\n *                 sibling = (<baseItem>child)._prev_sibling             # <<<<<<<<<<<<<<\r\n *                 sibling.detach_item()\r\n *             already_attached.insert(uuid)\r\n */\r\n      __pyx_t_6 = ((PyObject *)((struct __pyx_obj_9dearcygui_4core_baseItem *)__pyx_v_child)->_prev_sibling);\r\n      __Pyx_INCREF(__pyx_t_6);\r\n      __Pyx_XDECREF_SET(__pyx_v_sibling, ((struct __pyx_obj_9dearcygui_4core_baseItem *)__pyx_t_6));\r\n      __pyx_t_6 = 0;\r\n\r\n      /* \"dearcygui/core.pyx\":1170\r\n *                 # crash due to refcounting bug.\r\n *                 sibling = (<baseItem>child)._prev_sibling\r\n *                 sibling.detach_item()             # <<<<<<<<<<<<<<\r\n *             already_attached.insert(uuid)\r\n * \r\n */\r\n      ((struct __pyx_vtabstruct_9dearcygui_4core_baseItem *)__pyx_v_sibling->__pyx_vtab)->detach_item(__pyx_v_sibling, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1170, __pyx_L1_error)\r\n    }\r\n```\r\n\r\nWhat happens here is that detach_item() will change the value of (<baseItem>child)._prev_sibling, and thus there is no more reference to the item during the call. This causes a SEGFAULT during the detach_item call.\r\n\r\nThe workaround does generate INCREF/DECREF calls and thus the segfault is avoided.\r\n\r\nWhile I agree this is quite a corner case, I don't think I have seen any warning relative to it in the Cython doc as a known limitation. In the general case, I don't think INCREF and DECREF should be generated around method calls, and at least in the same file I use that a lot in nogil sections.\r\n\r\nSince the issue doesn't seem to have been reported though, I decided to post it here.\r\n\n\n### Code to reproduce the behaviour:\n\nEasiest would be to cythonize the target file and check the .cpp\n\n### Expected behaviour\n\nOne of these:\r\n- No crash\r\n-  A warning during compilation\r\n-  A warning in the documentation.\r\n-  A readable way to indicate when we call an item's method that the object should be considered a PyObject (borrowed refenced) or an object (incref/decref)\n\n### OS\n\nLinux\n\n### Python version\n\n3.10.12\n\n### Cython version\n\n3.0.11\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "As you observe, we call `cdef` and `cpdef` methods with a borrowed reference to `self`. That's obviously dodgy in your case but in a lot of cases it's an optimization. It also allows you to call these methods without the GIL (which is a nice feature that would break a lot of code of if we changed it).\r\n\r\nThe more robust workaround in your code would probably be to add `self2 = self` inside `detach_item` which would at least make sure that the caller doesn't have to remember to do it.\r\n\r\nI'm not sure what the best overall solution is.\r\n\r\n> *  No crash\r\n\r\nCould probably only be implemented on regular, gil-held calls. (Note that it's still possible to crash the `nogil` version by acquiring the `gil` in the function). Would be an option.\r\n\r\n> * A warning during compilation\r\n\r\nWould almost certainly be too noisy to be useful.\r\n\r\n> * A warning in the documentation.\r\n\r\nCould definitely add this, but I suspect it wouldn't get read\r\n\r\n> * A readable way to indicate when we call an item's method that the object should be considered a PyObject (borrowed refenced) or an object (incref/decref)\r\n\r\nPossible in principle.",
            "created_at": "2024-10-28T18:47:47Z",
            "html_url": "https://github.com/cython/cython/issues/6466#issuecomment-2442367208",
            "id": 2442367208,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6466",
            "node_id": "IC_kwDOABDGAc6Rk5Do",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2442367208/reactions"
            },
            "updated_at": "2024-10-28T18:47:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2442367208",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for the reply.\r\n\r\nI understand your suggestion for more robust workaround. This raises one worry is that both this one and mine depend on the current behaviour of Cython of not releasing variables before the end of the function, even if they are unused.\r\n\r\nI also have in mind the move to free-threaded python, and that it will likely have an impact on how best to write Cython code. In a world where the gil is gone, would the first option be favored ? If in a gil-free world, refcounting is still not cheap, is an api to indicate borrowed referenced needed ?",
            "created_at": "2024-10-28T22:58:38Z",
            "html_url": "https://github.com/cython/cython/issues/6466#issuecomment-2442828521",
            "id": 2442828521,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6466",
            "node_id": "IC_kwDOABDGAc6Rmprp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2442828521/reactions"
            },
            "updated_at": "2024-10-28T22:58:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2442828521",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2546609?v=4",
                "events_url": "https://api.github.com/users/axeldavy/events{/privacy}",
                "followers_url": "https://api.github.com/users/axeldavy/followers",
                "following_url": "https://api.github.com/users/axeldavy/following{/other_user}",
                "gists_url": "https://api.github.com/users/axeldavy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/axeldavy",
                "id": 2546609,
                "login": "axeldavy",
                "node_id": "MDQ6VXNlcjI1NDY2MDk=",
                "organizations_url": "https://api.github.com/users/axeldavy/orgs",
                "received_events_url": "https://api.github.com/users/axeldavy/received_events",
                "repos_url": "https://api.github.com/users/axeldavy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/axeldavy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/axeldavy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/axeldavy",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This raises one worry is that both this one and mine depend on the current behaviour of Cython of not releasing variables before the end of the function, even if they are unused.\r\n\r\nThat's very unlikely to change I think. I think we'd assume that people might be keeping a variable around to keep something alive. \r\n\r\n> I also have in mind the move to free-threaded python, and that it will likely have an impact on how best to write Cython code.\r\n\r\nProbably not a lot. There's some open debate about how we should handle internal thread-safety in Cython and how much effort we should spend saving people from themselves. I don't think it changes too much in this case. Certainly not immediately (where it's \"experimental\" at least for the next few years).",
            "created_at": "2024-10-28T23:11:20Z",
            "html_url": "https://github.com/cython/cython/issues/6466#issuecomment-2442843463",
            "id": 2442843463,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6466",
            "node_id": "IC_kwDOABDGAc6RmtVH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2442843463/reactions"
            },
            "updated_at": "2024-10-28T23:11:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2442843463",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "https://github.com/cython/cython/blob/a3086ff75f5b33639b867ab15922d928e14e99bf/Cython/Compiler/ExprNodes.py#L6247-L6249\r\n\r\nThis is the logic that controls it. My argument about `nogil` doesn't hold up - we skip creating the temps for `nogil` so a change wouldn't affect that.\r\n\r\nI'm slightly less sure why we've special cased `self` now and slightly less convinced that we should.",
            "created_at": "2024-10-30T20:57:13Z",
            "html_url": "https://github.com/cython/cython/issues/6466#issuecomment-2448365502",
            "id": 2448365502,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6466",
            "node_id": "IC_kwDOABDGAc6R7xe-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2448365502/reactions"
            },
            "updated_at": "2024-10-30T20:57:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2448365502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6466/comments",
    "created_at": "2024-10-28T12:57:53Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6466/events",
    "html_url": "https://github.com/cython/cython/issues/6466",
    "id": 2618355174,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6466/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6cEO3m",
    "number": 6466,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6466/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6466/timeline",
    "title": "[BUG] Segfault when calling a method from a child item that releases it",
    "updated_at": "2024-10-30T20:57:15Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6466",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2546609?v=4",
        "events_url": "https://api.github.com/users/axeldavy/events{/privacy}",
        "followers_url": "https://api.github.com/users/axeldavy/followers",
        "following_url": "https://api.github.com/users/axeldavy/following{/other_user}",
        "gists_url": "https://api.github.com/users/axeldavy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/axeldavy",
        "id": 2546609,
        "login": "axeldavy",
        "node_id": "MDQ6VXNlcjI1NDY2MDk=",
        "organizations_url": "https://api.github.com/users/axeldavy/orgs",
        "received_events_url": "https://api.github.com/users/axeldavy/received_events",
        "repos_url": "https://api.github.com/users/axeldavy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/axeldavy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/axeldavy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/axeldavy",
        "user_view_type": "public"
    }
}