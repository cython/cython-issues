{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "We (CPython) should provide a C API for pushing introspectable frames to the call stack, and you (Cython) should use them.\r\n\r\nThe vast majority of Python-to-Python calls do not need to create a heap allocated frame.\r\nIt would be good if Cython could use the same frame stack.\r\n\r\nSeeing as Cython would be main user of this API, it seems sensible to have the discussion here, rather than on BPO.\r\n\r\nThe API could look something like this:\r\n```C\r\ntypedef struct _ {\r\n     PyObject *frame_descriptor;\r\n     /* Some opaque fields */\r\n     int line_number; // Writeable line number\r\n     /* Some more opaque fields */\r\n} InterpreterCFrame;\r\n\r\n/* Calls these once each for each call to the Cython callable */\r\nInterpreterCFrame *_Py_PushCFrame(PyObject *frame_descriptor);\r\nvoid _Py_PopCFrame(InterpreterCFrame *frame); \r\n\r\n/* Call this once when the Cython module is loaded */\r\nPyObject *_Py_CreateCFrameDescriptor(char *name, char *filename, int firstlineno);\r\n```\r\n\r\n`_Py_PushCFrame` and `_Py_PopCFrame`  should be fast, just changing the refcount of `frame_descriptor` and zeroing a few fields.\r\n\r\nThe exact layout of `InterpreterCFrame` might change from version to version, but code that only uses the public fields should recompile without changes.\r\n\r\nThe various opaque fields exists so that Python and C frames have mostly the same binary layout, to avoid runtime checks where possible.\r\n\r\n\r\nhttps://bugs.python.org/issue45905\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "An alternative would be to drop the `_Py_CreateCFrameDescriptor` function, and take Cython callables as the argument to `_Py_PushCFrame`, provided they had the same API for use by `inspect` and `traceback`.",
            "created_at": "2021-11-26T17:00:26Z",
            "html_url": "https://github.com/cython/cython/issues/4484#issuecomment-980147507",
            "id": 980147507,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4484",
            "node_id": "IC_kwDOABDGAc46a90z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/980147507/reactions"
            },
            "updated_at": "2021-11-26T17:00:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/980147507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
                "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
                "followers_url": "https://api.github.com/users/markshannon/followers",
                "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
                "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/markshannon",
                "id": 9448417,
                "login": "markshannon",
                "node_id": "MDQ6VXNlcjk0NDg0MTc=",
                "organizations_url": "https://api.github.com/users/markshannon/orgs",
                "received_events_url": "https://api.github.com/users/markshannon/received_events",
                "repos_url": "https://api.github.com/users/markshannon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/markshannon"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "I'm slightly reluctant to comment on this because it's a bit of code I don't understand very well but since no-one else has I'll make an attempt:\r\n\r\ncurrently Cython only generates the frames for the tracebacks on demand (i.e. when there's an exception) rather than creating a frame at every function call. This is an optimization that I think we'd like to keep (for example, a lot of functions are \"nogil unless an exception is thrown\"). Your proposed scheme seems to be building it from the top down (so every call pushes and pops the frame) whereas our current one builds builds the traceback in reverse order as it propagates up.\r\n\r\n> An alternative would be to drop the `_Py_CreateCFrameDescriptor` function, and take Cython callables as the argument to `_Py_PushCFrame`, provided they had the same API for use by `inspect` and `traceback`.\r\n\r\nI don't think that would work as a general solution - we do try to create tracebacks from `cdef` functions which are implemented just as C functions and are visible only from within Cython (i.e. there is no associated Python object).\r\n\r\nOne final comment: it'd be useful if this could end up part of the limited API. Looking at the current code, I think we've struggled to implement anything in our (preliminary) limited API implementation.",
            "created_at": "2021-11-29T17:50:41Z",
            "html_url": "https://github.com/cython/cython/issues/4484#issuecomment-981870788",
            "id": 981870788,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4484",
            "node_id": "IC_kwDOABDGAc46hijE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/981870788/reactions"
            },
            "updated_at": "2021-11-29T17:50:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/981870788",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Right. For cdef functions, any refcount overhead might already be too much, since it implies non-local interaction (and apparently a foreign C function call, which reduces the chance of efficient inlining). For functions with a Python interface, that's probably more acceptable. (Although `cpdef` functions already suffer from some overhead that we should reduce, not grow. Different issue…)\r\n\r\nThat said, I think the general idea of keeping frame references in a preallocated stack is a good one.\r\n\r\n> The various opaque fields exists so that Python and C frames have mostly the same binary layout, to avoid runtime checks where possible.\r\n\r\nDo they need to be opaque, though? The current frame object seems to have tracing related fields. Direct access to those would certainly be helpful.\r\n\r\nISTM that a frame fulfils several different use cases:\r\n- tracebacks\r\n- debugging\r\n- introspection\r\n- profiling\r\n- tracing\r\n\r\nTracebacks are needed after the fact, when a function has terminated with an exception. That's costly anyway, and means that the last execution state can be filled in on exit, not on entry. That's what we currently do, and IMHO how it should be.\r\n\r\nDebugging is a special need that is not performance critical. Here, we can expect users to C-define a macro that compiles in code to reconfigure the frame on each … source code line or so. Apart from that, linking this to profiling and tracing seems reasonable.\r\n\r\nLive introspection – we've tied that to profiling support, which seems an acceptable trade-off (and can be enabled and disabled globally, as well as per function with a decorator).\r\n\r\nProfiling doesn't really need a frame, I'd say. Just something that identifies the current piece of code / function. That could be an entirely static thing.\r\n\r\nTracing consists of two parts then, the static profiling part and the current state of execution, especially the line number. Probably also introspection capabilities, but those could be compiled in explicitly, as noted above.\r\n\r\nSo … could we have an interface that keeps data in C data structures, static for the metadata (ok, possibly a Python object here), C stack allocated for the live state, and then creates frames only when requested / needed ?\r\n\r\nI mean, you're currently breaking extensions all over the place. Why not break the profiling / introspection tools and require them to call a \"get me the current frame\" function? Or, even better, any of several \"get me property X of the current execution state\" functions?",
            "created_at": "2021-11-30T08:52:57Z",
            "html_url": "https://github.com/cython/cython/issues/4484#issuecomment-982415901",
            "id": 982415901,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4484",
            "node_id": "IC_kwDOABDGAc46jnod",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/982415901/reactions"
            },
            "updated_at": "2021-11-30T08:52:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/982415901",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4484/comments",
    "created_at": "2021-11-26T16:41:15Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4484/events",
    "html_url": "https://github.com/cython/cython/issues/4484",
    "id": 1064685060,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4484/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc4_dc4E",
    "number": 4484,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4484/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4484/timeline",
    "title": "[ENH] If we provide a C-API for pushing and popping introspectable frames, will you use it?",
    "updated_at": "2021-11-30T08:52:57Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4484",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/markshannon",
        "id": 9448417,
        "login": "markshannon",
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/markshannon"
    }
}