{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\r\n\r\nIf a cpdef enum class is used as part of a fused type, functions using that fused type as an enum do not properly dispatch code paths at runtime.\r\n\r\n### Code to reproduce the behaviour:\r\n\r\nWe first need one file defining the fused type and associated function.\r\n```cython\r\n# declarations.pxd\r\n# distutils: language = c++\r\n\r\n# Note: Adding a base type for the enum that differs from the other fused types (e.g. libcpp.bool) does not solve the problem.\r\ncpdef enum class my_enum:\r\n    FOO\r\n    BAR\r\n\r\nctypedef fused my_fused:\r\n    int\r\n    my_enum\r\n\r\ncpdef void g(my_fused baz)\r\n\r\n# declarations.pyx\r\ncpdef void g(my_fused baz):\r\n    if my_fused is my_enum:\r\n        print(\"Got the enum\")\r\n    else:\r\n        print(\"Don't know what I am\")\r\n```\r\n\r\nIf we now try and use this in a pure Python context (no cdefing the variables holding enum values)\r\n```\r\n# definitions.pyx\r\nfrom declarations import g, my_enum\r\n\r\ndef h():\r\n    g(my_enum.FOO)\r\n\r\nh()\r\n```\r\n\r\nThen we see:\r\n```\r\n(main) dt08% python -c \"import definitions\"\r\nDon't know what I am\r\n```\r\n\r\nIf we instead called `g` with another type it did not understand, e.g. a string, we get a more reasonable runtime failure:\r\n```\r\n(main) dt08% python -c \"import definitions\"\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"definitions.pyx\", line 7, in init definitions\r\n    h()\r\n  File \"definitions.pyx\", line 5, in definitions.h\r\n    g('str')\r\n  File \"declarations.pyx\", line 1, in declarations.__pyx_fused_cpdef\r\n    cpdef void g(my_fused baz):\r\nTypeError: No matching signature found\r\n```\r\n\r\n\r\n### Expected behaviour\r\n\r\nIdeally the Cython enum should be properly understood as one of the overloaded types and have the correct enum selected at both compile-time and runtime. However, I think it would be a good starting point to at least make the runtime case error in a more predictable manner. The current behavior is potentially very confusing, seemingly undefined behavior from the caller's perspective.\r\n\r\nI don't know enough about how Cython handles fused types to be sure, but I suspect that properly enabling runtime translation of the Python wrapper enum down to the C++ enum is a bit tricky to handle since I imagine that Cython would want to do something smarter than check every PyObject input (what I assume it's seeing at runtime) against every known enum class type, and I don't know what information Cython has available to make a smarter decision.\r\n\r\n### OS\r\n\r\nLinux\r\n\r\n### Python version\r\n\r\n3.11.4\r\n\r\n### Cython version\r\n\r\n3.0.8\r\n\r\n### Additional context\r\n\r\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Yes I think this should work. I doubt it's actually too hard since it's just an isinstance check of the enum types in the fused type (i.e. the same as what we'd do if it was a `cdef class` in the fused type).\r\n\r\nThe only complication is that sometimes we can't import the enum type at runtime (for cpdef enum types defined in a pxd that doesn't have a matching pyx file)",
            "created_at": "2024-02-08T06:06:09Z",
            "html_url": "https://github.com/cython/cython/issues/5984#issuecomment-1933417426",
            "id": 1933417426,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5984",
            "node_id": "IC_kwDOABDGAc5zPZvS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1933417426/reactions"
            },
            "updated_at": "2024-02-08T06:06:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1933417426",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> for cpdef enum types defined in a pxd that doesn't have a matching pyx file\r\n\r\nI don't think this case should be an issue. If there's no pyx file then the Python will never be created so a user also wouldn't be able to instantiate it, right? So any internal check could just be ignored if the object in question didn't exist (I'm hand-waving through the internals since I don't know them!).",
            "created_at": "2024-02-09T00:39:00Z",
            "html_url": "https://github.com/cython/cython/issues/5984#issuecomment-1935150402",
            "id": 1935150402,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5984",
            "node_id": "IC_kwDOABDGAc5zWA1C",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1935150402/reactions"
            },
            "updated_at": "2024-02-09T00:39:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1935150402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5984/comments",
    "created_at": "2024-02-08T00:17:42Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5984/events",
    "html_url": "https://github.com/cython/cython/issues/5984",
    "id": 2124137411,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5984/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5-m8PD",
    "number": 5984,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5984/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5984/timeline",
    "title": "[BUG] Fused type inference does not handle cpdef enum class at runtime",
    "updated_at": "2024-02-09T00:39:01Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5984",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vyasr",
        "id": 1538165,
        "login": "vyasr",
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vyasr"
    }
}