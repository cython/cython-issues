{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "# Problem\r\n\r\nCython allows interfacing to combine c or cpp into a python-like language and produces highly optimized code. This greatly enhances the capability of python. Although the road cpp/c -> cython is well documented,  I would like to explore the reverse too. The documents allow describe that process of creating a header file from cython code, e.g.\r\n\r\n\r\n```cython\r\ncdef public double test(double x):\r\n  return x\r\n  ```\r\n  \r\n  produces the header with content\r\n  ```\r\n  [...]\r\n__PYX_EXTERN_C double test(double);\r\n```\r\n\r\nGreat! This exposes the function such that it can be used by c/cpp. However for classes it does not expose the methods only the properties. \r\n\r\nFor example\r\n\r\n```cython\r\n# file: test.pyx\r\ncdef public class Foo[object PyFoo, type PyFoo_t]:\r\n    cdef public double x\r\n    def __init__(self, double x):\r\n      self.x = x\r\n    cdef double test(self, double x):\r\n        return x\r\n```\r\n\r\ngenerates the following parts in the header\r\n\r\n```\r\n[...]\r\nstruct PyFoo {\r\n  PyObject_HEAD\r\n  struct __pyx_vtabstruct_4test_Foo *__pyx_vtab;\r\n  double x;\r\n};\r\n\r\n__PYX_EXTERN_C DL_IMPORT(PyTypeObject) PyFoo_t;\r\n``` \r\n\r\nI believe the function is not defined but put inside vtab. \r\n\r\n**Is there a way to access the function defined in the extension class directly?**\r\n\r\nThere is a way to explicitly write wrappers like \r\n\r\n```\r\ncdef double foo_test(& Foo foo, double x):\r\n    return foo.test(x)\r\n```\r\nwhich results in a function showing up in the header one could call. However this seems awfully verbose and increases complexity of larger projects. \r\n\r\n# Attempts\r\n\r\n```cpp\r\n// file test_foo.cpp\r\n#include \"test.h\"\r\nint main() {\r\n  auto x = 3.;\r\n  auto foo = PyFoo();\r\n  foo->__pyx_vtab->test(x);  //errors\r\n  foo->test(x); // errors\r\n}\r\n```\r\n\r\n\r\n\r\n",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4229/comments",
    "created_at": "2021-06-16T08:52:17Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4229/events",
    "html_url": "https://github.com/cython/cython/issues/4229",
    "id": 922334202,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4229/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5MjIzMzQyMDI=",
    "number": 4229,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[ENH] Expose cython extensions to cpp/c",
    "updated_at": "2021-06-16T08:53:40Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4229",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/19485143?v=4",
        "events_url": "https://api.github.com/users/cvanelteren/events{/privacy}",
        "followers_url": "https://api.github.com/users/cvanelteren/followers",
        "following_url": "https://api.github.com/users/cvanelteren/following{/other_user}",
        "gists_url": "https://api.github.com/users/cvanelteren/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/cvanelteren",
        "id": 19485143,
        "login": "cvanelteren",
        "node_id": "MDQ6VXNlcjE5NDg1MTQz",
        "organizations_url": "https://api.github.com/users/cvanelteren/orgs",
        "received_events_url": "https://api.github.com/users/cvanelteren/received_events",
        "repos_url": "https://api.github.com/users/cvanelteren/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/cvanelteren/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cvanelteren/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/cvanelteren"
    }
}