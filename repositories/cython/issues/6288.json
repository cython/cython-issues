{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\r\n\r\nNormally statements such as `x in (1, 2, 3)` are optimized to not use python functions, however `x in ()` will result in the generation of calls to python functions.\r\n\r\n### Code to reproduce the behaviour:\r\n\r\n```cython\r\nctypedef enum node_type:\r\n    NODE_NULL,\r\n    NODE_CONSTANT,\r\n    NODE_TRANSMIT,\r\n    NODE_SUM,\r\n    NODE_ACTIVATE,\r\n    NODE_BLEND,\r\n    NODE_MULTIPLY,\r\n    NODE_MODULO,\r\n    NODE_BOOL,\r\n    NODE_INVERSE,\r\n    NODE_SIN,\r\n    NODE_SQRT,\r\n    NODE_LOW_POW,\r\n    NODE_SQUARE,\r\n    NODE_INPUT,\r\n    NODE_OUTPUT\r\n\r\nctypedef enum slot_type:\r\n    SLOT_NULL,\r\n    SLOT_FLOAT,\r\n    SLOT_BOOL\r\n\r\ncdef inline slot_type get_node_input_type(node_type node_type, slot_type type_) noexcept:\r\n    if ((node_type) in (NODE_CONSTANT, NODE_TRANSMIT, NODE_BLEND, NODE_INPUT)):\r\n        return type_\r\n    elif ((node_type) in (NODE_SUM, NODE_ACTIVATE, NODE_MULTIPLY, NODE_MODULO, NODE_INVERSE, NODE_SIN, NODE_SQRT, NODE_LOW_POW, NODE_SQUARE, NODE_BOOL)):\r\n        return SLOT_FLOAT\r\n    elif ((node_type) in ()):\r\n        return SLOT_BOOL\r\n\r\n    return SLOT_NULL\r\n```\r\n\r\n\r\n### Expected behaviour\r\n\r\nThey should be optimized into C switch statements.\r\n\r\n### OS\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.8.3\r\n\r\n### Cython version\r\n\r\n3.0.10\r\n\r\n### Additional context\r\n\r\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This is explicitly excluded from the optimisation, considering it's an unlikely thing to find in real code.\r\nhttps://github.com/cython/cython/blob/746627fdca5e48db2b63c8bb4be82b33ea617549/Cython/Compiler/Optimize.py#L1423-L1425\r\n\r\nThe problem is that `node_type in ()` is simple, but `calculate_node_type() in ()` or even `(node_type := calculate_node_type()) in ()` is not. Thus, we'd have to invest some non-trivial investigations into figuring out whether we can drop the condition entirely or not, and that seems useless for this kind of code.\r\n\r\nIs this `x in ()` something that actually appears in your (generated?) code?",
            "created_at": "2024-07-16T12:53:26Z",
            "html_url": "https://github.com/cython/cython/issues/6288#issuecomment-2230817619",
            "id": 2230817619,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6288",
            "node_id": "IC_kwDOABDGAc6E95NT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2230817619/reactions"
            },
            "updated_at": "2024-07-16T12:53:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2230817619",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Is this `x in ()` something that actually appears in your (generated?) code?\r\n\r\nYes, I use macros.",
            "created_at": "2024-07-16T17:41:02Z",
            "html_url": "https://github.com/cython/cython/issues/6288#issuecomment-2231472163",
            "id": 2231472163,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6288",
            "node_id": "IC_kwDOABDGAc6FAZAj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2231472163/reactions"
            },
            "updated_at": "2024-07-16T17:41:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2231472163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
                "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
                "followers_url": "https://api.github.com/users/bbb23exposed/followers",
                "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
                "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bbb23exposed",
                "id": 138492675,
                "login": "bbb23exposed",
                "node_id": "U_kgDOCEE7Aw",
                "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
                "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
                "repos_url": "https://api.github.com/users/bbb23exposed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bbb23exposed"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I use macros.\r\n\r\nCould you give a (realistic) example of how you use this? I'd like to understand if this is something worth working on.",
            "created_at": "2024-07-16T19:57:40Z",
            "html_url": "https://github.com/cython/cython/issues/6288#issuecomment-2231725899",
            "id": 2231725899,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6288",
            "node_id": "IC_kwDOABDGAc6FBW9L",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2231725899/reactions"
            },
            "updated_at": "2024-07-16T19:57:40Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2231725899",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "I have Nodes that input and output Slots. To reduce code duplication and increase extensibility, I have macros defined that can check commonly used properties about nodes inferred from theirs types. Somes of these macros use tuples of Node types. To increase extensibility, these tuples are defined as separate macros than the checks which they are included in so they can be used in other context (e.g. iterating over a list of types that meet the requirement).\r\n\r\nSome of these requirements don't have any nodes that match them or exclude them but may in the future, so they are defined as empty tuples.",
            "created_at": "2024-07-16T20:20:16Z",
            "html_url": "https://github.com/cython/cython/issues/6288#issuecomment-2231760477",
            "id": 2231760477,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6288",
            "node_id": "IC_kwDOABDGAc6FBfZd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2231760477/reactions"
            },
            "updated_at": "2024-07-16T20:20:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2231760477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
                "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
                "followers_url": "https://api.github.com/users/bbb23exposed/followers",
                "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
                "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bbb23exposed",
                "id": 138492675,
                "login": "bbb23exposed",
                "node_id": "U_kgDOCEE7Aw",
                "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
                "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
                "repos_url": "https://api.github.com/users/bbb23exposed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bbb23exposed"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Still not sure what you mean by \"macros\".\r\n\r\nHowever, I doubt that `variable in ()` takes any serious amount of time. `variable` and `()` are constants that do not need any time to look up, then `whatever in ()` is really just jumping through a few pointers and returning `0` without doing anything worth noting. Arguably, the C compiler cannot optimise that away, so it *is* doing something at runtime, but that \"something\" is really, really cheap, especially when executed several times. If you can motivate that this consumes a non-negligible amount of time in your code, we may consider adding special cases for this, but I doubt that you'll find this being a bottleneck.",
            "created_at": "2024-07-16T21:14:13Z",
            "html_url": "https://github.com/cython/cython/issues/6288#issuecomment-2231839614",
            "id": 2231839614,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6288",
            "node_id": "IC_kwDOABDGAc6FByt-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2231839614/reactions"
            },
            "updated_at": "2024-07-16T21:14:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2231839614",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Still not sure what you mean by \"macros\".\r\n\r\nI use the C processor on my code.\r\n\r\n> However, I doubt that `variable in ()` takes any serious amount of time. `variable` and `()` are constants that do not need any time to look up, then `whatever in ()` is really just jumping through a few pointers and returning `0` without doing anything worth noting. Arguably, the C compiler cannot optimise that away, so it _is_ doing something at runtime, but that \"something\" is really, really cheap, especially when executed several times. If you can motivate that this consumes a non-negligible amount of time in your code, we may consider adding special cases for this, but I doubt that you'll find this being a bottleneck.\r\n\r\nI don't know how much a performance hit it is. It probably isn't much, but the code is very optimized and the function is called a lot. Plus, the perfectionist in me gets annoyed seeing a yellow line in a sea of white.\r\n\r\nForgive me since I don't know much about Cython's internal architecture, but if the problem is that the lhs could have side-effects, then why don't the non-empty arrays have the same issue? None of my lhs's have side effects, but only the one with the empty tuple causes the issue.\r\n",
            "created_at": "2024-07-17T03:02:41Z",
            "html_url": "https://github.com/cython/cython/issues/6288#issuecomment-2232276039",
            "id": 2232276039,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6288",
            "node_id": "IC_kwDOABDGAc6FDdRH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2232276039/reactions"
            },
            "updated_at": "2024-07-17T03:02:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2232276039",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
                "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
                "followers_url": "https://api.github.com/users/bbb23exposed/followers",
                "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
                "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bbb23exposed",
                "id": 138492675,
                "login": "bbb23exposed",
                "node_id": "U_kgDOCEE7Aw",
                "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
                "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
                "repos_url": "https://api.github.com/users/bbb23exposed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bbb23exposed"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6288/comments",
    "created_at": "2024-07-15T00:59:56Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "166a39be16718b9eb13d51c5940db6674dad7a14",
            "commit_url": "https://api.github.com/repos/scoder/cython/commits/166a39be16718b9eb13d51c5940db6674dad7a14",
            "created_at": "2024-07-17T10:05:06Z",
            "event": "referenced",
            "id": 13534200797,
            "node_id": "REFE_lADOABDGAc6Pgl3rzwAAAAMms4Pd",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13534200797"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "2b13e678f1b44812323643e25f6e6589a038db72",
            "commit_url": "https://api.github.com/repos/scoder/cython/commits/2b13e678f1b44812323643e25f6e6589a038db72",
            "created_at": "2024-07-17T10:15:48Z",
            "event": "referenced",
            "id": 13534328251,
            "node_id": "REFE_lADOABDGAc6Pgl3rzwAAAAMmtXW7",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13534328251"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6288/events",
    "html_url": "https://github.com/cython/cython/issues/6288",
    "id": 2407685611,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6288/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6Pgl3r",
    "number": 6288,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6288/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6288/timeline",
    "title": "[BUG] Empty tuples aren't optimized in conditional statements",
    "updated_at": "2024-07-17T03:02:43Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6288",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
        "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
        "followers_url": "https://api.github.com/users/bbb23exposed/followers",
        "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
        "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/bbb23exposed",
        "id": 138492675,
        "login": "bbb23exposed",
        "node_id": "U_kgDOCEE7Aw",
        "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
        "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
        "repos_url": "https://api.github.com/users/bbb23exposed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/bbb23exposed"
    }
}