{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I'm getting very bad overheads when passing Python objects to `cpdef` functions with `ctypedef fused` arguments from within the Python interpreter.\r\n\r\nSome level of overhead is to be expected and probably inevitable, but with arguments typed as fused types, **the extra latency is multiple orders of magnitude greater than the latency I get even when checking the types manually in Python**.\r\n\r\nIt's sufficient that in any small-to-medium sized function, **the majority of the execution time just gets eaten up by the fused type dispatching**.\r\n\r\n### Demonstration code:\r\n\r\n**fusedtest.py**\r\n```python3\r\n# distutils: language = c++\r\nimport cython\r\n\r\ndef no_overhead(var):\r\n\t# ~55ns\r\n\treturn 0\r\n\r\ndef py_overhead(var):\r\n\t# ~60ns\r\n\tif isinstance(var, float):\r\n\t\ta = var\r\n\t\treturn 0\r\n\telif isinstance(var, int):\r\n\t\tb = var\r\n\t\treturn 0\r\n\r\ndef fused_type_overhead(var):\r\n\t# ~370ns\r\n\treturn 0\r\n\r\ndef fused_type_staticwrapped(var):\r\n\t# ~65ns\r\n\tif isinstance(var, float):\r\n\t\ta = var\r\n\t\treturn fused_type_overhead(a)\r\n\telif isinstance(var, int):\r\n\t\tb = var\r\n\t\treturn fused_type_overhead(b)\r\n```\r\n\r\n**fusedtest.pxd**\r\n```Cython\r\n# distutils: language = c++\r\nimport cython\r\n\r\nctypedef fused fused_type_ohtest:\r\n\tdouble\r\n\tint\r\n\r\ncpdef bint no_overhead(double var)\r\n\r\n@cython.locals(a=cython.double, b=cython.int)\r\ncpdef bint py_overhead(var)\r\n\r\ncpdef bint fused_type_overhead(fused_type_ohtest var)\r\n\r\n@cython.locals(a=cython.double, b=cython.int)\r\ncpdef bint fused_type_staticwrapped(var)\r\n```\r\n\r\n### `timeit` results:\r\n\r\n```python3\r\n>>> min(timeit.repeat(stmt='vecdev.no_overhead(a)', setup='a=5.0', globals=globals(), repeat=1000, number=1000))\r\n5.775999989054981e-05\r\n\r\n>>> min(timeit.repeat(stmt='vecdev.py_overhead(a)', setup='a=5.0', globals=globals(), repeat=1000, number=1000))\r\n6.097899995438638e-05\r\n\r\n>>> min(timeit.repeat(stmt='vecdev.fused_type_overhead(a)', setup='a=5.0', globals=globals(), repeat=1000, number=1000))\r\n0.000368557999991026\r\n\r\n>>> min(timeit.repeat(stmt='vecdev.fused_type_staticwrapped(a)', setup='a=5.0', globals=globals(), repeat=1000, number=1000))\r\n6.318700002339028e-05\r\n```\r\n\r\n---\r\n\r\nI don't know nearly enough C++ or enough about the CPython API to say whether this is a valid and actionable issue on technical grounds, and I do understand that there must be some degree of overhead when inspecting the types of generic Python objects in order to choose a C/C++ specialization.\r\n\r\nBut as a user, I do think that this behaviour creates at least three separate problems on practical grounds:\r\n\r\n1. **Direct performance impact:** As an example, I have a simple utility function in a library that accepts two arrays as arguments and returns a new array from the component-wise sums of the two input arrays. I wished to be able to have it accept multiple types of arrays and numeric types as arguments, so I set its arguments as fused types without yet modifying any parts of its code. Before using fused types, its performance was about on par with Numpy, taking about 1μs to sum two arrays of 1,000 `double`s. Just by using fused types, it instead takes 3μs to do the same. `cProfile.run()` seems to confirm that the extra time is spent in `myfile.py:427(__pyx_fuse_0_0my_func)`. In an Python program relying heavily on this function, **fully two thirds of the execution time would be taken up just by the fused type dispatcher**.\r\n\r\n2. **Breaking convention of parity with pure Python:** When using Cython, partly because it just falls back on CPython calls by default, I at least find it easy to assume that compiled functions will perform generally at least approximately as well as their uncompiled Python equivalents. I know that unnecessarily typing other variables does sometimes add overhead as well due to the type checking— but in most cases, as long as the typing is done in a way that makes sense in that it serves the code's intended functionality, it seems safe to assume that your program code will only speed up, or at the very worst, stay about the same. I think the fact that it's relatively easy to gain performance and very hard to lose performance is a big part of why Cython's such a useful tool. **In this case, however, the automatically generated type checking code for fused types is slower than the naïve Python approach (using `isinstance()`) by about a factor of 100x.**\r\n\r\n3. **Incentivisation of superfluous code:** Because the naïve Python approach using `isinstance()` introduces about a hundred times less overhead than using fused types, **the optimal approach for getting performance from functions when called from both Cython and Python seems to be to define a `cdef` function using fused types that can be specialized at compile time for in-Cython calls, and then manually write a separate `cpdef` wrapper for it that does its own type checking with `isinstance()` when called from regular Python**, like `fused_type_staticwrapped()` above. In addition to being generally messy, this introduces manually written code that should be superfluous given the automatic specialization and dispatch feature, and makes maintenance a bit painful. Aside from the direct impact, the performance dynamics thus also incentivise writing redundant and messy code.",
    "closed_at": "2020-02-14T07:31:47Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks for the detailed report, but it's a known issue. See #1385.",
            "created_at": "2020-02-14T07:31:47Z",
            "html_url": "https://github.com/cython/cython/issues/3356#issuecomment-586134336",
            "id": 586134336,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3356",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjEzNDMzNg==",
            "updated_at": "2020-02-14T07:31:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/586134336",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Help welcome, BTW. It's probably not difficult to implement, but no-one has done it so far.",
            "created_at": "2020-02-14T07:33:24Z",
            "html_url": "https://github.com/cython/cython/issues/3356#issuecomment-586134821",
            "id": 586134821,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3356",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjEzNDgyMQ==",
            "updated_at": "2020-02-14T07:33:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/586134821",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3356/comments",
    "created_at": "2020-02-13T22:21:35Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-02-14T07:31:47Z",
            "event": "closed",
            "id": 3037725217,
            "node_id": "MDExOkNsb3NlZEV2ZW50MzAzNzcyNTIxNw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3037725217"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-02-14T07:31:57Z",
            "event": "labeled",
            "id": 3037725560,
            "label": {
                "color": "444444",
                "name": "R: duplicate"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMwMzc3MjU1NjA=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3037725560"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3356/events",
    "html_url": "https://github.com/cython/cython/issues/3356",
    "id": 564985171,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556894,
            "name": "R: duplicate",
            "node_id": "MDU6TGFiZWw0MjU1NTY4OTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/R:%20duplicate"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3356/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NjQ5ODUxNzE=",
    "number": 3356,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Counterintuitive and quite bad overhead for `cpdef` functions with fused types?",
    "updated_at": "2020-02-14T07:33:24Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3356",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/37680486?v=4",
        "events_url": "https://api.github.com/users/will-ca/events{/privacy}",
        "followers_url": "https://api.github.com/users/will-ca/followers",
        "following_url": "https://api.github.com/users/will-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/will-ca/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/will-ca",
        "id": 37680486,
        "login": "will-ca",
        "node_id": "MDQ6VXNlcjM3NjgwNDg2",
        "organizations_url": "https://api.github.com/users/will-ca/orgs",
        "received_events_url": "https://api.github.com/users/will-ca/received_events",
        "repos_url": "https://api.github.com/users/will-ca/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/will-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/will-ca/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/will-ca"
    }
}