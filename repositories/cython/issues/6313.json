{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Describe your issue\n\nI would quite like to support ufuncs with closures:\r\n\r\n```cython\r\ndef f(a):\r\n    @cython.ufunc\r\n    cdef double inner(double b):\r\n        return a+b\r\n```\r\n\r\nin this case the Numpy broadcasting would only work on `b` and not `a`.\r\n\r\n-------------------------------------\r\n\r\nA possible linked feature could be \"bound ufuncs\" which could behave something like\r\n\r\n```cython\r\nclass C:  # support both cdef and regular classes?\r\n    @cython.ufunc\r\n    cdef double f(self, double a):\r\n        return self.attr + a\r\n\r\n   # translates to something like\r\n   @property\r\n   def f(self):\r\n       @cython.ufunc\r\n       cdef double inner(double a):\r\n           return self.attr + b\r\n        return inner\r\n```\r\n\r\nI think that should be implemented separately though\r\n\r\n------------------------------------------------------------------------------------\r\n\r\nI think step 1 to implementing it would be to allow inner cfuncs\r\n\r\n```cython\r\n\r\ndef f(a):\r\n   cdef double inner(double b):\r\n       return a+b\r\n   return f(10)\r\n```\r\n\r\nMy proposal there would be that they'd only be callable in their enclosing scope and thus they don't \"capture\" anything, and that it wouldn't be possible to get a function pointer to them (because the signature would necessarily be changed to add the closure parameter of unknown type).\r\n\r\nThat's potentially a nice feature on its own - while we are able to inline calls to regular def functions created this way, there's overhead creating the function and the return type is forced to be an `object`.\r\n\r\nStep 2 would then be just to attach the captured scope to a Numpy `ufunc`. The structure of `ufunc` has an owned object attribute for this purpose (although it isn't accessible via a public API). The ufunc signature also has a `void*` parameter for arbitrary captured data.\r\n\r\n(I haven't done anything on this at all, just think it'd make ufuncs more flexible)",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6313/comments",
    "created_at": "2024-07-30T07:29:57Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6313/events",
    "html_url": "https://github.com/cython/cython/issues/6313",
    "id": 2437114629,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6313/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6RQ2sF",
    "number": 6313,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6313/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6313/timeline",
    "title": "[ENH] ufunc with closures",
    "updated_at": "2024-07-30T07:29:57Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6313",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}