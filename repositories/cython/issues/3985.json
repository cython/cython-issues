{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!--\r\n**Note:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report. Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\nI'd like to make a Cython backend for [the Spiral language](https://github.com/mrakgr/The-Spiral-Language), and the fact that Python objects cannot be composed with C types is taking a lot of value as a compilation target from it. Is doing this on the roadmap for Cython?",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "Ok, maybe not undiscriminated unions like the ones C has. The memory management would not be able to deal with those.",
            "created_at": "2021-01-25T18:25:57Z",
            "html_url": "https://github.com/cython/cython/issues/3985#issuecomment-767019338",
            "id": 767019338,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3985",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2NzAxOTMzOA==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-25T18:25:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/767019338",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
                "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrakgr/followers",
                "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrakgr",
                "id": 6266635,
                "login": "mrakgr",
                "node_id": "MDQ6VXNlcjYyNjY2MzU=",
                "organizations_url": "https://api.github.com/users/mrakgr/orgs",
                "received_events_url": "https://api.github.com/users/mrakgr/received_events",
                "repos_url": "https://api.github.com/users/mrakgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrakgr"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "My feeling is:\r\n\r\n* C-tuples should probably be able to contain Python types eventually (because they should be usable in most of the same ways as Python tuples). It probably wouldn't be too difficult to implement with https://github.com/cython/cython/pull/3377, although I don't know if it's top of anyone's priorities. Counter-intuitively it might end up having worse performance than a normal Python tuple because a copy would need to increment every object in the tuple, rather than just the tuple.\r\n* Structs I think are unlikely. It would have the potential to be a reference counting nightmare. Remember that you can pass structs by pointer or by value in C, and to external functions that Cython can't control. It isn't obvious that there's a \"right thing to do\" with reference-counting that covers all use cases.\r\n* C Unions (as you point out) would be a guaranteed reference counting disaster.\r\n\r\n---------------------\r\n\r\nYour options for workarounds would be:\r\n\r\n1. Write the struct with `PyObject*` (`cimport` from `cpython`). You can cast a Cython-managed object to a `PyObject*` with `<PyObject*>obj`. If you do this you must handle any necessary reference counting yourself.\r\n2. Use a `cdef class` instead, which can contain a mixture of Python and C attributes, and can be made [made public](https://cython.readthedocs.io/en/latest/src/userguide/extension_types.html#public-and-external-extension-types) to give C code access to their underlying struct representation.",
            "created_at": "2021-01-25T18:58:38Z",
            "html_url": "https://github.com/cython/cython/issues/3985#issuecomment-767039082",
            "id": 767039082,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3985",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2NzAzOTA4Mg==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-25T19:01:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/767039082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Structs I think are unlikely. It would have the potential to be a reference counting nightmare. Remember that you can pass structs by pointer or by value in C, and to external functions that Cython can't control.\r\n\r\nWouldn't the same apply to tuples as well then? To my mind, there isn't much difference between passing a struct (or a tuple) to an external function, and passing its values separately. I'd think of that as being functionally equivalent.",
            "created_at": "2021-01-25T19:17:49Z",
            "html_url": "https://github.com/cython/cython/issues/3985#issuecomment-767050232",
            "id": 767050232,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3985",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2NzA1MDIzMg==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-25T19:19:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/767050232",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
                "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrakgr/followers",
                "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrakgr",
                "id": 6266635,
                "login": "mrakgr",
                "node_id": "MDQ6VXNlcjYyNjY2MzU=",
                "organizations_url": "https://api.github.com/users/mrakgr/orgs",
                "received_events_url": "https://api.github.com/users/mrakgr/received_events",
                "repos_url": "https://api.github.com/users/mrakgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrakgr"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "C tuples don't (I think) have a public-facing C interface. For example\r\n\r\n```\r\ncdef public void f((int, float) x):\r\n    pass\r\n```\r\n\r\nsays `Function declared public or api may not have private types`. So they can only be passed within Cython code in ways that Cython controls and thus it should be very difficult to do anything unexpected with them. Obviously what Cython calls a C-tuple ends up implemented as a C-struct but an internal detail.",
            "created_at": "2021-01-25T19:24:06Z",
            "html_url": "https://github.com/cython/cython/issues/3985#issuecomment-767054288",
            "id": 767054288,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3985",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2NzA1NDI4OA==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-25T19:24:06Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/767054288",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Well, stack tuples being able to compose with objects has my vote. In the F# backend, I compile both Spiral's records and tuples to them. They are easier to deal with than structs anyway and would be enough to satisfy me.",
            "created_at": "2021-01-25T20:15:41Z",
            "html_url": "https://github.com/cython/cython/issues/3985#issuecomment-767085444",
            "id": 767085444,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3985",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2NzA4NTQ0NA==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-25T20:15:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/767085444",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
                "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrakgr/followers",
                "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrakgr",
                "id": 6266635,
                "login": "mrakgr",
                "node_id": "MDQ6VXNlcjYyNjY2MzU=",
                "organizations_url": "https://api.github.com/users/mrakgr/orgs",
                "received_events_url": "https://api.github.com/users/mrakgr/received_events",
                "repos_url": "https://api.github.com/users/mrakgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrakgr"
            }
        },
        {
            "author_association": "NONE",
            "body": "Right now Spiral's Cython is in an usable state, and this feature request is my most wanted on the Spiral wishlist. Here is the background on why that is.\r\n\r\n```\r\ninl main() =\r\n    inl x : i32 * i32 = if dyn true then 1,2 else 3,4\r\n    ()\r\n```\r\n```\r\ncpdef void main():\r\n    cdef char v0\r\n    cdef signed long v1\r\n    cdef signed long v2\r\n    v0 = 1\r\n    if v0:\r\n        v1, v2 = 1, 2\r\n    else:\r\n        v1, v2 = 3, 4\r\n```\r\n\r\nThings are bearable when tuple values are returned in scope like in the above example, but when returned from join points, I have no choice but to use cdef classes to pass them around. This would entail them being heap allocated.\r\n\r\n```\r\ninl main() =\r\n    inl x : i32 * i32 = join if dyn true then 1,2 else 3,4\r\n    ()\r\n```\r\n```\r\ncdef class Tuple0:\r\n    cdef readonly signed long v0\r\n    cdef readonly signed long v1\r\n    def __init__(self, signed long v0, signed long v1): self.v0 = v0; self.v1 = v1\r\ncdef Tuple0 method0():\r\n    cdef char v0\r\n    v0 = 1\r\n    if v0:\r\n        return Tuple0(1, 2)\r\n    else:\r\n        return Tuple0(3, 4)\r\ncpdef void main():\r\n    cdef signed long v0\r\n    cdef signed long v1\r\n    cdef Tuple0 tmp0\r\n    tmp0 = method0()\r\n    v0, v1 = tmp0.v0, tmp0.v1\r\n```\r\n\r\nIdeally, tuples should always be stack allocated. This is the case in the F# backend where I can compile them to struct tuples, but not in Cython. In the F# backend, tuple's allocation pattern is perfectly predicable, but in Cython it depends on the circumstance.\r\n\r\nFurthermore, there isn't actually any advantage to using heap tuples in Spiral as they will immediately be destructured after being returned. The backend is just taking a detour through the heap for no reason right now.",
            "created_at": "2021-01-29T14:27:28Z",
            "html_url": "https://github.com/cython/cython/issues/3985#issuecomment-769836706",
            "id": 769836706,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3985",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTgzNjcwNg==",
            "performed_via_github_app": null,
            "updated_at": "2021-01-29T14:27:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/769836706",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
                "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrakgr/followers",
                "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrakgr",
                "id": 6266635,
                "login": "mrakgr",
                "node_id": "MDQ6VXNlcjYyNjY2MzU=",
                "organizations_url": "https://api.github.com/users/mrakgr/orgs",
                "received_events_url": "https://api.github.com/users/mrakgr/received_events",
                "repos_url": "https://api.github.com/users/mrakgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrakgr"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3985/comments",
    "created_at": "2021-01-25T16:32:09Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
                "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrakgr/followers",
                "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrakgr",
                "id": 6266635,
                "login": "mrakgr",
                "node_id": "MDQ6VXNlcjYyNjY2MzU=",
                "organizations_url": "https://api.github.com/users/mrakgr/orgs",
                "received_events_url": "https://api.github.com/users/mrakgr/received_events",
                "repos_url": "https://api.github.com/users/mrakgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrakgr"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-01-25T18:24:31Z",
            "event": "renamed",
            "id": 4247068918,
            "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDI0NzA2ODkxOA==",
            "performed_via_github_app": null,
            "rename": {
                "from": "[ENH] Support Python objects in cdef structs, unions and tuples",
                "to": "[ENH] Support Python objects in cdef structs and tuples"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/4247068918"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
                "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrakgr/followers",
                "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrakgr",
                "id": 6266635,
                "login": "mrakgr",
                "node_id": "MDQ6VXNlcjYyNjY2MzU=",
                "organizations_url": "https://api.github.com/users/mrakgr/orgs",
                "received_events_url": "https://api.github.com/users/mrakgr/received_events",
                "repos_url": "https://api.github.com/users/mrakgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrakgr"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-01-29T14:12:48Z",
            "event": "renamed",
            "id": 4266355496,
            "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDI2NjM1NTQ5Ng==",
            "performed_via_github_app": null,
            "rename": {
                "from": "[ENH] Support Python objects in cdef structs and tuples",
                "to": "[ENH] Support Python objects in cdef tuples"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/4266355496"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3985/events",
    "html_url": "https://github.com/cython/cython/issues/3985",
    "id": 793531341,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3985/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU3OTM1MzEzNDE=",
    "number": 3985,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[ENH] Support Python objects in cdef tuples",
    "updated_at": "2021-01-29T14:27:28Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3985",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/6266635?v=4",
        "events_url": "https://api.github.com/users/mrakgr/events{/privacy}",
        "followers_url": "https://api.github.com/users/mrakgr/followers",
        "following_url": "https://api.github.com/users/mrakgr/following{/other_user}",
        "gists_url": "https://api.github.com/users/mrakgr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mrakgr",
        "id": 6266635,
        "login": "mrakgr",
        "node_id": "MDQ6VXNlcjYyNjY2MzU=",
        "organizations_url": "https://api.github.com/users/mrakgr/orgs",
        "received_events_url": "https://api.github.com/users/mrakgr/received_events",
        "repos_url": "https://api.github.com/users/mrakgr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mrakgr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mrakgr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mrakgr"
    }
}