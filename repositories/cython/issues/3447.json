{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I'm trying to write a custom collection class, and am struggling to write an iterator that is competitive with the iterator of a built-in tuple.\r\n\r\nThe benchmark:\r\n```\r\ntimeit.timeit(lambda: sum(1 for my_tuple in iter_tuples() for item in my_tuple))\r\n```\r\nPreviously `iter_tuples()` was yielding built-in tuples of varying lengths (but usually short: 90% of tuples have length 3 or less).\r\nNow I'm trying to use my own `cdef class` for the tuples, but I can't get this benchmark anywhere near the original performance.\r\n\r\nIf my collection class uses `yield` inside its `__iter__` method, that results in code 30% slower than the built-in tuple.\r\nIf my collection class uses a custom `cdef class` for the iterator, that results in code 50% slower than the built-in tuple.\r\n\r\n```\r\n@cython.final\r\n@cython.freelist(4)\r\ncdef class NodeTupleIterator:\r\n    cdef NodeTuple _c\r\n    cdef size_t _index\r\n\r\n    def __cinit__(self, NodeTuple c not None):\r\n        self._c = c\r\n\r\n    def __iter__(self):\r\n        return self\r\n\r\n    def __next__(self):\r\n        if self._index == self._tuple._size:\r\n            raise StopIteration\r\n        node = self._c._get(self._index)\r\n        self._index += 1\r\n        return node\r\n\r\n    def __length_hint__(self):\r\n        return self._c._size - self._index\r\n```\r\nProfiling shows that `__next__` spends 33% of its time in `__Pyx_Raise` and another 40% in `__Pyx_Add_Traceback`.\r\nBut none of that is necessary. On the C level, `tp_iternext` can indicate the end of iteration by simply returning `NULL` without setting any exception.\r\nIs this somehow possible from Cython? Should Cython optimize a `raise StopIteration` within `__next__` methods that way?\r\n\r\nCurrently it seems like my only solution is to avoid Cython for the iterator class :(\r\n\r\nBy the way, I've verified that the benchmark with the builtin tuple actually calls `tupleiter_next`. There doesn't seem to be any special case that gives builtin tuples an inherent advantage; the problem just seems to be the overhead of Cython generator machinery (for `yield`) or exception-handling machinery (for `__next__`).",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "With hand-written C code for the iterator class, I end up 5% faster than the builtin tuple.",
            "created_at": "2020-03-19T14:29:07Z",
            "html_url": "https://github.com/cython/cython/issues/3447#issuecomment-601210522",
            "id": 601210522,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3447",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTIxMDUyMg==",
            "updated_at": "2020-03-19T14:29:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/601210522",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/243140?v=4",
                "events_url": "https://api.github.com/users/dgrunwald/events{/privacy}",
                "followers_url": "https://api.github.com/users/dgrunwald/followers",
                "following_url": "https://api.github.com/users/dgrunwald/following{/other_user}",
                "gists_url": "https://api.github.com/users/dgrunwald/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dgrunwald",
                "id": 243140,
                "login": "dgrunwald",
                "node_id": "MDQ6VXNlcjI0MzE0MA==",
                "organizations_url": "https://api.github.com/users/dgrunwald/orgs",
                "received_events_url": "https://api.github.com/users/dgrunwald/received_events",
                "repos_url": "https://api.github.com/users/dgrunwald/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dgrunwald/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dgrunwald/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dgrunwald"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Have you tried a generator function?",
            "created_at": "2020-03-20T13:16:36Z",
            "html_url": "https://github.com/cython/cython/issues/3447#issuecomment-601694997",
            "id": 601694997,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3447",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTY5NDk5Nw==",
            "updated_at": "2020-03-20T13:16:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/601694997",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "I've created a standalone benchmark and attached it: [cython-bench.zip](https://github.com/cython/cython/files/4361229/cython-bench.zip)\r\n\r\nNo matter which Python way of writing an iterator I try, it's significantly slower than a builtin tuple.\r\n```\r\nBuiltin Tuples: 100 loops, best of 5: 1.06 msec per loop\r\nNodeTuple: 100 loops, best of 5: 2.7 msec per loop\r\nYieldingNodeTuple: 100 loops, best of 5: 1.75 msec per loop\r\nGenExprNodeTuple: 100 loops, best of 5: 1.88 msec per loop\r\n```\r\nWith a tiny edit to the Cython-generated code, the NodeTupleIterator class wins over the other approaches:\r\n```\r\nNodeTuple (hand edited __next__): 100 loops, best of 5: 1.34 msec per loop\r\n```",
            "created_at": "2020-03-20T18:13:55Z",
            "html_url": "https://github.com/cython/cython/issues/3447#issuecomment-601843232",
            "id": 601843232,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3447",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTg0MzIzMg==",
            "updated_at": "2020-03-20T18:13:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/601843232",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/243140?v=4",
                "events_url": "https://api.github.com/users/dgrunwald/events{/privacy}",
                "followers_url": "https://api.github.com/users/dgrunwald/followers",
                "following_url": "https://api.github.com/users/dgrunwald/following{/other_user}",
                "gists_url": "https://api.github.com/users/dgrunwald/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dgrunwald",
                "id": 243140,
                "login": "dgrunwald",
                "node_id": "MDQ6VXNlcjI0MzE0MA==",
                "organizations_url": "https://api.github.com/users/dgrunwald/orgs",
                "received_events_url": "https://api.github.com/users/dgrunwald/received_events",
                "repos_url": "https://api.github.com/users/dgrunwald/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dgrunwald/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dgrunwald/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dgrunwald"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I faintly recall that there was a reason why we needed the `StopIteration` exception at the end of the generator, but I don't remember which. Some Python compatibility issue, I think. Might be worth trying again, much or that code is about a decade old or so.\r\n\r\nFeel free to play around with it and try to tune it. Some C level profiling might yield different results these days than back then. Have a look at `GeneratorBodyDefNode`. It might also be possible to special-case `raise StopIteration` inside of an `__iter__()` `DefNode`.",
            "created_at": "2020-03-21T09:46:34Z",
            "html_url": "https://github.com/cython/cython/issues/3447#issuecomment-602020628",
            "id": 602020628,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3447",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjAyMDYyOA==",
            "updated_at": "2020-03-21T09:46:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/602020628",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I faintly recall that there was a reason why we needed the StopIteration exception at the end of the generator, but I don't remember which. Some Python compatibility issue, I think.\r\n\r\nThe iterators for builtin tuples/lists only returns `NULL` without setting an exception. This was already the case in Python 2.7.0; so all `tp_iternext` users should be able to handle this case.\r\nBut maybe Cython sometimes generates direct calls to the `__next__` method without going through the usual logic for calling `tp_iternext`?",
            "created_at": "2020-03-21T15:10:21Z",
            "html_url": "https://github.com/cython/cython/issues/3447#issuecomment-602058240",
            "id": 602058240,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3447",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjA1ODI0MA==",
            "updated_at": "2020-03-21T15:10:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/602058240",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/243140?v=4",
                "events_url": "https://api.github.com/users/dgrunwald/events{/privacy}",
                "followers_url": "https://api.github.com/users/dgrunwald/followers",
                "following_url": "https://api.github.com/users/dgrunwald/following{/other_user}",
                "gists_url": "https://api.github.com/users/dgrunwald/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dgrunwald",
                "id": 243140,
                "login": "dgrunwald",
                "node_id": "MDQ6VXNlcjI0MzE0MA==",
                "organizations_url": "https://api.github.com/users/dgrunwald/orgs",
                "received_events_url": "https://api.github.com/users/dgrunwald/received_events",
                "repos_url": "https://api.github.com/users/dgrunwald/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dgrunwald/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dgrunwald/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dgrunwald"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> maybe Cython sometimes generates direct calls to the `__next__` method without going through the usual logic for calling `tp_iternext`?\r\n\r\nIf that was the case, I'd rather see that fixed.",
            "created_at": "2020-03-21T15:34:34Z",
            "html_url": "https://github.com/cython/cython/issues/3447#issuecomment-602061246",
            "id": 602061246,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3447",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjA2MTI0Ng==",
            "updated_at": "2020-03-29T08:35:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/602061246",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3447/comments",
    "created_at": "2020-03-19T13:17:04Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3447/events",
    "html_url": "https://github.com/cython/cython/issues/3447",
    "id": 584404846,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3447/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1ODQ0MDQ4NDY=",
    "number": 3447,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Performance of `__next__` (efficiently signaling end of iteration)",
    "updated_at": "2020-03-29T08:35:57Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3447",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/243140?v=4",
        "events_url": "https://api.github.com/users/dgrunwald/events{/privacy}",
        "followers_url": "https://api.github.com/users/dgrunwald/followers",
        "following_url": "https://api.github.com/users/dgrunwald/following{/other_user}",
        "gists_url": "https://api.github.com/users/dgrunwald/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dgrunwald",
        "id": 243140,
        "login": "dgrunwald",
        "node_id": "MDQ6VXNlcjI0MzE0MA==",
        "organizations_url": "https://api.github.com/users/dgrunwald/orgs",
        "received_events_url": "https://api.github.com/users/dgrunwald/received_events",
        "repos_url": "https://api.github.com/users/dgrunwald/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dgrunwald/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dgrunwald/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dgrunwald"
    }
}