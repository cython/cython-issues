{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!--\r\n**PLEASE READ THIS FIRST:**\r\n- DO NOT use the bug and feature tracker for general questions and support requests.\r\n  Use the `cython-users` mailing list instead.\r\n  It has a wider audience, so you get more and better answers.\r\n- Did you search for similar issues already?\r\n  Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release?\r\n  It might already have what you want to report.\r\n  Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n**Describe the bug**\r\nC++ compilation fails just from separating two cdef classes defined in one file into two separate files .\r\n\r\n**To Reproduce**\r\nCode to reproduce the behaviour:\r\n*file_1.pxd*:\r\n```\r\nfrom .file_2 cimport B\r\n\r\n\r\ncdef class A:\r\n\r\n    cpdef void run(self, B b)\r\n```\r\n*file_1.pyx*:\r\n```\r\ncdef class A:\r\n\r\n    cpdef void run(self, B b):\r\n        print(b.run)\r\n```\r\n*file_2.pxd*:\r\n```\r\ncdef class B:\r\n\r\n    cpdef void run(self)\r\n```\r\n*file_2.pyx*\r\n```\r\ncdef class B:\r\n    cpdef void run(self):\r\n        pass\r\n```\r\n\r\n**Expected behavior**\r\nIf you compile above (in c++), you get a failure msg:\r\n```\r\nerror: invalid conversion from ‘void (*)(__pyx_obj_14test_class_bug_6file_2_B*, int)’ to ‘void (*)(__pyx_obj_5tests_14test_class_bug_6file_2_B*)’ [-fpermissive]\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Linux\r\n - Python version == 3.8.4\r\n - Cython version == 3.0.0a10\r\n\r\n**Additional context**\r\nI think the `cimport B` introduces this which breaks everything, but I've no idea how to resolve...\r\n```\r\n/* \"cfunc.to_py\":66\r\n * \r\n * @cname(\"__Pyx_CFunc_void__lParenB__comma_int__dunderpyx_skip_dispatch__rParen_to_py_4self\")\r\n * cdef object __Pyx_CFunc_void__lParenB__comma_int__dunderpyx_skip_dispatch__rParen_to_py_4self(void (*f)(B) except *):             # <<<<<<<<<<<<<<\r\n *     def wrap(B self):\r\n *         \"\"\"wrap(self: 'B') -> 'void'\"\"\"\r\n */\r\n```\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "In fact, you can't even compile this:\r\n\r\n```\r\nfrom .file_2 cimport B\r\n\r\ncpdef void test_func():\r\n    cdef B b = B()\r\n    print(b.run)\r\n```\r\n\r\nThis will give same **error: invalid conversion from** error... \r\nWhat is going on here??? ",
            "created_at": "2022-04-14T04:31:53Z",
            "html_url": "https://github.com/cython/cython/issues/4733#issuecomment-1098699931",
            "id": 1098699931,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4733",
            "node_id": "IC_kwDOABDGAc5BfNSb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1098699931/reactions"
            },
            "updated_at": "2022-04-14T04:31:53Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1098699931",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24363659?v=4",
                "events_url": "https://api.github.com/users/mlguruz/events{/privacy}",
                "followers_url": "https://api.github.com/users/mlguruz/followers",
                "following_url": "https://api.github.com/users/mlguruz/following{/other_user}",
                "gists_url": "https://api.github.com/users/mlguruz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mlguruz",
                "id": 24363659,
                "login": "mlguruz",
                "node_id": "MDQ6VXNlcjI0MzYzNjU5",
                "organizations_url": "https://api.github.com/users/mlguruz/orgs",
                "received_events_url": "https://api.github.com/users/mlguruz/received_events",
                "repos_url": "https://api.github.com/users/mlguruz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mlguruz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mlguruz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mlguruz"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "So roughly what's happening (I think):\r\n\r\n`print(b.run)` (where `b.run` is a cdef function) isn't really something that can be printed, so Cython attempts to convert it to a Python object instead.\r\n\r\nThere's a number of issues converting it to a Python object - one is that Cython can't really handle \"bound cdef functions). The second (that you're seeing) is that `cpdef` functions are implemented with an `int` flag (which is used for inheritance I think) but the Cython \"function to pyobject\" conversion code doesn't know about that `int` flag.\r\n\r\nCython shouldn't really be bothering with the conversion anyway, since `cpdef` functions already have a Python wrapper (so ideally it should just use that).\r\n\r\nI don't know what difference moving it to a `pxd` file makes either. But hopefully this is a rough summary of what's failing.",
            "created_at": "2022-04-14T06:20:56Z",
            "html_url": "https://github.com/cython/cython/issues/4733#issuecomment-1098750364",
            "id": 1098750364,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4733",
            "node_id": "IC_kwDOABDGAc5BfZmc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1098750364/reactions"
            },
            "updated_at": "2022-04-14T06:20:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1098750364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "> So roughly what's happening (I think):\r\n> \r\n> `print(b.run)` (where `b.run` is a cdef function) isn't really something that can be printed, so Cython attempts to convert it to a Python object instead.\r\n> \r\n> There's a number of issues converting it to a Python object - one is that Cython can't really handle \"bound cdef functions). The second (that you're seeing) is that `cpdef` functions are implemented with an `int` flag (which is used for inheritance I think) but the Cython \"function to pyobject\" conversion code doesn't know about that `int` flag.\r\n> \r\n> Cython shouldn't really be bothering with the conversion anyway, since `cpdef` functions already have a Python wrapper (so ideally it should just use that).\r\n> \r\n> I don't know what difference moving it to a `pxd` file makes either. But hopefully this is a rough summary of what's failing.\r\n\r\nFirst, thanks for the quick reply! This is really important to me for my project right now. \r\n\r\nSo, putting them in **one** file as below, it compiles and everything looks fine. \r\n*file_3.pxd*\r\n```\r\n# cython: language_level=3\r\n\r\n\r\ncdef class B:\r\n\r\n    cpdef void run(self)\r\n\r\n\r\ncdef class A:\r\n\r\n    cpdef void run(self, B b)\r\n\r\n\r\n```\r\n*file_3.pyx*\r\n```\r\n# cython: language_level=3\r\n\r\n\r\ncdef class B:\r\n    cpdef void run(self):\r\n        pass\r\n\r\n\r\n\r\ncdef class A:\r\n\r\n    cpdef void run(self, B b):\r\n        print(b.run)\r\n```\r\nAnd below are the differences from compiled cpp code:\r\n\r\n*one file*\r\n```\r\n/* \"/utils/cy/tests/test_class_bug/file_3.pxd\":4\r\n * \r\n * \r\n * cdef class B:             # <<<<<<<<<<<<<<\r\n * \r\n *     cpdef void run(self)\r\n */\r\nstruct __pyx_obj_5utils_2cy_5tests_14test_class_bug_6file_3_B {\r\n  PyObject_HEAD\r\n  struct __pyx_vtabstruct_5utils_2cy_5tests_14test_class_bug_6file_3_B *__pyx_vtab;\r\n};\r\n\r\n\r\n/* \"utils/cy/tests/test_class_bug/file_3.pxd\":9\r\n * \r\n * \r\n * cdef class A:             # <<<<<<<<<<<<<<\r\n * \r\n *     cpdef void run(self, B b)\r\n */\r\nstruct __pyx_obj_5utils_2cy_5tests_14test_class_bug_6file_3_A {\r\n  PyObject_HEAD\r\n  struct __pyx_vtabstruct_5utils_2cy_5tests_14test_class_bug_6file_3_A *__pyx_vtab;\r\n};\r\n```\r\n\r\n*two files*\r\n```\r\n/* \"file_2.pxd\":5\r\n * \r\n * \r\n * cdef class B:             # <<<<<<<<<<<<<<\r\n * \r\n *     cpdef void run(self)\r\n */\r\nstruct __pyx_obj_5utils_2cy_5tests_14test_class_bug_6file_2_B {\r\n  PyObject_HEAD\r\n  struct __pyx_vtabstruct_5utils_2cy_5tests_14test_class_bug_6file_2_B *__pyx_vtab;\r\n};\r\n\r\n\r\n/* \"cfunc.to_py\":66\r\n * \r\n * @cname(\"__Pyx_CFunc_void__lParenB__comma_int__dunderpyx_skip_dispatch__rParen_to_py_4self\")\r\n * cdef object __Pyx_CFunc_void__lParenB__comma_int__dunderpyx_skip_dispatch__rParen_to_py_4self(void (*f)(B) except *):             # <<<<<<<<<<<<<<\r\n *     def wrap(B self):\r\n *         \"\"\"wrap(self: 'B') -> 'void'\"\"\"\r\n */\r\nstruct __pyx_obj___pyx_scope_struct____Pyx_CFunc_void__lParenB__comma_int__dunderpyx_skip_dispatch__rParen_to_py_4self {\r\n  PyObject_HEAD\r\n  void (*__pyx_v_f)(struct __pyx_obj_5utils_2cy_5tests_14test_class_bug_6file_2_B *);\r\n};\r\n\r\n\r\n\r\n/* \"file_2.pxd\":5\r\n * \r\n * \r\n * cdef class B:             # <<<<<<<<<<<<<<\r\n * \r\n *     cpdef void run(self)\r\n */\r\n\r\nstruct __pyx_vtabstruct_5utils_2cy_5tests_14test_class_bug_6file_2_B {\r\n  void (*run)(struct __pyx_obj_5utils_2cy_5tests_14test_class_bug_6file_2_B *, int __pyx_skip_dispatch);\r\n};\r\nstatic struct __pyx_vtabstruct_5utils_2cy_5tests_14test_class_bug_6file_2_B *__pyx_vtabptr_5utils_2cy_5tests_14test_class_bug_6file_2_B;\r\n/* #### Code section: utility_code_proto ### */\r\n```\r\n\r\nYou see - separating into **two files** introduces this `\"cfunc.to_py\"` block... \r\nIs there any reason for that?? ",
            "created_at": "2022-04-14T12:19:06Z",
            "html_url": "https://github.com/cython/cython/issues/4733#issuecomment-1099126261",
            "id": 1099126261,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4733",
            "node_id": "IC_kwDOABDGAc5Bg1X1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1099126261/reactions"
            },
            "updated_at": "2022-04-14T12:19:06Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1099126261",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24363659?v=4",
                "events_url": "https://api.github.com/users/mlguruz/events{/privacy}",
                "followers_url": "https://api.github.com/users/mlguruz/followers",
                "following_url": "https://api.github.com/users/mlguruz/following{/other_user}",
                "gists_url": "https://api.github.com/users/mlguruz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mlguruz",
                "id": 24363659,
                "login": "mlguruz",
                "node_id": "MDQ6VXNlcjI0MzYzNjU5",
                "organizations_url": "https://api.github.com/users/mlguruz/orgs",
                "received_events_url": "https://api.github.com/users/mlguruz/received_events",
                "repos_url": "https://api.github.com/users/mlguruz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mlguruz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mlguruz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mlguruz"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> You see - separating into **two files** introduces this `\"cfunc.to_py\"` block...\r\n> Is there any reason for that??\r\n\r\nDon't know immediately. Presumably Cython knows a little less about functions defined in another file...\r\n\r\nIn your case I think you just want to get the Python wrapper for the cdef function. The easiest way to do that is to make it treat `b` as a regular Python object (rather than a `B` object) so that it doesn't know about the `cdef` part of `run`:\r\n\r\n```\r\nprint((<object>b).run)\r\n```\r\n\r\nThat should probably work as a workaround.\r\n\r\nThe second question is: do you even need a `cpdef` function? In my mind they're often the wrong choice - they have all the disadvantages of a `cdef` function and all the disadvantages of a `def` function. Here you might well be better just making `run` a `def` function.\r\n\r\nThanks for the report though - this does look like a bug.",
            "created_at": "2022-04-14T16:32:22Z",
            "html_url": "https://github.com/cython/cython/issues/4733#issuecomment-1099381168",
            "id": 1099381168,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4733",
            "node_id": "IC_kwDOABDGAc5Bhzmw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1099381168/reactions"
            },
            "updated_at": "2022-04-14T16:32:22Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1099381168",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "The casting workaround above works but downside is losing all the static info. \r\n\r\n>The second question is: do you even need a cpdef function? In my mind they're often the wrong choice - they have all the disadvantages of a cdef function and all the disadvantages of a def function. Here you might well be better just making run a def function. \r\n\r\nMy project requires deep class hierarchy, which means lots of overriding. I'm unfortunately using `cpdef` for all the interfaces just so its static typed, visible to cy and py worlds, which is very nice for my use case. \r\n\r\nCorrect me if I'm wrong - if I use `cdef`, it is not visible to py world; if I use `def`, the function call overhead is there for cy world (I'm pretty latency sensitive for lots of ops). There is no overloading in python, so I can't `cdef` & `def`. The only way seems to be having two sets of *same* functions, which clearly isn't ideal...  \r\n\r\nI do hope this issue could be resolved coz it seems to me is just that cython pxd imports seems weird (I don't know how to define weird...) \r\n\r\n>Thanks for the report though - this does look like a bug.\r\n\r\nMy pleasure - have been a loyal Cython user since version 0.23. :)   \r\n",
            "created_at": "2022-04-14T16:54:02Z",
            "html_url": "https://github.com/cython/cython/issues/4733#issuecomment-1099402157",
            "id": 1099402157,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4733",
            "node_id": "IC_kwDOABDGAc5Bh4ut",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1099402157/reactions"
            },
            "updated_at": "2022-04-14T16:55:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1099402157",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24363659?v=4",
                "events_url": "https://api.github.com/users/mlguruz/events{/privacy}",
                "followers_url": "https://api.github.com/users/mlguruz/followers",
                "following_url": "https://api.github.com/users/mlguruz/following{/other_user}",
                "gists_url": "https://api.github.com/users/mlguruz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mlguruz",
                "id": 24363659,
                "login": "mlguruz",
                "node_id": "MDQ6VXNlcjI0MzYzNjU5",
                "organizations_url": "https://api.github.com/users/mlguruz/orgs",
                "received_events_url": "https://api.github.com/users/mlguruz/received_events",
                "repos_url": "https://api.github.com/users/mlguruz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mlguruz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mlguruz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mlguruz"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> The casting workaround above works but downside is losing all the static info.\r\n\r\nYou *already lose all the static info* when print a `cpdef` function (because there is nothing sensible to do except do the Python attribute lookup). The workaround generates *exactly* the same code as the case where the class is defined in the same file.\r\n\r\n> Correct me if I'm wrong [...]\r\n\r\nNo - you understand correctly. `cpdef` has it's place (and is designed for what you are using it for). My personal opinion is that it's surprisingly rare for a function to need to be callable efficiently from Cython and also be callable from Python. But if that's what you need then use `cpdef`.\r\n\r\nI shall leave it here since a suitable workaround exists in the short-term and I think we have enough information to fix the bug in the longer-term",
            "created_at": "2022-04-14T17:42:45Z",
            "html_url": "https://github.com/cython/cython/issues/4733#issuecomment-1099460824",
            "id": 1099460824,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4733",
            "node_id": "IC_kwDOABDGAc5BiHDY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1099460824/reactions"
            },
            "updated_at": "2022-04-14T17:42:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1099460824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "> You already lose all the static info when [...].\r\n\r\nTrue - sorry I overlooked. Agree w/ the temporary workaround now. \r\n\r\nThank you so much for the help! Really hope we officially get to 3.0 soon! ",
            "created_at": "2022-04-14T18:13:25Z",
            "html_url": "https://github.com/cython/cython/issues/4733#issuecomment-1099491279",
            "id": 1099491279,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4733",
            "node_id": "IC_kwDOABDGAc5BiOfP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1099491279/reactions"
            },
            "updated_at": "2022-04-14T18:13:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1099491279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24363659?v=4",
                "events_url": "https://api.github.com/users/mlguruz/events{/privacy}",
                "followers_url": "https://api.github.com/users/mlguruz/followers",
                "following_url": "https://api.github.com/users/mlguruz/following{/other_user}",
                "gists_url": "https://api.github.com/users/mlguruz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mlguruz",
                "id": 24363659,
                "login": "mlguruz",
                "node_id": "MDQ6VXNlcjI0MzYzNjU5",
                "organizations_url": "https://api.github.com/users/mlguruz/orgs",
                "received_events_url": "https://api.github.com/users/mlguruz/received_events",
                "repos_url": "https://api.github.com/users/mlguruz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mlguruz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mlguruz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mlguruz"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4733/comments",
    "created_at": "2022-04-14T04:19:09Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4733/events",
    "html_url": "https://github.com/cython/cython/issues/4733",
    "id": 1204020733,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4733/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5Hw-X9",
    "number": 4733,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4733/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4733/timeline",
    "title": "[BUG] Compiler failure just from separating two classes from one file into two separate files",
    "updated_at": "2022-04-14T18:13:38Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4733",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24363659?v=4",
        "events_url": "https://api.github.com/users/mlguruz/events{/privacy}",
        "followers_url": "https://api.github.com/users/mlguruz/followers",
        "following_url": "https://api.github.com/users/mlguruz/following{/other_user}",
        "gists_url": "https://api.github.com/users/mlguruz/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mlguruz",
        "id": 24363659,
        "login": "mlguruz",
        "node_id": "MDQ6VXNlcjI0MzYzNjU5",
        "organizations_url": "https://api.github.com/users/mlguruz/orgs",
        "received_events_url": "https://api.github.com/users/mlguruz/received_events",
        "repos_url": "https://api.github.com/users/mlguruz/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mlguruz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mlguruz/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mlguruz"
    }
}