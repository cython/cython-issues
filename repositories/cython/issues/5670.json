{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nFull context: https://stackoverflow.com/questions/76972950/cython-returned-memoryview-is-always-considered-uninitialized/76974615\r\n\r\nI'm upgrading to Cython 3 and noticing a few new yellow areas in the annotation HTML that make it look like the GIL is being acquired more than it used to and in cases that I believe it is unnecessary.\r\n\r\nIt has been explained to me that the the function in my code below that returns a memory view is only acquiring the GIL in the error case. I still think with all the compiler flags I have that this shouldn't happen (I know my memoryview is initialized, I know the size of it, I know this is a read-only not-owned subset view of the memory), but I can live with it since it theoretically shouldn't have a significant effect on performance.\r\n\r\nHowever, in the calling function `_run` I noticed that it is always acquiring the GIL to clear the memory view even in the success case:\r\n\r\n```\r\n  /* function exit code */\r\n  goto __pyx_L0;\r\n  __pyx_L1_error:;\r\n  #ifdef WITH_THREAD\r\n  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n  #endif\r\n  __PYX_XCLEAR_MEMVIEW(&__pyx_t_1, 1);\r\n  __Pyx_WriteUnraisable(\"cython_test._run\", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);\r\n  #ifdef WITH_THREAD\r\n  __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n  #endif\r\n  __pyx_L0:;\r\n  #ifdef WITH_THREAD\r\n  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n  #endif\r\n  __PYX_XCLEAR_MEMVIEW(&__pyx_v_tmp, 1);\r\n  #ifdef WITH_THREAD\r\n  __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n  #endif\r\n```\r\n\r\nIn profiling my (dask-based) code it is very clear that this is preventing my threads from processing data simultaneously so this one hurts more than the failure case of the other function.\r\n\r\nI understand that memoryview handling has changed a lot in Cython 3.x, but Cython 0.29.x did not have this GIL acquire code here and it passed `, 0)` to the `__PYX_X_CLEAR_MEMVIEW` function.\n\n### Code to reproduce the behaviour:\n\n```cython\r\n# cython: language_level=3, boundscheck=False, cdivision=True, wraparound=False, initializedcheck=False, nonecheck=False\r\ncimport cython\r\nfrom cython cimport floating\r\nimport numpy as np\r\ncimport numpy as np\r\n\r\nnp.import_array()\r\n\r\ndef test_func():\r\n    cdef np.ndarray[float, ndim=2] arr = np.zeros((5, 5), dtype=np.float32)\r\n    cdef float[:, ::1] arr_view = arr\r\n    _run(arr_view)\r\n\r\ncdef void _run(floating[:, ::1] arr_view) noexcept nogil:\r\n    cdef floating[:, :] tmp = _get_upper_left_corner(arr_view)\r\n\r\ncdef inline floating[:, :] _get_upper_left_corner(floating[:, ::1] arr) noexcept nogil:\r\n    return arr[:1, :1]\r\n```\r\n\r\n\n\n### Expected behaviour\n\nMinimal (no?) GIL acquiring when working with memoryviews.\n\n### OS\n\nLinux\n\n### Python version\n\n3.11\n\n### Cython version\n\n3.0.0\n\n### Additional context\n\nInstalled from conda-forge.",
    "closed_at": "2023-09-04T07:42:05Z",
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I also wanted to mention that if this isn't intentional, but there is no time to figure out why this is happening I'm willing to track it down if someone could just point me in the right direction on where to look in the code base.",
            "created_at": "2023-08-31T13:14:42Z",
            "html_url": "https://github.com/cython/cython/issues/5670#issuecomment-1701018893",
            "id": 1701018893,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5670",
            "node_id": "IC_kwDOABDGAc5lY30N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1701018893/reactions"
            },
            "updated_at": "2023-08-31T13:14:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1701018893",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
                "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
                "followers_url": "https://api.github.com/users/djhoese/followers",
                "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
                "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/djhoese",
                "id": 1828519,
                "login": "djhoese",
                "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
                "organizations_url": "https://api.github.com/users/djhoese/orgs",
                "received_events_url": "https://api.github.com/users/djhoese/received_events",
                "repos_url": "https://api.github.com/users/djhoese/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/djhoese"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm pretty sure it isn't intentional (at least in the success path - the error path needs the GIL for writeunraisable so may as well have it for the whole thing).\r\n\r\nMy usual approach to working out where to look is to add a conditional break point in `CCodeWriter.write` - conditional on the string you think this wrong (probably `  __PYX_XCLEAR_MEMVIEW(&__pyx_v_tmp, 1);` and this'll take you to where the code is generated. You'll probably need to step up several levels until you arrive in `Nodes.py` and that's probably the right place.",
            "created_at": "2023-08-31T17:47:32Z",
            "html_url": "https://github.com/cython/cython/issues/5670#issuecomment-1701496719",
            "id": 1701496719,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5670",
            "node_id": "IC_kwDOABDGAc5laseP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1701496719/reactions"
            },
            "updated_at": "2023-08-31T17:47:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1701496719",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> My usual approach to working out where to look is to add a conditional break point in CCodeWriter.write - conditional on the string you think this wrong (probably   __PYX_XCLEAR_MEMVIEW(&__pyx_v_tmp, 1); and this'll take you to where the code is generated. You'll probably need to step up several levels until you arrive in Nodes.py and that's probably the right place.\r\n\r\nI was able to dig out the code. So the following C line:\r\n```c\r\n__PYX_XCLEAR_MEMVIEW(&__pyx_v_tmp, 1);\r\n```\r\n\r\nIs generated via following stacktrace:\r\n```\r\n  /Users/matus/dev/cython39/bin/cython(33)<module>()\r\n-> sys.exit(load_entry_point('Cython', 'console_scripts', 'cython')())\r\n  /Users/matus/dev/cython/Cython/Compiler/Main.py(757)setuptools_main()\r\n-> return main(command_line = 1)\r\n  /Users/matus/dev/cython/Cython/Compiler/Main.py(785)main()\r\n-> result = compile(sources, options)\r\n  /Users/matus/dev/cython/Cython/Compiler/Main.py(676)compile()\r\n-> return compile_multiple(source, options)\r\n  /Users/matus/dev/cython/Cython/Compiler/Main.py(650)compile_multiple()\r\n-> result = run_pipeline(source, options,\r\n  /Users/matus/dev/cython/Cython/Compiler/Main.py(542)run_pipeline()\r\n-> err, enddata = Pipeline.run_pipeline(pipeline, source)\r\n  /Users/matus/dev/cython/Cython/Compiler/Pipeline.py(398)run_pipeline()\r\n-> data = run(phase, data)\r\n  /Users/matus/dev/cython/Cython/Compiler/Pipeline.py(375)run()\r\n-> return phase(data)\r\n  /Users/matus/dev/cython/Cython/Compiler/Pipeline.py(52)generate_pyx_code_stage()\r\n-> module_node.process_implementation(options, result)\r\n  /Users/matus/dev/cython/Cython/Compiler/ModuleNode.py(222)process_implementation()\r\n-> self.generate_c_code(env, options, result)\r\n  /Users/matus/dev/cython/Cython/Compiler/ModuleNode.py(516)generate_c_code()\r\n-> self.body.generate_function_definitions(env, code)\r\n  /Users/matus/dev/cython/Cython/Compiler/Nodes.py(404)generate_function_definitions()\r\n-> stat.generate_function_definitions(env, code)\r\n  /Users/matus/dev/cython/Cython/Compiler/Nodes.py(404)generate_function_definitions()\r\n-> stat.generate_function_definitions(env, code)\r\n  /Users/matus/dev/cython/Cython/Compiler/FusedNode.py(964)generate_function_definitions()\r\n-> stat.generate_function_definitions(env, code)\r\n  /Users/matus/dev/cython/Cython/Compiler/Nodes.py(2368)generate_function_definitions()\r\n-> code.put_var_xdecref(entry, have_gil=gil_owned['success'])\r\n  /Users/matus/dev/cython/Cython/Compiler/Code.py(2260)put_var_xdecref()\r\n-> self.put_xdecref(entry.cname, entry.type, **kwds)\r\n  /Users/matus/dev/cython/Cython/Compiler/Code.py(2215)put_xdecref()\r\n-> type.generate_xdecref(self, cname, nanny=nanny, have_gil=have_gil)\r\n> /Users/matus/dev/cython/Cython/Compiler/PyrexTypes.py(1138)generate_xdecref()\r\n-> code.putln(\"__PYX_XCLEAR_MEMVIEW(&%s, %d);\" % (cname, int(have_gil)))\r\n```\r\n\r\nSo the following GIL lock code:\r\n```c\r\n  __pyx_L1_error:;\r\n  #ifdef WITH_THREAD\r\n  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n  #endif\r\n  __PYX_XCLEAR_MEMVIEW(&__pyx_t_1, 1);\r\n  __Pyx_WriteUnraisable(\"test._run\", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);\r\n  #ifdef WITH_THREAD\r\n  __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n  #endif\r\n  __pyx_L0:;\r\n  #ifdef WITH_THREAD\r\n  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n  #endif\r\n  __PYX_XCLEAR_MEMVIEW(&__pyx_v_tmp, 1);\r\n  #ifdef WITH_THREAD\r\n  __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n  #endif\r\n```\r\nis generated here:\r\n\r\nhttps://github.com/cython/cython/blob/36a741a10db8114c1eca1753aea7be92c5f3a639/Cython/Compiler/Nodes.py#L2363-L2368\r\n\r\nwhere by deleting `assure_gil('success')` the GIL code is avoided and the generated C code looks as follows:\r\n\r\n```c\r\n  __pyx_L1_error:;\r\n  #ifdef WITH_THREAD\r\n  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n  #endif\r\n  __PYX_XCLEAR_MEMVIEW(&__pyx_t_1, 1);\r\n  __Pyx_WriteUnraisable(\"test._run\", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);\r\n  #ifdef WITH_THREAD\r\n  __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n  #endif\r\n  __pyx_L0:;\r\n  __PYX_XCLEAR_MEMVIEW(&__pyx_v_tmp, 0);\r\n```\r\nBut I have a several questions:\r\n1. The GIL locking is necessary for `__PYX_XCLEAR_MEMVIEW` or not?\r\n2. What is the purpose of `WITH_THREAD` macro? I don't see it anywhere declared (even not during compilation) so it seems that locking is not compiled in any case...",
            "created_at": "2023-08-31T20:24:36Z",
            "html_url": "https://github.com/cython/cython/issues/5670#issuecomment-1701731671",
            "id": 1701731671,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5670",
            "node_id": "IC_kwDOABDGAc5lbl1X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1701731671/reactions"
            },
            "updated_at": "2023-08-31T20:24:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1701731671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> 1.  The GIL locking is necessary for __PYX_XCLEAR_MEMVIEW or not?\r\n\r\nNo - `__PYX_XCLEAR_MEMVIEW` will reacquire the GIL itself if necessary, which is only when its internal atomic reference count goes to 0. The second argument (0 or 1) tells it whether it already has the GIL.\r\n\r\n*However* - note that `if entry.type.needs_refcounting: ` covers multiple different types (currently just PyObject + memoryview, but maybe more in future) and only memoryview can get away without the GIL.\r\n\r\n> 2. What is the purpose of WITH_THREAD macro? I don't see it anywhere declared (even not during compilation) so it seems that locking is not compiled in any case...\r\n\r\nIt's defined in the Python headers (https://github.com/python/cpython/blob/d48760b2f1e28dd3c1a35721939f400a8ab619b8/Include/pyport.h#L663). It looks like it's pointless now since it's always defined, but before Python 3.7 it used to be informative.",
            "created_at": "2023-08-31T20:32:10Z",
            "html_url": "https://github.com/cython/cython/issues/5670#issuecomment-1701741493",
            "id": 1701741493,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5670",
            "node_id": "IC_kwDOABDGAc5lboO1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1701741493/reactions"
            },
            "updated_at": "2023-08-31T20:32:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1701741493",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5670/comments",
    "created_at": "2023-08-31T01:06:19Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-09-04T07:42:05Z",
            "event": "closed",
            "id": 10270578648,
            "node_id": "CE_lADOABDGAc5vu89yzwAAAAJkLJfY",
            "performed_via_github_app": null,
            "state_reason": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/10270578648"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "cf190b0dcb547520df0dc817d966b61a3ec3f02e",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/cf190b0dcb547520df0dc817d966b61a3ec3f02e",
            "created_at": "2023-09-04T07:42:08Z",
            "event": "referenced",
            "id": 10270579285,
            "node_id": "REFE_lADOABDGAc5vu89yzwAAAAJkLJpV",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/10270579285"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5670/events",
    "html_url": "https://github.com/cython/cython/issues/5670",
    "id": 1874579314,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5670/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5vu89y",
    "number": 5670,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5670/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5670/timeline",
    "title": "[BUG] Memoryview clear unnecessarily acquiring GIL",
    "updated_at": "2023-09-04T07:42:05Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5670",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
        "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
        "followers_url": "https://api.github.com/users/djhoese/followers",
        "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
        "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/djhoese",
        "id": 1828519,
        "login": "djhoese",
        "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
        "organizations_url": "https://api.github.com/users/djhoese/orgs",
        "received_events_url": "https://api.github.com/users/djhoese/received_events",
        "repos_url": "https://api.github.com/users/djhoese/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/djhoese"
    }
}