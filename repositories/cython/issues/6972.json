{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Is your feature request related to a problem? Please describe.\n\nWhen integrating C into cython sometimes it is cumbersome to implement it. E.g. when I would like to have list of C structs I am not allowed to put the structs into the python list:\n\n```cython\ncdef struct Grail:\n    int age\n    float volume\n\ncdef Grail g1 = Grail(5, 3.0)\n\ncdef list mylist = [g1]\n``` \n\nPossible solution is to wrap struct using python capsule via `Includes/cpython/pycapsule.pxd` but a lot of users do not know about them.\n\n### Describe the solution you'd like.\n\nThere are two possibilities:\n* documentation change\n* integrating capsules into cython syntax\n\n### Documentation change\n\nSimplest solution is to document better python capsules. I think we can add a chapter into https://cython.readthedocs.io/en/latest/src/userguide/external_C_code.html but it is still not perfect because using pycapsule will be still unintuitive and cumbersome\n\n### Cython syntax integration\nMore complex solution but easy to use. We can use python syntax of types. E.g. example above can be written as:\n\n```cython\ncdef struct Grail:\n    int age\n    float volume\n\ncdef Grail g1 = Grail(5, 3.0)\n\ncdef list[Grail] mylist = [g1]\n```\n\nin this case accessing mylist will cython automatically load/unload struct from `mylist`. Of course this will be forbidden:\n\n```cython\ncdef list mygenericlist = mylist\n```\n\n### Additional context\n\nCython integration of course is not performance driven (e.g. C integers will have worse performance - see discussion https://github.com/cython/cython/issues/6925#issuecomment-2973596182). Hence, probably the implementation should not use capsules for `list[int]` or similar types. The performance can be improved though via pool of pycapsules (something similar to `cython.freelist`).\n\nCython integration also has some drawbacks which maybe needs to be handled - e.g. it is easy to  leak dangling pointers:\n\n```cython\n@cython.cfunc\ndef bar() -> list[cython.p_int]:\n   i: cython.int = 1\n   j: cython.p_int = cython.address(i)\n   return [j]\n```\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Capsules are obviously fairly limited - I think the main use is when you've got some opaque data that you want to feed in and out of some Python algorithm without wanting to interact with it from Python itself.\n\nPersonally, I'd still recommending using a `cdef class` wrapper in most cases. But converting to a capsule would involve much less C code so I could see the value of it in some cases.",
            "created_at": "2025-06-20T07:13:15Z",
            "html_url": "https://github.com/cython/cython/issues/6972#issuecomment-2990077767",
            "id": 2990077767,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6972",
            "node_id": "IC_kwDOABDGAc6yOPdH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2990077767/reactions"
            },
            "updated_at": "2025-06-20T07:13:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2990077767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, I think passing data from one C implemented library through Python into another C implemented library is probably the main use case for capsules. They don't give you much more than that.\n\nI doubt that adding syntax for them, like `cython.pycapsule(\"capsule name\", pointer)`, would add much benefit compared to the existing C-API (that we already expose in `cpython.pycapsule`. You'd probably still have to cast the result when unpacking it. And unpacking will have to be more than a cast, because the only safety level for capsules is their name, which should be validated on reception.\n\nWhile writing this, I briefly considered generating a name automatically from the pointer type, but half-way rejected it because that doesn't allow to add semantic information about the value. I very much prefer semantic naming over plain type information for this kind of exchange.",
            "created_at": "2025-06-21T06:17:52Z",
            "html_url": "https://github.com/cython/cython/issues/6972#issuecomment-2993362979",
            "id": 2993362979,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6972",
            "node_id": "IC_kwDOABDGAc6yaxgj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2993362979/reactions"
            },
            "updated_at": "2025-06-21T06:17:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2993362979",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I doubt that adding syntax for them, like cython.pycapsule(\"capsule name\", pointer), would add much benefit compared to the existing C-API \n\nAs mentioned, for me the best way is to use typing syntax: `list[]`, `tuple[]`, etc... as mentioned above:\n```cython\ncdef Grail g1 = Grail(5, 3.0)\ncdef list[Grail] mylist = [g1]\n```\n\nIt is compatible with typing module and simple to use. When cython will have a freelist of capsules, it should be pretty fast operation.\n\n> And unpacking will have to be more than a cast, because the only safety level for capsules is their name\n\nSafety can be guaranteed by cython type analysis. Cython will enforce via typing system consistency when unpucking because only for type containing `Grail` subtype, it will be allowed pack/unpack `Grail` struct. (e.g. packing/unpacking `list[Grail]`)",
            "created_at": "2025-06-25T22:19:10Z",
            "html_url": "https://github.com/cython/cython/issues/6972#issuecomment-3006403906",
            "id": 3006403906,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6972",
            "node_id": "IC_kwDOABDGAc6zMhVC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3006403906/reactions"
            },
            "updated_at": "2025-06-25T22:20:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3006403906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> When cython will have a freelist of capsules, it should be pretty fast operation.\n\nI don't think that's possible to add freelists to a type we don't control. They need to be included in the allocation/deallocation functions for the type.",
            "created_at": "2025-06-26T20:56:57Z",
            "html_url": "https://github.com/cython/cython/issues/6972#issuecomment-3010004597",
            "id": 3010004597,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6972",
            "node_id": "IC_kwDOABDGAc6zaQZ1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3010004597/reactions"
            },
            "updated_at": "2025-06-26T20:56:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3010004597",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6972/comments",
    "created_at": "2025-06-17T21:51:25Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6972/events",
    "html_url": "https://github.com/cython/cython/issues/6972",
    "id": 3154853961,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6972/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc68C0BJ",
    "number": 6972,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6972/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6972/timeline",
    "title": "[ENH] Better integrate/document Python capsule API",
    "type": null,
    "updated_at": "2025-06-26T20:56:57Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6972",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
        "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
        "followers_url": "https://api.github.com/users/matusvalo/followers",
        "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
        "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/matusvalo",
        "id": 827060,
        "login": "matusvalo",
        "node_id": "MDQ6VXNlcjgyNzA2MA==",
        "organizations_url": "https://api.github.com/users/matusvalo/orgs",
        "received_events_url": "https://api.github.com/users/matusvalo/received_events",
        "repos_url": "https://api.github.com/users/matusvalo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/matusvalo",
        "user_view_type": "public"
    }
}