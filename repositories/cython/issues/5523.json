{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\r\n\r\nThe `cached_property` decorator fails when used inside a `cdef class`.\r\n\r\n### Code to reproduce the behaviour:\r\n\r\n```cython\r\nfrom functools import cached_property\r\ncdef class A:\r\n    @cached_property\r\n    def x(self):\r\n        return 1\r\n\r\na = A()\r\na.x\r\n```\r\n\r\nOutput:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n...\r\n----> 1 a.x\r\n\r\nFile ...\r\n    963     return self\r\n    964 if self.attrname is None:\r\n--> 965     raise TypeError(\r\n    966         \"Cannot use cached_property instance without calling __set_name__ on it.\")\r\n    967 try:\r\n    968     cache = instance.__dict__\r\n\r\nTypeError: Cannot use cached_property instance without calling __set_name__ on it.\r\n```\r\n\r\n### Expected behaviour\r\n\r\nThe above snippet should generate a working (cached) property.\r\n\r\nAccording to the docs, [`__set_name__` is only called on descriptors if they are created as part of the class definition](https://docs.python.org/3/reference/datamodel.html#object.__set_name__). I suspect that the reason for this issue is that Cython is actually translating the above code into the equivalent of \r\n```python\r\nfrom functools import cached_property\r\nclass A:\r\n    def x(self):\r\n        return 1\r\n\r\nA.x = cached_property(A.x)\r\n\r\na = A()\r\na.x\r\n```\r\nwhich reproduces the issue in pure Python. The above snippet may be fixed by manually calling `A.x.__set_name__(A, \"x\")`, so I would guess that line needs to be added into the Cython handling of the cached property as well somewhere. \r\n\r\n### OS\r\n\r\nLinux\r\n\r\n### Python version\r\n\r\n3.8.16 (and 3.10.2)\r\n\r\n### Cython version\r\n\r\n3.0.0b3 (and 0.29.36)\r\n\r\n### Additional context\r\n\r\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Since the decorator accesses the object's `__dict__`, it also won't work for that reason. It doesn't really provide a performance benefit for Cython code, since a regular property would have the same performance.",
            "created_at": "2023-07-11T21:53:25Z",
            "html_url": "https://github.com/cython/cython/issues/5523#issuecomment-1631559475",
            "id": 1631559475,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5523",
            "node_id": "IC_kwDOABDGAc5hP58z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1631559475/reactions"
            },
            "updated_at": "2023-07-11T21:53:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1631559475",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "That's a good point. You could fix that limitation as documented [here](https://cython.readthedocs.io/en/latest/src/userguide/troubleshooting.html?highlight=__dict__#writing-into-extension-types), but I agree that it wouldn't work out of the box and it may be an unexpected side effect to do that automatically if `cached_property` is detected anywhere in a class definition.\r\n\r\nWhy wouldn't it provide a performance benefit for Cython code? Wouldn't caching the value allow you to elide the function call and any logic in the property (for something less trivial than my example above)? Or am I misinterpreting your statement?\r\n\r\nI'm totally fine if this is a wontfix and the recommended pattern is just to use an internal attribute to cache the value (the traditional approach of `if self._x is None: self._x = self._compute_x(); return self._x`). It would be helpful to have a more obvious failure mode, however, since I'd assume most developers would struggle to interpret the current error message.",
            "created_at": "2023-07-11T22:27:09Z",
            "html_url": "https://github.com/cython/cython/issues/5523#issuecomment-1631588712",
            "id": 1631588712,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5523",
            "node_id": "IC_kwDOABDGAc5hQBFo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1631588712/reactions"
            },
            "updated_at": "2023-07-11T22:29:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1631588712",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The decorator does allow you to elide the function call, but only from the Python perspective. Every attribute lookup is still a function call, it just means it only uses the builtin interpreter logic, so it's at C speeds. But for C extension classes, all attributes are accessed only through properties (since they're stored as part of the struct), so there's nothing to skip. All that `cdef public ...` does is auto-generate the implementation for you.",
            "created_at": "2023-07-11T22:49:47Z",
            "html_url": "https://github.com/cython/cython/issues/5523#issuecomment-1631605836",
            "id": 1631605836,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5523",
            "node_id": "IC_kwDOABDGAc5hQFRM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1631605836/reactions"
            },
            "updated_at": "2023-07-11T22:49:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1631605836",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hmm I think you're focusing on a different piece of this than I am. Let me illustrate with an example, please correct me if you see a point where I'm misunderstanding.\r\n\r\nSay I have a class:\r\n```\r\nclass A:\r\n    @cached_property\r\n    def one(self):\r\n        return expensive_function_that_returns_one()\r\n```\r\nThe `one` descriptor will be defined on the class, not on each instance. The first time I do `a = A(); a.one` it will effectively do `a.one = A.one(a)`. Then, future accesses to `a.one` will be able to actually see that `a.__dict__['one'] == 1` and bypass calls to `A.one`, which also means bypassing any calls to `expensive_function_that_returns_one`.\r\n\r\nNow let's switch that to a Cython class with a raw property:\r\n\r\n```\r\ncdef class A:\r\n    @property\r\n    def one(self):\r\n        return expensive_function_that_returns_one()\r\n```\r\n\r\n- Accessing the attribute `A.one` automatically happens at C speeds because it's a reserved slot in the struct rather than a Python dictionary access. So yes, removing this overhead in Cython is meaningless because it's equivalent.\r\n- The actual function call `one` is still going to happen at Python speeds because it's a Python function. AFAIK there is no way around this because you can't make `cdef` functions properties.\r\n- The `expensive_function_that_returns_one` doesn't actually have to be an expensive function, all it needs is to be a Python (not C) function in order to introduce the usual overheads (unboxing PyObjects, etc) associated with a Python function call instead of a C function call.\r\n\r\nIf `cached_property` worked in Cython, then we could remove the overhead of both the second and third bullet points, right?",
            "created_at": "2023-07-12T01:17:40Z",
            "html_url": "https://github.com/cython/cython/issues/5523#issuecomment-1631710304",
            "id": 1631710304,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5523",
            "node_id": "IC_kwDOABDGAc5hQexg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1631710304/reactions"
            },
            "updated_at": "2023-07-12T01:18:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1631710304",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "That would all be true normally yes, except that Cython handles `@property` decorators specially. It detects you using it (along with the standard `@attr.setter`/`@attr.deleter` variations), then puts them in the [`tp_getset`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getset) list in the type definition. That generates `getset_descriptor` objects, which store function pointers for the getter/setter. Those have fixed signatures, so there's no argument parsing overhead or anything, but for the setter there's type-checks/unboxing for the value of course.\r\n\r\nDefinitely calling `expensive_function_that_returns_one()` repeatedly would be wasteful, what I was meaning was to do the traditional caching in your code. Possibly Cython could just detect `cached_property` and generating that code automatically, but it might be a little awkward since you then have the same name referring to both the descriptor and the struct member. Any access in your Cython code wouldn't be able to bypass the property.",
            "created_at": "2023-07-12T01:41:09Z",
            "html_url": "https://github.com/cython/cython/issues/5523#issuecomment-1631724626",
            "id": 1631724626,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5523",
            "node_id": "IC_kwDOABDGAc5hQiRS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1631724626/reactions"
            },
            "updated_at": "2023-07-12T01:41:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1631724626",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think you're right in your diagnosis of what the problem is. It probably also wouldn't be too hard to add the `__set_name__` calls and make this kind of work.\r\n\r\nIt's probably work emphasising that `cdef classes` *aren't* regular Python classes - you're trading flexibility and features for speed. There's all kinds of stuff you can do in the body of Python classes that won't work in `cdef classes` (pretty much anything that relies on order of execution, putting function definitions in `if` statements, etc.). That's just because functions and properties are statically defined at compile-time rather than dynamically at runtime (mostly).\r\n\r\nCython definitely tries to get regular Python-style classes to behave as close as possible to Python behaviour. But I don't think we worry too much if `cdef classes` have to deviate a bit.\r\n\r\nWhich isn't to say that it won't get fixed if it can be, but it isn't completely obvious to me that this should work.",
            "created_at": "2023-07-12T21:06:20Z",
            "html_url": "https://github.com/cython/cython/issues/5523#issuecomment-1633214640",
            "id": 1633214640,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5523",
            "node_id": "IC_kwDOABDGAc5hWOCw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1633214640/reactions"
            },
            "updated_at": "2023-07-12T21:06:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1633214640",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> That would all be true normally yes, except that Cython handles `@property` decorators specially.\r\n\r\nOK yeah I was wondering if that was the case. I don't know the Cython internals terribly well unfortunately, thanks for the info.\r\n\r\n>  Possibly Cython could just detect cached_property and generating that code automatically\r\n\r\nThat's what I was imagining could be done. Whether it's worthwhile or not is a different question, and as I said above I'm totally fine if Cython decides not to fix this. It would be nice to include a better error message if that's the decision, though.\r\n\r\n> It's probably work emphasising that cdef classes aren't regular Python classes - you're trading flexibility and features for speed. \r\n\r\nYup, totally fair. I was expecting this decorator to work, but not for any particularly good reason. Its implementation is certainly antithetical to the way Cython classes work given that it's exploiting the instance's `__dict__` and the relationship between descriptors on classes and instance attributes.",
            "created_at": "2023-07-13T02:15:42Z",
            "html_url": "https://github.com/cython/cython/issues/5523#issuecomment-1633435142",
            "id": 1633435142,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5523",
            "node_id": "IC_kwDOABDGAc5hXD4G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1633435142/reactions"
            },
            "updated_at": "2023-07-13T02:16:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1633435142",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5523/comments",
    "created_at": "2023-07-11T20:52:34Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5523/events",
    "html_url": "https://github.com/cython/cython/issues/5523",
    "id": 1799735906,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5523/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5rRcpi",
    "number": 5523,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5523/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5523/timeline",
    "title": "[BUG] functools.cached_property does not work on cdef classes",
    "updated_at": "2023-07-13T02:16:00Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5523",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vyasr",
        "id": 1538165,
        "login": "vyasr",
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vyasr"
    }
}