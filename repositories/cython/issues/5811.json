{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nWhen I convert my code to type annotated syntax, it runs much slower. (10X in my case):\r\n\r\ncode to reproduce:\r\n```python\r\nimport numpy as np # 1.23.5\r\nimport pandas as pd # 2.1.1\r\nimport cython # 3.0.4\r\n\r\nimport io\r\nbilling_data = \\\r\n'''cancel_date,period_start,start_date,end_date,rev,sum_payments\r\n12/1/2019,1/1/2020,12/15/2019,5/15/2020,999,50\r\n,1/1/2020,12/15/2019,5/15/2020,999,50\r\n,1/1/2020,12/15/2019,5/15/2020,999,1950\r\n1/20/2020,1/1/2020,12/15/2019,5/15/2020,499,0\r\n,1/1/2020,12/24/2019,5/24/2020,699,100\r\n,1/1/2020,11/29/2019,4/29/2020,799,250\r\n,1/1/2020,1/15/2020,4/29/2020,799,250'''\r\n\r\ndef tweak_bill202(df_):\r\n    return (df_\r\n            .assign(cancel_date=pd.to_datetime(\r\n                df_.cancel_date.replace('<NA>', ''), format='%m/%d/%Y')\r\n                   )\r\n           )\r\n\r\nbill_df = tweak_bill202(pd.read_csv(io.StringIO(billing_data),\r\n    dtype_backend='pyarrow',                 \r\n    parse_dates=['cancel_date', 'period_start', 'start_date',\r\n                 'end_date']))\r\nbill_100k = bill_df.sample(100_000, replace=True)\r\n\r\n# this is the code I want to cythonize\r\ndef calc_unbilled_rec(vals):\r\n    cancel_date, period_start, start_date, end_date, rev, \\\r\n         sum_payments = vals\r\n    if cancel_date < period_start:\r\n        return np.nan#float('nan')\r\n    if start_date < period_start and end_date > period_start:\r\n        if rev > sum_payments:\r\n            return rev - sum_payments\r\n        else:\r\n            return 0\r\n```\r\n\r\nHere is my *fast* cython code:\r\n\r\n```\r\n%%cython\r\n\r\ncimport cython\r\nimport numpy as np\r\ncimport numpy as np\r\n\r\n@cython.boundscheck(False)\r\n@cython.wraparound(False)\r\ncpdef calc_unbilled_cy(np.ndarray[np.int64_t] cancel_date, \r\n                        np.ndarray[np.int64_t] period_start, \r\n                        np.ndarray[np.int64_t] start_date, \r\n                        np.ndarray[np.int64_t] end_date, \r\n                        np.ndarray[np.int64_t] rev, \r\n                        np.ndarray[np.int64_t] sum_payments):\r\n    cdef np.ndarray[np.float64_t ] results = np.full(rev.shape[0], np.nan, dtype=np.float64)\r\n    cdef long cd, pd, sd, ed;\r\n    for i in range(rev.shape[0]):\r\n        cd = cancel_date[i]\r\n        ps = period_start[i]\r\n        sd = start_date[i]\r\n        ed = end_date[i]\r\n        if cd > 0 and cd < ps:\r\n            continue\r\n        elif sd < ps < ed:\r\n            if rev[i] > sum_payments[i]:\r\n                results[i] = rev[i] - sum_payments[i]\r\n            else:\r\n                results[i] = 0\r\n    return results\r\n\r\n```\r\n\r\n\r\nHere is the slow code. I just changed the type annotations to Python 3:\r\n\r\n```\r\n%%cython\r\n\r\nimport cython\r\nimport numpy as np\r\n\r\n@cython.boundscheck(False)\r\n@cython.wraparound(False)\r\ndef calc_unbilled_cy2(cancel_date: np.ndarray[np.int64_t],\r\n                    period_start: np.ndarray[np.int64_t],\r\n                    start_date: np.ndarray[np.int64_t],\r\n                    end_date: np.ndarray[np.int64_t],\r\n                    rev: np.ndarray[np.int64_t],\r\n                    sum_payments: np.ndarray[np.int64_t]):\r\n    results: np.ndarray[np.float64_t] = np.full(rev.shape[0], np.nan, dtype=np.float64)\r\n    i: cython.int\r\n    \r\n    for i in range(rev.shape[0]):\r\n        cd:cython.long = cancel_date[i]\r\n        ps:cython.long = period_start[i]\r\n        sd:cython.long = start_date[i]\r\n        ed:cython.long = end_date[i]\r\n        if cd > 0 and cd < ps:\r\n            continue\r\n        elif sd < ps < ed:\r\n            if rev[i] > sum_payments[i]:\r\n                results[i] = rev[i] - sum_payments[i]\r\n            else:\r\n                results[i] = 0\r\n    return results\r\n\r\n```\n\n### Code to reproduce the behaviour:\n\nThis is fast\r\n\r\n```pycon\r\n>>> %%timeit\r\n>>> calc_unbilled_cy(*(ser.astype(int).to_numpy() for name, ser in bill_100k.items()))\r\n```\r\n\r\nThis is slow\r\n```pycon\r\n>>> %%timeit\r\n>>> calc_unbilled_cy2(*(ser.astype(int).to_numpy() for name, ser in bill_100k.items()))\r\n```\r\n\n\n### Expected behaviour\n\nThe code using Python 3 annotations runs at the same speed as the \"cython\" code.\n\n### OS\n\nmac02\n\n### Python version\n\n3.10.13\n\n### Cython version\n\n3.0.4\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "My guess would be that `np.ndarray[np.int64_t]` isn't handled when in an annotation. Part of the issue is that  the full np.ndarray syntax isn't valid Python Syntax (e.g `np.ndarray[np.int64_t, ndim=2]` so can't really go in an annotation.\r\n\r\nAlthough you aren't using that here, I think it's the reason we haven't yet supported that feature in annotations.",
            "created_at": "2023-11-11T09:30:36Z",
            "html_url": "https://github.com/cython/cython/issues/5811#issuecomment-1806763173",
            "id": 1806763173,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5811",
            "node_id": "IC_kwDOABDGAc5rsQSl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1806763173/reactions"
            },
            "updated_at": "2023-11-11T09:30:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1806763173",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `np.ndarray[np.int64_t]` isn't handled when in an annotation.\n\nRight. The canonical answer is: use memoryviews.\n\n",
            "created_at": "2023-11-11T14:39:44Z",
            "html_url": "https://github.com/cython/cython/issues/5811#issuecomment-1806833671",
            "id": 1806833671,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5811",
            "node_id": "IC_kwDOABDGAc5rshgH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1806833671/reactions"
            },
            "updated_at": "2023-11-11T14:39:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1806833671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5811/comments",
    "created_at": "2023-11-11T03:03:14Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5811/events",
    "html_url": "https://github.com/cython/cython/issues/5811",
    "id": 1988678750,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5811/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc52iNRe",
    "number": 5811,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5811/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5811/timeline",
    "title": "[BUG] Cython 3 regression when using Python 3 typehints - runs 10x slower",
    "updated_at": "2023-11-11T14:39:44Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5811",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/119405?v=4",
        "events_url": "https://api.github.com/users/mattharrison/events{/privacy}",
        "followers_url": "https://api.github.com/users/mattharrison/followers",
        "following_url": "https://api.github.com/users/mattharrison/following{/other_user}",
        "gists_url": "https://api.github.com/users/mattharrison/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mattharrison",
        "id": 119405,
        "login": "mattharrison",
        "node_id": "MDQ6VXNlcjExOTQwNQ==",
        "organizations_url": "https://api.github.com/users/mattharrison/orgs",
        "received_events_url": "https://api.github.com/users/mattharrison/received_events",
        "repos_url": "https://api.github.com/users/mattharrison/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mattharrison/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mattharrison/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mattharrison"
    }
}