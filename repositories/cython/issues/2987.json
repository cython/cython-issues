{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Indexing a 2d view in a `prange` will generate some unnecessary python interactions related to the GIL.\r\n\r\nHere is a reproducing example. LMK if I can help with anything.\r\n\r\n```python\r\n#cython: boundscheck=False\r\n#cython: language_level=3\r\nfrom cython.parallel import prange\r\n\r\n# Indexing a 2d view in a prange loop: generates lots of python interactions.\r\ndef sum_2d_a(float[:, :] view_2d):\r\n\r\n    cdef:\r\n        float out = 0\r\n        int row_idx = 0\r\n\r\n    for row_idx in prange(view_2d.shape[0], nogil=True):\r\n        out += sum_1d_a(view_2d[row_idx, :])\r\n        # lots of python interactions at the end of the loop\r\n\r\n    return out\r\n\r\ncdef float sum_1d_a(float[:] view_1d) nogil:\r\n    return 3.4  # irrelevant code\r\n\r\n\r\n# workaround: pass the whole 2d view and the row index. No interactions in this case.\r\ndef sum_2d_b(float[:, :] view_2d):\r\n\r\n    cdef:\r\n        float out = 0\r\n        int row_idx = 0\r\n\r\n    for row_idx in prange(view_2d.shape[0], nogil=True):\r\n        out += sum_1d_b(view_2d, row_idx)\r\n        # no python interaction\r\n\r\n    return out\r\n\r\ncdef float sum_1d_b(float[:, :] view_2d, int row_idx) nogil:\r\n    return 3.4  # irrelevant code\r\n```\r\n\r\nversion : 0.29.6",
    "closed_at": "2020-05-19T16:08:00Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Creation and (last) deletion of a slice require the GIL (to prevent the underlying memoryview from being deleted before the slice). If not done internally, this happens in the `__PYX_{INC,DEC}_MEMVIEW` utilities. Even if we had stronger analysis, we'd have to know that sum_1d_b doesn't cache it away somewhere, so it's hard to see how we'd do better here. ",
            "created_at": "2019-06-08T21:13:39Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-500164331",
            "id": 500164331,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDE2NDMzMQ==",
            "updated_at": "2019-06-08T21:13:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/500164331",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for your feedback.\r\n\r\nI'm a bit confused about memory views needing the GIL, because changing `prange` to `range` will remove the python interactions. Even in a `with nogil:` context manager.",
            "created_at": "2019-06-14T20:34:49Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-502254423",
            "id": 502254423,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjI1NDQyMw==",
            "updated_at": "2019-06-14T20:34:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/502254423",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        },
        {
            "author_association": "NONE",
            "body": "@robertwb to clarify my comment above:\r\n\r\nWhen using `range`, no GIL-related interaction:\r\n\r\n```py\r\ndef sum_2d_a(float[:, :] view_2d):\r\n\r\n    cdef:\r\n        float out = 0\r\n        int row_idx = 0\r\n\r\n    for row_idx in range(view_2d.shape[0], nogil=True):\r\n        out += sum_1d_a(view_2d[row_idx, :])  # no interactions here\r\n```\r\n\r\nUsing `prange`, lots of GIL-related interactions:\r\n\r\n```py\r\ndef sum_2d_a(float[:, :] view_2d):\r\n\r\n    cdef:\r\n        float out = 0\r\n        int row_idx = 0\r\n\r\n    for row_idx in prange(view_2d.shape[0], nogil=True):\r\n        out += sum_1d_a(view_2d[row_idx, :])  # interactions here\r\n```\r\n\r\nAs you can see in the first example, the GIL is released when the slice is created.\r\n\r\nThe only difference between the two examples is the use of `range` vs `prange`.\r\n\r\nAgain I'm happy to assist any way I can\r\n\r\nThanks",
            "created_at": "2020-05-14T13:03:41Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-628620047",
            "id": 628620047,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODYyMDA0Nw==",
            "updated_at": "2020-05-14T13:04:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628620047",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> for row_idx in range(view_2d.shape[0], nogil=True):\r\n\r\nWe should make sure this raises an error. `range()` doesn't take keyword arguments (definitely not one called `nogil`). In any case, this does not release the GIL, and thus the loop does not need to re-acquire it.\r\n\r\n@NicolasHug, taking a slice of a memoryview needs to create a new reference to the buffer owner object. Refcounting requires the GIL. So there needs to be at least some interaction with the Python runtime. Maybe you can get away with calling the function once per (larger) slice and not once for each row? E.g. use `prange(N)` for N threads and then slice the data into N slices yourself, passing down a 2D view.",
            "created_at": "2020-05-14T14:13:21Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-628664002",
            "id": 628664002,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODY2NDAwMg==",
            "updated_at": "2020-05-14T14:13:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628664002",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for the feedback @scoder.\r\n\r\nMy bad, what I meant to write was this, and I still don't see any Python interaction when creating the slices:\r\n\r\n```py\r\n    with nogil:\r\n        for row_idx in range(view_2d.shape[0]):\r\n            out += sum_1d_a(view_2d[row_idx, :])  # no interactions\r\n```\r\n\r\n>  Maybe you can get away with calling the function once per (larger) slice and not once for each row? E.g. use prange(N) for N threads and then slice the data into N slices yourself, passing down a 2D view.\r\n\r\nThis would work in this simple example but my actual use-case is more tricky than that and this workaround could not apply. I do need to have the prange over the rows (sometimes columns) of a big array with a custom dtype. [here is where](https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/ensemble/_hist_gradient_boosting/histogram.pyx#L24), in case you're interested",
            "created_at": "2020-05-14T14:26:35Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-628671825",
            "id": 628671825,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODY3MTgyNQ==",
            "updated_at": "2020-05-14T14:26:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628671825",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ok, I finally looked at the code that your initial example generates and it's essentially this:\r\n```c\r\n                    Py_BEGIN_ALLOW_THREADS\r\n…\r\n                    #ifdef _OPENMP\r\n                    #pragma omp for firstprivate(__pyx_v_row_idx) lastprivate(__pyx_v_row_idx)\r\n                    #endif /* _OPENMP */\r\n                    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){\r\n                        if (__pyx_parallel_why < 2)\r\n                        {\r\n                            __pyx_v_row_idx = (int)(0 + 1 * __pyx_t_2);\r\n\r\n                            /* \"test.pyx\":13\r\n *         out += sum_1d_a(view_2d[row_idx, :])             # <<<<<<<<<<<<<<\r\n */\r\n                            __pyx_t_4.data = __pyx_v_view_2d.data;\r\n                            __pyx_t_4.memview = __pyx_v_view_2d.memview;\r\n                            __PYX_INC_MEMVIEW(&__pyx_t_4, 0);\r\n                            {\r\n    Py_ssize_t __pyx_tmp_idx = __pyx_v_row_idx;\r\n        Py_ssize_t __pyx_tmp_shape = __pyx_v_view_2d.shape[0];\r\n    Py_ssize_t __pyx_tmp_stride = __pyx_v_view_2d.strides[0];\r\n        if (__pyx_tmp_idx < 0)\r\n            __pyx_tmp_idx += __pyx_tmp_shape;\r\n        if ((0)) __PYX_ERR(0, 13, __pyx_L8_error)\r\n        __pyx_t_4.data += __pyx_tmp_idx * __pyx_tmp_stride;\r\n}\r\n\r\n__pyx_t_4.shape[0] = __pyx_v_view_2d.shape[1];\r\n__pyx_t_4.strides[0] = __pyx_v_view_2d.strides[1];\r\n    __pyx_t_4.suboffsets[0] = -1;\r\n\r\n__pyx_v_out = (__pyx_v_out + __pyx_f_4test_sum_1d_a(__pyx_t_4));\r\n                            __PYX_XDEC_MEMVIEW(&__pyx_t_4, 0);\r\n                            __pyx_t_4.memview = NULL; __pyx_t_4.data = NULL;\r\n…\r\n                            #ifdef _OPENMP\r\n                            #pragma omp flush(__pyx_parallel_why)\r\n                            #endif /* _OPENMP */\r\n                        }\r\n                    }\r\n                    #ifdef _OPENMP\r\n                    Py_END_ALLOW_THREADS\r\n```\r\nBad formatting aside, that looks fairly reasonable to me. I don't see any excessive \"Python interaction\" here. There is a bit of unused error handling code in there which I stripped above and which could probably be avoided, but the C compiler will be happy to discard it.",
            "created_at": "2020-05-14T16:31:19Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-628747721",
            "id": 628747721,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODc0NzcyMQ==",
            "updated_at": "2020-05-14T16:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628747721",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> taking a slice of a memoryview needs to create a new reference to the buffer owner object. Refcounting requires the GIL.\r\n\r\nThe documentation claims differently https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#memoryviews-and-the-gil?\r\n\r\n(And based on the generated code the documentation looks like it's right)",
            "created_at": "2020-05-14T16:31:42Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-628747962",
            "id": 628747962,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODc0Nzk2Mg==",
            "updated_at": "2020-05-14T16:36:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628747962",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for taking the time @scoder\r\n\r\nI might be wrong in my diagnosis about Python interaction being the cause of my problem, but it seems that there is still something fishy going on. Maybe it's time to explain more in details what motivated me to open this issue:\r\n\r\nIn scikit-learn, we have some benchmark code that runs in about 45 seconds when using the \"full\" indexing on 2d views, i.e. always using `some_2d_view[row, col]`.\r\nHowever when we simplify the code and pass 1d views (`some_2d_view[row, :]`) that benchmarks takes up to about 100 seconds.\r\n\r\nFor info, here's the diff between the two branches (the slow branch is in green):\r\n\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx b/sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\r\nindex d346aabdac..78f7b3906b 100644\r\n--- a/sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\r\n+++ b/sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\r\n@@ -30,12 +30,12 @@ def _predict_from_numeric_data(\r\n         int i\r\n \r\n     for i in prange(numeric_data.shape[0], schedule='static', nogil=True):\r\n-        out[i] = _predict_one_from_numeric_data(nodes, numeric_data, i)\r\n+        out[i] = _predict_one_from_numeric_data(nodes, numeric_data[i], i)\r\n \r\n \r\n cdef inline Y_DTYPE_C _predict_one_from_numeric_data(\r\n         node_struct [:] nodes,\r\n-        const X_DTYPE_C [:, :] numeric_data,\r\n+        const X_DTYPE_C [:] numeric_data,\r\n         const int row) nogil:\r\n     # Need to pass the whole array and the row index, else prange won't work.\r\n     # See issue Cython #2798\r\n@@ -47,13 +47,13 @@ cdef inline Y_DTYPE_C _predict_one_from_numeric_data(\r\n         if node.is_leaf:\r\n             return node.value\r\n \r\n-        if isnan(numeric_data[row, node.feature_idx]):\r\n+        if isnan(numeric_data[node.feature_idx]):\r\n             if node.missing_go_to_left:\r\n                 node = nodes[node.left]\r\n             else:\r\n                 node = nodes[node.right]\r\n         else:\r\n-            if numeric_data[row, node.feature_idx] <= node.threshold:\r\n+            if numeric_data[node.feature_idx] <= node.threshold:\r\n                 node = nodes[node.left]\r\n             else:\r\n                 node = nodes[node.right]\r\n@@ -69,13 +69,13 @@ def _predict_from_binned_data(\r\n         int i\r\n \r\n     for i in prange(binned_data.shape[0], schedule='static', nogil=True):\r\n-        out[i] = _predict_one_from_binned_data(nodes, binned_data, i,\r\n+        out[i] = _predict_one_from_binned_data(nodes, binned_data[i], i,\r\n                                                missing_values_bin_idx)\r\n \r\n \r\n cdef inline Y_DTYPE_C _predict_one_from_binned_data(\r\n         node_struct [:] nodes,\r\n-        const X_BINNED_DTYPE_C [:, :] binned_data,\r\n+        const X_BINNED_DTYPE_C [:] binned_data,\r\n         const int row,\r\n         const unsigned char missing_values_bin_idx) nogil:\r\n     # Need to pass the whole array and the row index, else prange won't work.\r\n@@ -87,13 +87,13 @@ cdef inline Y_DTYPE_C _predict_one_from_binned_data(\r\n     while True:\r\n         if node.is_leaf:\r\n             return node.value\r\n-        if binned_data[row, node.feature_idx] ==  missing_values_bin_idx:\r\n+        if binned_data[ node.feature_idx] ==  missing_values_bin_idx:\r\n             if node.missing_go_to_left:\r\n                 node = nodes[node.left]\r\n             else:\r\n                 node = nodes[node.right]\r\n         else:\r\n-            if binned_data[row, node.feature_idx] <= node.bin_threshold:\r\n+            if binned_data[ node.feature_idx] <= node.bin_threshold:\r\n                 node = nodes[node.left]\r\n             else:\r\n                 node = nodes[node.right]\r\ndiff --git a/sklearn/ensemble/_hist_gradient_boosting/histogram.pyx b/sklearn/ensemble/_hist_gradient_boosting/histogram.pyx\r\nindex 8bd7c4ee8b..578b48995f 100644\r\n--- a/sklearn/ensemble/_hist_gradient_boosting/histogram.pyx\r\n+++ b/sklearn/ensemble/_hist_gradient_boosting/histogram.pyx\r\n@@ -155,7 +155,7 @@ cdef class HistogramBuilder:\r\n             for feature_idx in prange(n_features, schedule='static'):\r\n                 # Compute histogram of each feature\r\n                 self._compute_histogram_brute_single_feature(\r\n-                    feature_idx, sample_indices, histograms)\r\n+                    feature_idx, sample_indices, histograms[feature_idx])\r\n \r\n         return histograms\r\n \r\n@@ -163,7 +163,7 @@ cdef class HistogramBuilder:\r\n             HistogramBuilder self,\r\n             const int feature_idx,\r\n             const unsigned int [::1] sample_indices,  # IN\r\n-            hist_struct [:, ::1] histograms) nogil:  # OUT\r\n+            hist_struct [::1] histograms) nogil:  # OUT\r\n         \"\"\"Compute the histogram for a given feature.\"\"\"\r\n \r\n         cdef:\r\n@@ -180,20 +180,20 @@ cdef class HistogramBuilder:\r\n \r\n         if root_node:\r\n             if hessians_are_constant:\r\n-                _build_histogram_root_no_hessian(feature_idx, X_binned,\r\n+                _build_histogram_root_no_hessian(X_binned,\r\n                                                  ordered_gradients,\r\n                                                  histograms)\r\n             else:\r\n-                _build_histogram_root(feature_idx, X_binned,\r\n+                _build_histogram_root(X_binned,\r\n                                       ordered_gradients, ordered_hessians,\r\n                                       histograms)\r\n         else:\r\n             if hessians_are_constant:\r\n-                _build_histogram_no_hessian(feature_idx,\r\n+                _build_histogram_no_hessian(\r\n                                             sample_indices, X_binned,\r\n                                             ordered_gradients, histograms)\r\n             else:\r\n-                _build_histogram(feature_idx, sample_indices,\r\n+                _build_histogram(sample_indices,\r\n                                  X_binned, ordered_gradients,\r\n                                  ordered_hessians, histograms)\r\n \r\n@@ -234,11 +234,11 @@ cdef class HistogramBuilder:\r\n \r\n         for feature_idx in prange(n_features, schedule='static', nogil=True):\r\n             # Compute histogram of each feature\r\n-            _subtract_histograms(feature_idx,\r\n+            _subtract_histograms(\r\n                                  self.n_bins,\r\n-                                 parent_histograms,\r\n-                                 sibling_histograms,\r\n-                                 histograms)\r\n+                                 parent_histograms[feature_idx],\r\n+                                 sibling_histograms[feature_idx],\r\n+                                 histograms[feature_idx])\r\n         return histograms\r\n \r\n \r\n@@ -267,36 +267,34 @@ cpdef void _build_histogram_naive(\r\n \r\n \r\n cpdef void _subtract_histograms(\r\n-        const int feature_idx,\r\n         unsigned int n_bins,\r\n-        hist_struct [:, ::1] hist_a,  # IN\r\n-        hist_struct [:, ::1] hist_b,  # IN\r\n-        hist_struct [:, ::1] out) nogil:  # OUT\r\n+        hist_struct [::1] hist_a,  # IN\r\n+        hist_struct [::1] hist_b,  # IN\r\n+        hist_struct [::1] out) nogil:  # OUT\r\n     \"\"\"compute (hist_a - hist_b) in out\"\"\"\r\n     cdef:\r\n         unsigned int i = 0\r\n     for i in range(n_bins):\r\n-        out[feature_idx, i].sum_gradients = (\r\n-            hist_a[feature_idx, i].sum_gradients -\r\n-            hist_b[feature_idx, i].sum_gradients\r\n+        out[i].sum_gradients = (\r\n+            hist_a[i].sum_gradients -\r\n+            hist_b[i].sum_gradients\r\n         )\r\n-        out[feature_idx, i].sum_hessians = (\r\n-            hist_a[feature_idx, i].sum_hessians -\r\n-            hist_b[feature_idx, i].sum_hessians\r\n+        out[i].sum_hessians = (\r\n+            hist_a[i].sum_hessians -\r\n+            hist_b[i].sum_hessians\r\n         )\r\n-        out[feature_idx, i].count = (\r\n-            hist_a[feature_idx, i].count -\r\n-            hist_b[feature_idx, i].count\r\n+        out[i].count = (\r\n+            hist_a[i].count -\r\n+            hist_b[i].count\r\n         )\r\n \r\n \r\n cpdef void _build_histogram(\r\n-        const int feature_idx,\r\n         const unsigned int [::1] sample_indices,  # IN\r\n         const X_BINNED_DTYPE_C [::1] binned_feature,  # IN\r\n         const G_H_DTYPE_C [::1] ordered_gradients,  # IN\r\n         const G_H_DTYPE_C [::1] ordered_hessians,  # IN\r\n-        hist_struct [:, ::1] out) nogil:  # OUT\r\n+        hist_struct [::1] out) nogil:  # OUT\r\n     \"\"\"Return histogram for a given feature.\"\"\"\r\n     cdef:\r\n         unsigned int i = 0\r\n@@ -315,34 +313,33 @@ cpdef void _build_histogram(\r\n         bin_2 = binned_feature[sample_indices[i + 2]]\r\n         bin_3 = binned_feature[sample_indices[i + 3]]\r\n \r\n-        out[feature_idx, bin_0].sum_gradients += ordered_gradients[i]\r\n-        out[feature_idx, bin_1].sum_gradients += ordered_gradients[i + 1]\r\n-        out[feature_idx, bin_2].sum_gradients += ordered_gradients[i + 2]\r\n-        out[feature_idx, bin_3].sum_gradients += ordered_gradients[i + 3]\r\n+        out[bin_0].sum_gradients += ordered_gradients[i]\r\n+        out[bin_1].sum_gradients += ordered_gradients[i + 1]\r\n+        out[bin_2].sum_gradients += ordered_gradients[i + 2]\r\n+        out[bin_3].sum_gradients += ordered_gradients[i + 3]\r\n \r\n-        out[feature_idx, bin_0].sum_hessians += ordered_hessians[i]\r\n-        out[feature_idx, bin_1].sum_hessians += ordered_hessians[i + 1]\r\n-        out[feature_idx, bin_2].sum_hessians += ordered_hessians[i + 2]\r\n-        out[feature_idx, bin_3].sum_hessians += ordered_hessians[i + 3]\r\n+        out[bin_0].sum_hessians += ordered_hessians[i]\r\n+        out[bin_1].sum_hessians += ordered_hessians[i + 1]\r\n+        out[bin_2].sum_hessians += ordered_hessians[i + 2]\r\n+        out[bin_3].sum_hessians += ordered_hessians[i + 3]\r\n \r\n-        out[feature_idx, bin_0].count += 1\r\n-        out[feature_idx, bin_1].count += 1\r\n-        out[feature_idx, bin_2].count += 1\r\n-        out[feature_idx, bin_3].count += 1\r\n+        out[bin_0].count += 1\r\n+        out[bin_1].count += 1\r\n+        out[bin_2].count += 1\r\n+        out[bin_3].count += 1\r\n \r\n     for i in range(unrolled_upper, n_node_samples):\r\n         bin_idx = binned_feature[sample_indices[i]]\r\n-        out[feature_idx, bin_idx].sum_gradients += ordered_gradients[i]\r\n-        out[feature_idx, bin_idx].sum_hessians += ordered_hessians[i]\r\n-        out[feature_idx, bin_idx].count += 1\r\n+        out[bin_idx].sum_gradients += ordered_gradients[i]\r\n+        out[bin_idx].sum_hessians += ordered_hessians[i]\r\n+        out[bin_idx].count += 1\r\n \r\n \r\n cpdef void _build_histogram_no_hessian(\r\n-        const int feature_idx,\r\n         const unsigned int [::1] sample_indices,  # IN\r\n         const X_BINNED_DTYPE_C [::1] binned_feature,  # IN\r\n         const G_H_DTYPE_C [::1] ordered_gradients,  # IN\r\n-        hist_struct [:, ::1] out) nogil:  # OUT\r\n+        hist_struct [::1] out) nogil:  # OUT\r\n     \"\"\"Return histogram for a given feature, not updating hessians.\r\n \r\n     Used when the hessians of the loss are constant (typically LS loss).\r\n@@ -365,28 +362,27 @@ cpdef void _build_histogram_no_hessian(\r\n         bin_2 = binned_feature[sample_indices[i + 2]]\r\n         bin_3 = binned_feature[sample_indices[i + 3]]\r\n \r\n-        out[feature_idx, bin_0].sum_gradients += ordered_gradients[i]\r\n-        out[feature_idx, bin_1].sum_gradients += ordered_gradients[i + 1]\r\n-        out[feature_idx, bin_2].sum_gradients += ordered_gradients[i + 2]\r\n-        out[feature_idx, bin_3].sum_gradients += ordered_gradients[i + 3]\r\n+        out[bin_0].sum_gradients += ordered_gradients[i]\r\n+        out[bin_1].sum_gradients += ordered_gradients[i + 1]\r\n+        out[bin_2].sum_gradients += ordered_gradients[i + 2]\r\n+        out[bin_3].sum_gradients += ordered_gradients[i + 3]\r\n \r\n-        out[feature_idx, bin_0].count += 1\r\n-        out[feature_idx, bin_1].count += 1\r\n-        out[feature_idx, bin_2].count += 1\r\n-        out[feature_idx, bin_3].count += 1\r\n+        out[bin_0].count += 1\r\n+        out[bin_1].count += 1\r\n+        out[bin_2].count += 1\r\n+        out[bin_3].count += 1\r\n \r\n     for i in range(unrolled_upper, n_node_samples):\r\n         bin_idx = binned_feature[sample_indices[i]]\r\n-        out[feature_idx, bin_idx].sum_gradients += ordered_gradients[i]\r\n-        out[feature_idx, bin_idx].count += 1\r\n+        out[bin_idx].sum_gradients += ordered_gradients[i]\r\n+        out[bin_idx].count += 1\r\n \r\n \r\n cpdef void _build_histogram_root(\r\n-        const int feature_idx,\r\n         const X_BINNED_DTYPE_C [::1] binned_feature,  # IN\r\n         const G_H_DTYPE_C [::1] all_gradients,  # IN\r\n         const G_H_DTYPE_C [::1] all_hessians,  # IN\r\n-        hist_struct [:, ::1] out) nogil:  # OUT\r\n+        hist_struct [::1] out) nogil:  # OUT\r\n     \"\"\"Compute histogram of the root node.\r\n \r\n     Unlike other nodes, the root node has to find the split among *all* the\r\n@@ -412,33 +408,32 @@ cpdef void _build_histogram_root(\r\n         bin_2 = binned_feature[i + 2]\r\n         bin_3 = binned_feature[i + 3]\r\n \r\n-        out[feature_idx, bin_0].sum_gradients += all_gradients[i]\r\n-        out[feature_idx, bin_1].sum_gradients += all_gradients[i + 1]\r\n-        out[feature_idx, bin_2].sum_gradients += all_gradients[i + 2]\r\n-        out[feature_idx, bin_3].sum_gradients += all_gradients[i + 3]\r\n+        out[bin_0].sum_gradients += all_gradients[i]\r\n+        out[bin_1].sum_gradients += all_gradients[i + 1]\r\n+        out[bin_2].sum_gradients += all_gradients[i + 2]\r\n+        out[bin_3].sum_gradients += all_gradients[i + 3]\r\n \r\n-        out[feature_idx, bin_0].sum_hessians += all_hessians[i]\r\n-        out[feature_idx, bin_1].sum_hessians += all_hessians[i + 1]\r\n-        out[feature_idx, bin_2].sum_hessians += all_hessians[i + 2]\r\n-        out[feature_idx, bin_3].sum_hessians += all_hessians[i + 3]\r\n+        out[bin_0].sum_hessians += all_hessians[i]\r\n+        out[bin_1].sum_hessians += all_hessians[i + 1]\r\n+        out[bin_2].sum_hessians += all_hessians[i + 2]\r\n+        out[bin_3].sum_hessians += all_hessians[i + 3]\r\n \r\n-        out[feature_idx, bin_0].count += 1\r\n-        out[feature_idx, bin_1].count += 1\r\n-        out[feature_idx, bin_2].count += 1\r\n-        out[feature_idx, bin_3].count += 1\r\n+        out[bin_0].count += 1\r\n+        out[bin_1].count += 1\r\n+        out[bin_2].count += 1\r\n+        out[bin_3].count += 1\r\n \r\n     for i in range(unrolled_upper, n_samples):\r\n         bin_idx = binned_feature[i]\r\n-        out[feature_idx, bin_idx].sum_gradients += all_gradients[i]\r\n-        out[feature_idx, bin_idx].sum_hessians += all_hessians[i]\r\n-        out[feature_idx, bin_idx].count += 1\r\n+        out[bin_idx].sum_gradients += all_gradients[i]\r\n+        out[bin_idx].sum_hessians += all_hessians[i]\r\n+        out[bin_idx].count += 1\r\n \r\n \r\n cpdef void _build_histogram_root_no_hessian(\r\n-        const int feature_idx,\r\n         const X_BINNED_DTYPE_C [::1] binned_feature,  # IN\r\n         const G_H_DTYPE_C [::1] all_gradients,  # IN\r\n-        hist_struct [:, ::1] out) nogil:  # OUT\r\n+        hist_struct [::1] out) nogil:  # OUT\r\n     \"\"\"Compute histogram of the root node, not updating hessians.\r\n \r\n     Used when the hessians of the loss are constant (typically LS loss).\r\n@@ -461,17 +456,17 @@ cpdef void _build_histogram_root_no_hessian(\r\n         bin_2 = binned_feature[i + 2]\r\n         bin_3 = binned_feature[i + 3]\r\n \r\n-        out[feature_idx, bin_0].sum_gradients += all_gradients[i]\r\n-        out[feature_idx, bin_1].sum_gradients += all_gradients[i + 1]\r\n-        out[feature_idx, bin_2].sum_gradients += all_gradients[i + 2]\r\n-        out[feature_idx, bin_3].sum_gradients += all_gradients[i + 3]\r\n+        out[bin_0].sum_gradients += all_gradients[i]\r\n+        out[bin_1].sum_gradients += all_gradients[i + 1]\r\n+        out[bin_2].sum_gradients += all_gradients[i + 2]\r\n+        out[bin_3].sum_gradients += all_gradients[i + 3]\r\n \r\n-        out[feature_idx, bin_0].count += 1\r\n-        out[feature_idx, bin_1].count += 1\r\n-        out[feature_idx, bin_2].count += 1\r\n-        out[feature_idx, bin_3].count += 1\r\n+        out[bin_0].count += 1\r\n+        out[bin_1].count += 1\r\n+        out[bin_2].count += 1\r\n+        out[bin_3].count += 1\r\n \r\n     for i in range(unrolled_upper, n_samples):\r\n         bin_idx = binned_feature[i]\r\n-        out[feature_idx, bin_idx].sum_gradients += all_gradients[i]\r\n-        out[feature_idx, bin_idx].count += 1\r\n+        out[bin_idx].sum_gradients += all_gradients[i]\r\n+        out[bin_idx].count += 1\r\ndiff --git a/sklearn/ensemble/_hist_gradient_boosting/splitting.pyx b/sklearn/ensemble/_hist_gradient_boosting/splitting.pyx\r\nindex 984cc6767f..cb98d1e069 100644\r\n--- a/sklearn/ensemble/_hist_gradient_boosting/splitting.pyx\r\n+++ b/sklearn/ensemble/_hist_gradient_boosting/splitting.pyx\r\n@@ -437,7 +437,7 @@ cdef class Splitter:\r\n \r\n                 self._find_best_bin_to_split_left_to_right(\r\n                     feature_idx, has_missing_values[feature_idx],\r\n-                    histograms, n_samples, sum_gradients, sum_hessians,\r\n+                    histograms[feature_idx], n_samples, sum_gradients, sum_hessians,\r\n                     value, monotonic_cst[feature_idx],\r\n                     lower_bound, upper_bound, &split_infos[feature_idx])\r\n \r\n@@ -446,7 +446,7 @@ cdef class Splitter:\r\n                     # sending the nans to the left child would lead to a higher\r\n                     # gain\r\n                     self._find_best_bin_to_split_right_to_left(\r\n-                        feature_idx, histograms, n_samples,\r\n+                        feature_idx, histograms[feature_idx], n_samples,\r\n                         sum_gradients, sum_hessians,\r\n                         value, monotonic_cst[feature_idx],\r\n                         lower_bound, upper_bound, &split_infos[feature_idx])\r\n@@ -491,7 +491,7 @@ cdef class Splitter:\r\n             Splitter self,\r\n             unsigned int feature_idx,\r\n             unsigned char has_missing_values,\r\n-            const hist_struct [:, ::1] histograms,  # IN\r\n+            const hist_struct [::1] histograms,  # IN\r\n             unsigned int n_samples,\r\n             Y_DTYPE_C sum_gradients,\r\n             Y_DTYPE_C sum_hessians,\r\n@@ -540,17 +540,17 @@ cdef class Splitter:\r\n         loss_current_node = _loss_from_value(value, sum_gradients)\r\n \r\n         for bin_idx in range(end):\r\n-            n_samples_left += histograms[feature_idx, bin_idx].count\r\n+            n_samples_left += histograms[bin_idx].count\r\n             n_samples_right = n_samples_ - n_samples_left\r\n \r\n             if self.hessians_are_constant:\r\n-                sum_hessian_left += histograms[feature_idx, bin_idx].count\r\n+                sum_hessian_left += histograms[bin_idx].count\r\n             else:\r\n                 sum_hessian_left += \\\r\n-                    histograms[feature_idx, bin_idx].sum_hessians\r\n+                    histograms[bin_idx].sum_hessians\r\n             sum_hessian_right = sum_hessians - sum_hessian_left\r\n \r\n-            sum_gradient_left += histograms[feature_idx, bin_idx].sum_gradients\r\n+            sum_gradient_left += histograms[bin_idx].sum_gradients\r\n             sum_gradient_right = sum_gradients - sum_gradient_left\r\n \r\n             if n_samples_left < self.min_samples_leaf:\r\n@@ -605,7 +605,7 @@ cdef class Splitter:\r\n     cdef void _find_best_bin_to_split_right_to_left(\r\n             self,\r\n             unsigned int feature_idx,\r\n-            const hist_struct [:, ::1] histograms,  # IN\r\n+            const hist_struct [::1] histograms,  # IN\r\n             unsigned int n_samples,\r\n             Y_DTYPE_C sum_gradients,\r\n             Y_DTYPE_C sum_hessians,\r\n@@ -653,18 +653,18 @@ cdef class Splitter:\r\n         loss_current_node = _loss_from_value(value, sum_gradients)\r\n \r\n         for bin_idx in range(start, -1, -1):\r\n-            n_samples_right += histograms[feature_idx, bin_idx + 1].count\r\n+            n_samples_right += histograms[bin_idx + 1].count\r\n             n_samples_left = n_samples_ - n_samples_right\r\n \r\n             if self.hessians_are_constant:\r\n-                sum_hessian_right += histograms[feature_idx, bin_idx + 1].count\r\n+                sum_hessian_right += histograms[bin_idx + 1].count\r\n             else:\r\n                 sum_hessian_right += \\\r\n-                    histograms[feature_idx, bin_idx + 1].sum_hessians\r\n+                    histograms[bin_idx + 1].sum_hessians\r\n             sum_hessian_left = sum_hessians - sum_hessian_right\r\n \r\n             sum_gradient_right += \\\r\n-                histograms[feature_idx, bin_idx + 1].sum_gradients\r\n+                histograms[bin_idx + 1].sum_gradients\r\n             sum_gradient_left = sum_gradients - sum_gradient_right\r\n \r\n             if n_samples_right < self.min_samples_leaf:\r\n\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\nNow, the reason why I think that slow-down comes from the interactions, is because as far as I can tell, the generated C-code looks just fine. For example, `out[bin_0].count += 1`  generates:\r\n\r\n```c\r\n__pyx_t_28 = __pyx_v_bin_0;\r\n(*((struct __pyx_t_7sklearn_8ensemble_23_hist_gradient_boosting_6common_hist_struct *)\r\n   ( /* dim=0 */ ((char *)\r\n   (((struct __pyx_t_7sklearn_8ensemble_23_hist_gradient_boosting_6common_hist_struct *)\r\n    __pyx_v_out.data)\r\n    + __pyx_t_28)) ))).count += 1\r\n```\r\n\r\nwhile  `out[feature_idx, bin_0].count += 1` generates\r\n\r\n```c\r\n__pyx_t_36 = __pyx_v_feature_idx;\r\n__pyx_t_37 = __pyx_v_bin_0;\r\n(*((struct __pyx_t_7sklearn_8ensemble_23_hist_gradient_boosting_6common_hist_struct *)\r\n  ( /* dim=1 */ ((char *)\r\n  (((struct __pyx_t_7sklearn_8ensemble_23_hist_gradient_boosting_6common_hist_struct *) \r\n  ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_36 * __pyx_v_out.strides[0]) ))\r\n  + __pyx_t_37)) ))).count += 1;\r\n\r\n```\r\n\r\n(`out` is either declared as `hist_struct [::1] out` or as `hist_struct [:, ::1] out`)\r\n\r\nAs far as I can tell the first snippet uses less operations than the second one, as expected. And yet, its branch is much slower. So that's why I'm thinking the slow down might come from the generated interactions.\r\n\r\nThanks again for your time.",
            "created_at": "2020-05-14T17:52:38Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-628792263",
            "id": 628792263,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODc5MjI2Mw==",
            "updated_at": "2020-05-14T17:52:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628792263",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@NicolasHug any chance you could run your code through a C level profiler like callgrind or Linux `perf` to see where the time is spent? How many threads are you using for your timings?",
            "created_at": "2020-05-14T18:41:54Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-628818567",
            "id": 628818567,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODgxODU2Nw==",
            "updated_at": "2020-05-14T18:41:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628818567",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> How many threads are you using for your timings?\r\n\r\nI was using 4 threads, but I observe the same slowdown when setting OMP_NUM_THREADS to 1.\r\n\r\n> any chance you could run your code through a C level profiler\r\n\r\nOf course\r\n\r\nI used callgrind on a smaller benchmark (setting OMP_NUM_THREADS to 1 and enabling cython profiling, though I'm not sure this has any effect), and here are the logs:\r\n\r\n[callgrind.out.slow_one.txt](https://github.com/cython/cython/files/4631143/callgrind.out.slow_one.txt)\r\n[callgrind.out.fast_one.txt](https://github.com/cython/cython/files/4631144/callgrind.out.fast_one.txt)\r\n\r\nThe \"slow\" one is the one using 1d views.\r\n\r\nLoading these in `kcachegrind` we can observe that the slow one runs about 5 billions more instructions. Most of them are in a function called `_predict_from_numeric_data`. I'll paste below the code of that function for the \"fast\" and \"slow\" branches. Also, as far as I understand, those 5B additional instructions come from the function itself, not from its callees (could be wrong on this one). So the source of the slowdown should be somewhere in this diff (also provided the code for each function if you need) :\r\n\r\n\r\n```diff\r\n1c1\r\n< static pyobject *__pyx_pf_7sklearn_8ensemble_23_hist_gradient_boosting_10_predictor__predict_from_numeric_data(cython_unused pyobject *__pyx_self, __pyx_memviewslice __pyx_v_nodes, __pyx_memviewslice __pyx_v_numeric_data, __pyx_memviewslice __pyx_v_out) {\r\n---\r\n> static PyObject *__pyx_pf_7sklearn_8ensemble_23_hist_gradient_boosting_10_predictor__predict_from_numeric_data(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_nodes, __Pyx_memviewslice __pyx_v_numeric_data, __Pyx_memviewslice __pyx_v_out) {\r\n3a4\r\n>   __Pyx_TraceDeclarations\r\n8c9,11\r\n<   Py_ssize_t __pyx_t_4;\r\n---\r\n>   __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };\r\n>   Py_ssize_t __pyx_t_5;\r\n>   __Pyx_TraceFrameInit(__pyx_codeobj_)\r\n9a13\r\n>   __Pyx_TraceCall(\"_predict_from_numeric_data\", __pyx_f[0], 25, 0, __PYX_ERR(0, 25, __pyx_L1_error));\r\n11c15\r\n<   /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":32\r\n---\r\n>   /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":33\r\n15c19\r\n<  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data, i)\r\n---\r\n>  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data[i], i)\r\n25c29\r\n<         if (unlikely(!__pyx_v_numeric_data.memview)) { __Pyx_RaiseUnboundMemoryviewSliceNogil(\"numeric_data\"); __PYX_ERR(0, 32, __pyx_L4_error) }\r\n---\r\n>         if (unlikely(!__pyx_v_numeric_data.memview)) { __Pyx_RaiseUnboundMemoryviewSliceNogil(\"numeric_data\"); __PYX_ERR(0, 33, __pyx_L4_error) }\r\n28a33,37\r\n>             int __pyx_parallel_temp0 = ((int)0xbad0bad0);\r\n>             const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;\r\n>             PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;\r\n>             int __pyx_parallel_why;\r\n>             __pyx_parallel_why = 0;\r\n39c48\r\n<                 #pragma omp parallel private(__pyx_t_4)\r\n---\r\n>                 #pragma omp parallel private(__pyx_t_5) firstprivate(__pyx_t_4) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)\r\n42a52,57\r\n>                     #ifdef WITH_THREAD\r\n>                     PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n>                     #endif\r\n>                     Py_BEGIN_ALLOW_THREADS\r\n>                     #endif /* _OPENMP */\r\n>                     #ifdef _OPENMP\r\n45a61\r\n>                         if (__pyx_parallel_why < 2)\r\n49c65\r\n<                             /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":33\r\n---\r\n>                             /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":34\r\n52c68\r\n<  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data, i)             # <<<<<<<<<<<<<<\r\n---\r\n>  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data[i], i)             # <<<<<<<<<<<<<<\r\n56,57c72,121\r\n<                             __pyx_t_4 = __pyx_v_i;\r\n<                             *((__pyx_t_7sklearn_8ensemble_23_hist_gradient_boosting_6common_Y_DTYPE_C *) ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_4 * __pyx_v_out.strides[0]) )) = __pyx_f_7sklearn_8ensemble_23_hist_gradient_boosting_10_predictor__predict_one_from_numeric_data(__pyx_v_nodes, __pyx_v_numeric_data, __pyx_v_i);\r\n---\r\n>                             __pyx_t_4.data = __pyx_v_numeric_data.data;\r\n>                             __pyx_t_4.memview = __pyx_v_numeric_data.memview;\r\n>                             __PYX_INC_MEMVIEW(&__pyx_t_4, 0);\r\n>                             {\r\n>     Py_ssize_t __pyx_tmp_idx = __pyx_v_i;\r\n>     Py_ssize_t __pyx_tmp_stride = __pyx_v_numeric_data.strides[0];\r\n>         if ((0)) __PYX_ERR(0, 34, __pyx_L8_error)\r\n>         __pyx_t_4.data += __pyx_tmp_idx * __pyx_tmp_stride;\r\n> }\r\n> \r\n> __pyx_t_4.shape[0] = __pyx_v_numeric_data.shape[1];\r\n> __pyx_t_4.strides[0] = __pyx_v_numeric_data.strides[1];\r\n>     __pyx_t_4.suboffsets[0] = -1;\r\n> \r\n> __pyx_t_5 = __pyx_v_i;\r\n>                             *((__pyx_t_7sklearn_8ensemble_23_hist_gradient_boosting_6common_Y_DTYPE_C *) ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_5 * __pyx_v_out.strides[0]) )) = __pyx_f_7sklearn_8ensemble_23_hist_gradient_boosting_10_predictor__predict_one_from_numeric_data(__pyx_v_nodes, __pyx_t_4, __pyx_v_i);\r\n>                             __PYX_XDEC_MEMVIEW(&__pyx_t_4, 0);\r\n>                             __pyx_t_4.memview = NULL;\r\n>                             __pyx_t_4.data = NULL;\r\n>                             goto __pyx_L11;\r\n>                             __pyx_L8_error:;\r\n>                             {\r\n>                                 #ifdef WITH_THREAD\r\n>                                 PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n>                                 #endif\r\n>                                 #ifdef _OPENMP\r\n>                                 #pragma omp flush(__pyx_parallel_exc_type)\r\n>                                 #endif /* _OPENMP */\r\n>                                 if (!__pyx_parallel_exc_type) {\r\n>                                   __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);\r\n>                                   __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;\r\n>                                   __Pyx_GOTREF(__pyx_parallel_exc_type);\r\n>                                 }\r\n>                                 #ifdef WITH_THREAD\r\n>                                 __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n>                                 #endif\r\n>                             }\r\n>                             __pyx_parallel_why = 4;\r\n>                             goto __pyx_L10;\r\n>                             __pyx_L10:;\r\n>                             #ifdef _OPENMP\r\n>                             #pragma omp critical(__pyx_parallel_lastprivates0)\r\n>                             #endif /* _OPENMP */\r\n>                             {\r\n>                                 __pyx_parallel_temp0 = __pyx_v_i;\r\n>                             }\r\n>                             __pyx_L11:;\r\n>                             #ifdef _OPENMP\r\n>                             #pragma omp flush(__pyx_parallel_why)\r\n>                             #endif /* _OPENMP */\r\n59a124,159\r\n>                     #ifdef _OPENMP\r\n>                     Py_END_ALLOW_THREADS\r\n>                     #else\r\n> {\r\n> #ifdef WITH_THREAD\r\n>                     PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n>                     #endif\r\n>                     #endif /* _OPENMP */\r\n>                     /* Clean up any temporaries */\r\n>                     __PYX_XDEC_MEMVIEW(&__pyx_t_4, 0);\r\n>                     #ifdef WITH_THREAD\r\n>                     __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n>                     #endif\r\n>                     #ifndef _OPENMP\r\n> }\r\n> #endif /* _OPENMP */\r\n>                 }\r\n>             }\r\n>             if (__pyx_parallel_exc_type) {\r\n>               /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */\r\n>               __pyx_parallel_why = 4;\r\n>             }\r\n>             if (__pyx_parallel_why) {\r\n>               __pyx_v_i = __pyx_parallel_temp0;\r\n>               switch (__pyx_parallel_why) {\r\n>                     case 4:\r\n>                 {\r\n>                     #ifdef WITH_THREAD\r\n>                     PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n>                     #endif\r\n>                     __Pyx_GIVEREF(__pyx_parallel_exc_type);\r\n>                     __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);\r\n>                     __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;\r\n>                     #ifdef WITH_THREAD\r\n>                     __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n>                     #endif\r\n60a161,162\r\n>                 goto __pyx_L4_error;\r\n>               }\r\n71c173\r\n<       /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":32\r\n---\r\n>       /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":33\r\n75c177\r\n<  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data, i)\r\n---\r\n>  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data[i], i)\r\n97c199\r\n<   /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":24\r\n---\r\n>   /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":25\r\n108a211\r\n>   __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);\r\n115a219\r\n>   __Pyx_TraceReturn(__pyx_r, 0);\r\n\r\n```\r\n\r\n\r\n<details>\r\n<summary>Fast code</summary>\r\n\r\n```c\r\nstatic PyObject *__pyx_pf_7sklearn_8ensemble_23_hist_gradient_boosting_10_predictor__predict_from_numeric_data(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_nodes, __Pyx_memviewslice __pyx_v_numeric_data, __Pyx_memviewslice __pyx_v_out) {\r\n  int __pyx_v_i;\r\n  PyObject *__pyx_r = NULL;\r\n  __Pyx_RefNannyDeclarations\r\n  Py_ssize_t __pyx_t_1;\r\n  Py_ssize_t __pyx_t_2;\r\n  Py_ssize_t __pyx_t_3;\r\n  Py_ssize_t __pyx_t_4;\r\n  __Pyx_RefNannySetupContext(\"_predict_from_numeric_data\", 0);\r\n\r\n  /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":32\r\n *         int i\r\n * \r\n *     for i in prange(numeric_data.shape[0], schedule='static', nogil=True):             # <<<<<<<<<<<<<<\r\n *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data, i)\r\n * \r\n */\r\n  {\r\n      #ifdef WITH_THREAD\r\n      PyThreadState *_save;\r\n      Py_UNBLOCK_THREADS\r\n      __Pyx_FastGIL_Remember();\r\n      #endif\r\n      /*try:*/ {\r\n        if (unlikely(!__pyx_v_numeric_data.memview)) { __Pyx_RaiseUnboundMemoryviewSliceNogil(\"numeric_data\"); __PYX_ERR(0, 32, __pyx_L4_error) }\r\n        __pyx_t_1 = (__pyx_v_numeric_data.shape[0]);\r\n        if ((1 == 0)) abort();\r\n        {\r\n            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))\r\n                #undef likely\r\n                #undef unlikely\r\n                #define likely(x)   (x)\r\n                #define unlikely(x) (x)\r\n            #endif\r\n            __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;\r\n            if (__pyx_t_3 > 0)\r\n            {\r\n                #ifdef _OPENMP\r\n                #pragma omp parallel private(__pyx_t_4)\r\n                #endif /* _OPENMP */\r\n                {\r\n                    #ifdef _OPENMP\r\n                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) schedule(static)\r\n                    #endif /* _OPENMP */\r\n                    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){\r\n                        {\r\n                            __pyx_v_i = (int)(0 + 1 * __pyx_t_2);\r\n\r\n                            /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":33\r\n * \r\n *     for i in prange(numeric_data.shape[0], schedule='static', nogil=True):\r\n *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data, i)             # <<<<<<<<<<<<<<\r\n * \r\n * \r\n */\r\n                            __pyx_t_4 = __pyx_v_i;\r\n                            *((__pyx_t_7sklearn_8ensemble_23_hist_gradient_boosting_6common_Y_DTYPE_C *) ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_4 * __pyx_v_out.strides[0]) )) = __pyx_f_7sklearn_8ensemble_23_hist_gradient_boosting_10_predictor__predict_one_from_numeric_data(__pyx_v_nodes, __pyx_v_numeric_data, __pyx_v_i);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))\r\n            #undef likely\r\n            #undef unlikely\r\n            #define likely(x)   __builtin_expect(!!(x), 1)\r\n            #define unlikely(x) __builtin_expect(!!(x), 0)\r\n        #endif\r\n      }\r\n\r\n      /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":32\r\n *         int i\r\n * \r\n *     for i in prange(numeric_data.shape[0], schedule='static', nogil=True):             # <<<<<<<<<<<<<<\r\n *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data, i)\r\n * \r\n */\r\n      /*finally:*/ {\r\n        /*normal exit:*/{\r\n          #ifdef WITH_THREAD\r\n          __Pyx_FastGIL_Forget();\r\n          Py_BLOCK_THREADS\r\n          #endif\r\n          goto __pyx_L5;\r\n        }\r\n        __pyx_L4_error: {\r\n          #ifdef WITH_THREAD\r\n          __Pyx_FastGIL_Forget();\r\n          Py_BLOCK_THREADS\r\n          #endif\r\n          goto __pyx_L1_error;\r\n        }\r\n        __pyx_L5:;\r\n      }\r\n  }\r\n\r\n  /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":24\r\n * \r\n * \r\n * def _predict_from_numeric_data(             # <<<<<<<<<<<<<<\r\n *         node_struct [:] nodes,\r\n *         const X_DTYPE_C [:, :] numeric_data,\r\n */\r\n\r\n  /* function exit code */\r\n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\r\n  goto __pyx_L0;\r\n  __pyx_L1_error:;\r\n  __Pyx_AddTraceback(\"sklearn.ensemble._hist_gradient_boosting._predictor._predict_from_numeric_data\", __pyx_clineno, __pyx_lineno, __pyx_filename);\r\n  __pyx_r = NULL;\r\n  __pyx_L0:;\r\n  __PYX_XDEC_MEMVIEW(&__pyx_v_nodes, 1);\r\n  __PYX_XDEC_MEMVIEW(&__pyx_v_numeric_data, 1);\r\n  __PYX_XDEC_MEMVIEW(&__pyx_v_out, 1);\r\n  __Pyx_XGIVEREF(__pyx_r);\r\n  __Pyx_RefNannyFinishContext();\r\n  return __pyx_r;\r\n}\r\n```\r\n\r\n</details>\r\n\r\n\r\n<details>\r\n<summary>Slow code</summary>\r\n\r\n```c\r\nstatic PyObject *__pyx_pf_7sklearn_8ensemble_23_hist_gradient_boosting_10_predictor__predict_from_numeric_data(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_nodes, __Pyx_memviewslice __pyx_v_numeric_data, __Pyx_memviewslice __pyx_v_out) {\r\n  int __pyx_v_i;\r\n  PyObject *__pyx_r = NULL;\r\n  __Pyx_TraceDeclarations\r\n  __Pyx_RefNannyDeclarations\r\n  Py_ssize_t __pyx_t_1;\r\n  Py_ssize_t __pyx_t_2;\r\n  Py_ssize_t __pyx_t_3;\r\n  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };\r\n  Py_ssize_t __pyx_t_5;\r\n  __Pyx_TraceFrameInit(__pyx_codeobj_)\r\n  __Pyx_RefNannySetupContext(\"_predict_from_numeric_data\", 0);\r\n  __Pyx_TraceCall(\"_predict_from_numeric_data\", __pyx_f[0], 25, 0, __PYX_ERR(0, 25, __pyx_L1_error));\r\n\r\n  /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":33\r\n *         int i\r\n * \r\n *     for i in prange(numeric_data.shape[0], schedule='static', nogil=True):             # <<<<<<<<<<<<<<\r\n *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data[i], i)\r\n * \r\n */\r\n  {\r\n      #ifdef WITH_THREAD\r\n      PyThreadState *_save;\r\n      Py_UNBLOCK_THREADS\r\n      __Pyx_FastGIL_Remember();\r\n      #endif\r\n      /*try:*/ {\r\n        if (unlikely(!__pyx_v_numeric_data.memview)) { __Pyx_RaiseUnboundMemoryviewSliceNogil(\"numeric_data\"); __PYX_ERR(0, 33, __pyx_L4_error) }\r\n        __pyx_t_1 = (__pyx_v_numeric_data.shape[0]);\r\n        if ((1 == 0)) abort();\r\n        {\r\n            int __pyx_parallel_temp0 = ((int)0xbad0bad0);\r\n            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;\r\n            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;\r\n            int __pyx_parallel_why;\r\n            __pyx_parallel_why = 0;\r\n            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))\r\n                #undef likely\r\n                #undef unlikely\r\n                #define likely(x)   (x)\r\n                #define unlikely(x) (x)\r\n            #endif\r\n            __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;\r\n            if (__pyx_t_3 > 0)\r\n            {\r\n                #ifdef _OPENMP\r\n                #pragma omp parallel private(__pyx_t_5) firstprivate(__pyx_t_4) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)\r\n                #endif /* _OPENMP */\r\n                {\r\n                    #ifdef _OPENMP\r\n                    #ifdef WITH_THREAD\r\n                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n                    #endif\r\n                    Py_BEGIN_ALLOW_THREADS\r\n                    #endif /* _OPENMP */\r\n                    #ifdef _OPENMP\r\n                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) schedule(static)\r\n                    #endif /* _OPENMP */\r\n                    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){\r\n                        if (__pyx_parallel_why < 2)\r\n                        {\r\n                            __pyx_v_i = (int)(0 + 1 * __pyx_t_2);\r\n\r\n                            /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":34\r\n * \r\n *     for i in prange(numeric_data.shape[0], schedule='static', nogil=True):\r\n *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data[i], i)             # <<<<<<<<<<<<<<\r\n * \r\n * \r\n */\r\n                            __pyx_t_4.data = __pyx_v_numeric_data.data;\r\n                            __pyx_t_4.memview = __pyx_v_numeric_data.memview;\r\n                            __PYX_INC_MEMVIEW(&__pyx_t_4, 0);\r\n                            {\r\n    Py_ssize_t __pyx_tmp_idx = __pyx_v_i;\r\n    Py_ssize_t __pyx_tmp_stride = __pyx_v_numeric_data.strides[0];\r\n        if ((0)) __PYX_ERR(0, 34, __pyx_L8_error)\r\n        __pyx_t_4.data += __pyx_tmp_idx * __pyx_tmp_stride;\r\n}\r\n\r\n__pyx_t_4.shape[0] = __pyx_v_numeric_data.shape[1];\r\n__pyx_t_4.strides[0] = __pyx_v_numeric_data.strides[1];\r\n    __pyx_t_4.suboffsets[0] = -1;\r\n\r\n__pyx_t_5 = __pyx_v_i;\r\n                            *((__pyx_t_7sklearn_8ensemble_23_hist_gradient_boosting_6common_Y_DTYPE_C *) ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_5 * __pyx_v_out.strides[0]) )) = __pyx_f_7sklearn_8ensemble_23_hist_gradient_boosting_10_predictor__predict_one_from_numeric_data(__pyx_v_nodes, __pyx_t_4, __pyx_v_i);\r\n                            __PYX_XDEC_MEMVIEW(&__pyx_t_4, 0);\r\n                            __pyx_t_4.memview = NULL;\r\n                            __pyx_t_4.data = NULL;\r\n                            goto __pyx_L11;\r\n                            __pyx_L8_error:;\r\n                            {\r\n                                #ifdef WITH_THREAD\r\n                                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n                                #endif\r\n                                #ifdef _OPENMP\r\n                                #pragma omp flush(__pyx_parallel_exc_type)\r\n                                #endif /* _OPENMP */\r\n                                if (!__pyx_parallel_exc_type) {\r\n                                  __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);\r\n                                  __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;\r\n                                  __Pyx_GOTREF(__pyx_parallel_exc_type);\r\n                                }\r\n                                #ifdef WITH_THREAD\r\n                                __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n                                #endif\r\n                            }\r\n                            __pyx_parallel_why = 4;\r\n                            goto __pyx_L10;\r\n                            __pyx_L10:;\r\n                            #ifdef _OPENMP\r\n                            #pragma omp critical(__pyx_parallel_lastprivates0)\r\n                            #endif /* _OPENMP */\r\n                            {\r\n                                __pyx_parallel_temp0 = __pyx_v_i;\r\n                            }\r\n                            __pyx_L11:;\r\n                            #ifdef _OPENMP\r\n                            #pragma omp flush(__pyx_parallel_why)\r\n                            #endif /* _OPENMP */\r\n                        }\r\n                    }\r\n                    #ifdef _OPENMP\r\n                    Py_END_ALLOW_THREADS\r\n                    #else\r\n{\r\n#ifdef WITH_THREAD\r\n                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n                    #endif\r\n                    #endif /* _OPENMP */\r\n                    /* Clean up any temporaries */\r\n                    __PYX_XDEC_MEMVIEW(&__pyx_t_4, 0);\r\n                    #ifdef WITH_THREAD\r\n                    __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n                    #endif\r\n                    #ifndef _OPENMP\r\n}\r\n#endif /* _OPENMP */\r\n                }\r\n            }\r\n            if (__pyx_parallel_exc_type) {\r\n              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */\r\n              __pyx_parallel_why = 4;\r\n            }\r\n            if (__pyx_parallel_why) {\r\n              __pyx_v_i = __pyx_parallel_temp0;\r\n              switch (__pyx_parallel_why) {\r\n                    case 4:\r\n                {\r\n                    #ifdef WITH_THREAD\r\n                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();\r\n                    #endif\r\n                    __Pyx_GIVEREF(__pyx_parallel_exc_type);\r\n                    __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);\r\n                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;\r\n                    #ifdef WITH_THREAD\r\n                    __Pyx_PyGILState_Release(__pyx_gilstate_save);\r\n                    #endif\r\n                }\r\n                goto __pyx_L4_error;\r\n              }\r\n            }\r\n        }\r\n        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))\r\n            #undef likely\r\n            #undef unlikely\r\n            #define likely(x)   __builtin_expect(!!(x), 1)\r\n            #define unlikely(x) __builtin_expect(!!(x), 0)\r\n        #endif\r\n      }\r\n\r\n      /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":33\r\n *         int i\r\n * \r\n *     for i in prange(numeric_data.shape[0], schedule='static', nogil=True):             # <<<<<<<<<<<<<<\r\n *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data[i], i)\r\n * \r\n */\r\n      /*finally:*/ {\r\n        /*normal exit:*/{\r\n          #ifdef WITH_THREAD\r\n          __Pyx_FastGIL_Forget();\r\n          Py_BLOCK_THREADS\r\n          #endif\r\n          goto __pyx_L5;\r\n        }\r\n        __pyx_L4_error: {\r\n          #ifdef WITH_THREAD\r\n          __Pyx_FastGIL_Forget();\r\n          Py_BLOCK_THREADS\r\n          #endif\r\n          goto __pyx_L1_error;\r\n        }\r\n        __pyx_L5:;\r\n      }\r\n  }\r\n\r\n  /* \"sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx\":25\r\n * \r\n * \r\n * def _predict_from_numeric_data(             # <<<<<<<<<<<<<<\r\n *         node_struct [:] nodes,\r\n *         const X_DTYPE_C [:, :] numeric_data,\r\n */\r\n\r\n  /* function exit code */\r\n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\r\n  goto __pyx_L0;\r\n  __pyx_L1_error:;\r\n  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);\r\n  __Pyx_AddTraceback(\"sklearn.ensemble._hist_gradient_boosting._predictor._predict_from_numeric_data\", __pyx_clineno, __pyx_lineno, __pyx_filename);\r\n  __pyx_r = NULL;\r\n  __pyx_L0:;\r\n  __PYX_XDEC_MEMVIEW(&__pyx_v_nodes, 1);\r\n  __PYX_XDEC_MEMVIEW(&__pyx_v_numeric_data, 1);\r\n  __PYX_XDEC_MEMVIEW(&__pyx_v_out, 1);\r\n  __Pyx_XGIVEREF(__pyx_r);\r\n  __Pyx_TraceReturn(__pyx_r, 0);\r\n  __Pyx_RefNannyFinishContext();\r\n  return __pyx_r;\r\n}\r\n```\r\n\r\n</details>\r\n\r\nJust for completeness the Cython diff is just:\r\n\r\n```diff\r\n@ -30,12 +31,12 @@ def _predict_from_numeric_data(\r\n         int i\r\n \r\n     for i in prange(numeric_data.shape[0], schedule='static', nogil=True):\r\n-        out[i] = _predict_one_from_numeric_data(nodes, numeric_data, i)\r\n+        out[i] = _predict_one_from_numeric_data(nodes, numeric_data[i], i)\r\n \r\n```\r\n\r\nOn top of the big chunk of additional code, I'm wondering if the slowdown could come from the addition of the private / lastprivate openmp variables, in particular `__pyx_filename, __pyx_lineno`, etc. ",
            "created_at": "2020-05-14T22:44:07Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-628924031",
            "id": 628924031,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODkyNDAzMQ==",
            "updated_at": "2020-05-14T22:48:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/628924031",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> enabling cython profiling, though I'm not sure this has any effect\r\n\r\nWell, yes. It can make your profile unusable. :) I can't say if it was really compiled in on your side (requires a C macro setting), but CPython profiling and C level profiling do very different things and the CPython profiling (which adds dedicated event callbacks to your code) just creates a lot of overhead that you don't want to see in your C profile.\r\n\r\n> I'm wondering if the slowdown could come from the addition of the private / lastprivate openmp variables\r\n\r\nCould be. I pushed a fix that discards the unused error handling code in 794d21d929a60c0ff9f1aa92fc79cc79c1d4753d. That should at least make the diff a bit clearer. Could you maybe retry with the latest master? And with Cython profiling disabled? :)",
            "created_at": "2020-05-15T07:57:32Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629090938",
            "id": 629090938,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTA5MDkzOA==",
            "updated_at": "2020-05-15T07:57:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629090938",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": ">  I pushed a fix that discards the unused error handling code in 794d21d.\r\n\r\nThanks! This *did* make the benchmark with 1d views faster, so this is definitely an improvement.\r\n\r\nHowever it's still not quite as fast as the benchmark with 2d views, and I still observe about 4 Billion additional instructions. But I'm pretty sure now that these 4 billion come from these 2 instructions:\r\n\r\n```c\r\n__PYX_INC_MEMVIEW(&__pyx_t_4, 0);\r\n...\r\n__PYX_XDEC_MEMVIEW(&__pyx_t_4, 0);\r\n```\r\n\r\nwhere `__pyx_t_4` is a `__Pyx_memviewslice`.\r\n\r\nIndeed, when I comment these out, both benchmarks run just as fast, and I don't observe these 4 billion instructions :)\r\n\r\n\r\nHere's the diff just for reference:\r\n\r\n```diff\r\n8c8,9\r\n<   Py_ssize_t __pyx_t_4;\r\n---\r\n>   __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };\r\n>   Py_ssize_t __pyx_t_5;\r\n18c19\r\n<  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data, i)\r\n---\r\n>  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data[i], i)\r\n41c42\r\n<                 #pragma omp parallel private(__pyx_t_4)\r\n---\r\n>                 #pragma omp parallel private(__pyx_t_5) firstprivate(__pyx_t_4)\r\n54c55\r\n<  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data, i)             # <<<<<<<<<<<<<<\r\n---\r\n>  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data[i], i)             # <<<<<<<<<<<<<<\r\n58,59c59,75\r\n<                             __pyx_t_4 = __pyx_v_i;\r\n<                             *((__pyx_t_7sklearn_8ensemble_23_hist_gradient_boosting_6common_Y_DTYPE_C *) ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_4 * __pyx_v_out.strides[0]) )) = __pyx_f_7sklearn_8ensemble_23_hist_gradient_boosting_10_predictor__predict_one_from_numeric_data(__pyx_v_nodes, __pyx_v_numeric_data, __pyx_v_i);\r\n---\r\n>                             __pyx_t_4.data = __pyx_v_numeric_data.data;\r\n>                             __pyx_t_4.memview = __pyx_v_numeric_data.memview;\r\n>                             __PYX_INC_MEMVIEW(&__pyx_t_4, 0);\r\n>                             {\r\n>     Py_ssize_t __pyx_tmp_idx = __pyx_v_i;\r\n>     Py_ssize_t __pyx_tmp_stride = __pyx_v_numeric_data.strides[0];\r\n>         __pyx_t_4.data += __pyx_tmp_idx * __pyx_tmp_stride;\r\n> }\r\n> \r\n> __pyx_t_4.shape[0] = __pyx_v_numeric_data.shape[1];\r\n> __pyx_t_4.strides[0] = __pyx_v_numeric_data.strides[1];\r\n>     __pyx_t_4.suboffsets[0] = -1;\r\n> \r\n> __pyx_t_5 = __pyx_v_i;\r\n>                             *((__pyx_t_7sklearn_8ensemble_23_hist_gradient_boosting_6common_Y_DTYPE_C *) ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_5 * __pyx_v_out.strides[0]) )) = __pyx_f_7sklearn_8ensemble_23_hist_gradient_boosting_10_predictor__predict_one_from_numeric_data(__pyx_v_nodes, __pyx_t_4, __pyx_v_i);\r\n>                             __PYX_XDEC_MEMVIEW(&__pyx_t_4, 0);\r\n>                             __pyx_t_4.memview = NULL; __pyx_t_4.data = NULL;\r\n77c93\r\n<  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data, i)\r\n---\r\n>  *         out[i] = _predict_one_from_numeric_data(nodes, numeric_data[i], i)\r\n110a127\r\n>   __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);\r\n```\r\n\r\nAs a side note, I *do* observe these 2 instructions being generated when doing just\r\n\r\n```py\r\n    with nogil:\r\n        for row_idx in range(view_2d.shape[0]):\r\n            out += sum_1d_a(view_2d[row_idx, :])\r\n```\r\n\r\nso I understand @robertwb's https://github.com/cython/cython/issues/2987#issuecomment-500164331 better now.\r\n\r\n",
            "created_at": "2020-05-15T15:20:16Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629301265",
            "id": 629301265,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTMwMTI2NQ==",
            "updated_at": "2020-05-15T15:20:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629301265",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        },
        {
            "author_association": "NONE",
            "body": "So I guess my new question is this: would you consider introducing a new option that would bypass the `__PYX_X{INC,DEC}_MEMVIEW` instructions when creating view slices? That would definitely help us in sklearn where such slices are created for each sample, and when we have millions of samples, these calls add up to a significant overhead.\r\n\r\nIf yes, I would be happy to give this a try!",
            "created_at": "2020-05-15T15:20:21Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629301350",
            "id": 629301350,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTMwMTM1MA==",
            "updated_at": "2020-05-15T15:20:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629301350",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        },
        {
            "author_association": "NONE",
            "body": "BTW here are the callgrind dumps of the benchmarks using Cython's master in case you're interested (without  CPython profiling):\r\n\r\n\r\n[callgrind.out.2d_views.txt](https://github.com/cython/cython/files/4635272/callgrind.out.2d_views.txt)\r\n[callgrind.out.1d_views.txt](https://github.com/cython/cython/files/4635271/callgrind.out.1d_views.txt)  <- 4 billion more instructions\r\n[callgrind.out.1d_views_no_INC_DEC.txt](https://github.com/cython/cython/files/4635267/callgrind.out.1d_views_no_INC_DEC.txt)  <- this one is just as fast as the 2d views one\r\n",
            "created_at": "2020-05-15T15:26:18Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629307424",
            "id": 629307424,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTMwNzQyNA==",
            "updated_at": "2020-05-15T15:26:18Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629307424",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> would you consider introducing a new option that would bypass the `__PYX_X{INC,DEC}_MEMVIEW` instructions when creating view slices?\r\n\r\nWithout making any comment about whether it would be useful: this would essentially be a borrowed memoryview slice. It'd have to be unstorable (e.g. could be added to a class, set as a global variable, or put in a closure). I think the main challenge would be making it easily accessible while keeping the limitations understood.",
            "created_at": "2020-05-15T18:05:30Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629402146",
            "id": 629402146,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTQwMjE0Ng==",
            "updated_at": "2020-05-15T18:05:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629402146",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`__PYX_X{INC,DEC}_MEMVIEW` mostly use atomic ints for the reference counting, and have to resort to Python reference counting only for the first and last slice taken from a memoryview.\r\n\r\nFunny idea: could you create and keep one additional slice before entering the loop, i.e. outside of the prange loop? Any slice would do. Just to be sure that we're not hitting the case of the first slice all the time _inside_ of the loop for some unexpected reason.\r\n\r\nOnce you've tried that (to be sure that you get comparable timings), please update to the latest master and give that another try. I sprinkled some branch hints in various exception handling places to keep the C compiler from accidentally guessing wrongly about the fast path through the slicing code. Not sure if it makes any difference, but let's see it from actual numbers.",
            "created_at": "2020-05-15T19:38:07Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629442989",
            "id": 629442989,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTQ0Mjk4OQ==",
            "updated_at": "2020-05-15T19:38:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629442989",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> could you create and keep one additional slice before entering the loop, i.e. outside of the prange loop? \r\n\r\nI declared a ` cdef const X_DTYPE_C [:] dummy = numeric_data[0]` before the `prange` in both Cython 0.29.17 and master: it doesn't seem to have any effect.\r\n\r\nAlso I made a few additional experiments:\r\n\r\n- commenting out *only* ~`__PYX_INC_MEMVIEW`~ (EDIT: I meant `__PYX_DEC_MEMVIEW`) leads to about half of the speed up as when commenting both `__PYX_X{INC,DEC}_MEMVIEW`. So it seems to confirm the slowdown comes from these 2.\r\n- When I use `range` instead of `prange`:\r\n  - I still observe the same kind of behaviour, i.e. commenting out `__PYX_X{INC,DEC}_MEMVIEW` leads to faster code. And this is true regardless of whether `range` is in a `with nogil` context manager.\r\n  - If I don't comment out anything, the code with `range` is slightly faster than the code with `prange`. This seems to indicate that the problem is not directly related to the use of `prange`, even though it does seem to make it worse.",
            "created_at": "2020-05-15T21:25:40Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629496735",
            "id": 629496735,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTQ5NjczNQ==",
            "updated_at": "2020-05-16T18:59:53Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629496735",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the code with range is slightly faster than the code with prange\r\n\r\nThat's expected since you wrote that you are only using one thread. prange/OpenMP introduces additional overhead for managing the workload of that one thread that a simple loop does not have.\r\n\r\n> commenting out only __PYX_INC_MEMVIEW\r\n\r\nCan't say if that's a valid comparison. It would mean that the refcount doesn't get increased correctly and I would actually expect that to lead to a crash due to a premature buffer release. Not sure why it still works for you.",
            "created_at": "2020-05-16T06:52:20Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629598878",
            "id": 629598878,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTU5ODg3OA==",
            "updated_at": "2020-05-16T06:52:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629598878",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I tried your example, extending it to calculate an actual sum in the nogil functions (so that the C compiler can't just discard the call). Here are my timings:\r\n```\r\n$ python3.8 -m timeit -s \"import numpy; from test import sum_2d_a, sum_2d_b; a = numpy.ones((5000, 5000), dtype=numpy.float32); print(sum_2d_a(a), sum_2d_b(a))\" \"sum_2d_a(a)\"\r\n25000000.0 25000000.0\r\n20 loops, best of 5: 12.6 msec per loop\r\n\r\n$ python3.8 -m timeit -s \"import numpy; from test import sum_2d_a, sum_2d_b; a = numpy.ones((5000, 5000), dtype=numpy.float32); print(sum_2d_a(a), sum_2d_b(a))\" \"sum_2d_b(a)\"\r\n25000000.0 25000000.0\r\n20 loops, best of 5: 12.4 msec per loop\r\n```\r\nI would say, this is totally in the same ballpark. I also tried it with a larger array of 25000x5000 and still got very close timings for both, within a couple of percent of each other with 4 threads.\r\n\r\n<details>\r\n<summary>Here's the code I used (please tell me if I did anything wrong):</summary>\r\n\r\n```cython\r\n#distutils: extra_compile_args=-fopenmp\r\n#distutils: extra_link_args=-fopenmp\r\n\r\n#cython: boundscheck=False\r\n#cython: language_level=3\r\n\r\n\r\nfrom cython.parallel import prange\r\n\r\n\r\ndef sum_2d_a(float[:, :] view_2d):\r\n    cdef:\r\n        float out = 0\r\n        int row_idx = 0\r\n\r\n    for row_idx in prange(view_2d.shape[0], nogil=True):\r\n        out += sum_1d_a(view_2d[row_idx, :])\r\n\r\n    return out\r\n\r\ncdef float sum_1d_a(float[:] view_1d) nogil:\r\n    cdef Py_ssize_t i\r\n    cdef float s = 0\r\n    for i in range(view_1d.shape[0]):\r\n        s += view_1d[i]\r\n    return s\r\n\r\n\r\ndef sum_2d_b(float[:, :] view_2d):\r\n    cdef:\r\n        float out = 0\r\n        int row_idx = 0\r\n\r\n    for row_idx in prange(view_2d.shape[0], nogil=True):\r\n        out += sum_1d_b(view_2d, row_idx)\r\n\r\n    return out\r\n\r\ncdef float sum_1d_b(float[:, :] view_2d, int row_idx) nogil:\r\n    cdef Py_ssize_t i\r\n    cdef float s = 0\r\n    for i in range(view_2d.shape[1]):\r\n        s += view_2d[row_idx, i]\r\n    return s\r\n```\r\n\r\n</details>\r\n",
            "created_at": "2020-05-16T08:02:54Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629606283",
            "id": 629606283,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTYwNjI4Mw==",
            "updated_at": "2020-05-16T08:13:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629606283",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I also let callgrind count the instructions and they are not even 1% apart for both versions, with a slight advantage for the 2D non-slicing version. I tested all of this with the latest master branch.",
            "created_at": "2020-05-16T08:10:46Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629607287",
            "id": 629607287,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTYwNzI4Nw==",
            "updated_at": "2020-05-16T08:10:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629607287",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I also compared my master version (fb17dc88f0af1fcee3fcec7685e451c85f372793) to ebbc5f9030ca55e29615d0ddafb5193cbc81b0b4 now, before I added the branch prediction hints. They make the slicing version (a) about 9% faster for me, using gcc 7.5.0.",
            "created_at": "2020-05-16T08:24:25Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629608718",
            "id": 629608718,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTYwODcxOA==",
            "updated_at": "2020-05-16T08:26:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629608718",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I also pushed the changes from this ticket over to the 0.29.x branch so that they get included in 0.29.18. Seems worth it.",
            "created_at": "2020-05-16T08:33:35Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629609640",
            "id": 629609640,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTYwOTY0MA==",
            "updated_at": "2020-05-16T08:33:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629609640",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I tried your example\r\n\r\nThanks!\r\n\r\nI can reproduce your results, i.e. I observe no difference when the array is of dimension 5000 x 5000. However, I do observe some significant difference when ncols << nrows: with `numpy.ones((5_000_000, 20), dtype=numpy.float32)`, sum_2d_a runs in about 120 msec while sum_2d_b takes about 70 msec.\r\n\r\nI tried with OMP_NUM_THREADS set to 1 or 4, and with `range` instead of `prange`, without the GIL, and they all lead to the same observation that sum_2d_b is faster.\r\n\r\nI do not observe any slowdown when nrows >= ncols though.",
            "created_at": "2020-05-16T12:18:17Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629636916",
            "id": 629636916,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTYzNjkxNg==",
            "updated_at": "2020-05-16T12:18:17Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629636916",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I do observe some significant difference when ncols << nrows\r\n\r\nDoctor, doctor! It hurts when I do _this_. – Then don't do it! :)",
            "created_at": "2020-05-16T18:43:37Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629689769",
            "id": 629689769,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTY4OTc2OQ==",
            "updated_at": "2020-05-16T18:43:37Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629689769",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Seriously, that's pretty much the worst case for slicing. It creates a huge number of very small slices. You also wouldn't create a ton of threads to let each of them sum a hand full of integers, because there is overhead involved in setting them up and managing them. Similarly, there is overhead involved in safely passing a view on a memory managed buffer around. I'm well aware that Cython lets you shoot yourself in the foot in many cases if you really, really ask for it, but I'd be happier if the answer to the problem at hand wasn't \"let's add yet another directive\".",
            "created_at": "2020-05-16T18:52:35Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629690854",
            "id": 629690854,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTY5MDg1NA==",
            "updated_at": "2020-05-16T18:52:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629690854",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> You also wouldn't create a ton of threads to let each of them sum a hand full of integers\r\n\r\nSure, just to clarify, I only came up with this contrived \"sum\" example because I was trying to find a minimal reproducing example. Our actual use in scikit-learn is more reality grounded, and I can go into the details if you want but basically, calling a [Cythonized function](https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx#L32) on each row of a big matrix where `nrows >> ncols` is something we want to do a lot ;). And now that we support OpenMP, we might want to do that even more.\r\n\r\nWould you recommend using pointers for this instead? We're trying to avoid pointers as much as possible since ideally, we don't want to have to worry about strides and C/Fortran alignment.\r\n\r\nI took a deeper dive into the implementation of `__PYX_INC/DEC_MEMVIEW`. I can see that most of what is done there is read or set the `acquisition_count` field of the original 2d memview, which is an atomic int. When I comment out `__PYX_INC/DEC_MEMVIEW`,  `sum_2d_a` and `sum_2d_b` are equivalent in terms of timing. And that's a bit confusing to me, because that means that the operations in `__PYX_INC/DEC_MEMVIEW` are much more expensive than creating the slice  and setting its fields (data, memview, shape, stride...). Would you have any explanation of why that might be the case? Are atomic ints *that* expensive?",
            "created_at": "2020-05-16T21:41:23Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629709506",
            "id": 629709506,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTcwOTUwNg==",
            "updated_at": "2020-05-16T21:41:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629709506",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I can well imagine that that's a use case for something like scikit-learn, thanks for the insights.\r\n\r\nAtomic ints are not costly per se, they are often implemented in hardware and thus fairly cheap in comparison to many other forms of locking mechanisms. But they do represent a form of locking, and that's still not entirely for free, and (as with all such mechanisms) gets worse under congestion. With very small work packets like in your case, they're probably getting close to saturation.\r\n\r\nI'm wondering, #2227 has been pending for a while now. Would it be a good idea to tweak the semantics of for-loop iteration by axis to return borrowed slices, with their lifetime bound to the loop iteration? I think that would also help your use case.",
            "created_at": "2020-05-17T09:09:30Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-629766429",
            "id": 629766429,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc2NjQyOQ==",
            "updated_at": "2020-05-17T09:10:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/629766429",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm closing this ticket since several things have been improved. I think the future work on this is out of its scope now.",
            "created_at": "2020-05-19T16:08:00Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-630921101",
            "id": 630921101,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDkyMTEwMQ==",
            "updated_at": "2020-05-19T16:08:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/630921101",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "yes, I'll keep an eye on #2227 and the PR\r\n\r\nThanks a lot for your time and help @scoder ",
            "created_at": "2020-05-19T16:13:18Z",
            "html_url": "https://github.com/cython/cython/issues/2987#issuecomment-630924133",
            "id": 630924133,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2987",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDkyNDEzMw==",
            "updated_at": "2020-05-19T16:13:18Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/630924133",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            }
        }
    ],
    "comments": 29,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2987/comments",
    "created_at": "2019-06-07T19:10:14Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T13:03:41Z",
            "event": "mentioned",
            "id": 3336503981,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMzNjUwMzk4MQ==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3336503981"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T13:03:41Z",
            "event": "subscribed",
            "id": 3336503985,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMzY1MDM5ODU=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3336503985"
        },
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T14:13:21Z",
            "event": "mentioned",
            "id": 3336816123,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMzNjgxNjEyMw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3336816123"
        },
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T14:13:21Z",
            "event": "subscribed",
            "id": 3336816129,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMzY4MTYxMjk=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3336816129"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T14:26:36Z",
            "event": "mentioned",
            "id": 3336879065,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMzNjg3OTA2NQ==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3336879065"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T14:26:36Z",
            "event": "subscribed",
            "id": 3336879069,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMzY4NzkwNjk=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3336879069"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T17:52:38Z",
            "event": "mentioned",
            "id": 3337763388,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMzNzc2MzM4OA==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3337763388"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T17:52:38Z",
            "event": "subscribed",
            "id": 3337763392,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMzc3NjMzOTI=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3337763392"
        },
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T18:41:54Z",
            "event": "mentioned",
            "id": 3337939584,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMzNzkzOTU4NA==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3337939584"
        },
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
                "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasHug/followers",
                "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasHug",
                "id": 1190450,
                "login": "NicolasHug",
                "node_id": "MDQ6VXNlcjExOTA0NTA=",
                "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
                "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
                "repos_url": "https://api.github.com/users/NicolasHug/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasHug"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-14T18:41:54Z",
            "event": "subscribed",
            "id": 3337939590,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMzc5Mzk1OTA=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3337939590"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-15T15:20:16Z",
            "event": "mentioned",
            "id": 3341377249,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM0MTM3NzI0OQ==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3341377249"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-15T15:20:16Z",
            "event": "subscribed",
            "id": 3341377254,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNDEzNzcyNTQ=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3341377254"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-16T08:32:13Z",
            "event": "milestoned",
            "id": 3343361408,
            "milestone": {
                "title": "0.29.18"
            },
            "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDMzNDMzNjE0MDg=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3343361408"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-16T08:33:07Z",
            "event": "labeled",
            "id": 3343361900,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNDMzNjE5MDA=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3343361900"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-16T08:33:07Z",
            "event": "labeled",
            "id": 3343361901,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNDMzNjE5MDE=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3343361901"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-16T08:33:07Z",
            "event": "labeled",
            "id": 3343361902,
            "label": {
                "color": "f9d0c4",
                "name": "performance"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNDMzNjE5MDI=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3343361902"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-19T16:08:00Z",
            "event": "closed",
            "id": 3352618809,
            "node_id": "MDExOkNsb3NlZEV2ZW50MzM1MjYxODgwOQ==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3352618809"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-19T16:13:18Z",
            "event": "mentioned",
            "id": 3352640873,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM1MjY0MDg3Mw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3352640873"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-19T16:13:18Z",
            "event": "subscribed",
            "id": 3352640877,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNTI2NDA4Nzc=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3352640877"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2987/events",
    "html_url": "https://github.com/cython/cython/issues/2987",
    "id": 453655230,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        },
        {
            "color": "f9d0c4",
            "default": false,
            "description": null,
            "id": 414805151,
            "name": "performance",
            "node_id": "MDU6TGFiZWw0MTQ4MDUxNTE=",
            "url": "https://api.github.com/repos/cython/cython/labels/performance"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2987/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": "2020-05-19T16:08:29Z",
        "closed_issues": 11,
        "created_at": "2020-04-26T18:38:16Z",
        "creator": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/78",
        "id": 5350516,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/78/labels",
        "node_id": "MDk6TWlsZXN0b25lNTM1MDUxNg==",
        "number": 78,
        "open_issues": 0,
        "state": "closed",
        "title": "0.29.18",
        "updated_at": "2020-05-19T16:08:29Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/78"
    },
    "node_id": "MDU6SXNzdWU0NTM2NTUyMzA=",
    "number": 2987,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "prange generates unnecessary python interactions when indexing a 2d view",
    "updated_at": "2020-05-19T16:13:18Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2987",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1190450?v=4",
        "events_url": "https://api.github.com/users/NicolasHug/events{/privacy}",
        "followers_url": "https://api.github.com/users/NicolasHug/followers",
        "following_url": "https://api.github.com/users/NicolasHug/following{/other_user}",
        "gists_url": "https://api.github.com/users/NicolasHug/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/NicolasHug",
        "id": 1190450,
        "login": "NicolasHug",
        "node_id": "MDQ6VXNlcjExOTA0NTA=",
        "organizations_url": "https://api.github.com/users/NicolasHug/orgs",
        "received_events_url": "https://api.github.com/users/NicolasHug/received_events",
        "repos_url": "https://api.github.com/users/NicolasHug/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/NicolasHug/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/NicolasHug/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/NicolasHug"
    }
}