{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\n\nA function with a default parameter value of `str()` or even `int()` appears to to get mapped to `null`. If this value is then later used in a location that performs a null check, such as assigning the value to a dictionary, then the resulting code segfaults. This behavior is new in 3+; in <3, cython appears to correctly map a value such as `str()` into an empty string, and a value such as `int()` to a zero. \r\n\r\nLooking at the cythonized code, I can see that a value such as `''` is treated as an immediate value, whereas `str()` is treated as a dynamic default argument.\r\n\r\nLooking at the cython 0.29 code, I think this is relevant section:\r\n```\r\nif (!__Pyx_CyFunction_InitDefaults(__pyx_t_1, sizeof(__pyx_defaults), 1)) __PYX_ERR(0, 1, __pyx_L1_error)\r\n  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)(&PyString_Type))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_2);\r\n  __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_t_1)->__pyx_arg_this_crashes = __pyx_t_2;\r\n  __Pyx_GIVEREF(__pyx_t_2);\r\n  __pyx_t_2 = 0;\r\n```\r\n\r\nYou can see the `__pyx_arg_this_crashes` getting assigned to the default value of `str()` (PyString_Type).\r\n\r\nIn contrast, under 3, it becomes:\r\n\r\n```\r\n  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_2, sizeof(__pyx_defaults), 1)) __PYX_ERR(0, 1, __pyx_L1_error)\r\n  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_2, __pyx_pf_3wtf_2__defaults__);\r\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_run_it, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\r\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\r\n  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_2);\r\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\r\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\r\n  ```\r\n  With:\r\n  ```\r\n  static PyObject *__pyx_pf_3wtf_2__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {\r\n  PyObject *__pyx_r = NULL;\r\n  __Pyx_RefNannyDeclarations\r\n  PyObject *__pyx_t_1 = NULL;\r\n  PyObject *__pyx_t_2 = NULL;\r\n  int __pyx_lineno = 0;\r\n  const char *__pyx_filename = NULL;\r\n  int __pyx_clineno = 0;\r\n  __Pyx_RefNannySetupContext(\"__defaults__\", 1);\r\n  __Pyx_XDECREF(__pyx_r);\r\n  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_1);\r\n  __Pyx_INCREF(((PyObject*)__pyx_kp_s_));\r\n  __Pyx_GIVEREF(((PyObject*)__pyx_kp_s_));\r\n  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject*)__pyx_kp_s_))) __PYX_ERR(0, 1, __pyx_L1_error);\r\n  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_this_crashes);\r\n  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_this_crashes);\r\n  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_this_crashes)) __PYX_ERR(0, 1, __pyx_L1_error);\r\n  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_2);\r\n  __Pyx_GIVEREF(__pyx_t_1);\r\n  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error);\r\n  __Pyx_INCREF(Py_None);\r\n  __Pyx_GIVEREF(Py_None);\r\n  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None)) __PYX_ERR(0, 1, __pyx_L1_error);\r\n  __pyx_t_1 = 0;\r\n  __pyx_r = __pyx_t_2;\r\n  __pyx_t_2 = 0;\r\n  goto __pyx_L0;\r\n  ```\r\n  \r\n  This is just copying values out of the defaults object into a tuple though. I can't find anywhere where `__pyx_arg_this_crashes` is actually set.\r\n  \r\n  \r\n  Any help you can offer would be appreciated.\r\n  \r\nRepro:\r\n\r\nUsing the attached code snippet, invoked as pure-python:\r\n  ```bash\r\n   python3 -c \"from snippet import run_it; run_it()\"\r\n   ```\r\n  \r\n  If I cythonize the attached code using:\r\n  `cythonize -i -f  snippet.py`\r\n  \r\n  Then result segfaults.\r\n  \r\n  \n\n### Code to reproduce the behaviour:\n\n```python\r\ndef run_it(this_works='', this_crashes=str()):\r\n  mydict = dict()\r\n  mydict['this_works'] = this_works\r\n  mydict['this_crashes'] = this_crashes\r\n  print(mydict)\r\n```\r\n\n\n### Expected behaviour\n\nThe code outputs:\r\n  `{'this_works': '', 'this_crashes': ''}`\n\n### OS\n\nLinux\n\n### Python version\n\n3.9.16\n\n### Cython version\n\n3.0.10\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "The bad commit is 2c8e7b2204622380c20ee4b1f2a9aa59938fe33a. Although my feeling is that commit likely isn't the *real* problem here.",
            "created_at": "2024-05-10T19:00:57Z",
            "html_url": "https://github.com/cython/cython/issues/6192#issuecomment-2105124700",
            "id": 2105124700,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6192",
            "node_id": "IC_kwDOABDGAc59eadc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2105124700/reactions"
            },
            "updated_at": "2024-05-10T19:00:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2105124700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I originally suspected that the issue might have been related to the new `str()` handling in 3+, especially under different language levels, however the issue still happens if you use `int()`.",
            "created_at": "2024-05-10T19:25:19Z",
            "html_url": "https://github.com/cython/cython/issues/6192#issuecomment-2105153862",
            "id": 2105153862,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6192",
            "node_id": "IC_kwDOABDGAc59ehlG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2105153862/reactions"
            },
            "updated_at": "2024-05-10T19:25:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2105153862",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/57725958?v=4",
                "events_url": "https://api.github.com/users/aws-taylor/events{/privacy}",
                "followers_url": "https://api.github.com/users/aws-taylor/followers",
                "following_url": "https://api.github.com/users/aws-taylor/following{/other_user}",
                "gists_url": "https://api.github.com/users/aws-taylor/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aws-taylor",
                "id": 57725958,
                "login": "aws-taylor",
                "node_id": "MDQ6VXNlcjU3NzI1OTU4",
                "organizations_url": "https://api.github.com/users/aws-taylor/orgs",
                "received_events_url": "https://api.github.com/users/aws-taylor/received_events",
                "repos_url": "https://api.github.com/users/aws-taylor/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aws-taylor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aws-taylor/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aws-taylor"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No - there's about 3 different ways of handling defaults depending on how \"literal\" those defaults are and what type of function it is. It all goes wrong if an optimization accidentally shuffles something between the different mechanisms late in the process.\r\n\r\nIn this case `str()` was getting optimized into `''`. Turning off the optimizations for defaults would seem like an easy option, but I'm fairly sure some of the optimizations are now required parts of the processes so that would likely break something else.",
            "created_at": "2024-05-10T20:10:14Z",
            "html_url": "https://github.com/cython/cython/issues/6192#issuecomment-2105208900",
            "id": 2105208900,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6192",
            "node_id": "IC_kwDOABDGAc59evBE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2105208900/reactions"
            },
            "updated_at": "2024-05-10T20:10:14Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2105208900",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6192/comments",
    "created_at": "2024-05-10T00:19:19Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "8e95b8a095c44a40aec650680618012b2c85aa7b",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/8e95b8a095c44a40aec650680618012b2c85aa7b",
            "created_at": "2024-05-10T20:59:31Z",
            "event": "referenced",
            "id": 12774025236,
            "node_id": "REFE_lADOABDGAc6Iak8gzwAAAAL5ZCgU",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/12774025236"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6192/events",
    "html_url": "https://github.com/cython/cython/issues/6192",
    "id": 2288668448,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6192/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6Iak8g",
    "number": 6192,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6192/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6192/timeline",
    "title": "[BUG] Possible regression in handling of default function arguments",
    "updated_at": "2024-05-10T20:10:16Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6192",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/57725958?v=4",
        "events_url": "https://api.github.com/users/aws-taylor/events{/privacy}",
        "followers_url": "https://api.github.com/users/aws-taylor/followers",
        "following_url": "https://api.github.com/users/aws-taylor/following{/other_user}",
        "gists_url": "https://api.github.com/users/aws-taylor/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/aws-taylor",
        "id": 57725958,
        "login": "aws-taylor",
        "node_id": "MDQ6VXNlcjU3NzI1OTU4",
        "organizations_url": "https://api.github.com/users/aws-taylor/orgs",
        "received_events_url": "https://api.github.com/users/aws-taylor/received_events",
        "repos_url": "https://api.github.com/users/aws-taylor/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/aws-taylor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aws-taylor/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/aws-taylor"
    }
}