{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "## Summary\r\n\r\n- Extension dataclasses (`cdef dataclass`) in Pure Python mode has to be ordered with the `cython.cclass` decorator inner-most to the class.\r\n- There's a compiler crash if `cython.dataclasses.dataclass()` is called with no arguments\r\n\r\n## Description\r\n\r\nThe following code fails with `Decorators not allowed on cdef classes (used on type 'MyTest')`:\r\n```python\r\nimport cython\r\n\r\n@cython.cclass\r\n@cython.dataclasses.dataclass\r\nclass MyTest:\r\n    val: cython.int\r\n```\r\n\r\nThe compiler crashes with an `AttributeError` on `NoneType` with the following code:\r\n```python\r\nimport cython\r\n\r\n@cython.cclass\r\n@cython.dataclasses.dataclass()\r\nclass MyTest:\r\n    val: cython.int\r\n```\r\n```python\r\nModuleNode.body = StatListNode(_cython_magic_00b187774452a423c4a80249cd19a8bb448a9ad2.pyx:2:0)\r\nStatListNode.stats[1] = StatListNode(_cython_magic_00b187774452a423c4a80249cd19a8bb448a9ad2.pyx:6:0)\r\nStatListNode.stats[0] = PyClassDefNode(_cython_magic_00b187774452a423c4a80249cd19a8bb448a9ad2.pyx:6:0,\r\n    name = 'MyTest')\r\n\r\nCompiler crash traceback from this point on:\r\n  File \"Cython\\\\Compiler\\\\Visitor.py\", line 182, in Cython.Compiler.Visitor.TreeVisitor._visit\r\n  File \"[c:\\Users\\%username%\\Projects\\wumpy\\venv\\lib\\site-packages\\Cython\\Compiler\\ParseTreeTransforms.py]()\", line 1229, in visit_PyClassDefNode\r\n    directives = self._extract_directives(node, 'class')\r\n  File \"[c:\\Users\\%username%\\Projects\\wumpy\\venv\\lib\\site-packages\\Cython\\Compiler\\ParseTreeTransforms.py]()\", line 1241, in _extract_directives\r\n  File \"[c:\\Users\\%username%\\Projects\\wumpy\\venv\\lib\\site-packages\\Cython\\Compiler\\ParseTreeTransforms.py]()\", line 1101, in try_to_parse_directives\r\n    directives.append(self.try_to_parse_directive(optname, args, kwds, node.function.pos))\r\n  File \"[c:\\Users\\%username%\\Projects\\wumpy\\venv\\lib\\site-packages\\Cython\\Compiler\\ParseTreeTransforms.py]()\", line 1180, in try_to_parse_directive\r\n    return (optname, (args, kwds.as_python_dict()))\r\nAttributeError: 'NoneType' object has no attribute 'as_python_dict'\r\n```\r\n\r\n## Environment\r\n\r\n- Windows 10\r\n- Python 3.9.5 (in a `venv`)\r\n- Cython pulled from `master` (can confirm that I have 2d287a6191bbba1e120ba9240b24ce364c443204)\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I think might apply to the other class decorators too (e.g. `cython.final`, `cython.autopickle`, `no_gc_clear`). Not completely sure though, but I think I've seen this before with other combinations.",
            "created_at": "2022-02-07T21:25:29Z",
            "html_url": "https://github.com/cython/cython/issues/4624#issuecomment-1031941293",
            "id": 1031941293,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4624",
            "node_id": "IC_kwDOABDGAc49giyt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1031941293/reactions"
            },
            "updated_at": "2022-02-07T21:25:29Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1031941293",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Extension dataclasses (`cdef dataclass`) in Pure Python mode has to be ordered with the `cython.cclass` decorator inner-most to the class.\r\n\r\nI think it makes sense to require that. `@cclass` on a dataclass is different from `@dataclass` on a cdef class. Obviously shouldn't crash but give an appropriate error message.",
            "created_at": "2022-02-08T00:50:19Z",
            "html_url": "https://github.com/cython/cython/issues/4624#issuecomment-1032098326",
            "id": 1032098326,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4624",
            "node_id": "IC_kwDOABDGAc49hJIW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1032098326/reactions"
            },
            "updated_at": "2022-02-08T00:50:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1032098326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > Extension dataclasses (`cdef dataclass`) in Pure Python mode has to be ordered with the `cython.cclass` decorator inner-most to the class.\n> \n> I think it makes sense to require that. `@cclass` on a dataclass is different from `@dataclass` on a cdef class. Obviously shouldn't crash but give an appropriate error message.\n\nI disagree. I don't think we should make much sense of it really. For the sake of providing an argument against your point though:\n\n> The former, to me, makes more sense. The only way to make `@dataclass` work is to overwrite different methods of the class and doing so will create methods that use arbitrary attributes. After a class has been turned into an extension type it can no longer have arbitrary attributes, therefore you should be adding `@cclass` on a dataclass.\n> \n> Besides, if we ever needed to have this make sense logically, then `cclass` would've been a metaclass instead of a class decorator.\n\nThe way I see it, `@cython.cclass` is just a marker that can be placed anywhere.\n\nIt would be unnecessary to restrict this and all we'd be doing is disallow code that visually looks better ordered that way.",
            "created_at": "2022-02-08T18:16:46Z",
            "html_url": "https://github.com/cython/cython/issues/4624#issuecomment-1032919077",
            "id": 1032919077,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4624",
            "node_id": "IC_kwDOABDGAc49kRgl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1032919077/reactions"
            },
            "updated_at": "2022-02-08T18:16:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1032919077",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38372706?v=4",
                "events_url": "https://api.github.com/users/Bluenix2/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bluenix2/followers",
                "following_url": "https://api.github.com/users/Bluenix2/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bluenix2/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bluenix2",
                "id": 38372706,
                "login": "Bluenix2",
                "node_id": "MDQ6VXNlcjM4MzcyNzA2",
                "organizations_url": "https://api.github.com/users/Bluenix2/orgs",
                "received_events_url": "https://api.github.com/users/Bluenix2/received_events",
                "repos_url": "https://api.github.com/users/Bluenix2/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bluenix2/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bluenix2/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bluenix2"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Decorators are always ordered. Why allow something that just lets users write incorrect code? Being strict here gives us more freedom in the future, without any drawbacks for users.",
            "created_at": "2022-02-08T19:53:26Z",
            "html_url": "https://github.com/cython/cython/issues/4624#issuecomment-1033002189",
            "id": 1033002189,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4624",
            "node_id": "IC_kwDOABDGAc49klzN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1033002189/reactions"
            },
            "updated_at": "2022-02-08T19:53:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1033002189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Decorators are always ordered. Why allow something that just lets users write incorrect code? Being strict here gives us more freedom in the future, without any drawbacks for users.\n\nSo in this case you consider the correct code to be having `@cython.cclass` closest to the class, as if `cdef` was moved to the line above yeah?\n\nIn that light I do agree, although I generally think about it differently and mostly prefer the look with longer decorators closer to the class (when there's such a big difference) unless of course, there's a strictly logical reason they're ordered in the way they are (which is often not the case from the libraries I work with; including this one because there's no real logic in the decorators).",
            "created_at": "2022-02-08T22:50:24Z",
            "html_url": "https://github.com/cython/cython/issues/4624#issuecomment-1033140610",
            "id": 1033140610,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4624",
            "node_id": "IC_kwDOABDGAc49lHmC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1033140610/reactions"
            },
            "updated_at": "2022-02-08T22:51:22Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1033140610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38372706?v=4",
                "events_url": "https://api.github.com/users/Bluenix2/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bluenix2/followers",
                "following_url": "https://api.github.com/users/Bluenix2/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bluenix2/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bluenix2",
                "id": 38372706,
                "login": "Bluenix2",
                "node_id": "MDQ6VXNlcjM4MzcyNzA2",
                "organizations_url": "https://api.github.com/users/Bluenix2/orgs",
                "received_events_url": "https://api.github.com/users/Bluenix2/received_events",
                "repos_url": "https://api.github.com/users/Bluenix2/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bluenix2/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bluenix2/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bluenix2"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> So in this case you consider the correct code to be having @cython.cclass closest to the class, as if cdef was moved to the line above yeah?\r\n\r\nThat's definitely how I'd look at it - it should be made a class first, then made a cython dataclass after that.\r\n\r\nIf we're disallowing it, I do think we should have a good clear error message though (e.g. \"`cython.cclass` should be the innermost decorator\") so at least the nobody wastes too much time trying to think about the fix.",
            "created_at": "2022-02-08T23:08:02Z",
            "html_url": "https://github.com/cython/cython/issues/4624#issuecomment-1033151634",
            "id": 1033151634,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4624",
            "node_id": "IC_kwDOABDGAc49lKSS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1033151634/reactions"
            },
            "updated_at": "2022-02-08T23:08:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1033151634",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  this one because there's no real logic in the decorators\r\n\r\nI'd argue that there's actually quite a bit of logic in the `dataclass` decorator (both Cython and Python). As an example, imagine you have another decorator that does something to `__annotations__` or maybe adds an `__init__` function. The order would make a big difference to what Python's `dataclass` does",
            "created_at": "2022-02-08T23:12:31Z",
            "html_url": "https://github.com/cython/cython/issues/4624#issuecomment-1033154394",
            "id": 1033154394,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4624",
            "node_id": "IC_kwDOABDGAc49lK9a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1033154394/reactions"
            },
            "updated_at": "2022-02-08T23:12:31Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1033154394",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Although I haven't changed my preference; I have no more arguments for my cause and I accept defeat 😅. I think we can move forward with this.\r\n\r\nI might look into it this weekend and see what I can do (but to be clear: it's up-for-grabs if anyone else gets to it before i do).",
            "created_at": "2022-02-09T18:18:06Z",
            "html_url": "https://github.com/cython/cython/issues/4624#issuecomment-1034058888",
            "id": 1034058888,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4624",
            "node_id": "IC_kwDOABDGAc49onyI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1034058888/reactions"
            },
            "updated_at": "2022-02-09T18:18:06Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1034058888",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38372706?v=4",
                "events_url": "https://api.github.com/users/Bluenix2/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bluenix2/followers",
                "following_url": "https://api.github.com/users/Bluenix2/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bluenix2/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bluenix2",
                "id": 38372706,
                "login": "Bluenix2",
                "node_id": "MDQ6VXNlcjM4MzcyNzA2",
                "organizations_url": "https://api.github.com/users/Bluenix2/orgs",
                "received_events_url": "https://api.github.com/users/Bluenix2/received_events",
                "repos_url": "https://api.github.com/users/Bluenix2/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bluenix2/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bluenix2/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bluenix2"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "So I did have a look at this and found the `_extract_directives()` method but did not manage to get anywhere else other than adding some prints to `try_to_parse_directives()` and figure out how `as_cython_attribute` works. I'll make it clear that I am no longer working on this.",
            "created_at": "2022-02-13T22:02:50Z",
            "html_url": "https://github.com/cython/cython/issues/4624#issuecomment-1038449810",
            "id": 1038449810,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4624",
            "node_id": "IC_kwDOABDGAc495XyS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1038449810/reactions"
            },
            "updated_at": "2022-02-13T22:02:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1038449810",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38372706?v=4",
                "events_url": "https://api.github.com/users/Bluenix2/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bluenix2/followers",
                "following_url": "https://api.github.com/users/Bluenix2/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bluenix2/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bluenix2",
                "id": 38372706,
                "login": "Bluenix2",
                "node_id": "MDQ6VXNlcjM4MzcyNzA2",
                "organizations_url": "https://api.github.com/users/Bluenix2/orgs",
                "received_events_url": "https://api.github.com/users/Bluenix2/received_events",
                "repos_url": "https://api.github.com/users/Bluenix2/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bluenix2/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bluenix2/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bluenix2"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Extension dataclasses (`cdef dataclass`) in Pure Python mode has to be ordered with the `cython.cclass` decorator inner-most to the class.\r\n> \r\n> I think it makes sense to require that. `@cclass` on a dataclass is different from `@dataclass` on a cdef class. Obviously shouldn't crash but give an appropriate error message.\r\n\r\nI revised my opinion on this. It is easy to forget `@cython.cclass` when using `@cython.dataclasses.dataclass`, and difficult to notice, because it keeps working the same way, just with a Python dataclass.\r\n\r\n`@cclass` should be implied for `@cython.dataclasses.dataclass`.\r\n\r\nWe can still require `@cclass` for Python's own `@dataclass` decorator to distinguish between Python dataclasses and Cython dataclasses. In fact, Cython's separate decorator seems redundant, given that we can make the distinction based on `@cclass` being used together with Python's `@dataclass` decorator or not. I think that's a much simpler way to distinguish between Python dataclasses and extension type dataclasses.",
            "created_at": "2022-10-14T09:16:42Z",
            "html_url": "https://github.com/cython/cython/issues/4624#issuecomment-1278725160",
            "id": 1278725160,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4624",
            "node_id": "IC_kwDOABDGAc5MN8wo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1278725160/reactions"
            },
            "updated_at": "2022-10-14T09:16:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1278725160",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It is easy to forget `@cython.cclass` when using `@cython.dataclasses.dataclass`, and difficult to notice, because it keeps working the same way, just with a Python dataclass.\r\n\r\nI think it just does nothing rather than making it a Python dataclass. But either way it's easy to miss and the current behaviour isn't helpful.\r\n\r\n> In fact, Cython's separate decorator seems redundant, given that we can make the distinction based on `@cclass` being used together with Python's `@dataclass` decorator or not.\r\n\r\nI'm slightly undecided on this. Although on balance I think it's probably the best thing to do.\r\n* In favour it does seem a lot more straightforward. I struggle to remember what needs importing from `@cython.dataclasses.*` and what should be imported from `dataclasses`, and I really should know.\r\n* Against: I'm slightly uncomfortable with \"taking over\" someone else's module and imposing our own behaviour on it.",
            "created_at": "2022-10-15T18:56:02Z",
            "html_url": "https://github.com/cython/cython/issues/4624#issuecomment-1279808726",
            "id": 1279808726,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4624",
            "node_id": "IC_kwDOABDGAc5MSFTW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1279808726/reactions"
            },
            "updated_at": "2022-10-15T18:56:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1279808726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 11,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4624/comments",
    "created_at": "2022-02-07T21:11:38Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-02-08T23:26:04Z",
            "event": "labeled",
            "id": 6030494237,
            "label": {
                "color": "444444",
                "name": "Error Reporting"
            },
            "node_id": "LE_lADOABDGAc5DJRBTzwAAAAFncgod",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6030494237"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4624/events",
    "html_url": "https://github.com/cython/cython/issues/4624",
    "id": 1126502483,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425557478,
            "name": "Error Reporting",
            "node_id": "MDU6TGFiZWw0MjU1NTc0Nzg=",
            "url": "https://api.github.com/repos/cython/cython/labels/Error%20Reporting"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4624/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5DJRBT",
    "number": 4624,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4624/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4624/timeline",
    "title": "[BUG] Odd behavior of `cython.dataclasses.dataclass()` decorator",
    "updated_at": "2022-10-15T18:56:02Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4624",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38372706?v=4",
        "events_url": "https://api.github.com/users/Bluenix2/events{/privacy}",
        "followers_url": "https://api.github.com/users/Bluenix2/followers",
        "following_url": "https://api.github.com/users/Bluenix2/following{/other_user}",
        "gists_url": "https://api.github.com/users/Bluenix2/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Bluenix2",
        "id": 38372706,
        "login": "Bluenix2",
        "node_id": "MDQ6VXNlcjM4MzcyNzA2",
        "organizations_url": "https://api.github.com/users/Bluenix2/orgs",
        "received_events_url": "https://api.github.com/users/Bluenix2/received_events",
        "repos_url": "https://api.github.com/users/Bluenix2/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Bluenix2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Bluenix2/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Bluenix2"
    }
}