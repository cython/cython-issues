{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "<!--\r\n**Note:**\r\n- Do not use the bug and feature tracker for support requests. Use the `cython-users` mailing list instead.\r\n- Did you search for similar issues already? Please do, it helps to save us precious time that we otherwise could not invest into development.\r\n- Did you try the latest master branch or pre-release? It might already have what you want to report. Also see the [Changelog](https://github.com/cython/cython/blob/master/CHANGES.rst) regarding recent changes.\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nCurrently it is possible to define a `ctuple` like so (as [shown in the docs]( https://cython.readthedocs.io/en/latest/src/userguide/language_basics.html?highlight=ctuple#types )), which creates the needed C `struct` under-the-hood.\r\n\r\n```cython\r\ncdef (double, int) bar\r\n```\r\n\r\nThough one tricky thing with this kind of definition is the constituent elements need to be accessed via indexing. However it may not be clear what the indexes correspond to and requires a bit of re-reading of the code to figure out. To clarify the code a bit, it would be useful to name the constituent parts (analogous to what one can do with [`namedtuple`]( https://docs.python.org/3/library/collections.html#collections.namedtuple )).\r\n\r\n**Describe the solution you'd like**\r\n\r\nOne option to allow naming the constituents as part of the definition like so.\r\n\r\n```cython\r\ncdef (double d, int i) bar\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAs `ctuple`s are just syntactic sugar for `struct`s, one could just define a `struct`.\r\n\r\n```cython\r\ncdef struct bar_t:\r\n    double d\r\n    int i\r\n\r\ncdef bar_t bar\r\n```\r\n\r\nHowever there are a couple of issues here. First this makes what could have been a succinct one line change and now spreads it over multiple lines (and possibly files), which could hinder instead of improving the readability issue raised earlier. Second it does not appear to be possible to coerce sequences (like `tuple`s) to `struct`s ( https://github.com/cython/cython/issues/3806 ).\r\n\r\n**Additional context**\r\n\r\nNA\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Seems reasonable, but needs some more thinking. Things become less clear when more than one ctuple is involved, e.g.\r\n```cython\r\ncdef (double x, int y) t1 = ...\r\ncdef (double a, int b) t2 = t1\r\n```\r\nNow what? Are both compatible? Should both really have different attribute names? Should we allow (or require) a cast to get from one to the other?",
            "created_at": "2020-09-03T19:34:17Z",
            "html_url": "https://github.com/cython/cython/issues/3807#issuecomment-686713080",
            "id": 686713080,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3807",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjcxMzA4MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/686713080/reactions"
            },
            "updated_at": "2020-09-03T19:34:17Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/686713080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the feedback :)\r\n\r\nYeah that's a good question and was thinking about the same thing.\r\n\r\nWould assume they are not compatible. As there is ambiguity, would lean towards an explicit as opposed to an implicit solution (guessing you are thinking similarly?). So either require casting or possibly explicit element-wise assignment ( `t2.a, t2.b = t1.x, t1.y` ).\r\n\r\nEdit: There's probably the same question between unnamed and named `ctuple`s. Though I'm guessing we can apply a similar solution.",
            "created_at": "2020-09-03T20:03:36Z",
            "html_url": "https://github.com/cython/cython/issues/3807#issuecomment-686725977",
            "id": 686725977,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3807",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjcyNTk3Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/686725977/reactions"
            },
            "updated_at": "2020-09-03T20:04:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/686725977",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Seems reasonable, but needs some more thinking. Things become less clear when more than one ctuple is involved, e.g.\r\n> \r\n> ```cython\r\n> cdef (double x, int y) t1 = ...\r\n> cdef (double a, int b) t2 = t1\r\n> ```\r\n> \r\n> Now what? Are both compatible? Should both really have different attribute names? Should we allow (or require) a cast to get from one to the other?\r\n\r\nThey should probably be compatible, since I imagine a common use-case for this would be named return arguments, and these could easily be put into another c tuple upon returning from the function.",
            "created_at": "2024-11-09T04:28:55Z",
            "html_url": "https://github.com/cython/cython/issues/3807#issuecomment-2466041076",
            "id": 2466041076,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3807",
            "node_id": "IC_kwDOABDGAc6S_Mz0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2466041076/reactions"
            },
            "updated_at": "2024-11-09T04:28:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2466041076",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/138492675?v=4",
                "events_url": "https://api.github.com/users/bbb23exposed/events{/privacy}",
                "followers_url": "https://api.github.com/users/bbb23exposed/followers",
                "following_url": "https://api.github.com/users/bbb23exposed/following{/other_user}",
                "gists_url": "https://api.github.com/users/bbb23exposed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bbb23exposed",
                "id": 138492675,
                "login": "bbb23exposed",
                "node_id": "U_kgDOCEE7Aw",
                "organizations_url": "https://api.github.com/users/bbb23exposed/orgs",
                "received_events_url": "https://api.github.com/users/bbb23exposed/received_events",
                "repos_url": "https://api.github.com/users/bbb23exposed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bbb23exposed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bbb23exposed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bbb23exposed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "My intuition tells me that if named tuple fields have different names, then they are probably semantically different beasts. The mere fact (or coincidence?) that the field types are compatible doesn't seem enough to jump over that fence. In my example above, I would lean towards requiring some kind of explicit field mapping/copy/cast.\r\n\r\nI'm aware that Python trivially allows assigning a named tuple to a variable that previously held a named tuple of another type. And as long as both are only used as simple (unnamed) tuples, both are also trivially compatible. However, that breaks as soon as the code actually starts caring about the field names of the named tuple, so that's not really comparable to the typed ctuple case in Cython.\r\n\r\nI also think that unnamed versus named ctuples are a different situation. It seems reasonable to assign from one to the other, both ways. That's relatively explicit in terms of \"I don't care about the names here\" versus \"I do care …\". I can imagine assigning from an unnamed ctuple to a named one in order to, well, name it. And I can imagine assigning from a named ctuple to an unnamed one to store the values away or to go from a named tuple input interface to unnamed processing usage internally.\r\n\r\nThus, *if* we allow names ctuples, then I think they should be roundtrip compatible with unnamed tuples, but not directly assignment compatible with other named ctuples that use different field names.",
            "created_at": "2024-11-09T10:16:44Z",
            "html_url": "https://github.com/cython/cython/issues/3807#issuecomment-2466160000",
            "id": 2466160000,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3807",
            "node_id": "IC_kwDOABDGAc6S_p2A",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2466160000/reactions"
            },
            "updated_at": "2024-11-09T10:16:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2466160000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3807/comments",
    "created_at": "2020-09-02T23:38:00Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3807/events",
    "html_url": "https://github.com/cython/cython/issues/3807",
    "id": 691507378,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3807/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2OTE1MDczNzg=",
    "number": 3807,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/3807/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/3807/timeline",
    "title": "[ENH] Named `ctuple`s (like `namedtuple`)",
    "updated_at": "2024-11-09T10:16:45Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3807",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
        "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
        "followers_url": "https://api.github.com/users/jakirkham/followers",
        "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
        "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jakirkham",
        "id": 3019665,
        "login": "jakirkham",
        "node_id": "MDQ6VXNlcjMwMTk2NjU=",
        "organizations_url": "https://api.github.com/users/jakirkham/orgs",
        "received_events_url": "https://api.github.com/users/jakirkham/received_events",
        "repos_url": "https://api.github.com/users/jakirkham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jakirkham",
        "user_view_type": "public"
    }
}