{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Lots of error cases are untested, which is worth improving but not urgently so.\r\nHere are some chunks of code that _should_ better be tested (line numbers as found in [rev 0448bfbb9a1845a3cca5d07a32fdd4590f538713](https://github.com/cython/cython/blob/0448bfbb9a1845a3cca5d07a32fdd4590f538713/Cython/Compiler/Nodes.py), [HTML coverage report](https://github.com/cython/cython/suites/2745137547/artifacts/60678819)):\r\n\r\n- [x] Nodes.py:3480\r\n```python\r\n3480        for arg in self.args: \r\n3481            if arg.hdr_type and arg.type.is_cpp_class:   # 3481 ↛ 3484\r\n3482                # it's safe to move converted C++ types because they aren't \r\n3483                # used again afterwards \r\n3484                code.globalstate.use_utility_code( \r\n3485                    UtilityCode.load_cached(\"MoveIfSupported\", \"CppSupport.cpp\")) \r\n3486                args.append(\"__PYX_STD_MOVE_IF_SUPPORTED(%s)\" % arg.entry.cname) \r\n```\r\n- [ ] Nodes.py:3772\r\n```python\r\n3772            allow_null = all(ref.node.allow_null for ref in self.starstar_arg.entry.cf_references)  # 3772 ↛ exit\r\n3773            if allow_null:    # 3773 ↛ 3774\r\n3774                code.putln(\"%s = NULL;\" % (self.starstar_arg.entry.cname,)) \r\n```\r\n- [x] Nodes.py:4324\r\n```python\r\n4324        if old_type.is_pyobject: \r\n4325            if arg.default:  # 4325 ↛ 4326\r\n4326                code.putln(\"if (%s) {\" % arg.hdr_cname) \r\n4327            else: \r\n4328                code.putln(\"assert(%s); {\" % arg.hdr_cname) \r\n4329            self.generate_arg_conversion_from_pyobject(arg, code) \r\n4330            code.putln(\"}\") \r\n4331        elif new_type.is_pyobject:  # 4331 ↛ 4334\r\n4332            self.generate_arg_conversion_to_pyobject(arg, code) \r\n4333        else: \r\n4334            if new_type.assignable_from(old_type): \r\n4335                code.putln(\"%s = %s;\" % (arg.entry.cname, arg.hdr_cname)) \r\n4336            else: \r\n4337                error(arg.pos, \"Cannot convert 1 argument from '%s' to '%s'\" % (old_type, new_type)) \r\n```\r\n- [ ] Nodes.py:4644\r\n```python\r\n4644    def analyse_expressions(self, env): \r\n4645        self.args = env.arg_entries \r\n4646        if self.py_func.is_module_scope:  # 4646 ↛ 4647\r\n4647            first_arg = 0 \r\n```\r\n- [ ] Nodes.py:5042\r\n```python\r\n5042    def declare(self, env): \r\n5043        if self.module_name and self.visibility != 'extern':  # 5043 ↛ 5044\r\n5044            module_path = self.module_name.split(\".\") \r\n5045            home_scope = env.find_imported_module(module_path, self.pos) \r\n5046            if not home_scope: \r\n5047                return None \r\n```\r\n- [ ] Nodes.py:5680\r\n```python\r\n5680                    if func_name == 'declare': \r\n5681                        if isinstance(lhs, ExprNodes.NameNode):  # 5681 ↛ 5683\r\n5682                            vars = [(lhs.name, lhs.pos)] \r\n5683                        elif isinstance(lhs, ExprNodes.TupleNode): \r\n5684                            vars = [(var.name, var.pos) for var in lhs.args] \r\n5685                        else: \r\n5686                            error(lhs.pos, \"Invalid declaration\") \r\n5687                            return \r\n```\r\n- [ ] Nodes.py:5805\r\n```python\r\n5805                if stop_node:  # 5805 ↛ 5808\r\n5806                    stop_node = stop_node.coerce_to(PyrexTypes.c_py_ssize_t_type, env) \r\n5807                else: \r\n5808                    if node.type.is_array and node.type.size: \r\n5809                        stop_node = ExprNodes.IntNode( \r\n5810                            self.pos, value=str(node.type.size), \r\n5811                            constant_result=(node.type.size if isinstance(node.type.size, _py_int_types) \r\n5812                                             else ExprNodes.constant_value_not_set)) \r\n```\r\n- [ ] Nodes.py:5853\r\n```python\r\n5853        if start_node and not start_node.is_literal:  # 5853 ↛ 5854\r\n5854            start_node = UtilNodes.LetRefNode(start_node) \r\n5855            refs.append(start_node) \r\n5856        if stop_node and not stop_node.is_literal:  # 5856 ↛ 5857\r\n5857            stop_node = UtilNodes.LetRefNode(stop_node) \r\n5858            refs.append(stop_node) \r\n5859        if step_node and not step_node.is_literal:  # 5859 ↛ 5860\r\n5860            step_node = UtilNodes.LetRefNode(step_node) \r\n5861            refs.append(step_node) \r\n5862 \r\n5863        for ix in range(target_size): \r\n5864            ix_node = ExprNodes.IntNode(self.pos, value=str(ix), constant_result=ix, type=PyrexTypes.c_py_ssize_t_type) \r\n5865            if step_node is not None:  # 5865 ↛ 5866\r\n5866                if step_node.has_constant_result(): \r\n5867                    step_value = ix_node.constant_result * step_node.constant_result \r\n5868                    ix_node = ExprNodes.IntNode(self.pos, value=str(step_value), constant_result=step_value) \r\n5869                else: \r\n5870                    ix_node = ExprNodes.MulNode(self.pos, operator='*', operand1=step_node, operand2=ix_node) \r\n5871            if start_node is not None: \r\n5872                if start_node.has_constant_result() and ix_node.has_constant_result():  # 5872 ↛ 5876\r\n5873                    index_value = ix_node.constant_result + start_node.constant_result \r\n5874                    ix_node = ExprNodes.IntNode(self.pos, value=str(index_value), constant_result=index_value) \r\n5875                else: \r\n5876                    ix_node = ExprNodes.AddNode( \r\n```\r\n- [ ] Nodes.py:5978\r\n```python\r\n5978            # Avoid coercion for overloaded assignment operators. \r\n5979            if next(iter(lhs_types)).is_cpp_class:  # 5979 ↛ 5980\r\n5980                op = env.lookup_operator('=', [lhs, self.rhs]) \r\n5981                if not op: \r\n5982                    rhs = rhs.coerce_to(lhs_types.pop(), env) \r\n```\r\n- [ ] Nodes.py:6482\r\n```python\r\n6482        if self.in_parallel:  # 6482 ↛ 6483\r\n6483            code.putln_openmp(\"#pragma omp critical(__pyx_returning)\") \r\n```\r\n- [ ] Nodes.py:7367\r\n```python\r\n7367                if self.target.entry.scope.is_module_scope:  # 7367 ↛ 7372\r\n7368                    code.globalstate.use_utility_code( \r\n7369                        UtilityCode.load_cached(\"GetModuleGlobalName\", \"ObjectHandling.c\")) \r\n7370                    lookup_func = '__Pyx_GetModuleGlobalName(%s, %s); %s' \r\n7371                else: \r\n7372                    code.globalstate.use_utility_code( \r\n7373                        UtilityCode.load_cached(\"GetNameInClass\", \"ObjectHandling.c\")) \r\n7374                    lookup_func = '__Pyx_GetNameInClass(%s, {}, %s); %s'.format( \r\n7375                        self.target.entry.scope.namespace_cname) \r\n```\r\n- [ ] Nodes.py:7823\r\n```python\r\n7823                code.globalstate.use_utility_code( \r\n7824                    UtilityCode.load_cached(\"FastTypeChecks\", \"ModuleSetupCode.c\")) \r\n7825                if len(patterns) == 2:  # 7825 ↛ 7826\r\n7826                    exc_tests.append(\"__Pyx_PyErr_GivenExceptionMatches2(%s, %s, %s)\" % ( \r\n7827                        exc_type, patterns[0], patterns[1], \r\n7828                    )) \r\n```\r\n- [ ] Nodes.py:8468\r\n```python\r\n8468        for pos, name, as_name, kind in self.imported_names: \r\n8469            if name == \"*\": \r\n8470                for local_name, entry in list(module_scope.entries.items()): \r\n8471                    env.add_imported_entry(local_name, entry, pos) \r\n8472            else: \r\n8473                entry = module_scope.lookup(name) \r\n8474                if entry: \r\n8475                    if kind and not self.declaration_matches(entry, kind):  # 8475 ↛ 8476\r\n8476                        entry.redeclared(pos) \r\n8477                    entry.used = 1 \r\n8478                else: \r\n8479                    if kind == 'struct' or kind == 'union':  # 8479 ↛ 8480\r\n8480                        entry = module_scope.declare_struct_or_union( \r\n8481                            name, kind=kind, scope=None, typedef_flag=0, pos=pos) \r\n8482                    elif kind == 'class':  # 8482 ↛ 8483\r\n8483                        entry = module_scope.declare_c_class(name, pos=pos, module_name=module_name) \r\n8484                    else: \r\n8485                        submodule_scope = env.context.find_module( \r\n8486                            name, relative_to=module_scope, pos=self.pos, absolute_fallback=False) \r\n8487                        if submodule_scope.parent_module is module_scope:  # 8487 ↛ 8490\r\n8488                            env.declare_module(as_name or name, submodule_scope, self.pos) \r\n8489                        else: \r\n8490                            error(pos, \"Name '%s' not declared in module '%s'\" % (name, module_name)) \r\n```\r\n- [ ] Nodes.py:8554\r\n```python\r\n8554        for name, target in self.items: \r\n8555            if name == '*': \r\n8556                for _, entry in env.entries.items(): \r\n8557                    if not entry.is_type and entry.type.is_extension_type:  # 8557 ↛ 8558\r\n8558                        env.use_utility_code(UtilityCode.load_cached(\"ExtTypeTest\", \"ObjectHandling.c\")) \r\n8559                        break \r\n8560            else: \r\n8561                entry = env.lookup(target.name) \r\n8562                # check whether or not entry is already cimported \r\n8563                if (entry.is_type and entry.type.name == name  # 8563 ↛ 8565\r\n8564                        and hasattr(entry.type, 'module_name')): \r\n8565                    if entry.type.module_name == self.module.module_name.value: \r\n8566                        # cimported with absolute name \r\n8567                        continue \r\n8568                    try: \r\n8569                        # cimported with relative name \r\n8570                        module = env.find_module(self.module.module_name.value, pos=self.pos, \r\n8571                                                 relative_level=self.module.level) \r\n8572                        if entry.type.module_name == module.qualified_name: \r\n8573                            continue \r\n8574                    except AttributeError: \r\n8575                        pass \r\n```\r\n- [ ] Nodes.py:9295\r\n```python\r\n9295            code.putln(\"switch (%s) {\" % Naming.parallel_why) \r\n9296            if continue_:  # 9296 ↛ 9297\r\n9297                code.put(\"    case 1: \") \r\n9298                code.put_goto(code.continue_label) \r\n9299 \r\n9300            if break_:  # 9300 ↛ 9301\r\n9301                code.put(\"    case 2: \") \r\n9302                code.put_goto(code.break_label) \r\n```",
    "closed_at": null,
    "comment_data": [],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4163/comments",
    "created_at": "2021-05-14T20:13:11Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-05-14T20:13:11Z",
            "event": "labeled",
            "id": 4748746289,
            "label": {
                "color": "0e8a16",
                "name": "help wanted"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDQ3NDg3NDYyODk=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4748746289"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-05-14T20:13:11Z",
            "event": "labeled",
            "id": 4748746290,
            "label": {
                "color": "1d76db",
                "name": "good first issue"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDQ3NDg3NDYyOTA=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4748746290"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-05-14T20:13:21Z",
            "event": "labeled",
            "id": 4748746903,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDQ3NDg3NDY5MDM=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4748746903"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-05-14T20:13:21Z",
            "event": "labeled",
            "id": 4748746905,
            "label": {
                "color": "444444",
                "name": "Testing"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDQ3NDg3NDY5MDU=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4748746905"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "07ae63a0056cf75370413f3fcdd21e7bac9d67ee",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/07ae63a0056cf75370413f3fcdd21e7bac9d67ee",
            "created_at": "2021-05-15T08:18:57Z",
            "event": "referenced",
            "id": 4749718353,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ3NDk3MTgzNTM=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4749718353"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "9b98c4b872b813bd9118c5abec905b9097dbbf6c",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/9b98c4b872b813bd9118c5abec905b9097dbbf6c",
            "created_at": "2021-05-15T22:26:09Z",
            "event": "referenced",
            "id": 4750471857,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ3NTA0NzE4NTc=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4750471857"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "22616acd936ea18c201d81dfe53d106500b54f79",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/22616acd936ea18c201d81dfe53d106500b54f79",
            "created_at": "2022-07-18T10:05:05Z",
            "event": "referenced",
            "id": 7010613042,
            "node_id": "REFE_lADOABDGAc41Lf-2zwAAAAGh3Xcy",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/7010613042"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "8d785014c647c513adf0a2ea41441af6de73300b",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/8d785014c647c513adf0a2ea41441af6de73300b",
            "created_at": "2022-07-18T10:06:05Z",
            "event": "referenced",
            "id": 7010621009,
            "node_id": "REFE_lADOABDGAc41Lf-2zwAAAAGh3ZZR",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/7010621009"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "fdaaa24642a543881cf92d7029132d671ed0d430",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/fdaaa24642a543881cf92d7029132d671ed0d430",
            "created_at": "2022-07-18T10:57:36Z",
            "event": "referenced",
            "id": 7010959297,
            "node_id": "REFE_lADOABDGAc41Lf-2zwAAAAGh4r_B",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/7010959297"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "890364567b607ce1a3c191c9068643e69858a534",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/890364567b607ce1a3c191c9068643e69858a534",
            "created_at": "2022-07-19T11:15:21Z",
            "event": "referenced",
            "id": 7019768047,
            "node_id": "REFE_lADOABDGAc41Lf-2zwAAAAGiaSjv",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/7019768047"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "15819719f4ae804df92cf58bbb744ccd079e04e4",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/15819719f4ae804df92cf58bbb744ccd079e04e4",
            "created_at": "2022-07-20T08:11:18Z",
            "event": "referenced",
            "id": 7027004273,
            "node_id": "REFE_lADOABDGAc41Lf-2zwAAAAGi15Nx",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/7027004273"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4163/events",
    "html_url": "https://github.com/cython/cython/issues/4163",
    "id": 892207030,
    "labels": [
        {
            "color": "0e8a16",
            "default": true,
            "description": null,
            "id": 414800879,
            "name": "help wanted",
            "node_id": "MDU6TGFiZWw0MTQ4MDA4Nzk=",
            "url": "https://api.github.com/repos/cython/cython/labels/help%20wanted"
        },
        {
            "color": "1d76db",
            "default": true,
            "description": null,
            "id": 414805682,
            "name": "good first issue",
            "node_id": "MDU6TGFiZWw0MTQ4MDU2ODI=",
            "url": "https://api.github.com/repos/cython/cython/labels/good%20first%20issue"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558326,
            "name": "Testing",
            "node_id": "MDU6TGFiZWw0MjU1NTgzMjY=",
            "url": "https://api.github.com/repos/cython/cython/labels/Testing"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4163/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU4OTIyMDcwMzA=",
    "number": 4163,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4163/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4163/timeline",
    "title": "Untested code in Nodes.py",
    "updated_at": "2022-07-20T08:12:14Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4163",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder"
    }
}