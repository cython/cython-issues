{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Is your feature request related to a problem? Please describe.\n\nIn my code, I would like to do [...]\r\n```cython\r\nimport cython\r\n\r\n@cython.cclass\r\nclass B:\r\n  @cython.ccall\r\n  def method(self):\r\n     ...\r\n\r\n@cython.cclass\r\nclass D(B):\r\n  @cython.ccall\r\n  def method(self):\r\n    super().method()\r\n     ...\r\n\r\n\r\n# add use case related code here\r\n```\r\n\r\nCurrently a call to D().method() fails with RuntimeError: super(): __class__ cell not found -- or at least it does in a more complicated example.\r\n\r\n\n\n### Describe the solution you'd like.\n\nI'd like for the super().method() in D to be essentially translated into B.method(self) by the cython compiler. I know how to do this manually, but wrote code assuming this works. Even in cases where it look like it works -- in __init__() methods, for example -- it's apparently calling the builtin super(), doing an attribute lookup, and then calling the method as a python object.\r\n\r\nAlternately, this limitation should be documented. I spent some time looking for docs on this, but was unable to find any. Apologies if I missed something.\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "The difficulty is that it's not quite as simple as you might think. Multiple inheritance of cdef classes is possible (although it's really restricted because they have to have a \"compatible layout\"). For example:\r\n\r\n```\r\ncdef class A:\r\n    pass\r\n\r\ncdef class B(A):\r\n    pass\r\n\r\ncdef class C(A):\r\n    pass\r\n\r\nclass D(C, B):\r\n    pass\r\n\r\nprint(D.__mro__)\r\n```\r\n\r\nprints\r\n\r\n> `(<class 'supertst.D'>, <class 'supertst.C'>, <class 'supertst.B'>, <class 'supertst.A'>, <class 'object'>)`\r\n\r\nAnd thus `super()` from `C` _isn't_ `A`, but you couldn't easily work that out when you compile `C`.\r\n\r\n> Alternately, this limitation should be documented. I spent some time looking for docs on this, but was unable to find any. [...]\r\n\r\nMaybe... One thing I worry about with the Cython docs is that we overload people with detail.  Cdef classes have a whole bunch of restrictions compared to regular classes and the whole \"sometimes static, sometimes dynamic\" nature of Cython can lead some some unintuitive behaviour at times.  I don't think we should list them all up front because nobody would ever finish the list and get on with trying them. But maybe something in a searchable but out-of-the way place might be a help when debugging.",
            "created_at": "2025-01-13T20:18:33Z",
            "html_url": "https://github.com/cython/cython/issues/6605#issuecomment-2588111595",
            "id": 2588111595,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6605",
            "node_id": "IC_kwDOABDGAc6aQ3Lr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2588111595/reactions"
            },
            "updated_at": "2025-01-13T20:18:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2588111595",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Although - in your case there is a partial improvement that we could make:\r\n\r\n> Currently a call to D().method() fails with `RuntimeError: super(): __class__ cell not found -- or at least it does in a more complicated example`.\r\n\r\nWe currently do substitute `super()` for `super(ClassName, self)` in cdef classes, but only for regular functions, not `cfunc` or `ccall` functions\r\n\r\nhttps://github.com/cython/cython/blob/14cea8a5753a17dd2b6dc0508fe979be4c851770/Cython/Compiler/ParseTreeTransforms.py#L4031-L4033\r\n\r\nThis does mean that no-args `super()` automatically fails there, and I'm not sure there's a good reason why.",
            "created_at": "2025-01-13T20:22:59Z",
            "html_url": "https://github.com/cython/cython/issues/6605#issuecomment-2588119503",
            "id": 2588119503,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6605",
            "node_id": "IC_kwDOABDGAc6aQ5HP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2588119503/reactions"
            },
            "updated_at": "2025-01-13T20:22:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2588119503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The difficulty is that it's not quite as simple as you might think. Multiple inheritance of cdef classes is possible (although it's really restricted because they have to have a \"compatible layout\"). For example:\r\n> ... \r\n> And thus `super()` from `C` _isn't_ `A`, but you couldn't easily work that out when you compile `C`.\r\n\r\nDoesn't the cython compiler know all the bases and thus the mro?\r\n\r\n> Maybe... One thing I worry about with the Cython docs is that we overload people with detail. Cdef classes have a whole bunch of restrictions compared to regular classes and the whole \"sometimes static, sometimes dynamic\" nature of Cython can lead some some unintuitive behaviour at times. I don't think we should list them all up front because nobody would ever finish the list and get on with trying them. But maybe something in a searchable but out-of-the way place might be a help when debugging.\r\n\r\nIdeally, there should be reference documentation that spell out what is and is not supported. In this case, the exception raised doesn't really indicate what the problem is and I would have probably be mystified if I couldn't read the generated source.\r\n\r\nI appreciate that this may be low priority and remain unfixed for some time but I do think it's a limitation.\r\n",
            "created_at": "2025-01-13T20:44:45Z",
            "html_url": "https://github.com/cython/cython/issues/6605#issuecomment-2588159310",
            "id": 2588159310,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6605",
            "node_id": "IC_kwDOABDGAc6aRC1O",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2588159310/reactions"
            },
            "updated_at": "2025-01-13T20:44:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2588159310",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/234443?v=4",
                "events_url": "https://api.github.com/users/jpe/events{/privacy}",
                "followers_url": "https://api.github.com/users/jpe/followers",
                "following_url": "https://api.github.com/users/jpe/following{/other_user}",
                "gists_url": "https://api.github.com/users/jpe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jpe",
                "id": 234443,
                "login": "jpe",
                "node_id": "MDQ6VXNlcjIzNDQ0Mw==",
                "organizations_url": "https://api.github.com/users/jpe/orgs",
                "received_events_url": "https://api.github.com/users/jpe/received_events",
                "repos_url": "https://api.github.com/users/jpe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jpe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jpe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jpe",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > The difficulty is that it's not quite as simple as you might think. Multiple inheritance of cdef classes is possible (although it's really restricted because they have to have a \"compatible layout\"). For example:\r\n> > ...\r\n> > And thus `super()` from `C` _isn't_ `A`, but you couldn't easily work that out when you compile `C`.\r\n> \r\n> Doesn't the cython compiler know all the bases and thus the mro?\r\n\r\nNo - `D` is a regular class so need not be in Cython code at all.",
            "created_at": "2025-01-13T20:47:22Z",
            "html_url": "https://github.com/cython/cython/issues/6605#issuecomment-2588165606",
            "id": 2588165606,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6605",
            "node_id": "IC_kwDOABDGAc6aREXm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2588165606/reactions"
            },
            "updated_at": "2025-01-13T20:47:22Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2588165606",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "You're right -- I suspect that the problem might be worked around but it's complicated. Would an option be to convert super() into super(DefiningClass, self) in ccall methods? That should work but there would be a performance penalty that I wouldn't expect. A direct call could be made in final classes.\r\n\r\nFor cfunc methods, I'd expect any call to super() to fail so if super() is to work at all, a direct call is needed.\r\n\r\nBTW, I user super() as syntactic sugar for the base class. I don't know how common this is but I suspect it's not uncommon. particularly among those who've learned python after super() was added.",
            "created_at": "2025-01-13T21:07:08Z",
            "html_url": "https://github.com/cython/cython/issues/6605#issuecomment-2588201030",
            "id": 2588201030,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6605",
            "node_id": "IC_kwDOABDGAc6aRNBG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2588201030/reactions"
            },
            "updated_at": "2025-01-13T21:07:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2588201030",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/234443?v=4",
                "events_url": "https://api.github.com/users/jpe/events{/privacy}",
                "followers_url": "https://api.github.com/users/jpe/followers",
                "following_url": "https://api.github.com/users/jpe/following{/other_user}",
                "gists_url": "https://api.github.com/users/jpe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jpe",
                "id": 234443,
                "login": "jpe",
                "node_id": "MDQ6VXNlcjIzNDQ0Mw==",
                "organizations_url": "https://api.github.com/users/jpe/orgs",
                "received_events_url": "https://api.github.com/users/jpe/received_events",
                "repos_url": "https://api.github.com/users/jpe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jpe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jpe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jpe",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Would an option be to convert super() into super(DefiningClass, self) in ccall methods?\r\n\r\nYes probably - that's what we do for regular `def` nodes. I can't see a reason not to do it for other cases (but maybe I'm missing something really subtle).\r\n\r\n> A direct call could be made in final classes.\r\n\r\nTrue. That probably is a missed optimization.\r\n\r\nIt might also be something where a compile-time warning or performance hint would be appropriate. I suspect it could be done without any false positives.",
            "created_at": "2025-01-13T21:19:08Z",
            "html_url": "https://github.com/cython/cython/issues/6605#issuecomment-2588237222",
            "id": 2588237222,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6605",
            "node_id": "IC_kwDOABDGAc6aRV2m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2588237222/reactions"
            },
            "updated_at": "2025-01-13T21:19:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2588237222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > A direct call could be made in final classes.\r\n> \r\n> True. That probably is a missed optimization.\r\n\r\nCould a direct call also be made if a runtime check determines type(self) is a cdef class? This would cover most of my uses of super().",
            "created_at": "2025-01-13T22:35:50Z",
            "html_url": "https://github.com/cython/cython/issues/6605#issuecomment-2588368997",
            "id": 2588368997,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6605",
            "node_id": "IC_kwDOABDGAc6aR2Bl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2588368997/reactions"
            },
            "updated_at": "2025-01-13T22:35:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2588368997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/234443?v=4",
                "events_url": "https://api.github.com/users/jpe/events{/privacy}",
                "followers_url": "https://api.github.com/users/jpe/followers",
                "following_url": "https://api.github.com/users/jpe/following{/other_user}",
                "gists_url": "https://api.github.com/users/jpe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jpe",
                "id": 234443,
                "login": "jpe",
                "node_id": "MDQ6VXNlcjIzNDQ0Mw==",
                "organizations_url": "https://api.github.com/users/jpe/orgs",
                "received_events_url": "https://api.github.com/users/jpe/received_events",
                "repos_url": "https://api.github.com/users/jpe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jpe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jpe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jpe",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > > A direct call could be made in final classes.\r\n> > \r\n> > \r\n> > True. That probably is a missed optimization.\r\n> \r\n> Could a direct call also be made if a runtime check determines type(self) is a cdef class? This would cover most of my uses of super().\r\n\r\nI don't think we can actually determine that. The best you can do that `type(self)` is the current class.\r\n\r\nI'm also not completely sure it's sufficient. I think you might be able to construct my example with cdef classes (with a little effort)",
            "created_at": "2025-01-13T23:11:51Z",
            "html_url": "https://github.com/cython/cython/issues/6605#issuecomment-2588422174",
            "id": 2588422174,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6605",
            "node_id": "IC_kwDOABDGAc6aSDAe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2588422174/reactions"
            },
            "updated_at": "2025-01-13T23:11:51Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2588422174",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6605/comments",
    "created_at": "2025-01-09T20:01:46Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-01-10T04:35:35Z",
            "event": "subscribed",
            "id": 15876531997,
            "node_id": "SE_lADOABDGAc6lnvcBzwAAAAOyUKcd",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/15876531997"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6605/events",
    "html_url": "https://github.com/cython/cython/issues/6605",
    "id": 2778658561,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6605/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6lnvcB",
    "number": 6605,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6605/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6605/timeline",
    "title": "[ENH] super() in cdef classes should be improved or its limitations documented",
    "updated_at": "2025-01-13T23:11:52Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6605",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/234443?v=4",
        "events_url": "https://api.github.com/users/jpe/events{/privacy}",
        "followers_url": "https://api.github.com/users/jpe/followers",
        "following_url": "https://api.github.com/users/jpe/following{/other_user}",
        "gists_url": "https://api.github.com/users/jpe/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jpe",
        "id": 234443,
        "login": "jpe",
        "node_id": "MDQ6VXNlcjIzNDQ0Mw==",
        "organizations_url": "https://api.github.com/users/jpe/orgs",
        "received_events_url": "https://api.github.com/users/jpe/received_events",
        "repos_url": "https://api.github.com/users/jpe/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jpe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jpe/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jpe",
        "user_view_type": "public"
    }
}