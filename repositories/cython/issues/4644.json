{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "**describe the bug**\r\nI'm developing some bindings where there are a lot of C functions that basically have the signature (error_code)(*getter)(some_c_struct*, primitive_value* value_ptr)\r\nThat take a pointer, retrieve a value and either store that value in the provided pointer or return an error.\r\nI have a fused function which can convert a C value into any of about fifty different Python enums depending on its type, and having to write the same code over (E.G:\r\n    cdef primitive_value x\r\n    handle_errors(get_x(&self.c_struct, &x))\r\n    return convert_to_py(x)\r\n about a hundred times wouldn't be too enjoyable, so I tried writing a fused helper function that takes a Python value which is a Cython extension class wrapping a C struct and a function pointer to a getter function. It then gets a C struct pointer from the Python-wrapped struct using a fused function, calls the getter with that pointer, converts errors to exceptions and returns the value.\r\nHowever it crashes the compiler.\r\n**to reproduce**\r\n# types we support converting to Python. Some ints, some C enum types and maybe cython.p_char to represent strings\r\ncdef fused python_convertable:\r\n\tint\r\n\tsize_t\r\n\r\n# some structs that the C functions we're wrapping want access to, in order to get or set properties\r\ncdef struct pair_of_ints:\r\n\tint x, y\r\n\r\ncdef struct coords:\r\n\tfloat x, y, z\r\n\r\n\r\n# some struct types we have Python classes for and want to pass temporary pointers to C functions\r\n# the Python classes are not shown here for simplicity\r\ncdef fused c_struct:\r\n\tpair_of_ints\r\n\tcoords\r\n\r\n\r\n# a helper function that takes a Python object that must be a Cython class containing a c_struct and a C function pointer of type python_value(c_struct*)\r\n# it gets a pointer to the contained struct or raises an exception if the Python object is of the wrong type. It then calls the passed in function pointer with the c_struct pointer and converts the return value to a Python object using a fused conversion function that isn't defined here for simplicity\r\ncdef call_getter(object owner, python_convertable(*f)(c_struct*) ):\r\n\tcdef c_struct* c_struct_ptr = NULL\r\n# pretend we got the c_struct pointer from owner and put it in c_struct_ptr\r\n\tcdef python_convertable result = f(c_struct_ptr)\r\n\treturn result # we don't have any complex types that need converting or we would handle it in a separate fused function\r\n\r\n\r\n**Expected behavior**\r\nIt compiles\r\n**environment**\r\nOS: Windows 10 (64-bit)\r\nPython: 3.9.5\r\nCython: 0.29.26\r\n\r\n**additional context**\r\nI think I've encountered compiler crashes in the past with fused types, but I don't remember it.\r\n",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4644/comments",
    "created_at": "2022-02-15T20:20:00Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4644/events",
    "html_url": "https://github.com/cython/cython/issues/4644",
    "id": 1139175293,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4644/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5D5m99",
    "number": 4644,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4644/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4644/timeline",
    "title": "[BUG] Fused function with function pointer parameter that has a struct argument causes a compiler crash",
    "updated_at": "2022-02-15T20:20:00Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4644",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/47483928?v=4",
        "events_url": "https://api.github.com/users/Keithcat1/events{/privacy}",
        "followers_url": "https://api.github.com/users/Keithcat1/followers",
        "following_url": "https://api.github.com/users/Keithcat1/following{/other_user}",
        "gists_url": "https://api.github.com/users/Keithcat1/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Keithcat1",
        "id": 47483928,
        "login": "Keithcat1",
        "node_id": "MDQ6VXNlcjQ3NDgzOTI4",
        "organizations_url": "https://api.github.com/users/Keithcat1/orgs",
        "received_events_url": "https://api.github.com/users/Keithcat1/received_events",
        "repos_url": "https://api.github.com/users/Keithcat1/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Keithcat1/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Keithcat1/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Keithcat1"
    }
}