{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nMy Cython code which uses fused types and tries to call a native templated function fails to compile with the error:\r\n```\r\ncount_groups.pyx:35:21: Unable to deduce type parameters for void (const bool *, const index_type_T *, index_type_T, index_type_T, index_type_T *) noexcept nogil given (const bool *, const int32_t *, int32_t, int32_t, int32_t *)\r\n```\n\n### Code to reproduce the behaviour:\n\n```cython\r\nimport numpy\r\ncimport numpy\r\nfrom libc.stdint cimport int32_t, int64_t\r\nfrom libcpp cimport bool\r\n\r\n# indices, either int32 or int64 for large indices\r\nctypedef fused _group_index_type:\r\n    int32_t\r\n    int64_t\r\n\r\n\r\ncdef extern from \"count_groups.h\":\r\n    void _count_groups[index_type_T](const bool *arr_ptr,\r\n                                     const index_type_T *indices_ptr,\r\n                                     index_type_T indices_start,\r\n                                     index_type_T indices_end,\r\n                                     index_type_T *out_ptr) nogil\r\n\r\n\r\ncpdef object _cy_count_groups(numpy.ndarray[bool, ndim=1, mode='c'] arr,\r\n                              numpy.ndarray[_group_index_type, ndim=1, mode='c'] indices):\r\n    \"\"\"\r\n    Count the number of True entries in `arr` for each of the groups given by `indices`.\r\n    \"\"\"\r\n    cdef const bool *arr_ptr = <const bool *> arr.data\r\n\r\n    cdef const _group_index_type *indices_ptr = <const _group_index_type *> indices.data\r\n    cdef _group_index_type indices_start = 0\r\n    cdef _group_index_type indices_end = len(indices)\r\n\r\n    cdef numpy.ndarray[_group_index_type, ndim=1, mode='c'] out = numpy.empty(indices.shape[0], dtype=_group_index_type)\r\n    cdef _group_index_type *out_ptr = <_group_index_type *> out.data\r\n\r\n    with nogil:\r\n        _count_groups(\r\n            arr_ptr,\r\n            indices_ptr,\r\n            indices_start,\r\n            indices_end,\r\n            out_ptr)\r\n\r\n    return out\r\n```\r\n\n\n### Expected behaviour\n\nI expect the code to compile and depending on whether `indices` contains `int32` or `int64` entries call the correct `_count_groups` function.\n\n### OS\n\nLinux\n\n### Python version\n\n3.11.8\n\n### Cython version\n\n3.0.10\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "It seems that the issue is from using `cdef numpy.ndarray` typing. Switching over to typed memoryviews seems to work fine.\r\n\r\nChanging the OP sample into\r\n\r\n```\r\n# cython: language_level=3\r\n# distutils: language = c++\r\n\r\nimport numpy\r\ncimport numpy\r\ncimport cython\r\nfrom libc.stdint cimport int32_t, int64_t\r\nfrom libcpp cimport bool as cpp_bool\r\n\r\n# indices, either int32 or int64 for large indices\r\nctypedef fused _group_index_type:\r\n    int32_t\r\n    int64_t\r\n\r\n\r\ncdef extern from \"count_groups.h\":\r\n    void _count_groups[index_type_T](const cpp_bool *arr_ptr,\r\n                                     const index_type_T *indices_ptr,\r\n                                     index_type_T indices_start,\r\n                                     index_type_T indices_end,\r\n                                     index_type_T *out_ptr) nogil\r\n\r\n\r\ncpdef object _cy_count_groups(cpp_bool[::1] arr,\r\n                              _group_index_type[::1] indices):\r\n    \"\"\"\r\n    Count the number of True entries in `arr` for each of the groups given by `indices`.\r\n    \"\"\"\r\n    if _group_index_type is int32_t:\r\n        dtyp = numpy.int32\r\n    else:\r\n        dtyp = numpy.int64\r\n\r\n    cdef:\r\n        cpp_bool *arr_ptr = &arr[0]\r\n        _group_index_type *indices_ptr = &indices[0]\r\n        _group_index_type indices_start = 0\r\n        _group_index_type indices_end = len(indices)\r\n\r\n        _group_index_type[::1] out = numpy.empty(indices.shape[0], dtype=dtyp)\r\n        _group_index_type *out_ptr = &out[0]\r\n\r\n    with nogil:\r\n        _count_groups(\r\n            arr_ptr,\r\n            indices_ptr,\r\n            indices_start,\r\n            indices_end,\r\n            out_ptr)\r\n\r\n    return numpy.asarray(out)\r\n\r\n\r\n# recommended on cimport numpy\r\nnumpy.import_array()\r\n```\r\n\r\nand adding a dummy `count_groups.h` (reproduced under the fold) seems to compile and select a correct template instantiation. \r\n\r\n<details>\r\n\r\nA dummy `count_groups.h`:\r\n\r\n```\r\n#include <iostream>\r\n#include <cstdint>\r\n\r\n\r\ntemplate<typename index_type_T>\r\nvoid _count_groups(const bool *arr_ptr,\r\n                   const index_type_T *indices_ptr,\r\n                   index_type_T indices_start,\r\n                   index_type_T indices_end,\r\n                   index_type_T *out_ptr) {\r\n};\r\n\r\n\r\ntemplate<>\r\nvoid _count_groups(const bool *arr_ptr,\r\n                   const int32_t *indices_ptr,\r\n                   int32_t indices_start,\r\n                   int32_t indices_end,\r\n                   int32_t *out_ptr) {\r\n    std::cout << \"\\n32\\n\";\r\n    for (int i=indices_start; i<indices_end; i++) {\r\n        std::cout << arr_ptr[i] << \" \";\r\n    }\r\n    std::cout << \"\\n\";\r\n};\r\n\r\n\r\ntemplate<>\r\nvoid _count_groups(const bool *arr_ptr,\r\n                   const int64_t *indices_ptr,\r\n                   int64_t indices_start,\r\n                   int64_t indices_end,\r\n                   int64_t *out_ptr) {\r\n    std::cout << \"\\n64\\n\";\r\n    for (int i=indices_start; i<indices_end; i++) {\r\n        std::cout << arr_ptr[i] << \" \";\r\n    }\r\n    std::cout << \"\\n\";\r\n};\r\n```\r\n\r\nFor completeness, a `setup.py`\r\n\r\n```\r\n$ cat setup.py \r\n#cython: language_level=3\r\n\r\nimport numpy\r\nfrom setuptools import setup\r\nfrom Cython.Build import cythonize\r\n\r\nsetup(\r\n    name=\"My hello app\",\r\n    ext_modules=cythonize(\"fus.pyx\"),\r\n    include_dirs=[numpy.get_include()],\r\n)\r\n```\r\n\r\nand a trivial driver\r\n\r\n```\r\n$ cat driver.py \r\nimport numpy as np\r\nimport fus\r\n\r\narr = np.ones(3, dtype=bool)\r\narr[1] = False\r\n\r\nindices = np.ones(3, dtype=np.int32)\r\nout = fus._cy_count_groups(arr, indices)\r\nprint(indices.dtype, ' -> ' ,out.dtype)\r\n\r\n\r\nindices = indices.astype(np.int64)\r\nout = fus._cy_count_groups(arr, indices)\r\nprint(indices.dtype, ' -> ' ,out.dtype)\r\n```\r\n\r\n\r\nBuilding and running produces\r\n\r\n```\r\n$ python setup.py build_ext -i\r\nCompiling fus.pyx because it changed.\r\n[1/1] Cythonizing fus.pyx\r\nrunning build_ext\r\nbuilding 'fus' extension\r\n<snip>\r\n\r\n$ python driver.py \r\n\r\n32\r\n1 0 1 \r\nint32  ->  int32\r\n\r\n64\r\n1 0 1 \r\nint64  ->  int64\r\n```\r\n\r\n\r\n</details>",
            "created_at": "2024-07-31T10:48:35Z",
            "html_url": "https://github.com/cython/cython/issues/6294#issuecomment-2260228579",
            "id": 2260228579,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6294",
            "node_id": "IC_kwDOABDGAc6GuFnj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2260228579/reactions"
            },
            "updated_at": "2024-07-31T10:48:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2260228579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2133832?v=4",
                "events_url": "https://api.github.com/users/ev-br/events{/privacy}",
                "followers_url": "https://api.github.com/users/ev-br/followers",
                "following_url": "https://api.github.com/users/ev-br/following{/other_user}",
                "gists_url": "https://api.github.com/users/ev-br/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ev-br",
                "id": 2133832,
                "login": "ev-br",
                "node_id": "MDQ6VXNlcjIxMzM4MzI=",
                "organizations_url": "https://api.github.com/users/ev-br/orgs",
                "received_events_url": "https://api.github.com/users/ev-br/received_events",
                "repos_url": "https://api.github.com/users/ev-br/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ev-br/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ev-br/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ev-br"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks @ev-br! That code snippet does indeed work for me as well.\r\n\r\nInterestingly, though, it breaks as soon as I declare one of the pointers as const. I.e., instead of\r\n```\r\n        _group_index_type *indices_ptr = &indices[0]\r\n```\r\nI use\r\n```\r\n        const _group_index_type *indices_ptr = &indices[0]\r\n```\r\nand get the same error:\r\n```\r\ncount_groups_ev_br.pyx:44:21: Unable to deduce type parameters for void (const bool *, const index_type_T *, index_type_T, index_type_T, index_type_T *) noexcept nogil given (bool *, const int64_t *, int64_t, int64_t, int64_t *)\r\n```\r\n\r\nI then also removed the `const` in the original code which did not use typed memoryviews and now it compiles as well?!\r\n```\r\n# cython: language_level=3\r\n# distutils: language = c++\r\n\r\nimport numpy\r\ncimport numpy\r\nfrom libc.stdint cimport int32_t, int64_t\r\nfrom libcpp cimport bool\r\n\r\n# indices, either int32 or int64 for large indices\r\nctypedef fused _group_index_type:\r\n    int32_t\r\n    int64_t\r\n\r\n\r\ncdef extern from \"count_groups.h\":\r\n    void _count_groups[index_type_T](const bool *arr_ptr,\r\n                                     const index_type_T *indices_ptr,\r\n                                     int64_t indices_start,\r\n                                     int64_t indices_end,\r\n                                     index_type_T *out_ptr) nogil\r\n\r\n\r\ncpdef object _cy_count_groups(numpy.ndarray[bool, ndim=1, mode='c'] arr,\r\n                              numpy.ndarray[_group_index_type, ndim=1, mode='c'] indices):\r\n    \"\"\"\r\n    Count the number of True entries in `arr` for each of the groups given by `indices`.\r\n    \"\"\"\r\n    cdef const bool *arr_ptr = <const bool *> arr.data\r\n\r\n    cdef _group_index_type *indices_ptr = <_group_index_type *> indices.data\r\n    cdef int64_t indices_start = 0\r\n    cdef int64_t indices_end = len(indices)\r\n\r\n    if _group_index_type is int32_t:\r\n        dtyp = numpy.int32\r\n    else:\r\n        dtyp = numpy.int64\r\n    cdef numpy.ndarray[_group_index_type, ndim=1, mode='c'] out = numpy.empty(indices.shape[0], dtype=dtyp)\r\n    cdef _group_index_type *out_ptr = <_group_index_type *> out.data\r\n\r\n    with nogil:\r\n        _count_groups(\r\n            arr_ptr,\r\n            indices_ptr,\r\n            indices_start,\r\n            indices_end,\r\n            out_ptr)\r\n\r\n    return out\r\n\r\n# recommended on cimport numpy\r\nnumpy.import_array()\r\n```",
            "created_at": "2024-08-01T20:04:53Z",
            "html_url": "https://github.com/cython/cython/issues/6294#issuecomment-2263884222",
            "id": 2263884222,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6294",
            "node_id": "IC_kwDOABDGAc6G8CG-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2263884222/reactions"
            },
            "updated_at": "2024-08-01T20:04:53Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2263884222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17654416?v=4",
                "events_url": "https://api.github.com/users/ArvidJB/events{/privacy}",
                "followers_url": "https://api.github.com/users/ArvidJB/followers",
                "following_url": "https://api.github.com/users/ArvidJB/following{/other_user}",
                "gists_url": "https://api.github.com/users/ArvidJB/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ArvidJB",
                "id": 17654416,
                "login": "ArvidJB",
                "node_id": "MDQ6VXNlcjE3NjU0NDE2",
                "organizations_url": "https://api.github.com/users/ArvidJB/orgs",
                "received_events_url": "https://api.github.com/users/ArvidJB/received_events",
                "repos_url": "https://api.github.com/users/ArvidJB/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ArvidJB/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ArvidJB/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ArvidJB"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6294/comments",
    "created_at": "2024-07-17T16:57:27Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2133832?v=4",
                "events_url": "https://api.github.com/users/ev-br/events{/privacy}",
                "followers_url": "https://api.github.com/users/ev-br/followers",
                "following_url": "https://api.github.com/users/ev-br/following{/other_user}",
                "gists_url": "https://api.github.com/users/ev-br/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ev-br",
                "id": 2133832,
                "login": "ev-br",
                "node_id": "MDQ6VXNlcjIxMzM4MzI=",
                "organizations_url": "https://api.github.com/users/ev-br/orgs",
                "received_events_url": "https://api.github.com/users/ev-br/received_events",
                "repos_url": "https://api.github.com/users/ev-br/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ev-br/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ev-br/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ev-br"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-08-01T20:04:54Z",
            "event": "mentioned",
            "id": 13731504441,
            "node_id": "MEE_lADOABDGAc6P5CxazwAAAAMydiE5",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13731504441"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2133832?v=4",
                "events_url": "https://api.github.com/users/ev-br/events{/privacy}",
                "followers_url": "https://api.github.com/users/ev-br/followers",
                "following_url": "https://api.github.com/users/ev-br/following{/other_user}",
                "gists_url": "https://api.github.com/users/ev-br/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ev-br",
                "id": 2133832,
                "login": "ev-br",
                "node_id": "MDQ6VXNlcjIxMzM4MzI=",
                "organizations_url": "https://api.github.com/users/ev-br/orgs",
                "received_events_url": "https://api.github.com/users/ev-br/received_events",
                "repos_url": "https://api.github.com/users/ev-br/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ev-br/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ev-br/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ev-br"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-08-01T20:04:54Z",
            "event": "subscribed",
            "id": 13731504456,
            "node_id": "SE_lADOABDGAc6P5CxazwAAAAMydiFI",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13731504456"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6294/events",
    "html_url": "https://github.com/cython/cython/issues/6294",
    "id": 2414095450,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6294/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6P5Cxa",
    "number": 6294,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6294/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6294/timeline",
    "title": "[BUG] Unable to deduce type parameters for fused type",
    "updated_at": "2024-08-01T20:04:54Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6294",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/17654416?v=4",
        "events_url": "https://api.github.com/users/ArvidJB/events{/privacy}",
        "followers_url": "https://api.github.com/users/ArvidJB/followers",
        "following_url": "https://api.github.com/users/ArvidJB/following{/other_user}",
        "gists_url": "https://api.github.com/users/ArvidJB/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ArvidJB",
        "id": 17654416,
        "login": "ArvidJB",
        "node_id": "MDQ6VXNlcjE3NjU0NDE2",
        "organizations_url": "https://api.github.com/users/ArvidJB/orgs",
        "received_events_url": "https://api.github.com/users/ArvidJB/received_events",
        "repos_url": "https://api.github.com/users/ArvidJB/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ArvidJB/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ArvidJB/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ArvidJB"
    }
}