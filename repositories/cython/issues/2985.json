{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Platform: Windows 10\r\nPython Version: 3.6.7\r\n\r\nWhen running a program built with PyInstaller, `cdef class` types built with Cython `0.29` or later fail during extension module initialization with\r\n`AttributeError: type object '<type>' has no attribute '__reduce_cython__'`.\r\n\r\nI can confirm that the fix in Cython `0.28.3`-`2.8.6` still works.\r\n\r\nThe program works without issue when run from Python instead of the PyInstaller bundle.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I assume you read #1953, especially https://github.com/cython/cython/issues/1953#issuecomment-398128940\r\n\r\nIs the Cython version the only thing you changed that made it fail? (Same CPython, same PyInstaller version, …)\r\n\r\nDid you verify that the generated C code that fails comes from a 0.29.x version? (First line in the file.)\r\n\r\nDid you verify that your code does not have circular imports?\r\n\r\nI have no experience with PyInstaller and cannot say what it does internally. To debug this, you can search for `Re-initialisation is not supported` in the Cython generated C file and add a couple of C `printf()` debug statements here and there, to see what code path it takes and how often.",
            "created_at": "2019-06-07T05:02:36Z",
            "html_url": "https://github.com/cython/cython/issues/2985#issuecomment-499757376",
            "id": 499757376,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2985",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTc1NzM3Ng==",
            "updated_at": "2019-06-07T05:02:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/499757376",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Cython version is the only variable.\r\n\r\nBuilding a toy example does not encounter this problem, but when I include a large module with many C-extensions, I see `__pyx_pymod_exec_<module>` gets called twice from PyInstaller, but not Python. I've checked that all of the generated C files for that module were produced by Cython 0.29. To my knowledge, there are no circular imports, though the extension module initialization order does differ when run through PyInstaller compared to Python.\r\n\r\nCuriously, when passing through the `__pyx_pymod_exec_<module>` function, the re-initialization is not detected:\r\n```c\r\nstatic CYTHON_SMALL_CODE int __pyx_pymod_exec_<module>(PyObject *__pyx_pyinit_module)\r\n#endif\r\n#endif\r\n{\r\n  PyObject *__pyx_t_1 = NULL;\r\n  int __pyx_t_2;\r\n  static PyThread_type_lock __pyx_t_3[8];\r\n  __Pyx_RefNannyDeclarations\r\n  printf(\"Begin exec_peak_statistics\\n\");\r\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\r\n  printf(\"BEGIN MULTIPHASE_INIT\\n\");\r\n  if (__pyx_m) { //<<< Never True\r\n    if (__pyx_m == __pyx_pyinit_module) return 0;\r\n    PyErr_SetString(PyExc_RuntimeError, \"Module '<module>' has already been imported. Re-initialisation is not supported.\");\r\n    printf(\"Module '<module>' has already been imported. Re-initialisation is not supported.\\n\");\r\n    return -1;\r\n  }\r\n  #elif PY_MAJOR_VERSION >= 3\r\n  if (__pyx_m) return __Pyx_NewRef(__pyx_m);\r\n  #endif\r\n```\r\n\r\nWhen the program is run with PyInstaller, my print calls run like so:\r\n```\r\nBegin exec_<module>\r\nBEGIN MULTIPHASE_INIT\r\nInitializing module...\r\nCaching module...\r\nBegin exec_<module>\r\nBEGIN MULTIPHASE_INIT\r\nInitializing module...\r\nCaching module...\r\n```\r\nWhen run with Python, instead I get:\r\n```\r\nBegin exec_<module>\r\nBEGIN MULTIPHASE_INIT\r\nInitializing module...\r\nCaching module...\r\n```\r\nSo my print call in the block that tests to see if the module has been re-initialized is never executed. During both passes through the `exec_<module>` function, `__pyx_m` is `NULL` and `__pyx_pyinit_module` is some arbitrary pointer. `__pyx_pyinit_module` does not point to the same location when PyInstaller calls `exec_<module>` for the second time:\r\n```\r\nBegin exec_<module>\r\nBEGIN MULTIPHASE_INIT\r\n__pyx_m = 0000000000000000\r\n__pyx_pyinit_module = 000002ACCC241AE8\r\nInitializing module...\r\nCaching module...\r\nBegin exec_<module>\r\nBEGIN MULTIPHASE_INIT\r\n__pyx_m = 0000000000000000\r\n__pyx_pyinit_module = 000002ACCC2206D8\r\nInitializing module...\r\nCaching module...\r\n```\r\n\r\n\r\n",
            "created_at": "2019-06-07T15:23:11Z",
            "html_url": "https://github.com/cython/cython/issues/2985#issuecomment-499928125",
            "id": 499928125,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2985",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTkyODEyNQ==",
            "updated_at": "2019-06-07T15:23:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/499928125",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1426041?v=4",
                "events_url": "https://api.github.com/users/mobiusklein/events{/privacy}",
                "followers_url": "https://api.github.com/users/mobiusklein/followers",
                "following_url": "https://api.github.com/users/mobiusklein/following{/other_user}",
                "gists_url": "https://api.github.com/users/mobiusklein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mobiusklein",
                "id": 1426041,
                "login": "mobiusklein",
                "node_id": "MDQ6VXNlcjE0MjYwNDE=",
                "organizations_url": "https://api.github.com/users/mobiusklein/orgs",
                "received_events_url": "https://api.github.com/users/mobiusklein/received_events",
                "repos_url": "https://api.github.com/users/mobiusklein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mobiusklein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mobiusklein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mobiusklein"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for the investigations. Could you try a couple of more things? There is a function called `__pyx_module_cleanup`. Please add debug prints to that, too, to see if it is called in between the imports. Also, please add a `printf()` at the end of the `exec` function to see if the second import happens before or after terminating it. If it's within the first call, that would suggest that something in your module code triggers a re-import of the module. If it happens afterwards, that could suggest that PyInstaller is triggering it itself.\r\n\r\n`__pyx_pyinit_module` is the module object created for the import, so it's normal that it refers to different objects on different imports.\r\n\r\nCould it be that you are importing the module in different ways in your code? E.g. with absolute and relative imports, or with both `import pkg.module` and `from pkg import module`? It might be that PyInstaller is unable to detect that both refer to the same module, and then it might end up asking CPython to import the same module twice, which could make it re-initialise the same extension module.\r\n\r\nIt is weird, though, that `__pyx_m` is NULL in both cases. I assume it's being set where it says `Caching module` in your output? After that, it should have a non-NULL value…\r\n\r\nAlso, could you switch to 0.29.10 please, or even give the latest master a try? Just to be sure we're not chasing zombies.",
            "created_at": "2019-06-07T18:40:23Z",
            "html_url": "https://github.com/cython/cython/issues/2985#issuecomment-499995257",
            "id": 499995257,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2985",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTk5NTI1Nw==",
            "updated_at": "2019-06-07T18:40:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/499995257",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "I switched to 0.29.10:\r\n\r\nUnfortunately, I can't find any symbol with the word \"cleanup\" in it.\r\n\r\nHere's an expanded log for PyInstaller:\r\n```\r\nBegin exec_<module>\r\n__pyx_m = 0000000000000000\r\n__pyx_pyinit_module = 000001D45C300AE8\r\nBEGIN MULTIPHASE_INIT\r\nInitializing module...\r\nCaching module...\r\nBegin populating globals...\r\nAn error occured? __pyx_lineno 1\r\n__pyx_clineno 34110\r\nPy_CLEAR(__pyx_m)\r\nReturning -1\r\nBegin exec_<module>\r\n__pyx_m = 0000000000000000\r\n__pyx_pyinit_module = 000001D45C2E06D8\r\nBEGIN MULTIPHASE_INIT\r\nInitializing module...\r\nCaching module...\r\nBegin populating globals...\r\nAn error occured? __pyx_lineno 621\r\n__pyx_clineno 33939\r\nPy_CLEAR(__pyx_m)\r\nReturning -1\r\n```\r\nand for Python:\r\n```\r\nBegin exec_<module>\r\n__pyx_m = 0000000000000000\r\n__pyx_pyinit_module = 000001BCC3E7BF48\r\nBEGIN MULTIPHASE_INIT\r\nInitializing module...\r\nCaching module...\r\nBegin populating globals...\r\nNumPy C-API Initialized\r\n...Done populating globals\r\n__pyx_m = 000001BCC3E7BF48\r\nReturning 0\r\n```\r\n\r\nThis shows the PyInstaller ran module initialization is quitting somewhere in the init code and going to the error handling bock. It looks like the failure state differs between passes through the initialization block, but the module globals might have been partially initialized.\r\n\r\nThe first error happened in `__Pyx_modinit_type_import_code`, on a line importing a C module which no Python code imports directly. This made it a \"hidden import\", which I have to tell PyInstaller about explicitly. However, the explicit notification method I used was written for Python 2, and there was a small change required for Python 3. Without it , the relevant .so/.pyd isn't included in the bundle, and attempting to import it should error out. I would have expected that to bubble up to the top immediately with an `ImportError`, as it does on Py2, but alas it instead just leaves the module in a partially incomplete state that the next import attempt runs into. When I properly specify the hook for Py3, the bundle works without issue.\r\n\r\nSo the problem appears to be not that the generated `__reduce__` methods were missing, but that when they were queried and failed was somehow the next moment that Python errors could be raised?",
            "created_at": "2019-06-07T20:14:42Z",
            "html_url": "https://github.com/cython/cython/issues/2985#issuecomment-500023809",
            "id": 500023809,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2985",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDAyMzgwOQ==",
            "updated_at": "2019-06-07T20:14:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/500023809",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1426041?v=4",
                "events_url": "https://api.github.com/users/mobiusklein/events{/privacy}",
                "followers_url": "https://api.github.com/users/mobiusklein/followers",
                "following_url": "https://api.github.com/users/mobiusklein/following{/other_user}",
                "gists_url": "https://api.github.com/users/mobiusklein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mobiusklein",
                "id": 1426041,
                "login": "mobiusklein",
                "node_id": "MDQ6VXNlcjE0MjYwNDE=",
                "organizations_url": "https://api.github.com/users/mobiusklein/orgs",
                "received_events_url": "https://api.github.com/users/mobiusklein/received_events",
                "repos_url": "https://api.github.com/users/mobiusklein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mobiusklein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mobiusklein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mobiusklein"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2985/comments",
    "created_at": "2019-06-05T16:50:30Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1426041?v=4",
                "events_url": "https://api.github.com/users/mobiusklein/events{/privacy}",
                "followers_url": "https://api.github.com/users/mobiusklein/followers",
                "following_url": "https://api.github.com/users/mobiusklein/following{/other_user}",
                "gists_url": "https://api.github.com/users/mobiusklein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mobiusklein",
                "id": 1426041,
                "login": "mobiusklein",
                "node_id": "MDQ6VXNlcjE0MjYwNDE=",
                "organizations_url": "https://api.github.com/users/mobiusklein/orgs",
                "received_events_url": "https://api.github.com/users/mobiusklein/received_events",
                "repos_url": "https://api.github.com/users/mobiusklein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mobiusklein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mobiusklein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mobiusklein"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-06-05T16:50:57Z",
            "event": "renamed",
            "id": 2391873594,
            "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjM5MTg3MzU5NA==",
            "rename": {
                "from": "Regression in for no attribute '__reduce_cython__' in Cython 0.29",
                "to": "Regression for no attribute '__reduce_cython__' in Cython 0.29"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/2391873594"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2985/events",
    "html_url": "https://github.com/cython/cython/issues/2985",
    "id": 452609048,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2985/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0NTI2MDkwNDg=",
    "number": 2985,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Regression for no attribute '__reduce_cython__' in Cython 0.29",
    "updated_at": "2019-06-07T20:14:42Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2985",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1426041?v=4",
        "events_url": "https://api.github.com/users/mobiusklein/events{/privacy}",
        "followers_url": "https://api.github.com/users/mobiusklein/followers",
        "following_url": "https://api.github.com/users/mobiusklein/following{/other_user}",
        "gists_url": "https://api.github.com/users/mobiusklein/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mobiusklein",
        "id": 1426041,
        "login": "mobiusklein",
        "node_id": "MDQ6VXNlcjE0MjYwNDE=",
        "organizations_url": "https://api.github.com/users/mobiusklein/orgs",
        "received_events_url": "https://api.github.com/users/mobiusklein/received_events",
        "repos_url": "https://api.github.com/users/mobiusklein/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mobiusklein/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mobiusklein/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mobiusklein"
    }
}