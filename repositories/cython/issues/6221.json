{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Describe your issue\r\n\r\n* Identify scopes that need thread safety. That's basically everything except functions without parallel blocks in, and generators without parallel blocks in (since generators are already protected from being called when they're already running). Specifically we should assume most(?) closure scopes need thread safety, cdef classes need thread safety, and functions with parallel and a `with gil` block need thread safety.\r\n* Add a lock (`PyMutex`?) to those scopes. Note that cdef classes should already have a lock in their header in free-threading mode. I think per-scope locks are the right level of granularity here but per-variable would be another option especially at function scope.\r\n* Temps don't need locking\r\n* Chained attribute access needs transforming:\r\n    ```\r\n    x = a.b.c\r\n    # goes to:\r\n    lock a (and maybe scope of a)\r\n    temp1 = a.b\r\n    unlock a (and maybe scope of a)\r\n    lock b (and maybe x)\r\n    x = temp1.c\r\n    unlock b (and maybe x)\r\n    ```\r\n* Where two locks are needed (e.g. for assignment where we'd lock the lhs and rhs) we need to be careful and use a fixed order to avoid deadlock. The PEP for free-threading says that CPython just bases it on the addresses of the mutex so we could follow this example.\r\n* Add a compiler directive to turn this off.\r\n* Everything is guarded by `#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING` so should make little difference in other modes. The only exception is probably the chained assignment transform which will be applied universally.\r\n* We can close https://github.com/cython/cython/issues/6215 since memoryviews will be covered by this broader scheme.\r\n* There's a choice to be made about what types to apply this to\r\n    * definitely `PyObjects` and memoryviews.\r\n    * Some numeric types (e.g. float) can be inferred from valid plain Python code, so might be worth applying there,\r\n    * I also wonder about public attributes of cdef classes?",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "There's possibly also a question if a read-write mutex (e.g. `std::shared_mutex` in C++) would be a helpful optimization. I suspect it probably would, but it might mean we couldn't use `PyMutex`.",
            "created_at": "2024-05-29T07:41:46Z",
            "html_url": "https://github.com/cython/cython/issues/6221#issuecomment-2136750299",
            "id": 2136750299,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6221",
            "node_id": "IC_kwDOABDGAc5_XDjb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2136750299/reactions"
            },
            "updated_at": "2024-05-29T07:41:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2136750299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Additional note: for function local variables locking can be skipped for any variable that's never written to in a parallel block (which is likely to be most of them, and thus a significant optimization).",
            "created_at": "2024-05-29T17:26:16Z",
            "html_url": "https://github.com/cython/cython/issues/6221#issuecomment-2137919791",
            "id": 2137919791,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6221",
            "node_id": "IC_kwDOABDGAc5_bhEv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2137919791/reactions"
            },
            "updated_at": "2024-05-29T17:26:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2137919791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for putting this together @da-woods!\r\n\r\nOne question that we haven't really answered (or maybe it's clear to you what the answer should be) is how much Cython should guarantee going forward. Should we opt for \"lock everything (every scope) and guarantee correctness\" or \"let the user do the locking, in order to avoid performance regressions\"? For example, the following snippet is not thread-safe under the free-threading build:\r\n\r\n```cython\r\nfrom cython.parallel import prange\r\n\r\ndef parallel_return():\r\n    cdef int i, sum = 0\r\n\r\n    for i in prange(10, nogil=True):\r\n        with gil:\r\n            obj = i\r\n            sum += obj\r\n\r\n    return sum\r\n```\r\n\r\nOne could argue that Cython should guarantee that this is thread safe. Or maybe it should be the user's responsibility to do locking, maybe something like this (since there's no support for using `PyMutex`):\r\n\r\n```cython\r\nfrom cython.parallel import prange\r\nfrom cpython.pythread cimport (\r\n    PyThread_type_lock,\r\n    PyThread_allocate_lock,\r\n    PyThread_free_lock,\r\n    PyThread_acquire_lock,\r\n    PyThread_release_lock,\r\n    WAIT_LOCK,\r\n)\r\n\r\ndef parallel_return():\r\n    cdef int i, sum = 0\r\n    cdef PyThread_type_lock lock = PyThread_allocate_lock()\r\n\r\n    for i in prange(10, nogil=True):\r\n        with gil:\r\n            PyThread_acquire_lock(lock, WAIT_LOCK)\r\n            obj = i\r\n            sum += obj\r\n            PyThread_release_lock(lock)\r\n\r\n    PyThread_free_lock(lock)\r\n    return sum\r\n```\r\n\r\nThere's really two sides to the question:\r\n- One is more abstract: Since Python code is supposed to always be thread safe according to PEP703, should the same apply to Cython? Can we expect users to do their own locking when they're using multiple threads?\r\n- There's also the question of performance. If Cython does go with locking everything, how much of a performance burden will that be for running Cython code under the free-threading build? Should we benchmark before we decide?",
            "created_at": "2024-05-30T15:48:19Z",
            "html_url": "https://github.com/cython/cython/issues/6221#issuecomment-2140017423",
            "id": 2140017423,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6221",
            "node_id": "IC_kwDOABDGAc5_jhMP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2140017423/reactions"
            },
            "updated_at": "2024-05-30T15:48:19Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2140017423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20306270?v=4",
                "events_url": "https://api.github.com/users/lysnikolaou/events{/privacy}",
                "followers_url": "https://api.github.com/users/lysnikolaou/followers",
                "following_url": "https://api.github.com/users/lysnikolaou/following{/other_user}",
                "gists_url": "https://api.github.com/users/lysnikolaou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lysnikolaou",
                "id": 20306270,
                "login": "lysnikolaou",
                "node_id": "MDQ6VXNlcjIwMzA2Mjcw",
                "organizations_url": "https://api.github.com/users/lysnikolaou/orgs",
                "received_events_url": "https://api.github.com/users/lysnikolaou/received_events",
                "repos_url": "https://api.github.com/users/lysnikolaou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lysnikolaou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lysnikolaou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lysnikolaou"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think there' a few reasonable levels of thread safety that we could implement:\r\n1. \"reference counting doesn't get messed up\" and therefore we only apply locking to reference-counted types (PyObject, typed memoryviews).\r\n2. Option 1 + \"when we would be holding the GIL in a regular interpreter, all reading and writing is safe, so access to C types is also guarded\". This means things get read and written \"atomically\" but doesn't guarantee much about what happens between the reads and writes.\r\n3. Cython creates its own lock around `with gil:` blocks that it holds for the whole block (effectively meaning only one thread can run for that block, like in your second example)\r\n\r\nMy current view is option 1, but I think the initial implementation of option 2 would be very similar.  I think people would be disappointed with option 3.\r\n\r\nThe other thing to add is that `prange` itself has a bunch of existing rules where most C types are made thread private, and reductions are automatically inferred. I wouldn't propose changing those.\r\n\r\nUnder my scheme your example of\r\n\r\n```\r\n            obj = i\r\n            sum += obj\r\n```\r\n\r\nis thread-safe in that that the everything assigned to `obj` will be correctly destructed but we make no promises that `obj` won't be reassigned between the two lines. The `sum` variable will be inferred as an OpenMP reduction (an existing feature of `prange`) so the addition will be thread-safe (if you ignore the fact you don't quite know what's been added to it).\r\n\r\n> Since Python code is supposed to always be thread safe according to PEP703, should the same apply to Cython?\r\n\r\nMy view is largely \"yes\", with the somewhat weak definition of thread-safe above.  If Cython's only keeping reference counting safe, there's questions about variables annotated (i.e. Python-style type annotations) as `float` or `complex` though since these would be valid Python code, but would become unsafe C types in Cython.\r\n\r\n> If Cython does go with locking everything, [...]\r\n\r\nI'm trying very hard not to lock everything. Most function-scoped variables in functions without `prange/parallel` are excluded for example, because we know that no other thread can access them.\r\n\r\n> [...] how much of a performance burden will that be for running Cython code under the free-threading build?\r\n\r\nThe biggest impact is probably on `PyObject/memoryview` attributes of `cdef classes` since those will always need locking. My view is that it will probably be acceptable, and that letting users opt out for performance will be fine.",
            "created_at": "2024-05-30T19:30:37Z",
            "html_url": "https://github.com/cython/cython/issues/6221#issuecomment-2140736459",
            "id": 2140736459,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6221",
            "node_id": "IC_kwDOABDGAc5_mQvL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2140736459/reactions"
            },
            "updated_at": "2024-05-30T19:30:37Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2140736459",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure this automatic locking, especially of attributes, makes sense in Cython. I think it may land in the unhappy middle ground of poor performance and insufficient thread-safety.\r\n\r\nWhen we need locking, we generally want to do it around some higher level operation, and that's probably at a scope better determined by the user of Cython. Locking/unlocking around every attribute access doesn't provide the same guarantees that were provided by the GIL. This is different from actual Python code -- Cython code could rely on more statements being protected *together* by the GIL than actual Python code could.",
            "created_at": "2024-06-02T14:46:30Z",
            "html_url": "https://github.com/cython/cython/issues/6221#issuecomment-2143885930",
            "id": 2143885930,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6221",
            "node_id": "IC_kwDOABDGAc5_yRpq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2143885930/reactions"
            },
            "updated_at": "2024-06-02T14:55:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2143885930",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
                "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
                "followers_url": "https://api.github.com/users/colesbury/followers",
                "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
                "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/colesbury",
                "id": 655866,
                "login": "colesbury",
                "node_id": "MDQ6VXNlcjY1NTg2Ng==",
                "organizations_url": "https://api.github.com/users/colesbury/orgs",
                "received_events_url": "https://api.github.com/users/colesbury/received_events",
                "repos_url": "https://api.github.com/users/colesbury/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/colesbury"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I do see your point here. It's essentially targeting \"don't crash the Python interpreter\" as an objective. The main value of that is reducing the amount of bug reports that Cython receives, but I agree that on it's own it still leaves you with a buggy program but with valid Python objects.\r\n\r\nIn general we've tried to make the default behaviour \"safe\" and left unsafe operations as opt-in settings (e.g. for things like bounds-checking) so it's consistent with that. \r\n\r\nIt probably depends how much value you put in not crashing the Python from Cython as an objective in itself.  \r\n\r\nI definitely think Cython should expose some higher-level locking stuff nicely. Although some of that needs to become public first.",
            "created_at": "2024-06-02T19:48:55Z",
            "html_url": "https://github.com/cython/cython/issues/6221#issuecomment-2144000986",
            "id": 2144000986,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6221",
            "node_id": "IC_kwDOABDGAc5_ytva",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2144000986/reactions"
            },
            "updated_at": "2024-06-02T19:48:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2144000986",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6221/comments",
    "created_at": "2024-05-29T07:34:08Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-05-29T07:34:08Z",
            "event": "labeled",
            "id": 12967268263,
            "label": {
                "color": "A37CC3",
                "name": "nogil CPython"
            },
            "node_id": "LE_lADOABDGAc6Kb-aHzwAAAAME6M-n",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/12967268263"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-05-30T12:41:52Z",
            "event": "subscribed",
            "id": 12985542700,
            "node_id": "SE_lADOABDGAc6Kb-aHzwAAAAMF_6gs",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/12985542700"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-05-30T15:48:19Z",
            "event": "mentioned",
            "id": 12988312498,
            "node_id": "MEE_lADOABDGAc6Kb-aHzwAAAAMGKeuy",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/12988312498"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-05-30T15:48:20Z",
            "event": "subscribed",
            "id": 12988312504,
            "node_id": "SE_lADOABDGAc6Kb-aHzwAAAAMGKeu4",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/12988312504"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6221/events",
    "html_url": "https://github.com/cython/cython/issues/6221",
    "id": 2322589319,
    "labels": [
        {
            "color": "A37CC3",
            "default": false,
            "description": "",
            "id": 6871764375,
            "name": "nogil CPython",
            "node_id": "LA_kwDOABDGAc8AAAABmZbNlw",
            "url": "https://api.github.com/repos/cython/cython/labels/nogil%20CPython"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6221/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc6Kb-aH",
    "number": 6221,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6221/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6221/timeline",
    "title": "Rough plan for free-threading thread safety",
    "updated_at": "2024-06-02T19:48:56Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6221",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}