{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "`cdef extern` gives Cython access to existing C/C++ libraries. To provide Python-level access generally requires the user to write a wrapper in Cython. For functions and enums Cython can automatically do this by defining them as `cpdef`. For C structs and C++ classes that feature doesn't currently exist (although Cython does generate a C struct <-> dict conversion).\r\n\r\nCython has most of the information to generate a basic wrapper - it know what attributes and functions the type has and whether they're convertable to a Python representation. Therefore it seems reasonable for Cython to create this wrapper rather than forcing the user to do it (which is largely just duplicating the existing definition in an extension class, forwarding to `self.obj`).\r\n\r\nThis issue suggests adding that feature.\r\n\r\n[Link to cython-devel thread](https://mail.python.org/pipermail/cython-devel/2020-March/005325.html).\r\n\r\nA few notes:\r\n\r\n- Syntax is up for debate. Some suggestions\r\n  - `cython.autowrap[c_type, **keyword_options]` - probably rejected because the square brackets make it less easily translated into pure-python mode.\r\n  - `cython.autowrap(c_type, **keyword_options)`\r\n  - `@cclass` decorator on struct/c++ class. Disadvantage is that it'd hide the name of the underlying C type (which would be inconvenient for writing Cython code around it). One option might be that `@cython.cclass` hides the name but it could also be used as a call to give a different name, e.g.\r\n    `ext_class_wrapper = cython.cclass(c_type)`\r\n    `ctypedef cython.cclass(c_type) ext_class_wrapper`\r\n  - `cpdef` for consistency with automatic wrapping of functions/structs. Disadvantage is that it hides the name and there isn't an easy workaround.\r\n- It isn't important to handle everything. The user can always inherit from the created extension type to define anything that's missed.\r\n- How to handle C++ functions that return references is always tricky (because the chances are *something* owns it, but who knows what). I'd propose not to handle this, and only deal with \"return by value\".\r\n- I'm not proposing to use these types for automatic coercion between C/C++ objects and Python objects. It'd be an \"opt-in\" feature.\r\n  - partly not to break existing struct<->dict conversion and vector<->list (etc.) conversions.\r\n  - partly because it's probably possible to end up with the generated wrappers not compiling in C++ occasionally, and having them opt-in gives the user a chance of fixing that.",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3434/comments",
    "created_at": "2020-03-15T20:55:38Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3434/events",
    "html_url": "https://github.com/cython/cython/issues/3434",
    "id": 581822628,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3434/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1ODE4MjI2Mjg=",
    "number": 3434,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Auto-generation of wrappers for C structs/C++ classes",
    "updated_at": "2020-03-15T20:59:32Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3434",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}