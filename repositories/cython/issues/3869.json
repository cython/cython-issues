{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "**Describe the bug**\r\nCompiling the generated C code with `-DCYTHON_WITHOUT_ASSERTIONS` removes `assert`s. One such `assert` is in `format_from_typeinfo()` in `MemoryView.pyx`:\r\n```cython\r\nassert type.fields != NULL and type.fields.type != NULL\r\n```\r\nThe generated code looks like\r\n```C\r\n#ifndef CYTHON_WITHOUT_ASSERTIONS\r\nif (unlikely(!Py_OptimizeFlag)) {\r\n  __pyx_t_2 = ((__pyx_v_type->fields != NULL) != 0);\r\n  if (__pyx_t_2) {\r\n  } else {\r\n    __pyx_t_1 = __pyx_t_2;\r\n    goto __pyx_L4_bool_binop_done;\r\n  }\r\n  __pyx_t_2 = ((__pyx_v_type->fields->type != NULL) != 0);\r\n  __pyx_t_1 = __pyx_t_2;\r\n  __pyx_L4_bool_binop_done:;\r\n  if (unlikely(!__pyx_t_1)) {\r\n    PyErr_SetNone(PyExc_AssertionError);\r\n    __PYX_ERR(1, 1469, __pyx_L1_error)\r\n  }\r\n}\r\n#endif\r\n```\r\nHere `__pyx_t_2` is declared at the top of the function (together with other variables), but it is only ever used inside this `#ifndef` block. Thus, compiling with `-DCYTHON_WITHOUT_ASSERTIONS` (at least under gcc) emits the warning\r\n```\r\nwarning: unused variable ‘__pyx_t_2’ [-Wunused-variable]\r\n   int __pyx_t_2 = 0;\r\n```\r\n\r\n\r\n**To Reproduce**\r\n```cython\r\ncdef double[::1] ptr2view(double* ptr):\r\n    cdef double[::1] a = <double[:3]>ptr\r\n    return a\r\n```\r\n\r\n**Environment**\r\n - OS: Linux Mint 19.3\r\n - Python version: 3.8.2\r\n - Cython version: 0.29.16\r\n - C compiler: gcc 7.5.0\r\n\r\n\r\n**Proposed fix**\r\nThe `assert` in question really asks two separate questions. Splitting them into two separate `assert`s solves the issue:\r\n```cython\r\nassert type.fields != NULL\r\nassert type.fields.type != NULL\r\n```\r\nNote that as long as the order is preserved, this has the same behaviour as the combined `assert`. I believe the difference is that now, no additional, intermediate variable is needed to `and` together the two boolean expressions in the C code.\r\n\r\nIf we go with this fix, we should probably split all other \"combined `assert`s\" in a similar manner. A quick\r\n```bash\r\ngrep -r 'assert ' | grep '\\.pyx' | grep ' and '\r\n```\r\nreveals that the one in `MemoryView.pyx` is in fact the only one, not counting test code and documentation. The same goes for two `assert`s combined with `or` instead of `and`.\r\n\r\nBad code is of course still generated if a \"combined `assert`\" appears in the user code, e.g.\r\n```cython\r\ndef f(a, b):\r\n    assert a and b\r\n```\r\nbut at least now no warnings will be emitted from Cython itself.",
    "closed_at": "2020-10-08T05:07:09Z",
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3869/comments",
    "created_at": "2020-10-07T16:22:36Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-10-08T05:07:09Z",
            "event": "closed",
            "id": 3853500678,
            "node_id": "MDExOkNsb3NlZEV2ZW50Mzg1MzUwMDY3OA==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/3853500678"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3869/events",
    "html_url": "https://github.com/cython/cython/issues/3869",
    "id": 716674864,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3869/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU3MTY2NzQ4NjQ=",
    "number": 3869,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "[BUG] unused variable warning when using -DCYTHON_WITHOUT_ASSERTIONS",
    "updated_at": "2020-10-08T05:07:09Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3869",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/9202794?v=4",
        "events_url": "https://api.github.com/users/jmd-dk/events{/privacy}",
        "followers_url": "https://api.github.com/users/jmd-dk/followers",
        "following_url": "https://api.github.com/users/jmd-dk/following{/other_user}",
        "gists_url": "https://api.github.com/users/jmd-dk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jmd-dk",
        "id": 9202794,
        "login": "jmd-dk",
        "node_id": "MDQ6VXNlcjkyMDI3OTQ=",
        "organizations_url": "https://api.github.com/users/jmd-dk/orgs",
        "received_events_url": "https://api.github.com/users/jmd-dk/received_events",
        "repos_url": "https://api.github.com/users/jmd-dk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jmd-dk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jmd-dk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jmd-dk"
    }
}