{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nIn my code, I would like to do [...]\r\n```cython\r\ncdef _somefunc(...) except +catcher\r\n     # make some calls to C++ code that has arguments with  \r\n     #Rvalue&& move semantics produced by C++ calls that get screwed up if they themselves were marked except+\r\n```\r\nin 3.0.8 this produces: `Only extern functions can throw C++ exceptions.` error at compile\r\n\r\nThis was working in 3.0a6 and is used by at least one extension at Meta.  There is some advanced C++ with `folly::SemiFuture` that are not copyable and we get away with it because the code generator usually produces `cxx_call_schedule_future[FutureResultType](cxx_call2_get_future(args), future_handler_written_in_cython, <PyObject *> fut)`. The issue is some times `cxx_call2_get_future` throw exceptions, but if we make that def `except+`, it screws up code generation and makes invalid C++.  \r\n\r\n\r\n\r\nBut being able to wrap a cython `cdef` in an `except +catcher` is quite handy. \r\n\r\n\r\n### Describe the solution you'd like.\r\n\r\nWe go back to allowing except+ on cdef methods not extern\r\n\r\n### Describe alternatives you've considered.\r\n\r\nIn the past I have fixed this by producing a `.h` file that has a helper that wraps the future in yet another future so the exception gets caught up in the future so the `future_handler_written_in_cython` can examine the results of the future and handle the exception in a way that doesn't produce broken C++ code.   This can be very problematic as it requires a helper function in C++ to exist for every C++ function we want to use from cython that has this behavior. \r\n\r\nI have a workaround i'm going to try in that I can set `cxx_call_schedule_future` as except+ and see if that works and I think it might.  \r\n\r\n### Additional context\r\n\r\nfunction names in my examples have been made up to protect the innocent. ",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I have had similar issues with non extern cdef functions that return unique_ptr.   I have to produce my own definition for make_unique that doesn't include the except+.   Otherwise the exception handling breaks the C++ code.  \r\n\r\nThis requested feature would allow me to wrap where i'm calling my cdef function and handle exceptions thrown by make_unique there where its possible to do something.  Not in a function that has to return a unique_ptr no matter what or throw and exception. ",
            "created_at": "2024-02-07T20:10:15Z",
            "html_url": "https://github.com/cython/cython/issues/5981#issuecomment-1932786816",
            "id": 1932786816,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5981",
            "node_id": "IC_kwDOABDGAc5zM_yA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1932786816/reactions"
            },
            "updated_at": "2024-02-07T20:12:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1932786816",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/200457?v=4",
                "events_url": "https://api.github.com/users/fried/events{/privacy}",
                "followers_url": "https://api.github.com/users/fried/followers",
                "following_url": "https://api.github.com/users/fried/following{/other_user}",
                "gists_url": "https://api.github.com/users/fried/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fried",
                "id": 200457,
                "login": "fried",
                "node_id": "MDQ6VXNlcjIwMDQ1Nw==",
                "organizations_url": "https://api.github.com/users/fried/orgs",
                "received_events_url": "https://api.github.com/users/fried/received_events",
                "repos_url": "https://api.github.com/users/fried/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fried/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fried/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fried"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Also as this seems to have been made a compile error on purpose I don't call this a bug but a feature request",
            "created_at": "2024-02-07T20:10:46Z",
            "html_url": "https://github.com/cython/cython/issues/5981#issuecomment-1932787474",
            "id": 1932787474,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5981",
            "node_id": "IC_kwDOABDGAc5zM_8S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1932787474/reactions"
            },
            "updated_at": "2024-02-07T20:10:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1932787474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/200457?v=4",
                "events_url": "https://api.github.com/users/fried/events{/privacy}",
                "followers_url": "https://api.github.com/users/fried/followers",
                "following_url": "https://api.github.com/users/fried/following{/other_user}",
                "gists_url": "https://api.github.com/users/fried/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fried",
                "id": 200457,
                "login": "fried",
                "node_id": "MDQ6VXNlcjIwMDQ1Nw==",
                "organizations_url": "https://api.github.com/users/fried/orgs",
                "received_events_url": "https://api.github.com/users/fried/received_events",
                "repos_url": "https://api.github.com/users/fried/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fried/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fried/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fried"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If I understand correctly, inside `_somefunc` you call some c++ functions that can throw exceptions but which you're unable to mark as `except+`  because Cython fails to generate usable code for their return types. Therefore you're using `except +handler` to translate outside the Cython-defined function.\r\n\r\nI don't think it was ever intended that this worked in Cython. With that said, the error message was targeting plain `except+` (which did nothing) rather than `except +handler` (which does something, even if not intended).\r\n\r\nThe big problem is that a c++ exception will break any reference counting that happens inside `_somefunc`.\r\n\r\nI guess we could re-enable it for functions with no reference counted variables. I'd be very wary of re-enabling it generally though.\r\n",
            "created_at": "2024-02-07T22:52:44Z",
            "html_url": "https://github.com/cython/cython/issues/5981#issuecomment-1933067033",
            "id": 1933067033,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5981",
            "node_id": "IC_kwDOABDGAc5zOEMZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1933067033/reactions"
            },
            "updated_at": "2024-02-07T22:52:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1933067033",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Changing the error to a warning in Nodes.py does re-enable the expected behavior so it still works technically ",
            "created_at": "2024-02-07T23:34:56Z",
            "html_url": "https://github.com/cython/cython/issues/5981#issuecomment-1933116076",
            "id": 1933116076,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5981",
            "node_id": "IC_kwDOABDGAc5zOQKs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1933116076/reactions"
            },
            "updated_at": "2024-02-07T23:34:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1933116076",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/200457?v=4",
                "events_url": "https://api.github.com/users/fried/events{/privacy}",
                "followers_url": "https://api.github.com/users/fried/followers",
                "following_url": "https://api.github.com/users/fried/following{/other_user}",
                "gists_url": "https://api.github.com/users/fried/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fried",
                "id": 200457,
                "login": "fried",
                "node_id": "MDQ6VXNlcjIwMDQ1Nw==",
                "organizations_url": "https://api.github.com/users/fried/orgs",
                "received_events_url": "https://api.github.com/users/fried/received_events",
                "repos_url": "https://api.github.com/users/fried/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fried/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fried/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fried"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Would be nice if there was a mechanism to inject a C++ try/catch  at arbitrary points\r\n",
            "created_at": "2024-02-07T23:42:27Z",
            "html_url": "https://github.com/cython/cython/issues/5981#issuecomment-1933122469",
            "id": 1933122469,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5981",
            "node_id": "IC_kwDOABDGAc5zORul",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1933122469/reactions"
            },
            "updated_at": "2024-02-07T23:42:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1933122469",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/200457?v=4",
                "events_url": "https://api.github.com/users/fried/events{/privacy}",
                "followers_url": "https://api.github.com/users/fried/followers",
                "following_url": "https://api.github.com/users/fried/following{/other_user}",
                "gists_url": "https://api.github.com/users/fried/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fried",
                "id": 200457,
                "login": "fried",
                "node_id": "MDQ6VXNlcjIwMDQ1Nw==",
                "organizations_url": "https://api.github.com/users/fried/orgs",
                "received_events_url": "https://api.github.com/users/fried/received_events",
                "repos_url": "https://api.github.com/users/fried/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fried/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fried/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fried"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've made a PR, although I'm in two minds if it's a good idea so I'm not going to merge it myself.\r\n\r\nWhat I'm more interested in is having an example of code where the temp-handling doesn't work. We now move rather than copy a lot of temps in Cython 3, so my belief is that this type of code generally should work. If there's something we could improve with that, it'd probably be a much better fix.",
            "created_at": "2024-02-19T07:40:01Z",
            "html_url": "https://github.com/cython/cython/issues/5981#issuecomment-1951865362",
            "id": 1951865362,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5981",
            "node_id": "IC_kwDOABDGAc50VxoS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1951865362/reactions"
            },
            "updated_at": "2024-02-19T07:40:01Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1951865362",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I agree with @da-woods that having a concrete (toy, if necessary) example that exposes this issue would help. I would like to avoid covering up a bug that we can fix by allowing users to do things that we cannot fix.",
            "created_at": "2024-03-14T11:49:23Z",
            "html_url": "https://github.com/cython/cython/issues/5981#issuecomment-1997267001",
            "id": 1997267001,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5981",
            "node_id": "IC_kwDOABDGAc53C-A5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1997267001/reactions"
            },
            "updated_at": "2024-03-14T11:51:40Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1997267001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hello up there.\r\n\r\nLet me add a comment here because Pygolang is also using `except +topyexc` for\r\nnon-extern functions which stopped to work with Cython 3 and so Pygolang is\r\ncurrently  using `Cython < 3` as its build dependency.\r\n\r\nFirst to note: there is a whole \"nogil\" subsystem inside Pygolang: there are\r\nnogil functions to create channels, do operations on them, and more. Overview\r\nof this subsystem is in https://pypi.org/project/pygolang/#cython-nogil-api .\r\n\r\nPractically all functions exposed by that subsystem can raise C++ exceptions -\r\na panic in pygolang speak. For example if a user does `ch.send(...)` and the\r\nchannel `ch` was already closed, it will raise a C++ exception saying that it is\r\ninvalid to send on a closed channel.\r\n\r\nThen all those functions exposed by the nogil subsystem are _not_ marked as\r\n`except +`.  They are not marked as such so that _it is possible to do nogil\r\nprogramming on the user side with calling nogil pygolang only inside leaf\r\nfunctions while still being able to organize user program with subroutines_.\r\nFor example:\r\n\r\n```cy\r\ncdef nogil:\r\n\r\n    void fff(chan[int] ch):\r\n         ggg(ch)\r\n         \r\n    void ggg(chan[int] ch):\r\n         ch.send(1)\r\n```\r\n\r\nHere if `chan.send` would be marked as `except +...` any C++ exception raised\r\nby that `chan.send`, would be converted to Python equivalent right after the\r\ncall and would be _not propagated_ to `fff`. Which is not good from nogil point\r\nof view because `fff`, and _all_ its nogil callers, want to see the nogil C++\r\nexception as it is originally raised.\r\n\r\nThen sure, when nogil part of the program is interfaced to python part, there\r\nis a need to convert C++ exceptions to python-level exceptions. What pygolang\r\nis using to do that is that for every nogil C++ function that is invoked from\r\ngil python-related part, it is creating `_pyexc` wrapper with `except +topyexc`\r\nannotation so that that `X_pyexc` wrapper calls `X` with C++-level\r\n`try/catch`, and upon catching C++ exception translates it to Python-level\r\nexception with the help of custom `topyexc` converter:\r\n\r\n```cy\r\ncdef extern from \"golang/libgolang.h\" namespace \"golang\" nogil:\r\n    _chan  *_makechan(unsigned elemsize, unsigned size)\r\n    ...\r\n    \r\ncdef nogil:\r\n    _chan* _makechan_pyexc(unsigned elemsize, unsigned size)    except +topyexc:\r\n        return _makechan(elemsize, size)\r\n\r\n    ...\r\n        \r\ncdef class pychan:\r\n    def __cinit__(pychan pych, size=0, dtype=object):\r\n        pych.dtype = parse_dtype(dtype)\r\n        pych._ch = _makechan_pyexc(dtypeRegistry[<int>pych.dtype].size, size)\r\n```\r\n\r\n(see https://lab.nexedi.com/nexedi/pygolang/-/blob/044deb35/golang/_golang.pyx for full source)\r\n\r\nThis **works correctly** because there is no py-level refcounting happening inside\r\nnogil part of the program. But Cython 3 stopped to support this and gives\r\ncompilation error with saying that\r\n\r\n```\r\ncdef nogil:\r\n\r\n    _chan* _makechan_pyexc(unsigned elemsize, unsigned size)    except +topyexc:\r\n    ^\r\n------------------------------------------------------------\r\n\r\ngolang/_golang.pyx:569:4: Only extern functions can throw C++ exceptions.\r\n```\r\n\r\nA minimal example to demonstrate this problem is below:\r\n\r\n---- 8< ---- (`x.pyx`)\r\n```cy\r\n# cython: language_level=2\r\n# distutils: language = c++\r\n\r\ncdef extern from * nogil:\r\n    \"\"\"\r\n    #include <stdexcept>\r\n\r\n    void panic() {\r\n        throw std::runtime_error(\"panic\");\r\n    }\r\n    \"\"\"\r\n    void panic()\r\n\r\n\r\ncdef void topyexc() except *:\r\n    raise RuntimeError('zzz')\r\n\r\ncdef nogil:\r\n    void do_aaa():\r\n        do_bbb()\r\n    void do_bbb():\r\n        panic()\r\n\r\n    void do_bbb_pyexc() except +topyexc:\r\n        do_bbb()\r\n\r\n\r\ndo_bbb_pyexc()\r\n```\r\n\r\nWith Cython 0.29.37 it works correctly as expected:\r\n\r\n```console\r\n(z-dev) kirr@deca:~/tmp/trashme/cy$ cythonize -i x.pyx && python -c 'import x'\r\nCompiling /home/kirr/tmp/trashme/cy/x.pyx because it changed.\r\n[1/1] Cythonizing /home/kirr/tmp/trashme/cy/x.pyx\r\nrunning build_ext\r\nbuilding 'x' extension\r\n...\r\nx86_64-linux-gnu-g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-z,relro -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -ffile-prefix-map=/build/python2.7-vgIf7a/python2.7-2.7.18=. -fstack-protector-strong -Wformat -Werror=format-security -Wl,-z,relro -Wdate-time -D_FORTIFY_SOURCE=2 -g -ffile-prefix-map=/build/python2.7-vgIf7a/python2.7-2.7.18=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC /home/kirr/tmp/trashme/cy/tmpFtZphD/home/kirr/tmp/trashme/cy/x.o -o /home/kirr/tmp/trashme/cy/x.so\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"x.pyx\", line 28, in init x\r\n    do_bbb_pyexc()\r\n  File \"x.pyx\", line 16, in x.topyexc\r\n    raise RuntimeError('zzz')\r\nRuntimeError: zzz\r\n```\r\n\r\nHowever with Cython 3.0.10 the build fails with `Only extern functions can throw C++ exceptions`:\r\n\r\n```console\r\n(1.venv) kirr@deca:~/tmp/trashme/cy$ cythonize -i x.pyx && python -c 'import x'\r\nCompiling /home/kirr/tmp/trashme/cy/x.pyx because it changed.\r\n[1/1] Cythonizing /home/kirr/tmp/trashme/cy/x.pyx\r\nperformance hint: x.pyx:19:4: Exception check on 'do_aaa' will always require the GIL to be acquired.\r\nPossible solutions:\r\n        1. Declare 'do_aaa' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.\r\n        2. Use an 'int' return type on 'do_aaa' to allow an error code to be returned.\r\nperformance hint: x.pyx:21:4: Exception check on 'do_bbb' will always require the GIL to be acquired.\r\nPossible solutions:\r\n        1. Declare 'do_bbb' as 'noexcept' if you control the definition and you're sure you don't want the function to raise exceptions.\r\n        2. Use an 'int' return type on 'do_bbb' to allow an error code to be returned.\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n    void do_aaa():\r\n        do_bbb()\r\n    void do_bbb():\r\n        panic()\r\n\r\n    void do_bbb_pyexc() except +topyexc:\r\n    ^\r\n------------------------------------------------------------\r\n\r\nx.pyx:24:4: Only extern functions can throw C++ exceptions.\r\nTraceback (most recent call last):\r\n  File \"/home/kirr/tmp/trashme/cy/1.venv/bin/cythonize\", line 8, in <module>\r\n    sys.exit(main())\r\n             ^^^^^^\r\n  File \"/home/kirr/tmp/trashme/cy/1.venv/lib/python3.11/site-packages/Cython/Build/Cythonize.py\", line 251, in main\r\n    _cython_compile_files(all_paths, options)\r\n  File \"/home/kirr/tmp/trashme/cy/1.venv/lib/python3.11/site-packages/Cython/Build/Cythonize.py\", line 67, in _cython_compile_files\r\n    ext_modules = cythonize(\r\n                  ^^^^^^^^^^\r\n  File \"/home/kirr/tmp/trashme/cy/1.venv/lib/python3.11/site-packages/Cython/Build/Dependencies.py\", line 1154, in cythonize\r\n    cythonize_one(*args)\r\n  File \"/home/kirr/tmp/trashme/cy/1.venv/lib/python3.11/site-packages/Cython/Build/Dependencies.py\", line 1321, in cythonize_one\r\n    raise CompileError(None, pyx_file)\r\nCython.Compiler.Errors.CompileError: /home/kirr/tmp/trashme/cy/x.pyx\r\n```\r\n\r\nSo would you please restore `except +topyexc` to be possible to do for at least nogil functions?\r\n\r\nThanks beforehand,\r\nKirill",
            "created_at": "2024-06-02T12:05:49Z",
            "html_url": "https://github.com/cython/cython/issues/5981#issuecomment-2143821302",
            "id": 2143821302,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5981",
            "node_id": "IC_kwDOABDGAc5_yB32",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2143821302/reactions"
            },
            "updated_at": "2024-06-02T12:05:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2143821302",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1794248?v=4",
                "events_url": "https://api.github.com/users/navytux/events{/privacy}",
                "followers_url": "https://api.github.com/users/navytux/followers",
                "following_url": "https://api.github.com/users/navytux/following{/other_user}",
                "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/navytux",
                "id": 1794248,
                "login": "navytux",
                "node_id": "MDQ6VXNlcjE3OTQyNDg=",
                "organizations_url": "https://api.github.com/users/navytux/orgs",
                "received_events_url": "https://api.github.com/users/navytux/received_events",
                "repos_url": "https://api.github.com/users/navytux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/navytux"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This **works correctly** because there is no py-level refcounting happening inside\r\n> nogil part of the program. But Cython 3 stopped to support this and gives\r\n> compilation error with saying that\r\n \r\n> So would you please restore except +topyexc to be possible to do for at least nogil functions?\r\n\r\nThe trouble is that this isn't true and that actually refcounting *does* happen in the `nogil` part of programs. Memoryviews are specifically designed to have reference counting that can happen without the gil for example:\r\n\r\n```\r\ncdef void f(double[:] a) nogil:\r\n    cdef double[:] b = a\r\n```\r\n\r\n`f` has reference counting and needs to correctly decrement the reference count of `b` on exit.\r\n\r\n```\r\ncdef void g() nogil:\r\n    with gil:\r\n        print(None)\r\n```\r\n\r\n`g` has a `with gil:` block so although the function is `nogil` it isn't generally safe for a C++ exception to propagate through it.\r\n\r\n```\r\ncdef extern int some_func()\r\n\r\ncdef int h() nogil:\r\n    raise RuntimeError(some_func())\r\n```\r\n\r\n`h` has an implicit `with gil` block. The complication here is that `some_func` is actually run inside that implicit block, so if it raises a C++ exception then it'll fail to release the GIL again appropriately.\r\n\r\n----------------------------------------------\r\n\r\nIn general there's a surprising number of places where Cython generates cleanup code that needs to be run that doesn't involve the GIL. While I did propose a PR to restore the misfeature (with a suitable warning) it's not really ever safe to use.\r\n",
            "created_at": "2024-06-02T13:33:21Z",
            "html_url": "https://github.com/cython/cython/issues/5981#issuecomment-2143856125",
            "id": 2143856125,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5981",
            "node_id": "IC_kwDOABDGAc5_yKX9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2143856125/reactions"
            },
            "updated_at": "2024-06-02T13:33:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2143856125",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@da-woods, thanks for feedback.\r\n\r\nI see. After rechecking things a bit all your examples fall into the category\r\nwhere nogil function needs to take the gil inside. This is true for both `with\r\ngil` and for `raise RuntimeError`, which is taking the gil implicitly. And it is\r\nalso true for memoryviews, which, internally do the same \"with gil\" logic inside e.g. `__Pyx_INC_MEMVIEW`:\r\n\r\nhttps://github.com/cython/cython/blob/cf10ea12e3fc3637cf14e1bf962b295f53cc1a50/Cython/Utility/MemoryView_C.c#L529-L555\r\n\r\nI would say one of the solutions could be to track whether a nogil function\r\nreacquires gil internally and to reject `except +topyexc` only for those who\r\ndoes.\r\n\r\nNote that it is also generally possible to adjust utility code to be\r\nC++-exception safe, e.g. in C++ mode to release the references via C++\r\ndestructors, which are cared to be automatically invoked by all C++ conformant\r\ncompilers. But I'm not pushing for that.\r\n\r\nPlease note that here we are not talking about new feature. Here we are talking\r\nabout the feature that was already provided and used to be there. Sure, it was\r\ngenerally unsafe to use, but the codes who used it with care, did so correctly.\r\n\r\nSo if Cython is to remove the feature to prevent incorrect usage, in my view it\r\nshould provide a way for that existing codes to continue to work. I would say\r\nmore careful filtering-out could work (disable only under conditions that are\r\nknown not to work correctly and leave it possible to be used when everything\r\ncan be proven to be safe), or add a \"safety-belt off\" directive for those who\r\nknow what they are doing.\r\n\r\nWithout any of that there is simply _no_ _way_ for things like Pygolang\r\nCython/nogil mode to be upgraded to Cython 3.\r\n\r\nKirill",
            "created_at": "2024-06-02T19:56:16Z",
            "html_url": "https://github.com/cython/cython/issues/5981#issuecomment-2144002849",
            "id": 2144002849,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5981",
            "node_id": "IC_kwDOABDGAc5_yuMh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2144002849/reactions"
            },
            "updated_at": "2024-06-02T19:56:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2144002849",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1794248?v=4",
                "events_url": "https://api.github.com/users/navytux/events{/privacy}",
                "followers_url": "https://api.github.com/users/navytux/followers",
                "following_url": "https://api.github.com/users/navytux/following{/other_user}",
                "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/navytux",
                "id": 1794248,
                "login": "navytux",
                "node_id": "MDQ6VXNlcjE3OTQyNDg=",
                "organizations_url": "https://api.github.com/users/navytux/orgs",
                "received_events_url": "https://api.github.com/users/navytux/received_events",
                "repos_url": "https://api.github.com/users/navytux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/navytux"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5981/comments",
    "created_at": "2024-02-07T20:05:08Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-03-14T11:49:24Z",
            "event": "mentioned",
            "id": 12116971298,
            "node_id": "MEE_lADOABDGAc5-llwSzwAAAALSOk8i",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/12116971298"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-03-14T11:49:24Z",
            "event": "subscribed",
            "id": 12116971312,
            "node_id": "SE_lADOABDGAc5-llwSzwAAAALSOk8w",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/12116971312"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-06-02T19:56:17Z",
            "event": "mentioned",
            "id": 13012870791,
            "node_id": "MEE_lADOABDGAc5-llwSzwAAAAMHoKaH",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13012870791"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-06-02T19:56:17Z",
            "event": "subscribed",
            "id": 13012870794,
            "node_id": "SE_lADOABDGAc5-llwSzwAAAAMHoKaK",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/13012870794"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5981/events",
    "html_url": "https://github.com/cython/cython/issues/5981",
    "id": 2123783186,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5981/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5-llwS",
    "number": 5981,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5981/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5981/timeline",
    "title": "[ENH] `extern +catcher` syntax for non extern cdef functions and methods",
    "updated_at": "2024-06-02T19:56:17Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5981",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/200457?v=4",
        "events_url": "https://api.github.com/users/fried/events{/privacy}",
        "followers_url": "https://api.github.com/users/fried/followers",
        "following_url": "https://api.github.com/users/fried/following{/other_user}",
        "gists_url": "https://api.github.com/users/fried/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/fried",
        "id": 200457,
        "login": "fried",
        "node_id": "MDQ6VXNlcjIwMDQ1Nw==",
        "organizations_url": "https://api.github.com/users/fried/orgs",
        "received_events_url": "https://api.github.com/users/fried/received_events",
        "repos_url": "https://api.github.com/users/fried/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/fried/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fried/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/fried"
    }
}