{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nThe code below (extracted from a much longer code but is enough to see the problem). The code works fine in cython 0.29.36. Used in the full code, it produces correct results.\r\n\r\nBut ever since switching to v3.0.0, it is unable to compile.  complaining about the line \r\n        m_ind         =  remapping_simd ( mdelx, half, one, m_z )\r\n\r\nas having error from trying to convert 'int' to '__m256'. But there is no such thing taking place anyway, everything was in __m256. I think the C++ code converted has an issue in v3.0.0\n\n### Code to reproduce the behaviour:\n\n```cython\r\nimport numpy as np\r\ncimport numpy as np\r\nimport cython\r\nfrom cython.parallel import prange, parallel\r\nfrom libc.math   cimport cos, sin, exp\r\nfrom libc.stdlib cimport malloc, free, calloc\r\n\r\n\r\ncdef extern from \"<complex.h>\" nogil: #namespace \"std\" nogil:    \r\n    float real (float complex z)  # for C++\r\n    float imag (float complex z)  # for C++\r\n    float floor(float x)\r\n\r\n\r\ncdef float complex   I    = 1j \r\n\r\ncdef extern from \"immintrin.h\" nogil:     \r\n    ctypedef float  __m256\r\n    const    int _CMP_GT_OS  \r\n    \r\n    __m256 _mm256_loadu_ps  (float *__P) nogil  \r\n    __m256 _mm256_add_ps    (__m256 __A, __m256 __B) nogil\r\n    __m256 _mm256_sub_ps    (__m256 __A, __m256 __B) nogil\r\n    __m256 _mm256_mul_ps    (__m256 __A, __m256 __B) nogil\r\n    __m256 _mm256_div_ps    (__m256 __A, __m256 __B) nogil        \r\n    __m256 _mm256_set1_ps   (__m256 __A) nogil    \r\n    __m256 _mm256_set_ps    ( float e7, float e6, float e5, float e4, float e3, float e2, float e1,  float e0 ) nogil    \r\n    __m256 _mm256_floor_ps  (__m256 __A) nogil    \r\n    __m256 _mm256_cmp_ps    (__m256 __A, __m256 __B, const int _CMP_GT_OS ) nogil\r\n    __m256 _mm256_and_ps    (__m256 __A, __m256 __B) nogil    \r\n    void   _mm256_storeu_ps (float *__P, __m256 __A) nogil      \r\n\r\n\r\n@cython.boundscheck(False)      # turn off bounds-checking for entire function\r\n@cython.wraparound (False)      # turn off negative index wrapping for entire function\r\n@cython.cdivision  (True )\r\ncdef float complex SIMD_computation_SS (size_t m, size_t j, size_t SIMD, size_t loop_index, size_t ivec, float inp_val, float *inp_vec, float OUT_fft_r, float OUT_fft_i, \r\n                                        float [:,::1] table, float *INP_fft_r, float *INP_fft_i, __m256 mdelx, __m256 half, __m256 one ) nogil:    \r\n    # pointers with length 8     \r\n    cdef:                \r\n        float real[8] \r\n        float imag[8]  \r\n        float  ind[8]                  \r\n        __m256   m_inp_val, m_z, m_ind    #, m_ratio, m_ind, m_cmp\r\n        __m256   m_exp_i_r, m_exp_i_i, m_ac, m_bd, m_combo, m_inp_fft_r, m_inp_fft_i\r\n\r\n    m_inp_val = _mm256_set1_ps ( inp_val )\r\n    for loop_index in range(m):\r\n        j             =  SIMD * loop_index\r\n        m_z           = _mm256_mul_ps   ( m_inp_val , _mm256_loadu_ps( &inp_vec[j] ) )\r\n        m_ind         =  remapping_simd ( mdelx, half, one, m_z )\r\n        _mm256_storeu_ps( &ind[0], m_ind )        \r\n        \r\n        m_exp_i_r     = _mm256_set_ps ( table[<int>ind[7], 2], table[<int>ind[6], 2], table[<int>ind[5], 2], table[<int>ind[4], 2], table[<int>ind[3], 2], table[<int>ind[2], 2], table[<int>ind[1], 2], table[<int>ind[0], 2] )\r\n        m_exp_i_i     = _mm256_set_ps ( table[<int>ind[7], 1], table[<int>ind[6], 1], table[<int>ind[5], 1], table[<int>ind[4], 1], table[<int>ind[3], 1], table[<int>ind[2], 1], table[<int>ind[1], 1], table[<int>ind[0], 1] )\r\n        \r\n        m_inp_fft_r   = _mm256_loadu_ps( &INP_fft_r[j] )\r\n        m_inp_fft_i   = _mm256_loadu_ps( &INP_fft_i[j] )\r\n        \r\n        m_ac          = _mm256_mul_ps ( m_inp_fft_r , m_exp_i_r  )\r\n        m_bd          = _mm256_mul_ps ( m_inp_fft_i , m_exp_i_i  )\r\n        m_combo       = _mm256_mul_ps ( _mm256_add_ps (m_inp_fft_r , m_inp_fft_i) , _mm256_add_ps( m_exp_i_r , m_exp_i_i ) )\r\n                \r\n        _mm256_storeu_ps( &real[0], _mm256_sub_ps ( m_ac , m_bd) )\r\n        _mm256_storeu_ps( &imag[0], _mm256_sub_ps ( m_combo , _mm256_add_ps ( m_ac , m_bd) ) )\r\n        \r\n        for ivec in range(SIMD):\r\n            OUT_fft_r    = OUT_fft_r + real[ivec]\r\n            OUT_fft_i    = OUT_fft_i + imag[ivec]  \r\n    return OUT_fft_r + OUT_fft_i * I\r\n\r\n\r\n@cython.boundscheck(False)     # turn off bounds-checking for entire function\r\n@cython.wraparound (False)     # turn off negative index wrapping for entire function\r\n@cython.cdivision  (True )\r\ncdef __m256 remapping_simd ( __m256 mdelx, __m256 half, __m256 one, __m256 m_z ) nogil:\r\n    ## table is size N x 3 : table[ind] is [ x, sin(2 pi x), cos(2 pi x) ], table[ind,1] = sin(2 pi x) where  x[ind] in [0,1]\r\n    ## it's important that table be made for x in [0,1], this leads to less multiplication/division later        \r\n    cdef __m256 m_floor , m_ratio, m_mask, m_cmp\r\n    \r\n    \"\"\" Mapping z into [0, 1] interval :  m_ratio = (m_z - floor(m_z) )/ mdelx\"\"\"     \r\n    m_ratio = _mm256_div_ps   ( _mm256_sub_ps( m_z , _mm256_floor_ps ( m_z ) ) , mdelx   )  #### computation of index before floor\r\n    m_floor = _mm256_floor_ps ( m_ratio )    ### index [ big integer ]    \r\n    m_mask   = _mm256_cmp_ps   ( _mm256_sub_ps( m_ratio , m_floor ) , half, _CMP_GT_OS )\r\n    #m_mask   = one     \r\n    m_cmp   = _mm256_and_ps   ( m_mask , one )\r\n    return _mm256_add_ps( m_floor, m_cmp ) \r\n\r\n\r\n\r\n\r\n```\r\n\n\n### Expected behaviour\n\nit should compile without any problem except for some warning.\n\n### OS\n\nWindows 10\n\n### Python version\n\n3.11.3\n\n### Cython version\n\n3.0.0\n\n### Additional context\n\n_No response_",
    "closed_at": "2023-07-29T09:24:41Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "You'll most likely want to declare `remapping_simd` as `noexcept`. Cython now assumes that the function can generate exceptions, and so tries to test for an exception indicator error code. Which doesn't work because you've lied about the types.\r\n\r\nI wonder if this'd be more robust in general if you told Cython that `__m256` was an opaque struct rather than a float?\r\n\r\nPersonally, my view is that this code involves enough lying to Cython about types that it isn't a bug if it stops working. We're happy to give help about how to get it working (ideally on the Cython users mailing list rather than the bug tracker). But it's likely to be a bit fragile to changes.",
            "created_at": "2023-07-29T09:24:41Z",
            "html_url": "https://github.com/cython/cython/issues/5575#issuecomment-1656678770",
            "id": 1656678770,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5575",
            "node_id": "IC_kwDOABDGAc5ivuly",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1656678770/reactions"
            },
            "updated_at": "2023-07-29T09:24:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1656678770",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5575/comments",
    "created_at": "2023-07-29T08:46:19Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-07-29T09:24:41Z",
            "event": "closed",
            "id": 9954111134,
            "node_id": "CE_lADOABDGAc5s66iYzwAAAAJRT66e",
            "performed_via_github_app": null,
            "state_reason": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/9954111134"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-07-29T09:24:52Z",
            "event": "labeled",
            "id": 9954111657,
            "label": {
                "color": "444444",
                "name": "R: wontfix"
            },
            "node_id": "LE_lADOABDGAc5s66iYzwAAAAJRT7Cp",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/9954111657"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5575/events",
    "html_url": "https://github.com/cython/cython/issues/5575",
    "id": 1827383448,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425557400,
            "name": "R: wontfix",
            "node_id": "MDU6TGFiZWw0MjU1NTc0MDA=",
            "url": "https://api.github.com/repos/cython/cython/labels/R:%20wontfix"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5575/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5s66iY",
    "number": 5575,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5575/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5575/timeline",
    "title": "[BUG] Cython with AVX intrinsics, used to work in v0.29.36 but not v3.0.0",
    "updated_at": "2023-07-29T09:24:52Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5575",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/31689334?v=4",
        "events_url": "https://api.github.com/users/sanjiyan3/events{/privacy}",
        "followers_url": "https://api.github.com/users/sanjiyan3/followers",
        "following_url": "https://api.github.com/users/sanjiyan3/following{/other_user}",
        "gists_url": "https://api.github.com/users/sanjiyan3/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/sanjiyan3",
        "id": 31689334,
        "login": "sanjiyan3",
        "node_id": "MDQ6VXNlcjMxNjg5MzM0",
        "organizations_url": "https://api.github.com/users/sanjiyan3/orgs",
        "received_events_url": "https://api.github.com/users/sanjiyan3/received_events",
        "repos_url": "https://api.github.com/users/sanjiyan3/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/sanjiyan3/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sanjiyan3/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/sanjiyan3"
    }
}