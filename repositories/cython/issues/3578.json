{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "I'm testing gevent with Cython 3. gevent has a combination of Cython code in .pyx/pxd and pure-Python code annotated and compiled with .pxd files. (Which is awesome, BTW. Thanks again for a great project!)\r\n\r\ngevent's test suite has a job that runs all the tests and watches for memory leaks. It basically does this by using `gc.get_objects()` to count all the objects extent, run a particular test, and count the objects again. If the counts don't match, this process is repeated a few times to see if a pattern emerges. When it's been run enough times to see that a particular type of object is always gaining new instances after a test run, the test is declared to leak and is failed.\r\n\r\nUsing Cython 0.29.17, [this test job passes](https://travis-ci.org/github/gevent/gevent/jobs/683813659).\r\n\r\n[The test job with Cython 3.0a4 fails](https://travis-ci.org/github/gevent/gevent/jobs/683782800); many tests report leaks. For example:\r\n``` ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestGet)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [9, 1168, 2, 2, 2]\r\n  RuntimeError        6        +1\r\n  Timeout            10        +1\r\n```\r\n\r\nThat's showing that the last three runs of this test resulted in two new objects each time; one new `RuntimeError` and one new `Timeout` (a kind of exception). I thought at first that maybe it was just exceptions leaking since the first reports are just of exceptions, but later on we see a variety of objects leaking:\r\n```\r\n840  FAIL: test_unordered (__main__.TestErrorInIterator)\r\n841  ----------------------------------------------------------------------\r\n842  Traceback (most recent call last):\r\n843    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n844      return _RefCountChecker(self, method)(args, kwargs)\r\n845    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 192, in __call__\r\n846      while self._check_deltas(growth):\r\n847    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n848      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n849  AssertionError: refcount increased by [17, 1187, 10, 10, 10]\r\n850  list               2061        +2\r\n851  deque                 5        +1\r\n852  ThreadPool            5        +1\r\n853  instancemethod      116        +1\r\n854  set                 291        +1\r\n855  Queue                 5        +1\r\n856  Semaphore             5        +1\r\n857  fork                  5        +1\r\n858  _Condition            7        +1\r\n```\r\n\r\nI've been using `language_level=3str` in most places for some time already. The only other thing that caught my eye as a possible cause was the change to make `binding` True by default. But I changed that [directive in my `setup.py`](https://github.com/gevent/gevent/blob/80a66d6d36335ddb506a1f9f39f82efa0eef9b2d/_setuputils.py#L258-L262) and tested locally and still get the failures. \r\n\r\nLocally I've tested 3.0a1 through 3.0a4, inclusive, and get the failures on all versions. (I also tried git master as-of now—I think—and have the same issues.)\r\n\r\nNext, I tried not using Cython compiled versions of the pure-Python modules, keeping just the compiled .pyx files, and locally the tests pass again (let me know if that wasn't clear). So it appears to have something to do with that mode? \r\n\r\nI haven't tried to create a smaller example yet because I was hoping the problem might just be obvious :) Please let me know what other info I can provide or how I can help track this down.",
    "closed_at": "2020-05-09T18:05:10Z",
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "It might be possible to get a more detailed diagnosis by setting `CYTHON_REFNANNY` as a cflag when you run the tests - https://github.com/cython/cython/wiki/enhancements-refnanny. That's Cython's own mechanism for trying to identify memory leaks. It'd usually give you some line numbers for the generated C code.",
            "created_at": "2020-05-06T18:04:04Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-624802339",
            "id": 624802339,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDgwMjMzOQ==",
            "updated_at": "2020-05-06T18:04:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/624802339",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yeah, without knowing the code base at all, this is going to be really difficult to debug.\r\n+1 for giving the refnanny a run over it. You just need an installed Cython version and then define the C macro `CYTHON_REFNANNY=1` (with `-D` in your CFLAGS, or in your setup.py).",
            "created_at": "2020-05-07T12:04:16Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-625213305",
            "id": 625213305,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTIxMzMwNQ==",
            "updated_at": "2020-05-07T12:04:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625213305",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "FWIW, I tried building gevent on my side, noticed that it has non-trivial dependencies, tried to follow the travis build script for setting those up, and failed. Miserably.\r\n@jamadden it would be nice if you could try a test run with the refnanny on your side and if it complains somewhere, paste the respective C code snippets here.",
            "created_at": "2020-05-08T09:51:45Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-625737237",
            "id": 625737237,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTczNzIzNw==",
            "updated_at": "2020-05-08T09:51:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625737237",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "gevent should be pretty easy to build; the Travis script is complicated to allow caching. Here's how I ran with the refnanny just now. I didn't see any complaints.\r\n\r\n```console\r\n$ mktmpenv -p /opt/local/bin/python2.7  # clean virtual env; leak tests are (still) most heavily tested under Python 2.7\r\nRunning virtualenv with interpreter /opt/local/bin/python2.7\r\nNew python executable in //tmp-cbef1ea9989eef/bin/python\r\nInstalling setuptools, pip, wheel...\r\ndone.\r\n...\r\n$ git clone https://github.com/gevent/gevent\r\n$ cd ./gevent\r\n$ pip install -U 'cython>=3.0a4' cffi setuptools # needed to build\r\nCollecting cython\r\n  Using cached Cython-3.0a4-cp27-cp27m-macosx_10_9_x86_64.whl (1.9 MB)\r\nCollecting cffi\r\n  Using cached cffi-1.14.0-cp27-cp27m-macosx_10_9_x86_64.whl (173 kB)\r\n...\r\n$ CPPFLAGS=\"-DCYTHON_REFNANNY=1\" python setup.py develop\r\nCompiling src/gevent/resolver/cares.pyx because it changed.\r\n[1/1] Cythonizing src/gevent/resolver/cares.pyx\r\nCompiling src/gevent/libev/corecext.pyx because it changed.\r\n…\r\nbuilding 'gevent.__greenlet_primitives' extension\r\nccache /usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -pipe -Ofast -pipe -ffast-math -msse -msse2 -msse3 -fomit-frame-pointer -march=native -flto -ffunction-sections -Wno-parentheses-equality -isysroot/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -Ofast -pipe -ffast-math -msse -msse2 -msse3 -fomit-frame-pointer -march=native -flto -ffunction-sections -Wno-parentheses-equality -DCYTHON_REFNANNY=1 -I/opt/local/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -I//include/python2.7 -I//gevent/deps -Isrc/gevent -Isrc/gevent/libev -Isrc/gevent/resolver -I. -I/opt/local/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/gevent/_greenlet_primitives.c -o build/temp.macosx-10.15-x86_64-2.7/src/gevent/_greenlet_primitives.o -Wno-unreachable-code -Wno-deprecated-declarations -Wno-incompatible-sysroot -Wno-tautological-compare -Wno-implicit-function-declaration -Wno-unused-value -Wno-macro-redefined\r\n…\r\nFinished processing dependencies for gevent==20.5.1.dev0\r\n$ pip install objgraph # needed for the leak checks\r\nCollecting objgraph\r\n  Using cached objgraph-3.4.1-py2.py3-none-any.whl (17 kB)\r\nCollecting graphviz\r\n  Downloading graphviz-0.14-py2.py3-none-any.whl (18 kB)\r\nInstalling collected packages: graphviz, objgraph\r\nSuccessfully installed graphviz-0.14 objgraph-3.4.1\r\n$ GEVENTTEST_LEAKCHECK=1 python -m gevent.tests\r\n…\r\nGEVENTTEST_LEAKCHECK=1 //bin/python -u -mgevent.tests.test__queue\r\n  ....FF...FF...FF...FF...FF..........FF..FF..FF..FF..FF............\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout (__main__.TestGetInterrupt)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [3, 1109, 1, 1, 1]\r\n  Timeout        5        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestGetInterrupt)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [5, 1111, 2, 2, 2]\r\n  Timeout            10        +1\r\n  RuntimeError        6        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout (__main__.TestGetInterruptChannel)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [3, 1118, 1, 1, 1]\r\n  Timeout       15        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestGetInterruptChannel)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [5, 1121, 2, 2, 2]\r\n  Timeout            20        +1\r\n  RuntimeError       11        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout (__main__.TestGetInterruptJoinableQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [3, 1128, 1, 1, 1]\r\n  Timeout       25        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestGetInterruptJoinableQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [5, 1131, 2, 2, 2]\r\n  Timeout            30        +1\r\n  RuntimeError       16        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout (__main__.TestGetInterruptLifoQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [3, 1138, 1, 1, 1]\r\n  Timeout       35        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestGetInterruptLifoQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [5, 1141, 2, 2, 2]\r\n  Timeout            40        +1\r\n  RuntimeError       21        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout (__main__.TestGetInterruptPriorityQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [3, 1148, 1, 1, 1]\r\n  Timeout       45        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestGetInterruptPriorityQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [5, 1151, 2, 2, 2]\r\n  Timeout            50        +1\r\n  RuntimeError       26        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout (__main__.TestPutInterrupt)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [3, 1172, 1, 1, 1]\r\n  Timeout       55        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestPutInterrupt)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [5, 1175, 2, 2, 2]\r\n  Timeout            60        +1\r\n  RuntimeError       31        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout (__main__.TestPutInterruptChannel)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [3, 1180, 1, 1, 1]\r\n  Timeout       65        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestPutInterruptChannel)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [5, 1183, 2, 2, 2]\r\n  Timeout            70        +1\r\n  RuntimeError       36        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout (__main__.TestPutInterruptJoinableQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [3, 1190, 1, 1, 1]\r\n  Timeout       75        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestPutInterruptJoinableQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [5, 1194, 2, 2, 2]\r\n  Timeout            80        +1\r\n  RuntimeError       41        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout (__main__.TestPutInterruptLifoQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [4, 1200, 1, 1, 1]\r\n  Timeout       85        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestPutInterruptLifoQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [6, 1203, 2, 2, 2]\r\n  Timeout            90        +1\r\n  RuntimeError       46        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout (__main__.TestPutInterruptPriorityQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [4, 1208, 1, 1, 1]\r\n  Timeout       95        +1\r\n\r\n  ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestPutInterruptPriorityQueue)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"//gevent/src/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [6, 1211, 2, 2, 2]\r\n  Timeout           100        +1\r\n  RuntimeError       51        +1\r\n\r\n  ----------------------------------------------------------------------\r\n  Ran 66 tests in 20.825s\r\n\r\n  FAILED (failures=20)\r\n```",
            "created_at": "2020-05-08T11:51:13Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-625778637",
            "id": 625778637,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTc3ODYzNw==",
            "updated_at": "2020-05-08T11:51:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625778637",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmm, too bad. It prints stuff like `REFNANNY: References leaked:` to stdout from the running code (because we use doctests in Cython, where stdout stands out). Is that maybe captured and hidden in your tests? Maybe there's a \"verbose\" option to show test outputs?",
            "created_at": "2020-05-08T11:58:31Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-625781061",
            "id": 625781061,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTc4MTA2MQ==",
            "updated_at": "2020-05-08T11:58:31Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625781061",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Is that maybe captured and hidden in your tests? Maybe there's a \"verbose\" option to show test outputs?\r\n\r\nYes, good point. stdout is buffered and hidden unless the test fails. If the test fails, stdout is printed. There is a verbose option that skips the buffering (or an individual test can be run directly; they're just straight forward `unittest` modules run with `unittest.main`). If I do that, I see three passing tests print some refnanny lines apparently during interpreter shutdown; none of the tests that fail with leaks print anything. \r\n\r\nThe passing tests that print are all testing imports, so they import or execute a bunch of modules without actually doing much else. The output for all of them looks like this:\r\n\r\n```\r\n| GEVENTTEST_LEAKCHECK=1 //bin/python -u -mgevent.tests.test__execmodules\r\n  .....................................................s..............\r\n  ----------------------------------------------------------------------\r\n  Ran 68 tests in 0.357s\r\n\r\n  OK (skipped=1)\r\n  refnanny raised an exception: 'NoneType' object has no attribute 'append'\r\n  refnanny raised an exception: 'NoneType' object has no attribute 'append'\r\n  refnanny raised an exception: 'NoneType' object has no attribute 'append'\r\n  refnanny raised an exception: 'NoneType' object has no attribute 'append'\r\n  refnanny raised an exception: 'NoneType' object has no attribute 'append'\r\n  refnanny raised an exception: 'NoneType' object has no attribute 'append'\r\n  refnanny raised an exception: 'NoneType' object has no attribute 'append'\r\n  refnanny raised an exception: 'NoneType' object has no attribute 'append'\r\n  refnanny raised an exception: 'NoneType' object has no attribute 'append'\r\n  refnanny raised an exception: 'NoneType' object has no attribute 'append'\r\n\r\n- GEVENTTEST_LEAKCHECK=1 //bin/python -u -mgevent.tests.test__execmodules [Ran 68 tests in 0.5s]\r\n```",
            "created_at": "2020-05-08T12:08:44Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-625784636",
            "id": 625784636,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTc4NDYzNg==",
            "updated_at": "2020-05-08T12:08:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625784636",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Asking objgraph to produce a graph of the references to the leaking objects shows a bunch of objects hanging out with refcounts > 0, but no apparent objects still referencing them.\r\n![objgraph-RpbewR](https://user-images.githubusercontent.com/1256082/81404961-57f42d80-90fc-11ea-87f1-8bc3f9c77a3b.png)\r\n\r\nOr, objects with a reference count of 2, but only one identifiable reference.\r\n![objgraph-2uLH1b](https://user-images.githubusercontent.com/1256082/81405369-1ca62e80-90fd-11ea-9943-70d04308694c.png)\r\n\r\n",
            "created_at": "2020-05-08T12:25:46Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-625790951",
            "id": 625790951,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTc5MDk1MQ==",
            "updated_at": "2020-05-08T12:25:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625790951",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yeah, the crucial part is to find out where these objects originate and at which point we loose the reference. We already knew which type of objects were left over in the end.\r\nBut if the refnanny doesn't complain, then the problem is almost certainly in some hand written helper function and not in generated code. Humans get things wrong much more easily than machines. :) I'll see if I can find anything suspicious.",
            "created_at": "2020-05-08T13:12:11Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-625808760",
            "id": 625808760,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTgwODc2MA==",
            "updated_at": "2020-05-08T13:12:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625808760",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It's looking like it has to do with keyword argument handling.\r\n\r\nI've simplified and added some print debugging. A successful run (no leaks) outputs this; notice the begin and end ref counts of the parameter object are the same:\r\n```\r\nbegin; id= 4382381952 RC 2\r\n  before wait; id= 4382381952 RC 5\r\n\t\tcalling get on <Queue> id= 4382381952 rc= 7\r\n\t\t\tEntered get; id= 4382381952 rc= 8 \r\n\t\t\tExited get; id= 4382381952 rc= 8\r\n\t\tcalled get <Queue> id= 4382381952 rc= 7\r\n  after wait; id= 4382381952 RC 5\r\nend; RC 2\r\n```\r\n\r\nThe code is basically this:\r\n```python\r\ndef top():\r\n    timeout = SomeObject()\r\n    print('begin; id=', id(timeout), 'RC', sys.getrefcount(timeout))\r\n    middle(timeout)\r\n    print('end; RC', sys.getrefcount(timeout))\r\n\r\ndef middle(timeout):\r\n    print('  before wait', …)\r\n    bottom(timeout)\r\n    print('  after wait', …)\r\n\r\ndef bottom(timeout):\r\n    print(\"\\tcalling get on', …)\r\n    get(True, timeout)\r\n    print(\"\\tcalled get', …)\r\n```\r\n\r\nAnd `get` is a method of a class in a pure-python module compiled with Cython that does nothing but print those two 'Entered'/'Exited' lines; it doesn't seem to matter if the class is declared as a cdef class in a .pxd or not; both cases behave the same.\r\n\r\nAnd here's failing output; notice the ending ref count is too high.\r\n```\r\nbegin; id= 4539311680 RC 2\r\n  before wait; id= 4539311680 RC 5\r\n\t\tcalling get on <Queue> id= 4539311680 rc= 7\r\n\t\t\tEntered get; id= 4539311680 rc= 8\r\n\t\t\tExited get; id= 4539311680 rc= 8\r\n\t\tcalled get <Queue> id= 4539311680 rc= 8\r\n  after wait; id= 4539311680 RC 6\r\nend; RC 3\r\n```\r\n\r\nThe only difference is how the timeout is finally passed:\r\n```python\r\ndef bottom(timeout):\r\n    print(\"\\tcalling get on', …)\r\n    get(timeout=timeout)\r\n    print(\"\\tcalled get', …)\r\n```\r\n\r\nOf course, if there's a .pxd involved, the signature has to change; for the keyword case it's `    cpdef get(self, block=*, timeout=*)`.",
            "created_at": "2020-05-08T13:44:12Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-625822828",
            "id": 625822828,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTgyMjgyOA==",
            "updated_at": "2020-05-08T13:47:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625822828",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think the problem is in here:\r\n```C\r\nstatic CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {\r\n    PyObject *res = PyObject_GetItem(dict, name);\r\n    if (res == NULL && PyErr_ExceptionMatches(PyExc_KeyError))\r\n        PyErr_Clear();\r\n    return res;\r\n}\r\n```\r\n\r\nThat first line should be `PyDict_GetItem`, shouldn't it? To match all the other versions of the function? If I make that change, this test, at least, passes.",
            "created_at": "2020-05-08T13:54:24Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-625827342",
            "id": 625827342,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTgyNzM0Mg==",
            "updated_at": "2020-05-08T13:54:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625827342",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "If I make that change in ModuleSetupCode.c, all gevent's leak tests pass.",
            "created_at": "2020-05-08T14:08:33Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-625833480",
            "id": 625833480,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTgzMzQ4MA==",
            "updated_at": "2020-05-08T14:08:33Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625833480",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for the report and the investigations @jamadden.",
            "created_at": "2020-05-09T18:06:44Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-626214440",
            "id": 626214440,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNjIxNDQ0MA==",
            "updated_at": "2020-05-09T18:06:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/626214440",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 12,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3578/comments",
    "created_at": "2020-05-06T14:04:41Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            },
            "commit_id": "505b55a8da5568133bfeee33ba4384488d5259c6",
            "commit_url": "https://api.github.com/repos/gevent/gevent/commits/505b55a8da5568133bfeee33ba4384488d5259c6",
            "created_at": "2020-05-06T14:06:16Z",
            "event": "referenced",
            "id": 3308665917,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMDg2NjU5MTc=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3308665917"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-08T09:51:45Z",
            "event": "mentioned",
            "id": 3316349041,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMxNjM0OTA0MQ==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3316349041"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-08T09:51:45Z",
            "event": "subscribed",
            "id": 3316349044,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMTYzNDkwNDQ=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3316349044"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            },
            "commit_id": "a488df6ff57c16dbff883559ac41e2b21f1acc3f",
            "commit_url": "https://api.github.com/repos/NextThought/cython/commits/a488df6ff57c16dbff883559ac41e2b21f1acc3f",
            "created_at": "2020-05-08T14:19:36Z",
            "event": "referenced",
            "id": 3317144581,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMTcxNDQ1ODE=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3317144581"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "2fb70171d6a6b247ac4695f6690a8e836f0267d2",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/2fb70171d6a6b247ac4695f6690a8e836f0267d2",
            "created_at": "2020-05-09T09:08:10Z",
            "event": "referenced",
            "id": 3319165224,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMTkxNjUyMjQ=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3319165224"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-09T18:05:10Z",
            "event": "closed",
            "id": 3319615852,
            "node_id": "MDExOkNsb3NlZEV2ZW50MzMxOTYxNTg1Mg==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3319615852"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "34eafb78a485618de33954ef3e5d86a45218e7f8",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/34eafb78a485618de33954ef3e5d86a45218e7f8",
            "created_at": "2020-05-09T18:05:13Z",
            "event": "referenced",
            "id": 3319615882,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMTk2MTU4ODI=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3319615882"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-09T18:05:28Z",
            "event": "milestoned",
            "id": 3319616047,
            "milestone": {
                "title": "3.0"
            },
            "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDMzMTk2MTYwNDc=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3319616047"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-09T18:05:51Z",
            "event": "labeled",
            "id": 3319616338,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMzMTk2MTYzMzg=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3319616338"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-09T18:05:51Z",
            "event": "labeled",
            "id": 3319616339,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMzMTk2MTYzMzk=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3319616339"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-09T18:05:51Z",
            "event": "labeled",
            "id": 3319616340,
            "label": {
                "color": "444444",
                "name": "Memory Leak"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDMzMTk2MTYzNDA=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3319616340"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-09T18:06:44Z",
            "event": "mentioned",
            "id": 3319617013,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMxOTYxNzAxMw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3319617013"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-05-09T18:06:44Z",
            "event": "subscribed",
            "id": 3319617014,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMTk2MTcwMTQ=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3319617014"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3578/events",
    "html_url": "https://github.com/cython/cython/issues/3578",
    "id": 613346801,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558227,
            "name": "Memory Leak",
            "node_id": "MDU6TGFiZWw0MjU1NTgyMjc=",
            "url": "https://api.github.com/repos/cython/cython/labels/Memory%20Leak"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3578/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 226,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\n– New version scheme: 3.x instead of 0.x.\r\n– Change default `language_level` from `2` to `3`.\r\n– Change default for `binding` directive from `False` to `True`.\r\n– Fix some Python compatibility issues (if possible, allowing for breaking changes).\r\n",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 18,
        "state": "open",
        "title": "3.0",
        "updated_at": "2020-05-09T18:10:28Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "MDU6SXNzdWU2MTMzNDY4MDE=",
    "number": 3578,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Possible memory leaks in Cython 3.0a1—a4",
    "updated_at": "2020-05-09T18:06:44Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3578",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
        "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
        "followers_url": "https://api.github.com/users/jamadden/followers",
        "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
        "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jamadden",
        "id": 1256082,
        "login": "jamadden",
        "node_id": "MDQ6VXNlcjEyNTYwODI=",
        "organizations_url": "https://api.github.com/users/jamadden/orgs",
        "received_events_url": "https://api.github.com/users/jamadden/received_events",
        "repos_url": "https://api.github.com/users/jamadden/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jamadden"
    }
}