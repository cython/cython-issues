{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "I'm testing gevent with Cython 3. gevent has a combination of Cython code in .pyx/pxd and pure-Python code annotated and compiled with .pxd files. (Which is awesome, BTW. Thanks again for a great project!)\r\n\r\ngevent's test suite has a job that runs all the tests and watches for memory leaks. It basically does this by using `gc.get_objects()` to count all the objects extent, run a particular test, and count the objects again. If the counts don't match, this process is repeated a few times to see if a pattern emerges. When it's been run enough times to see that a particular type of object is always gaining new instances after a test run, the test is declared to leak and is failed.\r\n\r\nUsing Cython 0.29.17, [this test job passes](https://travis-ci.org/github/gevent/gevent/jobs/683813659).\r\n\r\n[The test job with Cython 3.0a4 fails](https://travis-ci.org/github/gevent/gevent/jobs/683782800); many tests report leaks. For example:\r\n``` ======================================================================\r\n  FAIL: test_raises_timeout_Timeout_exc_customized (__main__.TestGet)\r\n  ----------------------------------------------------------------------\r\n  Traceback (most recent call last):\r\n    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n      return _RefCountChecker(self, method)(args, kwargs)\r\n    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 192, in __call__\r\n      while self._check_deltas(growth):\r\n    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n  AssertionError: refcount increased by [9, 1168, 2, 2, 2]\r\n  RuntimeError        6        +1\r\n  Timeout            10        +1\r\n```\r\n\r\nThat's showing that the last three runs of this test resulted in two new objects each time; one new `RuntimeError` and one new `Timeout` (a kind of exception). I thought at first that maybe it was just exceptions leaking since the first reports are just of exceptions, but later on we see a variety of objects leaking:\r\n```\r\n840  FAIL: test_unordered (__main__.TestErrorInIterator)\r\n841  ----------------------------------------------------------------------\r\n842  Traceback (most recent call last):\r\n843    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 214, in wrapper\r\n844      return _RefCountChecker(self, method)(args, kwargs)\r\n845    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 192, in __call__\r\n846      while self._check_deltas(growth):\r\n847    File \"/home/travis/.runtimes/snakepit/2.7.d/lib/python2.7/site-packages/gevent/testing/leakcheck.py\", line 168, in _check_deltas\r\n848      raise AssertionError('refcount increased by %r\\n%s' % (deltas, diff))\r\n849  AssertionError: refcount increased by [17, 1187, 10, 10, 10]\r\n850  list               2061        +2\r\n851  deque                 5        +1\r\n852  ThreadPool            5        +1\r\n853  instancemethod      116        +1\r\n854  set                 291        +1\r\n855  Queue                 5        +1\r\n856  Semaphore             5        +1\r\n857  fork                  5        +1\r\n858  _Condition            7        +1\r\n```\r\n\r\nI've been using `language_level=3str` in most places for some time already. The only other thing that caught my eye as a possible cause was the change to make `binding` True by default. But I changed that [directive in my `setup.py`](https://github.com/gevent/gevent/blob/80a66d6d36335ddb506a1f9f39f82efa0eef9b2d/_setuputils.py#L258-L262) and tested locally and still get the failures. \r\n\r\nLocally I've tested 3.0a1 through 3.0a4, inclusive, and get the failures on all versions. (I also tried git master as-of now—I think—and have the same issues.)\r\n\r\nNext, I tried not using Cython compiled versions of the pure-Python modules, keeping just the compiled .pyx files, and locally the tests pass again (let me know if that wasn't clear). So it appears to have something to do with that mode? \r\n\r\nI haven't tried to create a smaller example yet because I was hoping the problem might just be obvious :) Please let me know what other info I can provide or how I can help track this down.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "It might be possible to get a more detailed diagnosis by setting `CYTHON_REFNANNY` as a cflag when you run the tests - https://github.com/cython/cython/wiki/enhancements-refnanny. That's Cython's own mechanism for trying to identify memory leaks. It'd usually give you some line numbers for the generated C code.",
            "created_at": "2020-05-06T18:04:04Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-624802339",
            "id": 624802339,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDgwMjMzOQ==",
            "updated_at": "2020-05-06T18:04:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/624802339",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yeah, without knowing the code base at all, this is going to be really difficult to debug.\r\n+1 for giving the refnanny a run over it. You just need an installed Cython version and then define the C macro `CYTHON_REFNANNY=1` (with `-D` in your CFLAGS, or in your setup.py).",
            "created_at": "2020-05-07T12:04:16Z",
            "html_url": "https://github.com/cython/cython/issues/3578#issuecomment-625213305",
            "id": 625213305,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/3578",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTIxMzMwNQ==",
            "updated_at": "2020-05-07T12:04:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625213305",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3578/comments",
    "created_at": "2020-05-06T14:04:41Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
                "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamadden/followers",
                "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamadden",
                "id": 1256082,
                "login": "jamadden",
                "node_id": "MDQ6VXNlcjEyNTYwODI=",
                "organizations_url": "https://api.github.com/users/jamadden/orgs",
                "received_events_url": "https://api.github.com/users/jamadden/received_events",
                "repos_url": "https://api.github.com/users/jamadden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamadden"
            },
            "commit_id": "505b55a8da5568133bfeee33ba4384488d5259c6",
            "commit_url": "https://api.github.com/repos/gevent/gevent/commits/505b55a8da5568133bfeee33ba4384488d5259c6",
            "created_at": "2020-05-06T14:06:16Z",
            "event": "referenced",
            "id": 3308665917,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMDg2NjU5MTc=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/3308665917"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/3578/events",
    "html_url": "https://github.com/cython/cython/issues/3578",
    "id": 613346801,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/3578/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2MTMzNDY4MDE=",
    "number": 3578,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Possible memory leaks in Cython 3.0a1—a4",
    "updated_at": "2020-05-07T12:04:17Z",
    "url": "https://api.github.com/repos/cython/cython/issues/3578",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4",
        "events_url": "https://api.github.com/users/jamadden/events{/privacy}",
        "followers_url": "https://api.github.com/users/jamadden/followers",
        "following_url": "https://api.github.com/users/jamadden/following{/other_user}",
        "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jamadden",
        "id": 1256082,
        "login": "jamadden",
        "node_id": "MDQ6VXNlcjEyNTYwODI=",
        "organizations_url": "https://api.github.com/users/jamadden/orgs",
        "received_events_url": "https://api.github.com/users/jamadden/received_events",
        "repos_url": "https://api.github.com/users/jamadden/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jamadden"
    }
}