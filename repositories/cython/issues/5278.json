{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Describe the bug\n\nApologies in advance: I don't use cython, but I'm debugging a bug caused by using cython with a fresh version of clang. I'll try to get a better repro soon, but for now I'm just filing this in case the cause/fix is obvious. My repro is representative of something internal, but I haven't reduced it to something standalone yet.\r\n\r\nWith a very new [LLVM commit](https://github.com/llvm/llvm-project/commit/b6a0be8ce3114d0c57e7a7d6c3c222986ca506ad), we're seeing failures in Cython code. The issue seems to be caused by UB in Cython when returning uninitialized data.\r\n\r\nGiven some Cython code like this:\r\n\r\n```cython\r\nT decode(string encoded) except *:\r\n  cdef T result\r\n    if this.decoder.decode(encoded, &result):\r\n      return result\r\n  raise ValueError(f'Failed to decode {repr(encoded)}')\r\n\r\ndecode(.... <something invalid> ...)\r\n```\r\n\r\nThe generated code for will look something like this:\r\n```c++\r\nstatic CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }\r\n\r\ntemplate <typename T>\r\nT decode(std::string __pyx_v_encoded) {\r\n  T __pyx_v_result;\r\n  T __pyx_r;\r\n  ...\r\n  __pyx_t_1 = (this->decoder.decode(__pyx_v_encoded, &__pyx_v_result) != 0);\r\n  if (__pyx_t_1) {\r\n    __pyx_r = __pyx_v_result;\r\n    goto __pyx_L0;\r\n  }\r\n  ...\r\n__pyx_L1_error:;\r\n  __Pyx_pretend_to_initialize(&__pyx_r);\r\n__pyx_L0:;\r\n  return __pyx_r;  // This is only *actually* initialized in the happy case.\r\n}\r\n```\r\n\r\nThe UB is that `__Pyx_pretend_to_initialize` doesn't actually do any initialization, and so `decode` will return the uninitialized `__pyx_r` value. It's enough to silence static compiler warnings, but the optimizer will see that it doesn't do anything to the variable, and mis-optimize the UB accordingly.\r\n\r\nThere are two possible changes to `__Pyx_pretend_to_initialize` that would make it satisfy this requirement:\r\n\r\n```c++\r\n// Prevent the compiler from optimizing this away, e.g. see\r\n// https://stackoverflow.com/questions/28287064/how-not-to-optimize-away-mechanics-of-a-folly-function\r\nstatic CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { asm volatile(\"\" : \"+r\"(ptr)); }\r\n\r\n// Or, make it actually do something. The compiler is hopefully smart enough to optimize this away, but I haven't checked.\r\n// Requires changing the calls from __Pyx_pretend_to_initialize(&x) to __Pyx_pretend_to_initialize(&x, sizeof(x))\r\nstatic CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr, size_t size) { memset(ptr, 0, size); }\r\n```\n\n### Code to reproduce the behaviour:\n\n```cython\r\nT decode(string encoded) except *:\r\n  cdef T result\r\n    if this.decoder.decode(encoded, &result):\r\n      return result\r\n  raise ValueError(f'Failed to decode {repr(encoded)}')\r\n\r\ndecode(.... <something invalid> ...)\r\n```\n\n### Expected behaviour\n\nWhen passed invalid data, it should raise an error. Instead, it crashes.\n\n### Environment\n\nOS: Linux\r\nPython version: 3.10\r\nCython version: 0.29.32 (but I still see the bug in trunk)\r\nLLVM/Clang version: something very recent; newer than this: https://github.com/llvm/llvm-project/commit/b6a0be8ce3114d0c57e7a7d6c3c222986ca506ad\n\n### Additional context\n\n_No response_",
    "closed_at": "2024-02-10T13:17:20Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks. We'll need to look into this properly I think.\r\n\r\nI'm a bit wary of the `asm` version for compiler-compatibility reasons (although maybe it's OK). I'm a bit wary of the `memset` version because we'd need to make sure that it doesn't get misapplied to default constructed C++ classes.",
            "created_at": "2023-02-28T08:16:44Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1447753740",
            "id": 1447753740,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5WSvgM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1447753740/reactions"
            },
            "updated_at": "2023-02-28T08:16:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1447753740",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm trying to find a temporary workaround to unblock the upgrade of LLVM, but so far no success. Is there any way we can modify the python source code to make cython generate initialization of `__pyx_v_result` (or rather `__pyx_r`) with a default value of type T (which is a template parameter in that code)? I tried `cdef T result = T()`, `cdef T result = {}` and even `cdef T result = 0`, but all of these generate cython syntax errors. ",
            "created_at": "2023-02-28T08:46:29Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1447788410",
            "id": 1447788410,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5WS396",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1447788410/reactions"
            },
            "updated_at": "2023-02-28T08:46:29Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1447788410",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2892960?v=4",
                "events_url": "https://api.github.com/users/alexfh/events{/privacy}",
                "followers_url": "https://api.github.com/users/alexfh/followers",
                "following_url": "https://api.github.com/users/alexfh/following{/other_user}",
                "gists_url": "https://api.github.com/users/alexfh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/alexfh",
                "id": 2892960,
                "login": "alexfh",
                "node_id": "MDQ6VXNlcjI4OTI5NjA=",
                "organizations_url": "https://api.github.com/users/alexfh/orgs",
                "received_events_url": "https://api.github.com/users/alexfh/received_events",
                "repos_url": "https://api.github.com/users/alexfh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/alexfh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/alexfh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/alexfh"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "So I'm a little puzzled by this.\r\n\r\n1. I'm partly a bit puzzled by how you generate this templated C++ code from Cython. Are you using fused types rather than C++ templates?\r\n2. I'm not quite sure what the undefined behaviour is? Obviously reading the return value could give an arbitrary result but I don't think we do that. At least the material I was able to find for C suggests that taking the address is sufficient to avoid undefined behaviour just from returning it (https://stackoverflow.com/questions/11962457/why-is-using-an-uninitialized-variable-undefined-behavior/40674888#40674888) since it stops the variable being register-only. I'm not an expert in the fine details of either the C or C++ standards.\r\n\r\nIn terms of workarounds I'm not completely sure, since `__pyx_r` is Cython-generated rather than something you control yourself. Two (untested) suggestions:\r\n1. I think returning any `T` with a default constructor should be fine, so maybe returning `std::optional<T>` instead of `T` might work since that definitely default constructs to something empty.\r\n2. You could write a helper function to initialize it:\r\n    ```\r\n    cdef extern from *:\r\n        \"\"\"\r\n        #define INIT_R memset(&__pyx_r, 0, sizeof(__pyx_r))\r\n        \"\"\"\r\n        void INIT_R()\r\n    ```\r\n    then just call `INIT_R()` at the start of your functions. This is pretty hacky, but I think should work.",
            "created_at": "2023-02-28T19:50:50Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1448775122",
            "id": 1448775122,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5WWo3S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1448775122/reactions"
            },
            "updated_at": "2023-02-28T19:50:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1448775122",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "> 1. I'm partly a bit puzzled by how you generate this templated C++ code from Cython. Are you using fused types rather than C++ templates?\r\n\r\nWe're using C++ templates:\r\n```\r\ncdef cppclass CoderHelper[T]:\r\n  Coder[T] _raw_coder\r\n\r\n  CoderHelper(Coder[T] raw_coder):\r\n      this._raw_coder = raw_coder\r\n\r\n  T decode(string encoded) except *:\r\n    cdef T result\r\n    with nogil:\r\n      if this._raw_coder.Decode(encoded, &result):\r\n        return result\r\n    raise ValueError(f'Failed to decode {repr(encoded)}')\r\n```\r\n\r\n> 2. I'm not quite sure what the undefined behaviour is? Obviously reading the return value could give an arbitrary result but I don't think we do that. At least the material I was able to find for C suggests that taking the address is sufficient to avoid undefined behaviour just from returning it (https://stackoverflow.com/questions/11962457/why-is-using-an-uninitialized-variable-undefined-behavior/40674888#40674888) since it stops the variable being register-only. I'm not an expert in the fine details of either the C or C++ standards.\r\n\r\nI'm not sure about C, but in C++ returning an uninitialized variable from a function is undefined behavior, regardless of whether the return value of the function is used or not. Compilers can utilize UB for optimization purposes  in quite surprising ways (https://en.cppreference.com/w/cpp/language/ub).\r\n\r\nAs for the suggested workarounds, I'd be glad to try them, but I have problems expressing them within cython syntax. Ideally, I would like some way to tell cython to insert a snippet of C++to the output verbatim. Is there such an option?",
            "created_at": "2023-03-01T07:59:48Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1449513796",
            "id": 1449513796,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5WZdNE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1449513796/reactions"
            },
            "updated_at": "2023-03-01T07:59:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1449513796",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2892960?v=4",
                "events_url": "https://api.github.com/users/alexfh/events{/privacy}",
                "followers_url": "https://api.github.com/users/alexfh/followers",
                "following_url": "https://api.github.com/users/alexfh/following{/other_user}",
                "gists_url": "https://api.github.com/users/alexfh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/alexfh",
                "id": 2892960,
                "login": "alexfh",
                "node_id": "MDQ6VXNlcjI4OTI5NjA=",
                "organizations_url": "https://api.github.com/users/alexfh/orgs",
                "received_events_url": "https://api.github.com/users/alexfh/received_events",
                "repos_url": "https://api.github.com/users/alexfh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/alexfh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/alexfh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/alexfh"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I didn't actually know you could do that with templates. Thanks for the clarification.\r\n\r\n> Ideally, I would like some way to tell cython to insert a snippet of C++to the output verbatim. Is there such an option?\r\n\r\nThere isn't really, but option 2 is fairly close to that",
            "created_at": "2023-03-01T08:10:16Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1449528979",
            "id": 1449528979,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5WZg6T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1449528979/reactions"
            },
            "updated_at": "2023-03-01T08:10:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1449528979",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> As for the suggested workarounds, I'd be glad to try them, but I have problems expressing them within cython syntax. Ideally, I would like some way to tell cython to insert a snippet of C++to the output verbatim. Is there such an option?\r\n\r\nhttps://docs.cython.org/en/latest/src/userguide/external_C_code.html#including-verbatim-c-code",
            "created_at": "2023-03-01T08:40:59Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1449576545",
            "id": 1449576545,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5WZshh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1449576545/reactions"
            },
            "updated_at": "2023-03-01T08:40:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1449576545",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for the advice! I came up with the following two options for a (hopefully) short-term workaround:\r\n```\r\ncdef extern from *:\r\n  \"\"\"\r\n  template<typename T> T default_value() { return {}; }\r\n  \"\"\"\r\n  T default_value[T]()\r\n\r\ncdef cppclass CoderHelper[T]:\r\n  Coder[T] _raw_coder\r\n\r\n  CoderHelper(Coder[T] raw_coder):\r\n      this._raw_coder = raw_coder\r\n\r\n  T decode(string encoded) except *:\r\n    cdef T result = default_value[T]()\r\n    with nogil:\r\n      if this._raw_coder.Decode(encoded, &result):\r\n        return result\r\n    raise ValueError(f'Failed to decode {repr(encoded)}')\r\n```\r\n```\r\ncdef extern from *:\r\n  \"\"\"\r\n  #define ASSIGN_DEFAULT_VALUE(var) { (*var) = {}; }\r\n  \"\"\"\r\n  void ASSIGN_DEFAULT_VALUE(void*)\r\n\r\ncdef cppclass CoderHelper[T]:\r\n  Coder[T] _raw_coder\r\n\r\n  CoderHelper(Coder[T] raw_coder):\r\n      this._raw_coder = raw_coder\r\n\r\n  T decode(string encoded) except *:\r\n    cdef T result\r\n    ASSIGN_DEFAULT_VALUE(&result)\r\n    with nogil:\r\n      if this._raw_coder.Decode(encoded, &result):\r\n        return result\r\n    raise ValueError(f'Failed to decode {repr(encoded)}')\r\n```",
            "created_at": "2023-03-01T14:10:25Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1450215622",
            "id": 1450215622,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5WcIjG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1450215622/reactions"
            },
            "updated_at": "2023-03-01T14:10:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1450215622",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2892960?v=4",
                "events_url": "https://api.github.com/users/alexfh/events{/privacy}",
                "followers_url": "https://api.github.com/users/alexfh/followers",
                "following_url": "https://api.github.com/users/alexfh/following{/other_user}",
                "gists_url": "https://api.github.com/users/alexfh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/alexfh",
                "id": 2892960,
                "login": "alexfh",
                "node_id": "MDQ6VXNlcjI4OTI5NjA=",
                "organizations_url": "https://api.github.com/users/alexfh/orgs",
                "received_events_url": "https://api.github.com/users/alexfh/received_events",
                "repos_url": "https://api.github.com/users/alexfh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/alexfh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/alexfh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/alexfh"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I would certainly not use the asm version. Compilers have very limited possibility to optimize around asm blocks, so this can seriously affect compiler optimizations.",
            "created_at": "2023-03-02T22:11:04Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1452619014",
            "id": 1452619014,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5WlTUG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1452619014/reactions"
            },
            "updated_at": "2023-03-02T22:11:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1452619014",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
                "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
                "followers_url": "https://api.github.com/users/maxbachmann/followers",
                "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
                "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/maxbachmann",
                "id": 44199644,
                "login": "maxbachmann",
                "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
                "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
                "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
                "repos_url": "https://api.github.com/users/maxbachmann/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/maxbachmann"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I'm not quite sure what the undefined behaviour is? Obviously reading the return value could give an arbitrary result but I don't think we do that. At least the material I was able to find for C suggests that taking the address is sufficient to avoid undefined behaviour just from returning it (https://stackoverflow.com/questions/11962457/why-is-using-an-uninitialized-variable-undefined-behavior/40674888#40674888) since it stops the variable being register-only. I'm not an expert in the fine details of either the C or C++ standards.\r\n\r\nYes I am not really sure about this either, since in our specific case we actually do take the address:\r\n```cpp\r\n  __Pyx_pretend_to_initialize(&__pyx_r);\r\n  return __pyx_r;\r\n```\r\nOne thing in there is that it could still be undefined behavior if the system supports trap representations, so maybe that's why it is undefined?\r\n\r\nIn C we can always just memset the value. In C++ since C++11 we can memset if `std::is_trivially_copyable`. Non trivially copyable types are out of our hands. I have absolutely no clue what to do about C++98/03.",
            "created_at": "2023-03-03T02:39:28Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1452872051",
            "id": 1452872051,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5WmRFz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1452872051/reactions"
            },
            "updated_at": "2023-03-03T03:02:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1452872051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
                "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
                "followers_url": "https://api.github.com/users/maxbachmann/followers",
                "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
                "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/maxbachmann",
                "id": 44199644,
                "login": "maxbachmann",
                "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
                "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
                "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
                "repos_url": "https://api.github.com/users/maxbachmann/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/maxbachmann"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> One thing in there is that it could still be undefined behavior if the system supports trap representations, so maybe that's why it is undefined?\r\n\r\nI think in C taking the address is sufficient to avoid this. Although that's based on a fairly superficial understanding of the standard.\r\n\r\nI think in C++ we probably just need to initialize `Type __pyx_r = Type()` at the start of the function. That happens anyway for classes with non-trivial default constructor so it's only adding a little extra work for classes with trivial constructors.",
            "created_at": "2023-03-03T07:37:52Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1453103175",
            "id": 1453103175,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5WnJhH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1453103175/reactions"
            },
            "updated_at": "2023-03-03T07:37:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1453103175",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes I was certainly making this more complicated in my head, than it actually was. Simply always initializing the return value should absolutely be enough",
            "created_at": "2023-03-03T10:34:37Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1453314808",
            "id": 1453314808,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5Wn9L4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1453314808/reactions"
            },
            "updated_at": "2023-03-03T10:34:37Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1453314808",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
                "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
                "followers_url": "https://api.github.com/users/maxbachmann/followers",
                "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
                "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/maxbachmann",
                "id": 44199644,
                "login": "maxbachmann",
                "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
                "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
                "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
                "repos_url": "https://api.github.com/users/maxbachmann/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/maxbachmann"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Simply always initializing the return value should absolutely be enough\r\n\r\nPlease validate that this also works in generator/coroutine functions, where we use goto->yield_label at the beginning.",
            "created_at": "2023-03-03T10:43:40Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1453326206",
            "id": 1453326206,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5Wn_9-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1453326206/reactions"
            },
            "updated_at": "2023-03-03T10:43:40Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1453326206",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Please validate that this also works in generator/coroutine functions, where we use goto->yield_label at the beginning.\r\n\r\nDo you have an example, where you are concerned? At least the generators in my code base always return PyObjects, which are already set to `NULL` at the beginning. Can we even have `generator/coroutine functions` which do not return PyObjects?",
            "created_at": "2023-03-03T12:04:47Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1453433856",
            "id": 1453433856,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5WoaQA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1453433856/reactions"
            },
            "updated_at": "2023-03-03T12:04:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1453433856",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
                "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
                "followers_url": "https://api.github.com/users/maxbachmann/followers",
                "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
                "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/maxbachmann",
                "id": 44199644,
                "login": "maxbachmann",
                "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
                "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
                "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
                "repos_url": "https://api.github.com/users/maxbachmann/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/maxbachmann"
            }
        },
        {
            "author_association": "NONE",
            "body": "Changing `T __pyx_r;` to `T __pyx_r = T();`, `T __pyx_r = {};` or `T __pyx_r{};` should work. This is what I roughly did to work around the issue. FWIW, neither of the two workarounds I mentioned in https://github.com/cython/cython/issues/5278#issuecomment-1450215622 actually worked. They both masked the issue in some configurations, but the generated code was still incorrect and the problem manifested, for example, when compiled with recent clang and thread sanitizer enabled. I had to directly assign to the `__pyx_r` variable to get rid of the UB in this part of the generated code:\r\n```\r\ncdef extern from *:\r\n  \"\"\"\r\n  #define WORKAROUND_FOR_5278() { __pyx_r = T(); }\r\n  \"\"\"\r\n  void WORKAROUND_FOR_5278()\r\n\r\n...\r\n  T decode(string encoded) except *:\r\n    cdef T result\r\n    with nogil:\r\n      if this._raw_coder.Decode(encoded, &result):\r\n        return result\r\n    WORKAROUND_FOR_5278()\r\n    raise ValueError(f'Failed to decode {repr(encoded)}')\r\n```",
            "created_at": "2023-03-03T19:07:05Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1453988599",
            "id": 1453988599,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc5Wqhr3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1453988599/reactions"
            },
            "updated_at": "2023-03-03T19:07:05Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1453988599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2892960?v=4",
                "events_url": "https://api.github.com/users/alexfh/events{/privacy}",
                "followers_url": "https://api.github.com/users/alexfh/followers",
                "following_url": "https://api.github.com/users/alexfh/following{/other_user}",
                "gists_url": "https://api.github.com/users/alexfh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/alexfh",
                "id": 2892960,
                "login": "alexfh",
                "node_id": "MDQ6VXNlcjI4OTI5NjA=",
                "organizations_url": "https://api.github.com/users/alexfh/orgs",
                "received_events_url": "https://api.github.com/users/alexfh/received_events",
                "repos_url": "https://api.github.com/users/alexfh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/alexfh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/alexfh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/alexfh"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is this something we should backport to 3.0.9?",
            "created_at": "2024-02-27T10:30:09Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1966245351",
            "id": 1966245351,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc51MoXn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1966245351/reactions"
            },
            "updated_at": "2024-02-27T10:30:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1966245351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Is this something we should backport to 3.0.9?\r\n\r\nProbably.",
            "created_at": "2024-02-27T18:09:13Z",
            "html_url": "https://github.com/cython/cython/issues/5278#issuecomment-1967321967",
            "id": 1967321967,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5278",
            "node_id": "IC_kwDOABDGAc51QvNv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1967321967/reactions"
            },
            "updated_at": "2024-02-27T18:09:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1967321967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 16,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5278/comments",
    "created_at": "2023-02-28T05:25:26Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "1a40217844d07371479e9b2e4f1ca4a873ab5b7a",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/1a40217844d07371479e9b2e4f1ca4a873ab5b7a",
            "created_at": "2023-03-05T12:41:53Z",
            "event": "referenced",
            "id": 8667905940,
            "node_id": "REFE_lADOABDGAc5fgpxOzwAAAAIEpb-U",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/8667905940"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "e8f78fc4595634a9e150edd9bf5607a3ffdd519f",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/e8f78fc4595634a9e150edd9bf5607a3ffdd519f",
            "created_at": "2023-12-22T12:47:10Z",
            "event": "referenced",
            "id": 11326264456,
            "node_id": "REFE_lADOABDGAc5fgpxOzwAAAAKjGRSI",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11326264456"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "3ce26d231433c498799bdc8fa92b70b99fb0b1a9",
            "commit_url": "https://api.github.com/repos/da-woods/cython/commits/3ce26d231433c498799bdc8fa92b70b99fb0b1a9",
            "created_at": "2023-12-22T12:55:44Z",
            "event": "referenced",
            "id": 11326327540,
            "node_id": "REFE_lADOABDGAc5fgpxOzwAAAAKjGgr0",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11326327540"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-02-10T13:17:20Z",
            "event": "closed",
            "id": 11764817578,
            "node_id": "CE_lADOABDGAc5fgpxOzwAAAAK9PN6q",
            "performed_via_github_app": null,
            "state_reason": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11764817578"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": "a3942c82fe010d17622ceb69ed2b447d7b922cd5",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/a3942c82fe010d17622ceb69ed2b447d7b922cd5",
            "created_at": "2024-02-10T13:17:20Z",
            "event": "referenced",
            "id": 11764817580,
            "node_id": "REFE_lADOABDGAc5fgpxOzwAAAAK9PN6s",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11764817580"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-02-10T13:18:18Z",
            "event": "milestoned",
            "id": 11764819140,
            "milestone": {
                "title": "3.1"
            },
            "node_id": "MIE_lADOABDGAc5fgpxOzwAAAAK9POTE",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11764819140"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5278/events",
    "html_url": "https://github.com/cython/cython/issues/5278",
    "id": 1602395214,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5278/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 83,
        "created_at": "2019-02-24T14:21:23Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Remove support for Python 2 and Python < 3.8.",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/65",
        "id": 4082235,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/65/labels",
        "node_id": "MDk6TWlsZXN0b25lNDA4MjIzNQ==",
        "number": 65,
        "open_issues": 16,
        "state": "open",
        "title": "3.1",
        "updated_at": "2024-02-27T06:50:26Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/65"
    },
    "node_id": "I_kwDOABDGAc5fgpxO",
    "number": 5278,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5278/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5278/timeline",
    "title": "[BUG] UB from __Pyx_pretend_to_initialize not initializing",
    "updated_at": "2024-02-27T18:09:14Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5278",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/663413?v=4",
        "events_url": "https://api.github.com/users/rupprecht/events{/privacy}",
        "followers_url": "https://api.github.com/users/rupprecht/followers",
        "following_url": "https://api.github.com/users/rupprecht/following{/other_user}",
        "gists_url": "https://api.github.com/users/rupprecht/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rupprecht",
        "id": 663413,
        "login": "rupprecht",
        "node_id": "MDQ6VXNlcjY2MzQxMw==",
        "organizations_url": "https://api.github.com/users/rupprecht/orgs",
        "received_events_url": "https://api.github.com/users/rupprecht/received_events",
        "repos_url": "https://api.github.com/users/rupprecht/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rupprecht/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rupprecht/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rupprecht"
    }
}