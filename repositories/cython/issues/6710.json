{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Describe the bug\n\nI ran the pyperformance benchmark `bm_async_generators` in Cython 3.0.x and master.\n\nhttps://github.com/python/pyperformance/blob/56d12a8fd7cc1432835965d374929bfa7f6f7a07/pyperformance/data-files/benchmarks/bm_async_generators/run_benchmark.py\n\nCython 3.1 / master:\n$ python3.12 -m timeit -s 'import asyncio, run_benchmark as rb' 'asyncio.run(rb.bench_async_generators())'\n1 loop, best of 5: 385 msec per loop\n\nCython 3.0.x:\n$ python3.12 -m timeit -s 'import asyncio, run_benchmark as rb' 'asyncio.run(rb.bench_async_generators())'\n1 loop, best of 5: 247 msec per loop\n\nThis is a very serious regression. `perf` shows me this:\n3.0.x:\n```\n   7,76%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_async_gen_asend_send\n   5,96%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __pyx_gb_13run_benchmark_4Tree_4generator\n```\n\n<details>\n\n```\n   7,76%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_async_gen_asend_send                   \n   5,96%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __pyx_gb_13run_benchmark_4Tree_4generator    \n   4,95%  python   python3.12                                     [.] _PyEval_EvalFrameDefault                     \n   4,60%  python   python3.12                                     [.] PyTuple_New                                  \n   4,55%  python   python3.12                                     [.] PyObject_Free                                \n   3,46%  python   python3.12                                     [.] PyType_GenericAlloc                          \n   3,35%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_Coroutine_Send                         \n   3,19%  python   python3.12                                     [.] PyObject_Malloc                              \n   2,52%  python   python3.12                                     [.] 0x0000000000154710                           \n   2,46%  python   python3.12                                     [.] PyObject_GC_UnTrack                          \n   2,10%  python   python3.12                                     [.] PyObject_GC_Track                            \n   2,06%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_PyGen__FetchStopIterationValue.constpro\n   1,95%  python   python3.12                                     [.] _Py_NewReference                             \n   1,78%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_Coroutine_SendEx                       \n   1,29%  python   libc.so.6                                      [.] __memset_evex_unaligned_erms                 \n   1,25%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx__PyAsyncGenValueWrapperNew             \n   1,01%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __pyx_pw_13run_benchmark_1tree               \n   0,97%  python   python3.12                                     [.] PyObject_GC_Del                              \n   0,97%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_async_gen_init_hooks                   \n   0,93%  python   python3.12                                     [.] _PyTrash_end                                 \n   0,89%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_async_gen_asend_dealloc                \n   0,88%  python   python3.12                                     [.] _PyErr_SetObject                             \n   0,85%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_async_gen_wrapped_val_dealloc          \n   0,80%  python   python3.12                                     [.] _PyThreadState_UncheckedGet                  \n   0,79%  python   python3.12                                     [.] _PyTrash_begin                               \n   0,78%  python   python3.12                                     [.] _PyObject_GenericGetAttrWithDict             \n   0,78%  python   python3.12                                     [.] _Py_CheckFunctionResult                      \n   0,72%  python   python3.12                                     [.] _PyType_Lookup                               \n   0,65%  python   python3.12                                     [.] _Py_Dealloc                                  \n   0,56%  python   python3.12                                     [.] 0x0000000000178f00                           \n   0,54%  python   python3.12                                     [.] PyObject_GenericSetAttr                      \n   0,53%  python   python3.12                                     [.] PyObject_RichCompareBool                     \n   0,50%  python   python3.12                                     [.] 0x000000000015477e                           \n   0,42%  python   python3.12                                     [.] _PyObject_MakeTpCall                         \n   0,39%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_Coroutine_clear.isra.0                 \n   0,39%  python   python3.12                                     [.] _PySlice_GetLongIndices                      \n   0,37%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] _Py_Dealloc@plt                              \n   0,36%  python   python3.12                                     [.] PySlice_New                                  \n   0,32%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] PyObject_GC_Track@plt                        \n   0,32%  python   python3.12                                     [.] 0x000000000021c4ff                           \n   0,32%  python   python3.12                                     [.] 0x00000000001914d1                           \n   0,30%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] _Py_NewReference@plt                         \n   0,30%  python   python3.12                                     [.] PyObject_IsTrue                              \n   0,29%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __pyx_pw_13run_benchmark_4Tree_3__aiter__    \n```\n\n</details>\n\n\nmaster:\n```\n   6,16%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_async_gen_asend_send\n   5,40%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __pyx_gb_13run_benchmark_4Tree_4generator\n   5,19%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx__ReturnWithStopIteration\n```\n\n<details>\n\n```\n   6,16%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_async_gen_asend_send                   \n   5,40%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __pyx_gb_13run_benchmark_4Tree_4generator    \n   5,19%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx__ReturnWithStopIteration               \n   4,96%  python   python3.12                                     [.] _PyEval_EvalFrameDefault                     \n   3,62%  python   python3.12                                     [.] PyType_GenericAlloc                          \n   3,42%  python   python3.12                                     [.] PyObject_Free                                \n   3,13%  python   python3.12                                     [.] PyObject_Malloc                              \n   2,97%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_PyGen__FetchStopIterationValue         \n   2,62%  python   python3.12                                     [.] _PyObject_MakeTpCall                         \n   2,50%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_Coroutine_SendEx                       \n   2,47%  python   python3.12                                     [.] PyObject_GC_Track                            \n   2,41%  python   python3.12                                     [.] PyObject_GC_UnTrack                          \n   2,10%  python   python3.12                                     [.] 0x0000000000154710                           \n   1,78%  python   python3.12                                     [.] _Py_NewReference                             \n   1,31%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_async_gen_asend_dealloc                \n   1,19%  python   python3.12                                     [.] PyObject_VectorcallDict                      \n   1,02%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx__PyAsyncGenValueWrapperNew             \n   0,91%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_async_gen_wrapped_val_dealloc          \n   0,90%  python   python3.12                                     [.] PyObject_GC_Del                              \n   0,89%  python   python3.12                                     [.] _PyErr_SetObject                             \n   0,84%  python   libc.so.6                                      [.] __memset_evex_unaligned_erms                 \n   0,84%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __pyx_pw_13run_benchmark_1tree               \n   0,75%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __Pyx_async_gen_init_hooks                   \n   0,73%  python   python3.12                                     [.] _PyObject_GenericGetAttrWithDict             \n   0,70%  python   python3.12                                     [.] _Py_Dealloc                                  \n   0,69%  python   python3.12                                     [.] _PyTrash_end                                 \n   0,64%  python   python3.12                                     [.] _PyType_Lookup                               \n   0,63%  python   python3.12                                     [.] _PyTrash_begin                               \n   0,59%  python   python3.12                                     [.] _Py_CheckFunctionResult                      \n   0,59%  python   python3.12                                     [.] _PyThreadState_UncheckedGet                  \n   0,53%  python   python3.12                                     [.] 0x000000000015477e                           \n   0,50%  python   python3.12                                     [.] PyObject_GenericSetAttr                      \n   0,48%  python   python3.12                                     [.] 0x0000000000178f00                           \n   0,47%  python   python3.12                                     [.] PyObject_RichCompareBool                     \n   0,44%  python   python3.12                                     [.] _PySlice_GetLongIndices                      \n   0,41%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] _Py_Dealloc@plt                              \n   0,40%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __pyx_gb_13run_benchmark_4generator1         \n   0,37%  python   python3.12                                     [.] 0x0000000000199b25                           \n   0,35%  python   python3.12                                     [.] PyNumber_Add                                 \n   0,35%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] _PyThreadState_UncheckedGet@plt              \n   0,33%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __pyx_pw_13run_benchmark_4Tree_3__aiter__    \n   0,33%  python   python3.12                                     [.] 0x00000000001909e2                           \n   0,32%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] PyObject_GC_Track@plt                        \n   0,30%  python   python3.12                                     [.] 0x00000000001914d1                           \n   0,28%  python   python3.12                                     [.] 0x0000000000190ac1                           \n   0,28%  python   python3.12                                     [.] PyObject_IsTrue                              \n   0,28%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] PyObject_GC_UnTrack@plt                      \n   0,28%  python   python3.12                                     [.] _PyTrash_cond                                \n   0,27%  python   run_benchmark.cpython-312-x86_64-linux-gnu.so  [.] __pyx_pw_13run_benchmark_4Tree_1__init__     \n```\n\n</details>\n\nSo, it would seem that we lost the ability to return from generators without setting a `StopIteration`, which now eats lots of runtime.\n\n### Code to reproduce the behaviour:\n\n_No response_\n\n### Expected behaviour\n\n_No response_\n\n### OS\n\n_No response_\n\n### Python version\n\n3.12.3\n\n### Cython version\n\nmaster\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "After trying a couple of more benchmarks, it seems that there are some more regressions. Most benchmarks I tried are slightly to visibly slower with the master branch than with 3.0.x. Most of the pyperformance benchmarks are difficult to run with Cython, but I tried \"nbody\", \"raytrace\", \"comprehensions\", \"async_generators\", all of them single file benchmarks that allow easy importing as extension modules.\n\nThis suggests that we lost performance in several areas.",
            "created_at": "2025-03-10T08:46:58Z",
            "html_url": "https://github.com/cython/cython/issues/6710#issuecomment-2709826120",
            "id": 2709826120,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6710",
            "node_id": "IC_kwDOABDGAc6hhKpI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2709826120/reactions"
            },
            "updated_at": "2025-03-10T08:46:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2709826120",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think I've fixed the degradation in `raytrace` in https://github.com/cython/cython/pull/6730. I'd assume this fix makes a mild difference to most code (but haven't tested in on the others).",
            "created_at": "2025-03-15T11:40:39Z",
            "html_url": "https://github.com/cython/cython/issues/6710#issuecomment-2726465819",
            "id": 2726465819,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6710",
            "node_id": "IC_kwDOABDGAc6igpEb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2726465819/reactions"
            },
            "updated_at": "2025-03-15T11:40:39Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2726465819",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I added a benchmark runner to the CI jobs. Here's the latest run:\n```\n2025-03-16 18:01:08,682  ### Benchmark 'bm_async_generators' (min/median/max):\n2025-03-16 18:01:08,682      origin/3.0.x         =   2.286 msec,   2.301 msec,   2.607 msec\n2025-03-16 18:01:08,682      origin/master        =   2.402 msec,   2.430 msec,   2.463 msec\n2025-03-16 18:01:08,683      Python               =   3.128 msec,   3.150 msec,   3.176 msec\n2025-03-16 18:01:08,683  ### Benchmark 'bm_chaos' (min/median/max):\n2025-03-16 18:01:08,683      origin/3.0.x         =  27.370 msec,  27.527 msec,  28.077 msec\n2025-03-16 18:01:08,683      origin/master        =  29.354 msec,  29.498 msec,  30.740 msec\n2025-03-16 18:01:08,683      Python               =  73.219 msec,  73.573 msec,  74.483 msec\n2025-03-16 18:01:08,683  ### Benchmark 'bm_coroutines' (min/median/max):\n2025-03-16 18:01:08,683      origin/3.0.x         = 171.114 msec, 171.783 msec, 173.794 msec\n2025-03-16 18:01:08,683      origin/master        =  93.204 msec,  94.040 msec,  98.909 msec\n2025-03-16 18:01:08,683      Python               = 113.180 msec, 113.359 msec, 114.323 msec\n2025-03-16 18:01:08,683  ### Benchmark 'bm_fib' (min/median/max):\n2025-03-16 18:01:08,683      origin/3.0.x         =  22.046 msec,  22.076 msec,  22.120 msec\n2025-03-16 18:01:08,683      origin/master        =  21.862 msec,  21.920 msec,  22.044 msec\n2025-03-16 18:01:08,683      Python               =    1.215 sec,    1.218 sec,    1.224 sec\n2025-03-16 18:01:08,683  ### Benchmark 'bm_generators' (min/median/max):\n2025-03-16 18:01:08,683      origin/3.0.x         =   2.142 msec,   2.200 msec,   2.627 msec\n2025-03-16 18:01:08,683      origin/master        =   2.265 msec,   2.280 msec,   2.428 msec\n2025-03-16 18:01:08,683      Python               =   6.757 msec,   6.789 msec,   7.314 msec\n2025-03-16 18:01:08,683  ### Benchmark 'bm_meteor_contest' (min/median/max):\n2025-03-16 18:01:08,683      origin/3.0.x         =  63.879 msec,  64.197 msec,  65.194 msec\n2025-03-16 18:01:08,683      origin/master        =  62.812 msec,  63.578 msec,  63.834 msec\n2025-03-16 18:01:08,683      Python               =  79.620 msec,  79.710 msec,  80.021 msec\n2025-03-16 18:01:08,683  ### Benchmark 'bm_nbody' (min/median/max):\n2025-03-16 18:01:08,683      origin/3.0.x         = 100.562 msec, 100.662 msec, 100.831 msec\n2025-03-16 18:01:08,683      origin/master        =  66.390 msec,  66.773 msec,  67.106 msec\n2025-03-16 18:01:08,683      Python               = 115.132 msec, 116.452 msec, 117.587 msec\n2025-03-16 18:01:08,683  ### Benchmark 'bm_nqueens' (min/median/max):\n2025-03-16 18:01:08,684      origin/3.0.x         =  32.170 msec,  32.293 msec,  32.388 msec\n2025-03-16 18:01:08,684      origin/master        =  32.699 msec,  32.763 msec,  33.076 msec\n2025-03-16 18:01:08,684      Python               =  66.299 msec,  66.556 msec,  66.804 msec\n2025-03-16 18:01:08,684  ### Benchmark 'bm_raytrace' (min/median/max):\n2025-03-16 18:01:08,684      origin/3.0.x         =    1.520 sec,    1.521 sec,    1.532 sec\n2025-03-16 18:01:08,684      origin/master        =    1.592 sec,    1.600 sec,    1.609 sec\n2025-03-16 18:01:08,684      Python               = 966.737 msec, 970.437 msec, 986.784 msec\n2025-03-16 18:01:08,684  ### Benchmark 'bm_unpack_sequence' (min/median/max):\n2025-03-16 18:01:08,684      origin/3.0.x         =   2.484 msec,   2.499 msec,   2.582 msec\n2025-03-16 18:01:08,684      origin/master        =   2.326 msec,   2.327 msec,   2.339 msec\n2025-03-16 18:01:08,684      Python               =   9.379 msec,   9.407 msec,   9.466 msec\n```\nSo, for most of these (simple) benchmarks, it doesn't look that bad. The raytrace benchmark seems worth looking into, although that's not a regression, at least. Might also be a pessimisation due to static typing. But there are also a few others that got slower since 3.0.x. We should make sure that we didn't do something stupid here. Users shouldn't have a reason to stick with 3.0.x.",
            "created_at": "2025-03-16T18:46:02Z",
            "html_url": "https://github.com/cython/cython/issues/6710#issuecomment-2727588520",
            "id": 2727588520,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6710",
            "node_id": "IC_kwDOABDGAc6ik7Ko",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2727588520/reactions"
            },
            "updated_at": "2025-03-16T18:46:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2727588520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The raytrace benchmark is dominated by attribute lookups:\n```\n   7,93%  python3          python3.12                                   [.] _PyObject_GenericGetAttrWithDict\n   4,26%  python3          python3.12                                   [.] _PyType_Lookup\n```\nI'm running these with CPython 3.12/3.13 which received a lot of internal optimisations for all sorts of standard object operations, clearly including attribute lookups. We should see if we can catch up somehow.",
            "created_at": "2025-03-16T19:27:49Z",
            "html_url": "https://github.com/cython/cython/issues/6710#issuecomment-2727608250",
            "id": 2727608250,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6710",
            "node_id": "IC_kwDOABDGAc6ik_-6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2727608250/reactions"
            },
            "updated_at": "2025-03-16T19:27:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2727608250",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "According to `callgrind`, 10% of the runtime of the `bm_async_generators` benchmark are spent in 10% of the calls to `__Pyx_async_gen_anext()` that set up the asyncio hooks with `__Pyx_async_gen_init_hooks()` (which executes a simple Python function). That seems worth optimising in `asyncio`, not in Cython. :-/\n\nIt also appears that `StopIteration` tends to have a traceback, which is costly and useless in almost all relevant cases. Worth investigating if that's us adding one or CPython. (EDIT: According to gdb, `__Pyx_AddTraceback()` is never called.)\n\nFurthermore, `__Pyx__ReturnWithStopIteration()` tries to look up a vectorcall function for the `StopIteration` instantiation and fails, falling back to `PyObject_VectorcallDict()` in `__Pyx_PyObject_FastCallDict()`. That seems costly. Maybe we can speed up the exception creation here? At least, trying to do a vectorcall that never succeeds is unnecessarily inefficient. It might even be faster to call `PyErr_SetObject(exc_type, return_value)` – ~although CPython seems to do the same thing there (trying vectorcall first)~. Edit: Ah, CPython 3.14 implements vectorcall for exceptions. 3.12 doesn't yet. That makes a difference, because we *always* try vectorcall first, and 3.12/13 end up losing performance.",
            "created_at": "2025-03-17T20:04:28Z",
            "html_url": "https://github.com/cython/cython/issues/6710#issuecomment-2730710017",
            "id": 2730710017,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6710",
            "node_id": "IC_kwDOABDGAc6iw1QB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2730710017/reactions"
            },
            "updated_at": "2025-03-18T10:53:18Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2730710017",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `__Pyx__ReturnWithStopIteration()` tries to look up a vectorcall function for the `StopIteration` instantiation and fails\n\nhttps://github.com/cython/cython/pull/6738\n",
            "created_at": "2025-03-18T04:31:23Z",
            "html_url": "https://github.com/cython/cython/issues/6710#issuecomment-2731602326",
            "id": 2731602326,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6710",
            "node_id": "IC_kwDOABDGAc6i0PGW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2731602326/reactions"
            },
            "updated_at": "2025-03-18T04:31:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2731602326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It's interesting to see that our fstrings implementation apparently got slower between Python 3.10 and 3.12:\n```\n2025-03-18 16:10:46  ### Benchmark 'bm_fstrings' (min/median/max):\n2025-03-18 16:10:46      Cython 'origin/3.0.x'     =   1.121 msec,   1.124 msec,   1.135 msec\n2025-03-18 16:10:46      Cython 'origin/master'    =   1.144 msec,   1.147 msec,   1.287 msec\n2025-03-18 16:10:46      Python 3.10.16            =   1.420 msec,   1.431 msec,   1.439 msec\n\n2025-03-18 16:14:51  ### Benchmark 'bm_fstrings' (min/median/max):\n2025-03-18 16:14:51      Cython 'origin/3.0.x'     =   1.803 msec,   1.866 msec,   2.408 msec\n2025-03-18 16:14:51      Cython 'origin/master'    =   1.742 msec,   1.753 msec,   1.778 msec\n2025-03-18 16:14:51      Python 3.12.9             =   1.614 msec,   1.631 msec,   1.705 msec\n\n2025-03-18 16:22:46  ### Benchmark 'bm_fstrings' (min/median/max):\n2025-03-18 16:22:46      Cython 'origin/3.0.x'     =   1.804 msec,   1.815 msec,   1.834 msec\n2025-03-18 16:22:46      Cython 'origin/master'    =   1.865 msec,   1.884 msec,   1.913 msec\n2025-03-18 16:22:46      Python 3.14.0             =   1.662 msec,   1.681 msec,   1.728 msec\n```\nIt looks different if we switch to formatting C numbers, that's much faster than letting Python do it. The above is mostly formatting Python object values. (Timings are from https://github.com/cython/cython/commit/826d852716af77ed407a7e1cfda6d516a13e784b)",
            "created_at": "2025-03-18T17:51:36Z",
            "html_url": "https://github.com/cython/cython/issues/6710#issuecomment-2734215173",
            "id": 2734215173,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6710",
            "node_id": "IC_kwDOABDGAc6i-NAF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2734215173/reactions"
            },
            "updated_at": "2025-03-18T17:51:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2734215173",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I included the Limited C-API in the benchmark runner to compare against normal Cython. It's currently only enabled for Py3.14.",
            "created_at": "2025-03-19T13:21:54Z",
            "html_url": "https://github.com/cython/cython/issues/6710#issuecomment-2736622182",
            "id": 2736622182,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6710",
            "node_id": "IC_kwDOABDGAc6jHYpm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2736622182/reactions"
            },
            "updated_at": "2025-03-19T13:21:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2736622182",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Turns out that we disabled vectorcall for extension types and builtins back when they didn't support it, and didn't enable it when they started to support it. I found this when looking at the `bm_chaos` benchmark that uses a couple of extension types. https://github.com/cython/cython/pull/6744",
            "created_at": "2025-03-20T10:53:03Z",
            "html_url": "https://github.com/cython/cython/issues/6710#issuecomment-2739943638",
            "id": 2739943638,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6710",
            "node_id": "IC_kwDOABDGAc6jUDjW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2739943638/reactions"
            },
            "updated_at": "2025-03-20T10:53:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2739943638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6710/comments",
    "created_at": "2025-03-09T18:51:44Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-03-09T18:51:44Z",
            "event": "labeled",
            "id": 16645687861,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "LE_lADOABDGAc6tMA4vzwAAAAPgKQo1",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/16645687861"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-03-09T18:51:44Z",
            "event": "labeled",
            "id": 16645687863,
            "label": {
                "color": "f9d0c4",
                "name": "performance"
            },
            "node_id": "LE_lADOABDGAc6tMA4vzwAAAAPgKQo3",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/16645687863"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-03-10T08:47:36Z",
            "event": "milestoned",
            "id": 16650442766,
            "milestone": {
                "title": "3.1"
            },
            "node_id": "MIE_lADOABDGAc6tMA4vzwAAAAPgcZgO",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/16650442766"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-03-10T08:48:11Z",
            "event": "renamed",
            "id": 16650451548,
            "node_id": "RTE_lADOABDGAc6tMA4vzwAAAAPgcbpc",
            "performed_via_github_app": null,
            "rename": {
                "from": "[BUG] Serious async performance regression in 3.1",
                "to": "[BUG] performance regressions in 3.1"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/16650451548"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "commit_id": "e1ac6779ea4dfc41e1696a9b4b9d3cbb61b73b29",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/e1ac6779ea4dfc41e1696a9b4b9d3cbb61b73b29",
            "created_at": "2025-03-16T13:20:20Z",
            "event": "referenced",
            "id": 16790918209,
            "node_id": "REFE_lADOABDGAc6tMA4vzwAAAAPo0RRB",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/16790918209"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6710/events",
    "html_url": "https://github.com/cython/cython/issues/6710",
    "id": 2905607727,
    "labels": [
        {
            "color": "f9d0c4",
            "default": false,
            "description": null,
            "id": 414805151,
            "name": "performance",
            "node_id": "MDU6TGFiZWw0MTQ4MDUxNTE=",
            "url": "https://api.github.com/repos/cython/cython/labels/performance"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6710/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 372,
        "created_at": "2019-02-24T14:21:23Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder",
            "user_view_type": "public"
        },
        "description": "* Remove code for Python 2 and Python < 3.8.\r\n* Integrate better with Python 3.\r\n* Improve support for the Limited API.\r\n* Start supporting GIL-free Python 3.13.\r\n* Support the Py3.13 `sys.monitoring` API.\r\n* Support and use `am_send` for coroutines.",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/65",
        "id": 4082235,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/65/labels",
        "node_id": "MDk6TWlsZXN0b25lNDA4MjIzNQ==",
        "number": 65,
        "open_issues": 20,
        "state": "open",
        "title": "3.1",
        "updated_at": "2025-03-20T10:50:20Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/65"
    },
    "node_id": "I_kwDOABDGAc6tMA4v",
    "number": 6710,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6710/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6710/timeline",
    "title": "[BUG] performance regressions in 3.1",
    "type": null,
    "updated_at": "2025-03-20T10:53:04Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6710",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder",
        "user_view_type": "public"
    }
}