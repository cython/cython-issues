{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Consider the following class defined in Cython:\r\n\r\n```\r\ncdef class Example:\r\n    cdef object __weakref__\r\n\r\n    def __dealloc__(self):\r\n        with nogil:\r\n            some_operation()\r\n```\r\n\r\nThis generates the following code for the `tp_dealloc` slot:\r\n\r\n```C++\r\nstatic void __pyx_tp_dealloc_98_session_Example(PyObject *o) {\r\n  struct __pyx_obj_9_Example *p = (struct __pyx_obj_9_Example *)o;\r\n  #if CYTHON_USE_TP_FINALIZE\r\n  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {\r\n    if (PyObject_CallFinalizerFromDealloc(o)) return;\r\n  }\r\n  #endif\r\n  {\r\n    PyObject *etype, *eval, *etb;\r\n    PyErr_Fetch(&etype, &eval, &etb);\r\n    ++Py_REFCNT(o);\r\n    __pyx_pw_98_session_7Example_1__dealloc__(o);\r\n    --Py_REFCNT(o);\r\n    PyErr_Restore(etype, eval, etb);\r\n  }\r\n  if (p->__weakref__) PyObject_ClearWeakRefs(o);\r\n  (*Py_TYPE(o)->tp_free)(o);\r\n}\r\n```\r\n\r\nwhere `__pyx_pw_98_session_7Example_1__dealloc__` corresponds to the `__dealloc__` function defined on the class. The problem is that the interpreter calls this function with a reference count of 0 and this code needs to increment \"artificially\" the refcount of the object to call the `__pyx_pw_98_session_7Example_1__dealloc__`. This presents a problem as any Python call can release the GIL in `__pyx_pw_98_session_7Example_1__dealloc__` and leave the object with 1 reference but in an inconsistent state (half destroyed). This is particularly harmful if a weak reference (with or without some callback) exists for the object, as this can resurrect the object in an inconsistent state (because for the weakref point of view, the object is alive). In particular, even if that somehow succeeds without crashing something, the interpreter will crash when destruction continues (the call for `PyObject_ClearWeakRefs`) for the object hitting this line (as the weakref has resurrected the object, the refcount is still >0):\r\n\r\nhttps://github.com/python/cpython/blob/master/Objects/weakrefobject.c#L894\r\n\r\nI think the easiest way to solve this is to move the call to `PyObject_ClearWeakRefs` before the call to the type's `__dealloc` (`__pyx_pw_98_session_7Example_1__dealloc__`).",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2929/comments",
    "created_at": "2019-04-24T08:17:53Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2929/events",
    "html_url": "https://github.com/cython/cython/issues/2929",
    "id": 436558808,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2929/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0MzY1NTg4MDg=",
    "number": 2929,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "tp_dealloc generated code is unsafe for weak references",
    "updated_at": "2019-04-24T08:59:03Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2929",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/11718525?v=4",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/pablogsal",
        "id": 11718525,
        "login": "pablogsal",
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/pablogsal"
    }
}