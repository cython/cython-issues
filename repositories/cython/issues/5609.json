{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\n\nI would like to use Cython to make a C++ scoped enum accessible in Cython and Python code. I'm using a `cpdef enum class` declaration to accomplish this in one pxd file. In another file I would like to define a cpdef function that accepts this enum as a parameter. The cpdef function should use the C++ enum directly when invoked from typed Cython code, while it should use the Python wrapper enum when called in pure Python code. In order to support this, the enum needs to be both imported and cimported.\r\n\r\nWhat I observe is that imports in the second module are confused when there is both a pyx and a pxd file, leading to conflicts that are not easily resolved.\n\n### Code to reproduce the behaviour:\n\nThis MWE requires four separate files:\r\n```cython\r\n# declarations.pxd\r\n# distutils: language = c++\r\ncdef extern from *:\r\n    \"\"\"\r\n    enum class my_enum : int\r\n    {\r\n        a = 1,\r\n        b = 0\r\n    };\r\n    \"\"\"\r\n    cpdef enum class my_enum(int):\r\n        a\r\n        b\r\n```\r\n```cython\r\n# declarations.pyx\r\n# distutils: language = c++\r\n```\r\n```cython\r\n# definitions.pxd\r\n# distutils: language = c++\r\n\r\n# Doesn't work\r\n# from declarations cimport my_enum\r\n# cpdef void f(my_enum x)\r\n\r\n# Works\r\ncimport declarations\r\ncpdef void f(declarations.my_enum x)\r\n```\r\n\r\n```cython\r\n# definitions.pyx\r\n# distutils: language = c++\r\n\r\nfrom declarations import my_enum\r\nfrom declarations cimport my_enum\r\n\r\n\r\ncpdef void f(my_enum x):\r\n    pass\r\n```\r\n\r\n\r\nIf I run `cythonize -3 -i declarations.pyx && cythonize -3 -i -f definitions.pyx` with these files, everything compiles successfully. However, if I comment out the two lines below \"Works\" in definitions.pxd and instead include the two lines below \"Doesn't work\", I get the following error:\r\n```\r\n------------------------------------------------------------                                                                                                                                                                        [39/421]\r\n...\r\n# distutils: language = c++\r\n\r\nfrom declarations import my_enum\r\n                         ^\r\n------------------------------------------------------------\r\n\r\ndefinitions.pyx:3:25: Assignment to non-lvalue 'my_enum'\r\n```\r\n\r\nNote that the error is coming from the definitions.pyx file, not the pxd file. What appears to be happening is that the line `from declarations cimport my_enum` in definitions.pxd makes Cython treat `my_enum` as a strongly typed C object, and therefore in Python it forbids the import because `my_enum` is no longer a valid PyObject name. \r\n\r\nThe workaround above isn't too bad, but it does mean that `my_enum` is not cimportable from definitions, only pure Python importable. It can be cimported from declarations in this example, but in my production use case declarations is an internal module not intended for public consumption and I'm looking to export the enum into the public API (trying to solve the same problem as intended in #5602). I could equivalently remove the import from definitions.pyx and only include the cimport, which would create the inverse problem where `my_enum` is only visible in Cython, not Python. \n\n### Expected behaviour\n\nI expect to be able to cimport the module into the pxd file with the same name as in the pyx file without any name collisions.\n\n### OS\n\nLinux\n\n### Python version\n\n3.11.4\n\n### Cython version\n\n3.0.0\n\n### Additional context\n\nAn aside: declarations.pyx is an empty file that's required to trigger compilation of the Python version of `my_enum`. It makes sense why this file is necessary, but it's a bit of a footgun that simply changing `my_enum` from a `cdef enum class` to a `cpdef` triggers the requirement that this class exist. It would be nice if the Cython compiler could detect that a pxd file contains a cpdef and errors if a corresponding pyx file doesn't exists. That's orthogonal to the current issue though, and not something new in Cython, just a bit extra surprising in this case IMHO.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "CC @shwina ",
            "created_at": "2023-08-10T22:41:11Z",
            "html_url": "https://github.com/cython/cython/issues/5609#issuecomment-1674016851",
            "id": 1674016851,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5609",
            "node_id": "IC_kwDOABDGAc5jx3hT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1674016851/reactions"
            },
            "updated_at": "2023-08-10T22:41:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1674016851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The issue here seems to be an incorrect determination of [whether or not the enum is an lvalue](https://github.com/cython/cython/blob/master/Cython/Compiler/ExprNodes.py#L2399), which then [blocks assignment](https://github.com/cython/cython/blob/master/Cython/Compiler/ExprNodes.py#L2265). I'm not sure what the correct change to make here is, though, because it's not clear to me exactly how to access the necessary information. AFAICT what we need is to update `NameNode.is_lvalue` to also return True for a `cpdef enum class`. IOW I would like to apply the following diff:\r\n\r\n```\r\n(main) vyasramasubramani@mac2020 compile % git diff\r\ndiff --git a/Cython/Compiler/ExprNodes.py b/Cython/Compiler/ExprNodes.py\r\nindex b73bb6734..997ea77e7 100644\r\n--- a/Cython/Compiler/ExprNodes.py\r\n+++ b/Cython/Compiler/ExprNodes.py\r\n@@ -2403,6 +2403,9 @@ class NameNode(AtomicExprNode):\r\n         ) or (\r\n             self.entry.is_cfunction and\r\n             self.entry.is_overridable\r\n+        ) or (\r\n+            self.entry.type.is_cpp_enum and\r\n+            self.entry.create_wrapper\r\n         )\r\n\r\n     def is_addressable(self):\r\n```\r\n\r\nHowever, it seems like even though `my_enum` is an scoped enumeration in the declarations module, at the point at which we reach this import the definitions module doesn't know that yet, so `is_cpp_enum` returns False and the above condition fails. I could use some advice to find an alternative solution here.",
            "created_at": "2023-08-26T22:55:48Z",
            "html_url": "https://github.com/cython/cython/issues/5609#issuecomment-1694517564",
            "id": 1694517564,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5609",
            "node_id": "IC_kwDOABDGAc5lAEk8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1694517564/reactions"
            },
            "updated_at": "2023-08-26T22:55:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1694517564",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> an incorrect determination of whether or not the enum is an lvalue\r\n\r\nWell, an enum is not an lvalue. It's a type. It cannot be assigned to.\r\n\r\n> the enum needs to be both imported and cimported.\r\n\r\nThis sounds wrong, but I'm not sure I've fully understood the problem. (Besides, if you really need both, you can rename one of them on import with `import … as …` to avoid naming collisions).\r\n\r\nSo, you are trying to write a `cpdef` function that receives an enum value as argument, and you want it to accept both the bare C++ enum value and the Python wrapper value. Right?\r\n\r\nThat sounds like you should use the C++ enum type as argument type and that's it. You should not need the Python wrapper type at all in your code. Also because from the point of view of Cython, that's not actually a special enum type but an arbitrary Python type like any other.\r\n\r\nIf you try to use only the C++ enum as argument type, what doesn't work then?",
            "created_at": "2023-09-01T08:22:09Z",
            "html_url": "https://github.com/cython/cython/issues/5609#issuecomment-1702362453",
            "id": 1702362453,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5609",
            "node_id": "IC_kwDOABDGAc5ld_1V",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1702362453/reactions"
            },
            "updated_at": "2023-09-01T08:25:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1702362453",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This sounds wrong, but I'm not sure I've fully understood the problem\r\n\r\nLet me try to explain a bit better. We can first focus on what I see as the inconsistency in Cython's current behavior, then go back to my use case (which is a bit more complex, but I'll explain that too to avoid the XY problem here in case there's a different solution to that problem).\r\n\r\nConsider the following example:\r\n\r\n```\r\n# declarations.pxd\r\n# distutils: language = c++\r\n\r\ncdef class A:\r\n    pass\r\n\r\ncpdef void f(A a)\r\n\r\n\r\n# declarations.pyx\r\n# distutils: language = c++\r\n\r\ncpdef void f(A a):\r\n    pass\r\n\r\n\r\n# definitions.pyx\r\n# distutils: language = c++\r\n\r\ncimport declarations\r\nimport declarations\r\n\r\nfrom declarations cimport A\r\nfrom declarations import A\r\n\r\nfrom declarations cimport f\r\nfrom declarations import f\r\n\r\nf = 10\r\n\r\n# This is not allowed\r\n# A = 20\r\n\r\ncdef void g():\r\n    cdef A a = A()\r\n\r\n    # This compiles, but will fail at runtime because f is now an int\r\n    f(a)\r\n```\r\n\r\nIn this example, I am able to both cimport and import (using the same name) a Cython module, a cdef class, and a cpdef function from the declarations module into the definitions module. My first expectation is therefore that I should be able to do the same thing with a cpdef enum. However, that triggers the error originally noted in issue. Therefore, my conclusion was that it should be possible to treat the enum as an lvalue, at least in the context of an import being considered an \"assignment\" to a name that is already reserved by a cimport.\r\n\r\n> Well, an enum is not an lvalue. It's a type. It cannot be assigned to.\r\n\r\nThis appears to be true as shown in the example above since the class `A` cannot be assigned to. It is interesting to note that the function object `f` is assignable, although doing so apparently overrides both the C and Python types so that f is no longer callable. I can't imagine a sane use case for this type of code, though, so I think Cython is doing enough of the right thing here. The main issue is with consistency since the class A, the function f, and an enum (or enum class) get treated differently for the purpose of importing.\r\n\r\n\r\n> (Besides, if you really need both, you can rename one of them on import with import … as … to avoid naming collisions)\r\n\r\nThat is absolutely true, and it is how I'm working around this issue at present.\r\n\r\nMy actual use case is roughly the following. I have one pxd file declarations.pxd that exports C++ definitions to Cython. One of those definitions is an enum class E. I have another Cython module (definitions.pyx + definitions.pxd) that establishes my public API. In definitions I have a cpdef function `f(E e)`. I would like the definitions module to be usable from both pure Cython (i.e. fully typed) and pure Python contexts. IOW, I want both of the following to be possible:\r\n\r\n```\r\n# Pure Python\r\nimport definitions\r\ndefinitions.f(definitions.E.A)\r\n\r\n# Pure Cython\r\ncimport definitions\r\ndefinitions.f(definitions.E.A)  # This should call the typed version of the cpdef function with a suitably typed argument\r\n```\r\n\r\nIn order for this to be possible, I need E to be part of the public API of definitions, which means it needs to be both imported in definitions.pyx and cimported in definitions.pxd so that client code can either import or cimport E.\r\n\r\nDoes this make sense/seem possible?",
            "created_at": "2023-09-01T16:31:10Z",
            "html_url": "https://github.com/cython/cython/issues/5609#issuecomment-1703016581",
            "id": 1703016581,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5609",
            "node_id": "IC_kwDOABDGAc5lgfiF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1703016581/reactions"
            },
            "updated_at": "2023-09-01T16:31:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1703016581",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "So, basically, what you are saying is that you want to write `from declarations cimport E` in `definitions.pxd` and `from declarations import E` in `definitions.pyx`. Is that right? And that is rejected with an error?\r\n\r\nThe cimport makes `declarations.pxd` part of your public API as well, so I wonder why you can't move the cpdef enum declaration to `definitions.pxd` instead. It seems reasonable to (c)import API modules from implementation modules. More than the other way round.",
            "created_at": "2023-09-01T19:42:34Z",
            "html_url": "https://github.com/cython/cython/issues/5609#issuecomment-1703244299",
            "id": 1703244299,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5609",
            "node_id": "IC_kwDOABDGAc5lhXIL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1703244299/reactions"
            },
            "updated_at": "2023-09-01T19:43:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1703244299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Is that right? And that is rejected with an error?\r\n\r\nYup that is exactly correct (see the original example, specifically the comments \"Works\" and \"Doesn't work\" in the definitions.pxd).\r\n\r\n> so I wonder why you can't move the cpdef enum declaration to definitions.pxd instead. It seems reasonable to (c)import API modules from implementation modules. More than the other way round.\r\n\r\nI hadn't considered this option at all. Since declarations.pxd is currently exporting functions defined in C++ that accept the enum as a parameter, it seemed natural to export the enum in that file as well, and when I wanted to make it available in Python I just changed it from a cdef to a cpdef. I think exporting the enum in definitions.pyx would work, though, since in that case I would only need to cimport it into declarations.pxd and I wouldn't need declarations.pyx at all. That seems like a pretty reasonable workaround for my use case, let me give it a shot.",
            "created_at": "2023-09-01T22:34:08Z",
            "html_url": "https://github.com/cython/cython/issues/5609#issuecomment-1703392601",
            "id": 1703392601,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5609",
            "node_id": "IC_kwDOABDGAc5lh7VZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1703392601/reactions"
            },
            "updated_at": "2023-09-01T22:34:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1703392601",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "That does indeed work for the toy example above. Unfortunately it wouldn't translate into my real use case because switching around the dependency structure like that would introduce a circular import dependency. I'm not sure that there is a way to resolve that since in my real use case all the functions in definitions.pyx are just wrappers around C++ functions. Perhaps this example will help illustrate the real use case more clearly (apologies for cluttering this issue with so many code snippets, let me know if there's different information that you think would help more):\r\n\r\n```\r\n# declarations.pxd\r\n# distutils: language = c++\r\n\r\n# In my real use case the C++ was actually defined in a separately compiled C++ library's header, not inline\r\ncdef extern from *:\r\n    \"\"\"\r\n    enum class my_enum : int\r\n    {\r\n        a = 1,\r\n        b = 0\r\n    };\r\n\r\n    void f(my_enum e) {}\r\n    \"\"\"\r\n\r\n    cpdef enum class my_enum(int):\r\n        a\r\n        b\r\n\r\n    cdef void f(my_enum e)\r\n```\r\n```\r\n# declarations.pyx\r\n# distutils: language = c++\r\n# This file only exists to compile the Python my_enum \r\n```\r\n```\r\n# definitions.pxd\r\n# distutils: language = c++\r\n\r\n# Needed to support passing typed my_enum arguments to the function f below if it is cimported \r\n# into other Cython modules. To your point, maybe this indicates that users of the Cython interface\r\n# have to cimport declarations instead of definitions; that's not ideal IMO, but is an option.\r\nfrom declarations cimport my_enum\r\n\r\n# Needed so that the function is cimportable\r\ncpdef void f(my_enum e)\r\n```\r\n```\r\n# definitions.pyx\r\n# distutils: language = c++\r\n\r\n# Needed to call the C function f\r\ncimport declarations\r\n\r\n# Needed to type the argument of f\r\nfrom declarations cimport my_enum\r\n\r\n# Needed so users can access my_enum from Python\r\nfrom declarations import my_enum\r\n\r\ncpdef void f(my_enum e):\r\n    # The real function has a bit more preprocessing of other arguments, but this example\r\n    # captures the core requirement for the enum.\r\n    declarations.f(e)\r\n",
            "created_at": "2023-09-01T22:55:21Z",
            "html_url": "https://github.com/cython/cython/issues/5609#issuecomment-1703415514",
            "id": 1703415514,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5609",
            "node_id": "IC_kwDOABDGAc5liA7a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1703415514/reactions"
            },
            "updated_at": "2023-09-01T22:56:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1703415514",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@scoder given that #5657 was closed, I'd like to reopen this discussion. I didn't do a great job of clarifying my intent in the various messages above, so let me try and start over with a simpler example. I think this statement above is the clearest argument:\r\n\r\n> In this example, I am able to both cimport and import (using the same name) a Cython module, a cdef class, and a cpdef function from the declarations module into the definitions module. My first expectation is therefore that I should be able to do the same thing with a cpdef enum. However, that triggers the error originally noted in issue. Therefore, my conclusion was that it should be possible to treat the enum as an lvalue, at least in the context of an import being considered an \"assignment\" to a name that is already reserved by a cimport.\r\n\r\nLet's illustrate that with this simplified example using only two files (assume `declarations.pyx` exists and defines `f`; also, note that I am now using a C-style enum to keep things simple):\r\n\r\n```\r\n# declarations.pxd\r\ncpdef enum my_enum:\r\n    a = 1\r\n    b = 2\r\n\r\ncpdef void f()\r\n```\r\n\r\n```\r\n# definitions.pyx\r\nfrom declarations cimport f\r\nfrom declarations import f\r\n\r\nfrom declarations cimport my_enum\r\nfrom declarations import my_enum\r\n```\r\n\r\nIf we run `cythonize -3 -i -f definitions.pyx`, we'll see this error:\r\n```\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n# definitions.pyx\r\nfrom declarations cimport f\r\nfrom declarations import f\r\n\r\nfrom declarations cimport my_enum\r\nfrom declarations import my_enum\r\n                         ^\r\n------------------------------------------------------------\r\n\r\ndefinitions.pyx:6:25: Assignment to non-lvalue 'my_enum'\r\n```\r\n\r\nI see two issues with consistency here:\r\n1. We are able to cimport and then import the function `f`, but we cannot do so for the enum. As you mention above, [an enum is not an lvalue](https://github.com/cython/cython/issues/5609#issuecomment-1702362453), so from that perspective it makes sense not to allow assignment, but the same is true of a cdef function and yet we do allow the \"assignment\" to `f` that occurs in the import on the third line in definitions.pyx.\r\n2. If I change the order of the imports in definitions.pyx to import `my_enum` before cimporting it, the code compiles. That indicates that Cython only thinks this code is erroneous because by parsing `my_enum` as a C type first it thinks it is an lvalue and therefore disallows reassigning to it, while parsing it as a Python type first then allows creating the C type later. IOW this code compiles fine:\r\n\r\n```\r\n# definitions.pyx\r\nfrom declarations cimport f\r\nfrom declarations import f\r\n\r\n# Now importing before cimporting\r\nfrom declarations import my_enum\r\nfrom declarations cimport my_enum\r\n```\r\n\r\nTherefore, I would argue that the Cython compiler is producing unexpected behavior for the two reasons above. Would you agree?",
            "created_at": "2024-02-17T02:48:35Z",
            "html_url": "https://github.com/cython/cython/issues/5609#issuecomment-1949616476",
            "id": 1949616476,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5609",
            "node_id": "IC_kwDOABDGAc50NMlc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1949616476/reactions"
            },
            "updated_at": "2024-02-21T23:40:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1949616476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5609/comments",
    "created_at": "2023-08-10T22:29:46Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
                "events_url": "https://api.github.com/users/shwina/events{/privacy}",
                "followers_url": "https://api.github.com/users/shwina/followers",
                "following_url": "https://api.github.com/users/shwina/following{/other_user}",
                "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shwina",
                "id": 3190405,
                "login": "shwina",
                "node_id": "MDQ6VXNlcjMxOTA0MDU=",
                "organizations_url": "https://api.github.com/users/shwina/orgs",
                "received_events_url": "https://api.github.com/users/shwina/received_events",
                "repos_url": "https://api.github.com/users/shwina/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shwina"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-08-10T22:41:12Z",
            "event": "mentioned",
            "id": 10064563097,
            "node_id": "MEE_lADOABDGAc5uB1brzwAAAAJX5QuZ",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/10064563097"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
                "events_url": "https://api.github.com/users/shwina/events{/privacy}",
                "followers_url": "https://api.github.com/users/shwina/followers",
                "following_url": "https://api.github.com/users/shwina/following{/other_user}",
                "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shwina",
                "id": 3190405,
                "login": "shwina",
                "node_id": "MDQ6VXNlcjMxOTA0MDU=",
                "organizations_url": "https://api.github.com/users/shwina/orgs",
                "received_events_url": "https://api.github.com/users/shwina/received_events",
                "repos_url": "https://api.github.com/users/shwina/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shwina"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-08-10T22:41:12Z",
            "event": "subscribed",
            "id": 10064563109,
            "node_id": "SE_lADOABDGAc5uB1brzwAAAAJX5Qul",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/10064563109"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-02-17T02:48:36Z",
            "event": "mentioned",
            "id": 11835303920,
            "node_id": "MEE_lADOABDGAc5uB1brzwAAAALBcGfw",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11835303920"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2024-02-17T02:48:36Z",
            "event": "subscribed",
            "id": 11835303930,
            "node_id": "SE_lADOABDGAc5uB1brzwAAAALBcGf6",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/11835303930"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5609/events",
    "html_url": "https://github.com/cython/cython/issues/5609",
    "id": 1845974763,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5609/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5uB1br",
    "number": 5609,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5609/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5609/timeline",
    "title": "[BUG] Cython doesn't handle mixed imports and cimports of enums cleanly",
    "updated_at": "2024-02-21T23:40:16Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5609",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vyasr",
        "id": 1538165,
        "login": "vyasr",
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vyasr"
    }
}