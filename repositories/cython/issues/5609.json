{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\n\nI would like to use Cython to make a C++ scoped enum accessible in Cython and Python code. I'm using a `cpdef enum class` declaration to accomplish this in one pxd file. In another file I would like to define a cpdef function that accepts this enum as a parameter. The cpdef function should use the C++ enum directly when invoked from typed Cython code, while it should use the Python wrapper enum when called in pure Python code. In order to support this, the enum needs to be both imported and cimported.\r\n\r\nWhat I observe is that imports in the second module are confused when there is both a pyx and a pxd file, leading to conflicts that are not easily resolved.\n\n### Code to reproduce the behaviour:\n\nThis MWE requires four separate files:\r\n```cython\r\n# declarations.pxd\r\n# distutils: language = c++\r\ncdef extern from *:\r\n    \"\"\"\r\n    enum class my_enum : int\r\n    {\r\n        a = 1,\r\n        b = 0\r\n    };\r\n    \"\"\"\r\n    cpdef enum class my_enum(int):\r\n        a\r\n        b\r\n```\r\n```cython\r\n# declarations.pyx\r\n# distutils: language = c++\r\n```\r\n```cython\r\n# definitions.pxd\r\n# distutils: language = c++\r\n\r\n# Doesn't work\r\n# from declarations cimport my_enum\r\n# cpdef void f(my_enum x)\r\n\r\n# Works\r\ncimport declarations\r\ncpdef void f(declarations.my_enum x)\r\n```\r\n\r\n```cython\r\n# definitions.pyx\r\n# distutils: language = c++\r\n\r\nfrom declarations import my_enum\r\nfrom declarations cimport my_enum\r\n\r\n\r\ncpdef void f(my_enum x):\r\n    pass\r\n```\r\n\r\n\r\nIf I run `cythonize -3 -i declarations.pyx && cythonize -3 -i -f definitions.pyx` with these files, everything compiles successfully. However, if I comment out the two lines below \"Works\" in definitions.pxd and instead include the two lines below \"Doesn't work\", I get the following error:\r\n```\r\n------------------------------------------------------------                                                                                                                                                                        [39/421]\r\n...\r\n# distutils: language = c++\r\n\r\nfrom declarations import my_enum\r\n                         ^\r\n------------------------------------------------------------\r\n\r\ndefinitions.pyx:3:25: Assignment to non-lvalue 'my_enum'\r\n```\r\n\r\nNote that the error is coming from the definitions.pyx file, not the pxd file. What appears to be happening is that the line `from declarations cimport my_enum` in definitions.pxd makes Cython treat `my_enum` as a strongly typed C object, and therefore in Python it forbids the import because `my_enum` is no longer a valid PyObject name. \r\n\r\nThe workaround above isn't too bad, but it does mean that `my_enum` is not cimportable from definitions, only pure Python importable. It can be cimported from declarations in this example, but in my production use case declarations is an internal module not intended for public consumption and I'm looking to export the enum into the public API (trying to solve the same problem as intended in #5602). I could equivalently remove the import from definitions.pyx and only include the cimport, which would create the inverse problem where `my_enum` is only visible in Cython, not Python. \n\n### Expected behaviour\n\nI expect to be able to cimport the module into the pxd file with the same name as in the pyx file without any name collisions.\n\n### OS\n\nLinux\n\n### Python version\n\n3.11.4\n\n### Cython version\n\n3.0.0\n\n### Additional context\n\nAn aside: declarations.pyx is an empty file that's required to trigger compilation of the Python version of `my_enum`. It makes sense why this file is necessary, but it's a bit of a footgun that simply changing `my_enum` from a `cdef enum class` to a `cpdef` triggers the requirement that this class exist. It would be nice if the Cython compiler could detect that a pxd file contains a cpdef and errors if a corresponding pyx file doesn't exists. That's orthogonal to the current issue though, and not something new in Cython, just a bit extra surprising in this case IMHO.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "CC @shwina ",
            "created_at": "2023-08-10T22:41:11Z",
            "html_url": "https://github.com/cython/cython/issues/5609#issuecomment-1674016851",
            "id": 1674016851,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5609",
            "node_id": "IC_kwDOABDGAc5jx3hT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1674016851/reactions"
            },
            "updated_at": "2023-08-10T22:41:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1674016851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The issue here seems to be an incorrect determination of [whether or not the enum is an lvalue](https://github.com/cython/cython/blob/master/Cython/Compiler/ExprNodes.py#L2399), which then [blocks assignment](https://github.com/cython/cython/blob/master/Cython/Compiler/ExprNodes.py#L2265). I'm not sure what the correct change to make here is, though, because it's not clear to me exactly how to access the necessary information. AFAICT what we need is to update `NameNode.is_lvalue` to also return True for a `cpdef enum class`. IOW I would like to apply the following diff:\r\n\r\n```\r\n(main) vyasramasubramani@mac2020 compile % git diff\r\ndiff --git a/Cython/Compiler/ExprNodes.py b/Cython/Compiler/ExprNodes.py\r\nindex b73bb6734..997ea77e7 100644\r\n--- a/Cython/Compiler/ExprNodes.py\r\n+++ b/Cython/Compiler/ExprNodes.py\r\n@@ -2403,6 +2403,9 @@ class NameNode(AtomicExprNode):\r\n         ) or (\r\n             self.entry.is_cfunction and\r\n             self.entry.is_overridable\r\n+        ) or (\r\n+            self.entry.type.is_cpp_enum and\r\n+            self.entry.create_wrapper\r\n         )\r\n\r\n     def is_addressable(self):\r\n```\r\n\r\nHowever, it seems like even though `my_enum` is an scoped enumeration in the declarations module, at the point at which we reach this import the definitions module doesn't know that yet, so `is_cpp_enum` returns False and the above condition fails. I could use some advice to find an alternative solution here.",
            "created_at": "2023-08-26T22:55:48Z",
            "html_url": "https://github.com/cython/cython/issues/5609#issuecomment-1694517564",
            "id": 1694517564,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5609",
            "node_id": "IC_kwDOABDGAc5lAEk8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1694517564/reactions"
            },
            "updated_at": "2023-08-26T22:55:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1694517564",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
                "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vyasr/followers",
                "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vyasr",
                "id": 1538165,
                "login": "vyasr",
                "node_id": "MDQ6VXNlcjE1MzgxNjU=",
                "organizations_url": "https://api.github.com/users/vyasr/orgs",
                "received_events_url": "https://api.github.com/users/vyasr/received_events",
                "repos_url": "https://api.github.com/users/vyasr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vyasr"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5609/comments",
    "created_at": "2023-08-10T22:29:46Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
                "events_url": "https://api.github.com/users/shwina/events{/privacy}",
                "followers_url": "https://api.github.com/users/shwina/followers",
                "following_url": "https://api.github.com/users/shwina/following{/other_user}",
                "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shwina",
                "id": 3190405,
                "login": "shwina",
                "node_id": "MDQ6VXNlcjMxOTA0MDU=",
                "organizations_url": "https://api.github.com/users/shwina/orgs",
                "received_events_url": "https://api.github.com/users/shwina/received_events",
                "repos_url": "https://api.github.com/users/shwina/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shwina"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-08-10T22:41:12Z",
            "event": "mentioned",
            "id": 10064563097,
            "node_id": "MEE_lADOABDGAc5uB1brzwAAAAJX5QuZ",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/10064563097"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
                "events_url": "https://api.github.com/users/shwina/events{/privacy}",
                "followers_url": "https://api.github.com/users/shwina/followers",
                "following_url": "https://api.github.com/users/shwina/following{/other_user}",
                "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shwina",
                "id": 3190405,
                "login": "shwina",
                "node_id": "MDQ6VXNlcjMxOTA0MDU=",
                "organizations_url": "https://api.github.com/users/shwina/orgs",
                "received_events_url": "https://api.github.com/users/shwina/received_events",
                "repos_url": "https://api.github.com/users/shwina/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shwina"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2023-08-10T22:41:12Z",
            "event": "subscribed",
            "id": 10064563109,
            "node_id": "SE_lADOABDGAc5uB1brzwAAAAJX5Qul",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/10064563109"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5609/events",
    "html_url": "https://github.com/cython/cython/issues/5609",
    "id": 1845974763,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5609/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5uB1br",
    "number": 5609,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5609/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5609/timeline",
    "title": "[BUG] Cython doesn't handle mixed imports and cimports of enums cleanly",
    "updated_at": "2023-08-26T22:55:49Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5609",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vyasr",
        "id": 1538165,
        "login": "vyasr",
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vyasr"
    }
}