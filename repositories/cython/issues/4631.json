{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Python 3.10 comes with a new syntax for union types, as defined by [PEP-604](https://www.python.org/dev/peps/pep-0604/).\r\n\r\nThere are a couple of separate aspects to this:\r\n* [ ] `func(x: atype | None)`: this is equivalent to `func(x: Optional[atype])` (which is already supported).\r\n* [ ] `func(x: A | B)`: this should be considered a fused type by Cython and implemented as such. The usual caveat of cross product explosion for multiple fused typed arguments applies and we should probably also require a `typedef` to avoid this. For variable declarations, these or-annotations can probably be ignored.\r\n* [ ] `func(x: A | B | None)`: same as above, but requires `A` and `B` to have Python types in order to allow `None`.\r\n* [ ] `isinstance(x, A | B)` / `issubclass(x, A | B)`:  this is not so obvious because `A | B` may not be two types here but an arbitrary expression that just happens to return a type (or a tuple of types). Implementing this only for the case where we detect A and B as types in the compiler would lead to unpredictable behaviour.\r\n* [ ] `isinstance(x, A | None)`: the same as above applies, `A` might simply be some object that, when |-ed with `None` returns a type. It's very tempting, though, given how cheap a `None` check is in C.\r\n* [ ] `x: A | None`: this requires `A` to be a Python type in order to accept `None` values. This probably shouldn't have any other effect, since object variables are generally allowed to be `None`.\r\n* [ ] `x: A | B`: this probably should not have an effect currently since we would not consider `A | B` to be a fused type here (even inside of a fused function, this would not refer to the same type as the fused arguments).\r\n* [ ] `T = cython.typedef(A | B)` and `T = cython.fused_type(A | B)` should be allowed and both define a fused type.\r\n* [ ] `x = cython.declare(A | B)` should declare `x` as a fused type. This should be disallowed for globals and in class bodies.\r\n\r\nOpen questions:\r\n* should we consider `func(x: A | B, y: A | B)` to have one or two fused types? (Probably two, as before.)\r\n* should we change the `__annotations__` value in `x: A | B` to `typing.Union[A, B]`? (Maybe yes, because it's more backwards compatible. Maybe not, since users can spell this out themselves.)\r\n* should we consider `func(x: Union[A, B])` also a fused function now? (Maybe yes, for consistency.)\r\n* should we consider `T = Union[A, B]` the same as `T = cython.fused_type(A, B)`? (Maybe yes, for consistency. Maybe no, for safety.)\r\n* should `x: A | None` allow `A` to be `double` or `bint`, which we internally alias for Python `float` and `bool`? (Maybe not right now.)\r\n* should we support `isinstance()` on Cython fused type names? (Maybe not as part of this ticket.)\r\n",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4631/comments",
    "created_at": "2022-02-10T12:26:09Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-02-10T12:26:09Z",
            "event": "labeled",
            "id": 6041761987,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "LE_lADOABDGAc5DWgeWzwAAAAFoHfjD",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6041761987"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-02-10T12:26:10Z",
            "event": "labeled",
            "id": 6041761991,
            "label": {
                "color": "444444",
                "name": "Python Semantics"
            },
            "node_id": "LE_lADOABDGAc5DWgeWzwAAAAFoHfjH",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6041761991"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2022-02-10T12:26:10Z",
            "event": "labeled",
            "id": 6041761995,
            "label": {
                "color": "444444",
                "name": "Type Analysis"
            },
            "node_id": "LE_lADOABDGAc5DWgeWzwAAAAFoHfjL",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/6041761995"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4631/events",
    "html_url": "https://github.com/cython/cython/issues/4631",
    "id": 1129973654,
    "labels": [
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556315,
            "name": "Python Semantics",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMTU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Python%20Semantics"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558824,
            "name": "Type Analysis",
            "node_id": "MDU6TGFiZWw0MjU1NTg4MjQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/Type%20Analysis"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4631/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5DWgeW",
    "number": 4631,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/4631/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4631/timeline",
    "title": "[ENH] Implement PEP-604 (union types as X | Y) as fused types",
    "updated_at": "2022-02-10T12:33:47Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4631",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder"
    }
}