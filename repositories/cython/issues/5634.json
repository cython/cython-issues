{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Describe the bug\n\nThe `generate_type_import_call` methods includes calls to `sizeof(PyTypeObject)` that results in compilation failures if the limited API is enabled - https://github.com/cython/cython/blob/d455d51bf31379f47c074e40517e24857d4d9cc0/Cython/Compiler/ModuleNode.py#L3859\r\n\r\nSpecifically, you get:\r\n```\r\nerror: invalid application of ‘sizeof’ to incomplete type ‘PyTypeObject’ {aka ‘_typeobject’}\r\n 3076 |   sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyTypeObject),\r\n      |   ^~~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\nAnd:\r\n\r\n```\r\nerror: invalid application of ‘__alignof__’ to incomplete type ‘PyTypeObject’ {aka ‘_typeobject’}\r\n 3076 |   sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyTypeObject),\r\n ```\r\n\r\nThe generated code is:\r\n`\r\n__pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_0(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, \"type\", sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyTypeObject), __Pyx_ImportType_CheckSize_Warn_3_0_0);`\r\n \r\n \r\n  I'm confused by this code in general because `PyTypeObject` and `PyType_Type` are directly available in the limited API, so it's not clear to me why it's necessary to call `__Pyx_ImportType_3_0_0` in the first place.\n\n### Code to reproduce the behaviour:\n\n_No response_\n\n### Expected behaviour\n\n_No response_\n\n### OS\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Cython version\n\n_No response_\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This feels like another thing caused by a stray cimport. I can get this code from\r\n\r\n```\r\nfrom cpython cimport type\r\n```\r\n\r\nI'm not completely confident that there isn't another way to get it, but we generate `__Pyx_ImportType_3_0_0` when cimporting types.",
            "created_at": "2023-08-18T16:33:05Z",
            "html_url": "https://github.com/cython/cython/issues/5634#issuecomment-1684162218",
            "id": 1684162218,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5634",
            "node_id": "IC_kwDOABDGAc5kYkaq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1684162218/reactions"
            },
            "updated_at": "2023-08-18T16:33:05Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1684162218",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yup,  `from cpython.bytes cimport PyBytes_AsString` -> `from .object cimport PyObject` -> `cimport cpython.type`\r\n\r\nI was able to work around the issue by cherry-picking the specific symbols I needed:\r\n\r\n```\r\ncdef extern from \"Python.h\":\r\n  char* PyBytes_AsString(object string) except NULL\r\n```\r\n\r\nI'm still confused by the implementation though - why is `__Pyx_ImportType_3_0_0` necessary?",
            "created_at": "2023-08-18T16:40:59Z",
            "html_url": "https://github.com/cython/cython/issues/5634#issuecomment-1684170635",
            "id": 1684170635,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5634",
            "node_id": "IC_kwDOABDGAc5kYmeL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1684170635/reactions"
            },
            "updated_at": "2023-08-18T16:40:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1684170635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/57725958?v=4",
                "events_url": "https://api.github.com/users/aws-taylor/events{/privacy}",
                "followers_url": "https://api.github.com/users/aws-taylor/followers",
                "following_url": "https://api.github.com/users/aws-taylor/following{/other_user}",
                "gists_url": "https://api.github.com/users/aws-taylor/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aws-taylor",
                "id": 57725958,
                "login": "aws-taylor",
                "node_id": "MDQ6VXNlcjU3NzI1OTU4",
                "organizations_url": "https://api.github.com/users/aws-taylor/orgs",
                "received_events_url": "https://api.github.com/users/aws-taylor/received_events",
                "repos_url": "https://api.github.com/users/aws-taylor/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aws-taylor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aws-taylor/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aws-taylor"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm still confused by the implementation though - why is `__Pyx_ImportType_3_0_0` necessary?\r\n\r\ntype.pxd includes `type` as an extern cdef class:\r\n\r\nhttps://github.com/cython/cython/blob/master/Cython/Includes/cpython/type.pxd\r\n\r\nIt's largely just defined as opaque, but the idea is that you'd be able to inherit a cdef class from it:\r\n\r\n```\r\ncdef class SomeExtendedType(cpython.type.type):\r\n    # ...\r\n```\r\n\r\nThe check is that the size of `type` matches the size that Cython believes `type` to be. If it isn't then you end up with a binary compatibility mess. That's obviously more of an issue for when cimporting from 3rd party modules rather than builtin types, but the same logic applies to every cimported type.\r\n\r\n*However*, it may all be pointless in this case. Cython already knows what `type` is without a `cimport` so you can already do\r\n\r\n```\r\n# Note that this will probably never work in the limited API, but it's just an illustration...)\r\ncdef class T(type):\r\n    pass\r\n```\r\n\r\nTherefore, I'm not really sure why we `type` defined as an extern class in this case since it doesn't give you access to anything new. We probably can't removeit from `cpython.type` easily without breaking existing code. But I don't think `cpython.object` needs to import it.\r\n\r\nI think all this `cimport cpython` files are going to need some real thought about how they become limited-API compatible.",
            "created_at": "2023-08-18T16:54:35Z",
            "html_url": "https://github.com/cython/cython/issues/5634#issuecomment-1684185983",
            "id": 1684185983,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5634",
            "node_id": "IC_kwDOABDGAc5kYqN_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1684185983/reactions"
            },
            "updated_at": "2023-08-18T16:54:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1684185983",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Aha, that all makes sense. Thanks. \r\n\r\nIt looks like the only usage of `type` in all of the .pxd files is:\r\n`ctypedef object (*newfunc)(cpython.type.type, PyObject*, PyObject*)  # (type, args|NULL, kwargs|NULL)`\r\n\r\nCan this be replaced with?\r\n`ctypedef object (*newfunc)(type, PyObject*, PyObject*)  # (type, args|NULL, kwargs|NULL)` \r\nOr:\r\n`ctypedef object (*newfunc)(PyTypeObject, PyObject*, PyObject*)  # (type, args|NULL, kwargs|NULL)` ",
            "created_at": "2023-08-18T17:18:10Z",
            "html_url": "https://github.com/cython/cython/issues/5634#issuecomment-1684210665",
            "id": 1684210665,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5634",
            "node_id": "IC_kwDOABDGAc5kYwPp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1684210665/reactions"
            },
            "updated_at": "2023-08-18T17:18:10Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1684210665",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/57725958?v=4",
                "events_url": "https://api.github.com/users/aws-taylor/events{/privacy}",
                "followers_url": "https://api.github.com/users/aws-taylor/followers",
                "following_url": "https://api.github.com/users/aws-taylor/following{/other_user}",
                "gists_url": "https://api.github.com/users/aws-taylor/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aws-taylor",
                "id": 57725958,
                "login": "aws-taylor",
                "node_id": "MDQ6VXNlcjU3NzI1OTU4",
                "organizations_url": "https://api.github.com/users/aws-taylor/orgs",
                "received_events_url": "https://api.github.com/users/aws-taylor/received_events",
                "repos_url": "https://api.github.com/users/aws-taylor/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aws-taylor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aws-taylor/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aws-taylor"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Can this be replaced with?\r\n`ctypedef object (*newfunc)(type, PyObject*, PyObject*)  # (type, args|NULL, kwargs|NULL)`\r\n\r\nI think so. Would want to do a bit of testing to check it didn't break existing code though, but I think that should work ",
            "created_at": "2023-08-18T17:46:41Z",
            "html_url": "https://github.com/cython/cython/issues/5634#issuecomment-1684239133",
            "id": 1684239133,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/5634",
            "node_id": "IC_kwDOABDGAc5kY3Md",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1684239133/reactions"
            },
            "updated_at": "2023-08-18T17:46:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1684239133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5634/comments",
    "created_at": "2023-08-18T16:21:24Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/5634/events",
    "html_url": "https://github.com/cython/cython/issues/5634",
    "id": 1856978890,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/5634/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc5urz_K",
    "number": 5634,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/5634/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/5634/timeline",
    "title": "[BUG] Limited API: generate_type_import_call() uses opaque type PyTypeObject",
    "updated_at": "2023-08-18T17:46:41Z",
    "url": "https://api.github.com/repos/cython/cython/issues/5634",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/57725958?v=4",
        "events_url": "https://api.github.com/users/aws-taylor/events{/privacy}",
        "followers_url": "https://api.github.com/users/aws-taylor/followers",
        "following_url": "https://api.github.com/users/aws-taylor/following{/other_user}",
        "gists_url": "https://api.github.com/users/aws-taylor/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/aws-taylor",
        "id": 57725958,
        "login": "aws-taylor",
        "node_id": "MDQ6VXNlcjU3NzI1OTU4",
        "organizations_url": "https://api.github.com/users/aws-taylor/orgs",
        "received_events_url": "https://api.github.com/users/aws-taylor/received_events",
        "repos_url": "https://api.github.com/users/aws-taylor/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/aws-taylor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aws-taylor/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/aws-taylor"
    }
}