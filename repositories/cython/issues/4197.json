{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "I would like to start working on [HPy](https://hpyproject.org/) support for cython. At the end, I would like to be able to output code something like the code below, where the significant changes are\r\n- `#include \"hpy.h\"` not `#include \"Python.h\"` (in the default mode, `hpy.h` pulls in `Python.h`, in the universal mode it does not)\r\n- Module init is now `HPy_MODINIT...`\r\n- There is support (in the default mode) for \"legacy\" c-api functions. \r\n\r\nIn default mode the end result for CPython is a c-extension module that is almost equivalent to a non-HPy one: clever use of C macros should generate pretty much the same preprocessed code. Now the questions:\r\n\r\n1. I think it makes sense to add a `@cython.hpy` decorator in order to provide a migration path as HPy is not complete yet. Also there may be optimizations Cython can do with legacy code, so users might want to stay with mixed modules for a while. Adding such a decorator would modify the module `init`, and would allow for mixed modules.\r\n\r\n2. Currently, the approach to multi-mode cython code (like `limited_api`) has been to add C-level macros to switch on and off different behaviour. Then the c code is generated once, and users can toggle behaviour at compile time. I think HPy should do something different and generate different C code if it is turned on. This means there should be a global \"in HPy mode\" flag as well as a \"HPy\" Node attribute.\r\n\r\n3. For now I will only attempt to support the default mode. Universal mode will be a future enhancement since it does not support legacy code.\r\n\r\nDoes this approach (using decorators, generating different C code, global HPy and Node-level HPy attributes) make sense?\r\n\r\n<details>\r\n\r\n```\r\n#include \"hpy.h\"\r\n\r\n/* a HPy style function */\r\nHPyDef_METH(add_ints, \"add_ints\", add_ints_impl, HPyFunc_VARARGS)\r\nstatic HPy add_ints_impl(HPyContext *ctx, HPy self, HPy *args, HPy_ssize_t nargs)\r\n{\r\n    long a, b;\r\n    if (!HPyArg_Parse(ctx, NULL, args, nargs, \"ll\", &a, &b))\r\n        return HPy_NULL;\r\n    return HPyLong_FromLong(ctx, a+b);\r\n}\r\n\r\n\r\n/* A old-style function */\r\nstatic PyObject *\r\nadd_ints2(PyObject *self, PyObject *args)\r\n{\r\n\r\n    long a, b, ret;\r\n    if (!PyArg_ParseTuple(args, \"ll\", &a, &b))\r\n        return NULL;\r\n    ret = a + b;\r\n    return PyLong_FromLong(ret);\r\n}\r\n\r\nstatic HPyDef *hpy_defines[] = {\r\n    &add_ints,\r\n    NULL\r\n};\r\n\r\nstatic PyMethodDef py_defines[] = {\r\n    {\"add_ints_legacy\", add_ints2, METH_VARARGS, \"add two ints\"},\r\n    {NULL, NULL, 0, NULL}    /* Sentinel */\r\n};\r\n\r\nstatic HPyModuleDef moduledef = {\r\n    HPyModuleDef_HEAD_INIT,\r\n    .m_name = \"simple\",\r\n    .m_doc = \"HPy Example\",\r\n    .m_size = -1,\r\n    .defines = hpy_defines,\r\n    .legacy_methods = py_defines\r\n};\r\n\r\n\r\nHPy_MODINIT(simple)\r\nstatic HPy init_simple_impl(HPyContext *ctx)\r\n{\r\n    HPy m;\r\n    m = HPyModule_Create(ctx, &moduledef);\r\n    if (HPy_IsNull(m))\r\n        return HPy_NULL;\r\n    return m;\r\n}\r\n\r\n```",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "> Universal mode will be a future enhancement since it does not support legacy code.\r\n\r\nthat's not the case. You can fully use `legacy_methods` and `legacy_slots` even in universal mode",
            "created_at": "2021-05-27T10:02:48Z",
            "html_url": "https://github.com/cython/cython/issues/4197#issuecomment-849505519",
            "id": 849505519,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4197",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTUwNTUxOQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-05-27T10:02:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/849505519",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/344507?v=4",
                "events_url": "https://api.github.com/users/antocuni/events{/privacy}",
                "followers_url": "https://api.github.com/users/antocuni/followers",
                "following_url": "https://api.github.com/users/antocuni/following{/other_user}",
                "gists_url": "https://api.github.com/users/antocuni/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antocuni",
                "id": 344507,
                "login": "antocuni",
                "node_id": "MDQ6VXNlcjM0NDUwNw==",
                "organizations_url": "https://api.github.com/users/antocuni/orgs",
                "received_events_url": "https://api.github.com/users/antocuni/received_events",
                "repos_url": "https://api.github.com/users/antocuni/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antocuni/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antocuni/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antocuni"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the clarification.\r\n\r\nHere is the python code that I want to generate that C file\r\n```\r\n@cython.hpy\r\ndef add_ints(a: int, b: int):\r\n    return a + b\r\n\r\ndef add_ints_legacy(a:int, b:int):\r\n    return a + b\r\n```\r\n",
            "created_at": "2021-05-27T10:07:41Z",
            "html_url": "https://github.com/cython/cython/issues/4197#issuecomment-849508701",
            "id": 849508701,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4197",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTUwODcwMQ==",
            "performed_via_github_app": null,
            "updated_at": "2021-05-27T10:07:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/849508701",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
                "events_url": "https://api.github.com/users/mattip/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattip/followers",
                "following_url": "https://api.github.com/users/mattip/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattip",
                "id": 823911,
                "login": "mattip",
                "node_id": "MDQ6VXNlcjgyMzkxMQ==",
                "organizations_url": "https://api.github.com/users/mattip/orgs",
                "received_events_url": "https://api.github.com/users/mattip/received_events",
                "repos_url": "https://api.github.com/users/mattip/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattip"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4197/comments",
    "created_at": "2021-05-27T09:47:15Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-05-27T12:18:13Z",
            "event": "subscribed",
            "id": 4805411801,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4MDU0MTE4MDE=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4805411801"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4197/events",
    "html_url": "https://github.com/cython/cython/issues/4197",
    "id": 903482679,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4197/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5MDM0ODI2Nzk=",
    "number": 4197,
    "performed_via_github_app": null,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "[ENH] Preliminary support for HPy",
    "updated_at": "2021-05-27T10:07:42Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4197",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
        "events_url": "https://api.github.com/users/mattip/events{/privacy}",
        "followers_url": "https://api.github.com/users/mattip/followers",
        "following_url": "https://api.github.com/users/mattip/following{/other_user}",
        "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mattip",
        "id": 823911,
        "login": "mattip",
        "node_id": "MDQ6VXNlcjgyMzkxMQ==",
        "organizations_url": "https://api.github.com/users/mattip/orgs",
        "received_events_url": "https://api.github.com/users/mattip/received_events",
        "repos_url": "https://api.github.com/users/mattip/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mattip"
    }
}