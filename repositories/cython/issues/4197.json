{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "I would like to start working on [HPy](https://hpyproject.org/) support for cython. At the end, I would like to be able to output code something like the code below, where the significant changes are\r\n- `#include \"hpy.h\"` not `#include \"Python.h\"` (in the default mode, `hpy.h` pulls in `Python.h`, in the universal mode it does not)\r\n- Module init is now `HPy_MODINIT...`\r\n- There is support (in the default mode) for \"legacy\" c-api functions. \r\n\r\nIn default mode the end result for CPython is a c-extension module that is almost equivalent to a non-HPy one: clever use of C macros should generate pretty much the same preprocessed code. Now the questions:\r\n\r\n1. I think it makes sense to add a `@cython.hpy` decorator in order to provide a migration path as HPy is not complete yet. Also there may be optimizations Cython can do with legacy code, so users might want to stay with mixed modules for a while. Adding such a decorator would modify the module `init`, and would allow for mixed modules.\r\n\r\n2. Currently, the approach to multi-mode cython code (like `limited_api`) has been to add C-level macros to switch on and off different behaviour. Then the c code is generated once, and users can toggle behaviour at compile time. I think HPy should do something different and generate different C code if it is turned on. This means there should be a global \"in HPy mode\" flag as well as a \"HPy\" Node attribute.\r\n\r\n3. For now I will only attempt to support the default mode. Universal mode will be a future enhancement since it does not support legacy code.\r\n\r\nDoes this approach (using decorators, generating different C code, global HPy and Node-level HPy attributes) make sense?\r\n\r\n<details>\r\n\r\n```\r\n#include \"hpy.h\"\r\n\r\n/* a HPy style function */\r\nHPyDef_METH(add_ints, \"add_ints\", add_ints_impl, HPyFunc_VARARGS)\r\nstatic HPy add_ints_impl(HPyContext *ctx, HPy self, HPy *args, HPy_ssize_t nargs)\r\n{\r\n    long a, b;\r\n    if (!HPyArg_Parse(ctx, NULL, args, nargs, \"ll\", &a, &b))\r\n        return HPy_NULL;\r\n    return HPyLong_FromLong(ctx, a+b);\r\n}\r\n\r\n\r\n/* A old-style function */\r\nstatic PyObject *\r\nadd_ints2(PyObject *self, PyObject *args)\r\n{\r\n\r\n    long a, b, ret;\r\n    if (!PyArg_ParseTuple(args, \"ll\", &a, &b))\r\n        return NULL;\r\n    ret = a + b;\r\n    return PyLong_FromLong(ret);\r\n}\r\n\r\nstatic HPyDef *hpy_defines[] = {\r\n    &add_ints,\r\n    NULL\r\n};\r\n\r\nstatic PyMethodDef py_defines[] = {\r\n    {\"add_ints_legacy\", add_ints2, METH_VARARGS, \"add two ints\"},\r\n    {NULL, NULL, 0, NULL}    /* Sentinel */\r\n};\r\n\r\nstatic HPyModuleDef moduledef = {\r\n    HPyModuleDef_HEAD_INIT,\r\n    .m_name = \"simple\",\r\n    .m_doc = \"HPy Example\",\r\n    .m_size = -1,\r\n    .defines = hpy_defines,\r\n    .legacy_methods = py_defines\r\n};\r\n\r\n\r\nHPy_MODINIT(simple)\r\nstatic HPy init_simple_impl(HPyContext *ctx)\r\n{\r\n    HPy m;\r\n    m = HPyModule_Create(ctx, &moduledef);\r\n    if (HPy_IsNull(m))\r\n        return HPy_NULL;\r\n    return m;\r\n}\r\n\r\n```",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "> Universal mode will be a future enhancement since it does not support legacy code.\r\n\r\nthat's not the case. You can fully use `legacy_methods` and `legacy_slots` even in universal mode",
            "created_at": "2021-05-27T10:02:48Z",
            "html_url": "https://github.com/cython/cython/issues/4197#issuecomment-849505519",
            "id": 849505519,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4197",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTUwNTUxOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/849505519/reactions"
            },
            "updated_at": "2021-05-27T10:02:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/849505519",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/344507?v=4",
                "events_url": "https://api.github.com/users/antocuni/events{/privacy}",
                "followers_url": "https://api.github.com/users/antocuni/followers",
                "following_url": "https://api.github.com/users/antocuni/following{/other_user}",
                "gists_url": "https://api.github.com/users/antocuni/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antocuni",
                "id": 344507,
                "login": "antocuni",
                "node_id": "MDQ6VXNlcjM0NDUwNw==",
                "organizations_url": "https://api.github.com/users/antocuni/orgs",
                "received_events_url": "https://api.github.com/users/antocuni/received_events",
                "repos_url": "https://api.github.com/users/antocuni/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antocuni/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antocuni/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antocuni"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the clarification.\r\n\r\nHere is the python code that I want to generate that C file\r\n```\r\n@cython.hpy\r\ndef add_ints(a: int, b: int):\r\n    return a + b\r\n\r\ndef add_ints_legacy(a:int, b:int):\r\n    return a + b\r\n```\r\n",
            "created_at": "2021-05-27T10:07:41Z",
            "html_url": "https://github.com/cython/cython/issues/4197#issuecomment-849508701",
            "id": 849508701,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4197",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTUwODcwMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/849508701/reactions"
            },
            "updated_at": "2021-05-27T10:07:41Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/849508701",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
                "events_url": "https://api.github.com/users/mattip/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattip/followers",
                "following_url": "https://api.github.com/users/mattip/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattip",
                "id": 823911,
                "login": "mattip",
                "node_id": "MDQ6VXNlcjgyMzkxMQ==",
                "organizations_url": "https://api.github.com/users/mattip/orgs",
                "received_events_url": "https://api.github.com/users/mattip/received_events",
                "repos_url": "https://api.github.com/users/mattip/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattip"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> * Currently, the approach to multi-mode cython code (like `limited_api`) has been to add C-level macros to switch on and off different behaviour. Then the c code is generated once, and users can toggle behaviour at compile time. I think HPy should do something different and generate different C code if it is turned on. This means there should be a global \"in HPy mode\" flag as well as a \"HPy\" Node attribute.\r\n\r\nI was in favour of this - on the basis that:\r\n1. trying to do this with macros might end up being one step too far in terms of complexity/code-size etc.\r\n2. It provides a nicer way to have partial support (i.e. we can flag features that we don't yet support at compile-time rather than runtime)\r\n3. getting some sort of \"different backend\" implementation in place might help support other, more esoteric Python implementations in future that aren't possible to do with macros\r\n\r\nOne option might be a \"Cython/Compiler/HPy/ExprNodes.py\" that duplicates the nodes contained in the regular ExprNodes. These would likely only have to support the code generation parts (since everything up the code generation steps could probably be done with regular ExprNodes). The final pipeline step could be a ParseTreeTransform to swap out the ExprNodes for the HPy/ExprNodes as needed (you can use an `EnvTransform` to get the active compiler directives I think).\r\n\r\nI'm sure that's not the only way of doing it so feel free to suggest better options!\r\n\r\n> * I think it makes sense to add a `@cython.hpy` decorator in order to provide a migration path as HPy is not complete yet. Also there may be optimizations Cython can do with legacy code, so users might want to stay with mixed modules for a while. Adding such a decorator would modify the module `init`, and would allow for mixed modules.\r\n\r\nI think the makes sense as a way to make progress and implement it piece-by-piece (I'm less convinced that mixed hpy + C API modules are a useful feature long-term. But I could be wrong). Obviously the need for module init code that handles mixed modules is an added complication. Things like ModuleSetupCode.c are currently included unconditionally, and you may have to split them up a bit and include parts conditionally to make it work.",
            "created_at": "2021-05-27T17:14:27Z",
            "html_url": "https://github.com/cython/cython/issues/4197#issuecomment-849801737",
            "id": 849801737,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4197",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTgwMTczNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/849801737/reactions"
            },
            "updated_at": "2021-05-27T17:14:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/849801737",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the comments.\r\n> The final pipeline step could be a ParseTreeTransform to swap out the ExprNodes for the HPy/ExprNodes\r\n\r\nSeems reasonable, and would save \"if hpy:\" conditionals for code generation inside each node. Although the condition must be checked at some point if only to swap the nodes. I may start with the internal conditionals, and then refactor once I get an idea what is involved.\r\n\r\n> Things like ModuleSetupCode.c are currently included unconditionally ...\r\n\r\nMy current idea is that a `hpy` decorator on a function, class, or cclass will percolate `hpy=True` out to the ModuleNode which will trigger a different path through the code that spits out the relevant part of `ModuleSetupCode.c`. I hope it is not to messy. The decorator will also percolate down to all the child nodes.",
            "created_at": "2021-05-28T04:14:20Z",
            "html_url": "https://github.com/cython/cython/issues/4197#issuecomment-850117082",
            "id": 850117082,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4197",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDExNzA4Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/850117082/reactions"
            },
            "updated_at": "2021-05-28T04:14:20Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/850117082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
                "events_url": "https://api.github.com/users/mattip/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattip/followers",
                "following_url": "https://api.github.com/users/mattip/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattip",
                "id": 823911,
                "login": "mattip",
                "node_id": "MDQ6VXNlcjgyMzkxMQ==",
                "organizations_url": "https://api.github.com/users/mattip/orgs",
                "received_events_url": "https://api.github.com/users/mattip/received_events",
                "repos_url": "https://api.github.com/users/mattip/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattip"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">2. Currently, the approach to multi-mode cython code (like\n>`limited_api`) has been to add C-level macros to switch on and off\n>different behaviour. Then the c code is generated once, and users can\n>toggle behaviour at compile time. I think HPy should do something\n>different and generate different C code if it is turned on. This means\n>there should be a global \"in HPy mode\" flag as well as a \"HPy\" Node\n>attribute.\n\nIMHO, we should avoid this, if at all possible. C files compress well, so their size is uninteresting. Why generate more than one file if we can continue to provide users with the \"generate once, compile everywhere\" experience?\n\nI would like to have one C file that automatically switches to HPy mode when compiled against PyPy, for example. Users shouldn't have to care about this (but should get the usual C switch in their hands to control it if they want.)\n\nStefan\n",
            "created_at": "2021-05-28T11:05:44Z",
            "html_url": "https://github.com/cython/cython/issues/4197#issuecomment-850339911",
            "id": 850339911,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4197",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDMzOTkxMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/850339911/reactions"
            },
            "updated_at": "2021-05-28T11:05:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/850339911",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I would like to have one C file that automatically switches to HPy mode when compiled against PyPy, for example. \r\n\r\nThis is how HPy works. The HPy-stye code in the file I attached in the top comment will actually compile with no extra overhead into CPython C-API code on CPython, and into PyPy-friendly code on PyPy. There may be a few caveats, but that is the goal explicitly mentioned in the HPy documentation.",
            "created_at": "2021-05-29T20:07:27Z",
            "html_url": "https://github.com/cython/cython/issues/4197#issuecomment-850891638",
            "id": 850891638,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4197",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDg5MTYzOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/850891638/reactions"
            },
            "updated_at": "2021-05-29T20:07:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/850891638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
                "events_url": "https://api.github.com/users/mattip/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattip/followers",
                "following_url": "https://api.github.com/users/mattip/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattip",
                "id": 823911,
                "login": "mattip",
                "node_id": "MDQ6VXNlcjgyMzkxMQ==",
                "organizations_url": "https://api.github.com/users/mattip/orgs",
                "received_events_url": "https://api.github.com/users/mattip/received_events",
                "repos_url": "https://api.github.com/users/mattip/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattip"
            }
        },
        {
            "author_association": "NONE",
            "body": "I think that @scoder is suggesting to to generate a single big C files which contains BOTH versions (one which is python.h only and one which includes hpy.h), and that you select which one to use by passing the appropriate -D flag to gcc.\r\n\r\nFrom the hpy point of view this approach would work. From the cython point of view i don't know which one would be simpler",
            "created_at": "2021-05-29T20:30:16Z",
            "html_url": "https://github.com/cython/cython/issues/4197#issuecomment-850894460",
            "id": 850894460,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4197",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDg5NDQ2MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/850894460/reactions"
            },
            "updated_at": "2021-05-29T20:30:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/850894460",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/344507?v=4",
                "events_url": "https://api.github.com/users/antocuni/events{/privacy}",
                "followers_url": "https://api.github.com/users/antocuni/followers",
                "following_url": "https://api.github.com/users/antocuni/following{/other_user}",
                "gists_url": "https://api.github.com/users/antocuni/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antocuni",
                "id": 344507,
                "login": "antocuni",
                "node_id": "MDQ6VXNlcjM0NDUwNw==",
                "organizations_url": "https://api.github.com/users/antocuni/orgs",
                "received_events_url": "https://api.github.com/users/antocuni/received_events",
                "repos_url": "https://api.github.com/users/antocuni/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antocuni/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antocuni/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antocuni"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'd welcome extensions to produce an HPy backend. I too would prefer generating a single `.c` file with both modes, continuing to use macros to target different backends. I think this would be both simpler (and less invasive, and easier to ensure semantics don't diverge) to implement, as well as better for users.",
            "created_at": "2021-05-31T18:52:49Z",
            "html_url": "https://github.com/cython/cython/issues/4197#issuecomment-851635768",
            "id": 851635768,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4197",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTYzNTc2OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/851635768/reactions"
            },
            "updated_at": "2021-05-31T18:52:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/851635768",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "NONE",
            "body": "Has there been any progress on this?",
            "created_at": "2021-11-15T17:59:11Z",
            "html_url": "https://github.com/cython/cython/issues/4197#issuecomment-969171244",
            "id": 969171244,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/4197",
            "node_id": "IC_kwDOABDGAc45xGEs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/969171244/reactions"
            },
            "updated_at": "2021-11-15T17:59:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/969171244",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/22740616?v=4",
                "events_url": "https://api.github.com/users/ShadowJonathan/events{/privacy}",
                "followers_url": "https://api.github.com/users/ShadowJonathan/followers",
                "following_url": "https://api.github.com/users/ShadowJonathan/following{/other_user}",
                "gists_url": "https://api.github.com/users/ShadowJonathan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ShadowJonathan",
                "id": 22740616,
                "login": "ShadowJonathan",
                "node_id": "MDQ6VXNlcjIyNzQwNjE2",
                "organizations_url": "https://api.github.com/users/ShadowJonathan/orgs",
                "received_events_url": "https://api.github.com/users/ShadowJonathan/received_events",
                "repos_url": "https://api.github.com/users/ShadowJonathan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ShadowJonathan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ShadowJonathan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ShadowJonathan"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4197/comments",
    "created_at": "2021-05-27T09:47:15Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-05-27T12:18:13Z",
            "event": "subscribed",
            "id": 4805411801,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4MDU0MTE4MDE=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4805411801"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-05-29T20:30:16Z",
            "event": "mentioned",
            "id": 4816413745,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDgxNjQxMzc0NQ==",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4816413745"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2021-05-29T20:30:16Z",
            "event": "subscribed",
            "id": 4816413746,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4MTY0MTM3NDY=",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/4816413746"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/4197/events",
    "html_url": "https://github.com/cython/cython/issues/4197",
    "id": 903482679,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/4197/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5MDM0ODI2Nzk=",
    "number": 4197,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 2,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/cython/cython/issues/4197/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/4197/timeline",
    "title": "[ENH] Preliminary support for HPy",
    "updated_at": "2021-11-15T17:59:11Z",
    "url": "https://api.github.com/repos/cython/cython/issues/4197",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
        "events_url": "https://api.github.com/users/mattip/events{/privacy}",
        "followers_url": "https://api.github.com/users/mattip/followers",
        "following_url": "https://api.github.com/users/mattip/following{/other_user}",
        "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mattip",
        "id": 823911,
        "login": "mattip",
        "node_id": "MDQ6VXNlcjgyMzkxMQ==",
        "organizations_url": "https://api.github.com/users/mattip/orgs",
        "received_events_url": "https://api.github.com/users/mattip/received_events",
        "repos_url": "https://api.github.com/users/mattip/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mattip"
    }
}