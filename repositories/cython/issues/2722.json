{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Opening this issue to discuss how Cython handles reference stealing. Have noted that some functions account for this by returning `PyObject*` instead of `object`. However with arguments this strategy [doesn't seem to work correctly]( https://stackoverflow.com/q/41925500 ). Namely the `PyObject*` will still result in the `object`'s reference count decremented and may require an explicit cast. Given this, am raising this issue to figure out how we should handle cases where the reference is stolen. This comes up with some Python and NumPy API functions that have this behavior (e.g. in-place operations and macros).",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Good question. :) Let me collect a couple of thoughts on this.\r\n\r\nFirst of all, regarding the examples at hand, the obvious solution for users is to not use `PyList_SetItem(lst, i, obj)` but `lst[i] = obj`. For a typed list, Cython can optimise the latter but not the first (so the assignment is likely faster than the C-API call), and the code readability also suffers a lot from such misoptimisations.\r\n\r\nThen, it feels to me like this is not really a bug in Cython, because Cython does the right thing, seen from the point of the caller. It's the function itself that misbehaves, in a way. It is still a usability issue, because Cython can't help with this kind of contract and does not guard against accidental misuse.\r\n\r\nChanging the argument type would be a signal to the user that something unusual is going on, and that it's up to the user to take care of it. It's not perfect, because `PyObject*` is just a clumsy way to say `object`, and users could just replace `func(obj)` with `func(<PyObject*>obj)` to make it compile again, but not a single bit safer. It would raise the bar, at least. But it's also something that will be difficult to get away from again if we later decide that we want Cython to be more helpful.\r\n\r\nBut then, what could Cython do? Automatically increase the reference count of the argument when it gets passed? That would go against the intention of these functions, which specifically want to avoid useless reference counting.\r\n\r\nWhat Cython could do is to set the reference to `NULL` after the call (without decrefing it) and then generating NULL checking code wherever necessary when the variable is used. Note that the call might happen inside of a loop, if-block, try-except/finally and whatnot, and the variable might also be part of a closure, so further usage might happen in various places. We have a mechanism for this, it's used for closure variables, since they may or may not have been initialised in other places that use it. But it also increases the runtime overhead, meaning that calling a function on a variable could introduce totally unpredictable slow downs in other parts of the code. Not great at all.\r\n\r\nPersonally, I think we'd be better off entirely without such functions. They are just too error prone by design.\r\n\r\nI'd be happy to hear other thoughts on this, but could live with just raising the bar for users of such functions by requiring an explicit cast to make them aware that they are on their own.",
            "created_at": "2018-11-16T17:01:27Z",
            "html_url": "https://github.com/cython/cython/issues/2722#issuecomment-439458739",
            "id": 439458739,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2722",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ1ODczOQ==",
            "updated_at": "2018-11-16T17:01:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/439458739",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I agree that all reference-stealing function should be marked with a large warning. \r\n\r\nThe problem is that there's not really a \"correct\" way to indicate this with argument types as the way to \"properly\" use these functions is all about what you do (or don't do) after passing the argument. This makes it hard (impossible?) to check via types. \r\n\r\nIt's worth noting that there is a certain convenience here for writing against the raw C API, as one can pass new references to these functions without worrying about cleaning them up. Increfing before the call might not be that bad (and try to optimize it away if it matters). ",
            "created_at": "2018-11-16T22:19:00Z",
            "html_url": "https://github.com/cython/cython/issues/2722#issuecomment-439546568",
            "id": 439546568,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2722",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTU0NjU2OA==",
            "updated_at": "2018-11-16T22:19:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/439546568",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I added more visible warnings to the functions in 9d2ae85b2b5ae36deb68132152a56437e5cf9615, although I doubt that many people will read those, if they didn't even see the big grey boxes in the CPython docs.\r\n\r\nI think, in the end, users who directly call C-API functions are on their own and should better be knowing what they are doing. (Which doesn't mean that we can't find a way to deal with this general issue in Cython in some way, so I'll leave this ticket open.)",
            "created_at": "2020-05-07T11:30:38Z",
            "html_url": "https://github.com/cython/cython/issues/2722#issuecomment-625198386",
            "id": 625198386,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2722",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTE5ODM4Ng==",
            "updated_at": "2020-05-07T11:30:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625198386",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2722/comments",
    "created_at": "2018-11-16T16:02:37Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2722/events",
    "html_url": "https://github.com/cython/cython/issues/2722",
    "id": 381660301,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2722/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzODE2NjAzMDE=",
    "number": 2722,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Reference stealing",
    "updated_at": "2020-05-07T11:30:38Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2722",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4",
        "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
        "followers_url": "https://api.github.com/users/jakirkham/followers",
        "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
        "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jakirkham",
        "id": 3019665,
        "login": "jakirkham",
        "node_id": "MDQ6VXNlcjMwMTk2NjU=",
        "organizations_url": "https://api.github.com/users/jakirkham/orgs",
        "received_events_url": "https://api.github.com/users/jakirkham/received_events",
        "repos_url": "https://api.github.com/users/jakirkham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jakirkham"
    }
}