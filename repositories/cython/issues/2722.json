{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Opening this issue to discuss how Cython handles reference stealing. Have noted that some functions account for this by returning `PyObject*` instead of `object`. However with arguments this strategy [doesn't seem to work correctly]( https://stackoverflow.com/q/41925500 ). Namely the `PyObject*` will still result in the `object`'s reference count decremented and may require an explicit cast. Given this, am raising this issue to figure out how we should handle cases where the reference is stolen. This comes up with some Python and NumPy API functions that have this behavior (e.g. in-place operations and macros).",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Good question. :) Let me collect a couple of thoughts on this.\r\n\r\nFirst of all, regarding the examples at hand, the obvious solution for users is to not use `PyList_SetItem(lst, i, obj)` but `lst[i] = obj`. For a typed list, Cython can optimise the latter but not the first (so the assignment is likely faster than the C-API call), and the code readability also suffers a lot from such misoptimisations.\r\n\r\nThen, it feels to me like this is not really a bug in Cython, because Cython does the right thing, seen from the point of the caller. It's the function itself that misbehaves, in a way. It is still a usability issue, because Cython can't help with this kind of contract and does not guard against accidental misuse.\r\n\r\nChanging the argument type would be a signal to the user that something unusual is going on, and that it's up to the user to take care of it. It's not perfect, because `PyObject*` is just a clumsy way to say `object`, and users could just replace `func(obj)` with `func(<PyObject*>obj)` to make it compile again, but not a single bit safer. It would raise the bar, at least. But it's also something that will be difficult to get away from again if we later decide that we want Cython to be more helpful.\r\n\r\nBut then, what could Cython do? Automatically increase the reference count of the argument when it gets passed? That would go against the intention of these functions, which specifically want to avoid useless reference counting.\r\n\r\nWhat Cython could do is to set the reference to `NULL` after the call (without decrefing it) and then generating NULL checking code wherever necessary when the variable is used. Note that the call might happen inside of a loop, if-block, try-except/finally and whatnot, and the variable might also be part of a closure, so further usage might happen in various places. We have a mechanism for this, it's used for closure variables, since they may or may not have been initialised in other places that use it. But it also increases the runtime overhead, meaning that calling a function on a variable could introduce totally unpredictable slow downs in other parts of the code. Not great at all.\r\n\r\nPersonally, I think we'd be better off entirely without such functions. They are just too error prone by design.\r\n\r\nI'd be happy to hear other thoughts on this, but could live with just raising the bar for users of such functions by requiring an explicit cast to make them aware that they are on their own.",
            "created_at": "2018-11-16T17:01:27Z",
            "html_url": "https://github.com/cython/cython/issues/2722#issuecomment-439458739",
            "id": 439458739,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2722",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQ1ODczOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/439458739/reactions"
            },
            "updated_at": "2018-11-16T17:01:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/439458739",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I agree that all reference-stealing function should be marked with a large warning. \r\n\r\nThe problem is that there's not really a \"correct\" way to indicate this with argument types as the way to \"properly\" use these functions is all about what you do (or don't do) after passing the argument. This makes it hard (impossible?) to check via types. \r\n\r\nIt's worth noting that there is a certain convenience here for writing against the raw C API, as one can pass new references to these functions without worrying about cleaning them up. Increfing before the call might not be that bad (and try to optimize it away if it matters). ",
            "created_at": "2018-11-16T22:19:00Z",
            "html_url": "https://github.com/cython/cython/issues/2722#issuecomment-439546568",
            "id": 439546568,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2722",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTU0NjU2OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/439546568/reactions"
            },
            "updated_at": "2018-11-16T22:19:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/439546568",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I added more visible warnings to the functions in 9d2ae85b2b5ae36deb68132152a56437e5cf9615, although I doubt that many people will read those, if they didn't even see the big grey boxes in the CPython docs.\r\n\r\nI think, in the end, users who directly call C-API functions are on their own and should better be knowing what they are doing. (Which doesn't mean that we can't find a way to deal with this general issue in Cython in some way, so I'll leave this ticket open.)",
            "created_at": "2020-05-07T11:30:38Z",
            "html_url": "https://github.com/cython/cython/issues/2722#issuecomment-625198386",
            "id": 625198386,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2722",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTE5ODM4Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/625198386/reactions"
            },
            "updated_at": "2020-05-07T11:30:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/625198386",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Not sure if continuing here is the best approach. If not I can open a new issue.\r\n\r\nJust encountered this behavior on 3.0.5 when using `PyList_New`.\r\n\r\nI think at the very least the fact that cython does not automatically increases the reference when calling functions that steal a reference could be documented (searching for `steal` or `PyList_SetItem` in the website yields no result, not sure if it's under other keywords)\r\n \r\n> First of all, regarding the examples at hand, the obvious solution for users is to not use PyList_SetItem(lst, i, obj) but lst[i] = obj. For a typed list, Cython can optimise the latter but not the first (so the assignment is likely faster than the C-API call), and the code readability also suffers a lot from such misoptimisations.\r\n\r\nUsing `lst[i] = obj` seems to not be an option in this case, since it segfault either way. In the example below `call_with_setitem` works correctly once Py_INCREF is added, while `call_with_assign` segfault either way\r\n\r\n```cython\r\nfrom cpython.list cimport PyList_New, PyList_SetItem\r\nfrom cpython.ref cimport Py_INCREF\r\n\r\ncdef list with_setitem(int num):\r\n    cdef list res = PyList_New(num)\r\n    cdef Py_ssize_t i\r\n    for i in range(num):\r\n        y = int(i*i)\r\n        Py_INCREF(y)\r\n        PyList_SetItem(res, i, y)\r\n    return res\r\n\r\ndef call_with_setitem(value):\r\n    return with_setitem(value)\r\n\r\ncdef list with_assign(int num):\r\n    cdef list res = PyList_New(num)\r\n    cdef Py_ssize_t i\r\n    for i in range(num):\r\n        y = int(i*i)\r\n        Py_INCREF(y)\r\n        res[i] = y # segfault with or without Py_INCREF\r\n    return res\r\n\r\ndef call_with_assign(value):\r\n    return with_assign(value)\r\n```",
            "created_at": "2023-11-26T22:17:30Z",
            "html_url": "https://github.com/cython/cython/issues/2722#issuecomment-1826913090",
            "id": 1826913090,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2722",
            "node_id": "IC_kwDOABDGAc5s5HtC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1826913090/reactions"
            },
            "updated_at": "2023-11-26T22:17:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1826913090",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/16175304?v=4",
                "events_url": "https://api.github.com/users/CaselIT/events{/privacy}",
                "followers_url": "https://api.github.com/users/CaselIT/followers",
                "following_url": "https://api.github.com/users/CaselIT/following{/other_user}",
                "gists_url": "https://api.github.com/users/CaselIT/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/CaselIT",
                "id": 16175304,
                "login": "CaselIT",
                "node_id": "MDQ6VXNlcjE2MTc1MzA0",
                "organizations_url": "https://api.github.com/users/CaselIT/orgs",
                "received_events_url": "https://api.github.com/users/CaselIT/received_events",
                "repos_url": "https://api.github.com/users/CaselIT/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/CaselIT/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/CaselIT/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/CaselIT"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Recognize this may be an illustrative example for a more complex use case. That said, it can be worth considering generator expressions with `list`s where Cython often generates the performant code that is desired while allowing for arguably better readability for future devs. Of course this may or may not be possible depending on the code in practice\n\n```cython\ncdef list with_gen(Py_ssize_t n):\n    cdef Py_ssize_t i\n    cdef list res = [i*i for i in range(n)]\n    return res\n```\n\nSide note: Typed the function's input argument to match the looping variable",
            "created_at": "2023-11-27T00:50:59Z",
            "html_url": "https://github.com/cython/cython/issues/2722#issuecomment-1826970652",
            "id": 1826970652,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2722",
            "node_id": "IC_kwDOABDGAc5s5Vwc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1826970652/reactions"
            },
            "updated_at": "2023-11-27T00:50:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1826970652",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
                "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakirkham/followers",
                "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakirkham",
                "id": 3019665,
                "login": "jakirkham",
                "node_id": "MDQ6VXNlcjMwMTk2NjU=",
                "organizations_url": "https://api.github.com/users/jakirkham/orgs",
                "received_events_url": "https://api.github.com/users/jakirkham/received_events",
                "repos_url": "https://api.github.com/users/jakirkham/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakirkham"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Using `lst[i] = obj` seems to not be an option in this case, since it segfault either way.\r\n\r\nThat is because you are creating a list in an invalid state using `PyList_New()`. It returns a list with an empty array (all `NULL` values), so you cannot fill that list with normal Python operations. If you decide to use `PyList_New()` yourself, you have to go all the way and fill the list using corresponding C-API functions. And for that, you have to read their documentation.\r\n\r\nI second the suggestion that a list comprehension is probably fast enough in most cases. If you really find that it isn't, then Cython allows you to use the C-API instead, but you have to take care yourself to use it correctly.\r\n\r\nAs I wrote in my first comment above, it's really not easy for Cython to guess your intentions here, and guessing always makes the behaviour less predictable.",
            "created_at": "2023-11-27T08:12:58Z",
            "html_url": "https://github.com/cython/cython/issues/2722#issuecomment-1827334239",
            "id": 1827334239,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2722",
            "node_id": "IC_kwDOABDGAc5s6uhf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1827334239/reactions"
            },
            "updated_at": "2023-11-27T08:12:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1827334239",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It'd possibly be useful to provide something like `cython.steal` so you could do\r\n\r\n```\r\ncdef list with_setitem(int num):\r\n    cdef list res = PyList_New(num)\r\n    cdef Py_ssize_t i\r\n    for i in range(num):\r\n        y = int(i*i)\r\n        PyList_SetItem(res, i, cython.steal(y))\r\n    return res\r\n```\r\n\r\nIt'd effectively just do `del y` but without the decref (i.e. set the pointer to 0 and let Cython's flow control know that it no longer exists), which would let people that want to write manual code use a bit less reference counting.",
            "created_at": "2023-11-27T08:35:28Z",
            "html_url": "https://github.com/cython/cython/issues/2722#issuecomment-1827363706",
            "id": 1827363706,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2722",
            "node_id": "IC_kwDOABDGAc5s61t6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1827363706/reactions"
            },
            "updated_at": "2023-11-27T08:35:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1827363706",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "author_association": "NONE",
            "body": "> As I wrote in my first comment above, it's really not easy for Cython to guess your intentions here, and guessing always makes the behaviour less predictable.\r\n\r\nI completely agree, but I believe that the documentation does a poor job of indicating this.\r\nIt may be obvious for experienced users but for less experienced ones is not clear and searching the documentation does not offer any indication regarding this",
            "created_at": "2023-11-27T09:45:34Z",
            "html_url": "https://github.com/cython/cython/issues/2722#issuecomment-1827485373",
            "id": 1827485373,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2722",
            "node_id": "IC_kwDOABDGAc5s7Ta9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/1827485373/reactions"
            },
            "updated_at": "2023-11-27T09:45:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/1827485373",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/16175304?v=4",
                "events_url": "https://api.github.com/users/CaselIT/events{/privacy}",
                "followers_url": "https://api.github.com/users/CaselIT/followers",
                "following_url": "https://api.github.com/users/CaselIT/following{/other_user}",
                "gists_url": "https://api.github.com/users/CaselIT/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/CaselIT",
                "id": 16175304,
                "login": "CaselIT",
                "node_id": "MDQ6VXNlcjE2MTc1MzA0",
                "organizations_url": "https://api.github.com/users/CaselIT/orgs",
                "received_events_url": "https://api.github.com/users/CaselIT/received_events",
                "repos_url": "https://api.github.com/users/CaselIT/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/CaselIT/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/CaselIT/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/CaselIT"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2722/comments",
    "created_at": "2018-11-16T16:02:37Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2722/events",
    "html_url": "https://github.com/cython/cython/issues/2722",
    "id": 381660301,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2722/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzODE2NjAzMDE=",
    "number": 2722,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/2722/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/2722/timeline",
    "title": "Reference stealing",
    "updated_at": "2023-11-27T09:45:34Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2722",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
        "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
        "followers_url": "https://api.github.com/users/jakirkham/followers",
        "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
        "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jakirkham",
        "id": 3019665,
        "login": "jakirkham",
        "node_id": "MDQ6VXNlcjMwMTk2NjU=",
        "organizations_url": "https://api.github.com/users/jakirkham/orgs",
        "received_events_url": "https://api.github.com/users/jakirkham/received_events",
        "repos_url": "https://api.github.com/users/jakirkham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jakirkham"
    }
}