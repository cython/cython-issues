{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Is your feature request related to a problem? Please describe.\n\nIt would be nice to see some different functions in the cython compiler modules being annotated to improve the workflow of code. One of the biggest problems I've had with adding in new features to the compiler has been the lack of typehint support. Since Python 2.7 is not supported anymore annotating these variables and checking the compiler code with mypy or other linters would improve the overall workflow as well as possibly optimizing the current compiler. \n\nOne of the reasons I ended my pull request with making [stubfile generator](https://github.com/cython/cython/pull/5744) was because of the fact that pyright and other linters would not tell me what variables certain Compiler Nodes were being carried around with it and to add to this deadly confusion the public pressure to get this in was not helping.\n\n### Describe the solution you'd like.\n\nAdding changes to the compiler as well as adding typehints or even Cython's typehints and annotating functions with what kinds of objects different nodes are carrying would help to improve the code as well as help newcomers contribute to cython and learn how the compiler ultimately works. \n\nHere I have an example of some cython code that would benefit from making these changes utlimately prevent the spread of spaghetti code.\n```python\n\n# for the sake of demonstration purposes Lets take a smaller function that might benefit from having readability\ndef check_c_declarations_pxd(module_node):\n    module_node.scope.check_c_classes_pxd()\n    return module_node\n\n# you'll notice one of the glaring problems with it would be that the module_node has not been properly annotated \n# And a tool such as mypy or pyright will not be able to tell you what kind of scope it's carrying. \n# This could become a problem for someone who might want to learn how the compiler works.\n# The way we could start fixing this code is by having MoudleNode annotated inside this function.\n\n# We can use double quotes around ModuleNode to define it if it's being defined later \ndef check_c_declarations_pxd(module_node: \"ModuleNode\") -> \"ModuleNode\":\n    # we could also annotate the scope variable in one of our nodes to figure out what kind of \n    # scope is being utilized to further verify if the scope can make this call or not\n    module_node.scope.check_c_classes_pxd()\n    return module_node\n```\nIn fact using cython's pure python approach on these could be beneficial when it comes to speeding up the compiler as well especially in the messier areas of the code.\n\n\n### Describe alternatives you've considered.\n\nFor now as an alternative approach I'm planning on generating stubfiles for many files such as the Symtab module to help me enhance the readability for linters to figure out what the code is doing. Incase this request gets rejected I can always make a separate pypi package for doing all of this so that maybe I could save some people a few burdens when contributing to this project.\n\n\n### Additional context\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "We do now have some annotations in Cython (but not many). We haven't wanted to encourage people to do enormous PRs adding annotations everywhere, but we're happy to add them as code is worked on. Perhaps we should speed some of that process up?\n\nPersonally I'm not a big believer in any annotation more complex that (e.g.) `list[int]` - I think the more complex ones rapidly become unreadable, and usually aren't even \"right\". With that said, most of what we do could be annotated quite simply.\n\nThe other thing that was mentioned last time - a lot of the typing in Cython is pretty implicit. e.g. `def visit_NameNode(self, node)` - the type of `node` here is hopefully obvious from the context. Similarly, variables called `env` are inevitably a `Scope` and `code` is inevitably a `Code` so typing these doesn't add a lot of extra information (although might help the IDE a little).",
            "created_at": "2025-05-13T07:51:23Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-2875422534",
            "id": 2875422534,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6rY3dG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2875422534/reactions"
            },
            "updated_at": "2025-05-13T07:51:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2875422534",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@da-woods Gald to see you guys are at least willing accept these ideas with open arms and I would be happy to work on it since I have a lot of time on hand. Before I get started I do have a question.\n\n> The other thing that was mentioned last time - a lot of the typing in Cython is pretty implicit. e.g. `def visit_NameNode(self, node)` - the type of `node` here is hopefully obvious from the context. Similarly, variables called `env` are inevitably a `Scope` and `code` is inevitably a `Code` so typing these doesn't add a lot of extra information (although might help the IDE a little).\n\nIs it possible for me to use `from __future__ import annotations` so that I can introduce pipe styled type unions to hopefully keep the code a bit cleaner since I know that one of your concerns is readability? \n\n\n",
            "created_at": "2025-05-13T17:41:32Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-2877437530",
            "id": 2877437530,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6rgjZa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2877437530/reactions"
            },
            "updated_at": "2025-05-13T17:48:10Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2877437530",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I have one point regarding the typing in Cython. I think that biggest drawback typing in Cython is that they are not checked in any way. I think that it will be easy to have typings wrong after some time. Unfortunately, typing verifiers like mypy requires to have large portion of code base typed which is kind of difficult in Cython. I am not sure whether there is an alternative to it viable for us...\n\n\n> Is it possible for me to use from __future__ import annotations\n\nMy humble opinion is that yes.",
            "created_at": "2025-05-13T19:32:15Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-2877715787",
            "id": 2877715787,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6rhnVL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2877715787/reactions"
            },
            "updated_at": "2025-05-13T19:32:25Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2877715787",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes - agree with @matusvalo that unchecked type annotations risk becoming untrue. (And checked type annotations tend to force you to make code changes to fit with mypy)\n\nI'm also OK with the `__future__`. Although union types are about the point when I start to think \"this is getting noisy, just use duck-typing\". (Except for `x | None`, which is pretty clear)",
            "created_at": "2025-05-14T07:09:34Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-2878968997",
            "id": 2878968997,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6rmZSl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2878968997/reactions"
            },
            "updated_at": "2025-05-14T07:09:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2878968997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Rather than annotating the source modules directly, would an alternative be to create either (a) `.pyi` stub files which live alongside the `.py` sources, or (b) a separately-distributed [partial stub package](https://typing.python.org/en/latest/spec/distributing.html#partial-stub-packages) for Cython? This should alleviate several concerns:\n\n1. \"Some people find complex type annotations unreadable\" - not an issue anymore since the typing information is in `.pyi` files\n2. \"Type annotations fulfilling mypy/pyright/etc. don't work the same way as Cython for the purposes of compilation in pure Python mode\" - not an issue anymore, same reason as (1).\n3. \"Checked type annotations force you to change code to fit with mypy\" - not an issue anymore, same reason as (1). This is because stubs don't include function bodies, so only function/method signatures and module/class attributes need to be annotated.\n4. \"Unchecked type annotations will eventually diverge from implementation and risk becoming untrue\" - mostly alleviated by using [stubtest](https://mypy.readthedocs.io/en/stable/stubtest.html), which is part of the typeshed CI workflow for checking stubs against the Python runtime for both the standard library and third-party packages. See the appropriate sections in [typeshed/CONTRIBUTING.md](https://github.com/python/typeshed/blob/main/CONTRIBUTING.md) and [typeshed/tests/README.md](https://github.com/python/typeshed/blob/main/tests/README.md).\n5. Neither (a) nor (b) require you to annotate the entire Cython library all at once to start providing useful typing information. It's now possible to write the strictest of type annotations this way without touching the Cython source code.\n6. Stub files do indeed work with IDEs like VSCode and PyCharm (can't speak for others), so the information not living in the `.py` source should not be an issue for code navigation and completion.\n\nThere are a few downsides to this:\n* Typing information needs to be updated separately from the source.\n* Although not all modules in a package need to be stubbed, each module that is stubbed needs to have the stub _completely_ typed with all the symbols present.\n* In some type-checkers, when working on a `.py` module, you may not get the benefits of type-checking when working with other symbols from the same `.py` module you're working on (although this isn't really different from the current situation).\n   * This is because the `.py` you're working on won't have typing information; such info now lives separately in a `.pyi`, and type-checkers don't check both `<module>.py` and `<module>.pyi` simultaneously. They only check `<module>.py`, then separately `<module>.pyi`, against all other imported typing info with highest-to-lowest priority based on [import resolution ordering](https://typing.python.org/en/latest/spec/distributing.html#import-resolution-ordering). Note that `<another_module>.pyi` is treated as if it contains the entire public interface for `import <another_module>`, and always has a higher typing info priority than the corresponding `<another_module>.py`.",
            "created_at": "2025-06-21T02:05:11Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-2993246200",
            "id": 2993246200,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6yaU_4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2993246200/reactions"
            },
            "updated_at": "2025-06-21T02:05:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2993246200",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/50305397?v=4",
                "events_url": "https://api.github.com/users/bzoracler/events{/privacy}",
                "followers_url": "https://api.github.com/users/bzoracler/followers",
                "following_url": "https://api.github.com/users/bzoracler/following{/other_user}",
                "gists_url": "https://api.github.com/users/bzoracler/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bzoracler",
                "id": 50305397,
                "login": "bzoracler",
                "node_id": "MDQ6VXNlcjUwMzA1Mzk3",
                "organizations_url": "https://api.github.com/users/bzoracler/orgs",
                "received_events_url": "https://api.github.com/users/bzoracler/received_events",
                "repos_url": "https://api.github.com/users/bzoracler/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bzoracler/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bzoracler/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bzoracler",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "IMHO, external type information is a lot worse than inline type information. It gets outdated and plain wrong much more quickly and is a constant annoyance in PRs because it persistently needs a second step to push a fix after pushing the initial changes.\n\nWe use .pxd typing to accelerate some of the modules when compiling Cython, and what I write is certainly the case there. Always.\n\nRegarding the more general topic, I'm very much against sprinkling type annotations over the code base at random. I sometimes add type declarations when writing new code, but I do so sparsely at need (and probably more often improve the compiled performance rather than for IDE type hinting, but that's me). Cython's functions tend to have long signatures, and adding types to that would probably leave them barely readable. The fact that a `node` is a `Node` (or even some `ExprNode`) really doesn't help that much in using it. There are several cases where type information gets in the way more than it helps in practice.\n\nMy impression is that today's Python IDEs are fairly acceptable at guessing completions from what I type, even without knowing the types. If bloating the code base with type information makes that 20% better but 50% less readable, I'd rather not do it.\n\nSo, in short: I'm fine with selectively and sparsely adding types where they really _help_ readability, but I'm against globally spreading types without clear need and benefit.",
            "created_at": "2025-06-21T05:47:49Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-2993351037",
            "id": 2993351037,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6yaul9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2993351037/reactions"
            },
            "updated_at": "2025-06-21T05:47:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2993351037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think some of this type of information could usefully be switched to annotations\n\nhttps://github.com/cython/cython/blob/f595d5e272b1105fbf7e9e81cff462b1625f5482/Cython/Compiler/Nodes.py#L451-L453\n\n(At least where the annotations end up looking sensible.)\n\nI definitely agree that external type stubs are not the solution though. Obviously if other people want to maintain some then that's fine - that's what external type stubs were designed to allow. But is supporting an official set of external type stubs seems like the worst case.",
            "created_at": "2025-06-21T07:38:44Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-2993427162",
            "id": 2993427162,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6ybBLa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/2993427162/reactions"
            },
            "updated_at": "2025-06-21T07:38:44Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/2993427162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> IMHO, external type information is a lot worse than inline type information. \n\n+1\n\n> Regarding the more general topic, I'm very much against sprinkling type annotations over the code base at random. I sometimes add type declarations when writing new code, but I do so sparsely at need (and probably more often improve the compiled performance rather than for IDE type hinting, but that's me). Cython's functions tend to have long signatures, and adding types to that would probably leave them barely readable. The fact that a node is a Node (or even some ExprNode) really doesn't help that much in using it. There are several cases where type information gets in the way more than it helps in practice.\n\nHere, I do not agree. As someone who is not fully familiar with Cython codebase, I often struggle to understand what type a function parameter is. In cython you have `Context`, `Scope`, `Node`, `Entry`, `PyrexType`, code objects and more and it's difficult to understand what is where. The naming is sometimes consistent  - `env` is all the time the same object but I still forget what it is (`Context` ?, `Scope`?) and sometimes not consistent - in some places `context` is `Context` in other places `context` is dictionary with context for templating. \n\nE.g. this function:\n\nhttps://github.com/cython/cython/blob/a7a3cc6aa10669da33d2eee9f377947818bd77f3/Cython/Compiler/ModuleNode.py#L1100\n\nout of blue what are the parameters? `is_implementing` is bool because it starts with `is_`, `code` is object with `putln()` method to write C code (I know because it is sprinkled all over cython)  but the rest I have no idea...\n\nThe only I fear is that if there is no tooling validating types, it will get worse because annotations will end up misleading. Also I am not a fan of overcomplicated types which will be too much cryptic. Also I am not for using types for validation of consistency of the code (mypy check) because it introduces additional burden to the code base (not mentioning the task of fully annotate cython code base)",
            "created_at": "2025-06-25T22:49:24Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-3006458767",
            "id": 3006458767,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6zMuuP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3006458767/reactions"
            },
            "updated_at": "2025-06-26T20:21:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3006458767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Line 1100 in [a7a3cc6](/cython/cython/commit/a7a3cc6aa10669da33d2eee9f377947818bd77f3)\n> \n>  def generate_cpp_constructor_code(self, arg_decls, arg_names, is_implementing, py_attrs, constructor, type, code): \n> out of blue what are the parameters? `is_implementing` is bool because it starts with `is_`, `code` is object with `putln()` method to write C code (I know because it is sprinkled all over cython) but the rest I have no idea...\n> \n> The only I fear is that if there is no tooling validating types, it will get worse because annotations will end up misleading. Also I am not fun overcomplicated types which will be too much cryptic. Also I am not for using types for validation of consistency of the code (mypy check) because it introduces additional burden to the code base (not mentioning the task of fully annotate cython code base)\n\n@matusvalo You bring up a very interesting point, hence why I threw this issue to begin with. For other newcomers who want to contribute this can be rather challenging as example might be figuring out what env's type is supposed it be. It's traversed in most of the node's inner functions but it's hard to find where it's being created. Not understanding or knowing that could make it hard for people who want to contribute to understand what is going on under the hood.",
            "created_at": "2025-06-26T17:13:08Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-3009184105",
            "id": 3009184105,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6zXIFp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3009184105/reactions"
            },
            "updated_at": "2025-06-26T17:13:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3009184105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> E.g. this function:\n> \n> https://github.com/cython/cython/blob/a7a3cc6aa10669da33d2eee9f377947818bd77f3/Cython/Compiler/ModuleNode.py#L1100\n>\n> out of blue what are the parameters? `is_implementing` is bool because it starts with `is_`, `code` is object with `putln()` method to write C code (I know because it is sprinkled all over cython) but the rest I have no idea...\n\nI think this is a very good example for a case where type information would help very little but a docstring would. Most of the information that you ask for is not \"what is the type of that argument?\" but \"what information is semantically provided by that argument?\". The information that you get a list of strings is very basic in comparison to a comment saying \"this is a list of template argument names declared for the C++ class\". Type information can be valuable in cases, but it does not replace semantic naming and documentation.",
            "created_at": "2025-06-27T03:41:35Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-3011472586",
            "id": 3011472586,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6zf2zK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3011472586/reactions"
            },
            "updated_at": "2025-06-27T03:41:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3011472586",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "For projects using type annotations for both type-checking and documentation, semantic naming would normally be accompanied by [type aliases](https://typing.python.org/en/latest/guides/modernizing.html#type-aliases) and/or [`NewType`s](https://typing.python.org/en/latest/spec/aliases.html#newtype).\n\nSmart IDEs show docstrings of type aliases (and other module-level assignments) by picking up a string literal underneath the assignment, e.g.\n\n```python\nTemplArgNames = str\n\"\"\"Template argument names declared for a C++ class\"\"\"\n```\n\nThis prevents the need for adding repetitive docstrings for parameters that would otherwise add no real value except for the first time you read them.",
            "created_at": "2025-06-27T07:15:26Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-3011959579",
            "id": 3011959579,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6zhtsb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3011959579/reactions"
            },
            "updated_at": "2025-06-27T07:15:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3011959579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/50305397?v=4",
                "events_url": "https://api.github.com/users/bzoracler/events{/privacy}",
                "followers_url": "https://api.github.com/users/bzoracler/followers",
                "following_url": "https://api.github.com/users/bzoracler/following{/other_user}",
                "gists_url": "https://api.github.com/users/bzoracler/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bzoracler",
                "id": 50305397,
                "login": "bzoracler",
                "node_id": "MDQ6VXNlcjUwMzA1Mzk3",
                "organizations_url": "https://api.github.com/users/bzoracler/orgs",
                "received_events_url": "https://api.github.com/users/bzoracler/received_events",
                "repos_url": "https://api.github.com/users/bzoracler/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bzoracler/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bzoracler/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bzoracler",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> For projects using type annotations for both type-checking and documentation, semantic naming would normally be accompanied by [type aliases](https://typing.python.org/en/latest/guides/modernizing.html#type-aliases) and/or [`NewType`s](https://typing.python.org/en/latest/spec/aliases.html#newtype).\n\n… with the obvious drawback of adding different names for _technically_ the same thing. Now I have to know that `TemplArgNames` is really just a `str` when I see it.",
            "created_at": "2025-06-27T09:26:28Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-3012336583",
            "id": 3012336583,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6zjJvH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3012336583/reactions"
            },
            "updated_at": "2025-06-27T09:26:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3012336583",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> it will get worse because annotations will end up misleading\n\nSpecifically in the case of Cython, we use the visitor pattern to traverse the syntax tree and make replacements in it. Most of the time, the replacements are independent of the nodes further up in the tree that hold the currently visited node. That means that an attribute type declaration like `subnode: ConcreteExprNode` may stop being true for reasons that are entirely external to the current class. There are hard limits to the amount of type information that we can reasonably add, and they are not always obvious.",
            "created_at": "2025-06-27T09:31:59Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-3012351177",
            "id": 3012351177,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6zjNTJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3012351177/reactions"
            },
            "updated_at": "2025-06-27T09:31:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3012351177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > For projects using type annotations for both type-checking and documentation, semantic naming would normally be accompanied by [type aliases](https://typing.python.org/en/latest/guides/modernizing.html#type-aliases) and/or [`NewType`s](https://typing.python.org/en/latest/spec/aliases.html#newtype).\n> \n> … with the obvious drawback of adding different names for _technically_ the same thing. Now I have to know that `TemplArgNames` is really just a `str` when I see it.\n\nI'm not sure why anyone would worry about them being technically the same thing; that's just an implementation detail for type-checkers to sort out if someone used them wrongly, just like any other type you'd be unfamiliar with. I did mention this is for projects actually using type-checking, so there is no blind guessing of what the developer's intention is or debugging deeply-nested call stacks for something trivial like a mismatched type, and such type aliases are concretely located in a part of the project that's at most one code-navigation action away.\n\nThis convenience/advantage of type aliases doesn't apply to Cython currently, of course, since there is no validation of type annotations. But TBH, at this day and age, type annotations only have two real disadvantages, which is (1) the use of them without any validation and (2) use of them forces you to write more similarly to a statically-typed language, so it doesn't fit a Python dynamic convention/paradigm. Type annotations, if used according to the current typing specifications, also has the unique disadvantage due to Cython-specific interpretation for compilation, and all 3 of these disadvantages are severe and I understand that they may be dealbreakers.\n\nOther disadvantages seem to be hypothetical, and I don't really see anything else mentioned in this thread that the static type-checker themselves haven't already solved, or a Language Server (most of which rely at most on a sprinkling of annotations to perform smoothly, and which is what this entire issue is about) hasn't already implemented to assist developer experience. For example, \"complex unreadable annotations\" only comes up with fully-annotated nested generic data structures or higher-order decorators and is rather easily solved by a documented type alias if they're used repeatedly. If such items exist in the Cython source, they'd be very difficult to reason with already, so would need lots of documentation wherever they're used (which is a maintenance burden in itself); if they don't exist in Cython, I'm not sure why this would even be brought up, as nobody would even write such annotations. In any case, I don't see any of these other disadvantages deterring people from contributing to heavily typed codebases like pydantic, cattrs, pandas, and others.\n\n---\n\nBack to whether there's anything actionable in this issue, it looks like a major blockage for more annotations is tooling for validation. I'm fairly confident that a combination of mypy configurations and a mypy plugin tweaked specifically for Cython can be used to suppress noise, only validating annotations that are already present. For example, this annotation error\n\nhttps://github.com/cython/cython/blob/b6c6f55f439f156c8f2cf9e1eead44a2a7601c75/Cython/Build/Cythonize.py#L41-L46\n\ncan be checked using mypy without adding any more annotations and triggering any more noise (see [mypy Playground](https://mypy-play.net/?mypy=latest&python=3.12&gist=4b6e9130a64e74192cb970e4b6b0ab9e)). The `# mypy: ...` directives at the top would be added to a [mypy configuration file](https://mypy.readthedocs.io/en/stable/config_file.html) (not every module).\n\nIs there any interest at all in such tooling being part of Cython?",
            "created_at": "2025-06-27T12:29:55Z",
            "html_url": "https://github.com/cython/cython/issues/6866#issuecomment-3012894360",
            "id": 3012894360,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/6866",
            "node_id": "IC_kwDOABDGAc6zlR6Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/issues/comments/3012894360/reactions"
            },
            "updated_at": "2025-06-27T12:29:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/3012894360",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/50305397?v=4",
                "events_url": "https://api.github.com/users/bzoracler/events{/privacy}",
                "followers_url": "https://api.github.com/users/bzoracler/followers",
                "following_url": "https://api.github.com/users/bzoracler/following{/other_user}",
                "gists_url": "https://api.github.com/users/bzoracler/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bzoracler",
                "id": 50305397,
                "login": "bzoracler",
                "node_id": "MDQ6VXNlcjUwMzA1Mzk3",
                "organizations_url": "https://api.github.com/users/bzoracler/orgs",
                "received_events_url": "https://api.github.com/users/bzoracler/received_events",
                "repos_url": "https://api.github.com/users/bzoracler/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bzoracler/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bzoracler/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bzoracler",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 14,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6866/comments",
    "created_at": "2025-05-12T21:01:21Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5534781?v=4",
                "events_url": "https://api.github.com/users/leofang/events{/privacy}",
                "followers_url": "https://api.github.com/users/leofang/followers",
                "following_url": "https://api.github.com/users/leofang/following{/other_user}",
                "gists_url": "https://api.github.com/users/leofang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leofang",
                "id": 5534781,
                "login": "leofang",
                "node_id": "MDQ6VXNlcjU1MzQ3ODE=",
                "organizations_url": "https://api.github.com/users/leofang/orgs",
                "received_events_url": "https://api.github.com/users/leofang/received_events",
                "repos_url": "https://api.github.com/users/leofang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leofang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leofang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leofang",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-05-13T00:34:25Z",
            "event": "subscribed",
            "id": 17626251162,
            "node_id": "SE_lADOABDGAc62R2KMzwAAAAQamz-a",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/17626251162"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-05-13T17:41:34Z",
            "event": "mentioned",
            "id": 17640067484,
            "node_id": "MEE_lADOABDGAc62R2KMzwAAAAQbbhGc",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/17640067484"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-05-13T17:41:34Z",
            "event": "subscribed",
            "id": 17640067499,
            "node_id": "SE_lADOABDGAc62R2KMzwAAAAQbbhGr",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/17640067499"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-05-14T07:09:36Z",
            "event": "mentioned",
            "id": 17647681837,
            "node_id": "MEE_lADOABDGAc62R2KMzwAAAAQb4kEt",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/17647681837"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-05-14T07:09:36Z",
            "event": "subscribed",
            "id": 17647681850,
            "node_id": "SE_lADOABDGAc62R2KMzwAAAAQb4kE6",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/17647681850"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53637421?v=4",
                "events_url": "https://api.github.com/users/GalaxySnail/events{/privacy}",
                "followers_url": "https://api.github.com/users/GalaxySnail/followers",
                "following_url": "https://api.github.com/users/GalaxySnail/following{/other_user}",
                "gists_url": "https://api.github.com/users/GalaxySnail/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/GalaxySnail",
                "id": 53637421,
                "login": "GalaxySnail",
                "node_id": "MDQ6VXNlcjUzNjM3NDIx",
                "organizations_url": "https://api.github.com/users/GalaxySnail/orgs",
                "received_events_url": "https://api.github.com/users/GalaxySnail/received_events",
                "repos_url": "https://api.github.com/users/GalaxySnail/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/GalaxySnail/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GalaxySnail/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/GalaxySnail",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-06-11T02:05:09Z",
            "event": "subscribed",
            "id": 18085257844,
            "node_id": "SE_lADOABDGAc62R2KMzwAAAAQ19yJ0",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/18085257844"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-06-26T17:13:10Z",
            "event": "mentioned",
            "id": 18340279739,
            "node_id": "MEE_lADOABDGAc62R2KMzwAAAARFKnW7",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/18340279739"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo",
                "user_view_type": "public"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2025-06-26T17:13:10Z",
            "event": "subscribed",
            "id": 18340279780,
            "node_id": "SE_lADOABDGAc62R2KMzwAAAARFKnXk",
            "performed_via_github_app": null,
            "url": "https://api.github.com/repos/cython/cython/issues/events/18340279780"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/6866/events",
    "html_url": "https://github.com/cython/cython/issues/6866",
    "id": 3058131596,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/6866/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOABDGAc62R2KM",
    "number": 6866,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/cython/cython/issues/6866/reactions"
    },
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/cython/cython/issues/6866/timeline",
    "title": "Annotating Modules in the Cython Compiler Functions and Node Variables to help improve maintaining the code or adding new features to it.",
    "type": null,
    "updated_at": "2025-06-27T12:29:55Z",
    "url": "https://api.github.com/repos/cython/cython/issues/6866",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
        "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
        "followers_url": "https://api.github.com/users/Vizonex/followers",
        "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
        "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Vizonex",
        "id": 114684698,
        "login": "Vizonex",
        "node_id": "U_kgDOBtXzGg",
        "organizations_url": "https://api.github.com/users/Vizonex/orgs",
        "received_events_url": "https://api.github.com/users/Vizonex/received_events",
        "repos_url": "https://api.github.com/users/Vizonex/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Vizonex",
        "user_view_type": "public"
    }
}