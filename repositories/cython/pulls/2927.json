{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/2927/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2927/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/2927"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/2927"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2927/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2927"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/0b0042b9e01259ea834e4531f5ac69559c62b4e2"
        }
    },
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 834,
            "forks_count": 834,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 639,
            "open_issues_count": 639,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2019-04-25T09:24:32Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 54384,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 4035,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2019-04-25T05:47:29Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 4035,
            "watchers_count": 4035
        },
        "sha": "d844746d4115cfc78459236309f6269056ed8c67",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "This is supposed to address #2915 (though it covers Python functions only).  I'm new to the Cython codebase, so any guidance is appreciated.  I've marked it as WIP since the tests need a little more work (see below).  The core code is supposed to be functional though, and passes the current set of tests.\r\n\r\nThe tests are adapted from those in the reference CPython implementation.  I wasn't sure how to express some of these tests in Cython's framework (eg. `test_invalid_syntax_lambda`):  certain syntax errors cause the parser to exit immediately (eg. `lambda *args, /: None`), and so subsequent errors don't get tested.  I know I could make many different test files, but I don't want to clutter up the tests directory with many files for one new feature.  Is there a better way to implement these tests?  These tests have been commented out, along with some others that don't seem applicable to Cython.\r\n\r\nI noticed when implementing this that for single-argument methods with no default value, Cython already compiles these to functions that do not allow keyword arguments.  Eg.\r\n```\r\ndef foo(x):\r\n    return x\r\nf(x=2) # raises no exception in CPython, but does in Cython\r\n```\r\nI'm guessing since this allows for an optimization that it is not considered a bug? (ie. the resulting method can be `METH_O` instead of `METH_VARARGS | METH_KEYWORDS` and needs no argument parsing). \r\n\r\nThanks for maintaining such a great project!",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277208769"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277208769"
                }
            },
            "author_association": "MEMBER",
            "body": "What's the intention of diverging from the naming scheme here?",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-22T05:27:48Z",
            "diff_hunk": "@@ -861,8 +861,9 @@ class CArgDeclNode(Node):\n     # annotation     ExprNode or None   Py3 function arg annotation\n     # is_self_arg    boolean            Is the \"self\" arg of an extension type method\n     # is_type_arg    boolean            Is the \"class\" arg of an extension type classmethod\n-    # is_kw_only     boolean            Is a keyword-only argument\n+    # kw_only        boolean            Is a keyword-only argument",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277208769",
            "id": 277208769,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzIwODc2OQ==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 5,
            "path": "Cython/Compiler/Nodes.py",
            "position": 5,
            "pull_request_review_id": 228960248,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277208769",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277313274"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277313274"
                }
            },
            "author_association": "NONE",
            "body": "I just corrected the comment, the variable was already called kw_only before this commit.  ",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-22T14:48:43Z",
            "diff_hunk": "@@ -861,8 +861,9 @@ class CArgDeclNode(Node):\n     # annotation     ExprNode or None   Py3 function arg annotation\n     # is_self_arg    boolean            Is the \"self\" arg of an extension type method\n     # is_type_arg    boolean            Is the \"class\" arg of an extension type classmethod\n-    # is_kw_only     boolean            Is a keyword-only argument\n+    # kw_only        boolean            Is a keyword-only argument",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277313274",
            "id": 277313274,
            "in_reply_to_id": 277208769,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzMxMzI3NA==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 5,
            "path": "Cython/Compiler/Nodes.py",
            "position": 5,
            "pull_request_review_id": 229091608,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277313274",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277820906"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277820906"
                }
            },
            "author_association": "MEMBER",
            "body": "OT1H, why not? OTOH, this tests for a specific limitation that CPython used to have at some point and that was lifted. Cython never had it.\r\n\r\nStill, I think it would be nice to have a test for a function with a large set of arguments. Just generate a long signature line with arguments `a1` through `a300`, text-wrap it, and paste it here.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T18:46:42Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277820906",
            "id": 277820906,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgyMDkwNg==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 61,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277820906",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277821386"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277821386"
                }
            },
            "author_association": "MEMBER",
            "body": "You can create an error test in the `tests/errors/`directory (and also use `# mode: error` for it). See the examples there.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T18:47:49Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277821386",
            "id": 277821386,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgyMTM4Ng==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 8,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277821386",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277821597"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277821597"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, the runnable tests seem enough. You can always use the run tests as translate-only tests by passing `--cython-only` to the test runner.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T18:48:22Z",
            "diff_hunk": "@@ -0,0 +1,17 @@\n+# mode: compile\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge (and maybe remove this test,\n+#       since it seems covered by the runs/ test)",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277821597",
            "id": 277821597,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgyMTU5Nw==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 5,
            "path": "tests/compile/posonly.pyx",
            "position": null,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277821597",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277823260"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277823260"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, we do, if you set the compiler directive `binding=True` (which would be ok for this test).",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T18:52:38Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword2(a, /, b):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword2(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword2() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword3(a, b, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword3(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword3() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_arg_invalid_calls(a, b, /, c):\n+    \"\"\"\n+    >>> test_positional_only_and_arg_invalid_calls(1, 2)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (2 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (1 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1,2,3,4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_optional_arg_invalid_calls(a, b, /, c=3):\n+    \"\"\"\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (1 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (0 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2, 3, 4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at most 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_invalid_calls(a, b, /):\n+    \"\"\"\n+    >>> test_positional_only_invalid_calls(1, 2)\n+    >>> test_positional_only_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (1 given)\n+    >>> test_positional_only_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (0 given)\n+    >>> test_positional_only_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_with_optional_invalid_calls(a, b=2, /):\n+    \"\"\"\n+    >>> test_positional_only_with_optional_invalid_calls(1)\n+    >>> test_positional_only_with_optional_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at least 1 positional argument (0 given)\n+    >>> test_positional_only_with_optional_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at most 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_no_standard_args_usage(a, b, /, *, c):\n+    \"\"\"\n+    >>> test_no_standard_args_usage(1, 2, c=3)\n+    >>> test_no_standard_args_usage(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_no_standard_args_usage() takes exactly 2 positional arguments (1 given)\n+    \"\"\"\n+    pass\n+\n+#def test_change_default_pos_only():\n+# TODO: probably remove this, since we have no __defaults__ in Cython?",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277823260",
            "id": 277823260,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgyMzI2MA==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 180,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277823260",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277823938"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277823938"
                }
            },
            "author_association": "MEMBER",
            "body": "Interesting. I don't see an error test that uses more than one slash in the signature. That seems worth testing.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T18:54:30Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277823938",
            "id": 277823938,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgyMzkzOA==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 9,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277823938",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277824073"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277824073"
                }
            },
            "author_association": "MEMBER",
            "body": "`if not args` would also be fine.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T18:54:51Z",
            "diff_hunk": "@@ -3423,6 +3423,20 @@ def p_varargslist(s, terminator=')', annotated=1):\n                         annotated = annotated)\n     star_arg = None\n     starstar_arg = None\n+    if s.sy == '/':\n+        if len(args) == 0:",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277824073",
            "id": 277824073,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgyNDA3Mw==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 14,
            "path": "Cython/Compiler/Parsing.py",
            "position": 14,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277824073",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277825942"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277825942"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is this needed? Isn't this the last iteration already?",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T18:59:45Z",
            "diff_hunk": "@@ -3917,6 +3926,12 @@ def generate_keyword_unpacking_code(self, min_positional_args, max_positional_ar\n                     else:\n                         code.putln('case %2d:' % i)\n                 pystring_cname = code.intern_identifier(arg.name)\n+                if arg.pos_only:\n+                    if i == last_required_posonly_arg:\n+                        code.put_goto(argtuple_error_label)\n+                    if i == last_required_arg:\n+                        code.putln('break;')",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277825942",
            "id": 277825942,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgyNTk0Mg==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 93,
            "path": "Cython/Compiler/Nodes.py",
            "position": 93,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277825942",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277826958"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277826958"
                }
            },
            "author_association": "MEMBER",
            "body": "What if `last_required_arg == `last_required_posonly_arg`? Wouldn't that generate useless code here?",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T19:02:15Z",
            "diff_hunk": "@@ -3917,6 +3926,12 @@ def generate_keyword_unpacking_code(self, min_positional_args, max_positional_ar\n                     else:\n                         code.putln('case %2d:' % i)\n                 pystring_cname = code.intern_identifier(arg.name)\n+                if arg.pos_only:\n+                    if i == last_required_posonly_arg:\n+                        code.put_goto(argtuple_error_label)\n+                    if i == last_required_arg:",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277826958",
            "id": 277826958,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgyNjk1OA==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 92,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277826958",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277829972"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277829972"
                }
            },
            "author_association": "MEMBER",
            "body": "Keep it commented out to keep the link to the original set of CPython tests.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T19:10:49Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277829972",
            "id": 277829972,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgyOTk3Mg==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 67,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277829972",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277830444"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277830444"
                }
            },
            "author_association": "MEMBER",
            "body": "You don't actually need the `pass` here.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T19:12:19Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277830444",
            "id": 277830444,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgzMDQ0NA==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 96,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277830444",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277831063"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277831063"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it would be good to also always have a correct call to these functions, just to make sure that there is one and they don't accidentally reject every attempt to call them.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T19:14:06Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword2(a, /, b):",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277831063",
            "id": 277831063,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgzMTA2Mw==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 98,
            "path": "tests/run/posonly.pyx",
            "position": 128,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277831063",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277831824"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277831824"
                }
            },
            "author_association": "MEMBER",
            "body": "`class Example(object):`, same for `class X(object)` below.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T19:16:19Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword2(a, /, b):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword2(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword2() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword3(a, b, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword3(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword3() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_arg_invalid_calls(a, b, /, c):\n+    \"\"\"\n+    >>> test_positional_only_and_arg_invalid_calls(1, 2)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (2 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (1 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1,2,3,4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_optional_arg_invalid_calls(a, b, /, c=3):\n+    \"\"\"\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (1 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (0 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2, 3, 4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at most 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_invalid_calls(a, b, /):\n+    \"\"\"\n+    >>> test_positional_only_invalid_calls(1, 2)\n+    >>> test_positional_only_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (1 given)\n+    >>> test_positional_only_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (0 given)\n+    >>> test_positional_only_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_with_optional_invalid_calls(a, b=2, /):\n+    \"\"\"\n+    >>> test_positional_only_with_optional_invalid_calls(1)\n+    >>> test_positional_only_with_optional_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at least 1 positional argument (0 given)\n+    >>> test_positional_only_with_optional_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at most 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_no_standard_args_usage(a, b, /, *, c):\n+    \"\"\"\n+    >>> test_no_standard_args_usage(1, 2, c=3)\n+    >>> test_no_standard_args_usage(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_no_standard_args_usage() takes exactly 2 positional arguments (1 given)\n+    \"\"\"\n+    pass\n+\n+#def test_change_default_pos_only():\n+# TODO: probably remove this, since we have no __defaults__ in Cython?\n+#    \"\"\"\n+#    >>> test_change_default_pos_only()\n+#    True\n+#    True\n+#    \"\"\"\n+#    def f(a, b=2, /, c=3):\n+#        return a + b + c\n+#\n+#    print((2,3) == f.__defaults__)\n+#    f.__defaults__ = (1, 2, 3)\n+#    print(f(1, 2, 3) == 6)\n+\n+def test_lambdas():\n+    \"\"\"\n+    >>> test_lambdas()\n+    3\n+    3\n+    3\n+    3\n+    3\n+    \"\"\"\n+    x = lambda a, /, b: a + b\n+    print(x(1,2))\n+    print(x(1,b=2))\n+\n+    x = lambda a, /, b=2: a + b\n+    print(x(1))\n+\n+    x = lambda a, b, /: a + b\n+    print(x(1, 2))\n+\n+    x = lambda a, b, /, : a + b\n+    print(x(1, 2))\n+\n+\n+#TODO: need to implement this in the 'error' test\n+#def test_invalid_syntax_lambda(self):\n+#    lambda a, b = 5, /, c: None\n+#    lambda a = 5, b, /, c: None\n+#    lambda a = 5, b, /: None\n+#    lambda a, /, a: None\n+#    lambda a, /, *, a: None\n+#    lambda *args, /: None\n+#    lambda *args, a, /: None\n+#    lambda **kwargs, /: None\n+#    lambda /, a = 1: None\n+#    lambda /, a: None\n+#    lambda /: None\n+#    lambda *, a, /: None\n+#    lambda *, /, a: None\n+\n+class Example:",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277831824",
            "id": 277831824,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgzMTgyNA==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 232,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277831824",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277832074"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277832074"
                }
            },
            "author_association": "MEMBER",
            "body": "You can also test this in the docstring of the class, no need for a separate test function here.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T19:17:06Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword2(a, /, b):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword2(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword2() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword3(a, b, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword3(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword3() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_arg_invalid_calls(a, b, /, c):\n+    \"\"\"\n+    >>> test_positional_only_and_arg_invalid_calls(1, 2)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (2 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (1 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1,2,3,4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_optional_arg_invalid_calls(a, b, /, c=3):\n+    \"\"\"\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (1 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (0 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2, 3, 4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at most 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_invalid_calls(a, b, /):\n+    \"\"\"\n+    >>> test_positional_only_invalid_calls(1, 2)\n+    >>> test_positional_only_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (1 given)\n+    >>> test_positional_only_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (0 given)\n+    >>> test_positional_only_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_with_optional_invalid_calls(a, b=2, /):\n+    \"\"\"\n+    >>> test_positional_only_with_optional_invalid_calls(1)\n+    >>> test_positional_only_with_optional_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at least 1 positional argument (0 given)\n+    >>> test_positional_only_with_optional_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at most 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_no_standard_args_usage(a, b, /, *, c):\n+    \"\"\"\n+    >>> test_no_standard_args_usage(1, 2, c=3)\n+    >>> test_no_standard_args_usage(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_no_standard_args_usage() takes exactly 2 positional arguments (1 given)\n+    \"\"\"\n+    pass\n+\n+#def test_change_default_pos_only():\n+# TODO: probably remove this, since we have no __defaults__ in Cython?\n+#    \"\"\"\n+#    >>> test_change_default_pos_only()\n+#    True\n+#    True\n+#    \"\"\"\n+#    def f(a, b=2, /, c=3):\n+#        return a + b + c\n+#\n+#    print((2,3) == f.__defaults__)\n+#    f.__defaults__ = (1, 2, 3)\n+#    print(f(1, 2, 3) == 6)\n+\n+def test_lambdas():\n+    \"\"\"\n+    >>> test_lambdas()\n+    3\n+    3\n+    3\n+    3\n+    3\n+    \"\"\"\n+    x = lambda a, /, b: a + b\n+    print(x(1,2))\n+    print(x(1,b=2))\n+\n+    x = lambda a, /, b=2: a + b\n+    print(x(1))\n+\n+    x = lambda a, b, /: a + b\n+    print(x(1, 2))\n+\n+    x = lambda a, b, /, : a + b\n+    print(x(1, 2))\n+\n+\n+#TODO: need to implement this in the 'error' test\n+#def test_invalid_syntax_lambda(self):\n+#    lambda a, b = 5, /, c: None\n+#    lambda a = 5, b, /, c: None\n+#    lambda a = 5, b, /: None\n+#    lambda a, /, a: None\n+#    lambda a, /, *, a: None\n+#    lambda *args, /: None\n+#    lambda *args, a, /: None\n+#    lambda **kwargs, /: None\n+#    lambda /, a = 1: None\n+#    lambda /, a: None\n+#    lambda /: None\n+#    lambda *, a, /: None\n+#    lambda *, /, a: None\n+\n+class Example:\n+    def f(self, a, b, /):\n+        return a, b\n+\n+def test_posonly_methods():",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277832074",
            "id": 277832074,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgzMjA3NA==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 236,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277832074",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r277832570"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/277832570"
                }
            },
            "author_association": "MEMBER",
            "body": "Just use the docstring of the function itself, no need for a separate test function.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-23T19:18:19Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword2(a, /, b):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword2(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword2() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword3(a, b, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword3(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword3() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_arg_invalid_calls(a, b, /, c):\n+    \"\"\"\n+    >>> test_positional_only_and_arg_invalid_calls(1, 2)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (2 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (1 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1,2,3,4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_optional_arg_invalid_calls(a, b, /, c=3):\n+    \"\"\"\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (1 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (0 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2, 3, 4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at most 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_invalid_calls(a, b, /):\n+    \"\"\"\n+    >>> test_positional_only_invalid_calls(1, 2)\n+    >>> test_positional_only_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (1 given)\n+    >>> test_positional_only_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (0 given)\n+    >>> test_positional_only_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_with_optional_invalid_calls(a, b=2, /):\n+    \"\"\"\n+    >>> test_positional_only_with_optional_invalid_calls(1)\n+    >>> test_positional_only_with_optional_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at least 1 positional argument (0 given)\n+    >>> test_positional_only_with_optional_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at most 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_no_standard_args_usage(a, b, /, *, c):\n+    \"\"\"\n+    >>> test_no_standard_args_usage(1, 2, c=3)\n+    >>> test_no_standard_args_usage(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_no_standard_args_usage() takes exactly 2 positional arguments (1 given)\n+    \"\"\"\n+    pass\n+\n+#def test_change_default_pos_only():\n+# TODO: probably remove this, since we have no __defaults__ in Cython?\n+#    \"\"\"\n+#    >>> test_change_default_pos_only()\n+#    True\n+#    True\n+#    \"\"\"\n+#    def f(a, b=2, /, c=3):\n+#        return a + b + c\n+#\n+#    print((2,3) == f.__defaults__)\n+#    f.__defaults__ = (1, 2, 3)\n+#    print(f(1, 2, 3) == 6)\n+\n+def test_lambdas():\n+    \"\"\"\n+    >>> test_lambdas()\n+    3\n+    3\n+    3\n+    3\n+    3\n+    \"\"\"\n+    x = lambda a, /, b: a + b\n+    print(x(1,2))\n+    print(x(1,b=2))\n+\n+    x = lambda a, /, b=2: a + b\n+    print(x(1))\n+\n+    x = lambda a, b, /: a + b\n+    print(x(1, 2))\n+\n+    x = lambda a, b, /, : a + b\n+    print(x(1, 2))\n+\n+\n+#TODO: need to implement this in the 'error' test\n+#def test_invalid_syntax_lambda(self):\n+#    lambda a, b = 5, /, c: None\n+#    lambda a = 5, b, /, c: None\n+#    lambda a = 5, b, /: None\n+#    lambda a, /, a: None\n+#    lambda a, /, *, a: None\n+#    lambda *args, /: None\n+#    lambda *args, a, /: None\n+#    lambda **kwargs, /: None\n+#    lambda /, a = 1: None\n+#    lambda /, a: None\n+#    lambda /: None\n+#    lambda *, a, /: None\n+#    lambda *, /, a: None\n+\n+class Example:\n+    def f(self, a, b, /):\n+        return a, b\n+\n+def test_posonly_methods():\n+    \"\"\"\n+    >>> Example().f(1,2)\n+    (1, 2)\n+    >>> Example.f(Example(), 1, 2)\n+    (1, 2)\n+    >>> try:\n+    ...     Example.f(1,2)\n+    ... except TypeError:\n+    ...    print(\"Got type error\")\n+    Got type error\n+    >>> Example().f(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: f() takes exactly 3 positional arguments (2 given)\n+    \"\"\"\n+    pass\n+\n+class X:\n+    def f(self, *, __a=42):\n+        return __a\n+def test_mangling():\n+    \"\"\"\n+    >>> X().f()\n+    42\n+    \"\"\"\n+    pass\n+\n+def global_pos_only_f(a, b, /):\n+    pass\n+\n+def test_module_function():",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r277832570",
            "id": 277832570,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzgzMjU3MA==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 266,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 229731763,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/277832570",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r278394476"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/278394476"
                }
            },
            "author_association": "NONE",
            "body": "Done",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-25T04:44:24Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r278394476",
            "id": 278394476,
            "in_reply_to_id": 277820906,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM5NDQ3Ng==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 61,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 230448893,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/278394476",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r278394548"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/278394548"
                }
            },
            "author_association": "NONE",
            "body": "Done, but with some tests commented out (see my overall comment above)",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-25T04:45:03Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r278394548",
            "id": 278394548,
            "in_reply_to_id": 277821386,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM5NDU0OA==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 8,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 230448983,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/278394548",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r278394596"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/278394596"
                }
            },
            "author_association": "NONE",
            "body": "I've removed the compile only tests",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-25T04:45:22Z",
            "diff_hunk": "@@ -0,0 +1,17 @@\n+# mode: compile\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge (and maybe remove this test,\n+#       since it seems covered by the runs/ test)",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r278394596",
            "id": 278394596,
            "in_reply_to_id": 277821597,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM5NDU5Ng==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 5,
            "path": "tests/compile/posonly.pyx",
            "position": null,
            "pull_request_review_id": 230449027,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/278394596",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r278395361"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/278395361"
                }
            },
            "author_association": "NONE",
            "body": "Good to know, done.  Some of these are tests are still commented out for two reasons:\r\n(1) In the CPython tests, `__defaults__` is modified during the test and this affects later calls to the function.  Is there a way to enable this feature (writability of `__defaults__`) in Cython?\r\n(2) The tests refer to the member `f.__code__.co_posonlyargcount`.  This is a new addition to PyCodeObject as part of the posonly change.  Since the posonly change has yet to be merged into CPython, this member is missing currently.\r\n\r\n\r\n",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-25T04:52:17Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword2(a, /, b):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword2(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword2() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword3(a, b, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword3(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword3() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_arg_invalid_calls(a, b, /, c):\n+    \"\"\"\n+    >>> test_positional_only_and_arg_invalid_calls(1, 2)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (2 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (1 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1,2,3,4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_optional_arg_invalid_calls(a, b, /, c=3):\n+    \"\"\"\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (1 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (0 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2, 3, 4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at most 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_invalid_calls(a, b, /):\n+    \"\"\"\n+    >>> test_positional_only_invalid_calls(1, 2)\n+    >>> test_positional_only_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (1 given)\n+    >>> test_positional_only_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (0 given)\n+    >>> test_positional_only_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_with_optional_invalid_calls(a, b=2, /):\n+    \"\"\"\n+    >>> test_positional_only_with_optional_invalid_calls(1)\n+    >>> test_positional_only_with_optional_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at least 1 positional argument (0 given)\n+    >>> test_positional_only_with_optional_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at most 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_no_standard_args_usage(a, b, /, *, c):\n+    \"\"\"\n+    >>> test_no_standard_args_usage(1, 2, c=3)\n+    >>> test_no_standard_args_usage(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_no_standard_args_usage() takes exactly 2 positional arguments (1 given)\n+    \"\"\"\n+    pass\n+\n+#def test_change_default_pos_only():\n+# TODO: probably remove this, since we have no __defaults__ in Cython?",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r278395361",
            "id": 278395361,
            "in_reply_to_id": 277823260,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM5NTM2MQ==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 180,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 230449951,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/278395361",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r278395478"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/278395478"
                }
            },
            "author_association": "NONE",
            "body": "Looks like such tests have been added to the CPython implementation tests too, and I've copied them here.  They are all commented out currently though.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-25T04:53:17Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r278395478",
            "id": 278395478,
            "in_reply_to_id": 277823938,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM5NTQ3OA==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 9,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 230450085,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/278395478",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r278395509"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/278395509"
                }
            },
            "author_association": "NONE",
            "body": "Noted, I've removed this in many places.",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-25T04:53:29Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r278395509",
            "id": 278395509,
            "in_reply_to_id": 277830444,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM5NTUwOQ==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 96,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 230450117,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/278395509",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r278395533"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/278395533"
                }
            },
            "author_association": "NONE",
            "body": "Done",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-25T04:53:39Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword2(a, /, b):",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r278395533",
            "id": 278395533,
            "in_reply_to_id": 277831063,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM5NTUzMw==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 98,
            "path": "tests/run/posonly.pyx",
            "position": 128,
            "pull_request_review_id": 230450145,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/278395533",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r278395546"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/278395546"
                }
            },
            "author_association": "NONE",
            "body": "Done",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-25T04:53:44Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword2(a, /, b):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword2(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword2() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword3(a, b, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword3(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword3() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_arg_invalid_calls(a, b, /, c):\n+    \"\"\"\n+    >>> test_positional_only_and_arg_invalid_calls(1, 2)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (2 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (1 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1,2,3,4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_optional_arg_invalid_calls(a, b, /, c=3):\n+    \"\"\"\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (1 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (0 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2, 3, 4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at most 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_invalid_calls(a, b, /):\n+    \"\"\"\n+    >>> test_positional_only_invalid_calls(1, 2)\n+    >>> test_positional_only_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (1 given)\n+    >>> test_positional_only_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (0 given)\n+    >>> test_positional_only_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_with_optional_invalid_calls(a, b=2, /):\n+    \"\"\"\n+    >>> test_positional_only_with_optional_invalid_calls(1)\n+    >>> test_positional_only_with_optional_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at least 1 positional argument (0 given)\n+    >>> test_positional_only_with_optional_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at most 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_no_standard_args_usage(a, b, /, *, c):\n+    \"\"\"\n+    >>> test_no_standard_args_usage(1, 2, c=3)\n+    >>> test_no_standard_args_usage(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_no_standard_args_usage() takes exactly 2 positional arguments (1 given)\n+    \"\"\"\n+    pass\n+\n+#def test_change_default_pos_only():\n+# TODO: probably remove this, since we have no __defaults__ in Cython?\n+#    \"\"\"\n+#    >>> test_change_default_pos_only()\n+#    True\n+#    True\n+#    \"\"\"\n+#    def f(a, b=2, /, c=3):\n+#        return a + b + c\n+#\n+#    print((2,3) == f.__defaults__)\n+#    f.__defaults__ = (1, 2, 3)\n+#    print(f(1, 2, 3) == 6)\n+\n+def test_lambdas():\n+    \"\"\"\n+    >>> test_lambdas()\n+    3\n+    3\n+    3\n+    3\n+    3\n+    \"\"\"\n+    x = lambda a, /, b: a + b\n+    print(x(1,2))\n+    print(x(1,b=2))\n+\n+    x = lambda a, /, b=2: a + b\n+    print(x(1))\n+\n+    x = lambda a, b, /: a + b\n+    print(x(1, 2))\n+\n+    x = lambda a, b, /, : a + b\n+    print(x(1, 2))\n+\n+\n+#TODO: need to implement this in the 'error' test\n+#def test_invalid_syntax_lambda(self):\n+#    lambda a, b = 5, /, c: None\n+#    lambda a = 5, b, /, c: None\n+#    lambda a = 5, b, /: None\n+#    lambda a, /, a: None\n+#    lambda a, /, *, a: None\n+#    lambda *args, /: None\n+#    lambda *args, a, /: None\n+#    lambda **kwargs, /: None\n+#    lambda /, a = 1: None\n+#    lambda /, a: None\n+#    lambda /: None\n+#    lambda *, a, /: None\n+#    lambda *, /, a: None\n+\n+class Example:",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r278395546",
            "id": 278395546,
            "in_reply_to_id": 277831824,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM5NTU0Ng==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 232,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 230450162,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/278395546",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r278395568"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/278395568"
                }
            },
            "author_association": "NONE",
            "body": "Done",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-25T04:53:50Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword2(a, /, b):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword2(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword2() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword3(a, b, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword3(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword3() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_arg_invalid_calls(a, b, /, c):\n+    \"\"\"\n+    >>> test_positional_only_and_arg_invalid_calls(1, 2)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (2 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (1 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1,2,3,4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_optional_arg_invalid_calls(a, b, /, c=3):\n+    \"\"\"\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (1 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (0 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2, 3, 4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at most 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_invalid_calls(a, b, /):\n+    \"\"\"\n+    >>> test_positional_only_invalid_calls(1, 2)\n+    >>> test_positional_only_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (1 given)\n+    >>> test_positional_only_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (0 given)\n+    >>> test_positional_only_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_with_optional_invalid_calls(a, b=2, /):\n+    \"\"\"\n+    >>> test_positional_only_with_optional_invalid_calls(1)\n+    >>> test_positional_only_with_optional_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at least 1 positional argument (0 given)\n+    >>> test_positional_only_with_optional_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at most 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_no_standard_args_usage(a, b, /, *, c):\n+    \"\"\"\n+    >>> test_no_standard_args_usage(1, 2, c=3)\n+    >>> test_no_standard_args_usage(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_no_standard_args_usage() takes exactly 2 positional arguments (1 given)\n+    \"\"\"\n+    pass\n+\n+#def test_change_default_pos_only():\n+# TODO: probably remove this, since we have no __defaults__ in Cython?\n+#    \"\"\"\n+#    >>> test_change_default_pos_only()\n+#    True\n+#    True\n+#    \"\"\"\n+#    def f(a, b=2, /, c=3):\n+#        return a + b + c\n+#\n+#    print((2,3) == f.__defaults__)\n+#    f.__defaults__ = (1, 2, 3)\n+#    print(f(1, 2, 3) == 6)\n+\n+def test_lambdas():\n+    \"\"\"\n+    >>> test_lambdas()\n+    3\n+    3\n+    3\n+    3\n+    3\n+    \"\"\"\n+    x = lambda a, /, b: a + b\n+    print(x(1,2))\n+    print(x(1,b=2))\n+\n+    x = lambda a, /, b=2: a + b\n+    print(x(1))\n+\n+    x = lambda a, b, /: a + b\n+    print(x(1, 2))\n+\n+    x = lambda a, b, /, : a + b\n+    print(x(1, 2))\n+\n+\n+#TODO: need to implement this in the 'error' test\n+#def test_invalid_syntax_lambda(self):\n+#    lambda a, b = 5, /, c: None\n+#    lambda a = 5, b, /, c: None\n+#    lambda a = 5, b, /: None\n+#    lambda a, /, a: None\n+#    lambda a, /, *, a: None\n+#    lambda *args, /: None\n+#    lambda *args, a, /: None\n+#    lambda **kwargs, /: None\n+#    lambda /, a = 1: None\n+#    lambda /, a: None\n+#    lambda /: None\n+#    lambda *, a, /: None\n+#    lambda *, /, a: None\n+\n+class Example:\n+    def f(self, a, b, /):\n+        return a, b\n+\n+def test_posonly_methods():",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r278395568",
            "id": 278395568,
            "in_reply_to_id": 277832074,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM5NTU2OA==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 236,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 230450183,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/278395568",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2927#discussion_r278395583"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2927"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/278395583"
                }
            },
            "author_association": "NONE",
            "body": "Done",
            "commit_id": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "created_at": "2019-04-25T04:53:55Z",
            "diff_hunk": "@@ -0,0 +1,323 @@\n+# mode: run\n+# tag: posonly\n+\n+# TODO: remove posonly tag before merge\n+\n+import cython\n+\n+# TODO: add the test below to an 'error' test\n+#def test_invalid_syntax_errors():\n+#    def f(a, b = 5, /, c): pass\n+#    def f(a = 5, b, /, c): pass\n+#    def f(a = 5, b, /): pass\n+#    def f(*args, /): pass\n+#    def f(*args, a, /): pass\n+#    def f(**kwargs, /): pass\n+#    def f(/, a = 1): pass\n+#    def f(/, a): pass\n+#    def f(/): pass\n+#    def f(*, a, /): pass\n+#    def f(*, /, a): pass\n+#    def f(a, /, a): pass\n+#    def f(a, /, *, a): pass\n+#    def f(a, b/2, c): pass\n+\n+def test_optional_posonly_args1(a, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args1(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args1(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args1(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args1(1, 2)\n+    103\n+    >>> test_optional_posonly_args1(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args1() got an unexpected keyword argument 'b'\n+    \"\"\"\n+    return a + b + c\n+\n+def test_optional_posonly_args2(a=1, b=10, /, c=100):\n+    \"\"\"\n+    >>> test_optional_posonly_args2(1, 2, 3)\n+    6\n+    >>> test_optional_posonly_args2(1, 2, c=3)\n+    6\n+    >>> test_optional_posonly_args2(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, 2)\n+    103\n+    >>> test_optional_posonly_args2(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_optional_posonly_args2() got an unexpected keyword argument 'b'\n+    >>> test_optional_posonly_args2(1, c=2)\n+    13\n+    \"\"\"\n+    return a + b + c\n+\n+# TODO: remove the test below?  would need to hard-code the function with > 255 posonly args\n+#def test_syntax_for_many_positional_only():\n+#    # more than 255 positional only arguments, should compile ok\n+#    fundef = \"def f(%s, /):\\n  pass\\n\" % ', '.join('i%d' % i for i in range(300))\n+#    compile(fundef, \"<test>\", \"single\")\n+\n+# TODO: remove the test below?  doesn't seem relevant to Cython implementation\n+#def test_pos_only_definition(self):\n+#    def f(a, b, c, /, d, e=1, *, f, g=2):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1,), f.__defaults__)\n+#\n+#    def f(a, b, c=1, /, d=2, e=3, *, f, g=4):\n+#        pass\n+#\n+#    self.assertEqual(2, f.__code__.co_argcount)  # 2 \"standard args\"\n+#    self.assertEqual(3, f.__code__.co_posonlyargcount)\n+#    self.assertEqual((1, 2, 3), f.__defaults__)\n+\n+def test_pos_only_call_via_unpacking(a, b, /):\n+    \"\"\"\n+    >>> test_pos_only_call_via_unpacking(*[1,2])\n+    3\n+    \"\"\"\n+    return a + b\n+\n+def test_use_positional_as_keyword1(a, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword1(a=1)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword1() takes no keyword arguments\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword2(a, /, b):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword2(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword2() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_use_positional_as_keyword3(a, b, /):\n+    \"\"\"\n+    >>> test_use_positional_as_keyword3(a=1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: test_use_positional_as_keyword3() takes exactly 2 positional arguments (0 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_arg_invalid_calls(a, b, /, c):\n+    \"\"\"\n+    >>> test_positional_only_and_arg_invalid_calls(1, 2)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (2 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (1 given)\n+    >>> test_positional_only_and_arg_invalid_calls(1,2,3,4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_arg_invalid_calls() takes exactly 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_and_optional_arg_invalid_calls(a, b, /, c=3):\n+    \"\"\"\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (1 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at least 2 positional arguments (0 given)\n+    >>> test_positional_only_and_optional_arg_invalid_calls(1, 2, 3, 4)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_and_optional_arg_invalid_calls() takes at most 3 positional arguments (4 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_invalid_calls(a, b, /):\n+    \"\"\"\n+    >>> test_positional_only_invalid_calls(1, 2)\n+    >>> test_positional_only_invalid_calls(1)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (1 given)\n+    >>> test_positional_only_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (0 given)\n+    >>> test_positional_only_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_invalid_calls() takes exactly 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_positional_only_with_optional_invalid_calls(a, b=2, /):\n+    \"\"\"\n+    >>> test_positional_only_with_optional_invalid_calls(1)\n+    >>> test_positional_only_with_optional_invalid_calls()\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at least 1 positional argument (0 given)\n+    >>> test_positional_only_with_optional_invalid_calls(1, 2, 3)\n+    Traceback (most recent call last):\n+    TypeError: test_positional_only_with_optional_invalid_calls() takes at most 2 positional arguments (3 given)\n+    \"\"\"\n+    pass\n+\n+def test_no_standard_args_usage(a, b, /, *, c):\n+    \"\"\"\n+    >>> test_no_standard_args_usage(1, 2, c=3)\n+    >>> test_no_standard_args_usage(1, b=2, c=3)\n+    Traceback (most recent call last):\n+    TypeError: test_no_standard_args_usage() takes exactly 2 positional arguments (1 given)\n+    \"\"\"\n+    pass\n+\n+#def test_change_default_pos_only():\n+# TODO: probably remove this, since we have no __defaults__ in Cython?\n+#    \"\"\"\n+#    >>> test_change_default_pos_only()\n+#    True\n+#    True\n+#    \"\"\"\n+#    def f(a, b=2, /, c=3):\n+#        return a + b + c\n+#\n+#    print((2,3) == f.__defaults__)\n+#    f.__defaults__ = (1, 2, 3)\n+#    print(f(1, 2, 3) == 6)\n+\n+def test_lambdas():\n+    \"\"\"\n+    >>> test_lambdas()\n+    3\n+    3\n+    3\n+    3\n+    3\n+    \"\"\"\n+    x = lambda a, /, b: a + b\n+    print(x(1,2))\n+    print(x(1,b=2))\n+\n+    x = lambda a, /, b=2: a + b\n+    print(x(1))\n+\n+    x = lambda a, b, /: a + b\n+    print(x(1, 2))\n+\n+    x = lambda a, b, /, : a + b\n+    print(x(1, 2))\n+\n+\n+#TODO: need to implement this in the 'error' test\n+#def test_invalid_syntax_lambda(self):\n+#    lambda a, b = 5, /, c: None\n+#    lambda a = 5, b, /, c: None\n+#    lambda a = 5, b, /: None\n+#    lambda a, /, a: None\n+#    lambda a, /, *, a: None\n+#    lambda *args, /: None\n+#    lambda *args, a, /: None\n+#    lambda **kwargs, /: None\n+#    lambda /, a = 1: None\n+#    lambda /, a: None\n+#    lambda /: None\n+#    lambda *, a, /: None\n+#    lambda *, /, a: None\n+\n+class Example:\n+    def f(self, a, b, /):\n+        return a, b\n+\n+def test_posonly_methods():\n+    \"\"\"\n+    >>> Example().f(1,2)\n+    (1, 2)\n+    >>> Example.f(Example(), 1, 2)\n+    (1, 2)\n+    >>> try:\n+    ...     Example.f(1,2)\n+    ... except TypeError:\n+    ...    print(\"Got type error\")\n+    Got type error\n+    >>> Example().f(1, b=2)\n+    Traceback (most recent call last):\n+    TypeError: f() takes exactly 3 positional arguments (2 given)\n+    \"\"\"\n+    pass\n+\n+class X:\n+    def f(self, *, __a=42):\n+        return __a\n+def test_mangling():\n+    \"\"\"\n+    >>> X().f()\n+    42\n+    \"\"\"\n+    pass\n+\n+def global_pos_only_f(a, b, /):\n+    pass\n+\n+def test_module_function():",
            "html_url": "https://github.com/cython/cython/pull/2927#discussion_r278395583",
            "id": 278395583,
            "in_reply_to_id": 277832570,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM5NTU4Mw==",
            "original_commit_id": "76d13088a392f800d493bb717e990ca47ef006a2",
            "original_position": 266,
            "path": "tests/run/posonly.pyx",
            "position": null,
            "pull_request_review_id": 230450197,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2927",
            "updated_at": "2019-04-25T05:50:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/278395583",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2927/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/480421764ac4e8e071ab489050626eeeee481662/comments",
            "commit": {
                "author": {
                    "date": "2019-04-15T00:57:20Z",
                    "email": "tobinrj@tcd.ie",
                    "name": "Josh Tobin"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2019-04-25T05:50:05Z",
                    "email": "tobinrj@tcd.ie",
                    "name": "Josh Tobin"
                },
                "message": "Adds positional only args support (PEP 570)",
                "tree": {
                    "sha": "ad4020a5a5430146b9c2577858d7018d254c4299",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ad4020a5a5430146b9c2577858d7018d254c4299"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/480421764ac4e8e071ab489050626eeeee481662",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            },
            "html_url": "https://github.com/cython/cython/commit/480421764ac4e8e071ab489050626eeeee481662",
            "node_id": "MDY6Q29tbWl0MTgxNTQxNTUzOjQ4MDQyMTc2NGFjNGU4ZTA3MWFiNDg5MDUwNjI2ZWVlZWU0ODE2NjI=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d844746d4115cfc78459236309f6269056ed8c67",
                    "sha": "d844746d4115cfc78459236309f6269056ed8c67",
                    "url": "https://api.github.com/repos/cython/cython/commits/d844746d4115cfc78459236309f6269056ed8c67"
                }
            ],
            "sha": "480421764ac4e8e071ab489050626eeeee481662",
            "url": "https://api.github.com/repos/cython/cython/commits/480421764ac4e8e071ab489050626eeeee481662"
        },
        {
            "author": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0b0042b9e01259ea834e4531f5ac69559c62b4e2/comments",
            "commit": {
                "author": {
                    "date": "2019-04-23T22:12:59Z",
                    "email": "tobinrj@tcd.ie",
                    "name": "Josh Tobin"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2019-04-25T05:50:05Z",
                    "email": "tobinrj@tcd.ie",
                    "name": "Josh Tobin"
                },
                "message": "posonly args: bugfixes & address PR comments",
                "tree": {
                    "sha": "ff10a83bbcaa9fc0cbafb648270c83aabadafcb6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ff10a83bbcaa9fc0cbafb648270c83aabadafcb6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0b0042b9e01259ea834e4531f5ac69559c62b4e2",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            },
            "html_url": "https://github.com/cython/cython/commit/0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "node_id": "MDY6Q29tbWl0MTgxNTQxNTUzOjBiMDA0MmI5ZTAxMjU5ZWE4MzRlNDUzMWY1YWM2OTU1OWM2MmI0ZTI=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/480421764ac4e8e071ab489050626eeeee481662",
                    "sha": "480421764ac4e8e071ab489050626eeeee481662",
                    "url": "https://api.github.com/repos/cython/cython/commits/480421764ac4e8e071ab489050626eeeee481662"
                }
            ],
            "sha": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
            "url": "https://api.github.com/repos/cython/cython/commits/0b0042b9e01259ea834e4531f5ac69559c62b4e2"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/2927/commits",
    "created_at": "2019-04-22T02:49:00Z",
    "diff_url": "https://github.com/cython/cython/pull/2927.diff",
    "head": {
        "label": "rjtobin:pos_args",
        "ref": "pos_args",
        "repo": {
            "archive_url": "https://api.github.com/repos/rjtobin/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/rjtobin/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/rjtobin/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/rjtobin/cython/branches{/branch}",
            "clone_url": "https://github.com/rjtobin/cython.git",
            "collaborators_url": "https://api.github.com/repos/rjtobin/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/rjtobin/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/rjtobin/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/rjtobin/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/rjtobin/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/rjtobin/cython/contributors",
            "created_at": "2019-04-15T18:12:35Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/rjtobin/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/rjtobin/cython/downloads",
            "events_url": "https://api.github.com/repos/rjtobin/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/rjtobin/cython/forks",
            "full_name": "rjtobin/cython",
            "git_commits_url": "https://api.github.com/repos/rjtobin/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/rjtobin/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/rjtobin/cython/git/tags{/sha}",
            "git_url": "git://github.com/rjtobin/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/rjtobin/cython/hooks",
            "html_url": "https://github.com/rjtobin/cython",
            "id": 181541553,
            "issue_comment_url": "https://api.github.com/repos/rjtobin/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/rjtobin/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/rjtobin/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/rjtobin/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/rjtobin/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/rjtobin/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/rjtobin/cython/merges",
            "milestones_url": "https://api.github.com/repos/rjtobin/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxODE1NDE1NTM=",
            "notifications_url": "https://api.github.com/repos/rjtobin/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
                "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
                "followers_url": "https://api.github.com/users/rjtobin/followers",
                "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
                "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rjtobin",
                "id": 5141467,
                "login": "rjtobin",
                "node_id": "MDQ6VXNlcjUxNDE0Njc=",
                "organizations_url": "https://api.github.com/users/rjtobin/orgs",
                "received_events_url": "https://api.github.com/users/rjtobin/received_events",
                "repos_url": "https://api.github.com/users/rjtobin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rjtobin"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/rjtobin/cython/pulls{/number}",
            "pushed_at": "2019-04-25T05:50:35Z",
            "releases_url": "https://api.github.com/repos/rjtobin/cython/releases{/id}",
            "size": 54392,
            "ssh_url": "git@github.com:rjtobin/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/rjtobin/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/rjtobin/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/rjtobin/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/rjtobin/cython/subscription",
            "svn_url": "https://github.com/rjtobin/cython",
            "tags_url": "https://api.github.com/repos/rjtobin/cython/tags",
            "teams_url": "https://api.github.com/repos/rjtobin/cython/teams",
            "trees_url": "https://api.github.com/repos/rjtobin/cython/git/trees{/sha}",
            "updated_at": "2019-04-15T18:12:40Z",
            "url": "https://api.github.com/repos/rjtobin/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "0b0042b9e01259ea834e4531f5ac69559c62b4e2",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
            "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
            "followers_url": "https://api.github.com/users/rjtobin/followers",
            "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/rjtobin",
            "id": 5141467,
            "login": "rjtobin",
            "node_id": "MDQ6VXNlcjUxNDE0Njc=",
            "organizations_url": "https://api.github.com/users/rjtobin/orgs",
            "received_events_url": "https://api.github.com/users/rjtobin/received_events",
            "repos_url": "https://api.github.com/users/rjtobin/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/rjtobin"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/2927",
    "id": 272262615,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/2927",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "70fec32aacd17f3f7b2ca448f2d393ee7d8641bf",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjcyMjYyNjE1",
    "number": 2927,
    "patch_url": "https://github.com/cython/cython/pull/2927.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/2927/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/0b0042b9e01259ea834e4531f5ac69559c62b4e2",
    "title": "[WIP] Adds positional only args support (PEP 570)",
    "updated_at": "2019-04-25T05:50:36Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/2927",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/5141467?v=4",
        "events_url": "https://api.github.com/users/rjtobin/events{/privacy}",
        "followers_url": "https://api.github.com/users/rjtobin/followers",
        "following_url": "https://api.github.com/users/rjtobin/following{/other_user}",
        "gists_url": "https://api.github.com/users/rjtobin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rjtobin",
        "id": 5141467,
        "login": "rjtobin",
        "node_id": "MDQ6VXNlcjUxNDE0Njc=",
        "organizations_url": "https://api.github.com/users/rjtobin/orgs",
        "received_events_url": "https://api.github.com/users/rjtobin/received_events",
        "repos_url": "https://api.github.com/users/rjtobin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rjtobin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rjtobin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rjtobin"
    }
}