{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/4625/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4625/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/4625"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/4625"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4625/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4625"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/98bbaeddec8654eb07ca760d050eb2b150ae0848"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1309,
            "forks_count": 1309,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1097,
            "open_issues_count": 1097,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2022-07-06T14:00:19Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 64409,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 7137,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2022-07-06T14:34:13Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 7137,
            "watchers_count": 7137,
            "web_commit_signoff_required": false
        },
        "sha": "579fcbc29bbc097af323a504447bebf6e2696231",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "This is another attempt for migrating pyximport to importlib machinery. This attempt is based on #4612 but with hope that history is kept in both _pyximport2.py and _pyximport3.py files.\r\n\r\n> *Note*: Both _pyximport2.py and _pyximport3.py file should contain git history of original pyximport.py file. But pyximport.py file is newly created and does not contain history of previous pyximport.py. I don't think it is problem since both _pyximport2.py and _pyximport3.py files should have this history.\r\n\r\nFixes #4560",
    "closed_at": "2022-07-04T19:47:19Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r848777622"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/848777622"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's not write code that we already know will break in Python 4.\r\n```suggestion\r\nif sys.version_info < (3, 5):\r\n    # _pyximport3 module requires at least Python 3.5\r\n    from pyximport._pyximport2 import install, uninstall, show_docs\r\nelse:\r\n    from pyximport._pyximport3 import install, uninstall, show_docs\r\n```",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-12T19:02:27Z",
            "diff_hunk": "@@ -1,606 +1,11 @@\n-\"\"\"\n-Import hooks; when installed with the install() function, these hooks\n-allow importing .pyx files as if they were Python modules.\n-\n-If you want the hook installed every time you run Python\n-you can add it to your Python version by adding these lines to\n-sitecustomize.py (which you can create from scratch in site-packages\n-if it doesn't exist there or somewhere else on your python path)::\n-\n-    import pyximport\n-    pyximport.install()\n-\n-For instance on the Mac with a non-system Python 2.3, you could create\n-sitecustomize.py with only those two lines at\n-/usr/local/lib/python2.3/site-packages/sitecustomize.py .\n-\n-A custom distutils.core.Extension instance and setup() args\n-(Distribution) for for the build can be defined by a <modulename>.pyxbld\n-file like:\n-\n-# examplemod.pyxbld\n-def make_ext(modname, pyxfilename):\n-    from distutils.extension import Extension\n-    return Extension(name = modname,\n-                     sources=[pyxfilename, 'hello.c'],\n-                     include_dirs=['/myinclude'] )\n-def make_setup_args():\n-    return dict(script_args=[\"--compiler=mingw32\"])\n-\n-Extra dependencies can be defined by a <modulename>.pyxdep .\n-See README.\n-\n-Since Cython 0.11, the :mod:`pyximport` module also has experimental\n-compilation support for normal Python modules.  This allows you to\n-automatically run Cython on every .pyx and .py module that Python\n-imports, including parts of the standard library and installed\n-packages.  Cython will still fail to compile a lot of Python modules,\n-in which case the import mechanism will fall back to loading the\n-Python source modules instead.  The .py import mechanism is installed\n-like this::\n-\n-    pyximport.install(pyimport = True)\n-\n-Running this module as a top-level script will run a test and then print\n-the documentation.\n-\n-This code is based on the Py2.3+ import protocol as described in PEP 302.\n-\"\"\"\n-\n-import glob\n-import imp\n-import os\n+from __future__ import absolute_import\n import sys\n-from zipimport import zipimporter, ZipImportError\n-\n-mod_name = \"pyximport\"\n-\n-PYX_EXT = \".pyx\"\n-PYXDEP_EXT = \".pyxdep\"\n-PYXBLD_EXT = \".pyxbld\"\n-\n-DEBUG_IMPORT = False\n-\n-\n-def _print(message, args):\n-    if args:\n-        message = message % args\n-    print(message)\n-\n-\n-def _debug(message, *args):\n-    if DEBUG_IMPORT:\n-        _print(message, args)\n-\n-\n-def _info(message, *args):\n-    _print(message, args)\n-\n-\n-# Performance problem: for every PYX file that is imported, we will\n-# invoke the whole distutils infrastructure even if the module is\n-# already built. It might be more efficient to only do it when the\n-# mod time of the .pyx is newer than the mod time of the .so but\n-# the question is how to get distutils to tell me the name of the .so\n-# before it builds it. Maybe it is easy...but maybe the performance\n-# issue isn't real.\n-def _load_pyrex(name, filename):\n-    \"Load a pyrex file given a name and filename.\"\n-\n-\n-def get_distutils_extension(modname, pyxfilename, language_level=None):\n-#    try:\n-#        import hashlib\n-#    except ImportError:\n-#        import md5 as hashlib\n-#    extra = \"_\" + hashlib.md5(open(pyxfilename).read()).hexdigest()\n-#    modname = modname + extra\n-    extension_mod,setup_args = handle_special_build(modname, pyxfilename)\n-    if not extension_mod:\n-        if not isinstance(pyxfilename, str):\n-            # distutils is stupid in Py2 and requires exactly 'str'\n-            # => encode accidentally coerced unicode strings back to str\n-            pyxfilename = pyxfilename.encode(sys.getfilesystemencoding())\n-        from distutils.extension import Extension\n-        extension_mod = Extension(name = modname, sources=[pyxfilename])\n-        if language_level is not None:\n-            extension_mod.cython_directives = {'language_level': language_level}\n-    return extension_mod,setup_args\n-\n-\n-def handle_special_build(modname, pyxfilename):\n-    special_build = os.path.splitext(pyxfilename)[0] + PYXBLD_EXT\n-    ext = None\n-    setup_args={}\n-    if os.path.exists(special_build):\n-        # globls = {}\n-        # locs = {}\n-        # execfile(special_build, globls, locs)\n-        # ext = locs[\"make_ext\"](modname, pyxfilename)\n-        with open(special_build) as fid:\n-            mod = imp.load_source(\"XXXX\", special_build, fid)\n-        make_ext = getattr(mod,'make_ext',None)\n-        if make_ext:\n-            ext = make_ext(modname, pyxfilename)\n-            assert ext and ext.sources, \"make_ext in %s did not return Extension\" % special_build\n-        make_setup_args = getattr(mod, 'make_setup_args',None)\n-        if make_setup_args:\n-            setup_args = make_setup_args()\n-            assert isinstance(setup_args,dict), (\"make_setup_args in %s did not return a dict\"\n-                                         % special_build)\n-        assert set or setup_args, (\"neither make_ext nor make_setup_args %s\"\n-                                         % special_build)\n-        ext.sources = [os.path.join(os.path.dirname(special_build), source)\n-                       for source in ext.sources]\n-    return ext, setup_args\n-\n-\n-def handle_dependencies(pyxfilename):\n-    testing = '_test_files' in globals()\n-    dependfile = os.path.splitext(pyxfilename)[0] + PYXDEP_EXT\n-\n-    # by default let distutils decide whether to rebuild on its own\n-    # (it has a better idea of what the output file will be)\n-\n-    # but we know more about dependencies so force a rebuild if\n-    # some of the dependencies are newer than the pyxfile.\n-    if os.path.exists(dependfile):\n-        with open(dependfile) as fid:\n-            depends = fid.readlines()\n-        depends = [depend.strip() for depend in depends]\n-\n-        # gather dependencies in the \"files\" variable\n-        # the dependency file is itself a dependency\n-        files = [dependfile]\n-        for depend in depends:\n-            fullpath = os.path.join(os.path.dirname(dependfile),\n-                                    depend)\n-            files.extend(glob.glob(fullpath))\n-\n-        # only for unit testing to see we did the right thing\n-        if testing:\n-            _test_files[:] = []  #$pycheck_no\n-\n-        # if any file that the pyxfile depends upon is newer than\n-        # the pyx file, 'touch' the pyx file so that distutils will\n-        # be tricked into rebuilding it.\n-        for file in files:\n-            from distutils.dep_util import newer\n-            if newer(file, pyxfilename):\n-                _debug(\"Rebuilding %s because of %s\", pyxfilename, file)\n-                filetime = os.path.getmtime(file)\n-                os.utime(pyxfilename, (filetime, filetime))\n-                if testing:\n-                    _test_files.append(file)\n-\n-\n-def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_level=None):\n-    assert os.path.exists(pyxfilename), \"Path does not exist: %s\" % pyxfilename\n-    handle_dependencies(pyxfilename)\n-\n-    extension_mod, setup_args = get_distutils_extension(name, pyxfilename, language_level)\n-    build_in_temp = pyxargs.build_in_temp\n-    sargs = pyxargs.setup_args.copy()\n-    sargs.update(setup_args)\n-    build_in_temp = sargs.pop('build_in_temp',build_in_temp)\n-\n-    from . import pyxbuild\n-    so_path = pyxbuild.pyx_to_dll(pyxfilename, extension_mod,\n-                                  build_in_temp=build_in_temp,\n-                                  pyxbuild_dir=pyxbuild_dir,\n-                                  setup_args=sargs,\n-                                  inplace=inplace,\n-                                  reload_support=pyxargs.reload_support)\n-    assert os.path.exists(so_path), \"Cannot find: %s\" % so_path\n-\n-    junkpath = os.path.join(os.path.dirname(so_path), name+\"_*\")  #very dangerous with --inplace ? yes, indeed, trying to eat my files ;)\n-    junkstuff = glob.glob(junkpath)\n-    for path in junkstuff:\n-        if path != so_path:\n-            try:\n-                os.remove(path)\n-            except IOError:\n-                _info(\"Couldn't remove %s\", path)\n-\n-    return so_path\n-\n-\n-def load_module(name, pyxfilename, pyxbuild_dir=None, is_package=False,\n-                build_inplace=False, language_level=None, so_path=None):\n-    try:\n-        if so_path is None:\n-            if is_package:\n-                module_name = name + '.__init__'\n-            else:\n-                module_name = name\n-            so_path = build_module(module_name, pyxfilename, pyxbuild_dir,\n-                                   inplace=build_inplace, language_level=language_level)\n-        mod = imp.load_dynamic(name, so_path)\n-        if is_package and not hasattr(mod, '__path__'):\n-            mod.__path__ = [os.path.dirname(so_path)]\n-        assert mod.__file__ == so_path, (mod.__file__, so_path)\n-    except Exception as failure_exc:\n-        _debug(\"Failed to load extension module: %r\" % failure_exc)\n-        if pyxargs.load_py_module_on_import_failure and pyxfilename.endswith('.py'):\n-            # try to fall back to normal import\n-            mod = imp.load_source(name, pyxfilename)\n-            assert mod.__file__ in (pyxfilename, pyxfilename+'c', pyxfilename+'o'), (mod.__file__, pyxfilename)\n-        else:\n-            tb = sys.exc_info()[2]\n-            import traceback\n-            exc = ImportError(\"Building module %s failed: %s\" % (\n-                name, traceback.format_exception_only(*sys.exc_info()[:2])))\n-            if sys.version_info[0] >= 3:\n-                raise exc.with_traceback(tb)\n-            else:\n-                exec(\"raise exc, None, tb\", {'exc': exc, 'tb': tb})\n-    return mod\n-\n-\n-# import hooks\n-\n-class PyxImporter(object):\n-    \"\"\"A meta-path importer for .pyx files.\n-    \"\"\"\n-    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False,\n-                 language_level=None):\n-        self.extension = extension\n-        self.pyxbuild_dir = pyxbuild_dir\n-        self.inplace = inplace\n-        self.language_level = language_level\n-\n-    def find_module(self, fullname, package_path=None):\n-        if fullname in sys.modules  and  not pyxargs.reload_support:\n-            return None  # only here when reload()\n-\n-        # package_path might be a _NamespacePath. Convert that into a list...\n-        if package_path is not None and not isinstance(package_path, list):\n-            package_path = list(package_path)\n-        try:\n-            fp, pathname, (ext,mode,ty) = imp.find_module(fullname,package_path)\n-            if fp: fp.close()  # Python should offer a Default-Loader to avoid this double find/open!\n-            if pathname and ty == imp.PKG_DIRECTORY:\n-                pkg_file = os.path.join(pathname, '__init__'+self.extension)\n-                if os.path.isfile(pkg_file):\n-                    return PyxLoader(fullname, pathname,\n-                        init_path=pkg_file,\n-                        pyxbuild_dir=self.pyxbuild_dir,\n-                        inplace=self.inplace,\n-                        language_level=self.language_level)\n-            if pathname and pathname.endswith(self.extension):\n-                return PyxLoader(fullname, pathname,\n-                                 pyxbuild_dir=self.pyxbuild_dir,\n-                                 inplace=self.inplace,\n-                                 language_level=self.language_level)\n-            if ty != imp.C_EXTENSION:  # only when an extension, check if we have a .pyx next!\n-                return None\n-\n-            # find .pyx fast, when .so/.pyd exist --inplace\n-            pyxpath = os.path.splitext(pathname)[0]+self.extension\n-            if os.path.isfile(pyxpath):\n-                return PyxLoader(fullname, pyxpath,\n-                                 pyxbuild_dir=self.pyxbuild_dir,\n-                                 inplace=self.inplace,\n-                                 language_level=self.language_level)\n-\n-            # .so/.pyd's on PATH should not be remote from .pyx's\n-            # think no need to implement PyxArgs.importer_search_remote here?\n-\n-        except ImportError:\n-            pass\n-\n-        # searching sys.path ...\n-\n-        #if DEBUG_IMPORT:  print \"SEARCHING\", fullname, package_path\n-\n-        mod_parts = fullname.split('.')\n-        module_name = mod_parts[-1]\n-        pyx_module_name = module_name + self.extension\n-\n-        # this may work, but it returns the file content, not its path\n-        #import pkgutil\n-        #pyx_source = pkgutil.get_data(package, pyx_module_name)\n-\n-        paths = package_path or sys.path\n-        for path in paths:\n-            pyx_data = None\n-            if not path:\n-                path = os.getcwd()\n-            elif os.path.isfile(path):\n-                try:\n-                    zi = zipimporter(path)\n-                    pyx_data = zi.get_data(pyx_module_name)\n-                except (ZipImportError, IOError, OSError):\n-                    continue  # Module not found.\n-                # unzip the imported file into the build dir\n-                # FIXME: can interfere with later imports if build dir is in sys.path and comes before zip file\n-                path = self.pyxbuild_dir\n-            elif not os.path.isabs(path):\n-                path = os.path.abspath(path)\n-\n-            pyx_module_path = os.path.join(path, pyx_module_name)\n-            if pyx_data is not None:\n-                if not os.path.exists(path):\n-                    try:\n-                        os.makedirs(path)\n-                    except OSError:\n-                        # concurrency issue?\n-                        if not os.path.exists(path):\n-                            raise\n-                with open(pyx_module_path, \"wb\") as f:\n-                    f.write(pyx_data)\n-            elif not os.path.isfile(pyx_module_path):\n-                continue  # Module not found.\n-\n-            return PyxLoader(fullname, pyx_module_path,\n-                             pyxbuild_dir=self.pyxbuild_dir,\n-                             inplace=self.inplace,\n-                             language_level=self.language_level)\n-\n-        # not found, normal package, not a .pyx file, none of our business\n-        _debug(\"%s not found\" % fullname)\n-        return None\n-\n-\n-class PyImporter(PyxImporter):\n-    \"\"\"A meta-path importer for normal .py files.\n-    \"\"\"\n-    def __init__(self, pyxbuild_dir=None, inplace=False, language_level=None):\n-        if language_level is None:\n-            language_level = sys.version_info[0]\n-        self.super = super(PyImporter, self)\n-        self.super.__init__(extension='.py', pyxbuild_dir=pyxbuild_dir, inplace=inplace,\n-                            language_level=language_level)\n-        self.uncompilable_modules = {}\n-        self.blocked_modules = ['Cython', 'pyxbuild', 'pyximport.pyxbuild',\n-                                'distutils']\n-        self.blocked_packages = ['Cython.', 'distutils.']\n-\n-    def find_module(self, fullname, package_path=None):\n-        if fullname in sys.modules:\n-            return None\n-        if any([fullname.startswith(pkg) for pkg in self.blocked_packages]):\n-            return None\n-        if fullname in self.blocked_modules:\n-            # prevent infinite recursion\n-            return None\n-        if _lib_loader.knows(fullname):\n-            return _lib_loader\n-        _debug(\"trying import of module '%s'\", fullname)\n-        if fullname in self.uncompilable_modules:\n-            path, last_modified = self.uncompilable_modules[fullname]\n-            try:\n-                new_last_modified = os.stat(path).st_mtime\n-                if new_last_modified > last_modified:\n-                    # import would fail again\n-                    return None\n-            except OSError:\n-                # module is no longer where we found it, retry the import\n-                pass\n-\n-        self.blocked_modules.append(fullname)\n-        try:\n-            importer = self.super.find_module(fullname, package_path)\n-            if importer is not None:\n-                if importer.init_path:\n-                    path = importer.init_path\n-                    real_name = fullname + '.__init__'\n-                else:\n-                    path = importer.path\n-                    real_name = fullname\n-                _debug(\"importer found path %s for module %s\", path, real_name)\n-                try:\n-                    so_path = build_module(\n-                        real_name, path,\n-                        pyxbuild_dir=self.pyxbuild_dir,\n-                        language_level=self.language_level,\n-                        inplace=self.inplace)\n-                    _lib_loader.add_lib(fullname, path, so_path,\n-                                        is_package=bool(importer.init_path))\n-                    return _lib_loader\n-                except Exception:\n-                    if DEBUG_IMPORT:\n-                        import traceback\n-                        traceback.print_exc()\n-                    # build failed, not a compilable Python module\n-                    try:\n-                        last_modified = os.stat(path).st_mtime\n-                    except OSError:\n-                        last_modified = 0\n-                    self.uncompilable_modules[fullname] = (path, last_modified)\n-                    importer = None\n-        finally:\n-            self.blocked_modules.pop()\n-        return importer\n-\n-\n-class LibLoader(object):\n-    def __init__(self):\n-        self._libs = {}\n-\n-    def load_module(self, fullname):\n-        try:\n-            source_path, so_path, is_package = self._libs[fullname]\n-        except KeyError:\n-            raise ValueError(\"invalid module %s\" % fullname)\n-        _debug(\"Loading shared library module '%s' from %s\", fullname, so_path)\n-        return load_module(fullname, source_path, so_path=so_path, is_package=is_package)\n-\n-    def add_lib(self, fullname, path, so_path, is_package):\n-        self._libs[fullname] = (path, so_path, is_package)\n-\n-    def knows(self, fullname):\n-        return fullname in self._libs\n-\n-_lib_loader = LibLoader()\n-\n-\n-class PyxLoader(object):\n-    def __init__(self, fullname, path, init_path=None, pyxbuild_dir=None,\n-                 inplace=False, language_level=None):\n-        _debug(\"PyxLoader created for loading %s from %s (init path: %s)\",\n-               fullname, path, init_path)\n-        self.fullname = fullname\n-        self.path, self.init_path = path, init_path\n-        self.pyxbuild_dir = pyxbuild_dir\n-        self.inplace = inplace\n-        self.language_level = language_level\n-\n-    def load_module(self, fullname):\n-        assert self.fullname == fullname, (\n-            \"invalid module, expected %s, got %s\" % (\n-            self.fullname, fullname))\n-        if self.init_path:\n-            # package\n-            #print \"PACKAGE\", fullname\n-            module = load_module(fullname, self.init_path,\n-                                 self.pyxbuild_dir, is_package=True,\n-                                 build_inplace=self.inplace,\n-                                 language_level=self.language_level)\n-            module.__path__ = [self.path]\n-        else:\n-            #print \"MODULE\", fullname\n-            module = load_module(fullname, self.path,\n-                                 self.pyxbuild_dir,\n-                                 build_inplace=self.inplace,\n-                                 language_level=self.language_level)\n-        return module\n-\n-\n-#install args\n-class PyxArgs(object):\n-    build_dir=True\n-    build_in_temp=True\n-    setup_args={}   #None\n-\n-##pyxargs=None\n-\n-\n-def _have_importers():\n-    has_py_importer = False\n-    has_pyx_importer = False\n-    for importer in sys.meta_path:\n-        if isinstance(importer, PyxImporter):\n-            if isinstance(importer, PyImporter):\n-                has_py_importer = True\n-            else:\n-                has_pyx_importer = True\n-\n-    return has_py_importer, has_pyx_importer\n-\n-\n-def install(pyximport=True, pyimport=False, build_dir=None, build_in_temp=True,\n-            setup_args=None, reload_support=False,\n-            load_py_module_on_import_failure=False, inplace=False,\n-            language_level=None):\n-    \"\"\" Main entry point for pyxinstall.\n-\n-    Call this to install the ``.pyx`` import hook in\n-    your meta-path for a single Python process.  If you want it to be\n-    installed whenever you use Python, add it to your ``sitecustomize``\n-    (as described above).\n-\n-    :param pyximport: If set to False, does not try to import ``.pyx`` files.\n-\n-    :param pyimport: You can pass ``pyimport=True`` to also\n-        install the ``.py`` import hook\n-        in your meta-path.  Note, however, that it is rather experimental,\n-        will not work at all for some ``.py`` files and packages, and will\n-        heavily slow down your imports due to search and compilation.\n-        Use at your own risk.\n-\n-    :param build_dir: By default, compiled modules will end up in a ``.pyxbld``\n-        directory in the user's home directory.  Passing a different path\n-        as ``build_dir`` will override this.\n-\n-    :param build_in_temp: If ``False``, will produce the C files locally. Working\n-        with complex dependencies and debugging becomes more easy. This\n-        can principally interfere with existing files of the same name.\n-\n-    :param setup_args: Dict of arguments for Distribution.\n-        See ``distutils.core.setup()``.\n-\n-    :param reload_support: Enables support for dynamic\n-        ``reload(my_module)``, e.g. after a change in the Cython code.\n-        Additional files ``<so_path>.reloadNN`` may arise on that account, when\n-        the previously loaded module file cannot be overwritten.\n-\n-    :param load_py_module_on_import_failure: If the compilation of a ``.py``\n-        file succeeds, but the subsequent import fails for some reason,\n-        retry the import with the normal ``.py`` module instead of the\n-        compiled module.  Note that this may lead to unpredictable results\n-        for modules that change the system state during their import, as\n-        the second import will rerun these modifications in whatever state\n-        the system was left after the import of the compiled module\n-        failed.\n-\n-    :param inplace: Install the compiled module\n-        (``.so`` for Linux and Mac / ``.pyd`` for Windows)\n-        next to the source file.\n-\n-    :param language_level: The source language level to use: 2 or 3.\n-        The default is to use the language level of the current Python\n-        runtime for .py files and Py2 for ``.pyx`` files.\n-    \"\"\"\n-    if setup_args is None:\n-        setup_args = {}\n-    if not build_dir:\n-        build_dir = os.path.join(os.path.expanduser('~'), '.pyxbld')\n-\n-    global pyxargs\n-    pyxargs = PyxArgs()  #$pycheck_no\n-    pyxargs.build_dir = build_dir\n-    pyxargs.build_in_temp = build_in_temp\n-    pyxargs.setup_args = (setup_args or {}).copy()\n-    pyxargs.reload_support = reload_support\n-    pyxargs.load_py_module_on_import_failure = load_py_module_on_import_failure\n-\n-    has_py_importer, has_pyx_importer = _have_importers()\n-    py_importer, pyx_importer = None, None\n-\n-    if pyimport and not has_py_importer:\n-        py_importer = PyImporter(pyxbuild_dir=build_dir, inplace=inplace,\n-                                 language_level=language_level)\n-        # make sure we import Cython before we install the import hook\n-        import Cython.Compiler.Main, Cython.Compiler.Pipeline, Cython.Compiler.Optimize\n-        sys.meta_path.insert(0, py_importer)\n-\n-    if pyximport and not has_pyx_importer:\n-        pyx_importer = PyxImporter(pyxbuild_dir=build_dir, inplace=inplace,\n-                                   language_level=language_level)\n-        sys.meta_path.append(pyx_importer)\n-\n-    return py_importer, pyx_importer\n-\n-\n-def uninstall(py_importer, pyx_importer):\n-    \"\"\"\n-    Uninstall an import hook.\n-    \"\"\"\n-    try:\n-        sys.meta_path.remove(py_importer)\n-    except ValueError:\n-        pass\n-\n-    try:\n-        sys.meta_path.remove(pyx_importer)\n-    except ValueError:\n-        pass\n-\n-\n-# MAIN\n-\n-def show_docs():\n-    import __main__\n-    __main__.__name__ = mod_name\n-    for name in dir(__main__):\n-        item = getattr(__main__, name)\n-        try:\n-            setattr(item, \"__module__\", mod_name)\n-        except (AttributeError, TypeError):\n-            pass\n-    help(__main__)\n \n+if sys.version_info.major == 3 and sys.version_info.minor >= 5:\n+    # _pyximport3 module requires at least Python 3.5\n+    from pyximport._pyximport3 import install, uninstall, show_docs\n+else:\n+    from pyximport._pyximport2 import install, uninstall, show_docs",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r848777622",
            "id": 848777622,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yl1GW",
            "original_commit_id": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "original_line": 8,
            "original_position": 609,
            "original_start_line": 4,
            "path": "pyximport/pyximport.py",
            "position": null,
            "pull_request_review_id": 940018614,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/848777622/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-04-12T19:24:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/848777622",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r848778721"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/848778721"
                }
            },
            "author_association": "MEMBER",
            "body": "Why remove the comment?",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-12T19:03:59Z",
            "diff_hunk": "@@ -205,283 +213,142 @@ def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_l\n     return so_path\n \n \n-def load_module(name, pyxfilename, pyxbuild_dir=None, is_package=False,\n-                build_inplace=False, language_level=None, so_path=None):\n-    try:\n-        if so_path is None:\n-            if is_package:\n-                module_name = name + '.__init__'\n-            else:\n-                module_name = name\n-            so_path = build_module(module_name, pyxfilename, pyxbuild_dir,\n-                                   inplace=build_inplace, language_level=language_level)\n-        mod = imp.load_dynamic(name, so_path)\n-        if is_package and not hasattr(mod, '__path__'):\n-            mod.__path__ = [os.path.dirname(so_path)]\n-        assert mod.__file__ == so_path, (mod.__file__, so_path)\n-    except Exception as failure_exc:\n-        _debug(\"Failed to load extension module: %r\" % failure_exc)\n-        if pyxargs.load_py_module_on_import_failure and pyxfilename.endswith('.py'):\n-            # try to fall back to normal import\n-            mod = imp.load_source(name, pyxfilename)\n-            assert mod.__file__ in (pyxfilename, pyxfilename+'c', pyxfilename+'o'), (mod.__file__, pyxfilename)\n-        else:\n-            tb = sys.exc_info()[2]\n-            import traceback\n-            exc = ImportError(\"Building module %s failed: %s\" % (\n-                name, traceback.format_exception_only(*sys.exc_info()[:2])))\n-            if sys.version_info[0] >= 3:\n-                raise exc.with_traceback(tb)\n-            else:\n-                exec(\"raise exc, None, tb\", {'exc': exc, 'tb': tb})\n-    return mod\n-\n-\n # import hooks\n \n-class PyxImporter(object):\n-    \"\"\"A meta-path importer for .pyx files.\n-    \"\"\"\n-    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False,\n-                 language_level=None):\n-        self.extension = extension\n+class PyxImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n         self.pyxbuild_dir = pyxbuild_dir\n         self.inplace = inplace\n         self.language_level = language_level\n+        self.extension = extension\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n+        if \".\" in fullname:\n+            *parents, name = fullname.split(\".\")\n+        else:\n+            name = fullname\n+        for entry in path:\n+            if os.path.isdir(os.path.join(entry, name)):\n+                # this module has child modules\n+                filename = os.path.join(entry, name, \"__init__.py\")     # FIXME: __init__.pyx ?\n+                submodule_locations = [os.path.join(entry, name)]\n+            else:\n+                filename = os.path.join(entry, name + self.extension)\n+                submodule_locations = None\n+            if not os.path.exists(filename):\n+                continue\n \n-    def find_module(self, fullname, package_path=None):\n-        if fullname in sys.modules  and  not pyxargs.reload_support:\n-            return None  # only here when reload()\n+            return spec_from_file_location(\n+                fullname, filename,\n+                loader=PyxImportLoader(filename, self.pyxbuild_dir, self.inplace, self.language_level),\n+                submodule_search_locations=submodule_locations)\n \n-        # package_path might be a _NamespacePath. Convert that into a list...\n-        if package_path is not None and not isinstance(package_path, list):\n-            package_path = list(package_path)\n-        try:\n-            fp, pathname, (ext,mode,ty) = imp.find_module(fullname,package_path)\n-            if fp: fp.close()  # Python should offer a Default-Loader to avoid this double find/open!\n-            if pathname and ty == imp.PKG_DIRECTORY:\n-                pkg_file = os.path.join(pathname, '__init__'+self.extension)\n-                if os.path.isfile(pkg_file):\n-                    return PyxLoader(fullname, pathname,\n-                        init_path=pkg_file,\n-                        pyxbuild_dir=self.pyxbuild_dir,\n-                        inplace=self.inplace,\n-                        language_level=self.language_level)\n-            if pathname and pathname.endswith(self.extension):\n-                return PyxLoader(fullname, pathname,\n-                                 pyxbuild_dir=self.pyxbuild_dir,\n-                                 inplace=self.inplace,\n-                                 language_level=self.language_level)\n-            if ty != imp.C_EXTENSION:  # only when an extension, check if we have a .pyx next!\n-                return None\n-\n-            # find .pyx fast, when .so/.pyd exist --inplace\n-            pyxpath = os.path.splitext(pathname)[0]+self.extension\n-            if os.path.isfile(pyxpath):\n-                return PyxLoader(fullname, pyxpath,\n-                                 pyxbuild_dir=self.pyxbuild_dir,\n-                                 inplace=self.inplace,\n-                                 language_level=self.language_level)\n-\n-            # .so/.pyd's on PATH should not be remote from .pyx's\n-            # think no need to implement PyxArgs.importer_search_remote here?\n-\n-        except ImportError:\n-            pass\n+        return None  # we don't know how to import this\n \n-        # searching sys.path ...\n-\n-        #if DEBUG_IMPORT:  print \"SEARCHING\", fullname, package_path\n-\n-        mod_parts = fullname.split('.')\n-        module_name = mod_parts[-1]\n-        pyx_module_name = module_name + self.extension\n-\n-        # this may work, but it returns the file content, not its path\n-        #import pkgutil\n-        #pyx_source = pkgutil.get_data(package, pyx_module_name)\n-\n-        paths = package_path or sys.path\n-        for path in paths:\n-            pyx_data = None\n-            if not path:\n-                path = os.getcwd()\n-            elif os.path.isfile(path):\n-                try:\n-                    zi = zipimporter(path)\n-                    pyx_data = zi.get_data(pyx_module_name)\n-                except (ZipImportError, IOError, OSError):\n-                    continue  # Module not found.\n-                # unzip the imported file into the build dir\n-                # FIXME: can interfere with later imports if build dir is in sys.path and comes before zip file\n-                path = self.pyxbuild_dir\n-            elif not os.path.isabs(path):\n-                path = os.path.abspath(path)\n-\n-            pyx_module_path = os.path.join(path, pyx_module_name)\n-            if pyx_data is not None:\n-                if not os.path.exists(path):\n-                    try:\n-                        os.makedirs(path)\n-                    except OSError:\n-                        # concurrency issue?\n-                        if not os.path.exists(path):\n-                            raise\n-                with open(pyx_module_path, \"wb\") as f:\n-                    f.write(pyx_data)\n-            elif not os.path.isfile(pyx_module_path):\n-                continue  # Module not found.\n-\n-            return PyxLoader(fullname, pyx_module_path,\n-                             pyxbuild_dir=self.pyxbuild_dir,\n-                             inplace=self.inplace,\n-                             language_level=self.language_level)\n-\n-        # not found, normal package, not a .pyx file, none of our business\n-        _debug(\"%s not found\" % fullname)\n-        return None\n-\n-\n-class PyImporter(PyxImporter):\n-    \"\"\"A meta-path importer for normal .py files.\n-    \"\"\"\n-    def __init__(self, pyxbuild_dir=None, inplace=False, language_level=None):\n-        if language_level is None:\n-            language_level = sys.version_info[0]\n-        self.super = super(PyImporter, self)\n-        self.super.__init__(extension='.py', pyxbuild_dir=pyxbuild_dir, inplace=inplace,\n-                            language_level=language_level)\n+\n+class PyImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PY_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n         self.uncompilable_modules = {}\n         self.blocked_modules = ['Cython', 'pyxbuild', 'pyximport.pyxbuild',\n-                                'distutils']\n+                                'distutils', 'cython']\n         self.blocked_packages = ['Cython.', 'distutils.']\n \n-    def find_module(self, fullname, package_path=None):\n+    def find_spec(self, fullname, path, target=None):\n         if fullname in sys.modules:\n             return None\n         if any([fullname.startswith(pkg) for pkg in self.blocked_packages]):\n             return None\n         if fullname in self.blocked_modules:\n             # prevent infinite recursion\n             return None\n-        if _lib_loader.knows(fullname):\n-            return _lib_loader\n-        _debug(\"trying import of module '%s'\", fullname)\n-        if fullname in self.uncompilable_modules:\n-            path, last_modified = self.uncompilable_modules[fullname]\n-            try:\n-                new_last_modified = os.stat(path).st_mtime\n-                if new_last_modified > last_modified:\n-                    # import would fail again\n-                    return None\n-            except OSError:\n-                # module is no longer where we found it, retry the import\n-                pass\n \n         self.blocked_modules.append(fullname)\n+        name = fullname\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n         try:\n-            importer = self.super.find_module(fullname, package_path)\n-            if importer is not None:\n-                if importer.init_path:\n-                    path = importer.init_path\n-                    real_name = fullname + '.__init__'\n+            for entry in path:\n+                if os.path.isdir(os.path.join(entry, name)):\n+                    # this module has child modules\n+                    filename = os.path.join(entry, name, \"__init__.py\")\n+                    submodule_locations = [os.path.join(entry, name)]\n                 else:\n-                    path = importer.path\n-                    real_name = fullname\n-                _debug(\"importer found path %s for module %s\", path, real_name)\n-                try:\n-                    so_path = build_module(\n-                        real_name, path,\n-                        pyxbuild_dir=self.pyxbuild_dir,\n-                        language_level=self.language_level,\n-                        inplace=self.inplace)\n-                    _lib_loader.add_lib(fullname, path, so_path,\n-                                        is_package=bool(importer.init_path))\n-                    return _lib_loader\n-                except Exception:\n-                    if DEBUG_IMPORT:\n-                        import traceback\n-                        traceback.print_exc()\n-                    # build failed, not a compilable Python module\n-                    try:\n-                        last_modified = os.stat(path).st_mtime\n-                    except OSError:\n-                        last_modified = 0\n-                    self.uncompilable_modules[fullname] = (path, last_modified)\n-                    importer = None\n+                    filename = os.path.join(entry, name + PY_EXT)\n+                    submodule_locations = None\n+                if not os.path.exists(filename):\n+                    continue\n+\n+                return spec_from_file_location(\n+                    fullname, filename,\n+                    loader=PyxImportLoader(filename, self.pyxbuild_dir, self.inplace, self.language_level),\n+                    submodule_search_locations=submodule_locations)\n         finally:\n             self.blocked_modules.pop()\n-        return importer\n-\n-\n-class LibLoader(object):\n-    def __init__(self):\n-        self._libs = {}\n-\n-    def load_module(self, fullname):\n-        try:\n-            source_path, so_path, is_package = self._libs[fullname]\n-        except KeyError:\n-            raise ValueError(\"invalid module %s\" % fullname)\n-        _debug(\"Loading shared library module '%s' from %s\", fullname, so_path)\n-        return load_module(fullname, source_path, so_path=so_path, is_package=is_package)\n \n-    def add_lib(self, fullname, path, so_path, is_package):\n-        self._libs[fullname] = (path, so_path, is_package)\n+        return None  # we don't know how to import this\n \n-    def knows(self, fullname):\n-        return fullname in self._libs\n \n-_lib_loader = LibLoader()\n+class PyxImportLoader(ExtensionFileLoader):\n \n+    def __init__(self, filename, pyxbuild_dir, inplace, language_level):\n+        module_name = os.path.splitext(os.path.basename(filename))[0]\n+        super().__init__(module_name, filename)\n+        self._pyxbuild_dir = pyxbuild_dir\n+        self._inplace = inplace\n+        self._language_level = language_level\n \n-class PyxLoader(object):\n-    def __init__(self, fullname, path, init_path=None, pyxbuild_dir=None,\n-                 inplace=False, language_level=None):\n-        _debug(\"PyxLoader created for loading %s from %s (init path: %s)\",\n-               fullname, path, init_path)\n-        self.fullname = fullname\n-        self.path, self.init_path = path, init_path\n-        self.pyxbuild_dir = pyxbuild_dir\n-        self.inplace = inplace\n-        self.language_level = language_level\n+    def create_module(self, spec):\n+        try:\n+            so_path = build_module(spec.name, pyxfilename=spec.origin, pyxbuild_dir=self._pyxbuild_dir,\n+                                   inplace=self._inplace, language_level=self._language_level)\n+            self.path = so_path\n+            spec.origin = so_path\n+            return super().create_module(spec)\n+        except Exception as failure_exc:\n+            _debug(\"Failed to load extension module: %r\" % failure_exc)\n+            if pyxargs.load_py_module_on_import_failure and spec.origin.endswith(PY_EXT):\n+                spec = importlib.util.spec_from_file_location(spec.name, spec.origin,\n+                                                              loader=SourceFileLoader(spec.name, spec.origin))\n+                mod = importlib.util.module_from_spec(spec)\n+                assert mod.__file__ in (spec.origin, spec.origin + 'c', spec.origin + 'o'), (mod.__file__, spec.origin)\n+                return mod\n+            else:\n+                tb = sys.exc_info()[2]\n+                import traceback\n+                exc = ImportError(\"Building module %s failed: %s\" % (\n+                    spec.name, traceback.format_exception_only(*sys.exc_info()[:2])))\n+                raise exc.with_traceback(tb)\n \n-    def load_module(self, fullname):\n-        assert self.fullname == fullname, (\n-            \"invalid module, expected %s, got %s\" % (\n-            self.fullname, fullname))\n-        if self.init_path:\n-            # package\n-            #print \"PACKAGE\", fullname\n-            module = load_module(fullname, self.init_path,\n-                                 self.pyxbuild_dir, is_package=True,\n-                                 build_inplace=self.inplace,\n-                                 language_level=self.language_level)\n-            module.__path__ = [self.path]\n-        else:\n-            #print \"MODULE\", fullname\n-            module = load_module(fullname, self.path,\n-                                 self.pyxbuild_dir,\n-                                 build_inplace=self.inplace,\n-                                 language_level=self.language_level)\n-        return module\n+    def exec_module(self, module):\n+        try:\n+            return super().exec_module(module)\n+        except Exception as failure_exc:\n+            import traceback\n+            _debug(\"Failed to load extension module: %r\" % failure_exc)\n+            raise ImportError(\"Executing module %s failed %s\" % (\n+                    module.__file__, traceback.format_exception_only(*sys.exc_info()[:2])))\n \n \n-#install args",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r848778721",
            "id": 848778721,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yl1Xh",
            "original_commit_id": "c8a925c4e1765793fdc7ae91724082ca4cc141a0",
            "original_line": 470,
            "original_position": 406,
            "original_start_line": null,
            "path": "pyximport/_pyximport3.py",
            "position": null,
            "pull_request_review_id": 940018614,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/848778721/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T19:24:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/848778721",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r848779971"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/848779971"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we have tests for these failure cases?",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-12T19:05:46Z",
            "diff_hunk": "@@ -205,283 +213,142 @@ def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_l\n     return so_path\n \n \n-def load_module(name, pyxfilename, pyxbuild_dir=None, is_package=False,\n-                build_inplace=False, language_level=None, so_path=None):\n-    try:\n-        if so_path is None:\n-            if is_package:\n-                module_name = name + '.__init__'\n-            else:\n-                module_name = name\n-            so_path = build_module(module_name, pyxfilename, pyxbuild_dir,\n-                                   inplace=build_inplace, language_level=language_level)\n-        mod = imp.load_dynamic(name, so_path)\n-        if is_package and not hasattr(mod, '__path__'):\n-            mod.__path__ = [os.path.dirname(so_path)]\n-        assert mod.__file__ == so_path, (mod.__file__, so_path)\n-    except Exception as failure_exc:\n-        _debug(\"Failed to load extension module: %r\" % failure_exc)\n-        if pyxargs.load_py_module_on_import_failure and pyxfilename.endswith('.py'):\n-            # try to fall back to normal import\n-            mod = imp.load_source(name, pyxfilename)\n-            assert mod.__file__ in (pyxfilename, pyxfilename+'c', pyxfilename+'o'), (mod.__file__, pyxfilename)\n-        else:\n-            tb = sys.exc_info()[2]\n-            import traceback\n-            exc = ImportError(\"Building module %s failed: %s\" % (\n-                name, traceback.format_exception_only(*sys.exc_info()[:2])))\n-            if sys.version_info[0] >= 3:\n-                raise exc.with_traceback(tb)\n-            else:\n-                exec(\"raise exc, None, tb\", {'exc': exc, 'tb': tb})\n-    return mod\n-\n-\n # import hooks\n \n-class PyxImporter(object):\n-    \"\"\"A meta-path importer for .pyx files.\n-    \"\"\"\n-    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False,\n-                 language_level=None):\n-        self.extension = extension\n+class PyxImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n         self.pyxbuild_dir = pyxbuild_dir\n         self.inplace = inplace\n         self.language_level = language_level\n+        self.extension = extension\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n+        if \".\" in fullname:\n+            *parents, name = fullname.split(\".\")\n+        else:\n+            name = fullname\n+        for entry in path:\n+            if os.path.isdir(os.path.join(entry, name)):\n+                # this module has child modules\n+                filename = os.path.join(entry, name, \"__init__.py\")     # FIXME: __init__.pyx ?\n+                submodule_locations = [os.path.join(entry, name)]\n+            else:\n+                filename = os.path.join(entry, name + self.extension)\n+                submodule_locations = None\n+            if not os.path.exists(filename):\n+                continue\n \n-    def find_module(self, fullname, package_path=None):\n-        if fullname in sys.modules  and  not pyxargs.reload_support:\n-            return None  # only here when reload()\n+            return spec_from_file_location(\n+                fullname, filename,\n+                loader=PyxImportLoader(filename, self.pyxbuild_dir, self.inplace, self.language_level),\n+                submodule_search_locations=submodule_locations)\n \n-        # package_path might be a _NamespacePath. Convert that into a list...\n-        if package_path is not None and not isinstance(package_path, list):\n-            package_path = list(package_path)\n-        try:\n-            fp, pathname, (ext,mode,ty) = imp.find_module(fullname,package_path)\n-            if fp: fp.close()  # Python should offer a Default-Loader to avoid this double find/open!\n-            if pathname and ty == imp.PKG_DIRECTORY:\n-                pkg_file = os.path.join(pathname, '__init__'+self.extension)\n-                if os.path.isfile(pkg_file):\n-                    return PyxLoader(fullname, pathname,\n-                        init_path=pkg_file,\n-                        pyxbuild_dir=self.pyxbuild_dir,\n-                        inplace=self.inplace,\n-                        language_level=self.language_level)\n-            if pathname and pathname.endswith(self.extension):\n-                return PyxLoader(fullname, pathname,\n-                                 pyxbuild_dir=self.pyxbuild_dir,\n-                                 inplace=self.inplace,\n-                                 language_level=self.language_level)\n-            if ty != imp.C_EXTENSION:  # only when an extension, check if we have a .pyx next!\n-                return None\n-\n-            # find .pyx fast, when .so/.pyd exist --inplace\n-            pyxpath = os.path.splitext(pathname)[0]+self.extension\n-            if os.path.isfile(pyxpath):\n-                return PyxLoader(fullname, pyxpath,\n-                                 pyxbuild_dir=self.pyxbuild_dir,\n-                                 inplace=self.inplace,\n-                                 language_level=self.language_level)\n-\n-            # .so/.pyd's on PATH should not be remote from .pyx's\n-            # think no need to implement PyxArgs.importer_search_remote here?\n-\n-        except ImportError:\n-            pass\n+        return None  # we don't know how to import this\n \n-        # searching sys.path ...\n-\n-        #if DEBUG_IMPORT:  print \"SEARCHING\", fullname, package_path\n-\n-        mod_parts = fullname.split('.')\n-        module_name = mod_parts[-1]\n-        pyx_module_name = module_name + self.extension\n-\n-        # this may work, but it returns the file content, not its path\n-        #import pkgutil\n-        #pyx_source = pkgutil.get_data(package, pyx_module_name)\n-\n-        paths = package_path or sys.path\n-        for path in paths:\n-            pyx_data = None\n-            if not path:\n-                path = os.getcwd()\n-            elif os.path.isfile(path):\n-                try:\n-                    zi = zipimporter(path)\n-                    pyx_data = zi.get_data(pyx_module_name)\n-                except (ZipImportError, IOError, OSError):\n-                    continue  # Module not found.\n-                # unzip the imported file into the build dir\n-                # FIXME: can interfere with later imports if build dir is in sys.path and comes before zip file\n-                path = self.pyxbuild_dir\n-            elif not os.path.isabs(path):\n-                path = os.path.abspath(path)\n-\n-            pyx_module_path = os.path.join(path, pyx_module_name)\n-            if pyx_data is not None:\n-                if not os.path.exists(path):\n-                    try:\n-                        os.makedirs(path)\n-                    except OSError:\n-                        # concurrency issue?\n-                        if not os.path.exists(path):\n-                            raise\n-                with open(pyx_module_path, \"wb\") as f:\n-                    f.write(pyx_data)\n-            elif not os.path.isfile(pyx_module_path):\n-                continue  # Module not found.\n-\n-            return PyxLoader(fullname, pyx_module_path,\n-                             pyxbuild_dir=self.pyxbuild_dir,\n-                             inplace=self.inplace,\n-                             language_level=self.language_level)\n-\n-        # not found, normal package, not a .pyx file, none of our business\n-        _debug(\"%s not found\" % fullname)\n-        return None\n-\n-\n-class PyImporter(PyxImporter):\n-    \"\"\"A meta-path importer for normal .py files.\n-    \"\"\"\n-    def __init__(self, pyxbuild_dir=None, inplace=False, language_level=None):\n-        if language_level is None:\n-            language_level = sys.version_info[0]\n-        self.super = super(PyImporter, self)\n-        self.super.__init__(extension='.py', pyxbuild_dir=pyxbuild_dir, inplace=inplace,\n-                            language_level=language_level)\n+\n+class PyImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PY_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n         self.uncompilable_modules = {}\n         self.blocked_modules = ['Cython', 'pyxbuild', 'pyximport.pyxbuild',\n-                                'distutils']\n+                                'distutils', 'cython']\n         self.blocked_packages = ['Cython.', 'distutils.']\n \n-    def find_module(self, fullname, package_path=None):\n+    def find_spec(self, fullname, path, target=None):\n         if fullname in sys.modules:\n             return None\n         if any([fullname.startswith(pkg) for pkg in self.blocked_packages]):\n             return None\n         if fullname in self.blocked_modules:\n             # prevent infinite recursion\n             return None\n-        if _lib_loader.knows(fullname):\n-            return _lib_loader\n-        _debug(\"trying import of module '%s'\", fullname)\n-        if fullname in self.uncompilable_modules:\n-            path, last_modified = self.uncompilable_modules[fullname]\n-            try:\n-                new_last_modified = os.stat(path).st_mtime\n-                if new_last_modified > last_modified:\n-                    # import would fail again\n-                    return None\n-            except OSError:\n-                # module is no longer where we found it, retry the import\n-                pass\n \n         self.blocked_modules.append(fullname)\n+        name = fullname\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n         try:\n-            importer = self.super.find_module(fullname, package_path)\n-            if importer is not None:\n-                if importer.init_path:\n-                    path = importer.init_path\n-                    real_name = fullname + '.__init__'\n+            for entry in path:\n+                if os.path.isdir(os.path.join(entry, name)):\n+                    # this module has child modules\n+                    filename = os.path.join(entry, name, \"__init__.py\")\n+                    submodule_locations = [os.path.join(entry, name)]\n                 else:\n-                    path = importer.path\n-                    real_name = fullname\n-                _debug(\"importer found path %s for module %s\", path, real_name)\n-                try:\n-                    so_path = build_module(\n-                        real_name, path,\n-                        pyxbuild_dir=self.pyxbuild_dir,\n-                        language_level=self.language_level,\n-                        inplace=self.inplace)\n-                    _lib_loader.add_lib(fullname, path, so_path,\n-                                        is_package=bool(importer.init_path))\n-                    return _lib_loader\n-                except Exception:\n-                    if DEBUG_IMPORT:\n-                        import traceback\n-                        traceback.print_exc()\n-                    # build failed, not a compilable Python module\n-                    try:\n-                        last_modified = os.stat(path).st_mtime\n-                    except OSError:\n-                        last_modified = 0\n-                    self.uncompilable_modules[fullname] = (path, last_modified)\n-                    importer = None\n+                    filename = os.path.join(entry, name + PY_EXT)\n+                    submodule_locations = None\n+                if not os.path.exists(filename):\n+                    continue\n+\n+                return spec_from_file_location(\n+                    fullname, filename,\n+                    loader=PyxImportLoader(filename, self.pyxbuild_dir, self.inplace, self.language_level),\n+                    submodule_search_locations=submodule_locations)\n         finally:\n             self.blocked_modules.pop()\n-        return importer\n-\n-\n-class LibLoader(object):\n-    def __init__(self):\n-        self._libs = {}\n-\n-    def load_module(self, fullname):\n-        try:\n-            source_path, so_path, is_package = self._libs[fullname]\n-        except KeyError:\n-            raise ValueError(\"invalid module %s\" % fullname)\n-        _debug(\"Loading shared library module '%s' from %s\", fullname, so_path)\n-        return load_module(fullname, source_path, so_path=so_path, is_package=is_package)\n \n-    def add_lib(self, fullname, path, so_path, is_package):\n-        self._libs[fullname] = (path, so_path, is_package)\n+        return None  # we don't know how to import this\n \n-    def knows(self, fullname):\n-        return fullname in self._libs\n \n-_lib_loader = LibLoader()\n+class PyxImportLoader(ExtensionFileLoader):\n \n+    def __init__(self, filename, pyxbuild_dir, inplace, language_level):\n+        module_name = os.path.splitext(os.path.basename(filename))[0]\n+        super().__init__(module_name, filename)\n+        self._pyxbuild_dir = pyxbuild_dir\n+        self._inplace = inplace\n+        self._language_level = language_level\n \n-class PyxLoader(object):\n-    def __init__(self, fullname, path, init_path=None, pyxbuild_dir=None,\n-                 inplace=False, language_level=None):\n-        _debug(\"PyxLoader created for loading %s from %s (init path: %s)\",\n-               fullname, path, init_path)\n-        self.fullname = fullname\n-        self.path, self.init_path = path, init_path\n-        self.pyxbuild_dir = pyxbuild_dir\n-        self.inplace = inplace\n-        self.language_level = language_level\n+    def create_module(self, spec):\n+        try:\n+            so_path = build_module(spec.name, pyxfilename=spec.origin, pyxbuild_dir=self._pyxbuild_dir,\n+                                   inplace=self._inplace, language_level=self._language_level)\n+            self.path = so_path\n+            spec.origin = so_path\n+            return super().create_module(spec)\n+        except Exception as failure_exc:\n+            _debug(\"Failed to load extension module: %r\" % failure_exc)\n+            if pyxargs.load_py_module_on_import_failure and spec.origin.endswith(PY_EXT):\n+                spec = importlib.util.spec_from_file_location(spec.name, spec.origin,\n+                                                              loader=SourceFileLoader(spec.name, spec.origin))\n+                mod = importlib.util.module_from_spec(spec)\n+                assert mod.__file__ in (spec.origin, spec.origin + 'c', spec.origin + 'o'), (mod.__file__, spec.origin)\n+                return mod\n+            else:\n+                tb = sys.exc_info()[2]\n+                import traceback\n+                exc = ImportError(\"Building module %s failed: %s\" % (\n+                    spec.name, traceback.format_exception_only(*sys.exc_info()[:2])))\n+                raise exc.with_traceback(tb)\n \n-    def load_module(self, fullname):\n-        assert self.fullname == fullname, (\n-            \"invalid module, expected %s, got %s\" % (\n-            self.fullname, fullname))\n-        if self.init_path:\n-            # package\n-            #print \"PACKAGE\", fullname\n-            module = load_module(fullname, self.init_path,\n-                                 self.pyxbuild_dir, is_package=True,\n-                                 build_inplace=self.inplace,\n-                                 language_level=self.language_level)\n-            module.__path__ = [self.path]\n-        else:\n-            #print \"MODULE\", fullname\n-            module = load_module(fullname, self.path,\n-                                 self.pyxbuild_dir,\n-                                 build_inplace=self.inplace,\n-                                 language_level=self.language_level)\n-        return module\n+    def exec_module(self, module):\n+        try:\n+            return super().exec_module(module)\n+        except Exception as failure_exc:\n+            import traceback\n+            _debug(\"Failed to load extension module: %r\" % failure_exc)\n+            raise ImportError(\"Executing module %s failed %s\" % (\n+                    module.__file__, traceback.format_exception_only(*sys.exc_info()[:2])))",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r848779971",
            "id": 848779971,
            "line": 327,
            "node_id": "PRRC_kwDOABDGAc4yl1rD",
            "original_commit_id": "c8a925c4e1765793fdc7ae91724082ca4cc141a0",
            "original_line": 337,
            "original_position": 403,
            "original_start_line": 336,
            "path": "pyximport/_pyximport3.py",
            "position": 327,
            "pull_request_review_id": 940018614,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/848779971/reactions"
            },
            "side": "RIGHT",
            "start_line": 326,
            "start_side": "RIGHT",
            "updated_at": "2022-04-12T19:24:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/848779971",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r848781362"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/848781362"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if not path:\r\n```",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-12T19:07:46Z",
            "diff_hunk": "@@ -0,0 +1,473 @@\n+\"\"\"\n+Import hooks; when installed with the install() function, these hooks\n+allow importing .pyx files as if they were Python modules.\n+\n+If you want the hook installed every time you run Python\n+you can add it to your Python version by adding these lines to\n+sitecustomize.py (which you can create from scratch in site-packages\n+if it doesn't exist there or somewhere else on your python path)::\n+\n+    import pyximport\n+    pyximport.install()\n+\n+For instance on the Mac with a non-system Python 2.3, you could create\n+sitecustomize.py with only those two lines at\n+/usr/local/lib/python2.3/site-packages/sitecustomize.py .\n+\n+A custom distutils.core.Extension instance and setup() args\n+(Distribution) for for the build can be defined by a <modulename>.pyxbld\n+file like:\n+\n+# examplemod.pyxbld\n+def make_ext(modname, pyxfilename):\n+    from distutils.extension import Extension\n+    return Extension(name = modname,\n+                     sources=[pyxfilename, 'hello.c'],\n+                     include_dirs=['/myinclude'] )\n+def make_setup_args():\n+    return dict(script_args=[\"--compiler=mingw32\"])\n+\n+Extra dependencies can be defined by a <modulename>.pyxdep .\n+See README.\n+\n+Since Cython 0.11, the :mod:`pyximport` module also has experimental\n+compilation support for normal Python modules.  This allows you to\n+automatically run Cython on every .pyx and .py module that Python\n+imports, including parts of the standard library and installed\n+packages.  Cython will still fail to compile a lot of Python modules,\n+in which case the import mechanism will fall back to loading the\n+Python source modules instead.  The .py import mechanism is installed\n+like this::\n+\n+    pyximport.install(pyimport = True)\n+\n+Running this module as a top-level script will run a test and then print\n+the documentation.\n+\"\"\"\n+\n+import glob\n+import importlib\n+import os\n+import sys\n+from importlib.abc import MetaPathFinder\n+from importlib.machinery import ExtensionFileLoader, SourceFileLoader\n+from importlib.util import spec_from_file_location\n+\n+mod_name = \"pyximport\"\n+\n+PY_EXT = \".py\"\n+PYX_EXT = \".pyx\"\n+PYXDEP_EXT = \".pyxdep\"\n+PYXBLD_EXT = \".pyxbld\"\n+\n+DEBUG_IMPORT = False\n+\n+\n+def _print(message, args):\n+    if args:\n+        message = message % args\n+    print(message)\n+\n+\n+def _debug(message, *args):\n+    if DEBUG_IMPORT:\n+        _print(message, args)\n+\n+\n+def _info(message, *args):\n+    _print(message, args)\n+\n+\n+def load_source(file_path):\n+    import importlib.util\n+    from importlib.machinery import SourceFileLoader\n+    spec = importlib.util.spec_from_file_location(\"XXXX\", file_path, loader=SourceFileLoader(\"XXXX\", file_path))\n+    module = importlib.util.module_from_spec(spec)\n+    spec.loader.exec_module(module)\n+    return module\n+\n+# Performance problem: for every PYX file that is imported, we will\n+# invoke the whole distutils infrastructure even if the module is\n+# already built. It might be more efficient to only do it when the\n+# mod time of the .pyx is newer than the mod time of the .so but\n+# the question is how to get distutils to tell me the name of the .so\n+# before it builds it. Maybe it is easy...but maybe the performance\n+# issue isn't real.\n+def _load_pyrex(name, filename):\n+    \"Load a pyrex file given a name and filename.\"\n+\n+\n+def get_distutils_extension(modname, pyxfilename, language_level=None):\n+#    try:\n+#        import hashlib\n+#    except ImportError:\n+#        import md5 as hashlib\n+#    extra = \"_\" + hashlib.md5(open(pyxfilename).read()).hexdigest()\n+#    modname = modname + extra\n+    extension_mod,setup_args = handle_special_build(modname, pyxfilename)\n+    if not extension_mod:\n+        if not isinstance(pyxfilename, str):\n+            # distutils is stupid in Py2 and requires exactly 'str'\n+            # => encode accidentally coerced unicode strings back to str\n+            pyxfilename = pyxfilename.encode(sys.getfilesystemencoding())\n+        from distutils.extension import Extension\n+        extension_mod = Extension(name = modname, sources=[pyxfilename])\n+        if language_level is not None:\n+            extension_mod.cython_directives = {'language_level': language_level}\n+    return extension_mod,setup_args\n+\n+\n+def handle_special_build(modname, pyxfilename):\n+    special_build = os.path.splitext(pyxfilename)[0] + PYXBLD_EXT\n+    ext = None\n+    setup_args={}\n+    if os.path.exists(special_build):\n+        # globls = {}\n+        # locs = {}\n+        # execfile(special_build, globls, locs)\n+        # ext = locs[\"make_ext\"](modname, pyxfilename)\n+        mod = load_source(special_build)\n+        make_ext = getattr(mod,'make_ext',None)\n+        if make_ext:\n+            ext = make_ext(modname, pyxfilename)\n+            assert ext and ext.sources, \"make_ext in %s did not return Extension\" % special_build\n+        make_setup_args = getattr(mod, 'make_setup_args',None)\n+        if make_setup_args:\n+            setup_args = make_setup_args()\n+            assert isinstance(setup_args,dict), (\"make_setup_args in %s did not return a dict\"\n+                                         % special_build)\n+        assert set or setup_args, (\"neither make_ext nor make_setup_args %s\"\n+                                         % special_build)\n+        ext.sources = [os.path.join(os.path.dirname(special_build), source)\n+                       for source in ext.sources]\n+    return ext, setup_args\n+\n+\n+def handle_dependencies(pyxfilename):\n+    testing = '_test_files' in globals()\n+    dependfile = os.path.splitext(pyxfilename)[0] + PYXDEP_EXT\n+\n+    # by default let distutils decide whether to rebuild on its own\n+    # (it has a better idea of what the output file will be)\n+\n+    # but we know more about dependencies so force a rebuild if\n+    # some of the dependencies are newer than the pyxfile.\n+    if os.path.exists(dependfile):\n+        with open(dependfile) as fid:\n+            depends = fid.readlines()\n+        depends = [depend.strip() for depend in depends]\n+\n+        # gather dependencies in the \"files\" variable\n+        # the dependency file is itself a dependency\n+        files = [dependfile]\n+        for depend in depends:\n+            fullpath = os.path.join(os.path.dirname(dependfile),\n+                                    depend)\n+            files.extend(glob.glob(fullpath))\n+\n+        # only for unit testing to see we did the right thing\n+        if testing:\n+            _test_files[:] = []  #$pycheck_no\n+\n+        # if any file that the pyxfile depends upon is newer than\n+        # the pyx file, 'touch' the pyx file so that distutils will\n+        # be tricked into rebuilding it.\n+        for file in files:\n+            from distutils.dep_util import newer\n+            if newer(file, pyxfilename):\n+                _debug(\"Rebuilding %s because of %s\", pyxfilename, file)\n+                filetime = os.path.getmtime(file)\n+                os.utime(pyxfilename, (filetime, filetime))\n+                if testing:\n+                    _test_files.append(file)\n+\n+\n+def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_level=None):\n+    assert os.path.exists(pyxfilename), \"Path does not exist: %s\" % pyxfilename\n+    handle_dependencies(pyxfilename)\n+\n+    extension_mod, setup_args = get_distutils_extension(name, pyxfilename, language_level)\n+    build_in_temp = pyxargs.build_in_temp\n+    sargs = pyxargs.setup_args.copy()\n+    sargs.update(setup_args)\n+    build_in_temp = sargs.pop('build_in_temp',build_in_temp)\n+\n+    from . import pyxbuild\n+    so_path = pyxbuild.pyx_to_dll(pyxfilename, extension_mod,\n+                                  build_in_temp=build_in_temp,\n+                                  pyxbuild_dir=pyxbuild_dir,\n+                                  setup_args=sargs,\n+                                  inplace=inplace,\n+                                  reload_support=pyxargs.reload_support)\n+    assert os.path.exists(so_path), \"Cannot find: %s\" % so_path\n+\n+    junkpath = os.path.join(os.path.dirname(so_path), name+\"_*\")  #very dangerous with --inplace ? yes, indeed, trying to eat my files ;)\n+    junkstuff = glob.glob(junkpath)\n+    for path in junkstuff:\n+        if path != so_path:\n+            try:\n+                os.remove(path)\n+            except IOError:\n+                _info(\"Couldn't remove %s\", path)\n+\n+    return so_path\n+\n+\n+# import hooks\n+\n+class PyxImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if path is None or path == \"\":",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r848781362",
            "id": 848781362,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yl2Ay",
            "original_commit_id": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "original_line": 227,
            "original_position": 227,
            "original_start_line": null,
            "path": "pyximport/_pyximport3.py",
            "position": null,
            "pull_request_review_id": 940018614,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/848781362/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T19:24:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/848781362",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r848782011"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/848782011"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if not path:\r\n```",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-12T19:08:37Z",
            "diff_hunk": "@@ -0,0 +1,473 @@\n+\"\"\"\n+Import hooks; when installed with the install() function, these hooks\n+allow importing .pyx files as if they were Python modules.\n+\n+If you want the hook installed every time you run Python\n+you can add it to your Python version by adding these lines to\n+sitecustomize.py (which you can create from scratch in site-packages\n+if it doesn't exist there or somewhere else on your python path)::\n+\n+    import pyximport\n+    pyximport.install()\n+\n+For instance on the Mac with a non-system Python 2.3, you could create\n+sitecustomize.py with only those two lines at\n+/usr/local/lib/python2.3/site-packages/sitecustomize.py .\n+\n+A custom distutils.core.Extension instance and setup() args\n+(Distribution) for for the build can be defined by a <modulename>.pyxbld\n+file like:\n+\n+# examplemod.pyxbld\n+def make_ext(modname, pyxfilename):\n+    from distutils.extension import Extension\n+    return Extension(name = modname,\n+                     sources=[pyxfilename, 'hello.c'],\n+                     include_dirs=['/myinclude'] )\n+def make_setup_args():\n+    return dict(script_args=[\"--compiler=mingw32\"])\n+\n+Extra dependencies can be defined by a <modulename>.pyxdep .\n+See README.\n+\n+Since Cython 0.11, the :mod:`pyximport` module also has experimental\n+compilation support for normal Python modules.  This allows you to\n+automatically run Cython on every .pyx and .py module that Python\n+imports, including parts of the standard library and installed\n+packages.  Cython will still fail to compile a lot of Python modules,\n+in which case the import mechanism will fall back to loading the\n+Python source modules instead.  The .py import mechanism is installed\n+like this::\n+\n+    pyximport.install(pyimport = True)\n+\n+Running this module as a top-level script will run a test and then print\n+the documentation.\n+\"\"\"\n+\n+import glob\n+import importlib\n+import os\n+import sys\n+from importlib.abc import MetaPathFinder\n+from importlib.machinery import ExtensionFileLoader, SourceFileLoader\n+from importlib.util import spec_from_file_location\n+\n+mod_name = \"pyximport\"\n+\n+PY_EXT = \".py\"\n+PYX_EXT = \".pyx\"\n+PYXDEP_EXT = \".pyxdep\"\n+PYXBLD_EXT = \".pyxbld\"\n+\n+DEBUG_IMPORT = False\n+\n+\n+def _print(message, args):\n+    if args:\n+        message = message % args\n+    print(message)\n+\n+\n+def _debug(message, *args):\n+    if DEBUG_IMPORT:\n+        _print(message, args)\n+\n+\n+def _info(message, *args):\n+    _print(message, args)\n+\n+\n+def load_source(file_path):\n+    import importlib.util\n+    from importlib.machinery import SourceFileLoader\n+    spec = importlib.util.spec_from_file_location(\"XXXX\", file_path, loader=SourceFileLoader(\"XXXX\", file_path))\n+    module = importlib.util.module_from_spec(spec)\n+    spec.loader.exec_module(module)\n+    return module\n+\n+# Performance problem: for every PYX file that is imported, we will\n+# invoke the whole distutils infrastructure even if the module is\n+# already built. It might be more efficient to only do it when the\n+# mod time of the .pyx is newer than the mod time of the .so but\n+# the question is how to get distutils to tell me the name of the .so\n+# before it builds it. Maybe it is easy...but maybe the performance\n+# issue isn't real.\n+def _load_pyrex(name, filename):\n+    \"Load a pyrex file given a name and filename.\"\n+\n+\n+def get_distutils_extension(modname, pyxfilename, language_level=None):\n+#    try:\n+#        import hashlib\n+#    except ImportError:\n+#        import md5 as hashlib\n+#    extra = \"_\" + hashlib.md5(open(pyxfilename).read()).hexdigest()\n+#    modname = modname + extra\n+    extension_mod,setup_args = handle_special_build(modname, pyxfilename)\n+    if not extension_mod:\n+        if not isinstance(pyxfilename, str):\n+            # distutils is stupid in Py2 and requires exactly 'str'\n+            # => encode accidentally coerced unicode strings back to str\n+            pyxfilename = pyxfilename.encode(sys.getfilesystemencoding())\n+        from distutils.extension import Extension\n+        extension_mod = Extension(name = modname, sources=[pyxfilename])\n+        if language_level is not None:\n+            extension_mod.cython_directives = {'language_level': language_level}\n+    return extension_mod,setup_args\n+\n+\n+def handle_special_build(modname, pyxfilename):\n+    special_build = os.path.splitext(pyxfilename)[0] + PYXBLD_EXT\n+    ext = None\n+    setup_args={}\n+    if os.path.exists(special_build):\n+        # globls = {}\n+        # locs = {}\n+        # execfile(special_build, globls, locs)\n+        # ext = locs[\"make_ext\"](modname, pyxfilename)\n+        mod = load_source(special_build)\n+        make_ext = getattr(mod,'make_ext',None)\n+        if make_ext:\n+            ext = make_ext(modname, pyxfilename)\n+            assert ext and ext.sources, \"make_ext in %s did not return Extension\" % special_build\n+        make_setup_args = getattr(mod, 'make_setup_args',None)\n+        if make_setup_args:\n+            setup_args = make_setup_args()\n+            assert isinstance(setup_args,dict), (\"make_setup_args in %s did not return a dict\"\n+                                         % special_build)\n+        assert set or setup_args, (\"neither make_ext nor make_setup_args %s\"\n+                                         % special_build)\n+        ext.sources = [os.path.join(os.path.dirname(special_build), source)\n+                       for source in ext.sources]\n+    return ext, setup_args\n+\n+\n+def handle_dependencies(pyxfilename):\n+    testing = '_test_files' in globals()\n+    dependfile = os.path.splitext(pyxfilename)[0] + PYXDEP_EXT\n+\n+    # by default let distutils decide whether to rebuild on its own\n+    # (it has a better idea of what the output file will be)\n+\n+    # but we know more about dependencies so force a rebuild if\n+    # some of the dependencies are newer than the pyxfile.\n+    if os.path.exists(dependfile):\n+        with open(dependfile) as fid:\n+            depends = fid.readlines()\n+        depends = [depend.strip() for depend in depends]\n+\n+        # gather dependencies in the \"files\" variable\n+        # the dependency file is itself a dependency\n+        files = [dependfile]\n+        for depend in depends:\n+            fullpath = os.path.join(os.path.dirname(dependfile),\n+                                    depend)\n+            files.extend(glob.glob(fullpath))\n+\n+        # only for unit testing to see we did the right thing\n+        if testing:\n+            _test_files[:] = []  #$pycheck_no\n+\n+        # if any file that the pyxfile depends upon is newer than\n+        # the pyx file, 'touch' the pyx file so that distutils will\n+        # be tricked into rebuilding it.\n+        for file in files:\n+            from distutils.dep_util import newer\n+            if newer(file, pyxfilename):\n+                _debug(\"Rebuilding %s because of %s\", pyxfilename, file)\n+                filetime = os.path.getmtime(file)\n+                os.utime(pyxfilename, (filetime, filetime))\n+                if testing:\n+                    _test_files.append(file)\n+\n+\n+def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_level=None):\n+    assert os.path.exists(pyxfilename), \"Path does not exist: %s\" % pyxfilename\n+    handle_dependencies(pyxfilename)\n+\n+    extension_mod, setup_args = get_distutils_extension(name, pyxfilename, language_level)\n+    build_in_temp = pyxargs.build_in_temp\n+    sargs = pyxargs.setup_args.copy()\n+    sargs.update(setup_args)\n+    build_in_temp = sargs.pop('build_in_temp',build_in_temp)\n+\n+    from . import pyxbuild\n+    so_path = pyxbuild.pyx_to_dll(pyxfilename, extension_mod,\n+                                  build_in_temp=build_in_temp,\n+                                  pyxbuild_dir=pyxbuild_dir,\n+                                  setup_args=sargs,\n+                                  inplace=inplace,\n+                                  reload_support=pyxargs.reload_support)\n+    assert os.path.exists(so_path), \"Cannot find: %s\" % so_path\n+\n+    junkpath = os.path.join(os.path.dirname(so_path), name+\"_*\")  #very dangerous with --inplace ? yes, indeed, trying to eat my files ;)\n+    junkstuff = glob.glob(junkpath)\n+    for path in junkstuff:\n+        if path != so_path:\n+            try:\n+                os.remove(path)\n+            except IOError:\n+                _info(\"Couldn't remove %s\", path)\n+\n+    return so_path\n+\n+\n+# import hooks\n+\n+class PyxImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n+        if \".\" in fullname:\n+            *parents, name = fullname.split(\".\")\n+        else:\n+            name = fullname\n+        for entry in path:\n+            if os.path.isdir(os.path.join(entry, name)):\n+                # this module has child modules\n+                filename = os.path.join(entry, name, \"__init__.py\")\n+                submodule_locations = [os.path.join(entry, name)]\n+            else:\n+                filename = os.path.join(entry, name + self.extension)\n+                submodule_locations = None\n+            if not os.path.exists(filename):\n+                continue\n+\n+            return spec_from_file_location(\n+                fullname, filename,\n+                loader=PyxImportLoader(filename, self.pyxbuild_dir, self.inplace, self.language_level),\n+                submodule_search_locations=submodule_locations)\n+\n+        return None  # we don't know how to import this\n+\n+\n+class PyImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PY_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n+        self.uncompilable_modules = {}\n+        self.blocked_modules = ['Cython', 'pyxbuild', 'pyximport.pyxbuild',\n+                                'distutils', 'cython']\n+        self.blocked_packages = ['Cython.', 'distutils.']\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if fullname in sys.modules:\n+            return None\n+        if any([fullname.startswith(pkg) for pkg in self.blocked_packages]):\n+            return None\n+        if fullname in self.blocked_modules:\n+            # prevent infinite recursion\n+            return None\n+\n+        self.blocked_modules.append(fullname)\n+        name = fullname\n+        if path is None or path == \"\":",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r848782011",
            "id": 848782011,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yl2K7",
            "original_commit_id": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "original_line": 275,
            "original_position": 275,
            "original_start_line": null,
            "path": "pyximport/_pyximport3.py",
            "position": null,
            "pull_request_review_id": 940018614,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/848782011/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T19:24:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/848782011",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r848785567"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/848785567"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                filename = os.path.join(entry, name, \"__init__\" + self.extension)\r\n```",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-12T19:11:55Z",
            "diff_hunk": "@@ -0,0 +1,473 @@\n+\"\"\"\n+Import hooks; when installed with the install() function, these hooks\n+allow importing .pyx files as if they were Python modules.\n+\n+If you want the hook installed every time you run Python\n+you can add it to your Python version by adding these lines to\n+sitecustomize.py (which you can create from scratch in site-packages\n+if it doesn't exist there or somewhere else on your python path)::\n+\n+    import pyximport\n+    pyximport.install()\n+\n+For instance on the Mac with a non-system Python 2.3, you could create\n+sitecustomize.py with only those two lines at\n+/usr/local/lib/python2.3/site-packages/sitecustomize.py .\n+\n+A custom distutils.core.Extension instance and setup() args\n+(Distribution) for for the build can be defined by a <modulename>.pyxbld\n+file like:\n+\n+# examplemod.pyxbld\n+def make_ext(modname, pyxfilename):\n+    from distutils.extension import Extension\n+    return Extension(name = modname,\n+                     sources=[pyxfilename, 'hello.c'],\n+                     include_dirs=['/myinclude'] )\n+def make_setup_args():\n+    return dict(script_args=[\"--compiler=mingw32\"])\n+\n+Extra dependencies can be defined by a <modulename>.pyxdep .\n+See README.\n+\n+Since Cython 0.11, the :mod:`pyximport` module also has experimental\n+compilation support for normal Python modules.  This allows you to\n+automatically run Cython on every .pyx and .py module that Python\n+imports, including parts of the standard library and installed\n+packages.  Cython will still fail to compile a lot of Python modules,\n+in which case the import mechanism will fall back to loading the\n+Python source modules instead.  The .py import mechanism is installed\n+like this::\n+\n+    pyximport.install(pyimport = True)\n+\n+Running this module as a top-level script will run a test and then print\n+the documentation.\n+\"\"\"\n+\n+import glob\n+import importlib\n+import os\n+import sys\n+from importlib.abc import MetaPathFinder\n+from importlib.machinery import ExtensionFileLoader, SourceFileLoader\n+from importlib.util import spec_from_file_location\n+\n+mod_name = \"pyximport\"\n+\n+PY_EXT = \".py\"\n+PYX_EXT = \".pyx\"\n+PYXDEP_EXT = \".pyxdep\"\n+PYXBLD_EXT = \".pyxbld\"\n+\n+DEBUG_IMPORT = False\n+\n+\n+def _print(message, args):\n+    if args:\n+        message = message % args\n+    print(message)\n+\n+\n+def _debug(message, *args):\n+    if DEBUG_IMPORT:\n+        _print(message, args)\n+\n+\n+def _info(message, *args):\n+    _print(message, args)\n+\n+\n+def load_source(file_path):\n+    import importlib.util\n+    from importlib.machinery import SourceFileLoader\n+    spec = importlib.util.spec_from_file_location(\"XXXX\", file_path, loader=SourceFileLoader(\"XXXX\", file_path))\n+    module = importlib.util.module_from_spec(spec)\n+    spec.loader.exec_module(module)\n+    return module\n+\n+# Performance problem: for every PYX file that is imported, we will\n+# invoke the whole distutils infrastructure even if the module is\n+# already built. It might be more efficient to only do it when the\n+# mod time of the .pyx is newer than the mod time of the .so but\n+# the question is how to get distutils to tell me the name of the .so\n+# before it builds it. Maybe it is easy...but maybe the performance\n+# issue isn't real.\n+def _load_pyrex(name, filename):\n+    \"Load a pyrex file given a name and filename.\"\n+\n+\n+def get_distutils_extension(modname, pyxfilename, language_level=None):\n+#    try:\n+#        import hashlib\n+#    except ImportError:\n+#        import md5 as hashlib\n+#    extra = \"_\" + hashlib.md5(open(pyxfilename).read()).hexdigest()\n+#    modname = modname + extra\n+    extension_mod,setup_args = handle_special_build(modname, pyxfilename)\n+    if not extension_mod:\n+        if not isinstance(pyxfilename, str):\n+            # distutils is stupid in Py2 and requires exactly 'str'\n+            # => encode accidentally coerced unicode strings back to str\n+            pyxfilename = pyxfilename.encode(sys.getfilesystemencoding())\n+        from distutils.extension import Extension\n+        extension_mod = Extension(name = modname, sources=[pyxfilename])\n+        if language_level is not None:\n+            extension_mod.cython_directives = {'language_level': language_level}\n+    return extension_mod,setup_args\n+\n+\n+def handle_special_build(modname, pyxfilename):\n+    special_build = os.path.splitext(pyxfilename)[0] + PYXBLD_EXT\n+    ext = None\n+    setup_args={}\n+    if os.path.exists(special_build):\n+        # globls = {}\n+        # locs = {}\n+        # execfile(special_build, globls, locs)\n+        # ext = locs[\"make_ext\"](modname, pyxfilename)\n+        mod = load_source(special_build)\n+        make_ext = getattr(mod,'make_ext',None)\n+        if make_ext:\n+            ext = make_ext(modname, pyxfilename)\n+            assert ext and ext.sources, \"make_ext in %s did not return Extension\" % special_build\n+        make_setup_args = getattr(mod, 'make_setup_args',None)\n+        if make_setup_args:\n+            setup_args = make_setup_args()\n+            assert isinstance(setup_args,dict), (\"make_setup_args in %s did not return a dict\"\n+                                         % special_build)\n+        assert set or setup_args, (\"neither make_ext nor make_setup_args %s\"\n+                                         % special_build)\n+        ext.sources = [os.path.join(os.path.dirname(special_build), source)\n+                       for source in ext.sources]\n+    return ext, setup_args\n+\n+\n+def handle_dependencies(pyxfilename):\n+    testing = '_test_files' in globals()\n+    dependfile = os.path.splitext(pyxfilename)[0] + PYXDEP_EXT\n+\n+    # by default let distutils decide whether to rebuild on its own\n+    # (it has a better idea of what the output file will be)\n+\n+    # but we know more about dependencies so force a rebuild if\n+    # some of the dependencies are newer than the pyxfile.\n+    if os.path.exists(dependfile):\n+        with open(dependfile) as fid:\n+            depends = fid.readlines()\n+        depends = [depend.strip() for depend in depends]\n+\n+        # gather dependencies in the \"files\" variable\n+        # the dependency file is itself a dependency\n+        files = [dependfile]\n+        for depend in depends:\n+            fullpath = os.path.join(os.path.dirname(dependfile),\n+                                    depend)\n+            files.extend(glob.glob(fullpath))\n+\n+        # only for unit testing to see we did the right thing\n+        if testing:\n+            _test_files[:] = []  #$pycheck_no\n+\n+        # if any file that the pyxfile depends upon is newer than\n+        # the pyx file, 'touch' the pyx file so that distutils will\n+        # be tricked into rebuilding it.\n+        for file in files:\n+            from distutils.dep_util import newer\n+            if newer(file, pyxfilename):\n+                _debug(\"Rebuilding %s because of %s\", pyxfilename, file)\n+                filetime = os.path.getmtime(file)\n+                os.utime(pyxfilename, (filetime, filetime))\n+                if testing:\n+                    _test_files.append(file)\n+\n+\n+def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_level=None):\n+    assert os.path.exists(pyxfilename), \"Path does not exist: %s\" % pyxfilename\n+    handle_dependencies(pyxfilename)\n+\n+    extension_mod, setup_args = get_distutils_extension(name, pyxfilename, language_level)\n+    build_in_temp = pyxargs.build_in_temp\n+    sargs = pyxargs.setup_args.copy()\n+    sargs.update(setup_args)\n+    build_in_temp = sargs.pop('build_in_temp',build_in_temp)\n+\n+    from . import pyxbuild\n+    so_path = pyxbuild.pyx_to_dll(pyxfilename, extension_mod,\n+                                  build_in_temp=build_in_temp,\n+                                  pyxbuild_dir=pyxbuild_dir,\n+                                  setup_args=sargs,\n+                                  inplace=inplace,\n+                                  reload_support=pyxargs.reload_support)\n+    assert os.path.exists(so_path), \"Cannot find: %s\" % so_path\n+\n+    junkpath = os.path.join(os.path.dirname(so_path), name+\"_*\")  #very dangerous with --inplace ? yes, indeed, trying to eat my files ;)\n+    junkstuff = glob.glob(junkpath)\n+    for path in junkstuff:\n+        if path != so_path:\n+            try:\n+                os.remove(path)\n+            except IOError:\n+                _info(\"Couldn't remove %s\", path)\n+\n+    return so_path\n+\n+\n+# import hooks\n+\n+class PyxImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n+        if \".\" in fullname:\n+            *parents, name = fullname.split(\".\")\n+        else:\n+            name = fullname\n+        for entry in path:\n+            if os.path.isdir(os.path.join(entry, name)):\n+                # this module has child modules\n+                filename = os.path.join(entry, name, \"__init__.py\")",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r848785567",
            "id": 848785567,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yl3Cf",
            "original_commit_id": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "original_line": 236,
            "original_position": 236,
            "original_start_line": null,
            "path": "pyximport/_pyximport3.py",
            "position": null,
            "pull_request_review_id": 940018614,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/848785567/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T19:24:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/848785567",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r848785972"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/848785972"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                    filename = os.path.join(entry, name, \"__init__\" + self.extension)\r\n```",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-12T19:12:19Z",
            "diff_hunk": "@@ -0,0 +1,473 @@\n+\"\"\"\n+Import hooks; when installed with the install() function, these hooks\n+allow importing .pyx files as if they were Python modules.\n+\n+If you want the hook installed every time you run Python\n+you can add it to your Python version by adding these lines to\n+sitecustomize.py (which you can create from scratch in site-packages\n+if it doesn't exist there or somewhere else on your python path)::\n+\n+    import pyximport\n+    pyximport.install()\n+\n+For instance on the Mac with a non-system Python 2.3, you could create\n+sitecustomize.py with only those two lines at\n+/usr/local/lib/python2.3/site-packages/sitecustomize.py .\n+\n+A custom distutils.core.Extension instance and setup() args\n+(Distribution) for for the build can be defined by a <modulename>.pyxbld\n+file like:\n+\n+# examplemod.pyxbld\n+def make_ext(modname, pyxfilename):\n+    from distutils.extension import Extension\n+    return Extension(name = modname,\n+                     sources=[pyxfilename, 'hello.c'],\n+                     include_dirs=['/myinclude'] )\n+def make_setup_args():\n+    return dict(script_args=[\"--compiler=mingw32\"])\n+\n+Extra dependencies can be defined by a <modulename>.pyxdep .\n+See README.\n+\n+Since Cython 0.11, the :mod:`pyximport` module also has experimental\n+compilation support for normal Python modules.  This allows you to\n+automatically run Cython on every .pyx and .py module that Python\n+imports, including parts of the standard library and installed\n+packages.  Cython will still fail to compile a lot of Python modules,\n+in which case the import mechanism will fall back to loading the\n+Python source modules instead.  The .py import mechanism is installed\n+like this::\n+\n+    pyximport.install(pyimport = True)\n+\n+Running this module as a top-level script will run a test and then print\n+the documentation.\n+\"\"\"\n+\n+import glob\n+import importlib\n+import os\n+import sys\n+from importlib.abc import MetaPathFinder\n+from importlib.machinery import ExtensionFileLoader, SourceFileLoader\n+from importlib.util import spec_from_file_location\n+\n+mod_name = \"pyximport\"\n+\n+PY_EXT = \".py\"\n+PYX_EXT = \".pyx\"\n+PYXDEP_EXT = \".pyxdep\"\n+PYXBLD_EXT = \".pyxbld\"\n+\n+DEBUG_IMPORT = False\n+\n+\n+def _print(message, args):\n+    if args:\n+        message = message % args\n+    print(message)\n+\n+\n+def _debug(message, *args):\n+    if DEBUG_IMPORT:\n+        _print(message, args)\n+\n+\n+def _info(message, *args):\n+    _print(message, args)\n+\n+\n+def load_source(file_path):\n+    import importlib.util\n+    from importlib.machinery import SourceFileLoader\n+    spec = importlib.util.spec_from_file_location(\"XXXX\", file_path, loader=SourceFileLoader(\"XXXX\", file_path))\n+    module = importlib.util.module_from_spec(spec)\n+    spec.loader.exec_module(module)\n+    return module\n+\n+# Performance problem: for every PYX file that is imported, we will\n+# invoke the whole distutils infrastructure even if the module is\n+# already built. It might be more efficient to only do it when the\n+# mod time of the .pyx is newer than the mod time of the .so but\n+# the question is how to get distutils to tell me the name of the .so\n+# before it builds it. Maybe it is easy...but maybe the performance\n+# issue isn't real.\n+def _load_pyrex(name, filename):\n+    \"Load a pyrex file given a name and filename.\"\n+\n+\n+def get_distutils_extension(modname, pyxfilename, language_level=None):\n+#    try:\n+#        import hashlib\n+#    except ImportError:\n+#        import md5 as hashlib\n+#    extra = \"_\" + hashlib.md5(open(pyxfilename).read()).hexdigest()\n+#    modname = modname + extra\n+    extension_mod,setup_args = handle_special_build(modname, pyxfilename)\n+    if not extension_mod:\n+        if not isinstance(pyxfilename, str):\n+            # distutils is stupid in Py2 and requires exactly 'str'\n+            # => encode accidentally coerced unicode strings back to str\n+            pyxfilename = pyxfilename.encode(sys.getfilesystemencoding())\n+        from distutils.extension import Extension\n+        extension_mod = Extension(name = modname, sources=[pyxfilename])\n+        if language_level is not None:\n+            extension_mod.cython_directives = {'language_level': language_level}\n+    return extension_mod,setup_args\n+\n+\n+def handle_special_build(modname, pyxfilename):\n+    special_build = os.path.splitext(pyxfilename)[0] + PYXBLD_EXT\n+    ext = None\n+    setup_args={}\n+    if os.path.exists(special_build):\n+        # globls = {}\n+        # locs = {}\n+        # execfile(special_build, globls, locs)\n+        # ext = locs[\"make_ext\"](modname, pyxfilename)\n+        mod = load_source(special_build)\n+        make_ext = getattr(mod,'make_ext',None)\n+        if make_ext:\n+            ext = make_ext(modname, pyxfilename)\n+            assert ext and ext.sources, \"make_ext in %s did not return Extension\" % special_build\n+        make_setup_args = getattr(mod, 'make_setup_args',None)\n+        if make_setup_args:\n+            setup_args = make_setup_args()\n+            assert isinstance(setup_args,dict), (\"make_setup_args in %s did not return a dict\"\n+                                         % special_build)\n+        assert set or setup_args, (\"neither make_ext nor make_setup_args %s\"\n+                                         % special_build)\n+        ext.sources = [os.path.join(os.path.dirname(special_build), source)\n+                       for source in ext.sources]\n+    return ext, setup_args\n+\n+\n+def handle_dependencies(pyxfilename):\n+    testing = '_test_files' in globals()\n+    dependfile = os.path.splitext(pyxfilename)[0] + PYXDEP_EXT\n+\n+    # by default let distutils decide whether to rebuild on its own\n+    # (it has a better idea of what the output file will be)\n+\n+    # but we know more about dependencies so force a rebuild if\n+    # some of the dependencies are newer than the pyxfile.\n+    if os.path.exists(dependfile):\n+        with open(dependfile) as fid:\n+            depends = fid.readlines()\n+        depends = [depend.strip() for depend in depends]\n+\n+        # gather dependencies in the \"files\" variable\n+        # the dependency file is itself a dependency\n+        files = [dependfile]\n+        for depend in depends:\n+            fullpath = os.path.join(os.path.dirname(dependfile),\n+                                    depend)\n+            files.extend(glob.glob(fullpath))\n+\n+        # only for unit testing to see we did the right thing\n+        if testing:\n+            _test_files[:] = []  #$pycheck_no\n+\n+        # if any file that the pyxfile depends upon is newer than\n+        # the pyx file, 'touch' the pyx file so that distutils will\n+        # be tricked into rebuilding it.\n+        for file in files:\n+            from distutils.dep_util import newer\n+            if newer(file, pyxfilename):\n+                _debug(\"Rebuilding %s because of %s\", pyxfilename, file)\n+                filetime = os.path.getmtime(file)\n+                os.utime(pyxfilename, (filetime, filetime))\n+                if testing:\n+                    _test_files.append(file)\n+\n+\n+def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_level=None):\n+    assert os.path.exists(pyxfilename), \"Path does not exist: %s\" % pyxfilename\n+    handle_dependencies(pyxfilename)\n+\n+    extension_mod, setup_args = get_distutils_extension(name, pyxfilename, language_level)\n+    build_in_temp = pyxargs.build_in_temp\n+    sargs = pyxargs.setup_args.copy()\n+    sargs.update(setup_args)\n+    build_in_temp = sargs.pop('build_in_temp',build_in_temp)\n+\n+    from . import pyxbuild\n+    so_path = pyxbuild.pyx_to_dll(pyxfilename, extension_mod,\n+                                  build_in_temp=build_in_temp,\n+                                  pyxbuild_dir=pyxbuild_dir,\n+                                  setup_args=sargs,\n+                                  inplace=inplace,\n+                                  reload_support=pyxargs.reload_support)\n+    assert os.path.exists(so_path), \"Cannot find: %s\" % so_path\n+\n+    junkpath = os.path.join(os.path.dirname(so_path), name+\"_*\")  #very dangerous with --inplace ? yes, indeed, trying to eat my files ;)\n+    junkstuff = glob.glob(junkpath)\n+    for path in junkstuff:\n+        if path != so_path:\n+            try:\n+                os.remove(path)\n+            except IOError:\n+                _info(\"Couldn't remove %s\", path)\n+\n+    return so_path\n+\n+\n+# import hooks\n+\n+class PyxImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n+        if \".\" in fullname:\n+            *parents, name = fullname.split(\".\")\n+        else:\n+            name = fullname\n+        for entry in path:\n+            if os.path.isdir(os.path.join(entry, name)):\n+                # this module has child modules\n+                filename = os.path.join(entry, name, \"__init__.py\")\n+                submodule_locations = [os.path.join(entry, name)]\n+            else:\n+                filename = os.path.join(entry, name + self.extension)\n+                submodule_locations = None\n+            if not os.path.exists(filename):\n+                continue\n+\n+            return spec_from_file_location(\n+                fullname, filename,\n+                loader=PyxImportLoader(filename, self.pyxbuild_dir, self.inplace, self.language_level),\n+                submodule_search_locations=submodule_locations)\n+\n+        return None  # we don't know how to import this\n+\n+\n+class PyImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PY_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n+        self.uncompilable_modules = {}\n+        self.blocked_modules = ['Cython', 'pyxbuild', 'pyximport.pyxbuild',\n+                                'distutils', 'cython']\n+        self.blocked_packages = ['Cython.', 'distutils.']\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if fullname in sys.modules:\n+            return None\n+        if any([fullname.startswith(pkg) for pkg in self.blocked_packages]):\n+            return None\n+        if fullname in self.blocked_modules:\n+            # prevent infinite recursion\n+            return None\n+\n+        self.blocked_modules.append(fullname)\n+        name = fullname\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n+        try:\n+            for entry in path:\n+                if os.path.isdir(os.path.join(entry, name)):\n+                    # this module has child modules\n+                    filename = os.path.join(entry, name, \"__init__.py\")",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r848785972",
            "id": 848785972,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yl3I0",
            "original_commit_id": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "original_line": 281,
            "original_position": 281,
            "original_start_line": null,
            "path": "pyximport/_pyximport3.py",
            "position": null,
            "pull_request_review_id": 940018614,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/848785972/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T19:24:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/848785972",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r848786567"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/848786567"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                    filename = os.path.join(entry, name + self.extension)\r\n```",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-12T19:12:48Z",
            "diff_hunk": "@@ -0,0 +1,473 @@\n+\"\"\"\n+Import hooks; when installed with the install() function, these hooks\n+allow importing .pyx files as if they were Python modules.\n+\n+If you want the hook installed every time you run Python\n+you can add it to your Python version by adding these lines to\n+sitecustomize.py (which you can create from scratch in site-packages\n+if it doesn't exist there or somewhere else on your python path)::\n+\n+    import pyximport\n+    pyximport.install()\n+\n+For instance on the Mac with a non-system Python 2.3, you could create\n+sitecustomize.py with only those two lines at\n+/usr/local/lib/python2.3/site-packages/sitecustomize.py .\n+\n+A custom distutils.core.Extension instance and setup() args\n+(Distribution) for for the build can be defined by a <modulename>.pyxbld\n+file like:\n+\n+# examplemod.pyxbld\n+def make_ext(modname, pyxfilename):\n+    from distutils.extension import Extension\n+    return Extension(name = modname,\n+                     sources=[pyxfilename, 'hello.c'],\n+                     include_dirs=['/myinclude'] )\n+def make_setup_args():\n+    return dict(script_args=[\"--compiler=mingw32\"])\n+\n+Extra dependencies can be defined by a <modulename>.pyxdep .\n+See README.\n+\n+Since Cython 0.11, the :mod:`pyximport` module also has experimental\n+compilation support for normal Python modules.  This allows you to\n+automatically run Cython on every .pyx and .py module that Python\n+imports, including parts of the standard library and installed\n+packages.  Cython will still fail to compile a lot of Python modules,\n+in which case the import mechanism will fall back to loading the\n+Python source modules instead.  The .py import mechanism is installed\n+like this::\n+\n+    pyximport.install(pyimport = True)\n+\n+Running this module as a top-level script will run a test and then print\n+the documentation.\n+\"\"\"\n+\n+import glob\n+import importlib\n+import os\n+import sys\n+from importlib.abc import MetaPathFinder\n+from importlib.machinery import ExtensionFileLoader, SourceFileLoader\n+from importlib.util import spec_from_file_location\n+\n+mod_name = \"pyximport\"\n+\n+PY_EXT = \".py\"\n+PYX_EXT = \".pyx\"\n+PYXDEP_EXT = \".pyxdep\"\n+PYXBLD_EXT = \".pyxbld\"\n+\n+DEBUG_IMPORT = False\n+\n+\n+def _print(message, args):\n+    if args:\n+        message = message % args\n+    print(message)\n+\n+\n+def _debug(message, *args):\n+    if DEBUG_IMPORT:\n+        _print(message, args)\n+\n+\n+def _info(message, *args):\n+    _print(message, args)\n+\n+\n+def load_source(file_path):\n+    import importlib.util\n+    from importlib.machinery import SourceFileLoader\n+    spec = importlib.util.spec_from_file_location(\"XXXX\", file_path, loader=SourceFileLoader(\"XXXX\", file_path))\n+    module = importlib.util.module_from_spec(spec)\n+    spec.loader.exec_module(module)\n+    return module\n+\n+# Performance problem: for every PYX file that is imported, we will\n+# invoke the whole distutils infrastructure even if the module is\n+# already built. It might be more efficient to only do it when the\n+# mod time of the .pyx is newer than the mod time of the .so but\n+# the question is how to get distutils to tell me the name of the .so\n+# before it builds it. Maybe it is easy...but maybe the performance\n+# issue isn't real.\n+def _load_pyrex(name, filename):\n+    \"Load a pyrex file given a name and filename.\"\n+\n+\n+def get_distutils_extension(modname, pyxfilename, language_level=None):\n+#    try:\n+#        import hashlib\n+#    except ImportError:\n+#        import md5 as hashlib\n+#    extra = \"_\" + hashlib.md5(open(pyxfilename).read()).hexdigest()\n+#    modname = modname + extra\n+    extension_mod,setup_args = handle_special_build(modname, pyxfilename)\n+    if not extension_mod:\n+        if not isinstance(pyxfilename, str):\n+            # distutils is stupid in Py2 and requires exactly 'str'\n+            # => encode accidentally coerced unicode strings back to str\n+            pyxfilename = pyxfilename.encode(sys.getfilesystemencoding())\n+        from distutils.extension import Extension\n+        extension_mod = Extension(name = modname, sources=[pyxfilename])\n+        if language_level is not None:\n+            extension_mod.cython_directives = {'language_level': language_level}\n+    return extension_mod,setup_args\n+\n+\n+def handle_special_build(modname, pyxfilename):\n+    special_build = os.path.splitext(pyxfilename)[0] + PYXBLD_EXT\n+    ext = None\n+    setup_args={}\n+    if os.path.exists(special_build):\n+        # globls = {}\n+        # locs = {}\n+        # execfile(special_build, globls, locs)\n+        # ext = locs[\"make_ext\"](modname, pyxfilename)\n+        mod = load_source(special_build)\n+        make_ext = getattr(mod,'make_ext',None)\n+        if make_ext:\n+            ext = make_ext(modname, pyxfilename)\n+            assert ext and ext.sources, \"make_ext in %s did not return Extension\" % special_build\n+        make_setup_args = getattr(mod, 'make_setup_args',None)\n+        if make_setup_args:\n+            setup_args = make_setup_args()\n+            assert isinstance(setup_args,dict), (\"make_setup_args in %s did not return a dict\"\n+                                         % special_build)\n+        assert set or setup_args, (\"neither make_ext nor make_setup_args %s\"\n+                                         % special_build)\n+        ext.sources = [os.path.join(os.path.dirname(special_build), source)\n+                       for source in ext.sources]\n+    return ext, setup_args\n+\n+\n+def handle_dependencies(pyxfilename):\n+    testing = '_test_files' in globals()\n+    dependfile = os.path.splitext(pyxfilename)[0] + PYXDEP_EXT\n+\n+    # by default let distutils decide whether to rebuild on its own\n+    # (it has a better idea of what the output file will be)\n+\n+    # but we know more about dependencies so force a rebuild if\n+    # some of the dependencies are newer than the pyxfile.\n+    if os.path.exists(dependfile):\n+        with open(dependfile) as fid:\n+            depends = fid.readlines()\n+        depends = [depend.strip() for depend in depends]\n+\n+        # gather dependencies in the \"files\" variable\n+        # the dependency file is itself a dependency\n+        files = [dependfile]\n+        for depend in depends:\n+            fullpath = os.path.join(os.path.dirname(dependfile),\n+                                    depend)\n+            files.extend(glob.glob(fullpath))\n+\n+        # only for unit testing to see we did the right thing\n+        if testing:\n+            _test_files[:] = []  #$pycheck_no\n+\n+        # if any file that the pyxfile depends upon is newer than\n+        # the pyx file, 'touch' the pyx file so that distutils will\n+        # be tricked into rebuilding it.\n+        for file in files:\n+            from distutils.dep_util import newer\n+            if newer(file, pyxfilename):\n+                _debug(\"Rebuilding %s because of %s\", pyxfilename, file)\n+                filetime = os.path.getmtime(file)\n+                os.utime(pyxfilename, (filetime, filetime))\n+                if testing:\n+                    _test_files.append(file)\n+\n+\n+def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_level=None):\n+    assert os.path.exists(pyxfilename), \"Path does not exist: %s\" % pyxfilename\n+    handle_dependencies(pyxfilename)\n+\n+    extension_mod, setup_args = get_distutils_extension(name, pyxfilename, language_level)\n+    build_in_temp = pyxargs.build_in_temp\n+    sargs = pyxargs.setup_args.copy()\n+    sargs.update(setup_args)\n+    build_in_temp = sargs.pop('build_in_temp',build_in_temp)\n+\n+    from . import pyxbuild\n+    so_path = pyxbuild.pyx_to_dll(pyxfilename, extension_mod,\n+                                  build_in_temp=build_in_temp,\n+                                  pyxbuild_dir=pyxbuild_dir,\n+                                  setup_args=sargs,\n+                                  inplace=inplace,\n+                                  reload_support=pyxargs.reload_support)\n+    assert os.path.exists(so_path), \"Cannot find: %s\" % so_path\n+\n+    junkpath = os.path.join(os.path.dirname(so_path), name+\"_*\")  #very dangerous with --inplace ? yes, indeed, trying to eat my files ;)\n+    junkstuff = glob.glob(junkpath)\n+    for path in junkstuff:\n+        if path != so_path:\n+            try:\n+                os.remove(path)\n+            except IOError:\n+                _info(\"Couldn't remove %s\", path)\n+\n+    return so_path\n+\n+\n+# import hooks\n+\n+class PyxImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n+        if \".\" in fullname:\n+            *parents, name = fullname.split(\".\")\n+        else:\n+            name = fullname\n+        for entry in path:\n+            if os.path.isdir(os.path.join(entry, name)):\n+                # this module has child modules\n+                filename = os.path.join(entry, name, \"__init__.py\")\n+                submodule_locations = [os.path.join(entry, name)]\n+            else:\n+                filename = os.path.join(entry, name + self.extension)\n+                submodule_locations = None\n+            if not os.path.exists(filename):\n+                continue\n+\n+            return spec_from_file_location(\n+                fullname, filename,\n+                loader=PyxImportLoader(filename, self.pyxbuild_dir, self.inplace, self.language_level),\n+                submodule_search_locations=submodule_locations)\n+\n+        return None  # we don't know how to import this\n+\n+\n+class PyImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PY_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n+        self.uncompilable_modules = {}\n+        self.blocked_modules = ['Cython', 'pyxbuild', 'pyximport.pyxbuild',\n+                                'distutils', 'cython']\n+        self.blocked_packages = ['Cython.', 'distutils.']\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if fullname in sys.modules:\n+            return None\n+        if any([fullname.startswith(pkg) for pkg in self.blocked_packages]):\n+            return None\n+        if fullname in self.blocked_modules:\n+            # prevent infinite recursion\n+            return None\n+\n+        self.blocked_modules.append(fullname)\n+        name = fullname\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n+        try:\n+            for entry in path:\n+                if os.path.isdir(os.path.join(entry, name)):\n+                    # this module has child modules\n+                    filename = os.path.join(entry, name, \"__init__.py\")\n+                    submodule_locations = [os.path.join(entry, name)]\n+                else:\n+                    filename = os.path.join(entry, name + PY_EXT)",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r848786567",
            "id": 848786567,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yl3SH",
            "original_commit_id": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "original_line": 284,
            "original_position": 284,
            "original_start_line": null,
            "path": "pyximport/_pyximport3.py",
            "position": null,
            "pull_request_review_id": 940018614,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/848786567/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T19:24:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/848786567",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r848794330"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/848794330"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is this function empty?",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-12T19:23:07Z",
            "diff_hunk": "@@ -0,0 +1,473 @@\n+\"\"\"\n+Import hooks; when installed with the install() function, these hooks\n+allow importing .pyx files as if they were Python modules.\n+\n+If you want the hook installed every time you run Python\n+you can add it to your Python version by adding these lines to\n+sitecustomize.py (which you can create from scratch in site-packages\n+if it doesn't exist there or somewhere else on your python path)::\n+\n+    import pyximport\n+    pyximport.install()\n+\n+For instance on the Mac with a non-system Python 2.3, you could create\n+sitecustomize.py with only those two lines at\n+/usr/local/lib/python2.3/site-packages/sitecustomize.py .\n+\n+A custom distutils.core.Extension instance and setup() args\n+(Distribution) for for the build can be defined by a <modulename>.pyxbld\n+file like:\n+\n+# examplemod.pyxbld\n+def make_ext(modname, pyxfilename):\n+    from distutils.extension import Extension\n+    return Extension(name = modname,\n+                     sources=[pyxfilename, 'hello.c'],\n+                     include_dirs=['/myinclude'] )\n+def make_setup_args():\n+    return dict(script_args=[\"--compiler=mingw32\"])\n+\n+Extra dependencies can be defined by a <modulename>.pyxdep .\n+See README.\n+\n+Since Cython 0.11, the :mod:`pyximport` module also has experimental\n+compilation support for normal Python modules.  This allows you to\n+automatically run Cython on every .pyx and .py module that Python\n+imports, including parts of the standard library and installed\n+packages.  Cython will still fail to compile a lot of Python modules,\n+in which case the import mechanism will fall back to loading the\n+Python source modules instead.  The .py import mechanism is installed\n+like this::\n+\n+    pyximport.install(pyimport = True)\n+\n+Running this module as a top-level script will run a test and then print\n+the documentation.\n+\"\"\"\n+\n+import glob\n+import importlib\n+import os\n+import sys\n+from importlib.abc import MetaPathFinder\n+from importlib.machinery import ExtensionFileLoader, SourceFileLoader\n+from importlib.util import spec_from_file_location\n+\n+mod_name = \"pyximport\"\n+\n+PY_EXT = \".py\"\n+PYX_EXT = \".pyx\"\n+PYXDEP_EXT = \".pyxdep\"\n+PYXBLD_EXT = \".pyxbld\"\n+\n+DEBUG_IMPORT = False\n+\n+\n+def _print(message, args):\n+    if args:\n+        message = message % args\n+    print(message)\n+\n+\n+def _debug(message, *args):\n+    if DEBUG_IMPORT:\n+        _print(message, args)\n+\n+\n+def _info(message, *args):\n+    _print(message, args)\n+\n+\n+def load_source(file_path):\n+    import importlib.util\n+    from importlib.machinery import SourceFileLoader\n+    spec = importlib.util.spec_from_file_location(\"XXXX\", file_path, loader=SourceFileLoader(\"XXXX\", file_path))\n+    module = importlib.util.module_from_spec(spec)\n+    spec.loader.exec_module(module)\n+    return module\n+\n+# Performance problem: for every PYX file that is imported, we will\n+# invoke the whole distutils infrastructure even if the module is\n+# already built. It might be more efficient to only do it when the\n+# mod time of the .pyx is newer than the mod time of the .so but\n+# the question is how to get distutils to tell me the name of the .so\n+# before it builds it. Maybe it is easy...but maybe the performance\n+# issue isn't real.\n+def _load_pyrex(name, filename):\n+    \"Load a pyrex file given a name and filename.\"",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r848794330",
            "id": 848794330,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yl5La",
            "original_commit_id": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "original_line": 97,
            "original_position": 97,
            "original_start_line": 96,
            "path": "pyximport/_pyximport3.py",
            "position": null,
            "pull_request_review_id": 940018614,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/848794330/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-04-12T19:24:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/848794330",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r851252655"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/851252655"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "By mistake. Fixed.",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-15T12:49:40Z",
            "diff_hunk": "@@ -205,283 +213,142 @@ def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_l\n     return so_path\n \n \n-def load_module(name, pyxfilename, pyxbuild_dir=None, is_package=False,\n-                build_inplace=False, language_level=None, so_path=None):\n-    try:\n-        if so_path is None:\n-            if is_package:\n-                module_name = name + '.__init__'\n-            else:\n-                module_name = name\n-            so_path = build_module(module_name, pyxfilename, pyxbuild_dir,\n-                                   inplace=build_inplace, language_level=language_level)\n-        mod = imp.load_dynamic(name, so_path)\n-        if is_package and not hasattr(mod, '__path__'):\n-            mod.__path__ = [os.path.dirname(so_path)]\n-        assert mod.__file__ == so_path, (mod.__file__, so_path)\n-    except Exception as failure_exc:\n-        _debug(\"Failed to load extension module: %r\" % failure_exc)\n-        if pyxargs.load_py_module_on_import_failure and pyxfilename.endswith('.py'):\n-            # try to fall back to normal import\n-            mod = imp.load_source(name, pyxfilename)\n-            assert mod.__file__ in (pyxfilename, pyxfilename+'c', pyxfilename+'o'), (mod.__file__, pyxfilename)\n-        else:\n-            tb = sys.exc_info()[2]\n-            import traceback\n-            exc = ImportError(\"Building module %s failed: %s\" % (\n-                name, traceback.format_exception_only(*sys.exc_info()[:2])))\n-            if sys.version_info[0] >= 3:\n-                raise exc.with_traceback(tb)\n-            else:\n-                exec(\"raise exc, None, tb\", {'exc': exc, 'tb': tb})\n-    return mod\n-\n-\n # import hooks\n \n-class PyxImporter(object):\n-    \"\"\"A meta-path importer for .pyx files.\n-    \"\"\"\n-    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False,\n-                 language_level=None):\n-        self.extension = extension\n+class PyxImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n         self.pyxbuild_dir = pyxbuild_dir\n         self.inplace = inplace\n         self.language_level = language_level\n+        self.extension = extension\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n+        if \".\" in fullname:\n+            *parents, name = fullname.split(\".\")\n+        else:\n+            name = fullname\n+        for entry in path:\n+            if os.path.isdir(os.path.join(entry, name)):\n+                # this module has child modules\n+                filename = os.path.join(entry, name, \"__init__.py\")     # FIXME: __init__.pyx ?\n+                submodule_locations = [os.path.join(entry, name)]\n+            else:\n+                filename = os.path.join(entry, name + self.extension)\n+                submodule_locations = None\n+            if not os.path.exists(filename):\n+                continue\n \n-    def find_module(self, fullname, package_path=None):\n-        if fullname in sys.modules  and  not pyxargs.reload_support:\n-            return None  # only here when reload()\n+            return spec_from_file_location(\n+                fullname, filename,\n+                loader=PyxImportLoader(filename, self.pyxbuild_dir, self.inplace, self.language_level),\n+                submodule_search_locations=submodule_locations)\n \n-        # package_path might be a _NamespacePath. Convert that into a list...\n-        if package_path is not None and not isinstance(package_path, list):\n-            package_path = list(package_path)\n-        try:\n-            fp, pathname, (ext,mode,ty) = imp.find_module(fullname,package_path)\n-            if fp: fp.close()  # Python should offer a Default-Loader to avoid this double find/open!\n-            if pathname and ty == imp.PKG_DIRECTORY:\n-                pkg_file = os.path.join(pathname, '__init__'+self.extension)\n-                if os.path.isfile(pkg_file):\n-                    return PyxLoader(fullname, pathname,\n-                        init_path=pkg_file,\n-                        pyxbuild_dir=self.pyxbuild_dir,\n-                        inplace=self.inplace,\n-                        language_level=self.language_level)\n-            if pathname and pathname.endswith(self.extension):\n-                return PyxLoader(fullname, pathname,\n-                                 pyxbuild_dir=self.pyxbuild_dir,\n-                                 inplace=self.inplace,\n-                                 language_level=self.language_level)\n-            if ty != imp.C_EXTENSION:  # only when an extension, check if we have a .pyx next!\n-                return None\n-\n-            # find .pyx fast, when .so/.pyd exist --inplace\n-            pyxpath = os.path.splitext(pathname)[0]+self.extension\n-            if os.path.isfile(pyxpath):\n-                return PyxLoader(fullname, pyxpath,\n-                                 pyxbuild_dir=self.pyxbuild_dir,\n-                                 inplace=self.inplace,\n-                                 language_level=self.language_level)\n-\n-            # .so/.pyd's on PATH should not be remote from .pyx's\n-            # think no need to implement PyxArgs.importer_search_remote here?\n-\n-        except ImportError:\n-            pass\n+        return None  # we don't know how to import this\n \n-        # searching sys.path ...\n-\n-        #if DEBUG_IMPORT:  print \"SEARCHING\", fullname, package_path\n-\n-        mod_parts = fullname.split('.')\n-        module_name = mod_parts[-1]\n-        pyx_module_name = module_name + self.extension\n-\n-        # this may work, but it returns the file content, not its path\n-        #import pkgutil\n-        #pyx_source = pkgutil.get_data(package, pyx_module_name)\n-\n-        paths = package_path or sys.path\n-        for path in paths:\n-            pyx_data = None\n-            if not path:\n-                path = os.getcwd()\n-            elif os.path.isfile(path):\n-                try:\n-                    zi = zipimporter(path)\n-                    pyx_data = zi.get_data(pyx_module_name)\n-                except (ZipImportError, IOError, OSError):\n-                    continue  # Module not found.\n-                # unzip the imported file into the build dir\n-                # FIXME: can interfere with later imports if build dir is in sys.path and comes before zip file\n-                path = self.pyxbuild_dir\n-            elif not os.path.isabs(path):\n-                path = os.path.abspath(path)\n-\n-            pyx_module_path = os.path.join(path, pyx_module_name)\n-            if pyx_data is not None:\n-                if not os.path.exists(path):\n-                    try:\n-                        os.makedirs(path)\n-                    except OSError:\n-                        # concurrency issue?\n-                        if not os.path.exists(path):\n-                            raise\n-                with open(pyx_module_path, \"wb\") as f:\n-                    f.write(pyx_data)\n-            elif not os.path.isfile(pyx_module_path):\n-                continue  # Module not found.\n-\n-            return PyxLoader(fullname, pyx_module_path,\n-                             pyxbuild_dir=self.pyxbuild_dir,\n-                             inplace=self.inplace,\n-                             language_level=self.language_level)\n-\n-        # not found, normal package, not a .pyx file, none of our business\n-        _debug(\"%s not found\" % fullname)\n-        return None\n-\n-\n-class PyImporter(PyxImporter):\n-    \"\"\"A meta-path importer for normal .py files.\n-    \"\"\"\n-    def __init__(self, pyxbuild_dir=None, inplace=False, language_level=None):\n-        if language_level is None:\n-            language_level = sys.version_info[0]\n-        self.super = super(PyImporter, self)\n-        self.super.__init__(extension='.py', pyxbuild_dir=pyxbuild_dir, inplace=inplace,\n-                            language_level=language_level)\n+\n+class PyImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PY_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n         self.uncompilable_modules = {}\n         self.blocked_modules = ['Cython', 'pyxbuild', 'pyximport.pyxbuild',\n-                                'distutils']\n+                                'distutils', 'cython']\n         self.blocked_packages = ['Cython.', 'distutils.']\n \n-    def find_module(self, fullname, package_path=None):\n+    def find_spec(self, fullname, path, target=None):\n         if fullname in sys.modules:\n             return None\n         if any([fullname.startswith(pkg) for pkg in self.blocked_packages]):\n             return None\n         if fullname in self.blocked_modules:\n             # prevent infinite recursion\n             return None\n-        if _lib_loader.knows(fullname):\n-            return _lib_loader\n-        _debug(\"trying import of module '%s'\", fullname)\n-        if fullname in self.uncompilable_modules:\n-            path, last_modified = self.uncompilable_modules[fullname]\n-            try:\n-                new_last_modified = os.stat(path).st_mtime\n-                if new_last_modified > last_modified:\n-                    # import would fail again\n-                    return None\n-            except OSError:\n-                # module is no longer where we found it, retry the import\n-                pass\n \n         self.blocked_modules.append(fullname)\n+        name = fullname\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n         try:\n-            importer = self.super.find_module(fullname, package_path)\n-            if importer is not None:\n-                if importer.init_path:\n-                    path = importer.init_path\n-                    real_name = fullname + '.__init__'\n+            for entry in path:\n+                if os.path.isdir(os.path.join(entry, name)):\n+                    # this module has child modules\n+                    filename = os.path.join(entry, name, \"__init__.py\")\n+                    submodule_locations = [os.path.join(entry, name)]\n                 else:\n-                    path = importer.path\n-                    real_name = fullname\n-                _debug(\"importer found path %s for module %s\", path, real_name)\n-                try:\n-                    so_path = build_module(\n-                        real_name, path,\n-                        pyxbuild_dir=self.pyxbuild_dir,\n-                        language_level=self.language_level,\n-                        inplace=self.inplace)\n-                    _lib_loader.add_lib(fullname, path, so_path,\n-                                        is_package=bool(importer.init_path))\n-                    return _lib_loader\n-                except Exception:\n-                    if DEBUG_IMPORT:\n-                        import traceback\n-                        traceback.print_exc()\n-                    # build failed, not a compilable Python module\n-                    try:\n-                        last_modified = os.stat(path).st_mtime\n-                    except OSError:\n-                        last_modified = 0\n-                    self.uncompilable_modules[fullname] = (path, last_modified)\n-                    importer = None\n+                    filename = os.path.join(entry, name + PY_EXT)\n+                    submodule_locations = None\n+                if not os.path.exists(filename):\n+                    continue\n+\n+                return spec_from_file_location(\n+                    fullname, filename,\n+                    loader=PyxImportLoader(filename, self.pyxbuild_dir, self.inplace, self.language_level),\n+                    submodule_search_locations=submodule_locations)\n         finally:\n             self.blocked_modules.pop()\n-        return importer\n-\n-\n-class LibLoader(object):\n-    def __init__(self):\n-        self._libs = {}\n-\n-    def load_module(self, fullname):\n-        try:\n-            source_path, so_path, is_package = self._libs[fullname]\n-        except KeyError:\n-            raise ValueError(\"invalid module %s\" % fullname)\n-        _debug(\"Loading shared library module '%s' from %s\", fullname, so_path)\n-        return load_module(fullname, source_path, so_path=so_path, is_package=is_package)\n \n-    def add_lib(self, fullname, path, so_path, is_package):\n-        self._libs[fullname] = (path, so_path, is_package)\n+        return None  # we don't know how to import this\n \n-    def knows(self, fullname):\n-        return fullname in self._libs\n \n-_lib_loader = LibLoader()\n+class PyxImportLoader(ExtensionFileLoader):\n \n+    def __init__(self, filename, pyxbuild_dir, inplace, language_level):\n+        module_name = os.path.splitext(os.path.basename(filename))[0]\n+        super().__init__(module_name, filename)\n+        self._pyxbuild_dir = pyxbuild_dir\n+        self._inplace = inplace\n+        self._language_level = language_level\n \n-class PyxLoader(object):\n-    def __init__(self, fullname, path, init_path=None, pyxbuild_dir=None,\n-                 inplace=False, language_level=None):\n-        _debug(\"PyxLoader created for loading %s from %s (init path: %s)\",\n-               fullname, path, init_path)\n-        self.fullname = fullname\n-        self.path, self.init_path = path, init_path\n-        self.pyxbuild_dir = pyxbuild_dir\n-        self.inplace = inplace\n-        self.language_level = language_level\n+    def create_module(self, spec):\n+        try:\n+            so_path = build_module(spec.name, pyxfilename=spec.origin, pyxbuild_dir=self._pyxbuild_dir,\n+                                   inplace=self._inplace, language_level=self._language_level)\n+            self.path = so_path\n+            spec.origin = so_path\n+            return super().create_module(spec)\n+        except Exception as failure_exc:\n+            _debug(\"Failed to load extension module: %r\" % failure_exc)\n+            if pyxargs.load_py_module_on_import_failure and spec.origin.endswith(PY_EXT):\n+                spec = importlib.util.spec_from_file_location(spec.name, spec.origin,\n+                                                              loader=SourceFileLoader(spec.name, spec.origin))\n+                mod = importlib.util.module_from_spec(spec)\n+                assert mod.__file__ in (spec.origin, spec.origin + 'c', spec.origin + 'o'), (mod.__file__, spec.origin)\n+                return mod\n+            else:\n+                tb = sys.exc_info()[2]\n+                import traceback\n+                exc = ImportError(\"Building module %s failed: %s\" % (\n+                    spec.name, traceback.format_exception_only(*sys.exc_info()[:2])))\n+                raise exc.with_traceback(tb)\n \n-    def load_module(self, fullname):\n-        assert self.fullname == fullname, (\n-            \"invalid module, expected %s, got %s\" % (\n-            self.fullname, fullname))\n-        if self.init_path:\n-            # package\n-            #print \"PACKAGE\", fullname\n-            module = load_module(fullname, self.init_path,\n-                                 self.pyxbuild_dir, is_package=True,\n-                                 build_inplace=self.inplace,\n-                                 language_level=self.language_level)\n-            module.__path__ = [self.path]\n-        else:\n-            #print \"MODULE\", fullname\n-            module = load_module(fullname, self.path,\n-                                 self.pyxbuild_dir,\n-                                 build_inplace=self.inplace,\n-                                 language_level=self.language_level)\n-        return module\n+    def exec_module(self, module):\n+        try:\n+            return super().exec_module(module)\n+        except Exception as failure_exc:\n+            import traceback\n+            _debug(\"Failed to load extension module: %r\" % failure_exc)\n+            raise ImportError(\"Executing module %s failed %s\" % (\n+                    module.__file__, traceback.format_exception_only(*sys.exc_info()[:2])))\n \n \n-#install args",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r851252655",
            "id": 851252655,
            "in_reply_to_id": 848778721,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yvRWv",
            "original_commit_id": "c8a925c4e1765793fdc7ae91724082ca4cc141a0",
            "original_line": 470,
            "original_position": 406,
            "original_start_line": null,
            "path": "pyximport/_pyximport3.py",
            "position": null,
            "pull_request_review_id": 943394422,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/851252655/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-15T12:49:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/851252655",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r851255163"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/851255163"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It is empty also in original implementation. I did not see this function used anywhere. Can this function be removed? (I ran unittests related to pyximport and they seems to be passing with this function is removed.)",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-15T12:55:34Z",
            "diff_hunk": "@@ -0,0 +1,473 @@\n+\"\"\"\n+Import hooks; when installed with the install() function, these hooks\n+allow importing .pyx files as if they were Python modules.\n+\n+If you want the hook installed every time you run Python\n+you can add it to your Python version by adding these lines to\n+sitecustomize.py (which you can create from scratch in site-packages\n+if it doesn't exist there or somewhere else on your python path)::\n+\n+    import pyximport\n+    pyximport.install()\n+\n+For instance on the Mac with a non-system Python 2.3, you could create\n+sitecustomize.py with only those two lines at\n+/usr/local/lib/python2.3/site-packages/sitecustomize.py .\n+\n+A custom distutils.core.Extension instance and setup() args\n+(Distribution) for for the build can be defined by a <modulename>.pyxbld\n+file like:\n+\n+# examplemod.pyxbld\n+def make_ext(modname, pyxfilename):\n+    from distutils.extension import Extension\n+    return Extension(name = modname,\n+                     sources=[pyxfilename, 'hello.c'],\n+                     include_dirs=['/myinclude'] )\n+def make_setup_args():\n+    return dict(script_args=[\"--compiler=mingw32\"])\n+\n+Extra dependencies can be defined by a <modulename>.pyxdep .\n+See README.\n+\n+Since Cython 0.11, the :mod:`pyximport` module also has experimental\n+compilation support for normal Python modules.  This allows you to\n+automatically run Cython on every .pyx and .py module that Python\n+imports, including parts of the standard library and installed\n+packages.  Cython will still fail to compile a lot of Python modules,\n+in which case the import mechanism will fall back to loading the\n+Python source modules instead.  The .py import mechanism is installed\n+like this::\n+\n+    pyximport.install(pyimport = True)\n+\n+Running this module as a top-level script will run a test and then print\n+the documentation.\n+\"\"\"\n+\n+import glob\n+import importlib\n+import os\n+import sys\n+from importlib.abc import MetaPathFinder\n+from importlib.machinery import ExtensionFileLoader, SourceFileLoader\n+from importlib.util import spec_from_file_location\n+\n+mod_name = \"pyximport\"\n+\n+PY_EXT = \".py\"\n+PYX_EXT = \".pyx\"\n+PYXDEP_EXT = \".pyxdep\"\n+PYXBLD_EXT = \".pyxbld\"\n+\n+DEBUG_IMPORT = False\n+\n+\n+def _print(message, args):\n+    if args:\n+        message = message % args\n+    print(message)\n+\n+\n+def _debug(message, *args):\n+    if DEBUG_IMPORT:\n+        _print(message, args)\n+\n+\n+def _info(message, *args):\n+    _print(message, args)\n+\n+\n+def load_source(file_path):\n+    import importlib.util\n+    from importlib.machinery import SourceFileLoader\n+    spec = importlib.util.spec_from_file_location(\"XXXX\", file_path, loader=SourceFileLoader(\"XXXX\", file_path))\n+    module = importlib.util.module_from_spec(spec)\n+    spec.loader.exec_module(module)\n+    return module\n+\n+# Performance problem: for every PYX file that is imported, we will\n+# invoke the whole distutils infrastructure even if the module is\n+# already built. It might be more efficient to only do it when the\n+# mod time of the .pyx is newer than the mod time of the .so but\n+# the question is how to get distutils to tell me the name of the .so\n+# before it builds it. Maybe it is easy...but maybe the performance\n+# issue isn't real.\n+def _load_pyrex(name, filename):\n+    \"Load a pyrex file given a name and filename.\"",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r851255163",
            "id": 851255163,
            "in_reply_to_id": 848794330,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yvR97",
            "original_commit_id": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "original_line": 97,
            "original_position": 97,
            "original_start_line": 96,
            "path": "pyximport/_pyximport3.py",
            "position": null,
            "pull_request_review_id": 943397674,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/851255163/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-04-15T12:55:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/851255163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r851258225"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/851258225"
                }
            },
            "author_association": "MEMBER",
            "body": "Looking at the git history I'm not sure it was ever used or that it ever did anything. So remove it.",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-15T13:02:56Z",
            "diff_hunk": "@@ -0,0 +1,473 @@\n+\"\"\"\n+Import hooks; when installed with the install() function, these hooks\n+allow importing .pyx files as if they were Python modules.\n+\n+If you want the hook installed every time you run Python\n+you can add it to your Python version by adding these lines to\n+sitecustomize.py (which you can create from scratch in site-packages\n+if it doesn't exist there or somewhere else on your python path)::\n+\n+    import pyximport\n+    pyximport.install()\n+\n+For instance on the Mac with a non-system Python 2.3, you could create\n+sitecustomize.py with only those two lines at\n+/usr/local/lib/python2.3/site-packages/sitecustomize.py .\n+\n+A custom distutils.core.Extension instance and setup() args\n+(Distribution) for for the build can be defined by a <modulename>.pyxbld\n+file like:\n+\n+# examplemod.pyxbld\n+def make_ext(modname, pyxfilename):\n+    from distutils.extension import Extension\n+    return Extension(name = modname,\n+                     sources=[pyxfilename, 'hello.c'],\n+                     include_dirs=['/myinclude'] )\n+def make_setup_args():\n+    return dict(script_args=[\"--compiler=mingw32\"])\n+\n+Extra dependencies can be defined by a <modulename>.pyxdep .\n+See README.\n+\n+Since Cython 0.11, the :mod:`pyximport` module also has experimental\n+compilation support for normal Python modules.  This allows you to\n+automatically run Cython on every .pyx and .py module that Python\n+imports, including parts of the standard library and installed\n+packages.  Cython will still fail to compile a lot of Python modules,\n+in which case the import mechanism will fall back to loading the\n+Python source modules instead.  The .py import mechanism is installed\n+like this::\n+\n+    pyximport.install(pyimport = True)\n+\n+Running this module as a top-level script will run a test and then print\n+the documentation.\n+\"\"\"\n+\n+import glob\n+import importlib\n+import os\n+import sys\n+from importlib.abc import MetaPathFinder\n+from importlib.machinery import ExtensionFileLoader, SourceFileLoader\n+from importlib.util import spec_from_file_location\n+\n+mod_name = \"pyximport\"\n+\n+PY_EXT = \".py\"\n+PYX_EXT = \".pyx\"\n+PYXDEP_EXT = \".pyxdep\"\n+PYXBLD_EXT = \".pyxbld\"\n+\n+DEBUG_IMPORT = False\n+\n+\n+def _print(message, args):\n+    if args:\n+        message = message % args\n+    print(message)\n+\n+\n+def _debug(message, *args):\n+    if DEBUG_IMPORT:\n+        _print(message, args)\n+\n+\n+def _info(message, *args):\n+    _print(message, args)\n+\n+\n+def load_source(file_path):\n+    import importlib.util\n+    from importlib.machinery import SourceFileLoader\n+    spec = importlib.util.spec_from_file_location(\"XXXX\", file_path, loader=SourceFileLoader(\"XXXX\", file_path))\n+    module = importlib.util.module_from_spec(spec)\n+    spec.loader.exec_module(module)\n+    return module\n+\n+# Performance problem: for every PYX file that is imported, we will\n+# invoke the whole distutils infrastructure even if the module is\n+# already built. It might be more efficient to only do it when the\n+# mod time of the .pyx is newer than the mod time of the .so but\n+# the question is how to get distutils to tell me the name of the .so\n+# before it builds it. Maybe it is easy...but maybe the performance\n+# issue isn't real.\n+def _load_pyrex(name, filename):\n+    \"Load a pyrex file given a name and filename.\"",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r851258225",
            "id": 851258225,
            "in_reply_to_id": 848794330,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yvStx",
            "original_commit_id": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "original_line": 97,
            "original_position": 97,
            "original_start_line": 96,
            "path": "pyximport/_pyximport3.py",
            "position": null,
            "pull_request_review_id": 943401818,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/851258225/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-04-15T13:02:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/851258225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r851260635"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/851260635"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Unfortunately not. How this failure can be implemented? `exec_module()` internally uses low level machinery which I cannot \"break\":\r\nhttps://github.com/python/cpython/blob/6217864fe5f6855f59d608733ce83fd4466e1b8c/Lib/importlib/_bootstrap_external.py#L1236-L1240\r\nCorrupting .so file causes segmentation fault. Is it possible to use mock for this test?",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-15T13:08:42Z",
            "diff_hunk": "@@ -205,283 +213,142 @@ def build_module(name, pyxfilename, pyxbuild_dir=None, inplace=False, language_l\n     return so_path\n \n \n-def load_module(name, pyxfilename, pyxbuild_dir=None, is_package=False,\n-                build_inplace=False, language_level=None, so_path=None):\n-    try:\n-        if so_path is None:\n-            if is_package:\n-                module_name = name + '.__init__'\n-            else:\n-                module_name = name\n-            so_path = build_module(module_name, pyxfilename, pyxbuild_dir,\n-                                   inplace=build_inplace, language_level=language_level)\n-        mod = imp.load_dynamic(name, so_path)\n-        if is_package and not hasattr(mod, '__path__'):\n-            mod.__path__ = [os.path.dirname(so_path)]\n-        assert mod.__file__ == so_path, (mod.__file__, so_path)\n-    except Exception as failure_exc:\n-        _debug(\"Failed to load extension module: %r\" % failure_exc)\n-        if pyxargs.load_py_module_on_import_failure and pyxfilename.endswith('.py'):\n-            # try to fall back to normal import\n-            mod = imp.load_source(name, pyxfilename)\n-            assert mod.__file__ in (pyxfilename, pyxfilename+'c', pyxfilename+'o'), (mod.__file__, pyxfilename)\n-        else:\n-            tb = sys.exc_info()[2]\n-            import traceback\n-            exc = ImportError(\"Building module %s failed: %s\" % (\n-                name, traceback.format_exception_only(*sys.exc_info()[:2])))\n-            if sys.version_info[0] >= 3:\n-                raise exc.with_traceback(tb)\n-            else:\n-                exec(\"raise exc, None, tb\", {'exc': exc, 'tb': tb})\n-    return mod\n-\n-\n # import hooks\n \n-class PyxImporter(object):\n-    \"\"\"A meta-path importer for .pyx files.\n-    \"\"\"\n-    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False,\n-                 language_level=None):\n-        self.extension = extension\n+class PyxImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PYX_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n         self.pyxbuild_dir = pyxbuild_dir\n         self.inplace = inplace\n         self.language_level = language_level\n+        self.extension = extension\n+\n+    def find_spec(self, fullname, path, target=None):\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n+        if \".\" in fullname:\n+            *parents, name = fullname.split(\".\")\n+        else:\n+            name = fullname\n+        for entry in path:\n+            if os.path.isdir(os.path.join(entry, name)):\n+                # this module has child modules\n+                filename = os.path.join(entry, name, \"__init__.py\")     # FIXME: __init__.pyx ?\n+                submodule_locations = [os.path.join(entry, name)]\n+            else:\n+                filename = os.path.join(entry, name + self.extension)\n+                submodule_locations = None\n+            if not os.path.exists(filename):\n+                continue\n \n-    def find_module(self, fullname, package_path=None):\n-        if fullname in sys.modules  and  not pyxargs.reload_support:\n-            return None  # only here when reload()\n+            return spec_from_file_location(\n+                fullname, filename,\n+                loader=PyxImportLoader(filename, self.pyxbuild_dir, self.inplace, self.language_level),\n+                submodule_search_locations=submodule_locations)\n \n-        # package_path might be a _NamespacePath. Convert that into a list...\n-        if package_path is not None and not isinstance(package_path, list):\n-            package_path = list(package_path)\n-        try:\n-            fp, pathname, (ext,mode,ty) = imp.find_module(fullname,package_path)\n-            if fp: fp.close()  # Python should offer a Default-Loader to avoid this double find/open!\n-            if pathname and ty == imp.PKG_DIRECTORY:\n-                pkg_file = os.path.join(pathname, '__init__'+self.extension)\n-                if os.path.isfile(pkg_file):\n-                    return PyxLoader(fullname, pathname,\n-                        init_path=pkg_file,\n-                        pyxbuild_dir=self.pyxbuild_dir,\n-                        inplace=self.inplace,\n-                        language_level=self.language_level)\n-            if pathname and pathname.endswith(self.extension):\n-                return PyxLoader(fullname, pathname,\n-                                 pyxbuild_dir=self.pyxbuild_dir,\n-                                 inplace=self.inplace,\n-                                 language_level=self.language_level)\n-            if ty != imp.C_EXTENSION:  # only when an extension, check if we have a .pyx next!\n-                return None\n-\n-            # find .pyx fast, when .so/.pyd exist --inplace\n-            pyxpath = os.path.splitext(pathname)[0]+self.extension\n-            if os.path.isfile(pyxpath):\n-                return PyxLoader(fullname, pyxpath,\n-                                 pyxbuild_dir=self.pyxbuild_dir,\n-                                 inplace=self.inplace,\n-                                 language_level=self.language_level)\n-\n-            # .so/.pyd's on PATH should not be remote from .pyx's\n-            # think no need to implement PyxArgs.importer_search_remote here?\n-\n-        except ImportError:\n-            pass\n+        return None  # we don't know how to import this\n \n-        # searching sys.path ...\n-\n-        #if DEBUG_IMPORT:  print \"SEARCHING\", fullname, package_path\n-\n-        mod_parts = fullname.split('.')\n-        module_name = mod_parts[-1]\n-        pyx_module_name = module_name + self.extension\n-\n-        # this may work, but it returns the file content, not its path\n-        #import pkgutil\n-        #pyx_source = pkgutil.get_data(package, pyx_module_name)\n-\n-        paths = package_path or sys.path\n-        for path in paths:\n-            pyx_data = None\n-            if not path:\n-                path = os.getcwd()\n-            elif os.path.isfile(path):\n-                try:\n-                    zi = zipimporter(path)\n-                    pyx_data = zi.get_data(pyx_module_name)\n-                except (ZipImportError, IOError, OSError):\n-                    continue  # Module not found.\n-                # unzip the imported file into the build dir\n-                # FIXME: can interfere with later imports if build dir is in sys.path and comes before zip file\n-                path = self.pyxbuild_dir\n-            elif not os.path.isabs(path):\n-                path = os.path.abspath(path)\n-\n-            pyx_module_path = os.path.join(path, pyx_module_name)\n-            if pyx_data is not None:\n-                if not os.path.exists(path):\n-                    try:\n-                        os.makedirs(path)\n-                    except OSError:\n-                        # concurrency issue?\n-                        if not os.path.exists(path):\n-                            raise\n-                with open(pyx_module_path, \"wb\") as f:\n-                    f.write(pyx_data)\n-            elif not os.path.isfile(pyx_module_path):\n-                continue  # Module not found.\n-\n-            return PyxLoader(fullname, pyx_module_path,\n-                             pyxbuild_dir=self.pyxbuild_dir,\n-                             inplace=self.inplace,\n-                             language_level=self.language_level)\n-\n-        # not found, normal package, not a .pyx file, none of our business\n-        _debug(\"%s not found\" % fullname)\n-        return None\n-\n-\n-class PyImporter(PyxImporter):\n-    \"\"\"A meta-path importer for normal .py files.\n-    \"\"\"\n-    def __init__(self, pyxbuild_dir=None, inplace=False, language_level=None):\n-        if language_level is None:\n-            language_level = sys.version_info[0]\n-        self.super = super(PyImporter, self)\n-        self.super.__init__(extension='.py', pyxbuild_dir=pyxbuild_dir, inplace=inplace,\n-                            language_level=language_level)\n+\n+class PyImportMetaFinder(MetaPathFinder):\n+\n+    def __init__(self, extension=PY_EXT, pyxbuild_dir=None, inplace=False, language_level=None):\n+        self.pyxbuild_dir = pyxbuild_dir\n+        self.inplace = inplace\n+        self.language_level = language_level\n+        self.extension = extension\n         self.uncompilable_modules = {}\n         self.blocked_modules = ['Cython', 'pyxbuild', 'pyximport.pyxbuild',\n-                                'distutils']\n+                                'distutils', 'cython']\n         self.blocked_packages = ['Cython.', 'distutils.']\n \n-    def find_module(self, fullname, package_path=None):\n+    def find_spec(self, fullname, path, target=None):\n         if fullname in sys.modules:\n             return None\n         if any([fullname.startswith(pkg) for pkg in self.blocked_packages]):\n             return None\n         if fullname in self.blocked_modules:\n             # prevent infinite recursion\n             return None\n-        if _lib_loader.knows(fullname):\n-            return _lib_loader\n-        _debug(\"trying import of module '%s'\", fullname)\n-        if fullname in self.uncompilable_modules:\n-            path, last_modified = self.uncompilable_modules[fullname]\n-            try:\n-                new_last_modified = os.stat(path).st_mtime\n-                if new_last_modified > last_modified:\n-                    # import would fail again\n-                    return None\n-            except OSError:\n-                # module is no longer where we found it, retry the import\n-                pass\n \n         self.blocked_modules.append(fullname)\n+        name = fullname\n+        if path is None or path == \"\":\n+            path = [os.getcwd()]  # top level import --\n         try:\n-            importer = self.super.find_module(fullname, package_path)\n-            if importer is not None:\n-                if importer.init_path:\n-                    path = importer.init_path\n-                    real_name = fullname + '.__init__'\n+            for entry in path:\n+                if os.path.isdir(os.path.join(entry, name)):\n+                    # this module has child modules\n+                    filename = os.path.join(entry, name, \"__init__.py\")\n+                    submodule_locations = [os.path.join(entry, name)]\n                 else:\n-                    path = importer.path\n-                    real_name = fullname\n-                _debug(\"importer found path %s for module %s\", path, real_name)\n-                try:\n-                    so_path = build_module(\n-                        real_name, path,\n-                        pyxbuild_dir=self.pyxbuild_dir,\n-                        language_level=self.language_level,\n-                        inplace=self.inplace)\n-                    _lib_loader.add_lib(fullname, path, so_path,\n-                                        is_package=bool(importer.init_path))\n-                    return _lib_loader\n-                except Exception:\n-                    if DEBUG_IMPORT:\n-                        import traceback\n-                        traceback.print_exc()\n-                    # build failed, not a compilable Python module\n-                    try:\n-                        last_modified = os.stat(path).st_mtime\n-                    except OSError:\n-                        last_modified = 0\n-                    self.uncompilable_modules[fullname] = (path, last_modified)\n-                    importer = None\n+                    filename = os.path.join(entry, name + PY_EXT)\n+                    submodule_locations = None\n+                if not os.path.exists(filename):\n+                    continue\n+\n+                return spec_from_file_location(\n+                    fullname, filename,\n+                    loader=PyxImportLoader(filename, self.pyxbuild_dir, self.inplace, self.language_level),\n+                    submodule_search_locations=submodule_locations)\n         finally:\n             self.blocked_modules.pop()\n-        return importer\n-\n-\n-class LibLoader(object):\n-    def __init__(self):\n-        self._libs = {}\n-\n-    def load_module(self, fullname):\n-        try:\n-            source_path, so_path, is_package = self._libs[fullname]\n-        except KeyError:\n-            raise ValueError(\"invalid module %s\" % fullname)\n-        _debug(\"Loading shared library module '%s' from %s\", fullname, so_path)\n-        return load_module(fullname, source_path, so_path=so_path, is_package=is_package)\n \n-    def add_lib(self, fullname, path, so_path, is_package):\n-        self._libs[fullname] = (path, so_path, is_package)\n+        return None  # we don't know how to import this\n \n-    def knows(self, fullname):\n-        return fullname in self._libs\n \n-_lib_loader = LibLoader()\n+class PyxImportLoader(ExtensionFileLoader):\n \n+    def __init__(self, filename, pyxbuild_dir, inplace, language_level):\n+        module_name = os.path.splitext(os.path.basename(filename))[0]\n+        super().__init__(module_name, filename)\n+        self._pyxbuild_dir = pyxbuild_dir\n+        self._inplace = inplace\n+        self._language_level = language_level\n \n-class PyxLoader(object):\n-    def __init__(self, fullname, path, init_path=None, pyxbuild_dir=None,\n-                 inplace=False, language_level=None):\n-        _debug(\"PyxLoader created for loading %s from %s (init path: %s)\",\n-               fullname, path, init_path)\n-        self.fullname = fullname\n-        self.path, self.init_path = path, init_path\n-        self.pyxbuild_dir = pyxbuild_dir\n-        self.inplace = inplace\n-        self.language_level = language_level\n+    def create_module(self, spec):\n+        try:\n+            so_path = build_module(spec.name, pyxfilename=spec.origin, pyxbuild_dir=self._pyxbuild_dir,\n+                                   inplace=self._inplace, language_level=self._language_level)\n+            self.path = so_path\n+            spec.origin = so_path\n+            return super().create_module(spec)\n+        except Exception as failure_exc:\n+            _debug(\"Failed to load extension module: %r\" % failure_exc)\n+            if pyxargs.load_py_module_on_import_failure and spec.origin.endswith(PY_EXT):\n+                spec = importlib.util.spec_from_file_location(spec.name, spec.origin,\n+                                                              loader=SourceFileLoader(spec.name, spec.origin))\n+                mod = importlib.util.module_from_spec(spec)\n+                assert mod.__file__ in (spec.origin, spec.origin + 'c', spec.origin + 'o'), (mod.__file__, spec.origin)\n+                return mod\n+            else:\n+                tb = sys.exc_info()[2]\n+                import traceback\n+                exc = ImportError(\"Building module %s failed: %s\" % (\n+                    spec.name, traceback.format_exception_only(*sys.exc_info()[:2])))\n+                raise exc.with_traceback(tb)\n \n-    def load_module(self, fullname):\n-        assert self.fullname == fullname, (\n-            \"invalid module, expected %s, got %s\" % (\n-            self.fullname, fullname))\n-        if self.init_path:\n-            # package\n-            #print \"PACKAGE\", fullname\n-            module = load_module(fullname, self.init_path,\n-                                 self.pyxbuild_dir, is_package=True,\n-                                 build_inplace=self.inplace,\n-                                 language_level=self.language_level)\n-            module.__path__ = [self.path]\n-        else:\n-            #print \"MODULE\", fullname\n-            module = load_module(fullname, self.path,\n-                                 self.pyxbuild_dir,\n-                                 build_inplace=self.inplace,\n-                                 language_level=self.language_level)\n-        return module\n+    def exec_module(self, module):\n+        try:\n+            return super().exec_module(module)\n+        except Exception as failure_exc:\n+            import traceback\n+            _debug(\"Failed to load extension module: %r\" % failure_exc)\n+            raise ImportError(\"Executing module %s failed %s\" % (\n+                    module.__file__, traceback.format_exception_only(*sys.exc_info()[:2])))",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r851260635",
            "id": 851260635,
            "in_reply_to_id": 848779971,
            "line": 327,
            "node_id": "PRRC_kwDOABDGAc4yvTTb",
            "original_commit_id": "c8a925c4e1765793fdc7ae91724082ca4cc141a0",
            "original_line": 337,
            "original_position": 403,
            "original_start_line": 336,
            "path": "pyximport/_pyximport3.py",
            "position": 327,
            "pull_request_review_id": 943405104,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/851260635/reactions"
            },
            "side": "RIGHT",
            "start_line": 326,
            "start_side": "RIGHT",
            "updated_at": "2022-04-15T13:08:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/851260635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4625#discussion_r851262784"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4625"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/851262784"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Removed.",
            "commit_id": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "created_at": "2022-04-15T13:13:12Z",
            "diff_hunk": "@@ -0,0 +1,473 @@\n+\"\"\"\n+Import hooks; when installed with the install() function, these hooks\n+allow importing .pyx files as if they were Python modules.\n+\n+If you want the hook installed every time you run Python\n+you can add it to your Python version by adding these lines to\n+sitecustomize.py (which you can create from scratch in site-packages\n+if it doesn't exist there or somewhere else on your python path)::\n+\n+    import pyximport\n+    pyximport.install()\n+\n+For instance on the Mac with a non-system Python 2.3, you could create\n+sitecustomize.py with only those two lines at\n+/usr/local/lib/python2.3/site-packages/sitecustomize.py .\n+\n+A custom distutils.core.Extension instance and setup() args\n+(Distribution) for for the build can be defined by a <modulename>.pyxbld\n+file like:\n+\n+# examplemod.pyxbld\n+def make_ext(modname, pyxfilename):\n+    from distutils.extension import Extension\n+    return Extension(name = modname,\n+                     sources=[pyxfilename, 'hello.c'],\n+                     include_dirs=['/myinclude'] )\n+def make_setup_args():\n+    return dict(script_args=[\"--compiler=mingw32\"])\n+\n+Extra dependencies can be defined by a <modulename>.pyxdep .\n+See README.\n+\n+Since Cython 0.11, the :mod:`pyximport` module also has experimental\n+compilation support for normal Python modules.  This allows you to\n+automatically run Cython on every .pyx and .py module that Python\n+imports, including parts of the standard library and installed\n+packages.  Cython will still fail to compile a lot of Python modules,\n+in which case the import mechanism will fall back to loading the\n+Python source modules instead.  The .py import mechanism is installed\n+like this::\n+\n+    pyximport.install(pyimport = True)\n+\n+Running this module as a top-level script will run a test and then print\n+the documentation.\n+\"\"\"\n+\n+import glob\n+import importlib\n+import os\n+import sys\n+from importlib.abc import MetaPathFinder\n+from importlib.machinery import ExtensionFileLoader, SourceFileLoader\n+from importlib.util import spec_from_file_location\n+\n+mod_name = \"pyximport\"\n+\n+PY_EXT = \".py\"\n+PYX_EXT = \".pyx\"\n+PYXDEP_EXT = \".pyxdep\"\n+PYXBLD_EXT = \".pyxbld\"\n+\n+DEBUG_IMPORT = False\n+\n+\n+def _print(message, args):\n+    if args:\n+        message = message % args\n+    print(message)\n+\n+\n+def _debug(message, *args):\n+    if DEBUG_IMPORT:\n+        _print(message, args)\n+\n+\n+def _info(message, *args):\n+    _print(message, args)\n+\n+\n+def load_source(file_path):\n+    import importlib.util\n+    from importlib.machinery import SourceFileLoader\n+    spec = importlib.util.spec_from_file_location(\"XXXX\", file_path, loader=SourceFileLoader(\"XXXX\", file_path))\n+    module = importlib.util.module_from_spec(spec)\n+    spec.loader.exec_module(module)\n+    return module\n+\n+# Performance problem: for every PYX file that is imported, we will\n+# invoke the whole distutils infrastructure even if the module is\n+# already built. It might be more efficient to only do it when the\n+# mod time of the .pyx is newer than the mod time of the .so but\n+# the question is how to get distutils to tell me the name of the .so\n+# before it builds it. Maybe it is easy...but maybe the performance\n+# issue isn't real.\n+def _load_pyrex(name, filename):\n+    \"Load a pyrex file given a name and filename.\"",
            "html_url": "https://github.com/cython/cython/pull/4625#discussion_r851262784",
            "id": 851262784,
            "in_reply_to_id": 848794330,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4yvT1A",
            "original_commit_id": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "original_line": 97,
            "original_position": 97,
            "original_start_line": 96,
            "path": "pyximport/_pyximport3.py",
            "position": null,
            "pull_request_review_id": 943407918,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/851262784/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-04-15T13:13:13Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/851262784",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4625/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1482b7be14e1acb215edd3f69dfaac18baa274b3/comments",
            "commit": {
                "author": {
                    "date": "2022-02-07T22:13:22Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-02-07T22:13:22Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Create _pyximport2.py file",
                "tree": {
                    "sha": "145ddbc37c2ff8ffff87123cda3cdf6e9bf1080b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/145ddbc37c2ff8ffff87123cda3cdf6e9bf1080b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1482b7be14e1acb215edd3f69dfaac18baa274b3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/1482b7be14e1acb215edd3f69dfaac18baa274b3",
            "node_id": "C_kwDOFL4z49oAKDE0ODJiN2JlMTRlMWFjYjIxNWVkZDNmNjlkZmFhYzE4YmFhMjc0YjM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2a304b0f9e6c9a98f2a8a38d80404a34e6623cd8",
                    "sha": "2a304b0f9e6c9a98f2a8a38d80404a34e6623cd8",
                    "url": "https://api.github.com/repos/cython/cython/commits/2a304b0f9e6c9a98f2a8a38d80404a34e6623cd8"
                }
            ],
            "sha": "1482b7be14e1acb215edd3f69dfaac18baa274b3",
            "url": "https://api.github.com/repos/cython/cython/commits/1482b7be14e1acb215edd3f69dfaac18baa274b3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/87aa6e914ab322914f2c3bd24fe7ac319ee24ebe/comments",
            "commit": {
                "author": {
                    "date": "2022-02-07T22:14:04Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-02-07T22:14:04Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Create _pyximport3.py file",
                "tree": {
                    "sha": "fce58f2624ecd9f60a60db0e2d070ccec9ed87d8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/fce58f2624ecd9f60a60db0e2d070ccec9ed87d8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/87aa6e914ab322914f2c3bd24fe7ac319ee24ebe",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/87aa6e914ab322914f2c3bd24fe7ac319ee24ebe",
            "node_id": "C_kwDOFL4z49oAKDg3YWE2ZTkxNGFiMzIyOTE0ZjJjM2JkMjRmZTdhYzMxOWVlMjRlYmU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2a304b0f9e6c9a98f2a8a38d80404a34e6623cd8",
                    "sha": "2a304b0f9e6c9a98f2a8a38d80404a34e6623cd8",
                    "url": "https://api.github.com/repos/cython/cython/commits/2a304b0f9e6c9a98f2a8a38d80404a34e6623cd8"
                }
            ],
            "sha": "87aa6e914ab322914f2c3bd24fe7ac319ee24ebe",
            "url": "https://api.github.com/repos/cython/cython/commits/87aa6e914ab322914f2c3bd24fe7ac319ee24ebe"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ddd1e3dda0a5ea3ffda95463064c116df1d9a59f/comments",
            "commit": {
                "author": {
                    "date": "2022-02-07T22:16:19Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-02-07T22:16:19Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Merge branch 'pyximport_imp4' into pyximport_imp3",
                "tree": {
                    "sha": "8bbfca7beb2ddea237ff1e382e111b1d0ad31994",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8bbfca7beb2ddea237ff1e382e111b1d0ad31994"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ddd1e3dda0a5ea3ffda95463064c116df1d9a59f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/ddd1e3dda0a5ea3ffda95463064c116df1d9a59f",
            "node_id": "C_kwDOFL4z49oAKGRkZDFlM2RkYTBhNWVhM2ZmZGE5NTQ2MzA2NGMxMTZkZjFkOWE1OWY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1482b7be14e1acb215edd3f69dfaac18baa274b3",
                    "sha": "1482b7be14e1acb215edd3f69dfaac18baa274b3",
                    "url": "https://api.github.com/repos/cython/cython/commits/1482b7be14e1acb215edd3f69dfaac18baa274b3"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/87aa6e914ab322914f2c3bd24fe7ac319ee24ebe",
                    "sha": "87aa6e914ab322914f2c3bd24fe7ac319ee24ebe",
                    "url": "https://api.github.com/repos/cython/cython/commits/87aa6e914ab322914f2c3bd24fe7ac319ee24ebe"
                }
            ],
            "sha": "ddd1e3dda0a5ea3ffda95463064c116df1d9a59f",
            "url": "https://api.github.com/repos/cython/cython/commits/ddd1e3dda0a5ea3ffda95463064c116df1d9a59f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c8a925c4e1765793fdc7ae91724082ca4cc141a0/comments",
            "commit": {
                "author": {
                    "date": "2022-02-09T21:46:21Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-02-09T21:51:36Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Port imp to importlib",
                "tree": {
                    "sha": "a4efe6dcc4876bca68f64f520a56d838a227724d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a4efe6dcc4876bca68f64f520a56d838a227724d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c8a925c4e1765793fdc7ae91724082ca4cc141a0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/c8a925c4e1765793fdc7ae91724082ca4cc141a0",
            "node_id": "C_kwDOFL4z49oAKGM4YTkyNWM0ZTE3NjU3OTNmZGM3YWU5MTcyNDA4MmNhNGNjMTQxYTA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ddd1e3dda0a5ea3ffda95463064c116df1d9a59f",
                    "sha": "ddd1e3dda0a5ea3ffda95463064c116df1d9a59f",
                    "url": "https://api.github.com/repos/cython/cython/commits/ddd1e3dda0a5ea3ffda95463064c116df1d9a59f"
                }
            ],
            "sha": "c8a925c4e1765793fdc7ae91724082ca4cc141a0",
            "url": "https://api.github.com/repos/cython/cython/commits/c8a925c4e1765793fdc7ae91724082ca4cc141a0"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b30ee7536746a5e291ca21b38e536d6ec27b1e38/comments",
            "commit": {
                "author": {
                    "date": "2022-04-10T18:25:31Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-10T18:25:31Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Remove FIXME.\n\nHandling __init__.pyx files is not trivial and not even supported by\noriginal pyximport implementation.",
                "tree": {
                    "sha": "409b82947030a12b83b49f2953297624b880e690",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/409b82947030a12b83b49f2953297624b880e690"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b30ee7536746a5e291ca21b38e536d6ec27b1e38",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "node_id": "C_kwDOFL4z49oAKGIzMGVlNzUzNjc0NmE1ZTI5MWNhMjFiMzhlNTM2ZDZlYzI3YjFlMzg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c8a925c4e1765793fdc7ae91724082ca4cc141a0",
                    "sha": "c8a925c4e1765793fdc7ae91724082ca4cc141a0",
                    "url": "https://api.github.com/repos/cython/cython/commits/c8a925c4e1765793fdc7ae91724082ca4cc141a0"
                }
            ],
            "sha": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
            "url": "https://api.github.com/repos/cython/cython/commits/b30ee7536746a5e291ca21b38e536d6ec27b1e38"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/473c4899d37a8537e5e6fc8639ee17be8fa4821f/comments",
            "commit": {
                "author": {
                    "date": "2022-04-14T07:44:10Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-14T07:44:10Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update pyximport/pyximport.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "03776a43613334f36ebce0fbfcdd4f96b6934d34",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/03776a43613334f36ebce0fbfcdd4f96b6934d34"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/473c4899d37a8537e5e6fc8639ee17be8fa4821f",
                "verification": {
                    "payload": "tree 03776a43613334f36ebce0fbfcdd4f96b6934d34\nparent b30ee7536746a5e291ca21b38e536d6ec27b1e38\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1649922250 +0200\ncommitter GitHub <noreply@github.com> 1649922250 +0200\n\nUpdate pyximport/pyximport.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiV9DKCRBK7hj4Ov3rIwAAL1IIAFuxV5Ygewa2KXS0VjpU9QRp\nQxGcGYj8szIPM79LFw5ImRusT4w02RXhHqmm7RTSERLI9/AHLST7frgNJaUhGn6w\nseONAHNNvPfYaU1kFABsSpa4xF+mO3nuQ+zmdUEBQnLE3QqYTPCrttkARd2/Bv/b\n/QRzDDln6Gz4MkC2QKi4SVGLZyxI9Ns+CUqnhxKkxY1QvNSo4tCvWP6C4p3tTXHt\n+NHkQp+7IpB/1oueKyaihv5gV6208r+E5zZtBzYMhtDStHAq5bd2DRN8z7+PrrX7\nxrS9Gi4W0lKO595jqTMrHge3ZTcooVBkfTm93JN0HlobzaNkAk62bP1LDm2cTL8=\n=E35y\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/473c4899d37a8537e5e6fc8639ee17be8fa4821f",
            "node_id": "C_kwDOFL4z49oAKDQ3M2M0ODk5ZDM3YTg1MzdlNWU2ZmM4NjM5ZWUxN2JlOGZhNDgyMWY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b30ee7536746a5e291ca21b38e536d6ec27b1e38",
                    "sha": "b30ee7536746a5e291ca21b38e536d6ec27b1e38",
                    "url": "https://api.github.com/repos/cython/cython/commits/b30ee7536746a5e291ca21b38e536d6ec27b1e38"
                }
            ],
            "sha": "473c4899d37a8537e5e6fc8639ee17be8fa4821f",
            "url": "https://api.github.com/repos/cython/cython/commits/473c4899d37a8537e5e6fc8639ee17be8fa4821f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/cff2f1c2fa30b674a094e3f6ea0da67d2aa42de3/comments",
            "commit": {
                "author": {
                    "date": "2022-04-14T07:46:21Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-14T07:46:21Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "73aa4de9f56959a7a50879ce469cdc164b2626c4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/73aa4de9f56959a7a50879ce469cdc164b2626c4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/cff2f1c2fa30b674a094e3f6ea0da67d2aa42de3",
                "verification": {
                    "payload": "tree 73aa4de9f56959a7a50879ce469cdc164b2626c4\nparent 473c4899d37a8537e5e6fc8639ee17be8fa4821f\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1649922381 +0200\ncommitter GitHub <noreply@github.com> 1649922381 +0200\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiV9FNCRBK7hj4Ov3rIwAAzrMIAHmPE0ePZCCiQ5Fc50i18FnA\nbR2k9V6WgEK5lvwU+ZfxZhdPZZuMby3xrYdvGgfCvlDOEQgD1fMZMpdRJPrE3QzP\nEuwQFEeGtPzLhlz9R6sLHyRNsGdV799ykfYUUMV6SG2TNIxnGLrHhLe0qQ90lzkb\nFJ+9Y/vX+hfLKliGYYFftmBePe8WVbNQsGjI6gim3uKrauk2hWgzB5479umy0gsy\nLfzkSrVCY3C2HGy4Veavs/J/MVEv2Y9D55WsqHeHJqGARGxBMwSo2B+O/yrDYuU3\n0Q5lregWI001uM3yR32GTgYQGNOgc0/KcBtZFQqlXfztpg7rLTGKxEoaTtyIlLQ=\n=tPhX\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/cff2f1c2fa30b674a094e3f6ea0da67d2aa42de3",
            "node_id": "C_kwDOFL4z49oAKGNmZjJmMWMyZmEzMGI2NzRhMDk0ZTNmNmVhMGRhNjdkMmFhNDJkZTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/473c4899d37a8537e5e6fc8639ee17be8fa4821f",
                    "sha": "473c4899d37a8537e5e6fc8639ee17be8fa4821f",
                    "url": "https://api.github.com/repos/cython/cython/commits/473c4899d37a8537e5e6fc8639ee17be8fa4821f"
                }
            ],
            "sha": "cff2f1c2fa30b674a094e3f6ea0da67d2aa42de3",
            "url": "https://api.github.com/repos/cython/cython/commits/cff2f1c2fa30b674a094e3f6ea0da67d2aa42de3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e1c7397379a2c17d2ce907b8bad52d686306a69c/comments",
            "commit": {
                "author": {
                    "date": "2022-04-15T12:49:02Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-15T12:49:14Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Add back removed comment",
                "tree": {
                    "sha": "02b8868927c298747f7b40dbfaad058d5adf4e73",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/02b8868927c298747f7b40dbfaad058d5adf4e73"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e1c7397379a2c17d2ce907b8bad52d686306a69c",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/e1c7397379a2c17d2ce907b8bad52d686306a69c",
            "node_id": "C_kwDOFL4z49oAKGUxYzczOTczNzlhMmMxN2QyY2U5MDdiOGJhZDUyZDY4NjMwNmE2OWM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cff2f1c2fa30b674a094e3f6ea0da67d2aa42de3",
                    "sha": "cff2f1c2fa30b674a094e3f6ea0da67d2aa42de3",
                    "url": "https://api.github.com/repos/cython/cython/commits/cff2f1c2fa30b674a094e3f6ea0da67d2aa42de3"
                }
            ],
            "sha": "e1c7397379a2c17d2ce907b8bad52d686306a69c",
            "url": "https://api.github.com/repos/cython/cython/commits/e1c7397379a2c17d2ce907b8bad52d686306a69c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1cb7573f5d8e4320f1a87196c13214764cfac9ff/comments",
            "commit": {
                "author": {
                    "date": "2022-04-15T13:12:27Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-15T13:12:27Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Remove unused code",
                "tree": {
                    "sha": "4e9139ec724d6494f28db753fc0fdcffbb31d17f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4e9139ec724d6494f28db753fc0fdcffbb31d17f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1cb7573f5d8e4320f1a87196c13214764cfac9ff",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/1cb7573f5d8e4320f1a87196c13214764cfac9ff",
            "node_id": "C_kwDOFL4z49oAKDFjYjc1NzNmNWQ4ZTQzMjBmMWE4NzE5NmMxMzIxNDc2NGNmYWM5ZmY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e1c7397379a2c17d2ce907b8bad52d686306a69c",
                    "sha": "e1c7397379a2c17d2ce907b8bad52d686306a69c",
                    "url": "https://api.github.com/repos/cython/cython/commits/e1c7397379a2c17d2ce907b8bad52d686306a69c"
                }
            ],
            "sha": "1cb7573f5d8e4320f1a87196c13214764cfac9ff",
            "url": "https://api.github.com/repos/cython/cython/commits/1cb7573f5d8e4320f1a87196c13214764cfac9ff"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/98bbaeddec8654eb07ca760d050eb2b150ae0848/comments",
            "commit": {
                "author": {
                    "date": "2022-06-21T15:00:03Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-21T15:00:03Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Merge branch 'master' into pyximport_imp3",
                "tree": {
                    "sha": "22656d5e82240ec4c21c9a868591a94b2c6a3fe6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/22656d5e82240ec4c21c9a868591a94b2c6a3fe6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/98bbaeddec8654eb07ca760d050eb2b150ae0848",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "node_id": "C_kwDOFL4z49oAKDk4YmJhZWRkZWM4NjU0ZWIwN2NhNzYwZDA1MGViMmIxNTBhZTA4NDg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1cb7573f5d8e4320f1a87196c13214764cfac9ff",
                    "sha": "1cb7573f5d8e4320f1a87196c13214764cfac9ff",
                    "url": "https://api.github.com/repos/cython/cython/commits/1cb7573f5d8e4320f1a87196c13214764cfac9ff"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/579fcbc29bbc097af323a504447bebf6e2696231",
                    "sha": "579fcbc29bbc097af323a504447bebf6e2696231",
                    "url": "https://api.github.com/repos/cython/cython/commits/579fcbc29bbc097af323a504447bebf6e2696231"
                }
            ],
            "sha": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
            "url": "https://api.github.com/repos/cython/cython/commits/98bbaeddec8654eb07ca760d050eb2b150ae0848"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/4625/commits",
    "created_at": "2022-02-07T22:24:26Z",
    "diff_url": "https://github.com/cython/cython/pull/4625.diff",
    "draft": false,
    "head": {
        "label": "matusvalo:pyximport_imp3",
        "ref": "pyximport_imp3",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/matusvalo/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/matusvalo/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/matusvalo/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/matusvalo/cython/branches{/branch}",
            "clone_url": "https://github.com/matusvalo/cython.git",
            "collaborators_url": "https://api.github.com/repos/matusvalo/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/matusvalo/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/matusvalo/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/matusvalo/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/matusvalo/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/matusvalo/cython/contributors",
            "created_at": "2021-03-15T14:49:34Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/matusvalo/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/matusvalo/cython/downloads",
            "events_url": "https://api.github.com/repos/matusvalo/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/matusvalo/cython/forks",
            "full_name": "matusvalo/cython",
            "git_commits_url": "https://api.github.com/repos/matusvalo/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/matusvalo/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/matusvalo/cython/git/tags{/sha}",
            "git_url": "git://github.com/matusvalo/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/matusvalo/cython/hooks",
            "html_url": "https://github.com/matusvalo/cython",
            "id": 348009443,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/matusvalo/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/matusvalo/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/matusvalo/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/matusvalo/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/matusvalo/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/matusvalo/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/matusvalo/cython/merges",
            "milestones_url": "https://api.github.com/repos/matusvalo/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNDgwMDk0NDM=",
            "notifications_url": "https://api.github.com/repos/matusvalo/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/matusvalo/cython/pulls{/number}",
            "pushed_at": "2022-07-06T14:00:17Z",
            "releases_url": "https://api.github.com/repos/matusvalo/cython/releases{/id}",
            "size": 64549,
            "ssh_url": "git@github.com:matusvalo/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/matusvalo/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/matusvalo/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/matusvalo/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/matusvalo/cython/subscription",
            "svn_url": "https://github.com/matusvalo/cython",
            "tags_url": "https://api.github.com/repos/matusvalo/cython/tags",
            "teams_url": "https://api.github.com/repos/matusvalo/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/matusvalo/cython/git/trees{/sha}",
            "updated_at": "2022-01-01T09:57:48Z",
            "url": "https://api.github.com/repos/matusvalo/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "98bbaeddec8654eb07ca760d050eb2b150ae0848",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
            "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
            "followers_url": "https://api.github.com/users/matusvalo/followers",
            "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
            "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/matusvalo",
            "id": 827060,
            "login": "matusvalo",
            "node_id": "MDQ6VXNlcjgyNzA2MA==",
            "organizations_url": "https://api.github.com/users/matusvalo/orgs",
            "received_events_url": "https://api.github.com/users/matusvalo/received_events",
            "repos_url": "https://api.github.com/users/matusvalo/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/matusvalo"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/4625",
    "id": 842223987,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/4625",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556315,
            "name": "Python Semantics",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMTU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Python%20Semantics"
        }
    ],
    "locked": false,
    "merge_commit_sha": "4cae7d6c3aef4f83a083f0083d22cd42c373d1fa",
    "merged_at": "2022-07-04T19:47:18Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 624,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\n– New version scheme: 3.x instead of 0.x.\r\n– Change default `language_level` from `2` to `3`.\r\n– Change default for `binding` directive from `False` to `True`.\r\n– Fix some Python compatibility issues (if possible, allowing for breaking changes).\r\n",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 39,
        "state": "open",
        "title": "3.0",
        "updated_at": "2022-07-04T20:44:49Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "PR_kwDOABDGAc4yM1Fz",
    "number": 4625,
    "patch_url": "https://github.com/cython/cython/pull/4625.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/4625/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/98bbaeddec8654eb07ca760d050eb2b150ae0848",
    "title": "Port pyximport to importlib machinery with git history",
    "updated_at": "2022-07-05T10:32:31Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/4625",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
        "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
        "followers_url": "https://api.github.com/users/matusvalo/followers",
        "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
        "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/matusvalo",
        "id": 827060,
        "login": "matusvalo",
        "node_id": "MDQ6VXNlcjgyNzA2MA==",
        "organizations_url": "https://api.github.com/users/matusvalo/orgs",
        "received_events_url": "https://api.github.com/users/matusvalo/received_events",
        "repos_url": "https://api.github.com/users/matusvalo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/matusvalo"
    }
}