{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/4803/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4803/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/4803"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/4803"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4803/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4803"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/c7ba0c83d7fa7c0db60742b117b9e0207493013f"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1296,
            "forks_count": 1296,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1078,
            "open_issues_count": 1078,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2022-05-22T11:41:12Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 64244,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 7031,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2022-05-23T08:03:56Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 7031,
            "watchers_count": 7031
        },
        "sha": "66d1ee5ac43599967bc1bfce380cffb0d32d2fb2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "https://github.com/cython/cython/issues/4758\r\n\r\nProvides a decorator to automatically transform a cdef function into a Numpy ufunc (with the loop embedded in the function so hopefully pretty efficient). At the moment only simple scalar types are supported as arguments (or fused types consisting of simple scalar types).\r\n\r\nThe modifications to existing Cython code are fairly minimal (it's mainly contained in its own separate file) which hopefully means it isn't too invasive.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878690923"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878690923"
                }
            },
            "author_association": "MEMBER",
            "body": "On further thought, this scheme needs revising slightly...",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T12:37:47Z",
            "diff_hunk": "@@ -0,0 +1,376 @@\n+from . import (Nodes, ExprNodes, FusedNode, TreeFragment, Pipeline,\n+               ParseTreeTransforms, Naming)\n+from .Errors import error\n+from . import PyrexTypes\n+from .UtilityCode import CythonUtilityCode\n+from .Code import TempitaUtilityCode, UtilityCode\n+from .Visitor import PrintTree, TreeVisitor, VisitorTransform\n+\n+numpy_int_types = [\"NPY_BYTE\", \"NPY_INT8\", \"NPY_SHORT\", \"NPY_INT16\", \"NPY_INT\",\n+                        \"NPY_INT32\", \"NPY_LONG\", \"NPY_LONGLONG\", \"NPY_INT64\"]\n+numpy_uint_types = [ tp.replace(\"NPY_\", \"NPY_U\") for tp in numpy_int_types ]\n+# note: half float type is deliberately omitted\n+numpy_numeric_types = numpy_int_types + numpy_uint_types + [\n+    \"NPY_FLOAT\", \"NPY_FLOAT32\", \"NPY_DOUBLE\", \"NPY_FLOAT64\", \"NPY_LONGDOUBLE\",\n+]\n+\n+def _get_type_constant(pos, type_):\n+    # 'is' checks don't seem to work for complex types\n+    if type_ == PyrexTypes.c_float_complex_type:\n+        return \"NPY_CFLOAT\"\n+    elif type_ == PyrexTypes.c_double_complex_type:\n+        return \"NPY_CDOUBLE\"\n+    elif type_ == PyrexTypes.c_longdouble_complex_type:\n+        return \"NPY_CLONGDOUBLE\"\n+    elif type_.is_numeric:\n+        postfix = str(type_).upper().replace(\" \", \"\")\n+        typename = \"NPY_%s\" % postfix\n+        if typename in numpy_numeric_types:\n+            return typename\n+    elif type_.is_pyobject:\n+        return \"NPY_OBJECT\"\n+    # TODO possible NPY_BOOL to bint but it needs a cast?\n+    # TODO NPY_DATETIME, NPY_TIMEDELTA, NPY_STRING, NPY_UNICODE and maybe NPY_VOID might be handleable\n+    error(pos, \"Type '%s' cannot be used as a ufunc argument\" % type_)\n+\n+class _UniquePyNameHandler(object):\n+    def __init__(self, existing_names):\n+        self.existing_names = existing_names\n+        self.extra_names = set()\n+\n+    def get_unique_py_name(self, name):\n+        while name in self.existing_names or name in self.extra_names:\n+            name += \"_\"\n+        self.extra_names.add(name)\n+        return name\n+\n+class FindCFuncDefNode(TreeVisitor):\n+    \"\"\"\n+    Finds the CFuncDefNode in the tree\n+\n+    The assumption is that there's only one CFuncDefNode\n+    \"\"\"\n+    found_node = None\n+\n+    def visit_Node(self, node):\n+        if self.found_node:\n+            return\n+        else:\n+            self.visitchildren(node)\n+\n+    def visit_CFuncDefNode(self, node):\n+        self.found_node = node\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.found_node\n+\n+\n+\n+class NameFinderVisitor(TreeVisitor):\n+    \"\"\"\n+    Finds the names of all the NameNodes in the tree\n+    \"\"\"\n+    def __init__(self):\n+        super(NameFinderVisitor, self).__init__()\n+        self.names = set()\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_NameNode(self, node):\n+        self.names.add(node.name)\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.names\n+\n+\n+class UFuncPyObjectTargetNode(ExprNodes.ExprNode):\n+    \"\"\"\n+    Takes ownership of a pyobject and assigns it to the output\n+    char* in a ufunc. This node exists because it's quite difficult\n+    to do the right casts in Cython\n+\n+    target   NameNode\n+    \"\"\"\n+    subexprs = [\"target\"]\n+    is_temp = False\n+\n+    def analyse_target_declaration(self, env):\n+        self.target.analyse_target_declaration(env)\n+\n+    def analyse_types(self, env):\n+        assert False, \"Should only be used as a target\"\n+        return self\n+\n+    def analyse_target_types(self, env):\n+        self.target = self.target.analyse_types(env)\n+        assert self.target.is_name\n+        assert (self.target.type.is_ptr and self.target.type.base_type.is_int and\n+                    self.target.type.base_type.rank == 0)\n+        assert self.type.is_pyobject\n+        return self\n+\n+    def generate_assignment_code(self, rhs, code, overloaded_assignment=False,\n+                                 exception_check=None, exception_value=None):\n+        code.putln(\"*((PyObject**)%s) = %s;\" % (self.target.result(), rhs.result()))\n+        code.put_giveref(rhs.result(), rhs.type)\n+        code.putln(\"%s = 0;\" % rhs.result())\n+        rhs.free_temps(code)\n+\n+\n+\n+class ReplaceReturnsTransform(VisitorTransform):\n+    \"\"\"\n+    Replace the return statement in a function with an assignment\n+\n+    The user defines a Cython ufunc with a single short function. To convert it\n+    into a real ufunc Cython inserts that function into a loop, and the return\n+    statement should be converted to an assignment\n+    \"\"\"\n+    def __init__(self, out_names, out_types):\n+        super(ReplaceReturnsTransform, self).__init__()\n+        self.out_names = out_names\n+        self.out_types = out_types\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_ReturnStatNode(self, node):",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878690923",
            "id": 878690923,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40X8Jr",
            "original_commit_id": "0e148fba2f5989f3acd0862909fabf48c858311e",
            "original_line": 141,
            "original_position": 141,
            "original_start_line": null,
            "path": "Cython/Compiler/UFuncs.py",
            "position": null,
            "pull_request_review_id": 980824033,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878690923/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T12:37:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878690923",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878753613"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878753613"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    'ufunc': ('function',),\r\n```",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T19:46:42Z",
            "diff_hunk": "@@ -382,6 +383,7 @@ class DEFER_ANALYSIS_OF_ARGUMENTS:\n     'total_ordering': ('cclass', ),\n     'dataclasses.dataclass' : ('class', 'cclass',),\n     'cpp_locals': ('module', 'function', 'cclass'),  # I don't think they make sense in a with_statement\n+    'ufunc': ('function'),",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878753613",
            "id": 878753613,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YLdN",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 386,
            "original_position": 12,
            "original_start_line": null,
            "path": "Cython/Compiler/Options.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878753613/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878753613",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878754116"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878754116"
                }
            },
            "author_association": "MEMBER",
            "body": "This should rather be a property (read, attribute) of the `FuncDefNode` at this point than a generic directive in `lenv`.",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T19:51:41Z",
            "diff_hunk": "@@ -2239,6 +2242,10 @@ def visit_FuncDefNode(self, node):\n             self._super_visit_FuncDefNode(node)\n \n         self.seen_vars_stack.pop()\n+\n+        if lenv.directives.get(\"ufunc\"):",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878754116",
            "id": 878754116,
            "line": 2243,
            "node_id": "PRRC_kwDOABDGAc40YLlE",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 2246,
            "original_position": 15,
            "original_start_line": null,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": 5,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878754116/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878754116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878754201"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878754201"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        self.copier_class = ApplyPositionAndCopy if replace_pos else lambda _: TreeCopier()\r\n```",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T19:52:44Z",
            "diff_hunk": "@@ -148,6 +148,7 @@ def __call__(self, node, substitutions, temps, pos):\n             tempmap[temp] = handle\n             temphandles.append(handle)\n         self.tempmap = tempmap\n+        self.copier_class = ApplyPositionAndCopy if replace_pos else lambda ignore: TreeCopier()",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878754201",
            "id": 878754201,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YLmZ",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 151,
            "original_position": 13,
            "original_start_line": null,
            "path": "Cython/Compiler/TreeFragment.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878754201/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878754201",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878755588"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878755588"
                }
            },
            "author_association": "MEMBER",
            "body": "A pattern I commonly used is to write such a visitor and wrap it in a function like `Visitor.tree_contains()` to hide its usage behind a better name.",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T20:09:12Z",
            "diff_hunk": "@@ -0,0 +1,447 @@\n+from . import (Nodes, ExprNodes, FusedNode, TreeFragment, Pipeline,\n+               ParseTreeTransforms, Naming, UtilNodes)\n+from .Errors import error\n+from . import PyrexTypes\n+from .UtilityCode import CythonUtilityCode\n+from .Code import TempitaUtilityCode, UtilityCode\n+from .Visitor import PrintTree, TreeVisitor, VisitorTransform\n+\n+numpy_int_types = [\"NPY_BYTE\", \"NPY_INT8\", \"NPY_SHORT\", \"NPY_INT16\", \"NPY_INT\",\n+                        \"NPY_INT32\", \"NPY_LONG\", \"NPY_LONGLONG\", \"NPY_INT64\"]\n+numpy_uint_types = [ tp.replace(\"NPY_\", \"NPY_U\") for tp in numpy_int_types ]\n+# note: half float type is deliberately omitted\n+numpy_numeric_types = numpy_int_types + numpy_uint_types + [\n+    \"NPY_FLOAT\", \"NPY_FLOAT32\", \"NPY_DOUBLE\", \"NPY_FLOAT64\", \"NPY_LONGDOUBLE\",\n+]\n+\n+def _get_type_constant(pos, type_):\n+    # 'is' checks don't seem to work for complex types\n+    if type_ == PyrexTypes.c_float_complex_type:\n+        return \"NPY_CFLOAT\"\n+    elif type_ == PyrexTypes.c_double_complex_type:\n+        return \"NPY_CDOUBLE\"\n+    elif type_ == PyrexTypes.c_longdouble_complex_type:\n+        return \"NPY_CLONGDOUBLE\"\n+    elif type_.is_numeric:\n+        postfix = str(type_).upper().replace(\" \", \"\")\n+        typename = \"NPY_%s\" % postfix\n+        if typename in numpy_numeric_types:\n+            return typename\n+    elif type_.is_pyobject:\n+        return \"NPY_OBJECT\"\n+    # TODO possible NPY_BOOL to bint but it needs a cast?\n+    # TODO NPY_DATETIME, NPY_TIMEDELTA, NPY_STRING, NPY_UNICODE and maybe NPY_VOID might be handleable\n+    error(pos, \"Type '%s' cannot be used as a ufunc argument\" % type_)\n+\n+class _UniquePyNameHandler(object):\n+    def __init__(self, existing_names):\n+        self.existing_names = existing_names\n+        self.extra_names = set()\n+\n+    def get_unique_py_name(self, name):\n+        while name in self.existing_names or name in self.extra_names:\n+            name += \"_\"\n+        self.extra_names.add(name)\n+        return name\n+\n+class FindCFuncDefNode(TreeVisitor):",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878755588",
            "id": 878755588,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YL8E",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 47,
            "original_position": 47,
            "original_start_line": null,
            "path": "Cython/Compiler/UFuncs.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878755588/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878755588",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878756194"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878756194"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think we use `str(type)` anywhere, rather `type.empty_declaration_code()`.",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T20:15:19Z",
            "diff_hunk": "@@ -0,0 +1,447 @@\n+from . import (Nodes, ExprNodes, FusedNode, TreeFragment, Pipeline,\n+               ParseTreeTransforms, Naming, UtilNodes)\n+from .Errors import error\n+from . import PyrexTypes\n+from .UtilityCode import CythonUtilityCode\n+from .Code import TempitaUtilityCode, UtilityCode\n+from .Visitor import PrintTree, TreeVisitor, VisitorTransform\n+\n+numpy_int_types = [\"NPY_BYTE\", \"NPY_INT8\", \"NPY_SHORT\", \"NPY_INT16\", \"NPY_INT\",\n+                        \"NPY_INT32\", \"NPY_LONG\", \"NPY_LONGLONG\", \"NPY_INT64\"]\n+numpy_uint_types = [ tp.replace(\"NPY_\", \"NPY_U\") for tp in numpy_int_types ]\n+# note: half float type is deliberately omitted\n+numpy_numeric_types = numpy_int_types + numpy_uint_types + [\n+    \"NPY_FLOAT\", \"NPY_FLOAT32\", \"NPY_DOUBLE\", \"NPY_FLOAT64\", \"NPY_LONGDOUBLE\",\n+]\n+\n+def _get_type_constant(pos, type_):\n+    # 'is' checks don't seem to work for complex types\n+    if type_ == PyrexTypes.c_float_complex_type:\n+        return \"NPY_CFLOAT\"\n+    elif type_ == PyrexTypes.c_double_complex_type:\n+        return \"NPY_CDOUBLE\"\n+    elif type_ == PyrexTypes.c_longdouble_complex_type:\n+        return \"NPY_CLONGDOUBLE\"\n+    elif type_.is_numeric:\n+        postfix = str(type_).upper().replace(\" \", \"\")",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878756194",
            "id": 878756194,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YMFi",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 26,
            "original_position": 26,
            "original_start_line": null,
            "path": "Cython/Compiler/UFuncs.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878756194/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878756194",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878756384"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878756384"
                }
            },
            "author_association": "MEMBER",
            "body": "Since complex types are probably rare, I'd just test for `type_.is_complex` once.",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T20:17:19Z",
            "diff_hunk": "@@ -0,0 +1,447 @@\n+from . import (Nodes, ExprNodes, FusedNode, TreeFragment, Pipeline,\n+               ParseTreeTransforms, Naming, UtilNodes)\n+from .Errors import error\n+from . import PyrexTypes\n+from .UtilityCode import CythonUtilityCode\n+from .Code import TempitaUtilityCode, UtilityCode\n+from .Visitor import PrintTree, TreeVisitor, VisitorTransform\n+\n+numpy_int_types = [\"NPY_BYTE\", \"NPY_INT8\", \"NPY_SHORT\", \"NPY_INT16\", \"NPY_INT\",\n+                        \"NPY_INT32\", \"NPY_LONG\", \"NPY_LONGLONG\", \"NPY_INT64\"]\n+numpy_uint_types = [ tp.replace(\"NPY_\", \"NPY_U\") for tp in numpy_int_types ]\n+# note: half float type is deliberately omitted\n+numpy_numeric_types = numpy_int_types + numpy_uint_types + [\n+    \"NPY_FLOAT\", \"NPY_FLOAT32\", \"NPY_DOUBLE\", \"NPY_FLOAT64\", \"NPY_LONGDOUBLE\",\n+]\n+\n+def _get_type_constant(pos, type_):\n+    # 'is' checks don't seem to work for complex types\n+    if type_ == PyrexTypes.c_float_complex_type:\n+        return \"NPY_CFLOAT\"\n+    elif type_ == PyrexTypes.c_double_complex_type:\n+        return \"NPY_CDOUBLE\"\n+    elif type_ == PyrexTypes.c_longdouble_complex_type:\n+        return \"NPY_CLONGDOUBLE\"",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878756384",
            "id": 878756384,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YMIg",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 24,
            "original_position": 24,
            "original_start_line": 18,
            "path": "Cython/Compiler/UFuncs.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878756384/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878756384",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878757157"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878757157"
                }
            },
            "author_association": "MEMBER",
            "body": "`names` is a `set` already. Let's just use it as such.\r\n```suggestion\r\n        names.update(node.local_scope.entries)\r\n        self.name_handler = _UniquePyNameHandler(names)\r\n```",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T20:24:43Z",
            "diff_hunk": "@@ -0,0 +1,447 @@\n+from . import (Nodes, ExprNodes, FusedNode, TreeFragment, Pipeline,\n+               ParseTreeTransforms, Naming, UtilNodes)\n+from .Errors import error\n+from . import PyrexTypes\n+from .UtilityCode import CythonUtilityCode\n+from .Code import TempitaUtilityCode, UtilityCode\n+from .Visitor import PrintTree, TreeVisitor, VisitorTransform\n+\n+numpy_int_types = [\"NPY_BYTE\", \"NPY_INT8\", \"NPY_SHORT\", \"NPY_INT16\", \"NPY_INT\",\n+                        \"NPY_INT32\", \"NPY_LONG\", \"NPY_LONGLONG\", \"NPY_INT64\"]\n+numpy_uint_types = [ tp.replace(\"NPY_\", \"NPY_U\") for tp in numpy_int_types ]\n+# note: half float type is deliberately omitted\n+numpy_numeric_types = numpy_int_types + numpy_uint_types + [\n+    \"NPY_FLOAT\", \"NPY_FLOAT32\", \"NPY_DOUBLE\", \"NPY_FLOAT64\", \"NPY_LONGDOUBLE\",\n+]\n+\n+def _get_type_constant(pos, type_):\n+    # 'is' checks don't seem to work for complex types\n+    if type_ == PyrexTypes.c_float_complex_type:\n+        return \"NPY_CFLOAT\"\n+    elif type_ == PyrexTypes.c_double_complex_type:\n+        return \"NPY_CDOUBLE\"\n+    elif type_ == PyrexTypes.c_longdouble_complex_type:\n+        return \"NPY_CLONGDOUBLE\"\n+    elif type_.is_numeric:\n+        postfix = str(type_).upper().replace(\" \", \"\")\n+        typename = \"NPY_%s\" % postfix\n+        if typename in numpy_numeric_types:\n+            return typename\n+    elif type_.is_pyobject:\n+        return \"NPY_OBJECT\"\n+    # TODO possible NPY_BOOL to bint but it needs a cast?\n+    # TODO NPY_DATETIME, NPY_TIMEDELTA, NPY_STRING, NPY_UNICODE and maybe NPY_VOID might be handleable\n+    error(pos, \"Type '%s' cannot be used as a ufunc argument\" % type_)\n+\n+class _UniquePyNameHandler(object):\n+    def __init__(self, existing_names):\n+        self.existing_names = existing_names\n+        self.extra_names = set()\n+\n+    def get_unique_py_name(self, name):\n+        while name in self.existing_names or name in self.extra_names:\n+            name += \"_\"\n+        self.extra_names.add(name)\n+        return name\n+\n+class FindCFuncDefNode(TreeVisitor):\n+    \"\"\"\n+    Finds the CFuncDefNode in the tree\n+\n+    The assumption is that there's only one CFuncDefNode\n+    \"\"\"\n+    found_node = None\n+\n+    def visit_Node(self, node):\n+        if self.found_node:\n+            return\n+        else:\n+            self.visitchildren(node)\n+\n+    def visit_CFuncDefNode(self, node):\n+        self.found_node = node\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.found_node\n+\n+\n+\n+class NameFinderVisitor(TreeVisitor):\n+    \"\"\"\n+    Finds the names of all the NameNodes in the tree\n+    \"\"\"\n+    def __init__(self):\n+        super(NameFinderVisitor, self).__init__()\n+        self.names = set()\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_NameNode(self, node):\n+        self.names.add(node.name)\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.names\n+\n+\n+class UFuncPyObjectTargetNode(ExprNodes.ExprNode):\n+    \"\"\"\n+    Takes ownership of a pyobject and assigns it to the output\n+    char* in a ufunc. This node exists because it's quite difficult\n+    to do the right casts in Cython\n+\n+    target   NameNode\n+    \"\"\"\n+    subexprs = [\"target\"]\n+    is_temp = False\n+\n+    def analyse_target_declaration(self, env):\n+        self.target.analyse_target_declaration(env)\n+\n+    def analyse_types(self, env):\n+        assert False, \"Should only be used as a target\"\n+        return self\n+\n+    def analyse_target_types(self, env):\n+        self.target = self.target.analyse_types(env)\n+        assert self.target.is_name\n+        assert (self.target.type.is_ptr and self.target.type.base_type.is_int and\n+                    self.target.type.base_type.rank == 0)\n+        assert self.type.is_pyobject\n+        return self\n+\n+    def generate_assignment_code(self, rhs, code, overloaded_assignment=False,\n+                                 exception_check=None, exception_value=None):\n+        code.putln(\"*((PyObject**)%s) = %s;\" % (self.target.result(), rhs.result()))\n+        code.put_giveref(rhs.result(), rhs.type)\n+        code.putln(\"%s = 0;\" % rhs.result())\n+        rhs.free_temps(code)\n+\n+\n+class ReplaceReturnsTransform(VisitorTransform):\n+    \"\"\"\n+    Replace the return statement in a function with an assignment\n+\n+    The user defines a Cython ufunc with a single short function. To convert it\n+    into a real ufunc Cython inserts that function into a loop, and the return\n+    statement should be converted to an assignment.\n+\n+    It also needs to handle a bit of flow control to make sure that return actually\n+    \"returns\"\n+    \"\"\"\n+    def __init__(self, out_names, out_types):\n+        super(ReplaceReturnsTransform, self).__init__()\n+        self.out_names = out_names\n+        self.out_types = out_types\n+        self.needs_finished_var = False\n+        self.return_in_loop = False\n+        self.finished_assignments = []\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def _visit_ReturnStatNode_impl(self, node):\n+        self.return_in_loop = True\n+        if len(self.out_names) == 0:\n+            return None\n+        write_nodes = []\n+        for out_name, out_type in zip(self.out_names, self.out_types):\n+            name_node = ExprNodes.NameNode(node.pos, name=out_name)\n+            if not out_type.is_pyobject:\n+                cast_node = ExprNodes.TypecastNode(node.pos, operand=name_node,\n+                                                type=PyrexTypes.c_ptr_type(out_type))\n+                index_node = ExprNodes.IndexNode(node.pos, base=cast_node,\n+                                                 index=ExprNodes.IntNode(node.pos, value=\"0\"))\n+                write_nodes.append(index_node)\n+            else:\n+                cast_node = UFuncPyObjectTargetNode(node.pos, target=name_node, type=out_type)\n+                write_nodes.append(cast_node)\n+        if (len(write_nodes) == 1 or not node.value.is_sequence_constructor or\n+                node.value.mult_factor or len(node.value.args) != len(write_nodes)):\n+            lhs = write_nodes[0] if len(write_nodes)==1 else ExprNodes.TupleNode(\n+                node.pos, args=write_nodes)\n+            return Nodes.SingleAssignmentNode(\n+                node.pos,\n+                lhs=lhs,\n+                rhs=node.value)\n+        elif node.value:\n+            return Nodes.ParallelAssignmentNode(\n+                node.pos,\n+                stats = [ Nodes.SingleAssignmentNode(\n+                    node.pos,\n+                    lhs=nn, rhs=arg) for nn, arg in zip(write_nodes, node.value.args) ])\n+\n+    def visit_ReturnStatNode(self, node):\n+        impl = self._visit_ReturnStatNode_impl(node)\n+        impl = [ impl ] if impl else []\n+        finished_assignment = Nodes.IndirectionNode(  # make it easy to remove\n+            [ Nodes.SingleAssignmentNode(\n+                node.pos,\n+                lhs=self.finished_letref,\n+                rhs=ExprNodes.IntNode(node.pos, value=\"1\")) ])\n+        self.finished_assignments.append(finished_assignment)\n+        return impl + [ finished_assignment, Nodes.BreakStatNode(node.pos) ]\n+\n+    def visit_LoopNode(self, node):\n+        return_in_loop, self.return_in_loop = self.return_in_loop, False\n+        self.visitchildren(node)\n+        if self.return_in_loop:\n+            # we need to check to see if we returned inside the loop and break if we need\n+            self.needs_finished_var = True\n+            if_clause = Nodes.IfClauseNode(\n+                node.pos,\n+                condition=self.finished_letref,\n+                body=Nodes.BreakStatNode(node.pos))\n+            if_check = Nodes.IfStatNode(\n+                node.pos,\n+                if_clauses=[if_clause],\n+                else_clause=None)\n+            node = [node, if_check]\n+        self.return_in_loop = return_in_loop or self.return_in_loop\n+        return node\n+\n+    def __call__(self, tree, tree_directives):\n+        self.finished_letref = UtilNodes.LetRefNode(\n+            pos=tree.pos,\n+            expression=ExprNodes.IntNode(tree.pos, value=\"0\"))\n+\n+        tree = super(ReplaceReturnsTransform, self).__call__(tree)\n+        tree = Nodes.CompilerDirectivesNode(\n+            tree.pos,\n+            directives = tree_directives,\n+            body = tree)\n+\n+        if self.needs_finished_var:\n+            tree = UtilNodes.LetNode(self.finished_letref, tree)\n+        else:\n+            for assignment in self.finished_assignments:\n+                assignment.stats = []  # drop the assignments (since they're a waste of time)\n+\n+        # wrap the return value in a loop so we can use \"break\" to get out of it\n+        # The loop only runs once and is broken out of\n+        tree = Nodes.StatListNode(\n+            tree.pos,\n+            stats = [tree, Nodes.BreakStatNode(tree.pos)])\n+        while_loop = Nodes.WhileStatNode(\n+            tree.pos,\n+            condition = ExprNodes.IntNode(tree.pos, value=\"1\"),\n+            body = tree,\n+            else_clause = None)\n+        # finally, wrap in a compiler directives node to ignore unreachable code,\n+        # (because the escape mechanism generates a lot of unreachable break clauses)\n+        new_directives = CythonUtilityCode.filter_inherited_directives(tree_directives)\n+        new_directives['warn.unreachable'] = False\n+        return Nodes.CompilerDirectivesNode(\n+            tree.pos,\n+            directives=new_directives,\n+            body=while_loop)\n+\n+\n+class _ArgumentInfo(object):\n+    \"\"\"\n+    Everything related to defining an input/output argument for a ufunc\n+\n+    name  - str - name in the generated code\n+    arg_name  - str or None - only defined for \"in\" arguments\n+    type  - PyrexType\n+    type_constant  - str such as \"NPY_INT8\" representing numpy dtype constants\n+    \"\"\"\n+    def __init__(self, name, type, type_constant, arg_name=None):\n+        self.name = name\n+        self.arg_name = arg_name\n+        self.type = type\n+        self.type_constant = type_constant\n+\n+\n+class UFuncConversion(object):\n+    def __init__(self, node):\n+        self.node = node\n+        self.global_scope = node.local_scope.global_scope()\n+\n+        names = NameFinderVisitor()(node.ufunc_body)\n+        self.name_handler = _UniquePyNameHandler(set(node.local_scope.entries.keys()).union(names))",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878757157",
            "id": 878757157,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YMUl",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 265,
            "original_position": 265,
            "original_start_line": null,
            "path": "Cython/Compiler/UFuncs.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878757157/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878757157",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878757797"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878757797"
                }
            },
            "author_association": "MEMBER",
            "body": "`self.name_handler` tells me nothing about what it does. Why not call it `self.make_pyname_unique()` ?",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T20:30:23Z",
            "diff_hunk": "@@ -0,0 +1,447 @@\n+from . import (Nodes, ExprNodes, FusedNode, TreeFragment, Pipeline,\n+               ParseTreeTransforms, Naming, UtilNodes)\n+from .Errors import error\n+from . import PyrexTypes\n+from .UtilityCode import CythonUtilityCode\n+from .Code import TempitaUtilityCode, UtilityCode\n+from .Visitor import PrintTree, TreeVisitor, VisitorTransform\n+\n+numpy_int_types = [\"NPY_BYTE\", \"NPY_INT8\", \"NPY_SHORT\", \"NPY_INT16\", \"NPY_INT\",\n+                        \"NPY_INT32\", \"NPY_LONG\", \"NPY_LONGLONG\", \"NPY_INT64\"]\n+numpy_uint_types = [ tp.replace(\"NPY_\", \"NPY_U\") for tp in numpy_int_types ]\n+# note: half float type is deliberately omitted\n+numpy_numeric_types = numpy_int_types + numpy_uint_types + [\n+    \"NPY_FLOAT\", \"NPY_FLOAT32\", \"NPY_DOUBLE\", \"NPY_FLOAT64\", \"NPY_LONGDOUBLE\",\n+]\n+\n+def _get_type_constant(pos, type_):\n+    # 'is' checks don't seem to work for complex types\n+    if type_ == PyrexTypes.c_float_complex_type:\n+        return \"NPY_CFLOAT\"\n+    elif type_ == PyrexTypes.c_double_complex_type:\n+        return \"NPY_CDOUBLE\"\n+    elif type_ == PyrexTypes.c_longdouble_complex_type:\n+        return \"NPY_CLONGDOUBLE\"\n+    elif type_.is_numeric:\n+        postfix = str(type_).upper().replace(\" \", \"\")\n+        typename = \"NPY_%s\" % postfix\n+        if typename in numpy_numeric_types:\n+            return typename\n+    elif type_.is_pyobject:\n+        return \"NPY_OBJECT\"\n+    # TODO possible NPY_BOOL to bint but it needs a cast?\n+    # TODO NPY_DATETIME, NPY_TIMEDELTA, NPY_STRING, NPY_UNICODE and maybe NPY_VOID might be handleable\n+    error(pos, \"Type '%s' cannot be used as a ufunc argument\" % type_)\n+\n+class _UniquePyNameHandler(object):\n+    def __init__(self, existing_names):\n+        self.existing_names = existing_names\n+        self.extra_names = set()\n+\n+    def get_unique_py_name(self, name):\n+        while name in self.existing_names or name in self.extra_names:\n+            name += \"_\"\n+        self.extra_names.add(name)\n+        return name\n+\n+class FindCFuncDefNode(TreeVisitor):\n+    \"\"\"\n+    Finds the CFuncDefNode in the tree\n+\n+    The assumption is that there's only one CFuncDefNode\n+    \"\"\"\n+    found_node = None\n+\n+    def visit_Node(self, node):\n+        if self.found_node:\n+            return\n+        else:\n+            self.visitchildren(node)\n+\n+    def visit_CFuncDefNode(self, node):\n+        self.found_node = node\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.found_node\n+\n+\n+\n+class NameFinderVisitor(TreeVisitor):\n+    \"\"\"\n+    Finds the names of all the NameNodes in the tree\n+    \"\"\"\n+    def __init__(self):\n+        super(NameFinderVisitor, self).__init__()\n+        self.names = set()\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_NameNode(self, node):\n+        self.names.add(node.name)\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.names\n+\n+\n+class UFuncPyObjectTargetNode(ExprNodes.ExprNode):\n+    \"\"\"\n+    Takes ownership of a pyobject and assigns it to the output\n+    char* in a ufunc. This node exists because it's quite difficult\n+    to do the right casts in Cython\n+\n+    target   NameNode\n+    \"\"\"\n+    subexprs = [\"target\"]\n+    is_temp = False\n+\n+    def analyse_target_declaration(self, env):\n+        self.target.analyse_target_declaration(env)\n+\n+    def analyse_types(self, env):\n+        assert False, \"Should only be used as a target\"\n+        return self\n+\n+    def analyse_target_types(self, env):\n+        self.target = self.target.analyse_types(env)\n+        assert self.target.is_name\n+        assert (self.target.type.is_ptr and self.target.type.base_type.is_int and\n+                    self.target.type.base_type.rank == 0)\n+        assert self.type.is_pyobject\n+        return self\n+\n+    def generate_assignment_code(self, rhs, code, overloaded_assignment=False,\n+                                 exception_check=None, exception_value=None):\n+        code.putln(\"*((PyObject**)%s) = %s;\" % (self.target.result(), rhs.result()))\n+        code.put_giveref(rhs.result(), rhs.type)\n+        code.putln(\"%s = 0;\" % rhs.result())\n+        rhs.free_temps(code)\n+\n+\n+class ReplaceReturnsTransform(VisitorTransform):\n+    \"\"\"\n+    Replace the return statement in a function with an assignment\n+\n+    The user defines a Cython ufunc with a single short function. To convert it\n+    into a real ufunc Cython inserts that function into a loop, and the return\n+    statement should be converted to an assignment.\n+\n+    It also needs to handle a bit of flow control to make sure that return actually\n+    \"returns\"\n+    \"\"\"\n+    def __init__(self, out_names, out_types):\n+        super(ReplaceReturnsTransform, self).__init__()\n+        self.out_names = out_names\n+        self.out_types = out_types\n+        self.needs_finished_var = False\n+        self.return_in_loop = False\n+        self.finished_assignments = []\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def _visit_ReturnStatNode_impl(self, node):\n+        self.return_in_loop = True\n+        if len(self.out_names) == 0:\n+            return None\n+        write_nodes = []\n+        for out_name, out_type in zip(self.out_names, self.out_types):\n+            name_node = ExprNodes.NameNode(node.pos, name=out_name)\n+            if not out_type.is_pyobject:\n+                cast_node = ExprNodes.TypecastNode(node.pos, operand=name_node,\n+                                                type=PyrexTypes.c_ptr_type(out_type))\n+                index_node = ExprNodes.IndexNode(node.pos, base=cast_node,\n+                                                 index=ExprNodes.IntNode(node.pos, value=\"0\"))\n+                write_nodes.append(index_node)\n+            else:\n+                cast_node = UFuncPyObjectTargetNode(node.pos, target=name_node, type=out_type)\n+                write_nodes.append(cast_node)\n+        if (len(write_nodes) == 1 or not node.value.is_sequence_constructor or\n+                node.value.mult_factor or len(node.value.args) != len(write_nodes)):\n+            lhs = write_nodes[0] if len(write_nodes)==1 else ExprNodes.TupleNode(\n+                node.pos, args=write_nodes)\n+            return Nodes.SingleAssignmentNode(\n+                node.pos,\n+                lhs=lhs,\n+                rhs=node.value)\n+        elif node.value:\n+            return Nodes.ParallelAssignmentNode(\n+                node.pos,\n+                stats = [ Nodes.SingleAssignmentNode(\n+                    node.pos,\n+                    lhs=nn, rhs=arg) for nn, arg in zip(write_nodes, node.value.args) ])\n+\n+    def visit_ReturnStatNode(self, node):\n+        impl = self._visit_ReturnStatNode_impl(node)\n+        impl = [ impl ] if impl else []\n+        finished_assignment = Nodes.IndirectionNode(  # make it easy to remove\n+            [ Nodes.SingleAssignmentNode(\n+                node.pos,\n+                lhs=self.finished_letref,\n+                rhs=ExprNodes.IntNode(node.pos, value=\"1\")) ])\n+        self.finished_assignments.append(finished_assignment)\n+        return impl + [ finished_assignment, Nodes.BreakStatNode(node.pos) ]\n+\n+    def visit_LoopNode(self, node):\n+        return_in_loop, self.return_in_loop = self.return_in_loop, False\n+        self.visitchildren(node)\n+        if self.return_in_loop:\n+            # we need to check to see if we returned inside the loop and break if we need\n+            self.needs_finished_var = True\n+            if_clause = Nodes.IfClauseNode(\n+                node.pos,\n+                condition=self.finished_letref,\n+                body=Nodes.BreakStatNode(node.pos))\n+            if_check = Nodes.IfStatNode(\n+                node.pos,\n+                if_clauses=[if_clause],\n+                else_clause=None)\n+            node = [node, if_check]\n+        self.return_in_loop = return_in_loop or self.return_in_loop\n+        return node\n+\n+    def __call__(self, tree, tree_directives):\n+        self.finished_letref = UtilNodes.LetRefNode(\n+            pos=tree.pos,\n+            expression=ExprNodes.IntNode(tree.pos, value=\"0\"))\n+\n+        tree = super(ReplaceReturnsTransform, self).__call__(tree)\n+        tree = Nodes.CompilerDirectivesNode(\n+            tree.pos,\n+            directives = tree_directives,\n+            body = tree)\n+\n+        if self.needs_finished_var:\n+            tree = UtilNodes.LetNode(self.finished_letref, tree)\n+        else:\n+            for assignment in self.finished_assignments:\n+                assignment.stats = []  # drop the assignments (since they're a waste of time)\n+\n+        # wrap the return value in a loop so we can use \"break\" to get out of it\n+        # The loop only runs once and is broken out of\n+        tree = Nodes.StatListNode(\n+            tree.pos,\n+            stats = [tree, Nodes.BreakStatNode(tree.pos)])\n+        while_loop = Nodes.WhileStatNode(\n+            tree.pos,\n+            condition = ExprNodes.IntNode(tree.pos, value=\"1\"),\n+            body = tree,\n+            else_clause = None)\n+        # finally, wrap in a compiler directives node to ignore unreachable code,\n+        # (because the escape mechanism generates a lot of unreachable break clauses)\n+        new_directives = CythonUtilityCode.filter_inherited_directives(tree_directives)\n+        new_directives['warn.unreachable'] = False\n+        return Nodes.CompilerDirectivesNode(\n+            tree.pos,\n+            directives=new_directives,\n+            body=while_loop)\n+\n+\n+class _ArgumentInfo(object):\n+    \"\"\"\n+    Everything related to defining an input/output argument for a ufunc\n+\n+    name  - str - name in the generated code\n+    arg_name  - str or None - only defined for \"in\" arguments\n+    type  - PyrexType\n+    type_constant  - str such as \"NPY_INT8\" representing numpy dtype constants\n+    \"\"\"\n+    def __init__(self, name, type, type_constant, arg_name=None):\n+        self.name = name\n+        self.arg_name = arg_name\n+        self.type = type\n+        self.type_constant = type_constant\n+\n+\n+class UFuncConversion(object):\n+    def __init__(self, node):\n+        self.node = node\n+        self.global_scope = node.local_scope.global_scope()\n+\n+        names = NameFinderVisitor()(node.ufunc_body)\n+        self.name_handler = _UniquePyNameHandler(set(node.local_scope.entries.keys()).union(names))",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878757797",
            "id": 878757797,
            "in_reply_to_id": 878757157,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YMel",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 265,
            "original_position": 265,
            "original_start_line": null,
            "path": "Cython/Compiler/UFuncs.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878757797/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878757797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878758876"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878758876"
                }
            },
            "author_association": "MEMBER",
            "body": "Please use a name that suggests why there is such a method.\r\nAlso, please make sure you always return something from this method to tell readers that you didn't just forget about some cases.",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T20:41:47Z",
            "diff_hunk": "@@ -0,0 +1,447 @@\n+from . import (Nodes, ExprNodes, FusedNode, TreeFragment, Pipeline,\n+               ParseTreeTransforms, Naming, UtilNodes)\n+from .Errors import error\n+from . import PyrexTypes\n+from .UtilityCode import CythonUtilityCode\n+from .Code import TempitaUtilityCode, UtilityCode\n+from .Visitor import PrintTree, TreeVisitor, VisitorTransform\n+\n+numpy_int_types = [\"NPY_BYTE\", \"NPY_INT8\", \"NPY_SHORT\", \"NPY_INT16\", \"NPY_INT\",\n+                        \"NPY_INT32\", \"NPY_LONG\", \"NPY_LONGLONG\", \"NPY_INT64\"]\n+numpy_uint_types = [ tp.replace(\"NPY_\", \"NPY_U\") for tp in numpy_int_types ]\n+# note: half float type is deliberately omitted\n+numpy_numeric_types = numpy_int_types + numpy_uint_types + [\n+    \"NPY_FLOAT\", \"NPY_FLOAT32\", \"NPY_DOUBLE\", \"NPY_FLOAT64\", \"NPY_LONGDOUBLE\",\n+]\n+\n+def _get_type_constant(pos, type_):\n+    # 'is' checks don't seem to work for complex types\n+    if type_ == PyrexTypes.c_float_complex_type:\n+        return \"NPY_CFLOAT\"\n+    elif type_ == PyrexTypes.c_double_complex_type:\n+        return \"NPY_CDOUBLE\"\n+    elif type_ == PyrexTypes.c_longdouble_complex_type:\n+        return \"NPY_CLONGDOUBLE\"\n+    elif type_.is_numeric:\n+        postfix = str(type_).upper().replace(\" \", \"\")\n+        typename = \"NPY_%s\" % postfix\n+        if typename in numpy_numeric_types:\n+            return typename\n+    elif type_.is_pyobject:\n+        return \"NPY_OBJECT\"\n+    # TODO possible NPY_BOOL to bint but it needs a cast?\n+    # TODO NPY_DATETIME, NPY_TIMEDELTA, NPY_STRING, NPY_UNICODE and maybe NPY_VOID might be handleable\n+    error(pos, \"Type '%s' cannot be used as a ufunc argument\" % type_)\n+\n+class _UniquePyNameHandler(object):\n+    def __init__(self, existing_names):\n+        self.existing_names = existing_names\n+        self.extra_names = set()\n+\n+    def get_unique_py_name(self, name):\n+        while name in self.existing_names or name in self.extra_names:\n+            name += \"_\"\n+        self.extra_names.add(name)\n+        return name\n+\n+class FindCFuncDefNode(TreeVisitor):\n+    \"\"\"\n+    Finds the CFuncDefNode in the tree\n+\n+    The assumption is that there's only one CFuncDefNode\n+    \"\"\"\n+    found_node = None\n+\n+    def visit_Node(self, node):\n+        if self.found_node:\n+            return\n+        else:\n+            self.visitchildren(node)\n+\n+    def visit_CFuncDefNode(self, node):\n+        self.found_node = node\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.found_node\n+\n+\n+\n+class NameFinderVisitor(TreeVisitor):\n+    \"\"\"\n+    Finds the names of all the NameNodes in the tree\n+    \"\"\"\n+    def __init__(self):\n+        super(NameFinderVisitor, self).__init__()\n+        self.names = set()\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_NameNode(self, node):\n+        self.names.add(node.name)\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.names\n+\n+\n+class UFuncPyObjectTargetNode(ExprNodes.ExprNode):\n+    \"\"\"\n+    Takes ownership of a pyobject and assigns it to the output\n+    char* in a ufunc. This node exists because it's quite difficult\n+    to do the right casts in Cython\n+\n+    target   NameNode\n+    \"\"\"\n+    subexprs = [\"target\"]\n+    is_temp = False\n+\n+    def analyse_target_declaration(self, env):\n+        self.target.analyse_target_declaration(env)\n+\n+    def analyse_types(self, env):\n+        assert False, \"Should only be used as a target\"\n+        return self\n+\n+    def analyse_target_types(self, env):\n+        self.target = self.target.analyse_types(env)\n+        assert self.target.is_name\n+        assert (self.target.type.is_ptr and self.target.type.base_type.is_int and\n+                    self.target.type.base_type.rank == 0)\n+        assert self.type.is_pyobject\n+        return self\n+\n+    def generate_assignment_code(self, rhs, code, overloaded_assignment=False,\n+                                 exception_check=None, exception_value=None):\n+        code.putln(\"*((PyObject**)%s) = %s;\" % (self.target.result(), rhs.result()))\n+        code.put_giveref(rhs.result(), rhs.type)\n+        code.putln(\"%s = 0;\" % rhs.result())\n+        rhs.free_temps(code)\n+\n+\n+class ReplaceReturnsTransform(VisitorTransform):\n+    \"\"\"\n+    Replace the return statement in a function with an assignment\n+\n+    The user defines a Cython ufunc with a single short function. To convert it\n+    into a real ufunc Cython inserts that function into a loop, and the return\n+    statement should be converted to an assignment.\n+\n+    It also needs to handle a bit of flow control to make sure that return actually\n+    \"returns\"\n+    \"\"\"\n+    def __init__(self, out_names, out_types):\n+        super(ReplaceReturnsTransform, self).__init__()\n+        self.out_names = out_names\n+        self.out_types = out_types\n+        self.needs_finished_var = False\n+        self.return_in_loop = False\n+        self.finished_assignments = []\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def _visit_ReturnStatNode_impl(self, node):",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878758876",
            "id": 878758876,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YMvc",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 146,
            "original_position": 146,
            "original_start_line": null,
            "path": "Cython/Compiler/UFuncs.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878758876/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878758876",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878758983"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878758983"
                }
            },
            "author_association": "MEMBER",
            "body": "Assertions can be turned off. This seems more of a fatal error.",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T20:43:18Z",
            "diff_hunk": "@@ -0,0 +1,447 @@\n+from . import (Nodes, ExprNodes, FusedNode, TreeFragment, Pipeline,\n+               ParseTreeTransforms, Naming, UtilNodes)\n+from .Errors import error\n+from . import PyrexTypes\n+from .UtilityCode import CythonUtilityCode\n+from .Code import TempitaUtilityCode, UtilityCode\n+from .Visitor import PrintTree, TreeVisitor, VisitorTransform\n+\n+numpy_int_types = [\"NPY_BYTE\", \"NPY_INT8\", \"NPY_SHORT\", \"NPY_INT16\", \"NPY_INT\",\n+                        \"NPY_INT32\", \"NPY_LONG\", \"NPY_LONGLONG\", \"NPY_INT64\"]\n+numpy_uint_types = [ tp.replace(\"NPY_\", \"NPY_U\") for tp in numpy_int_types ]\n+# note: half float type is deliberately omitted\n+numpy_numeric_types = numpy_int_types + numpy_uint_types + [\n+    \"NPY_FLOAT\", \"NPY_FLOAT32\", \"NPY_DOUBLE\", \"NPY_FLOAT64\", \"NPY_LONGDOUBLE\",\n+]\n+\n+def _get_type_constant(pos, type_):\n+    # 'is' checks don't seem to work for complex types\n+    if type_ == PyrexTypes.c_float_complex_type:\n+        return \"NPY_CFLOAT\"\n+    elif type_ == PyrexTypes.c_double_complex_type:\n+        return \"NPY_CDOUBLE\"\n+    elif type_ == PyrexTypes.c_longdouble_complex_type:\n+        return \"NPY_CLONGDOUBLE\"\n+    elif type_.is_numeric:\n+        postfix = str(type_).upper().replace(\" \", \"\")\n+        typename = \"NPY_%s\" % postfix\n+        if typename in numpy_numeric_types:\n+            return typename\n+    elif type_.is_pyobject:\n+        return \"NPY_OBJECT\"\n+    # TODO possible NPY_BOOL to bint but it needs a cast?\n+    # TODO NPY_DATETIME, NPY_TIMEDELTA, NPY_STRING, NPY_UNICODE and maybe NPY_VOID might be handleable\n+    error(pos, \"Type '%s' cannot be used as a ufunc argument\" % type_)\n+\n+class _UniquePyNameHandler(object):\n+    def __init__(self, existing_names):\n+        self.existing_names = existing_names\n+        self.extra_names = set()\n+\n+    def get_unique_py_name(self, name):\n+        while name in self.existing_names or name in self.extra_names:\n+            name += \"_\"\n+        self.extra_names.add(name)\n+        return name\n+\n+class FindCFuncDefNode(TreeVisitor):\n+    \"\"\"\n+    Finds the CFuncDefNode in the tree\n+\n+    The assumption is that there's only one CFuncDefNode\n+    \"\"\"\n+    found_node = None\n+\n+    def visit_Node(self, node):\n+        if self.found_node:\n+            return\n+        else:\n+            self.visitchildren(node)\n+\n+    def visit_CFuncDefNode(self, node):\n+        self.found_node = node\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.found_node\n+\n+\n+\n+class NameFinderVisitor(TreeVisitor):\n+    \"\"\"\n+    Finds the names of all the NameNodes in the tree\n+    \"\"\"\n+    def __init__(self):\n+        super(NameFinderVisitor, self).__init__()\n+        self.names = set()\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_NameNode(self, node):\n+        self.names.add(node.name)\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.names\n+\n+\n+class UFuncPyObjectTargetNode(ExprNodes.ExprNode):\n+    \"\"\"\n+    Takes ownership of a pyobject and assigns it to the output\n+    char* in a ufunc. This node exists because it's quite difficult\n+    to do the right casts in Cython\n+\n+    target   NameNode\n+    \"\"\"\n+    subexprs = [\"target\"]\n+    is_temp = False\n+\n+    def analyse_target_declaration(self, env):\n+        self.target.analyse_target_declaration(env)\n+\n+    def analyse_types(self, env):\n+        assert False, \"Should only be used as a target\"\n+        return self",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878758983",
            "id": 878758983,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YMxH",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 105,
            "original_position": 105,
            "original_start_line": 104,
            "path": "Cython/Compiler/UFuncs.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878758983/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878758983",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878759612"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878759612"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                rhs=ExprNodes.IntNode(node.pos, value=\"1\", constant_result=1)) ])\r\n```",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T20:50:52Z",
            "diff_hunk": "@@ -0,0 +1,447 @@\n+from . import (Nodes, ExprNodes, FusedNode, TreeFragment, Pipeline,\n+               ParseTreeTransforms, Naming, UtilNodes)\n+from .Errors import error\n+from . import PyrexTypes\n+from .UtilityCode import CythonUtilityCode\n+from .Code import TempitaUtilityCode, UtilityCode\n+from .Visitor import PrintTree, TreeVisitor, VisitorTransform\n+\n+numpy_int_types = [\"NPY_BYTE\", \"NPY_INT8\", \"NPY_SHORT\", \"NPY_INT16\", \"NPY_INT\",\n+                        \"NPY_INT32\", \"NPY_LONG\", \"NPY_LONGLONG\", \"NPY_INT64\"]\n+numpy_uint_types = [ tp.replace(\"NPY_\", \"NPY_U\") for tp in numpy_int_types ]\n+# note: half float type is deliberately omitted\n+numpy_numeric_types = numpy_int_types + numpy_uint_types + [\n+    \"NPY_FLOAT\", \"NPY_FLOAT32\", \"NPY_DOUBLE\", \"NPY_FLOAT64\", \"NPY_LONGDOUBLE\",\n+]\n+\n+def _get_type_constant(pos, type_):\n+    # 'is' checks don't seem to work for complex types\n+    if type_ == PyrexTypes.c_float_complex_type:\n+        return \"NPY_CFLOAT\"\n+    elif type_ == PyrexTypes.c_double_complex_type:\n+        return \"NPY_CDOUBLE\"\n+    elif type_ == PyrexTypes.c_longdouble_complex_type:\n+        return \"NPY_CLONGDOUBLE\"\n+    elif type_.is_numeric:\n+        postfix = str(type_).upper().replace(\" \", \"\")\n+        typename = \"NPY_%s\" % postfix\n+        if typename in numpy_numeric_types:\n+            return typename\n+    elif type_.is_pyobject:\n+        return \"NPY_OBJECT\"\n+    # TODO possible NPY_BOOL to bint but it needs a cast?\n+    # TODO NPY_DATETIME, NPY_TIMEDELTA, NPY_STRING, NPY_UNICODE and maybe NPY_VOID might be handleable\n+    error(pos, \"Type '%s' cannot be used as a ufunc argument\" % type_)\n+\n+class _UniquePyNameHandler(object):\n+    def __init__(self, existing_names):\n+        self.existing_names = existing_names\n+        self.extra_names = set()\n+\n+    def get_unique_py_name(self, name):\n+        while name in self.existing_names or name in self.extra_names:\n+            name += \"_\"\n+        self.extra_names.add(name)\n+        return name\n+\n+class FindCFuncDefNode(TreeVisitor):\n+    \"\"\"\n+    Finds the CFuncDefNode in the tree\n+\n+    The assumption is that there's only one CFuncDefNode\n+    \"\"\"\n+    found_node = None\n+\n+    def visit_Node(self, node):\n+        if self.found_node:\n+            return\n+        else:\n+            self.visitchildren(node)\n+\n+    def visit_CFuncDefNode(self, node):\n+        self.found_node = node\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.found_node\n+\n+\n+\n+class NameFinderVisitor(TreeVisitor):\n+    \"\"\"\n+    Finds the names of all the NameNodes in the tree\n+    \"\"\"\n+    def __init__(self):\n+        super(NameFinderVisitor, self).__init__()\n+        self.names = set()\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_NameNode(self, node):\n+        self.names.add(node.name)\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.names\n+\n+\n+class UFuncPyObjectTargetNode(ExprNodes.ExprNode):\n+    \"\"\"\n+    Takes ownership of a pyobject and assigns it to the output\n+    char* in a ufunc. This node exists because it's quite difficult\n+    to do the right casts in Cython\n+\n+    target   NameNode\n+    \"\"\"\n+    subexprs = [\"target\"]\n+    is_temp = False\n+\n+    def analyse_target_declaration(self, env):\n+        self.target.analyse_target_declaration(env)\n+\n+    def analyse_types(self, env):\n+        assert False, \"Should only be used as a target\"\n+        return self\n+\n+    def analyse_target_types(self, env):\n+        self.target = self.target.analyse_types(env)\n+        assert self.target.is_name\n+        assert (self.target.type.is_ptr and self.target.type.base_type.is_int and\n+                    self.target.type.base_type.rank == 0)\n+        assert self.type.is_pyobject\n+        return self\n+\n+    def generate_assignment_code(self, rhs, code, overloaded_assignment=False,\n+                                 exception_check=None, exception_value=None):\n+        code.putln(\"*((PyObject**)%s) = %s;\" % (self.target.result(), rhs.result()))\n+        code.put_giveref(rhs.result(), rhs.type)\n+        code.putln(\"%s = 0;\" % rhs.result())\n+        rhs.free_temps(code)\n+\n+\n+class ReplaceReturnsTransform(VisitorTransform):\n+    \"\"\"\n+    Replace the return statement in a function with an assignment\n+\n+    The user defines a Cython ufunc with a single short function. To convert it\n+    into a real ufunc Cython inserts that function into a loop, and the return\n+    statement should be converted to an assignment.\n+\n+    It also needs to handle a bit of flow control to make sure that return actually\n+    \"returns\"\n+    \"\"\"\n+    def __init__(self, out_names, out_types):\n+        super(ReplaceReturnsTransform, self).__init__()\n+        self.out_names = out_names\n+        self.out_types = out_types\n+        self.needs_finished_var = False\n+        self.return_in_loop = False\n+        self.finished_assignments = []\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def _visit_ReturnStatNode_impl(self, node):\n+        self.return_in_loop = True\n+        if len(self.out_names) == 0:\n+            return None\n+        write_nodes = []\n+        for out_name, out_type in zip(self.out_names, self.out_types):\n+            name_node = ExprNodes.NameNode(node.pos, name=out_name)\n+            if not out_type.is_pyobject:\n+                cast_node = ExprNodes.TypecastNode(node.pos, operand=name_node,\n+                                                type=PyrexTypes.c_ptr_type(out_type))\n+                index_node = ExprNodes.IndexNode(node.pos, base=cast_node,\n+                                                 index=ExprNodes.IntNode(node.pos, value=\"0\"))\n+                write_nodes.append(index_node)\n+            else:\n+                cast_node = UFuncPyObjectTargetNode(node.pos, target=name_node, type=out_type)\n+                write_nodes.append(cast_node)\n+        if (len(write_nodes) == 1 or not node.value.is_sequence_constructor or\n+                node.value.mult_factor or len(node.value.args) != len(write_nodes)):\n+            lhs = write_nodes[0] if len(write_nodes)==1 else ExprNodes.TupleNode(\n+                node.pos, args=write_nodes)\n+            return Nodes.SingleAssignmentNode(\n+                node.pos,\n+                lhs=lhs,\n+                rhs=node.value)\n+        elif node.value:\n+            return Nodes.ParallelAssignmentNode(\n+                node.pos,\n+                stats = [ Nodes.SingleAssignmentNode(\n+                    node.pos,\n+                    lhs=nn, rhs=arg) for nn, arg in zip(write_nodes, node.value.args) ])\n+\n+    def visit_ReturnStatNode(self, node):\n+        impl = self._visit_ReturnStatNode_impl(node)\n+        impl = [ impl ] if impl else []\n+        finished_assignment = Nodes.IndirectionNode(  # make it easy to remove\n+            [ Nodes.SingleAssignmentNode(\n+                node.pos,\n+                lhs=self.finished_letref,\n+                rhs=ExprNodes.IntNode(node.pos, value=\"1\")) ])",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878759612",
            "id": 878759612,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YM68",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 184,
            "original_position": 184,
            "original_start_line": null,
            "path": "Cython/Compiler/UFuncs.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878759612/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878759612",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878760068"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878760068"
                }
            },
            "author_association": "MEMBER",
            "body": "I wonder if this is something we could just always try to do in `IntNode.__init__()`. OTOH – this would need to handle non-numbers, which makes it less pretty there. And it would be a separate refactoring change. But still, less easy to forget that way.\r\n```suggestion\r\n            expression=ExprNodes.IntNode(tree.pos, value=\"0\", constant_result=0))\r\n```",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T20:56:05Z",
            "diff_hunk": "@@ -0,0 +1,447 @@\n+from . import (Nodes, ExprNodes, FusedNode, TreeFragment, Pipeline,\n+               ParseTreeTransforms, Naming, UtilNodes)\n+from .Errors import error\n+from . import PyrexTypes\n+from .UtilityCode import CythonUtilityCode\n+from .Code import TempitaUtilityCode, UtilityCode\n+from .Visitor import PrintTree, TreeVisitor, VisitorTransform\n+\n+numpy_int_types = [\"NPY_BYTE\", \"NPY_INT8\", \"NPY_SHORT\", \"NPY_INT16\", \"NPY_INT\",\n+                        \"NPY_INT32\", \"NPY_LONG\", \"NPY_LONGLONG\", \"NPY_INT64\"]\n+numpy_uint_types = [ tp.replace(\"NPY_\", \"NPY_U\") for tp in numpy_int_types ]\n+# note: half float type is deliberately omitted\n+numpy_numeric_types = numpy_int_types + numpy_uint_types + [\n+    \"NPY_FLOAT\", \"NPY_FLOAT32\", \"NPY_DOUBLE\", \"NPY_FLOAT64\", \"NPY_LONGDOUBLE\",\n+]\n+\n+def _get_type_constant(pos, type_):\n+    # 'is' checks don't seem to work for complex types\n+    if type_ == PyrexTypes.c_float_complex_type:\n+        return \"NPY_CFLOAT\"\n+    elif type_ == PyrexTypes.c_double_complex_type:\n+        return \"NPY_CDOUBLE\"\n+    elif type_ == PyrexTypes.c_longdouble_complex_type:\n+        return \"NPY_CLONGDOUBLE\"\n+    elif type_.is_numeric:\n+        postfix = str(type_).upper().replace(\" \", \"\")\n+        typename = \"NPY_%s\" % postfix\n+        if typename in numpy_numeric_types:\n+            return typename\n+    elif type_.is_pyobject:\n+        return \"NPY_OBJECT\"\n+    # TODO possible NPY_BOOL to bint but it needs a cast?\n+    # TODO NPY_DATETIME, NPY_TIMEDELTA, NPY_STRING, NPY_UNICODE and maybe NPY_VOID might be handleable\n+    error(pos, \"Type '%s' cannot be used as a ufunc argument\" % type_)\n+\n+class _UniquePyNameHandler(object):\n+    def __init__(self, existing_names):\n+        self.existing_names = existing_names\n+        self.extra_names = set()\n+\n+    def get_unique_py_name(self, name):\n+        while name in self.existing_names or name in self.extra_names:\n+            name += \"_\"\n+        self.extra_names.add(name)\n+        return name\n+\n+class FindCFuncDefNode(TreeVisitor):\n+    \"\"\"\n+    Finds the CFuncDefNode in the tree\n+\n+    The assumption is that there's only one CFuncDefNode\n+    \"\"\"\n+    found_node = None\n+\n+    def visit_Node(self, node):\n+        if self.found_node:\n+            return\n+        else:\n+            self.visitchildren(node)\n+\n+    def visit_CFuncDefNode(self, node):\n+        self.found_node = node\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.found_node\n+\n+\n+\n+class NameFinderVisitor(TreeVisitor):\n+    \"\"\"\n+    Finds the names of all the NameNodes in the tree\n+    \"\"\"\n+    def __init__(self):\n+        super(NameFinderVisitor, self).__init__()\n+        self.names = set()\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_NameNode(self, node):\n+        self.names.add(node.name)\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.names\n+\n+\n+class UFuncPyObjectTargetNode(ExprNodes.ExprNode):\n+    \"\"\"\n+    Takes ownership of a pyobject and assigns it to the output\n+    char* in a ufunc. This node exists because it's quite difficult\n+    to do the right casts in Cython\n+\n+    target   NameNode\n+    \"\"\"\n+    subexprs = [\"target\"]\n+    is_temp = False\n+\n+    def analyse_target_declaration(self, env):\n+        self.target.analyse_target_declaration(env)\n+\n+    def analyse_types(self, env):\n+        assert False, \"Should only be used as a target\"\n+        return self\n+\n+    def analyse_target_types(self, env):\n+        self.target = self.target.analyse_types(env)\n+        assert self.target.is_name\n+        assert (self.target.type.is_ptr and self.target.type.base_type.is_int and\n+                    self.target.type.base_type.rank == 0)\n+        assert self.type.is_pyobject\n+        return self\n+\n+    def generate_assignment_code(self, rhs, code, overloaded_assignment=False,\n+                                 exception_check=None, exception_value=None):\n+        code.putln(\"*((PyObject**)%s) = %s;\" % (self.target.result(), rhs.result()))\n+        code.put_giveref(rhs.result(), rhs.type)\n+        code.putln(\"%s = 0;\" % rhs.result())\n+        rhs.free_temps(code)\n+\n+\n+class ReplaceReturnsTransform(VisitorTransform):\n+    \"\"\"\n+    Replace the return statement in a function with an assignment\n+\n+    The user defines a Cython ufunc with a single short function. To convert it\n+    into a real ufunc Cython inserts that function into a loop, and the return\n+    statement should be converted to an assignment.\n+\n+    It also needs to handle a bit of flow control to make sure that return actually\n+    \"returns\"\n+    \"\"\"\n+    def __init__(self, out_names, out_types):\n+        super(ReplaceReturnsTransform, self).__init__()\n+        self.out_names = out_names\n+        self.out_types = out_types\n+        self.needs_finished_var = False\n+        self.return_in_loop = False\n+        self.finished_assignments = []\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def _visit_ReturnStatNode_impl(self, node):\n+        self.return_in_loop = True\n+        if len(self.out_names) == 0:\n+            return None\n+        write_nodes = []\n+        for out_name, out_type in zip(self.out_names, self.out_types):\n+            name_node = ExprNodes.NameNode(node.pos, name=out_name)\n+            if not out_type.is_pyobject:\n+                cast_node = ExprNodes.TypecastNode(node.pos, operand=name_node,\n+                                                type=PyrexTypes.c_ptr_type(out_type))\n+                index_node = ExprNodes.IndexNode(node.pos, base=cast_node,\n+                                                 index=ExprNodes.IntNode(node.pos, value=\"0\"))\n+                write_nodes.append(index_node)\n+            else:\n+                cast_node = UFuncPyObjectTargetNode(node.pos, target=name_node, type=out_type)\n+                write_nodes.append(cast_node)\n+        if (len(write_nodes) == 1 or not node.value.is_sequence_constructor or\n+                node.value.mult_factor or len(node.value.args) != len(write_nodes)):\n+            lhs = write_nodes[0] if len(write_nodes)==1 else ExprNodes.TupleNode(\n+                node.pos, args=write_nodes)\n+            return Nodes.SingleAssignmentNode(\n+                node.pos,\n+                lhs=lhs,\n+                rhs=node.value)\n+        elif node.value:\n+            return Nodes.ParallelAssignmentNode(\n+                node.pos,\n+                stats = [ Nodes.SingleAssignmentNode(\n+                    node.pos,\n+                    lhs=nn, rhs=arg) for nn, arg in zip(write_nodes, node.value.args) ])\n+\n+    def visit_ReturnStatNode(self, node):\n+        impl = self._visit_ReturnStatNode_impl(node)\n+        impl = [ impl ] if impl else []\n+        finished_assignment = Nodes.IndirectionNode(  # make it easy to remove\n+            [ Nodes.SingleAssignmentNode(\n+                node.pos,\n+                lhs=self.finished_letref,\n+                rhs=ExprNodes.IntNode(node.pos, value=\"1\")) ])\n+        self.finished_assignments.append(finished_assignment)\n+        return impl + [ finished_assignment, Nodes.BreakStatNode(node.pos) ]\n+\n+    def visit_LoopNode(self, node):\n+        return_in_loop, self.return_in_loop = self.return_in_loop, False\n+        self.visitchildren(node)\n+        if self.return_in_loop:\n+            # we need to check to see if we returned inside the loop and break if we need\n+            self.needs_finished_var = True\n+            if_clause = Nodes.IfClauseNode(\n+                node.pos,\n+                condition=self.finished_letref,\n+                body=Nodes.BreakStatNode(node.pos))\n+            if_check = Nodes.IfStatNode(\n+                node.pos,\n+                if_clauses=[if_clause],\n+                else_clause=None)\n+            node = [node, if_check]\n+        self.return_in_loop = return_in_loop or self.return_in_loop\n+        return node\n+\n+    def __call__(self, tree, tree_directives):\n+        self.finished_letref = UtilNodes.LetRefNode(\n+            pos=tree.pos,\n+            expression=ExprNodes.IntNode(tree.pos, value=\"0\"))",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878760068",
            "id": 878760068,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YNCE",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 209,
            "original_position": 209,
            "original_start_line": null,
            "path": "Cython/Compiler/UFuncs.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878760068/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878760068",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878760203"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878760203"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            condition = ExprNodes.IntNode(tree.pos, value=\"1\", constant_result=1),\r\n```",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-21T20:57:25Z",
            "diff_hunk": "@@ -0,0 +1,447 @@\n+from . import (Nodes, ExprNodes, FusedNode, TreeFragment, Pipeline,\n+               ParseTreeTransforms, Naming, UtilNodes)\n+from .Errors import error\n+from . import PyrexTypes\n+from .UtilityCode import CythonUtilityCode\n+from .Code import TempitaUtilityCode, UtilityCode\n+from .Visitor import PrintTree, TreeVisitor, VisitorTransform\n+\n+numpy_int_types = [\"NPY_BYTE\", \"NPY_INT8\", \"NPY_SHORT\", \"NPY_INT16\", \"NPY_INT\",\n+                        \"NPY_INT32\", \"NPY_LONG\", \"NPY_LONGLONG\", \"NPY_INT64\"]\n+numpy_uint_types = [ tp.replace(\"NPY_\", \"NPY_U\") for tp in numpy_int_types ]\n+# note: half float type is deliberately omitted\n+numpy_numeric_types = numpy_int_types + numpy_uint_types + [\n+    \"NPY_FLOAT\", \"NPY_FLOAT32\", \"NPY_DOUBLE\", \"NPY_FLOAT64\", \"NPY_LONGDOUBLE\",\n+]\n+\n+def _get_type_constant(pos, type_):\n+    # 'is' checks don't seem to work for complex types\n+    if type_ == PyrexTypes.c_float_complex_type:\n+        return \"NPY_CFLOAT\"\n+    elif type_ == PyrexTypes.c_double_complex_type:\n+        return \"NPY_CDOUBLE\"\n+    elif type_ == PyrexTypes.c_longdouble_complex_type:\n+        return \"NPY_CLONGDOUBLE\"\n+    elif type_.is_numeric:\n+        postfix = str(type_).upper().replace(\" \", \"\")\n+        typename = \"NPY_%s\" % postfix\n+        if typename in numpy_numeric_types:\n+            return typename\n+    elif type_.is_pyobject:\n+        return \"NPY_OBJECT\"\n+    # TODO possible NPY_BOOL to bint but it needs a cast?\n+    # TODO NPY_DATETIME, NPY_TIMEDELTA, NPY_STRING, NPY_UNICODE and maybe NPY_VOID might be handleable\n+    error(pos, \"Type '%s' cannot be used as a ufunc argument\" % type_)\n+\n+class _UniquePyNameHandler(object):\n+    def __init__(self, existing_names):\n+        self.existing_names = existing_names\n+        self.extra_names = set()\n+\n+    def get_unique_py_name(self, name):\n+        while name in self.existing_names or name in self.extra_names:\n+            name += \"_\"\n+        self.extra_names.add(name)\n+        return name\n+\n+class FindCFuncDefNode(TreeVisitor):\n+    \"\"\"\n+    Finds the CFuncDefNode in the tree\n+\n+    The assumption is that there's only one CFuncDefNode\n+    \"\"\"\n+    found_node = None\n+\n+    def visit_Node(self, node):\n+        if self.found_node:\n+            return\n+        else:\n+            self.visitchildren(node)\n+\n+    def visit_CFuncDefNode(self, node):\n+        self.found_node = node\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.found_node\n+\n+\n+\n+class NameFinderVisitor(TreeVisitor):\n+    \"\"\"\n+    Finds the names of all the NameNodes in the tree\n+    \"\"\"\n+    def __init__(self):\n+        super(NameFinderVisitor, self).__init__()\n+        self.names = set()\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+\n+    def visit_NameNode(self, node):\n+        self.names.add(node.name)\n+\n+    def __call__(self, tree):\n+        self.visit(tree)\n+        return self.names\n+\n+\n+class UFuncPyObjectTargetNode(ExprNodes.ExprNode):\n+    \"\"\"\n+    Takes ownership of a pyobject and assigns it to the output\n+    char* in a ufunc. This node exists because it's quite difficult\n+    to do the right casts in Cython\n+\n+    target   NameNode\n+    \"\"\"\n+    subexprs = [\"target\"]\n+    is_temp = False\n+\n+    def analyse_target_declaration(self, env):\n+        self.target.analyse_target_declaration(env)\n+\n+    def analyse_types(self, env):\n+        assert False, \"Should only be used as a target\"\n+        return self\n+\n+    def analyse_target_types(self, env):\n+        self.target = self.target.analyse_types(env)\n+        assert self.target.is_name\n+        assert (self.target.type.is_ptr and self.target.type.base_type.is_int and\n+                    self.target.type.base_type.rank == 0)\n+        assert self.type.is_pyobject\n+        return self\n+\n+    def generate_assignment_code(self, rhs, code, overloaded_assignment=False,\n+                                 exception_check=None, exception_value=None):\n+        code.putln(\"*((PyObject**)%s) = %s;\" % (self.target.result(), rhs.result()))\n+        code.put_giveref(rhs.result(), rhs.type)\n+        code.putln(\"%s = 0;\" % rhs.result())\n+        rhs.free_temps(code)\n+\n+\n+class ReplaceReturnsTransform(VisitorTransform):\n+    \"\"\"\n+    Replace the return statement in a function with an assignment\n+\n+    The user defines a Cython ufunc with a single short function. To convert it\n+    into a real ufunc Cython inserts that function into a loop, and the return\n+    statement should be converted to an assignment.\n+\n+    It also needs to handle a bit of flow control to make sure that return actually\n+    \"returns\"\n+    \"\"\"\n+    def __init__(self, out_names, out_types):\n+        super(ReplaceReturnsTransform, self).__init__()\n+        self.out_names = out_names\n+        self.out_types = out_types\n+        self.needs_finished_var = False\n+        self.return_in_loop = False\n+        self.finished_assignments = []\n+\n+    def visit_Node(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def _visit_ReturnStatNode_impl(self, node):\n+        self.return_in_loop = True\n+        if len(self.out_names) == 0:\n+            return None\n+        write_nodes = []\n+        for out_name, out_type in zip(self.out_names, self.out_types):\n+            name_node = ExprNodes.NameNode(node.pos, name=out_name)\n+            if not out_type.is_pyobject:\n+                cast_node = ExprNodes.TypecastNode(node.pos, operand=name_node,\n+                                                type=PyrexTypes.c_ptr_type(out_type))\n+                index_node = ExprNodes.IndexNode(node.pos, base=cast_node,\n+                                                 index=ExprNodes.IntNode(node.pos, value=\"0\"))\n+                write_nodes.append(index_node)\n+            else:\n+                cast_node = UFuncPyObjectTargetNode(node.pos, target=name_node, type=out_type)\n+                write_nodes.append(cast_node)\n+        if (len(write_nodes) == 1 or not node.value.is_sequence_constructor or\n+                node.value.mult_factor or len(node.value.args) != len(write_nodes)):\n+            lhs = write_nodes[0] if len(write_nodes)==1 else ExprNodes.TupleNode(\n+                node.pos, args=write_nodes)\n+            return Nodes.SingleAssignmentNode(\n+                node.pos,\n+                lhs=lhs,\n+                rhs=node.value)\n+        elif node.value:\n+            return Nodes.ParallelAssignmentNode(\n+                node.pos,\n+                stats = [ Nodes.SingleAssignmentNode(\n+                    node.pos,\n+                    lhs=nn, rhs=arg) for nn, arg in zip(write_nodes, node.value.args) ])\n+\n+    def visit_ReturnStatNode(self, node):\n+        impl = self._visit_ReturnStatNode_impl(node)\n+        impl = [ impl ] if impl else []\n+        finished_assignment = Nodes.IndirectionNode(  # make it easy to remove\n+            [ Nodes.SingleAssignmentNode(\n+                node.pos,\n+                lhs=self.finished_letref,\n+                rhs=ExprNodes.IntNode(node.pos, value=\"1\")) ])\n+        self.finished_assignments.append(finished_assignment)\n+        return impl + [ finished_assignment, Nodes.BreakStatNode(node.pos) ]\n+\n+    def visit_LoopNode(self, node):\n+        return_in_loop, self.return_in_loop = self.return_in_loop, False\n+        self.visitchildren(node)\n+        if self.return_in_loop:\n+            # we need to check to see if we returned inside the loop and break if we need\n+            self.needs_finished_var = True\n+            if_clause = Nodes.IfClauseNode(\n+                node.pos,\n+                condition=self.finished_letref,\n+                body=Nodes.BreakStatNode(node.pos))\n+            if_check = Nodes.IfStatNode(\n+                node.pos,\n+                if_clauses=[if_clause],\n+                else_clause=None)\n+            node = [node, if_check]\n+        self.return_in_loop = return_in_loop or self.return_in_loop\n+        return node\n+\n+    def __call__(self, tree, tree_directives):\n+        self.finished_letref = UtilNodes.LetRefNode(\n+            pos=tree.pos,\n+            expression=ExprNodes.IntNode(tree.pos, value=\"0\"))\n+\n+        tree = super(ReplaceReturnsTransform, self).__call__(tree)\n+        tree = Nodes.CompilerDirectivesNode(\n+            tree.pos,\n+            directives = tree_directives,\n+            body = tree)\n+\n+        if self.needs_finished_var:\n+            tree = UtilNodes.LetNode(self.finished_letref, tree)\n+        else:\n+            for assignment in self.finished_assignments:\n+                assignment.stats = []  # drop the assignments (since they're a waste of time)\n+\n+        # wrap the return value in a loop so we can use \"break\" to get out of it\n+        # The loop only runs once and is broken out of\n+        tree = Nodes.StatListNode(\n+            tree.pos,\n+            stats = [tree, Nodes.BreakStatNode(tree.pos)])\n+        while_loop = Nodes.WhileStatNode(\n+            tree.pos,\n+            condition = ExprNodes.IntNode(tree.pos, value=\"1\"),",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878760203",
            "id": 878760203,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc40YNEL",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 230,
            "original_position": 230,
            "original_start_line": null,
            "path": "Cython/Compiler/UFuncs.py",
            "position": null,
            "pull_request_review_id": 980873116,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878760203/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-21T21:11:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878760203",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878834672"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878834672"
                }
            },
            "author_association": "MEMBER",
            "body": "For some reason it's linking to the CPython glossary on my PC rather than this definition. I'm not really sure why, but I'm hoping it's a local configuration problem.",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-22T10:09:58Z",
            "diff_hunk": "@@ -13,6 +13,16 @@ Glossary\n       `allocated dynamically/heap allocated <https://en.wikipedia.org/wiki/C_dynamic_memory_allocation>`_.\n       Its lifetime is until the user deletes it explicitly (with ``free`` in C or ``del`` in C++).\n       This can happen in a different function than the allocation.\n+      \n+   Global Interpreter Lock or GIL",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878834672",
            "id": 878834672,
            "line": 17,
            "node_id": "PRRC_kwDOABDGAc40YfPw",
            "original_commit_id": "6b65b3177db4bd807be9e76fe265ed7cb619441a",
            "original_line": 17,
            "original_position": 5,
            "original_start_line": null,
            "path": "docs/src/userguide/glossary.rst",
            "position": 5,
            "pull_request_review_id": 980936039,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878834672/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-22T10:09:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878834672",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4803#discussion_r878835009"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4803"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/878835009"
                }
            },
            "author_association": "MEMBER",
            "body": "I haven't changed this yet because this is the first and only time that this is read, so it doesn't seem worth creating an attribute.",
            "commit_id": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "created_at": "2022-05-22T10:12:39Z",
            "diff_hunk": "@@ -2239,6 +2242,10 @@ def visit_FuncDefNode(self, node):\n             self._super_visit_FuncDefNode(node)\n \n         self.seen_vars_stack.pop()\n+\n+        if lenv.directives.get(\"ufunc\"):",
            "html_url": "https://github.com/cython/cython/pull/4803#discussion_r878835009",
            "id": 878835009,
            "in_reply_to_id": 878754116,
            "line": 2243,
            "node_id": "PRRC_kwDOABDGAc40YfVB",
            "original_commit_id": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "original_line": 2246,
            "original_position": 15,
            "original_start_line": null,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": 5,
            "pull_request_review_id": 980936295,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4803",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/878835009/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-05-22T10:12:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/878835009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4803/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d59104374e8da26aaf1291cec0a29765389b6729/comments",
            "commit": {
                "author": {
                    "date": "2022-05-08T20:12:36Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-08T20:12:36Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Initial semi-working attempt at ufuncs",
                "tree": {
                    "sha": "8a90a24c05fbc39fddec2a57b483e859d384c169",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8a90a24c05fbc39fddec2a57b483e859d384c169"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d59104374e8da26aaf1291cec0a29765389b6729",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/d59104374e8da26aaf1291cec0a29765389b6729",
            "node_id": "C_kwDOAhr4b9oAKGQ1OTEwNDM3NGU4ZGEyNmFhZjEyOTFjZWMwYTI5NzY1Mzg5YjY3Mjk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2795a45f24f6d47016d55e2bee626256173cecae",
                    "sha": "2795a45f24f6d47016d55e2bee626256173cecae",
                    "url": "https://api.github.com/repos/cython/cython/commits/2795a45f24f6d47016d55e2bee626256173cecae"
                }
            ],
            "sha": "d59104374e8da26aaf1291cec0a29765389b6729",
            "url": "https://api.github.com/repos/cython/cython/commits/d59104374e8da26aaf1291cec0a29765389b6729"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/00f4c6f0d2affe29f6d4ca49ea15b461a35ab61a/comments",
            "commit": {
                "author": {
                    "date": "2022-05-09T19:28:30Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-09T19:28:30Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Tidying",
                "tree": {
                    "sha": "a4989d9d966b033da3ab4fbff2a5cfafdf5e3466",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a4989d9d966b033da3ab4fbff2a5cfafdf5e3466"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/00f4c6f0d2affe29f6d4ca49ea15b461a35ab61a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/00f4c6f0d2affe29f6d4ca49ea15b461a35ab61a",
            "node_id": "C_kwDOAhr4b9oAKDAwZjRjNmYwZDJhZmZlMjlmNmQ0Y2E0OWVhMTViNDYxYTM1YWI2MWE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d59104374e8da26aaf1291cec0a29765389b6729",
                    "sha": "d59104374e8da26aaf1291cec0a29765389b6729",
                    "url": "https://api.github.com/repos/cython/cython/commits/d59104374e8da26aaf1291cec0a29765389b6729"
                }
            ],
            "sha": "00f4c6f0d2affe29f6d4ca49ea15b461a35ab61a",
            "url": "https://api.github.com/repos/cython/cython/commits/00f4c6f0d2affe29f6d4ca49ea15b461a35ab61a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/69d395fca1f4bff7f1b5dcb52c6fc63447082342/comments",
            "commit": {
                "author": {
                    "date": "2022-05-19T21:08:30Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-19T21:08:30Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Add beginnings of tests",
                "tree": {
                    "sha": "13dce96fd5046c4169971e5b546db885de65ed51",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/13dce96fd5046c4169971e5b546db885de65ed51"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/69d395fca1f4bff7f1b5dcb52c6fc63447082342",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/69d395fca1f4bff7f1b5dcb52c6fc63447082342",
            "node_id": "C_kwDOAhr4b9oAKDY5ZDM5NWZjYTFmNGJmZjdmMWI1ZGNiNTJjNmZjNjM0NDcwODIzNDI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/00f4c6f0d2affe29f6d4ca49ea15b461a35ab61a",
                    "sha": "00f4c6f0d2affe29f6d4ca49ea15b461a35ab61a",
                    "url": "https://api.github.com/repos/cython/cython/commits/00f4c6f0d2affe29f6d4ca49ea15b461a35ab61a"
                }
            ],
            "sha": "69d395fca1f4bff7f1b5dcb52c6fc63447082342",
            "url": "https://api.github.com/repos/cython/cython/commits/69d395fca1f4bff7f1b5dcb52c6fc63447082342"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/bf7095f7a9beb57208c12aaf1d2530d06af6acfa/comments",
            "commit": {
                "author": {
                    "date": "2022-05-21T09:22:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-21T09:22:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Refactor for hopeful tidiness",
                "tree": {
                    "sha": "c584154135197901203418cdd94443ff7dfd58d8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c584154135197901203418cdd94443ff7dfd58d8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/bf7095f7a9beb57208c12aaf1d2530d06af6acfa",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/bf7095f7a9beb57208c12aaf1d2530d06af6acfa",
            "node_id": "C_kwDOAhr4b9oAKGJmNzA5NWY3YTliZWI1NzIwOGMxMmFhZjFkMjUzMGQwNmFmNmFjZmE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/69d395fca1f4bff7f1b5dcb52c6fc63447082342",
                    "sha": "69d395fca1f4bff7f1b5dcb52c6fc63447082342",
                    "url": "https://api.github.com/repos/cython/cython/commits/69d395fca1f4bff7f1b5dcb52c6fc63447082342"
                }
            ],
            "sha": "bf7095f7a9beb57208c12aaf1d2530d06af6acfa",
            "url": "https://api.github.com/repos/cython/cython/commits/bf7095f7a9beb57208c12aaf1d2530d06af6acfa"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/69f8df270387ffa8130f2224fe04da0c8dd24018/comments",
            "commit": {
                "author": {
                    "date": "2022-05-21T10:18:11Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-21T10:18:11Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix and run tests",
                "tree": {
                    "sha": "36119b431cdd31d06c0f9ed24efeb2a0aac5cbd2",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/36119b431cdd31d06c0f9ed24efeb2a0aac5cbd2"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/69f8df270387ffa8130f2224fe04da0c8dd24018",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/69f8df270387ffa8130f2224fe04da0c8dd24018",
            "node_id": "C_kwDOAhr4b9oAKDY5ZjhkZjI3MDM4N2ZmYTgxMzBmMjIyNGZlMDRkYTBjOGRkMjQwMTg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bf7095f7a9beb57208c12aaf1d2530d06af6acfa",
                    "sha": "bf7095f7a9beb57208c12aaf1d2530d06af6acfa",
                    "url": "https://api.github.com/repos/cython/cython/commits/bf7095f7a9beb57208c12aaf1d2530d06af6acfa"
                }
            ],
            "sha": "69f8df270387ffa8130f2224fe04da0c8dd24018",
            "url": "https://api.github.com/repos/cython/cython/commits/69f8df270387ffa8130f2224fe04da0c8dd24018"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b180f6d96a14e17b92640723b4600d8333adc779/comments",
            "commit": {
                "author": {
                    "date": "2022-05-21T11:10:12Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-21T11:10:12Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Add support for fused functions",
                "tree": {
                    "sha": "44558ec8206addc1976e510e7e53608233565a69",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/44558ec8206addc1976e510e7e53608233565a69"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b180f6d96a14e17b92640723b4600d8333adc779",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/b180f6d96a14e17b92640723b4600d8333adc779",
            "node_id": "C_kwDOAhr4b9oAKGIxODBmNmQ5NmExNGUxN2I5MjY0MDcyM2I0NjAwZDgzMzNhZGM3Nzk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/69f8df270387ffa8130f2224fe04da0c8dd24018",
                    "sha": "69f8df270387ffa8130f2224fe04da0c8dd24018",
                    "url": "https://api.github.com/repos/cython/cython/commits/69f8df270387ffa8130f2224fe04da0c8dd24018"
                }
            ],
            "sha": "b180f6d96a14e17b92640723b4600d8333adc779",
            "url": "https://api.github.com/repos/cython/cython/commits/b180f6d96a14e17b92640723b4600d8333adc779"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/dcde72cb06f196da546091d42316dd7f87cbe78f/comments",
            "commit": {
                "author": {
                    "date": "2022-05-21T11:50:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-21T11:50:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Add documentation",
                "tree": {
                    "sha": "2938c28dfa6d111e32de9b622415615c7d803674",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2938c28dfa6d111e32de9b622415615c7d803674"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/dcde72cb06f196da546091d42316dd7f87cbe78f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/dcde72cb06f196da546091d42316dd7f87cbe78f",
            "node_id": "C_kwDOAhr4b9oAKGRjZGU3MmNiMDZmMTk2ZGE1NDYwOTFkNDIzMTZkZDdmODdjYmU3OGY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b180f6d96a14e17b92640723b4600d8333adc779",
                    "sha": "b180f6d96a14e17b92640723b4600d8333adc779",
                    "url": "https://api.github.com/repos/cython/cython/commits/b180f6d96a14e17b92640723b4600d8333adc779"
                }
            ],
            "sha": "dcde72cb06f196da546091d42316dd7f87cbe78f",
            "url": "https://api.github.com/repos/cython/cython/commits/dcde72cb06f196da546091d42316dd7f87cbe78f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0e148fba2f5989f3acd0862909fabf48c858311e/comments",
            "commit": {
                "author": {
                    "date": "2022-05-21T11:58:21Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-21T11:58:21Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Removed stray bit of debugging",
                "tree": {
                    "sha": "f92807261bdf991c361f7ef871cd530b15b6d266",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f92807261bdf991c361f7ef871cd530b15b6d266"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0e148fba2f5989f3acd0862909fabf48c858311e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/0e148fba2f5989f3acd0862909fabf48c858311e",
            "node_id": "C_kwDOAhr4b9oAKDBlMTQ4ZmJhMmY1OTg5ZjNhY2QwODYyOTA5ZmFiZjQ4Yzg1ODMxMWU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/dcde72cb06f196da546091d42316dd7f87cbe78f",
                    "sha": "dcde72cb06f196da546091d42316dd7f87cbe78f",
                    "url": "https://api.github.com/repos/cython/cython/commits/dcde72cb06f196da546091d42316dd7f87cbe78f"
                }
            ],
            "sha": "0e148fba2f5989f3acd0862909fabf48c858311e",
            "url": "https://api.github.com/repos/cython/cython/commits/0e148fba2f5989f3acd0862909fabf48c858311e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/71102d6162cdf88916981a25ff889af892a5d8ed/comments",
            "commit": {
                "author": {
                    "date": "2022-05-21T14:05:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-21T14:05:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Handle more complex flow-control\n\ni.e. make sure we actually stop after a return statement",
                "tree": {
                    "sha": "358e9a0ed389d2e206398d60b3c5a8adfbbd4aa8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/358e9a0ed389d2e206398d60b3c5a8adfbbd4aa8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/71102d6162cdf88916981a25ff889af892a5d8ed",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/71102d6162cdf88916981a25ff889af892a5d8ed",
            "node_id": "C_kwDOAhr4b9oAKDcxMTAyZDYxNjJjZGY4ODkxNjk4MWEyNWZmODg5YWY4OTJhNWQ4ZWQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0e148fba2f5989f3acd0862909fabf48c858311e",
                    "sha": "0e148fba2f5989f3acd0862909fabf48c858311e",
                    "url": "https://api.github.com/repos/cython/cython/commits/0e148fba2f5989f3acd0862909fabf48c858311e"
                }
            ],
            "sha": "71102d6162cdf88916981a25ff889af892a5d8ed",
            "url": "https://api.github.com/repos/cython/cython/commits/71102d6162cdf88916981a25ff889af892a5d8ed"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/40ebcca7dff504e1737fd79d5215bf1d10c7f60e/comments",
            "commit": {
                "author": {
                    "date": "2022-05-21T14:25:32Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-21T14:25:32Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Hopefully work with old Numpy versions\n\nBy accounting for the change in argument type in their API",
                "tree": {
                    "sha": "b21be345af087a1b78ab90fea8475f9e1e74a64e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b21be345af087a1b78ab90fea8475f9e1e74a64e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/40ebcca7dff504e1737fd79d5215bf1d10c7f60e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/40ebcca7dff504e1737fd79d5215bf1d10c7f60e",
            "node_id": "C_kwDOAhr4b9oAKDQwZWJjY2E3ZGZmNTA0ZTE3MzdmZDc5ZDUyMTViZjFkMTBjN2Y2MGU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/71102d6162cdf88916981a25ff889af892a5d8ed",
                    "sha": "71102d6162cdf88916981a25ff889af892a5d8ed",
                    "url": "https://api.github.com/repos/cython/cython/commits/71102d6162cdf88916981a25ff889af892a5d8ed"
                }
            ],
            "sha": "40ebcca7dff504e1737fd79d5215bf1d10c7f60e",
            "url": "https://api.github.com/repos/cython/cython/commits/40ebcca7dff504e1737fd79d5215bf1d10c7f60e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e5113aab631100441c8f542ee21bd357a63de0ab/comments",
            "commit": {
                "author": {
                    "date": "2022-05-21T15:42:32Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-21T15:42:32Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Second go at fixing on old Numpy versions",
                "tree": {
                    "sha": "471c09920da5715460074f190bc357b9c89fd34a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/471c09920da5715460074f190bc357b9c89fd34a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e5113aab631100441c8f542ee21bd357a63de0ab",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/e5113aab631100441c8f542ee21bd357a63de0ab",
            "node_id": "C_kwDOAhr4b9oAKGU1MTEzYWFiNjMxMTAwNDQxYzhmNTQyZWUyMWJkMzU3YTYzZGUwYWI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/40ebcca7dff504e1737fd79d5215bf1d10c7f60e",
                    "sha": "40ebcca7dff504e1737fd79d5215bf1d10c7f60e",
                    "url": "https://api.github.com/repos/cython/cython/commits/40ebcca7dff504e1737fd79d5215bf1d10c7f60e"
                }
            ],
            "sha": "e5113aab631100441c8f542ee21bd357a63de0ab",
            "url": "https://api.github.com/repos/cython/cython/commits/e5113aab631100441c8f542ee21bd357a63de0ab"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9e65d8e703fb1e26d7fcf3122eb971464eefee89/comments",
            "commit": {
                "author": {
                    "date": "2022-05-21T16:09:46Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-21T16:09:46Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Third go at fixing old versions of Numpy",
                "tree": {
                    "sha": "ddb0050faa96bd86749ca956945bc60107b574f5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ddb0050faa96bd86749ca956945bc60107b574f5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9e65d8e703fb1e26d7fcf3122eb971464eefee89",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "node_id": "C_kwDOAhr4b9oAKDllNjVkOGU3MDNmYjFlMjZkN2ZjZjMxMjJlYjk3MTQ2NGVlZmVlODk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e5113aab631100441c8f542ee21bd357a63de0ab",
                    "sha": "e5113aab631100441c8f542ee21bd357a63de0ab",
                    "url": "https://api.github.com/repos/cython/cython/commits/e5113aab631100441c8f542ee21bd357a63de0ab"
                }
            ],
            "sha": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
            "url": "https://api.github.com/repos/cython/cython/commits/9e65d8e703fb1e26d7fcf3122eb971464eefee89"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/cbddbd0a5846eace278a45342a37a18123fea8fe/comments",
            "commit": {
                "author": {
                    "date": "2022-05-22T07:08:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-22T07:08:55Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "07469a1c850d6593d28d62914b93e645be132038",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/07469a1c850d6593d28d62914b93e645be132038"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/cbddbd0a5846eace278a45342a37a18123fea8fe",
                "verification": {
                    "payload": "tree 07469a1c850d6593d28d62914b93e645be132038\nparent 9e65d8e703fb1e26d7fcf3122eb971464eefee89\nauthor da-woods <dw-git@d-woods.co.uk> 1653203335 +0100\ncommitter GitHub <noreply@github.com> 1653203335 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiieGHCRBK7hj4Ov3rIwAAjRcIAA/ro/g0W7yU+v+HKvP25Qpt\noAuyEVKHUKReGWgcczvlLhFz4CWsCcGglKd7Ig4EUVpPrGTmooxiWgzaWX5AZ6d+\nj6gCoNR2rscq+U7gB1tpcX/HAs5YV3LC5EPKV0rc3H0VvDri3cjMoMLKq0GpWcnd\nFFKfhWNU4H5jxbu7vw3AcXRYgFRTBbVXlhOKZUvgKuWJ4U9xTR/xmoZiKfhdCxBF\nCQA3Zo9p9Rpj/zV1hOJoKlnmGkUCRrWagKpDYDG87AH0Kx5nHbHirTrhLVK8k4I8\nVIIWiGJavyCPrhrpVe44BH1G0CpQl5cvphqpfUqLTReFOjYEO+KLe4p3UNVscVc=\n=f8Io\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/cbddbd0a5846eace278a45342a37a18123fea8fe",
            "node_id": "C_kwDOAhr4b9oAKGNiZGRiZDBhNTg0NmVhY2UyNzhhNDUzNDJhMzdhMTgxMjNmZWE4ZmU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9e65d8e703fb1e26d7fcf3122eb971464eefee89",
                    "sha": "9e65d8e703fb1e26d7fcf3122eb971464eefee89",
                    "url": "https://api.github.com/repos/cython/cython/commits/9e65d8e703fb1e26d7fcf3122eb971464eefee89"
                }
            ],
            "sha": "cbddbd0a5846eace278a45342a37a18123fea8fe",
            "url": "https://api.github.com/repos/cython/cython/commits/cbddbd0a5846eace278a45342a37a18123fea8fe"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6b65b3177db4bd807be9e76fe265ed7cb619441a/comments",
            "commit": {
                "author": {
                    "date": "2022-05-22T10:07:38Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-22T10:07:38Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Avoid code manipulation, just use cdef function",
                "tree": {
                    "sha": "f656205ccfb905e23de7a7223904edc32e443c4d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f656205ccfb905e23de7a7223904edc32e443c4d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6b65b3177db4bd807be9e76fe265ed7cb619441a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/6b65b3177db4bd807be9e76fe265ed7cb619441a",
            "node_id": "C_kwDOAhr4b9oAKDZiNjViMzE3N2RiNGJkODA3YmU5ZTc2ZmUyNjVlZDdjYjYxOTQ0MWE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cbddbd0a5846eace278a45342a37a18123fea8fe",
                    "sha": "cbddbd0a5846eace278a45342a37a18123fea8fe",
                    "url": "https://api.github.com/repos/cython/cython/commits/cbddbd0a5846eace278a45342a37a18123fea8fe"
                }
            ],
            "sha": "6b65b3177db4bd807be9e76fe265ed7cb619441a",
            "url": "https://api.github.com/repos/cython/cython/commits/6b65b3177db4bd807be9e76fe265ed7cb619441a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fad032f87ea886cf9f8e6adb9df5f3c693748f63/comments",
            "commit": {
                "author": {
                    "date": "2022-05-22T10:10:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-22T10:10:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Revert changes to TreeFragment",
                "tree": {
                    "sha": "503f57f7c32cc9925696271db5ed5cbee12b8519",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/503f57f7c32cc9925696271db5ed5cbee12b8519"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fad032f87ea886cf9f8e6adb9df5f3c693748f63",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/fad032f87ea886cf9f8e6adb9df5f3c693748f63",
            "node_id": "C_kwDOAhr4b9oAKGZhZDAzMmY4N2VhODg2Y2Y5ZjhlNmFkYjlkZjVmM2M2OTM3NDhmNjM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6b65b3177db4bd807be9e76fe265ed7cb619441a",
                    "sha": "6b65b3177db4bd807be9e76fe265ed7cb619441a",
                    "url": "https://api.github.com/repos/cython/cython/commits/6b65b3177db4bd807be9e76fe265ed7cb619441a"
                }
            ],
            "sha": "fad032f87ea886cf9f8e6adb9df5f3c693748f63",
            "url": "https://api.github.com/repos/cython/cython/commits/fad032f87ea886cf9f8e6adb9df5f3c693748f63"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8e72616ac748c5ad6a05e03d5cde2d5c5d3e2e73/comments",
            "commit": {
                "author": {
                    "date": "2022-05-22T10:54:25Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-22T10:54:25Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixup glossary links",
                "tree": {
                    "sha": "e5b62ca7e0a6a9c2cc9c013675fc0fd7a7bb07e0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e5b62ca7e0a6a9c2cc9c013675fc0fd7a7bb07e0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8e72616ac748c5ad6a05e03d5cde2d5c5d3e2e73",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/8e72616ac748c5ad6a05e03d5cde2d5c5d3e2e73",
            "node_id": "C_kwDOAhr4b9oAKDhlNzI2MTZhYzc0OGM1YWQ2YTA1ZTAzZDVjZGUyZDVjNWQzZTJlNzM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fad032f87ea886cf9f8e6adb9df5f3c693748f63",
                    "sha": "fad032f87ea886cf9f8e6adb9df5f3c693748f63",
                    "url": "https://api.github.com/repos/cython/cython/commits/fad032f87ea886cf9f8e6adb9df5f3c693748f63"
                }
            ],
            "sha": "8e72616ac748c5ad6a05e03d5cde2d5c5d3e2e73",
            "url": "https://api.github.com/repos/cython/cython/commits/8e72616ac748c5ad6a05e03d5cde2d5c5d3e2e73"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c7ba0c83d7fa7c0db60742b117b9e0207493013f/comments",
            "commit": {
                "author": {
                    "date": "2022-05-22T11:40:44Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-22T11:40:44Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Reformatted with black",
                "tree": {
                    "sha": "30298ed6f9436e1f08a6811796bdeca5b8d432f0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/30298ed6f9436e1f08a6811796bdeca5b8d432f0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c7ba0c83d7fa7c0db60742b117b9e0207493013f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "node_id": "C_kwDOAhr4b9oAKGM3YmEwYzgzZDdmYTdjMGRiNjA3NDJiMTE3YjllMDIwNzQ5MzAxM2Y",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8e72616ac748c5ad6a05e03d5cde2d5c5d3e2e73",
                    "sha": "8e72616ac748c5ad6a05e03d5cde2d5c5d3e2e73",
                    "url": "https://api.github.com/repos/cython/cython/commits/8e72616ac748c5ad6a05e03d5cde2d5c5d3e2e73"
                }
            ],
            "sha": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
            "url": "https://api.github.com/repos/cython/cython/commits/c7ba0c83d7fa7c0db60742b117b9e0207493013f"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/4803/commits",
    "created_at": "2022-05-21T11:55:28Z",
    "diff_url": "https://github.com/cython/cython/pull/4803.diff",
    "draft": false,
    "head": {
        "label": "da-woods:ufunc",
        "ref": "ufunc",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2022-05-22T11:41:09Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 65863,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2022-05-09T19:49:47Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2
        },
        "sha": "c7ba0c83d7fa7c0db60742b117b9e0207493013f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/4803",
    "id": 943418087,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/4803",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "a5e3aa6706d534a80eb8a388b521463f3b1e42f2",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOABDGAc44O2rn",
    "number": 4803,
    "patch_url": "https://github.com/cython/cython/pull/4803.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/4803/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/c7ba0c83d7fa7c0db60742b117b9e0207493013f",
    "title": "Auto-generation of Numpy ufuncs",
    "updated_at": "2022-05-22T11:41:12Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/4803",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}