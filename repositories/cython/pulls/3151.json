{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3151/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3151/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3151"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3151"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3151/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3151"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/795c7bc666949571b2a38ca1c90e0256468a7d4a"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1074,
            "forks_count": 1074,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 897,
            "open_issues_count": 897,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2020-09-27T14:19:09Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 60435,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 5463,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2020-09-27T10:34:21Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 5463,
            "watchers_count": 5463
        },
        "sha": "af1300f7655b2ccdf6308d9c9fb839d7083782e9",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "fix for https://github.com/cython/cython/issues/2159\r\n(I started it earlier and had to finish it)\r\n\r\nPotentially I went to wrong way, ready to comments.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r409334427"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/409334427"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "This looks like it breaks the general interface for `to_py_call_code`.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-04-16T07:20:11Z",
            "diff_hunk": "@@ -2592,6 +2592,46 @@ def find_cpp_operation_type(self, operator, operand_type=None):\n             return self.base_type.find_cpp_operation_type(operator, operand_type)\n         return None\n \n+class CPtrToArraySliceType(CPtrType):\n+    def create_to_py_utility_code(self, env):\n+        if self.to_py_function is not None:\n+            return True\n+        if not self.base_type.create_to_py_utility_code(env):\n+            return False\n+\n+        safe_typename = self.base_type.specialization_name()\n+\n+        to_py_function = \"__Pyx_carray_slice_to_py_%s\" % safe_typename\n+        to_tuple_function = \"__Pyx_carray_slice_to_tuple_%s\" % safe_typename\n+\n+        from .UtilityCode import CythonUtilityCode\n+        context = {\n+            'cname': to_py_function,\n+            'to_tuple_cname': to_tuple_function,\n+            'base_type': self.base_type,\n+        }\n+        env.use_utility_code(CythonUtilityCode.load(\n+            \"carray_slice.to_py\", \"CConvert.pyx\",\n+            outer_module_scope=env.global_scope(),  # need access to types declared in module\n+            context=context, compiler_directives=dict(env.global_scope().directives)))\n+        self.to_tuple_function = to_tuple_function\n+        self.to_py_function = to_py_function\n+        return True\n+\n+    def to_py_call_code(self, source_code, start_code, stop_code, result_code, result_type, to_py_function=None):",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r409334427",
            "id": 409334427,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzNDQyNw==",
            "original_commit_id": "373419b53e7331535e075d298100ae270d6c09db",
            "original_line": 2621,
            "original_position": 30,
            "original_start_line": null,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 394359565,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/409334427",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r409335608"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/409335608"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Can you ever end up with `arg` as something that isn't a `SliceIndexNode`? For example:\r\n\r\n    a = some_array[1:10]\r\n    return a\r\n\r\nCould `a` pick up the type from the indexing operation, but the coercion would happen to a `NameNode`?",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-04-16T07:22:25Z",
            "diff_hunk": "@@ -13192,6 +13200,16 @@ def analyse_types(self, env):\n \n     def generate_result_code(self, code):\n         code.putln('%s; %s' % (\n+            self.arg.type.to_py_call_code(",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r409335608",
            "id": 409335608,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzNTYwOA==",
            "original_commit_id": "373419b53e7331535e075d298100ae270d6c09db",
            "original_line": 13400,
            "original_position": 39,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 394359565,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/409335608",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r409364037"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/409364037"
                }
            },
            "author_association": "MEMBER",
            "body": "Both functions seem symmetric, so they should use similar names as well.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-04-16T08:10:57Z",
            "diff_hunk": "@@ -2592,6 +2592,46 @@ def find_cpp_operation_type(self, operator, operand_type=None):\n             return self.base_type.find_cpp_operation_type(operator, operand_type)\n         return None\n \n+class CPtrToArraySliceType(CPtrType):\n+    def create_to_py_utility_code(self, env):\n+        if self.to_py_function is not None:\n+            return True\n+        if not self.base_type.create_to_py_utility_code(env):\n+            return False\n+\n+        safe_typename = self.base_type.specialization_name()\n+\n+        to_py_function = \"__Pyx_carray_slice_to_py_%s\" % safe_typename\n+        to_tuple_function = \"__Pyx_carray_slice_to_tuple_%s\" % safe_typename\n+\n+        from .UtilityCode import CythonUtilityCode\n+        context = {\n+            'cname': to_py_function,\n+            'to_tuple_cname': to_tuple_function,",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r409364037",
            "id": 409364037,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2NDAzNw==",
            "original_commit_id": "373419b53e7331535e075d298100ae270d6c09db",
            "original_line": 2610,
            "original_position": 19,
            "original_start_line": 2609,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 394394984,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/409364037",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r409365774"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/409365774"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes. It seems to me that going through an implementation tree node would be better than going through the type system for this. A sliced array isn't really a type by itself.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-04-16T08:13:41Z",
            "diff_hunk": "@@ -2592,6 +2592,46 @@ def find_cpp_operation_type(self, operator, operand_type=None):\n             return self.base_type.find_cpp_operation_type(operator, operand_type)\n         return None\n \n+class CPtrToArraySliceType(CPtrType):\n+    def create_to_py_utility_code(self, env):\n+        if self.to_py_function is not None:\n+            return True\n+        if not self.base_type.create_to_py_utility_code(env):\n+            return False\n+\n+        safe_typename = self.base_type.specialization_name()\n+\n+        to_py_function = \"__Pyx_carray_slice_to_py_%s\" % safe_typename\n+        to_tuple_function = \"__Pyx_carray_slice_to_tuple_%s\" % safe_typename\n+\n+        from .UtilityCode import CythonUtilityCode\n+        context = {\n+            'cname': to_py_function,\n+            'to_tuple_cname': to_tuple_function,\n+            'base_type': self.base_type,\n+        }\n+        env.use_utility_code(CythonUtilityCode.load(\n+            \"carray_slice.to_py\", \"CConvert.pyx\",\n+            outer_module_scope=env.global_scope(),  # need access to types declared in module\n+            context=context, compiler_directives=dict(env.global_scope().directives)))\n+        self.to_tuple_function = to_tuple_function\n+        self.to_py_function = to_py_function\n+        return True\n+\n+    def to_py_call_code(self, source_code, start_code, stop_code, result_code, result_type, to_py_function=None):",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r409365774",
            "id": 409365774,
            "in_reply_to_id": 409334427,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2NTc3NA==",
            "original_commit_id": "373419b53e7331535e075d298100ae270d6c09db",
            "original_line": 2621,
            "original_position": 30,
            "original_start_line": null,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 394394984,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/409365774",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r409367009"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/409367009"
                }
            },
            "author_association": "MEMBER",
            "body": "Makes total sense to have these two versions, but the tuple case doesn't seem to be exercised in the tests.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-04-16T08:15:36Z",
            "diff_hunk": "@@ -2592,6 +2592,46 @@ def find_cpp_operation_type(self, operator, operand_type=None):\n             return self.base_type.find_cpp_operation_type(operator, operand_type)\n         return None\n \n+class CPtrToArraySliceType(CPtrType):\n+    def create_to_py_utility_code(self, env):\n+        if self.to_py_function is not None:\n+            return True\n+        if not self.base_type.create_to_py_utility_code(env):\n+            return False\n+\n+        safe_typename = self.base_type.specialization_name()\n+\n+        to_py_function = \"__Pyx_carray_slice_to_py_%s\" % safe_typename\n+        to_tuple_function = \"__Pyx_carray_slice_to_tuple_%s\" % safe_typename\n+\n+        from .UtilityCode import CythonUtilityCode\n+        context = {\n+            'cname': to_py_function,\n+            'to_tuple_cname': to_tuple_function,\n+            'base_type': self.base_type,\n+        }\n+        env.use_utility_code(CythonUtilityCode.load(\n+            \"carray_slice.to_py\", \"CConvert.pyx\",\n+            outer_module_scope=env.global_scope(),  # need access to types declared in module\n+            context=context, compiler_directives=dict(env.global_scope().directives)))\n+        self.to_tuple_function = to_tuple_function\n+        self.to_py_function = to_py_function\n+        return True\n+\n+    def to_py_call_code(self, source_code, start_code, stop_code, result_code, result_type, to_py_function=None):\n+        func = self.to_py_function if to_py_function is None else to_py_function\n+\n+        target_is_tuple = result_type.is_builtin_type and result_type.name == 'tuple'",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r409367009",
            "id": 409367009,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2NzAwOQ==",
            "original_commit_id": "373419b53e7331535e075d298100ae270d6c09db",
            "original_line": 2624,
            "original_position": 33,
            "original_start_line": null,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 394394984,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/409367009",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r409552218"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/409552218"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I little bit forgot what is there, I know that I did it by potentially wrong way, comments will help to understand where are errors ",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-04-16T13:24:02Z",
            "diff_hunk": "@@ -13192,6 +13200,16 @@ def analyse_types(self, env):\n \n     def generate_result_code(self, code):\n         code.putln('%s; %s' % (\n+            self.arg.type.to_py_call_code(",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r409552218",
            "id": 409552218,
            "in_reply_to_id": 409335608,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1MjIxOA==",
            "original_commit_id": "373419b53e7331535e075d298100ae270d6c09db",
            "original_line": 13400,
            "original_position": 39,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 394627641,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/409552218",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r409552744"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/409552744"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "ok, I will move",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-04-16T13:24:44Z",
            "diff_hunk": "@@ -2592,6 +2592,46 @@ def find_cpp_operation_type(self, operator, operand_type=None):\n             return self.base_type.find_cpp_operation_type(operator, operand_type)\n         return None\n \n+class CPtrToArraySliceType(CPtrType):\n+    def create_to_py_utility_code(self, env):\n+        if self.to_py_function is not None:\n+            return True\n+        if not self.base_type.create_to_py_utility_code(env):\n+            return False\n+\n+        safe_typename = self.base_type.specialization_name()\n+\n+        to_py_function = \"__Pyx_carray_slice_to_py_%s\" % safe_typename\n+        to_tuple_function = \"__Pyx_carray_slice_to_tuple_%s\" % safe_typename\n+\n+        from .UtilityCode import CythonUtilityCode\n+        context = {\n+            'cname': to_py_function,\n+            'to_tuple_cname': to_tuple_function,\n+            'base_type': self.base_type,\n+        }\n+        env.use_utility_code(CythonUtilityCode.load(\n+            \"carray_slice.to_py\", \"CConvert.pyx\",\n+            outer_module_scope=env.global_scope(),  # need access to types declared in module\n+            context=context, compiler_directives=dict(env.global_scope().directives)))\n+        self.to_tuple_function = to_tuple_function\n+        self.to_py_function = to_py_function\n+        return True\n+\n+    def to_py_call_code(self, source_code, start_code, stop_code, result_code, result_type, to_py_function=None):",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r409552744",
            "id": 409552744,
            "in_reply_to_id": 409334427,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1Mjc0NA==",
            "original_commit_id": "373419b53e7331535e075d298100ae270d6c09db",
            "original_line": 2621,
            "original_position": 30,
            "original_start_line": null,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 394628332,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/409552744",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r422698103"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/422698103"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        elif dst_type.is_pyobject and self.base.type.is_array:\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-10T20:46:10Z",
            "diff_hunk": "@@ -5026,6 +5026,9 @@ def coerce_to(self, dst_type, env):\n                     \"default encoding required for conversion from '%s' to '%s'\" %\n                     (self.base.type, dst_type))\n             self.type = dst_type\n+        elif dst_type.is_pyobject and isinstance(self.base.type, PyrexTypes.CArrayType):",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r422698103",
            "id": 422698103,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5ODEwMw==",
            "original_commit_id": "9624a5dc09561b377949938138f14f43bb67a139",
            "original_line": 5029,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 408780211,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/422698103",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r422698356"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/422698356"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's keep simple code like this a bit less verbose.\r\n```suggestion\r\n                code.putln(\"%s = %s;\" % (result, base_result))\r\n            else:\r\n                error(self.pos, \"Slicing is not currently supported for '%s'.\" % self.type)\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-10T20:48:16Z",
            "diff_hunk": "@@ -5034,13 +5037,21 @@ def coerce_to(self, dst_type, env):\n         return super(SliceIndexNode, self).coerce_to(dst_type, env)\n \n     def generate_result_code(self, code):\n+        base_result = self.base.result()\n+        result = self.result()\n+\n         if not self.type.is_pyobject:\n-            error(self.pos,\n-                  \"Slicing is not currently supported for '%s'.\" % self.type)\n+            if self.base.type.is_array:\n+                code.putln(\n+                    \"%s = %s;\" % (\n+                        result,\n+                        base_result,\n+                        ))\n+            else:\n+                error(self.pos,\n+                      \"Slicing is not currently supported for '%s'.\" % self.type)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r422698356",
            "id": 422698356,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5ODM1Ng==",
            "original_commit_id": "9624a5dc09561b377949938138f14f43bb67a139",
            "original_line": 5048,
            "original_position": 28,
            "original_start_line": 5045,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 408780211,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/422698356",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r422698533"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/422698533"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    # Copy a slice of a C array into a Python list.\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-10T20:49:58Z",
            "diff_hunk": "@@ -13291,6 +13302,56 @@ def generate_result_code(self, code):\n         self.generate_gotref(code)\n \n \n+class CoerceSliceCArrayToList(CoercionNode):\n+    # This node is used to convert a Slice of C array to c-array",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r422698533",
            "id": 422698533,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5ODUzMw==",
            "original_commit_id": "9624a5dc09561b377949938138f14f43bb67a139",
            "original_line": 13306,
            "original_position": 41,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 408780211,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/422698533",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r422699261"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/422699261"
                }
            },
            "author_association": "MEMBER",
            "body": "A lot can happen between now and code generation time, so we should read the type again in `generate_result_code()` and not store it here.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-10T20:55:55Z",
            "diff_hunk": "@@ -13291,6 +13302,56 @@ def generate_result_code(self, code):\n         self.generate_gotref(code)\n \n \n+class CoerceSliceCArrayToList(CoercionNode):\n+    # This node is used to convert a Slice of C array to c-array\n+    is_temp = 1\n+    type = py_object_type\n+    \n+    def __init__(self, arg, env, type=py_object_type):\n+        self.el_type = arg.base.type.base_type",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r422699261",
            "id": 422699261,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5OTI2MQ==",
            "original_commit_id": "9624a5dc09561b377949938138f14f43bb67a139",
            "original_line": 13311,
            "original_position": 46,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 408780211,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/422699261",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r422699470"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/422699470"
                }
            },
            "author_association": "MEMBER",
            "body": "There is no guarantee that these are ints. They might be C compiler macro names, `sizeof(sometype)`, or whatever. But we can calculate this size at runtime and let the C compiler fold it for us if it can. We don't actually need to know it for the code generation.\r\n\r\nNote also that the slice length might be zero or negative. We need to test and handle that. Min and max `Py_ssize_t` / `size_t` values are also usually worth testing, e.g. the empty slice `[max:min]`.\r\n\r\nYou can use `__Pyx_is_valid_index()` for bounds checking, but should take a look at the `boundscheck` and `wraparound` directives as well, which should disable these checks. Wraparound can also be made to work with a known array length. There is a lot of example code in `StringTools.c`.\r\n\r\nEdit: In fact, feel free to use a Cython implemented utility function for this, instead of generating the conversion code with string formatting. See the `carray` conversion functions in `CConvert.pyx`.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-10T20:57:55Z",
            "diff_hunk": "@@ -13291,6 +13302,56 @@ def generate_result_code(self, code):\n         self.generate_gotref(code)\n \n \n+class CoerceSliceCArrayToList(CoercionNode):\n+    # This node is used to convert a Slice of C array to c-array\n+    is_temp = 1\n+    type = py_object_type\n+    \n+    def __init__(self, arg, env, type=py_object_type):\n+        self.el_type = arg.base.type.base_type\n+        if not self.el_type.create_to_py_utility_code(env):\n+            error(arg.pos, \"Cannot convert '%s' to Python object\" % self.el_type)\n+\n+        CoercionNode.__init__(self, arg)\n+\n+    def generate_result_code(self, code):\n+        arg = self.arg\n+        arg_result = arg.result()\n+        result = self.result()\n+        \n+        start = arg.start_code()\n+        stop = arg.stop_code()\n+        sliceSize = int(stop) - int(start)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r422699470",
            "id": 422699470,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5OTQ3MA==",
            "original_commit_id": "9624a5dc09561b377949938138f14f43bb67a139",
            "original_line": 13324,
            "original_position": 59,
            "original_start_line": 13322,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 408780211,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/422699470",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r422699862"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/422699862"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n               '%s[%s]' % (arg.result(), counter),\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-10T21:01:19Z",
            "diff_hunk": "@@ -13291,6 +13302,56 @@ def generate_result_code(self, code):\n         self.generate_gotref(code)\n \n \n+class CoerceSliceCArrayToList(CoercionNode):\n+    # This node is used to convert a Slice of C array to c-array\n+    is_temp = 1\n+    type = py_object_type\n+    \n+    def __init__(self, arg, env, type=py_object_type):\n+        self.el_type = arg.base.type.base_type\n+        if not self.el_type.create_to_py_utility_code(env):\n+            error(arg.pos, \"Cannot convert '%s' to Python object\" % self.el_type)\n+\n+        CoercionNode.__init__(self, arg)\n+\n+    def generate_result_code(self, code):\n+        arg = self.arg\n+        arg_result = arg.result()\n+        result = self.result()\n+        \n+        start = arg.start_code()\n+        stop = arg.stop_code()\n+        sliceSize = int(stop) - int(start)\n+\n+        counter = code.funcstate.allocate_temp(PyrexTypes.c_size_t_type, manage_ref=False)\n+        code.putln('%s = PyList_New(%s);' % (self.result(), sliceSize))\n+        self.generate_gotref(code)\n+\n+        objEl = code.funcstate.allocate_temp(py_object_type, manage_ref=False)\n+        code.putln('for (%s=%s; %s < %s; %s++) {' % (\n+                counter,\n+                start,\n+                counter,\n+                stop,\n+                counter\n+            ))\n+\n+        code.putln('%s; %s' % (\n+            self.el_type.to_py_call_code(\n+               '%s[%s]' % ( arg.result(), counter),",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r422699862",
            "id": 422699862,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5OTg2Mg==",
            "original_commit_id": "9624a5dc09561b377949938138f14f43bb67a139",
            "original_line": 13341,
            "original_position": 76,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 408780211,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/422699862",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r425802577"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/425802577"
                }
            },
            "author_association": "MEMBER",
            "body": "I would name it `c_array_slice.to_py` or `c_ptr_slice.to_py`, because with `c_slice` it's not clear what it refers to – a slice of what?",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-15T13:29:42Z",
            "diff_hunk": "@@ -130,3 +130,21 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_slice.to_py ####################",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r425802577",
            "id": 425802577,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMjU3Nw==",
            "original_commit_id": "12ceb876ed83a6b89a28f817690b2f78728f1ea4",
            "original_line": 134,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 412649992,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/425802577",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r425804401"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/425804401"
                }
            },
            "author_association": "MEMBER",
            "body": "It would be nice if we could support `tuple` creation as well, by looking at the actual `dst_type`. You can write a test for that with a `cpdef` test function that has `tuple` as return type, and then return a C array slice from it. Or cast to `<tuple>`.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-15T13:32:44Z",
            "diff_hunk": "@@ -5026,6 +5026,9 @@ def coerce_to(self, dst_type, env):\n                     \"default encoding required for conversion from '%s' to '%s'\" %\n                     (self.base.type, dst_type))\n             self.type = dst_type\n+        elif dst_type.is_pyobject and self.base.type.is_array:\n+            return CoerceSliceCArrayToList(self, env)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r425804401",
            "id": 425804401,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNDQwMQ==",
            "original_commit_id": "12ceb876ed83a6b89a28f817690b2f78728f1ea4",
            "original_line": 5030,
            "original_position": 5,
            "original_start_line": 5029,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 412649992,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/425804401",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r425810643"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/425810643"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a bit funny – why is there a `SliceIndexNode` at all, when the work is done by the `CoerceSliceArrayToList` node that wraps it? I think that's coupling both nodes too tightly.\r\n\r\nDo we need the coercion node at all? Can't the `SliceIndexNode` simply return the Python tuple or list, and build it itself? Basically, if `self.base` is a C array or C pointer (we need tests for both), and `self.type` is `list_type` or `tuple_type`, then call the slice copying function. You can create an appropriately configured `SliceIndexNode` in its `coerce_to()` method and just return that.\r\n\r\nI think we can also raise compile time errors when trying to coerce a C array to any builtin or extension type other than `list`/`tuple`. Oh, and `set`/`frozenset`, because why not support `<frozenset>intptr[:10]` ?",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-15T13:43:05Z",
            "diff_hunk": "@@ -5034,13 +5037,17 @@ def coerce_to(self, dst_type, env):\n         return super(SliceIndexNode, self).coerce_to(dst_type, env)\n \n     def generate_result_code(self, code):\n+        base_result = self.base.result()\n+        result = self.result()\n+\n         if not self.type.is_pyobject:\n-            error(self.pos,\n-                  \"Slicing is not currently supported for '%s'.\" % self.type)\n+            if self.base.type.is_array:\n+                code.putln(\"%s = %s;\" % (result, base_result))",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r425810643",
            "id": 425810643,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxMDY0Mw==",
            "original_commit_id": "12ceb876ed83a6b89a28f817690b2f78728f1ea4",
            "original_line": 5045,
            "original_position": 21,
            "original_start_line": 5043,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 412649992,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/425810643",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r425811955"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/425811955"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we should also have (error) tests for the case that these are not integers.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-15T13:45:13Z",
            "diff_hunk": "@@ -13291,6 +13298,46 @@ def generate_result_code(self, code):\n         self.generate_gotref(code)\n \n \n+class CoerceSliceCArrayToList(CoercionNode):\n+    # Copy a slice of a C array into a Python list.\n+    is_temp = 1\n+    type = py_object_type\n+\n+    def __init__(self, arg, env, type=py_object_type):\n+        to_py_func_cname = \"__Pyx_slice_carray_to_py_\" + arg.base.type.specialization_name()\n+        context = {\n+            'cname': to_py_func_cname,\n+            'base_type': arg.base.type.base_type\n+        }\n+\n+        self.to_py_func = to_py_func_cname\n+\n+        from .UtilityCode import CythonUtilityCode\n+\n+        env.use_utility_code(CythonUtilityCode.load(\n+            \"c_slice.to_py\", \"CConvert.pyx\",\n+            outer_module_scope=env.global_scope(),  # need access to types declared in module\n+            context=context, compiler_directives=dict(env.global_scope().directives)))\n+\n+        CoercionNode.__init__(self, arg)\n+\n+    def generate_result_code(self, code):\n+        arg = self.arg\n+\n+        code.putln('%s = %s(%s, %s, %s);' % (\n+            self.result(),\n+            self.to_py_func,\n+            arg.result(),\n+            arg.start_code(),\n+            arg.stop_code()",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r425811955",
            "id": 425811955,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxMTk1NQ==",
            "original_commit_id": "12ceb876ed83a6b89a28f817690b2f78728f1ea4",
            "original_line": 13332,
            "original_position": 67,
            "original_start_line": 13331,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 412649992,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/425811955",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r425812440"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/425812440"
                }
            },
            "author_association": "MEMBER",
            "body": "What if someone passes negative numbers?\r\nAnd I think we also have to take the `boundscheck` and `wraparound` directives into account.\r\n\r\nNote that there is a slice bounds calculation function coming in from PR #3600, `__Pyx_PySlice_AdjustIndices()`, which I think we can best reuse here.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-15T13:45:58Z",
            "diff_hunk": "@@ -130,3 +130,21 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object  p, Py_ssize_t pos, object o)\n+\n+@cname(\"{{cname}}\")\n+cdef inline list {{cname}}({{base_type}} *v, Py_ssize_t fromIdx, Py_ssize_t toIdx):\n+    cdef size_t i\n+    cdef object value\n+    l = PyList_New(toIdx - fromIdx)\n+    for i in range(<size_t>fromIdx, <size_t>toIdx):",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r425812440",
            "id": 425812440,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxMjQ0MA==",
            "original_commit_id": "12ceb876ed83a6b89a28f817690b2f78728f1ea4",
            "original_line": 146,
            "original_position": 17,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 412649992,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/425812440",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r425820555"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/425820555"
                }
            },
            "author_association": "MEMBER",
            "body": "The utility code should not get compiled with whatever directives the users have set for their own code. It should be well defined.\r\n\r\nAlthough, that's not entirely true. Anything that changes coercions, specifically the `c_string_type` and `c_string_encoding` directives, should best be honoured for the item conversion. E.g. a sliced `char[][]` should turn into a list with items of the user requested string type. That means we also need tests for that. You can put those into the respective `*_auto_encoding.pyx` test modules.\r\n\r\nI think we need to build a dict of well selected directives here.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-15T13:58:11Z",
            "diff_hunk": "@@ -13291,6 +13298,46 @@ def generate_result_code(self, code):\n         self.generate_gotref(code)\n \n \n+class CoerceSliceCArrayToList(CoercionNode):\n+    # Copy a slice of a C array into a Python list.\n+    is_temp = 1\n+    type = py_object_type\n+\n+    def __init__(self, arg, env, type=py_object_type):\n+        to_py_func_cname = \"__Pyx_slice_carray_to_py_\" + arg.base.type.specialization_name()\n+        context = {\n+            'cname': to_py_func_cname,\n+            'base_type': arg.base.type.base_type\n+        }\n+\n+        self.to_py_func = to_py_func_cname\n+\n+        from .UtilityCode import CythonUtilityCode\n+\n+        env.use_utility_code(CythonUtilityCode.load(\n+            \"c_slice.to_py\", \"CConvert.pyx\",\n+            outer_module_scope=env.global_scope(),  # need access to types declared in module\n+            context=context, compiler_directives=dict(env.global_scope().directives)))",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r425820555",
            "id": 425820555,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgyMDU1NQ==",
            "original_commit_id": "12ceb876ed83a6b89a28f817690b2f78728f1ea4",
            "original_line": 13320,
            "original_position": 55,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 412649992,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/425820555",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r425923757"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/425923757"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "If do you mean \r\n1) first to convert whole c-array to python list (typle, frozenset) ...\r\n2) ... and then to use the new, created python list for creation of slice\r\n\r\nok, I will change \r\n",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-15T16:44:41Z",
            "diff_hunk": "@@ -5034,13 +5037,17 @@ def coerce_to(self, dst_type, env):\n         return super(SliceIndexNode, self).coerce_to(dst_type, env)\n \n     def generate_result_code(self, code):\n+        base_result = self.base.result()\n+        result = self.result()\n+\n         if not self.type.is_pyobject:\n-            error(self.pos,\n-                  \"Slicing is not currently supported for '%s'.\" % self.type)\n+            if self.base.type.is_array:\n+                code.putln(\"%s = %s;\" % (result, base_result))",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r425923757",
            "id": 425923757,
            "in_reply_to_id": 425810643,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyMzc1Nw==",
            "original_commit_id": "12ceb876ed83a6b89a28f817690b2f78728f1ea4",
            "original_line": 5045,
            "original_position": 21,
            "original_start_line": 5043,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 412806894,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/425923757",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r425927720"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/425927720"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm, no, I meant that the `SliceIndexNode` can do the copying of the array slice part itself, rather than having a separate node do it instead. It's the purpose of the `SliceIndexNode` to do the slicing, whatever the result is. And if the result is calculated by a copy function, so be it. But it's still up to the `SliceIndexNode` to call that function, right here in this place.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-15T16:52:20Z",
            "diff_hunk": "@@ -5034,13 +5037,17 @@ def coerce_to(self, dst_type, env):\n         return super(SliceIndexNode, self).coerce_to(dst_type, env)\n \n     def generate_result_code(self, code):\n+        base_result = self.base.result()\n+        result = self.result()\n+\n         if not self.type.is_pyobject:\n-            error(self.pos,\n-                  \"Slicing is not currently supported for '%s'.\" % self.type)\n+            if self.base.type.is_array:\n+                code.putln(\"%s = %s;\" % (result, base_result))",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r425927720",
            "id": 425927720,
            "in_reply_to_id": 425810643,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNzcyMA==",
            "original_commit_id": "12ceb876ed83a6b89a28f817690b2f78728f1ea4",
            "original_line": 5045,
            "original_position": 21,
            "original_start_line": 5043,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 412812013,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/425927720",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r426005329"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/426005329"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "ok, then it was  clarified )",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-05-15T19:28:19Z",
            "diff_hunk": "@@ -5034,13 +5037,17 @@ def coerce_to(self, dst_type, env):\n         return super(SliceIndexNode, self).coerce_to(dst_type, env)\n \n     def generate_result_code(self, code):\n+        base_result = self.base.result()\n+        result = self.result()\n+\n         if not self.type.is_pyobject:\n-            error(self.pos,\n-                  \"Slicing is not currently supported for '%s'.\" % self.type)\n+            if self.base.type.is_array:\n+                code.putln(\"%s = %s;\" % (result, base_result))",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r426005329",
            "id": 426005329,
            "in_reply_to_id": 425810643,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwNTMyOQ==",
            "original_commit_id": "12ceb876ed83a6b89a28f817690b2f78728f1ea4",
            "original_line": 5045,
            "original_position": 21,
            "original_start_line": 5043,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 412912778,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/426005329",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r433237112"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/433237112"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "seems like bug for coercion c-array to py-types (similar occurs for slice)\r\nDo I have to do fixes in this pull request?",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-01T13:35:38Z",
            "diff_hunk": "@@ -275,3 +277,214 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef list test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef list test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_set()\n+    set([64, 81])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_frozenset()\n+    frozenset([64, 81])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    set([64, 25, 36, 81, 49])\n+    frozenset([64, 25, 36, 81, 49])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    print(<set> a[5:])\n+    print(<frozenset> a[5:])\n+\n+\n+\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+#    b = 5555\n+#    for i in range(10):\n+#        a[i] = i**2\n+#    b = a",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r433237112",
            "id": 433237112,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzNzExMg==",
            "original_commit_id": "50bdb95b158acb1a7124309bbb109ca390b6b02c",
            "original_line": 428,
            "original_position": 159,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 421846979,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/433237112",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r433237631"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/433237631"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "If \"b\" isn't initialized ...",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-01T13:36:33Z",
            "diff_hunk": "@@ -275,3 +277,214 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef list test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef list test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_set()\n+    set([64, 81])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_frozenset()\n+    frozenset([64, 81])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    set([64, 25, 36, 81, 49])\n+    frozenset([64, 25, 36, 81, 49])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    print(<set> a[5:])\n+    print(<frozenset> a[5:])\n+\n+\n+\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+#    b = 5555\n+#    for i in range(10):\n+#        a[i] = i**2\n+#    b = a\n+#    print(<list> b)\n+#    print(<tuple> b)\n+#    print(<set> b)\n+#    print(<frozenset> b)\n+#\n+#    # return lists\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+#    b = 5555\n+#    for i in range(10):\n+#        a[i] = i**2\n+#    b = a[1:5]\n+#    print(<list> b)\n+#    print(<tuple> b)\n+#    print(<set> b)\n+#    print(<frozenset> b)\n+#\n+#    # return lists\n+#    #[1, 4, 9, 16]\n+#    #[1, 4, 9, 16]\n+#    #[1, 4, 9, 16]\n+#    #[1, 4, 9, 16]\n+\n+\n+#error\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+     # is not initializaed\n+#    #b = 5555",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r433237631",
            "id": 433237631,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzNzYzMQ==",
            "original_commit_id": "50bdb95b158acb1a7124309bbb109ca390b6b02c",
            "original_line": 480,
            "original_position": 211,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 421847663,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/433237631",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r433237998"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/433237998"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "There occurs error (for c array slice  too)\r\nIs it bug?",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-01T13:37:11Z",
            "diff_hunk": "@@ -275,3 +277,214 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef list test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef list test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_set()\n+    set([64, 81])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_frozenset()\n+    frozenset([64, 81])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    set([64, 25, 36, 81, 49])\n+    frozenset([64, 25, 36, 81, 49])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    print(<set> a[5:])\n+    print(<frozenset> a[5:])\n+\n+\n+\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+#    b = 5555\n+#    for i in range(10):\n+#        a[i] = i**2\n+#    b = a\n+#    print(<list> b)\n+#    print(<tuple> b)\n+#    print(<set> b)\n+#    print(<frozenset> b)\n+#\n+#    # return lists\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+#    b = 5555\n+#    for i in range(10):\n+#        a[i] = i**2\n+#    b = a[1:5]\n+#    print(<list> b)\n+#    print(<tuple> b)\n+#    print(<set> b)\n+#    print(<frozenset> b)\n+#\n+#    # return lists\n+#    #[1, 4, 9, 16]\n+#    #[1, 4, 9, 16]\n+#    #[1, 4, 9, 16]\n+#    #[1, 4, 9, 16]\n+\n+\n+#error\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+     # is not initializaed\n+#    #b = 5555\n+#    for i in range(10):\n+#        a[i] = i**2\n+#    # error when initialization of new variable b\n+#    b = a[1:5]\n+#    # and for this variant also error\n+#    b = a",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r433237998",
            "id": 433237998,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzNzk5OA==",
            "original_commit_id": "50bdb95b158acb1a7124309bbb109ca390b6b02c",
            "original_line": 486,
            "original_position": 217,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 421848126,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/433237998",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r443248394"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/443248394"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I think we normally prefer splitting lines with brackets than `\\`, and string formatting to concatenation:\r\n\r\n```\r\nto_py_func_cname = \"__Pyx_slice_carray_%s_to_py_%s\" % (\r\n      self.base.type.specialization_name(), to_py_obj_type)\r\n```\r\n\r\nAlthough don't copy my indenting because I never get it right",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-21T19:14:01Z",
            "diff_hunk": "@@ -5026,23 +5029,59 @@ def coerce_to(self, dst_type, env):\n                     \"default encoding required for conversion from '%s' to '%s'\" %\n                     (self.base.type, dst_type))\n             self.type = dst_type\n-        if dst_type.is_array and self.base.type.is_array:\n-            if not self.start and not self.stop:\n-                # redundant slice building, copy C arrays directly\n-                return self.base.coerce_to(dst_type, env)\n-            # else: check array size if possible\n+        #elif (self.base.type.is_array or self.base.type.is_ptr) and dst_type.is_pyobject:\n+        elif self.base.type.is_array:\n+            if dst_type.is_pyobject:\n+                if dst_type is tuple_type:\n+                    to_py_obj_type = 'tuple'\n+                elif dst_type is set_type:\n+                    to_py_obj_type = 'set'\n+                elif dst_type is frozenset_type:\n+                    to_py_obj_type = 'frozenset'\n+                elif dst_type.is_pyobject:\n+                    to_py_obj_type = 'list'\n+                else:\n+                    error(self.pos,\n+                          \"Cannot convert slice of C array to '%s'\" % dst_type)\n+\n+                self.type = dst_type\n+                to_py_func_cname = \"__Pyx_slice_carray_\" + self.base.type.specialization_name()\\\n+                                        + '_to_py_' + to_py_obj_type",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r443248394",
            "id": 443248394,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0ODM5NA==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 5049,
            "original_position": 54,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 434525450,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/443248394",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r443249120"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/443249120"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Could you largely re-use the `carray.to_py` section? Your functions would just have to work out a start and end index (taking into account wraparound) and then call the existing convension functions?\r\n\r\nI'm also not convinced we really need a set/frozenset version - these are probably used rarely enough that they could just go through a tuple.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-21T19:23:35Z",
            "diff_hunk": "@@ -130,3 +130,69 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r443249120",
            "id": 443249120,
            "line": 136,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0OTEyMA==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 136,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": 5,
            "pull_request_review_id": 434525450,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/443249120",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r443249285"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/443249285"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I can't see any tests for wraparound although your code claims to handle it.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-21T19:25:45Z",
            "diff_hunk": "@@ -275,3 +276,227 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r443249285",
            "id": 443249285,
            "line": 285,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0OTI4NQ==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 285,
            "original_position": 12,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": 18,
            "pull_request_review_id": 434525450,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/443249285",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r443249437"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/443249437"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I don't see why specifying the return type here makes any difference to what the test does?",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-21T19:27:27Z",
            "diff_hunk": "@@ -275,3 +276,227 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef list test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef list test_c_to_py_coercing_array_in_var_2():",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r443249437",
            "id": 443249437,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0OTQzNw==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 342,
            "original_position": 75,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 434525450,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/443249437",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r443250194"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/443250194"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "It looks like you've fixed this (above)? Can this commented out bit now go? Or is this different in some way?",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-21T19:36:44Z",
            "diff_hunk": "@@ -275,3 +276,227 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef list test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef list test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_set()\n+    >>> isinstance(b, set)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_frozenset()\n+    >>> isinstance(b, frozenset)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    [25, 36, 49, 64, 81]\n+    [25, 36, 49, 64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    b = <set> a[5:]\n+    assert isinstance(b, set)\n+    print(sorted(b))\n+    b = <frozenset> a[5:]\n+    assert isinstance(b, frozenset)\n+    print(sorted(b))\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+#    b = 5555\n+#    for i in range(10):\n+#        a[i] = i**2\n+#    b = a\n+#    print(<list> b)\n+#    print(<tuple> b)\n+#    print(<set> b)\n+#    print(<frozenset> b)\n+#\n+#    # return lists\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r443250194",
            "id": 443250194,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI1MDE5NA==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 454,
            "original_position": 187,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 434525450,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/443250194",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r444781512"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444781512"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "These tests (commented) still fails\r\ndescription of bug\r\n```\r\n# b is initialized\r\nb = 5555\r\n# a can be c-array or slice of c-array\r\nb = a[1:5]\r\nb = a\r\n```\r\n\r\nthen when I am trying to cast\r\n\r\n```\r\nprint(<list> b)\r\nprint(<tuple> b)\r\nprint(<set> b)\r\nprint(<frozenset> b)\r\n```\r\n\r\nresult will be always the list, since dst_type will be always python object, not tuple_type, ... etc.\r\n\r\n\r\nSecond bug:\r\nwhen b wasn't initialized before (like in previous code example)\r\n```\r\nb = a[1:5]\r\n```\r\nor\r\n```\r\nb = a\r\n```\r\nwill raise the error\r\n",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-24T09:56:13Z",
            "diff_hunk": "@@ -275,3 +276,227 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef list test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef list test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_set()\n+    >>> isinstance(b, set)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_frozenset()\n+    >>> isinstance(b, frozenset)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    [25, 36, 49, 64, 81]\n+    [25, 36, 49, 64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    b = <set> a[5:]\n+    assert isinstance(b, set)\n+    print(sorted(b))\n+    b = <frozenset> a[5:]\n+    assert isinstance(b, frozenset)\n+    print(sorted(b))\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+#    b = 5555\n+#    for i in range(10):\n+#        a[i] = i**2\n+#    b = a\n+#    print(<list> b)\n+#    print(<tuple> b)\n+#    print(<set> b)\n+#    print(<frozenset> b)\n+#\n+#    # return lists\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r444781512",
            "id": 444781512,
            "in_reply_to_id": 443250194,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4MTUxMg==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 454,
            "original_position": 187,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 436498981,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444781512",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r444785010"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444785010"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "ok, will change",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-24T10:02:41Z",
            "diff_hunk": "@@ -275,3 +276,227 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef list test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef list test_c_to_py_coercing_array_in_var_2():",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r444785010",
            "id": 444785010,
            "in_reply_to_id": 443249437,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4NTAxMA==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 342,
            "original_position": 75,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 436503650,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444785010",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r444822436"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/444822436"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ok, will re-use.\r\nIn https://github.com/cython/cython/pull/3151#discussion_r425810643  was written  to add support list, tuple, set, frozenset.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-24T11:18:18Z",
            "diff_hunk": "@@ -130,3 +130,69 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r444822436",
            "id": 444822436,
            "in_reply_to_id": 443249120,
            "line": 136,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyMjQzNg==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 136,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": 5,
            "pull_request_review_id": 436551990,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/444822436",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r445033254"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445033254"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I missed that comment - sorry!\r\n\r\nNote that you can add use [`PySet_Add`](https://docs.python.org/3/c-api/set.html#c.PySet_Add) on frozenset's too - you don't have to go through a tuple.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-24T16:48:59Z",
            "diff_hunk": "@@ -130,3 +130,69 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r445033254",
            "id": 445033254,
            "in_reply_to_id": 443249120,
            "line": 136,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMzI1NA==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 136,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": 5,
            "pull_request_review_id": 436829114,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445033254",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r445035916"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445035916"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Unlike `PyList_SET_ITEM` and `PyTuple_SET_ITEM` this can raise an exception. It also doesn't steal a reference, so I think you have a memory leak.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-24T16:53:31Z",
            "diff_hunk": "@@ -130,3 +130,69 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+    int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    set PySet_New(void *)\n+    void PySet_Add(object p, object o)\n+\n+    set PyFrozenSet_New(void *)\n+\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck and\\\n+         not (__Pyx_is_valid_index(from_idx, arr_size) and __Pyx_is_valid_index(to_idx - 1, arr_size)):\n+            PyErr_Format(IndexError, \"Some of slice indexes is out of range\")\n+\n+\n+    cdef Py_ssize_t i, length = to_idx - from_idx\n+\n+    if boundscheck and length < 0:\n+        PyErr_Format(IndexError, \"Wrong range of slice\")\n+\n+    {{if to_py_obj_type == 'list'}}\n+    l = PyList_New(length)\n+    {{elif to_py_obj_type == 'tuple' or to_py_obj_type == 'frozenset'}}\n+    l = PyTuple_New(length)\n+    {{elif to_py_obj_type == 'set'}}\n+    l = PySet_New(NULL)\n+    {{endif}}\n+\n+    cdef object value\n+    for i in range(<size_t> from_idx, <size_t> to_idx):\n+\n+        value = arr[i]\n+        Py_INCREF(value)\n+\n+        {{if to_py_obj_type == 'list'}}\n+        PyList_SET_ITEM(l, i - from_idx, value)\n+        {{elif to_py_obj_type == 'tuple' or to_py_obj_type == 'frozenset'}}\n+        PyTuple_SET_ITEM(l, i - from_idx, value)\n+        {{elif to_py_obj_type == 'set'}}\n+        PySet_Add(l, value)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r445035916",
            "id": 445035916,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNTkxNg==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 191,
            "original_position": 62,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 436832551,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445035916",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r445037058"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445037058"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I'm a bit worried about these two lines. I think `value` will be inferred to be `base_type`, and a new Python object will be created specifically to pass to `Py_INCREF`. Instead I think you should do `cdef object value` at the start of the function so that the conversion happens on `value = arr[i]`.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-24T16:55:28Z",
            "diff_hunk": "@@ -130,3 +130,69 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+    int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    set PySet_New(void *)\n+    void PySet_Add(object p, object o)\n+\n+    set PyFrozenSet_New(void *)\n+\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck and\\\n+         not (__Pyx_is_valid_index(from_idx, arr_size) and __Pyx_is_valid_index(to_idx - 1, arr_size)):\n+            PyErr_Format(IndexError, \"Some of slice indexes is out of range\")\n+\n+\n+    cdef Py_ssize_t i, length = to_idx - from_idx\n+\n+    if boundscheck and length < 0:\n+        PyErr_Format(IndexError, \"Wrong range of slice\")\n+\n+    {{if to_py_obj_type == 'list'}}\n+    l = PyList_New(length)\n+    {{elif to_py_obj_type == 'tuple' or to_py_obj_type == 'frozenset'}}\n+    l = PyTuple_New(length)\n+    {{elif to_py_obj_type == 'set'}}\n+    l = PySet_New(NULL)\n+    {{endif}}\n+\n+    cdef object value\n+    for i in range(<size_t> from_idx, <size_t> to_idx):\n+\n+        value = arr[i]\n+        Py_INCREF(value)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r445037058",
            "id": 445037058,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNzA1OA==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 184,
            "original_position": 55,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 436832551,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445037058",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r445038989"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445038989"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "The first bug looks like an existing problem that probably doesn't need fixing here.\r\n\r\nI think the second bug is not really a bug. If `b` isn't initialized then Cython gets it's type from the assignment. You could also do `cdef object b` to set the type of `b`.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-24T16:58:42Z",
            "diff_hunk": "@@ -275,3 +276,227 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef list test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef list test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_set()\n+    >>> isinstance(b, set)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_frozenset()\n+    >>> isinstance(b, frozenset)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    [25, 36, 49, 64, 81]\n+    [25, 36, 49, 64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    b = <set> a[5:]\n+    assert isinstance(b, set)\n+    print(sorted(b))\n+    b = <frozenset> a[5:]\n+    assert isinstance(b, frozenset)\n+    print(sorted(b))\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+#    b = 5555\n+#    for i in range(10):\n+#        a[i] = i**2\n+#    b = a\n+#    print(<list> b)\n+#    print(<tuple> b)\n+#    print(<set> b)\n+#    print(<frozenset> b)\n+#\n+#    # return lists\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r445038989",
            "id": 445038989,
            "in_reply_to_id": 443250194,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzODk4OQ==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 454,
            "original_position": 187,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 436832551,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445038989",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r445039593"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445039593"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "See comment above - I don't think this is a bug. It just doesn't know that `b` should be an object.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-24T16:59:45Z",
            "diff_hunk": "@@ -275,3 +277,214 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef list test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef list test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_set()\n+    set([64, 81])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_frozenset()\n+    frozenset([64, 81])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    set([64, 25, 36, 81, 49])\n+    frozenset([64, 25, 36, 81, 49])\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    print(<set> a[5:])\n+    print(<frozenset> a[5:])\n+\n+\n+\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+#    b = 5555\n+#    for i in range(10):\n+#        a[i] = i**2\n+#    b = a\n+#    print(<list> b)\n+#    print(<tuple> b)\n+#    print(<set> b)\n+#    print(<frozenset> b)\n+#\n+#    # return lists\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+#    #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n+\n+\n+# Error !!!!!!!!\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+#    b = 5555\n+#    for i in range(10):\n+#        a[i] = i**2\n+#    b = a[1:5]\n+#    print(<list> b)\n+#    print(<tuple> b)\n+#    print(<set> b)\n+#    print(<frozenset> b)\n+#\n+#    # return lists\n+#    #[1, 4, 9, 16]\n+#    #[1, 4, 9, 16]\n+#    #[1, 4, 9, 16]\n+#    #[1, 4, 9, 16]\n+\n+\n+#error\n+#def test_coercing_c_slice_by_casting():\n+#    \"\"\"\n+#    >>> test_coercing_c_slice_by_casting()\n+#    [25, 36, 49, 64, 81]\n+#    (25, 36, 49, 64, 81)\n+#    set([64, 25, 36, 81, 49])\n+#    frozenset([64, 25, 36, 81, 49])\n+#    \"\"\"\n+#    cdef int i\n+#    cdef int a[10]\n+     # is not initializaed\n+#    #b = 5555",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r445039593",
            "id": 445039593,
            "in_reply_to_id": 433237631,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzOTU5Mw==",
            "original_commit_id": "50bdb95b158acb1a7124309bbb109ca390b6b02c",
            "original_line": 480,
            "original_position": 211,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 436832551,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445039593",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r445165928"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445165928"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I used it before, but it fails in PyPy for frozenset, so I have used\r\n__Pyx_PyFrozenSet_New\r\nby lines\r\n```\r\n{{if to_py_obj_type == 'frozenset'}}\r\nl = frozenset(l)\r\n{{endif}}\r\n```\r\nby converting from tuple",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-24T20:54:31Z",
            "diff_hunk": "@@ -130,3 +130,69 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r445165928",
            "id": 445165928,
            "in_reply_to_id": 443249120,
            "line": 136,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2NTkyOA==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 136,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": 5,
            "pull_request_review_id": 436999325,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445165928",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r445186298"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/445186298"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I've opened a [PyPy bug for this](https://foss.heptapod.net/pypy/pypy/-/issues/3251). You should probably keep your workaround (with appropriate reference counting fixes) rather than wait for a fix from PyPy.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-24T21:37:45Z",
            "diff_hunk": "@@ -130,3 +130,69 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r445186298",
            "id": 445186298,
            "in_reply_to_id": 443249120,
            "line": 136,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE4NjI5OA==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 136,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": 5,
            "pull_request_review_id": 437025036,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/445186298",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r446510836"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/446510836"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```cdef object value``` exist before ```for i in range(<size_t> ...``` or do you mean to move it at the begin of function?",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-27T10:33:18Z",
            "diff_hunk": "@@ -130,3 +130,69 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+    int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    set PySet_New(void *)\n+    void PySet_Add(object p, object o)\n+\n+    set PyFrozenSet_New(void *)\n+\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck and\\\n+         not (__Pyx_is_valid_index(from_idx, arr_size) and __Pyx_is_valid_index(to_idx - 1, arr_size)):\n+            PyErr_Format(IndexError, \"Some of slice indexes is out of range\")\n+\n+\n+    cdef Py_ssize_t i, length = to_idx - from_idx\n+\n+    if boundscheck and length < 0:\n+        PyErr_Format(IndexError, \"Wrong range of slice\")\n+\n+    {{if to_py_obj_type == 'list'}}\n+    l = PyList_New(length)\n+    {{elif to_py_obj_type == 'tuple' or to_py_obj_type == 'frozenset'}}\n+    l = PyTuple_New(length)\n+    {{elif to_py_obj_type == 'set'}}\n+    l = PySet_New(NULL)\n+    {{endif}}\n+\n+    cdef object value\n+    for i in range(<size_t> from_idx, <size_t> to_idx):\n+\n+        value = arr[i]\n+        Py_INCREF(value)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r446510836",
            "id": 446510836,
            "in_reply_to_id": 445037058,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDgzNg==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 184,
            "original_position": 55,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 438688720,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/446510836",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r446511138"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/446511138"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Sorry. You're right - you have `cdef object value` and I didn't see it. This should be OK where it is.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-27T10:37:17Z",
            "diff_hunk": "@@ -130,3 +130,69 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+    int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    set PySet_New(void *)\n+    void PySet_Add(object p, object o)\n+\n+    set PyFrozenSet_New(void *)\n+\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck and\\\n+         not (__Pyx_is_valid_index(from_idx, arr_size) and __Pyx_is_valid_index(to_idx - 1, arr_size)):\n+            PyErr_Format(IndexError, \"Some of slice indexes is out of range\")\n+\n+\n+    cdef Py_ssize_t i, length = to_idx - from_idx\n+\n+    if boundscheck and length < 0:\n+        PyErr_Format(IndexError, \"Wrong range of slice\")\n+\n+    {{if to_py_obj_type == 'list'}}\n+    l = PyList_New(length)\n+    {{elif to_py_obj_type == 'tuple' or to_py_obj_type == 'frozenset'}}\n+    l = PyTuple_New(length)\n+    {{elif to_py_obj_type == 'set'}}\n+    l = PySet_New(NULL)\n+    {{endif}}\n+\n+    cdef object value\n+    for i in range(<size_t> from_idx, <size_t> to_idx):\n+\n+        value = arr[i]\n+        Py_INCREF(value)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r446511138",
            "id": 446511138,
            "in_reply_to_id": 445037058,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMTEzOA==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 184,
            "original_position": 55,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 438688897,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/446511138",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r446511792"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/446511792"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Change this to `int PySet_Add(object p, object o) except -1` and Cython should handle the exception case.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-27T10:45:32Z",
            "diff_hunk": "@@ -130,3 +130,69 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    void Py_DECREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+    int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    set PySet_New(void *)\n+    void PySet_Add(object p, object o)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r446511792",
            "id": 446511792,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMTc5Mg==",
            "original_commit_id": "1bfac00bbb2e07859e5832b6284788e50c44a363",
            "original_line": 149,
            "original_position": 20,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 438689287,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/446511792",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r446512377"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/446512377"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "It looks like the tests you've added are for boundschecking (which is good - this should be tested). You should probably test `a[:-5]` or `a[-2:]` or `a[-5:-2]` or `a[-5:8]` etc.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-27T10:52:39Z",
            "diff_hunk": "@@ -275,3 +276,227 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r446512377",
            "id": 446512377,
            "in_reply_to_id": 443249285,
            "line": 285,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMjM3Nw==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 285,
            "original_position": 12,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": 18,
            "pull_request_review_id": 438689640,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/446512377",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r446512504"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/446512504"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Not 100% sure about this. By analogy with Python types like `list` this should probably work and just return the full array. Although it does feel dodgy to index off the end of an array.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-27T10:54:47Z",
            "diff_hunk": "@@ -275,3 +275,194 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_set()\n+    >>> isinstance(b, set)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_frozenset()\n+    >>> isinstance(b, frozenset)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    [25, 36, 49, 64, 81]\n+    [25, 36, 49, 64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    b = <set> a[5:]\n+    assert isinstance(b, set)\n+    print(sorted(b))\n+    b = <frozenset> a[5:]\n+    assert isinstance(b, frozenset)\n+    print(sorted(b))\n+\n+\n+@cython.wraparound(True)\n+def test_coercing_c_slice_out_of_range():\n+    \"\"\"\n+    >>> test_coercing_c_slice_out_of_range()\n+    Traceback (most recent call last):\n+        ...\n+    IndexError: Some of slice indexes is out of range\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 0\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[11:]\n+\n+@cython.wraparound(True)\n+def test_coercing_c_slice_out_of_range_2():\n+    \"\"\"\n+    >>> test_coercing_c_slice_out_of_range_2()\n+    Traceback (most recent call last):\n+        ...\n+    IndexError: Some of slice indexes is out of range\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 0\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:11]",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r446512504",
            "id": 446512504,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMjUwNA==",
            "original_commit_id": "1bfac00bbb2e07859e5832b6284788e50c44a363",
            "original_line": 453,
            "original_position": 186,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 438689745,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/446512504",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r446512615"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/446512615"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "By analogy with Python types like list this should probably just return an empty list.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-27T10:55:29Z",
            "diff_hunk": "@@ -275,3 +275,194 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_set()\n+    >>> isinstance(b, set)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_frozenset()\n+    >>> isinstance(b, frozenset)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    [25, 36, 49, 64, 81]\n+    [25, 36, 49, 64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    b = <set> a[5:]\n+    assert isinstance(b, set)\n+    print(sorted(b))\n+    b = <frozenset> a[5:]\n+    assert isinstance(b, frozenset)\n+    print(sorted(b))\n+\n+\n+@cython.wraparound(True)\n+def test_coercing_c_slice_out_of_range():\n+    \"\"\"\n+    >>> test_coercing_c_slice_out_of_range()\n+    Traceback (most recent call last):\n+        ...\n+    IndexError: Some of slice indexes is out of range\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 0\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[11:]\n+\n+@cython.wraparound(True)\n+def test_coercing_c_slice_out_of_range_2():\n+    \"\"\"\n+    >>> test_coercing_c_slice_out_of_range_2()\n+    Traceback (most recent call last):\n+        ...\n+    IndexError: Some of slice indexes is out of range\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 0\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:11]\n+\n+@cython.wraparound(True)\n+def test_coercing_c_slice_wrong_range():\n+    \"\"\"\n+    >>> test_coercing_c_slice_wrong_range()\n+    Traceback (most recent call last):\n+        ...\n+    IndexError: Wrong range of slice\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 0\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[3:2]",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r446512615",
            "id": 446512615,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMjYxNQ==",
            "original_commit_id": "1bfac00bbb2e07859e5832b6284788e50c44a363",
            "original_line": 468,
            "original_position": 201,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 438689745,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/446512615",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r446513125"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/446513125"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "yes, python return full array, will fix later",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-06-27T11:02:33Z",
            "diff_hunk": "@@ -275,3 +275,194 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_set()\n+    >>> isinstance(b, set)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_frozenset()\n+    >>> isinstance(b, frozenset)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    [25, 36, 49, 64, 81]\n+    [25, 36, 49, 64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    b = <set> a[5:]\n+    assert isinstance(b, set)\n+    print(sorted(b))\n+    b = <frozenset> a[5:]\n+    assert isinstance(b, frozenset)\n+    print(sorted(b))\n+\n+\n+@cython.wraparound(True)\n+def test_coercing_c_slice_out_of_range():\n+    \"\"\"\n+    >>> test_coercing_c_slice_out_of_range()\n+    Traceback (most recent call last):\n+        ...\n+    IndexError: Some of slice indexes is out of range\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 0\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[11:]\n+\n+@cython.wraparound(True)\n+def test_coercing_c_slice_out_of_range_2():\n+    \"\"\"\n+    >>> test_coercing_c_slice_out_of_range_2()\n+    Traceback (most recent call last):\n+        ...\n+    IndexError: Some of slice indexes is out of range\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 0\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:11]",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r446513125",
            "id": 446513125,
            "in_reply_to_id": 446512504,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMzEyNQ==",
            "original_commit_id": "1bfac00bbb2e07859e5832b6284788e50c44a363",
            "original_line": 453,
            "original_position": 186,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 438690095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/446513125",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448210579"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448210579"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    to_py_func = None\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T08:41:59Z",
            "diff_hunk": "@@ -4825,6 +4825,9 @@ class SliceIndexNode(ExprNode):\n     subexprs = ['base', 'start', 'stop', 'slice']\n \n     slice = None\n+    def __init__(self, pos, **kwds):\n+        self.to_py_func = None\n+        ExprNode.__init__(self, pos, **kwds)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448210579",
            "id": 448210579,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxMDU3OQ==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 4830,
            "original_position": 24,
            "original_start_line": 4828,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 440665840,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448210579",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448212761"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448212761"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                if dst_type in (tuple_type, set_type, frozenset_type, list_type):\r\n                    to_py_obj_type = dst_type.name\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T08:45:48Z",
            "diff_hunk": "@@ -5026,23 +5029,61 @@ def coerce_to(self, dst_type, env):\n                     \"default encoding required for conversion from '%s' to '%s'\" %\n                     (self.base.type, dst_type))\n             self.type = dst_type\n-        if dst_type.is_array and self.base.type.is_array:\n-            if not self.start and not self.stop:\n-                # redundant slice building, copy C arrays directly\n-                return self.base.coerce_to(dst_type, env)\n-            # else: check array size if possible\n+        #elif (self.base.type.is_array or self.base.type.is_ptr) and dst_type.is_pyobject:\n+        elif self.base.type.is_array:\n+            if dst_type.is_pyobject:\n+                if dst_type is tuple_type:\n+                    to_py_obj_type = 'tuple'\n+                elif dst_type is set_type:\n+                    to_py_obj_type = 'set'\n+                elif dst_type is frozenset_type:\n+                    to_py_obj_type = 'frozenset'",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448212761",
            "id": 448212761,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxMjc2MQ==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 5040,
            "original_position": 45,
            "original_start_line": 5035,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 440665840,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448212761",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448213652"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448213652"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a) always true, given the condition further up, and b) too broad since it also allows e.g. `<dict>carray[2:3]` to do nonsense.\r\n```suggestion\r\n                elif dst_type is py_object_type:\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T08:47:24Z",
            "diff_hunk": "@@ -5026,23 +5029,61 @@ def coerce_to(self, dst_type, env):\n                     \"default encoding required for conversion from '%s' to '%s'\" %\n                     (self.base.type, dst_type))\n             self.type = dst_type\n-        if dst_type.is_array and self.base.type.is_array:\n-            if not self.start and not self.stop:\n-                # redundant slice building, copy C arrays directly\n-                return self.base.coerce_to(dst_type, env)\n-            # else: check array size if possible\n+        #elif (self.base.type.is_array or self.base.type.is_ptr) and dst_type.is_pyobject:\n+        elif self.base.type.is_array:\n+            if dst_type.is_pyobject:\n+                if dst_type is tuple_type:\n+                    to_py_obj_type = 'tuple'\n+                elif dst_type is set_type:\n+                    to_py_obj_type = 'set'\n+                elif dst_type is frozenset_type:\n+                    to_py_obj_type = 'frozenset'\n+                elif dst_type.is_pyobject:",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448213652",
            "id": 448213652,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxMzY1Mg==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 5041,
            "original_position": 46,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 440665840,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448213652",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448215481"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448215481"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                to_py_func_cname = \"__Pyx_slice_carray_%s_to_py_%s\" % (\r\n                    self.base.type.specialization_name(),\r\n                    to_py_obj_type)\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T08:50:30Z",
            "diff_hunk": "@@ -5026,23 +5029,61 @@ def coerce_to(self, dst_type, env):\n                     \"default encoding required for conversion from '%s' to '%s'\" %\n                     (self.base.type, dst_type))\n             self.type = dst_type\n-        if dst_type.is_array and self.base.type.is_array:\n-            if not self.start and not self.stop:\n-                # redundant slice building, copy C arrays directly\n-                return self.base.coerce_to(dst_type, env)\n-            # else: check array size if possible\n+        #elif (self.base.type.is_array or self.base.type.is_ptr) and dst_type.is_pyobject:\n+        elif self.base.type.is_array:\n+            if dst_type.is_pyobject:\n+                if dst_type is tuple_type:\n+                    to_py_obj_type = 'tuple'\n+                elif dst_type is set_type:\n+                    to_py_obj_type = 'set'\n+                elif dst_type is frozenset_type:\n+                    to_py_obj_type = 'frozenset'\n+                elif dst_type.is_pyobject:\n+                    to_py_obj_type = 'list'\n+                else:\n+                    error(self.pos,\n+                          \"Cannot convert slice of C array to '%s'\" % dst_type)\n+\n+                self.type = dst_type\n+                to_py_func_cname = \"__Pyx_slice_carray_%s_to_py_%s\" % (\n+                                        self.base.type.specialization_name(),\n+                                        to_py_obj_type)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448215481",
            "id": 448215481,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNTQ4MQ==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 5050,
            "original_position": 55,
            "original_start_line": 5048,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 440665840,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448215481",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448216789"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448216789"
                }
            },
            "author_association": "MEMBER",
            "body": "Directives are inherited by scopes, no need to ask for the global ones here.\r\n```suggestion\r\n                util_compiler_directives = {\r\n                    'c_string_encoding': env.directives['c_string_encoding'],\r\n                    'c_string_type': env.directives['c_string_type']\r\n                }\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T08:52:43Z",
            "diff_hunk": "@@ -5026,23 +5029,61 @@ def coerce_to(self, dst_type, env):\n                     \"default encoding required for conversion from '%s' to '%s'\" %\n                     (self.base.type, dst_type))\n             self.type = dst_type\n-        if dst_type.is_array and self.base.type.is_array:\n-            if not self.start and not self.stop:\n-                # redundant slice building, copy C arrays directly\n-                return self.base.coerce_to(dst_type, env)\n-            # else: check array size if possible\n+        #elif (self.base.type.is_array or self.base.type.is_ptr) and dst_type.is_pyobject:\n+        elif self.base.type.is_array:\n+            if dst_type.is_pyobject:\n+                if dst_type is tuple_type:\n+                    to_py_obj_type = 'tuple'\n+                elif dst_type is set_type:\n+                    to_py_obj_type = 'set'\n+                elif dst_type is frozenset_type:\n+                    to_py_obj_type = 'frozenset'\n+                elif dst_type.is_pyobject:\n+                    to_py_obj_type = 'list'\n+                else:\n+                    error(self.pos,\n+                          \"Cannot convert slice of C array to '%s'\" % dst_type)\n+\n+                self.type = dst_type\n+                to_py_func_cname = \"__Pyx_slice_carray_%s_to_py_%s\" % (\n+                                        self.base.type.specialization_name(),\n+                                        to_py_obj_type)\n+\n+                context = {\n+                    'cname': to_py_func_cname,\n+                    'base_type': self.base.type.base_type,\n+                    'to_py_obj_type': to_py_obj_type\n+                }\n+\n+                glob_directiv = env.global_scope().directives\n+                util_compiler_directives = {\n+                    'c_string_encoding': glob_directiv['c_string_encoding'],\n+                    'c_string_type': glob_directiv['c_string_type']\n+                    }",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448216789",
            "id": 448216789,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNjc4OQ==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 5108,
            "original_position": 67,
            "original_start_line": 5058,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 440665840,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448216789",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448220958"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448220958"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think this is currently covered anywhere, or is it? We should still disallow everything that we cannot support – although arguably at an earlier time than code generation, but it's still a good safety belt to do it again here.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T08:59:55Z",
            "diff_hunk": "@@ -5026,23 +5029,61 @@ def coerce_to(self, dst_type, env):\n                     \"default encoding required for conversion from '%s' to '%s'\" %\n                     (self.base.type, dst_type))\n             self.type = dst_type\n-        if dst_type.is_array and self.base.type.is_array:\n-            if not self.start and not self.stop:\n-                # redundant slice building, copy C arrays directly\n-                return self.base.coerce_to(dst_type, env)\n-            # else: check array size if possible\n+        #elif (self.base.type.is_array or self.base.type.is_ptr) and dst_type.is_pyobject:\n+        elif self.base.type.is_array:\n+            if dst_type.is_pyobject:\n+                if dst_type is tuple_type:\n+                    to_py_obj_type = 'tuple'\n+                elif dst_type is set_type:\n+                    to_py_obj_type = 'set'\n+                elif dst_type is frozenset_type:\n+                    to_py_obj_type = 'frozenset'\n+                elif dst_type.is_pyobject:\n+                    to_py_obj_type = 'list'\n+                else:\n+                    error(self.pos,\n+                          \"Cannot convert slice of C array to '%s'\" % dst_type)\n+\n+                self.type = dst_type\n+                to_py_func_cname = \"__Pyx_slice_carray_%s_to_py_%s\" % (\n+                                        self.base.type.specialization_name(),\n+                                        to_py_obj_type)\n+\n+                context = {\n+                    'cname': to_py_func_cname,\n+                    'base_type': self.base.type.base_type,\n+                    'to_py_obj_type': to_py_obj_type\n+                }\n+\n+                glob_directiv = env.global_scope().directives\n+                util_compiler_directives = {\n+                    'c_string_encoding': glob_directiv['c_string_encoding'],\n+                    'c_string_type': glob_directiv['c_string_type']\n+                    }\n+\n+                from .UtilityCode import CythonUtilityCode\n+                env.use_utility_code(CythonUtilityCode.load(\n+                    \"c_array_slice.to_py\", \"CConvert.pyx\",\n+                    outer_module_scope=env.global_scope(),  # need access to types declared in module\n+                    context=context, compiler_directives=util_compiler_directives))\n+\n+                self.to_py_func = to_py_func_cname\n+                return self\n+            elif dst_type.is_array:\n+                if not self.start and not self.stop:\n+                    # redundant slice building, copy C arrays directly\n+                    return self.base.coerce_to(dst_type, env)\n+                # else: check array size if possible\n+\n         return super(SliceIndexNode, self).coerce_to(dst_type, env)\n \n     def generate_result_code(self, code):\n-        if not self.type.is_pyobject:\n-            error(self.pos,\n-                  \"Slicing is not currently supported for '%s'.\" % self.type)\n-            return",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448220958",
            "id": 448220958,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMDk1OA==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 5090,
            "original_position": 89,
            "original_start_line": 5037,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 440665840,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "LEFT",
            "start_line": null,
            "start_side": "LEFT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448220958",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448222552"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448222552"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we make sure anywhere that we know the size of the array? C permits arrays to be declared without a size.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T09:02:36Z",
            "diff_hunk": "@@ -5100,6 +5141,21 @@ def generate_result_code(self, code):\n                     start_code,\n                     stop_code,\n                     code.error_goto_if_null(result, self.pos)))\n+        elif self.base.type.is_array:\n+            if self.to_py_func:\n+                code.putln('%s = %s(%s, %s, %s, %s, %d, %d); %s' % (\n+                    result,\n+                    self.to_py_func,\n+                    base_result,\n+                    self.base.type.size,",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448222552",
            "id": 448222552,
            "line": 5199,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMjU1Mg==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 5199,
            "original_position": 110,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 92,
            "pull_request_review_id": 440665840,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448222552",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448224397"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448224397"
                }
            },
            "author_association": "MEMBER",
            "body": "This condition looks fishy. Can we really always do the coercion whenever we find a `SliceIndexNode`? Does it no longer depend on the operand type in that case?",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T09:05:54Z",
            "diff_hunk": "@@ -10446,13 +10502,14 @@ def analyse_types(self, env):\n             return self.operand.coerce_to_boolean(env)\n         to_py = self.type.is_pyobject\n         from_py = self.operand.type.is_pyobject\n+\n         if from_py and not to_py and self.operand.is_ephemeral():\n             if not self.type.is_numeric and not self.type.is_cpp_class:\n                 error(self.pos, \"Casting temporary Python object to non-numeric non-Python type\")\n         if to_py and not from_py:\n             if self.type is bytes_type and self.operand.type.is_int:\n                 return CoerceIntToBytesNode(self.operand, env)\n-            elif self.operand.type.can_coerce_to_pyobject(env):\n+            elif self.operand.type.can_coerce_to_pyobject(env) or isinstance(self.operand, SliceIndexNode):",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448224397",
            "id": 448224397,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDM5Nw==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 10512,
            "original_position": 134,
            "original_start_line": 10509,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 440665840,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448224397",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448225875"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448225875"
                }
            },
            "author_association": "MEMBER",
            "body": "I would move this line down into the list/tuple cases and only do it when needed, i.e. not for the `set` case.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T09:08:32Z",
            "diff_hunk": "@@ -130,3 +130,74 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    void Py_DECREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+    int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    set PySet_New(void *)\n+    int PySet_Add(object p, object o) except -1\n+\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    cdef Py_ssize_t i, length = 0\n+\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck:\n+        if from_idx > to_idx:\n+             from_idx = to_idx\n+        else:\n+            if from_idx < 0:\n+                from_idx = 0\n+\n+            if to_idx > arr_size:\n+                to_idx = arr_size\n+\n+    length = to_idx - from_idx\n+\n+    {{if to_py_obj_type == 'list'}}\n+    l = PyList_New(length)\n+    {{elif to_py_obj_type == 'tuple' or to_py_obj_type == 'frozenset'}}\n+    l = PyTuple_New(length)\n+    {{elif to_py_obj_type == 'set'}}\n+    l = PySet_New(NULL)\n+    {{endif}}\n+\n+    cdef object value\n+    if length > 0:\n+        for i in range(<size_t> from_idx, <size_t> to_idx):\n+            value = arr[i]\n+            Py_INCREF(value)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448225875",
            "id": 448225875,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNTg3NQ==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 187,
            "original_position": 58,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 440665840,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448225875",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448226941"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448226941"
                }
            },
            "author_association": "MEMBER",
            "body": "You are mixing signed (`i`) and unsigned types here. That's rarely a good idea in C. Just use `Py_ssize_t` for everything.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T09:10:29Z",
            "diff_hunk": "@@ -130,3 +130,74 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    void Py_DECREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+    int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    set PySet_New(void *)\n+    int PySet_Add(object p, object o) except -1\n+\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    cdef Py_ssize_t i, length = 0\n+\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck:\n+        if from_idx > to_idx:\n+             from_idx = to_idx\n+        else:\n+            if from_idx < 0:\n+                from_idx = 0\n+\n+            if to_idx > arr_size:\n+                to_idx = arr_size\n+\n+    length = to_idx - from_idx\n+\n+    {{if to_py_obj_type == 'list'}}\n+    l = PyList_New(length)\n+    {{elif to_py_obj_type == 'tuple' or to_py_obj_type == 'frozenset'}}\n+    l = PyTuple_New(length)\n+    {{elif to_py_obj_type == 'set'}}\n+    l = PySet_New(NULL)\n+    {{endif}}\n+\n+    cdef object value\n+    if length > 0:\n+        for i in range(<size_t> from_idx, <size_t> to_idx):",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448226941",
            "id": 448226941,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNjk0MQ==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 185,
            "original_position": 56,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 440665840,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448226941",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448227888"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448227888"
                }
            },
            "author_association": "MEMBER",
            "body": "> Although it does feel dodgy to index off the end of an array.\r\n\r\nIt's ok for the non-constant case.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T09:12:02Z",
            "diff_hunk": "@@ -275,3 +275,194 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_set()\n+    >>> isinstance(b, set)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_frozenset()\n+    >>> isinstance(b, frozenset)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    [25, 36, 49, 64, 81]\n+    [25, 36, 49, 64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    b = <set> a[5:]\n+    assert isinstance(b, set)\n+    print(sorted(b))\n+    b = <frozenset> a[5:]\n+    assert isinstance(b, frozenset)\n+    print(sorted(b))\n+\n+\n+@cython.wraparound(True)\n+def test_coercing_c_slice_out_of_range():\n+    \"\"\"\n+    >>> test_coercing_c_slice_out_of_range()\n+    Traceback (most recent call last):\n+        ...\n+    IndexError: Some of slice indexes is out of range\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 0\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[11:]\n+\n+@cython.wraparound(True)\n+def test_coercing_c_slice_out_of_range_2():\n+    \"\"\"\n+    >>> test_coercing_c_slice_out_of_range_2()\n+    Traceback (most recent call last):\n+        ...\n+    IndexError: Some of slice indexes is out of range\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 0\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:11]",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448227888",
            "id": 448227888,
            "in_reply_to_id": 446512504,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNzg4OA==",
            "original_commit_id": "1bfac00bbb2e07859e5832b6284788e50c44a363",
            "original_line": 453,
            "original_position": 186,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 440665840,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448227888",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448231145"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448231145"
                }
            },
            "author_association": "MEMBER",
            "body": "There is no guarantee that this makes `from_idx` and `to_idx` >= 0. What if `to_idx` is -2000 for an array of size 5? Then it's still negative after the wrap-around above, and so will be `from_idx`.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T09:17:50Z",
            "diff_hunk": "@@ -130,3 +130,74 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    void Py_DECREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+    int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    set PySet_New(void *)\n+    int PySet_Add(object p, object o) except -1\n+\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    cdef Py_ssize_t i, length = 0\n+\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck:\n+        if from_idx > to_idx:\n+             from_idx = to_idx",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448231145",
            "id": 448231145,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMTE0NQ==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 165,
            "original_position": 36,
            "original_start_line": 163,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 440693070,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448231145",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448231697"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448231697"
                }
            },
            "author_association": "MEMBER",
            "body": "Unused?",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T09:18:44Z",
            "diff_hunk": "@@ -130,3 +130,74 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    void Py_DECREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+    int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448231697",
            "id": 448231697,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMTY5Nw==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 140,
            "original_position": 11,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 440693070,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448231697",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448233707"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448233707"
                }
            },
            "author_association": "MEMBER",
            "body": "Since this setting is the default, it doesn't add anything to the test. However, neither `@wraparound(False)` nor `@boundscheck(False)` nor both together are tested.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T09:22:10Z",
            "diff_hunk": "@@ -275,3 +275,186 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_set()\n+    >>> isinstance(b, set)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_frozenset()\n+    >>> isinstance(b, frozenset)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    [25, 36, 49, 64, 81]\n+    [25, 36, 49, 64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    b = <set> a[5:]\n+    assert isinstance(b, set)\n+    print(sorted(b))\n+    b = <frozenset> a[5:]\n+    assert isinstance(b, frozenset)\n+    print(sorted(b))\n+\n+\n+@cython.wraparound(True)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448233707",
            "id": 448233707,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMzcwNw==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 425,
            "original_position": 158,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": null,
            "pull_request_review_id": 440693070,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448233707",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r448238537"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/448238537"
                }
            },
            "author_association": "MEMBER",
            "body": "You could also just declare `__Pyx_PyFrozenSet_New(PyObject* it)` and call it as `__Pyx_PyFrozenSet_New(NULL)`. It seems to support that. (You would then have to call `use_utility_code()` for the `pyfrozenset_new` utility in the `frozenset` case.)",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-01T09:30:45Z",
            "diff_hunk": "@@ -130,3 +130,69 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r448238537",
            "id": 448238537,
            "in_reply_to_id": 443249120,
            "line": 136,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzODUzNw==",
            "original_commit_id": "e35e2f1bc12696bedaa577d7a7c761bd2e874195",
            "original_line": 136,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": 5,
            "pull_request_review_id": 440693070,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/448238537",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r449866440"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/449866440"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```\r\nelif self.base.type.is_array:\r\n...\r\n```\r\nmeans that it is carray (CArrayType) which has required parameter size. \r\n(init function of CArrayType)\r\n```\r\n def __init__(self, base_type, size): \r\n super(CArrayType, self).__init__(base_type) \r\n self.size = size \r\n```\r\nand value of this parameter became value of attribute self.base.type.size. So self.base.type.size must be valid.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-05T11:26:41Z",
            "diff_hunk": "@@ -5100,6 +5141,21 @@ def generate_result_code(self, code):\n                     start_code,\n                     stop_code,\n                     code.error_goto_if_null(result, self.pos)))\n+        elif self.base.type.is_array:\n+            if self.to_py_func:\n+                code.putln('%s = %s(%s, %s, %s, %s, %d, %d); %s' % (\n+                    result,\n+                    self.to_py_func,\n+                    base_result,\n+                    self.base.type.size,",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r449866440",
            "id": 449866440,
            "in_reply_to_id": 448222552,
            "line": 5199,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg2NjQ0MA==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 5199,
            "original_position": 110,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 92,
            "pull_request_review_id": 442668990,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/449866440",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r449887497"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/449887497"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Additional condition has been added",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-05T15:03:44Z",
            "diff_hunk": "@@ -10446,13 +10502,14 @@ def analyse_types(self, env):\n             return self.operand.coerce_to_boolean(env)\n         to_py = self.type.is_pyobject\n         from_py = self.operand.type.is_pyobject\n+\n         if from_py and not to_py and self.operand.is_ephemeral():\n             if not self.type.is_numeric and not self.type.is_cpp_class:\n                 error(self.pos, \"Casting temporary Python object to non-numeric non-Python type\")\n         if to_py and not from_py:\n             if self.type is bytes_type and self.operand.type.is_int:\n                 return CoerceIntToBytesNode(self.operand, env)\n-            elif self.operand.type.can_coerce_to_pyobject(env):\n+            elif self.operand.type.can_coerce_to_pyobject(env) or isinstance(self.operand, SliceIndexNode):",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r449887497",
            "id": 449887497,
            "in_reply_to_id": 448224397,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg4NzQ5Nw==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 10512,
            "original_position": 134,
            "original_start_line": 10509,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 442684780,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/449887497",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r449887669"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/449887669"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I did \r\n```\r\nfrom_idx = to_idx = 0\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-05T15:05:22Z",
            "diff_hunk": "@@ -130,3 +130,74 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    void Py_DECREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+    int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    set PySet_New(void *)\n+    int PySet_Add(object p, object o) except -1\n+\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    cdef Py_ssize_t i, length = 0\n+\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck:\n+        if from_idx > to_idx:\n+             from_idx = to_idx",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r449887669",
            "id": 449887669,
            "in_reply_to_id": 448231145,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg4NzY2OQ==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 165,
            "original_position": 36,
            "original_start_line": 163,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 442684901,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/449887669",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r449887688"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/449887688"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "removed",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-07-05T15:05:37Z",
            "diff_hunk": "@@ -130,3 +130,74 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    void Py_DECREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+    int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r449887688",
            "id": 449887688,
            "in_reply_to_id": 448231697,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg4NzY4OA==",
            "original_commit_id": "40d4a60719f9aa92202feecc2b104c80a4b3375b",
            "original_line": 140,
            "original_position": 11,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 442684917,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/449887688",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r493250679"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/493250679"
                }
            },
            "author_association": "MEMBER",
            "body": "Just to be safe:\r\n```suggestion\r\n    {{else}}\r\n        {{py: assert False, \"Invalid target type for C array conversion: %r\" % to_py_obj_type\"}}\r\n    {{endif}}\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-09-23T07:17:49Z",
            "diff_hunk": "@@ -132,3 +132,79 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    void Py_DECREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    frozenset __Pyx_PyFrozenSet_New(object)\n+    set PySet_New(void *)\n+    int PySet_Add(object p, object o) except -1\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    cdef Py_ssize_t i, length = 0\n+\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck:\n+        if from_idx > to_idx:\n+             from_idx = to_idx = 0\n+        else:\n+            if from_idx < 0:\n+                from_idx = 0\n+\n+            if to_idx > arr_size:\n+                to_idx = arr_size\n+\n+    length = to_idx - from_idx\n+\n+    {{if to_py_obj_type == 'list'}}\n+    l = PyList_New(length)\n+    {{elif to_py_obj_type == 'tuple'}}\n+    l = PyTuple_New(length)\n+\n+    # The PySet_New is used for creating frozenset,\n+    # since PyFrozenSet_New has a bug with PySet_Add in PyPy.\n+    #\n+    # __Pyx_PyFrozenSet_New(NULL) doesn't work for this goal,\n+    # since it returns immutable frozenset-singleton.\n+    {{elif to_py_obj_type == 'set' or to_py_obj_type == 'frozenset'}}\n+    l = PySet_New(NULL)\n+    {{endif}}",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r493250679",
            "id": 493250679,
            "line": 190,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MDY3OQ==",
            "original_commit_id": "b44aa8afa775bae543cd6034799190e493edd1bc",
            "original_line": 190,
            "original_position": 57,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": 59,
            "pull_request_review_id": 494329137,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/493250679",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r493251608"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/493251608"
                }
            },
            "author_association": "MEMBER",
            "body": "These are typed already.\r\n```suggestion\r\n        for i in range(from_idx, to_idx):\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-09-23T07:19:28Z",
            "diff_hunk": "@@ -132,3 +132,79 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    void Py_DECREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    frozenset __Pyx_PyFrozenSet_New(object)\n+    set PySet_New(void *)\n+    int PySet_Add(object p, object o) except -1\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    cdef Py_ssize_t i, length = 0\n+\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck:\n+        if from_idx > to_idx:\n+             from_idx = to_idx = 0\n+        else:\n+            if from_idx < 0:\n+                from_idx = 0\n+\n+            if to_idx > arr_size:\n+                to_idx = arr_size\n+\n+    length = to_idx - from_idx\n+\n+    {{if to_py_obj_type == 'list'}}\n+    l = PyList_New(length)\n+    {{elif to_py_obj_type == 'tuple'}}\n+    l = PyTuple_New(length)\n+\n+    # The PySet_New is used for creating frozenset,\n+    # since PyFrozenSet_New has a bug with PySet_Add in PyPy.\n+    #\n+    # __Pyx_PyFrozenSet_New(NULL) doesn't work for this goal,\n+    # since it returns immutable frozenset-singleton.\n+    {{elif to_py_obj_type == 'set' or to_py_obj_type == 'frozenset'}}\n+    l = PySet_New(NULL)\n+    {{endif}}\n+\n+    cdef object value\n+    if length > 0:\n+        for i in range(<Py_ssize_t> from_idx, <Py_ssize_t> to_idx):",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r493251608",
            "id": 493251608,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MTYwOA==",
            "original_commit_id": "b44aa8afa775bae543cd6034799190e493edd1bc",
            "original_line": 192,
            "original_position": 61,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 494329137,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/493251608",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r493256644"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/493256644"
                }
            },
            "author_association": "MEMBER",
            "body": "Please also test with `PY_SSIZE_T_MIN` and `PY_SSIZE_T_MAX` as boundary indices (`cdef extern from *`). See, for example, the [unicode_slicing](https://github.com/cython/cython/blob/master/tests/run/unicode_slicing.pyx) tests. Code like `length = to_idx - from_idx` may overflow in C for sufficiently large negative values.",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-09-23T07:27:59Z",
            "diff_hunk": "@@ -275,3 +275,185 @@ def struct_ptr_iter():\n     return ([ value.i for value in my_structs[:5] ],\n             [ ptr.i for ptr in my_structs[:5] ],\n             [ inferred.i for inferred in my_structs[:5] ])\n+\n+############################################################\n+# tests for coercing slice of c-array to python list\n+\n+def test_coercing_c_slice_to_py_start_end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_start_end()\n+    [4, 9]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[2:4]\n+\n+def test_coercing_c_slice_to_py__end():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py__end()\n+    [0, 1]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[:2]\n+\n+\n+def test_coercing_c_slice_to_py_from_():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_py_from_()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+cpdef test_coercing_c_slice_in_cpedef_list():\n+    \"\"\"\n+    >>> test_coercing_c_slice_in_cpedef_list()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_c_to_py_coercing_array_in_var():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+cpdef test_c_to_py_coercing_array_in_var_2():\n+    \"\"\"\n+    >>> test_c_to_py_coercing_array_in_var_2()\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    b = 5555\n+    for i in range(10):\n+        a[i] = i**2\n+    b = a[8:]\n+    return b\n+\n+\n+cpdef tuple test_coercing_c_slice_to_tuple():\n+    \"\"\"\n+    >>> test_coercing_c_slice_to_tuple()\n+    (64, 81)\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef set test_coercing_c_slice_to_set():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_set()\n+    >>> isinstance(b, set)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+cpdef frozenset test_coercing_c_slice_to_frozenset():\n+    \"\"\"\n+    >>> b = test_coercing_c_slice_to_frozenset()\n+    >>> isinstance(b, frozenset)\n+    True\n+    >>> b = list(b)\n+    >>> b.sort()\n+    >>> b\n+    [64, 81]\n+    \"\"\"\n+\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+    return a[8:]\n+\n+\n+def test_coercing_c_slice_by_casting():\n+    \"\"\"\n+    >>> test_coercing_c_slice_by_casting()\n+    [25, 36, 49, 64, 81]\n+    (25, 36, 49, 64, 81)\n+    [25, 36, 49, 64, 81]\n+    [25, 36, 49, 64, 81]\n+    \"\"\"\n+    cdef int i\n+    cdef int a[10]\n+    for i in range(10):\n+        a[i] = i**2\n+\n+    print(<list> a[5:])\n+    print(<tuple> a[5:])\n+    b = <set> a[5:]\n+    assert isinstance(b, set)\n+    print(sorted(b))\n+    b = <frozenset> a[5:]\n+    assert isinstance(b, frozenset)\n+    print(sorted(b))\n+\n+\n+def test_coercing_c_slice_out_of_range():",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r493256644",
            "id": 493256644,
            "line": 432,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1NjY0NA==",
            "original_commit_id": "b44aa8afa775bae543cd6034799190e493edd1bc",
            "original_line": 432,
            "original_position": 158,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": 165,
            "pull_request_review_id": 494329137,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/493256644",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r493271007"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/493271007"
                }
            },
            "author_association": "MEMBER",
            "body": "Could you rename this to `container`? `l` tends to look a lot like `1` or `I` in some fonts and is generally difficult to spot as a single character variable name, which makes the code less easy to read.\r\n( `i` as an integer loop index variable is good since it plays in a different league.)",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-09-23T07:50:34Z",
            "diff_hunk": "@@ -132,3 +132,79 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    void Py_DECREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    frozenset __Pyx_PyFrozenSet_New(object)\n+    set PySet_New(void *)\n+    int PySet_Add(object p, object o) except -1\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    cdef Py_ssize_t i, length = 0\n+\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck:\n+        if from_idx > to_idx:\n+             from_idx = to_idx = 0\n+        else:\n+            if from_idx < 0:\n+                from_idx = 0\n+\n+            if to_idx > arr_size:\n+                to_idx = arr_size\n+\n+    length = to_idx - from_idx\n+\n+    {{if to_py_obj_type == 'list'}}\n+    l = PyList_New(length)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r493271007",
            "id": 493271007,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3MTAwNw==",
            "original_commit_id": "b44aa8afa775bae543cd6034799190e493edd1bc",
            "original_line": 177,
            "original_position": 46,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 494329137,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/493271007",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r493453337"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/493453337"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "ok",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-09-23T11:01:45Z",
            "diff_hunk": "@@ -132,3 +132,79 @@ cdef inline tuple {{to_tuple_cname}}({{base_type}} *v, Py_ssize_t length):\n         Py_INCREF(value)\n         PyTuple_SET_ITEM(t, i, value)\n     return t\n+\n+#################### c_array_slice.to_py ####################\n+\n+cdef extern from *:\n+    void Py_INCREF(object o)\n+    void Py_DECREF(object o)\n+    object PyErr_Format(exc, const char *format, ...)\n+\n+    list PyList_New(Py_ssize_t size)\n+    void PyList_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    tuple PyTuple_New(Py_ssize_t size)\n+    void PyTuple_SET_ITEM(object p, Py_ssize_t pos, object o)\n+\n+    frozenset __Pyx_PyFrozenSet_New(object)\n+    set PySet_New(void *)\n+    int PySet_Add(object p, object o) except -1\n+\n+@cname(\"{{cname}}\")\n+cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size, Py_ssize_t from_idx, Py_ssize_t to_idx, int wraparound, int boundscheck):\n+    cdef Py_ssize_t i, length = 0\n+\n+    if wraparound:\n+        if from_idx < 0: \n+            from_idx += arr_size\n+\n+        if to_idx < 0: \n+            to_idx += arr_size\n+\n+    if boundscheck:\n+        if from_idx > to_idx:\n+             from_idx = to_idx = 0\n+        else:\n+            if from_idx < 0:\n+                from_idx = 0\n+\n+            if to_idx > arr_size:\n+                to_idx = arr_size\n+\n+    length = to_idx - from_idx\n+\n+    {{if to_py_obj_type == 'list'}}\n+    l = PyList_New(length)",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r493453337",
            "id": 493453337,
            "in_reply_to_id": 493271007,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1MzMzNw==",
            "original_commit_id": "b44aa8afa775bae543cd6034799190e493edd1bc",
            "original_line": 177,
            "original_position": 46,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 494540761,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/493453337",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r493751474"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/493751474"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if from_idx >= to_idx:\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-09-23T17:04:44Z",
            "diff_hunk": "@@ -162,7 +162,7 @@ cdef inline {{to_py_obj_type}} {{cname}}({{base_type}} *arr, Py_ssize_t arr_size\n             to_idx += arr_size\n \n     if boundscheck:\n-        if from_idx > to_idx:\n+        if from_idx > to_idx or from_idx == to_idx:",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r493751474",
            "id": 493751474,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1MTQ3NA==",
            "original_commit_id": "01a56e3c072b10c76c914ddb7144d29c476506f0",
            "original_line": 165,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Utility/CConvert.pyx",
            "position": null,
            "pull_request_review_id": 494869694,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/493751474",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r493751762"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/493751762"
                }
            },
            "author_association": "MEMBER",
            "body": "Some more tests:\r\n```suggestion\r\n    b = a[SSIZE_T_MIN:SSIZE_T_MAX]\r\n    print(b)\r\n\r\n    b = a[SSIZE_T_MAX:SSIZE_T_MIN]\r\n    assert len(b) == 0\r\n\r\n    b = a[SSIZE_T_MAX:]\r\n    assert len(b) == 0\r\n\r\n    b = a[SSIZE_T_MAX:None]\r\n    assert len(b) == 0\r\n\r\n    b = a[:SSIZE_T_MIN]\r\n    assert len(b) == 0\r\n\r\n    b = a[None:SSIZE_T_MIN]\r\n    assert len(b) == 0\r\n\r\n    b = a[:]\r\n    print(b)\r\n\r\n```",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-09-23T17:05:12Z",
            "diff_hunk": "@@ -452,6 +462,15 @@ def test_coercing_c_slice_out_of_range():\n     b = a[-100:100]\n     print(b)\n \n+    b = a[:SSIZE_T_MAX]\n+    print(b)\n+\n+    b = a[SSIZE_T_MIN:]\n+    print(b)\n+\n+    b = a[SSIZE_T_MIN:SSIZE_T_MAX]\n+    print(b)\n+",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r493751762",
            "id": 493751762,
            "line": 498,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1MTc2Mg==",
            "original_commit_id": "b9378b3d13eb85005d95b51af8388b7269dc4b37",
            "original_line": 498,
            "original_position": 36,
            "original_start_line": 471,
            "path": "tests/run/carray_slicing.pyx",
            "position": 231,
            "pull_request_review_id": 494870040,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": 496,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/493751762",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3151#discussion_r493757224"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/493757224"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "ok",
            "commit_id": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "created_at": "2020-09-23T17:14:21Z",
            "diff_hunk": "@@ -452,6 +462,15 @@ def test_coercing_c_slice_out_of_range():\n     b = a[-100:100]\n     print(b)\n \n+    b = a[:SSIZE_T_MAX]\n+    print(b)\n+\n+    b = a[SSIZE_T_MIN:]\n+    print(b)\n+\n+    b = a[SSIZE_T_MIN:SSIZE_T_MAX]\n+    print(b)\n+",
            "html_url": "https://github.com/cython/cython/pull/3151#discussion_r493757224",
            "id": 493757224,
            "in_reply_to_id": 493751762,
            "line": 498,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1NzIyNA==",
            "original_commit_id": "b9378b3d13eb85005d95b51af8388b7269dc4b37",
            "original_line": 498,
            "original_position": 36,
            "original_start_line": 471,
            "path": "tests/run/carray_slicing.pyx",
            "position": 231,
            "pull_request_review_id": 494877160,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3151",
            "side": "RIGHT",
            "start_line": 496,
            "start_side": "RIGHT",
            "updated_at": "2020-09-26T21:27:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/493757224",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3151/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fb275a01b5633eb73c6276f14183504390461d97/comments",
            "commit": {
                "author": {
                    "date": "2020-09-26T20:41:19Z",
                    "email": "dmitro.gedz@gmail.com",
                    "name": "demiurg337"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-26T20:41:19Z",
                    "email": "dmitro.gedz@gmail.com",
                    "name": "demiurg337"
                },
                "message": "Tests for checking of coercing sliced c-array to python objects",
                "tree": {
                    "sha": "a1558d964c9851c2397442907d68344df4ef3168",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a1558d964c9851c2397442907d68344df4ef3168"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fb275a01b5633eb73c6276f14183504390461d97",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            },
            "html_url": "https://github.com/cython/cython/commit/fb275a01b5633eb73c6276f14183504390461d97",
            "node_id": "MDY6Q29tbWl0MjAwODQzMjEwOmZiMjc1YTAxYjU2MzNlYjczYzYyNzZmMTQxODM1MDQzOTA0NjFkOTc=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/246a4b97f1322415351c2b3109560add8e3820e4",
                    "sha": "246a4b97f1322415351c2b3109560add8e3820e4",
                    "url": "https://api.github.com/repos/cython/cython/commits/246a4b97f1322415351c2b3109560add8e3820e4"
                }
            ],
            "sha": "fb275a01b5633eb73c6276f14183504390461d97",
            "url": "https://api.github.com/repos/cython/cython/commits/fb275a01b5633eb73c6276f14183504390461d97"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d3ad61e1c8baebcbdcf1c2976a3431d34c005724/comments",
            "commit": {
                "author": {
                    "date": "2020-09-26T21:08:53Z",
                    "email": "dmitro.gedz@gmail.com",
                    "name": "demiurg337"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-26T21:08:53Z",
                    "email": "dmitro.gedz@gmail.com",
                    "name": "demiurg337"
                },
                "message": "Test for auto encoding of sliced c-string",
                "tree": {
                    "sha": "ef07f4744eed733b7ae065b1afa65c0bafafeb26",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ef07f4744eed733b7ae065b1afa65c0bafafeb26"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d3ad61e1c8baebcbdcf1c2976a3431d34c005724",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            },
            "html_url": "https://github.com/cython/cython/commit/d3ad61e1c8baebcbdcf1c2976a3431d34c005724",
            "node_id": "MDY6Q29tbWl0MjAwODQzMjEwOmQzYWQ2MWUxYzhiYWViY2JkY2YxYzI5NzZhMzQzMWQzNGMwMDU3MjQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fb275a01b5633eb73c6276f14183504390461d97",
                    "sha": "fb275a01b5633eb73c6276f14183504390461d97",
                    "url": "https://api.github.com/repos/cython/cython/commits/fb275a01b5633eb73c6276f14183504390461d97"
                }
            ],
            "sha": "d3ad61e1c8baebcbdcf1c2976a3431d34c005724",
            "url": "https://api.github.com/repos/cython/cython/commits/d3ad61e1c8baebcbdcf1c2976a3431d34c005724"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c5a91c40a5142c7a05c9ce7171f72fb8d8a3211f/comments",
            "commit": {
                "author": {
                    "date": "2020-09-26T21:12:22Z",
                    "email": "dmitro.gedz@gmail.com",
                    "name": "demiurg337"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-26T21:12:22Z",
                    "email": "dmitro.gedz@gmail.com",
                    "name": "demiurg337"
                },
                "message": "Add coercing of slice of c-array to Python objects",
                "tree": {
                    "sha": "f830d8ccaa9a7c92c65e29372e107c19ac9a775f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f830d8ccaa9a7c92c65e29372e107c19ac9a775f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c5a91c40a5142c7a05c9ce7171f72fb8d8a3211f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            },
            "html_url": "https://github.com/cython/cython/commit/c5a91c40a5142c7a05c9ce7171f72fb8d8a3211f",
            "node_id": "MDY6Q29tbWl0MjAwODQzMjEwOmM1YTkxYzQwYTUxNDJjN2EwNWM5Y2U3MTcxZjcyZmI4ZDhhMzIxMWY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d3ad61e1c8baebcbdcf1c2976a3431d34c005724",
                    "sha": "d3ad61e1c8baebcbdcf1c2976a3431d34c005724",
                    "url": "https://api.github.com/repos/cython/cython/commits/d3ad61e1c8baebcbdcf1c2976a3431d34c005724"
                }
            ],
            "sha": "c5a91c40a5142c7a05c9ce7171f72fb8d8a3211f",
            "url": "https://api.github.com/repos/cython/cython/commits/c5a91c40a5142c7a05c9ce7171f72fb8d8a3211f"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/795c7bc666949571b2a38ca1c90e0256468a7d4a/comments",
            "commit": {
                "author": {
                    "date": "2020-09-26T21:26:05Z",
                    "email": "dmitro.gedz@gmail.com",
                    "name": "demiurg337"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-09-26T21:26:05Z",
                    "email": "dmitro.gedz@gmail.com",
                    "name": "demiurg337"
                },
                "message": "Activate ability to casting of slice of c-array to Python objects",
                "tree": {
                    "sha": "365e96e12dc31d8bf859f6ecc2b38565fdc58a07",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/365e96e12dc31d8bf859f6ecc2b38565fdc58a07"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/795c7bc666949571b2a38ca1c90e0256468a7d4a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            },
            "html_url": "https://github.com/cython/cython/commit/795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "node_id": "MDY6Q29tbWl0MjAwODQzMjEwOjc5NWM3YmM2NjY5NDk1NzFiMmEzOGNhMWM5MGUwMjU2NDY4YTdkNGE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c5a91c40a5142c7a05c9ce7171f72fb8d8a3211f",
                    "sha": "c5a91c40a5142c7a05c9ce7171f72fb8d8a3211f",
                    "url": "https://api.github.com/repos/cython/cython/commits/c5a91c40a5142c7a05c9ce7171f72fb8d8a3211f"
                }
            ],
            "sha": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
            "url": "https://api.github.com/repos/cython/cython/commits/795c7bc666949571b2a38ca1c90e0256468a7d4a"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3151/commits",
    "created_at": "2019-09-21T16:59:31Z",
    "diff_url": "https://github.com/cython/cython/pull/3151.diff",
    "draft": false,
    "head": {
        "label": "demiurg337:_fix_of_2159",
        "ref": "_fix_of_2159",
        "repo": {
            "archive_url": "https://api.github.com/repos/demiurg337/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/demiurg337/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/demiurg337/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/demiurg337/cython/branches{/branch}",
            "clone_url": "https://github.com/demiurg337/cython.git",
            "collaborators_url": "https://api.github.com/repos/demiurg337/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/demiurg337/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/demiurg337/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/demiurg337/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/demiurg337/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/demiurg337/cython/contributors",
            "created_at": "2019-08-06T12:04:18Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/demiurg337/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/demiurg337/cython/downloads",
            "events_url": "https://api.github.com/repos/demiurg337/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/demiurg337/cython/forks",
            "full_name": "demiurg337/cython",
            "git_commits_url": "https://api.github.com/repos/demiurg337/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/demiurg337/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/demiurg337/cython/git/tags{/sha}",
            "git_url": "git://github.com/demiurg337/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/demiurg337/cython/hooks",
            "html_url": "https://github.com/demiurg337/cython",
            "id": 200843210,
            "issue_comment_url": "https://api.github.com/repos/demiurg337/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/demiurg337/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/demiurg337/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/demiurg337/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/demiurg337/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/demiurg337/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/demiurg337/cython/merges",
            "milestones_url": "https://api.github.com/repos/demiurg337/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMDA4NDMyMTA=",
            "notifications_url": "https://api.github.com/repos/demiurg337/cython/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
                "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
                "followers_url": "https://api.github.com/users/demiurg337/followers",
                "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
                "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demiurg337",
                "id": 2492069,
                "login": "demiurg337",
                "node_id": "MDQ6VXNlcjI0OTIwNjk=",
                "organizations_url": "https://api.github.com/users/demiurg337/orgs",
                "received_events_url": "https://api.github.com/users/demiurg337/received_events",
                "repos_url": "https://api.github.com/users/demiurg337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demiurg337"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/demiurg337/cython/pulls{/number}",
            "pushed_at": "2020-09-26T21:26:59Z",
            "releases_url": "https://api.github.com/repos/demiurg337/cython/releases{/id}",
            "size": 60081,
            "ssh_url": "git@github.com:demiurg337/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/demiurg337/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/demiurg337/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/demiurg337/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/demiurg337/cython/subscription",
            "svn_url": "https://github.com/demiurg337/cython",
            "tags_url": "https://api.github.com/repos/demiurg337/cython/tags",
            "teams_url": "https://api.github.com/repos/demiurg337/cython/teams",
            "trees_url": "https://api.github.com/repos/demiurg337/cython/git/trees{/sha}",
            "updated_at": "2020-06-16T17:04:18Z",
            "url": "https://api.github.com/repos/demiurg337/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "795c7bc666949571b2a38ca1c90e0256468a7d4a",
        "user": {
            "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
            "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
            "followers_url": "https://api.github.com/users/demiurg337/followers",
            "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
            "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/demiurg337",
            "id": 2492069,
            "login": "demiurg337",
            "node_id": "MDQ6VXNlcjI0OTIwNjk=",
            "organizations_url": "https://api.github.com/users/demiurg337/orgs",
            "received_events_url": "https://api.github.com/users/demiurg337/received_events",
            "repos_url": "https://api.github.com/users/demiurg337/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/demiurg337"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3151",
    "id": 319974747,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3151",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "6309d9cc44548ec9771971b695a739f48058aa4a",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzE5OTc0NzQ3",
    "number": 3151,
    "patch_url": "https://github.com/cython/cython/pull/3151.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3151/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/795c7bc666949571b2a38ca1c90e0256468a7d4a",
    "title": "[ Rfc ]Coercing sliced array to Python  object",
    "updated_at": "2020-09-26T21:28:07Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3151",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/2492069?v=4",
        "events_url": "https://api.github.com/users/demiurg337/events{/privacy}",
        "followers_url": "https://api.github.com/users/demiurg337/followers",
        "following_url": "https://api.github.com/users/demiurg337/following{/other_user}",
        "gists_url": "https://api.github.com/users/demiurg337/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/demiurg337",
        "id": 2492069,
        "login": "demiurg337",
        "node_id": "MDQ6VXNlcjI0OTIwNjk=",
        "organizations_url": "https://api.github.com/users/demiurg337/orgs",
        "received_events_url": "https://api.github.com/users/demiurg337/received_events",
        "repos_url": "https://api.github.com/users/demiurg337/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/demiurg337/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/demiurg337/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/demiurg337"
    }
}