{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/6090/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6090/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/6090"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/6090"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6090/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6090"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/c70242dac0c542973571696b6a00a545a8966b67"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1444,
            "forks_count": 1444,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1297,
            "open_issues_count": 1297,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2024-03-24T10:01:41Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 73449,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 8807,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2024-03-24T14:29:21Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 8807,
            "watchers_count": 8807,
            "web_commit_signoff_required": false
        },
        "sha": "7484c01022c33af0754d991e24af1fdf0487ecb0",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "This PR moves compilation cache to separate module. It has two main benefits:\r\n* The code is better structured and more readable and cache has clear defined API\r\n* It enables integration of cache to cython command\r\n\r\nThis PR is not changing logic and tries just to reorganise code by copying it as much as possible.\r\n\r\nRelated to #6070\r\n",
    "closed_at": "2024-03-20T17:15:03Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527454976"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527454976"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                with gzip_open(gz_fingerprint_file, 'rb') as g:\r\n                    with open(c_file, 'wb') as f:\r\n```\r\n\r\nI know this is just copied from elsewhere, but I'm just taking the opportunity to clean this up while we're at it.\r\n\r\nI think these types have worked in a `with` statement directly for a while",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T09:31:37Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import contextlib\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+\n+    def zip_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + '.zip'\n+\n+    def lookup_cache(self, c_file, fingerprint):\n+        # Cython-generated c files are highly compressible.\n+        # (E.g. a compression ratio of about 10 for Sage).\n+        if not os.path.exists(self.path):\n+            safe_makedirs(self.path)\n+        gz_fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+        zip_fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+        if os.path.exists(gz_fingerprint_file) or os.path.exists(zip_fingerprint_file):\n+            if os.path.exists(gz_fingerprint_file):\n+                os.utime(gz_fingerprint_file, None)\n+                with contextlib.closing(gzip_open(gz_fingerprint_file, 'rb')) as g:\n+                    with contextlib.closing(open(c_file, 'wb')) as f:",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527454976",
            "id": 1527454976,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bCx0A",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 137,
            "original_position": 137,
            "original_start_line": 136,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941415965,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527454976/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-17T09:37:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527454976",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527455032"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527455032"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                with zipfile.ZipFile(zip_fingerprint_file) as z:\r\n```\r\n\r\nsame here",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T09:31:55Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import contextlib\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+\n+    def zip_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + '.zip'\n+\n+    def lookup_cache(self, c_file, fingerprint):\n+        # Cython-generated c files are highly compressible.\n+        # (E.g. a compression ratio of about 10 for Sage).\n+        if not os.path.exists(self.path):\n+            safe_makedirs(self.path)\n+        gz_fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+        zip_fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+        if os.path.exists(gz_fingerprint_file) or os.path.exists(zip_fingerprint_file):\n+            if os.path.exists(gz_fingerprint_file):\n+                os.utime(gz_fingerprint_file, None)\n+                with contextlib.closing(gzip_open(gz_fingerprint_file, 'rb')) as g:\n+                    with contextlib.closing(open(c_file, 'wb')) as f:\n+                        shutil.copyfileobj(g, f)\n+            else:\n+                os.utime(zip_fingerprint_file, None)\n+                dirname = os.path.dirname(c_file)\n+                with contextlib.closing(zipfile.ZipFile(zip_fingerprint_file)) as z:",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527455032",
            "id": 1527455032,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bCx04",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 142,
            "original_position": 142,
            "original_start_line": null,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941415965,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455032/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-17T09:37:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455032",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527455124"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527455124"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            with open(c_file, 'rb') as f:\r\n                with gzip_open(fingerprint_file + '.tmp', 'wb') as g:\r\n```",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T09:32:22Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import contextlib\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+\n+    def zip_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + '.zip'\n+\n+    def lookup_cache(self, c_file, fingerprint):\n+        # Cython-generated c files are highly compressible.\n+        # (E.g. a compression ratio of about 10 for Sage).\n+        if not os.path.exists(self.path):\n+            safe_makedirs(self.path)\n+        gz_fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+        zip_fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+        if os.path.exists(gz_fingerprint_file) or os.path.exists(zip_fingerprint_file):\n+            if os.path.exists(gz_fingerprint_file):\n+                os.utime(gz_fingerprint_file, None)\n+                with contextlib.closing(gzip_open(gz_fingerprint_file, 'rb')) as g:\n+                    with contextlib.closing(open(c_file, 'wb')) as f:\n+                        shutil.copyfileobj(g, f)\n+            else:\n+                os.utime(zip_fingerprint_file, None)\n+                dirname = os.path.dirname(c_file)\n+                with contextlib.closing(zipfile.ZipFile(zip_fingerprint_file)) as z:\n+                    for artifact in z.namelist():\n+                        z.extract(artifact, os.path.join(dirname, artifact))\n+            return True\n+        return False\n+\n+\n+    def store_to_cache(self, fingerprint, c_file, compilation_result):\n+        artifacts = list(filter(None, [\n+            getattr(compilation_result, attr, None)\n+            for attr in ('c_file', 'h_file', 'api_file', 'i_file')]))\n+        if len(artifacts) == 1:\n+            fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+            with contextlib.closing(open(c_file, 'rb')) as f:\n+                with contextlib.closing(gzip_open(fingerprint_file + '.tmp', 'wb')) as g:",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527455124",
            "id": 1527455124,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bCx2U",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 156,
            "original_position": 156,
            "original_start_line": 155,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941415965,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455124/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-17T09:37:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455124",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527455172"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527455172"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            with zipfile.ZipFile(\r\n                    fingerprint_file + '.tmp', 'w', zipfile_compression_mode) as zip:\r\n```",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T09:32:45Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import contextlib\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+\n+    def zip_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + '.zip'\n+\n+    def lookup_cache(self, c_file, fingerprint):\n+        # Cython-generated c files are highly compressible.\n+        # (E.g. a compression ratio of about 10 for Sage).\n+        if not os.path.exists(self.path):\n+            safe_makedirs(self.path)\n+        gz_fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+        zip_fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+        if os.path.exists(gz_fingerprint_file) or os.path.exists(zip_fingerprint_file):\n+            if os.path.exists(gz_fingerprint_file):\n+                os.utime(gz_fingerprint_file, None)\n+                with contextlib.closing(gzip_open(gz_fingerprint_file, 'rb')) as g:\n+                    with contextlib.closing(open(c_file, 'wb')) as f:\n+                        shutil.copyfileobj(g, f)\n+            else:\n+                os.utime(zip_fingerprint_file, None)\n+                dirname = os.path.dirname(c_file)\n+                with contextlib.closing(zipfile.ZipFile(zip_fingerprint_file)) as z:\n+                    for artifact in z.namelist():\n+                        z.extract(artifact, os.path.join(dirname, artifact))\n+            return True\n+        return False\n+\n+\n+    def store_to_cache(self, fingerprint, c_file, compilation_result):\n+        artifacts = list(filter(None, [\n+            getattr(compilation_result, attr, None)\n+            for attr in ('c_file', 'h_file', 'api_file', 'i_file')]))\n+        if len(artifacts) == 1:\n+            fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+            with contextlib.closing(open(c_file, 'rb')) as f:\n+                with contextlib.closing(gzip_open(fingerprint_file + '.tmp', 'wb')) as g:\n+                    shutil.copyfileobj(f, g)\n+        else:\n+            fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+            with contextlib.closing(zipfile.ZipFile(\n+                    fingerprint_file + '.tmp', 'w', zipfile_compression_mode)) as zip:",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527455172",
            "id": 1527455172,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bCx3E",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 161,
            "original_position": 161,
            "original_start_line": 160,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941415965,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455172/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-17T10:19:29Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527455420"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527455420"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T09:34:07Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import contextlib",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527455420",
            "id": 1527455420,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bCx68",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941415965,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455420/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-17T09:37:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455420",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527455672"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527455672"
                }
            },
            "author_association": "MEMBER",
            "body": "Feel free to reject these though if you want to be really strict about just copying. I can come back and do them later.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T09:35:16Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import contextlib\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+\n+    def zip_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + '.zip'\n+\n+    def lookup_cache(self, c_file, fingerprint):\n+        # Cython-generated c files are highly compressible.\n+        # (E.g. a compression ratio of about 10 for Sage).\n+        if not os.path.exists(self.path):\n+            safe_makedirs(self.path)\n+        gz_fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+        zip_fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+        if os.path.exists(gz_fingerprint_file) or os.path.exists(zip_fingerprint_file):\n+            if os.path.exists(gz_fingerprint_file):\n+                os.utime(gz_fingerprint_file, None)\n+                with contextlib.closing(gzip_open(gz_fingerprint_file, 'rb')) as g:\n+                    with contextlib.closing(open(c_file, 'wb')) as f:",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527455672",
            "id": 1527455672,
            "in_reply_to_id": 1527454976,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bCx-4",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 137,
            "original_position": 137,
            "original_start_line": 136,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941415965,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455672/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-17T09:37:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455672",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527455984"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527455984"
                }
            },
            "author_association": "MEMBER",
            "body": "Not completely sure but `Cache.py` feels like part of the `Build` directory to me.\r\n\r\nI do think it's better all in one file though",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T09:36:58Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527455984",
            "id": 1527455984,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bCyDw",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941415965,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455984/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-17T09:37:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527455984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527465130"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527465130"
                }
            },
            "author_association": "MEMBER",
            "body": "I think you make a typo it should be a `zipfile` instead of `ipfile` ;-)",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T10:18:47Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import contextlib\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+\n+    def zip_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + '.zip'\n+\n+    def lookup_cache(self, c_file, fingerprint):\n+        # Cython-generated c files are highly compressible.\n+        # (E.g. a compression ratio of about 10 for Sage).\n+        if not os.path.exists(self.path):\n+            safe_makedirs(self.path)\n+        gz_fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+        zip_fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+        if os.path.exists(gz_fingerprint_file) or os.path.exists(zip_fingerprint_file):\n+            if os.path.exists(gz_fingerprint_file):\n+                os.utime(gz_fingerprint_file, None)\n+                with contextlib.closing(gzip_open(gz_fingerprint_file, 'rb')) as g:\n+                    with contextlib.closing(open(c_file, 'wb')) as f:\n+                        shutil.copyfileobj(g, f)\n+            else:\n+                os.utime(zip_fingerprint_file, None)\n+                dirname = os.path.dirname(c_file)\n+                with contextlib.closing(zipfile.ZipFile(zip_fingerprint_file)) as z:\n+                    for artifact in z.namelist():\n+                        z.extract(artifact, os.path.join(dirname, artifact))\n+            return True\n+        return False\n+\n+\n+    def store_to_cache(self, fingerprint, c_file, compilation_result):\n+        artifacts = list(filter(None, [\n+            getattr(compilation_result, attr, None)\n+            for attr in ('c_file', 'h_file', 'api_file', 'i_file')]))\n+        if len(artifacts) == 1:\n+            fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+            with contextlib.closing(open(c_file, 'rb')) as f:\n+                with contextlib.closing(gzip_open(fingerprint_file + '.tmp', 'wb')) as g:\n+                    shutil.copyfileobj(f, g)\n+        else:\n+            fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+            with contextlib.closing(zipfile.ZipFile(\n+                    fingerprint_file + '.tmp', 'w', zipfile_compression_mode)) as zip:",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527465130",
            "id": 1527465130,
            "in_reply_to_id": 1527455172,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bC0Sq",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 161,
            "original_position": 161,
            "original_start_line": 160,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941427289,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527465130/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-17T10:18:47Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527465130",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527465299"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527465299"
                }
            },
            "author_association": "MEMBER",
            "body": "Aaah I can also edit your message. So I will fix it for you.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T10:19:46Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import contextlib\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+\n+    def zip_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + '.zip'\n+\n+    def lookup_cache(self, c_file, fingerprint):\n+        # Cython-generated c files are highly compressible.\n+        # (E.g. a compression ratio of about 10 for Sage).\n+        if not os.path.exists(self.path):\n+            safe_makedirs(self.path)\n+        gz_fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+        zip_fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+        if os.path.exists(gz_fingerprint_file) or os.path.exists(zip_fingerprint_file):\n+            if os.path.exists(gz_fingerprint_file):\n+                os.utime(gz_fingerprint_file, None)\n+                with contextlib.closing(gzip_open(gz_fingerprint_file, 'rb')) as g:\n+                    with contextlib.closing(open(c_file, 'wb')) as f:\n+                        shutil.copyfileobj(g, f)\n+            else:\n+                os.utime(zip_fingerprint_file, None)\n+                dirname = os.path.dirname(c_file)\n+                with contextlib.closing(zipfile.ZipFile(zip_fingerprint_file)) as z:\n+                    for artifact in z.namelist():\n+                        z.extract(artifact, os.path.join(dirname, artifact))\n+            return True\n+        return False\n+\n+\n+    def store_to_cache(self, fingerprint, c_file, compilation_result):\n+        artifacts = list(filter(None, [\n+            getattr(compilation_result, attr, None)\n+            for attr in ('c_file', 'h_file', 'api_file', 'i_file')]))\n+        if len(artifacts) == 1:\n+            fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+            with contextlib.closing(open(c_file, 'rb')) as f:\n+                with contextlib.closing(gzip_open(fingerprint_file + '.tmp', 'wb')) as g:\n+                    shutil.copyfileobj(f, g)\n+        else:\n+            fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+            with contextlib.closing(zipfile.ZipFile(\n+                    fingerprint_file + '.tmp', 'w', zipfile_compression_mode)) as zip:",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527465299",
            "id": 1527465299,
            "in_reply_to_id": 1527455172,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bC0VT",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 161,
            "original_position": 161,
            "original_start_line": 160,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941427439,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527465299/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-17T10:19:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527465299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527466073"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527466073"
                }
            },
            "author_association": "MEMBER",
            "body": "> Not completely sure but Cache.py feels like part of the Build directory to me.\r\n\r\nI was thinking where to put this file. I put it here because I want to use it in `Main.py` in next PR (#6091) and hence I fill that it should be included in 'core' of python but still not 100% sure. If you still think it should go to `Build` I don't have any issue with that. Let me know.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T10:24:31Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527466073",
            "id": 1527466073,
            "in_reply_to_id": 1527455984,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bC0hZ",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941428216,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527466073/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-17T10:24:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527466073",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527466702"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527466702"
                }
            },
            "author_association": "MEMBER",
            "body": "No I like it. I added them to the PR.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T10:27:50Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import contextlib\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+\n+    def zip_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + '.zip'\n+\n+    def lookup_cache(self, c_file, fingerprint):\n+        # Cython-generated c files are highly compressible.\n+        # (E.g. a compression ratio of about 10 for Sage).\n+        if not os.path.exists(self.path):\n+            safe_makedirs(self.path)\n+        gz_fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+        zip_fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+        if os.path.exists(gz_fingerprint_file) or os.path.exists(zip_fingerprint_file):\n+            if os.path.exists(gz_fingerprint_file):\n+                os.utime(gz_fingerprint_file, None)\n+                with contextlib.closing(gzip_open(gz_fingerprint_file, 'rb')) as g:\n+                    with contextlib.closing(open(c_file, 'wb')) as f:",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527466702",
            "id": 1527466702,
            "in_reply_to_id": 1527454976,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bC0rO",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 137,
            "original_position": 137,
            "original_start_line": 136,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941428890,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527466702/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-17T10:27:50Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527466702",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1527469214"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1527469214"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah I see. I don't think it should go in Compiler but I think I'll defer to @scoder about where it should go. Probably leave it for now",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-17T10:39:01Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1527469214",
            "id": 1527469214,
            "in_reply_to_id": 1527455984,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bC1Se",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1941431591,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527469214/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-17T10:39:01Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1527469214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1531014598"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1531014598"
                }
            },
            "author_association": "MEMBER",
            "body": "I would like to merge this PR so if there is no oposition, I will move the Cache.py to `Build` directory as proposed. There is already `Build` package imported in `Main.py` so I think it won't be a problem to import Cache locally too from `Build`.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-19T20:00:03Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+import sys",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1531014598",
            "id": 1531014598,
            "in_reply_to_id": 1527455984,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5bQW3G",
            "original_commit_id": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "Cython/Compiler/Cache.py",
            "position": null,
            "pull_request_review_id": 1947259355,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1531014598/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-19T20:00:03Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1531014598",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1536621898"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1536621898"
                }
            },
            "author_association": "MEMBER",
            "body": "There are a couple of duplicated empty lines between the methods. PEP-8 wants these as global separates between module level functions etc., not between methods. Also, spacing is not always consistent, e.g. `(language, py_limited_api,np_pythran)` above.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-23T12:01:34Z",
            "diff_hunk": "@@ -0,0 +1,189 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1536621898",
            "id": 1536621898,
            "line": 121,
            "node_id": "PRRC_kwDOABDGAc5blv1K",
            "original_commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "original_line": 121,
            "original_position": 121,
            "original_start_line": 120,
            "path": "Cython/Build/Cache.py",
            "position": 121,
            "pull_request_review_id": 1956368921,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536621898/reactions"
            },
            "side": "RIGHT",
            "start_line": 120,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-23T12:54:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536621898",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1536623289"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1536623289"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a really weird interface. It seems specific to the way the cache is configured, not to how it's implemented. I'd expect this to happen outside of the `Cache` constructor, in the code using it.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-23T12:10:56Z",
            "diff_hunk": "@@ -0,0 +1,189 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1536623289",
            "id": 1536623289,
            "line": 82,
            "node_id": "PRRC_kwDOABDGAc5blwK5",
            "original_commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "original_line": 82,
            "original_position": 82,
            "original_start_line": 73,
            "path": "Cython/Build/Cache.py",
            "position": 82,
            "pull_request_review_id": 1956368921,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536623289/reactions"
            },
            "side": "RIGHT",
            "start_line": 73,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-23T12:54:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536623289",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1536626200"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1536626200"
                }
            },
            "author_association": "MEMBER",
            "body": "The default cache size would be better placed as a global constant (which users can read and control).",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-23T12:34:22Z",
            "diff_hunk": "@@ -0,0 +1,189 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1536626200",
            "id": 1536626200,
            "line": 83,
            "node_id": "PRRC_kwDOABDGAc5blw4Y",
            "original_commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "original_line": 83,
            "original_position": 83,
            "original_start_line": null,
            "path": "Cython/Build/Cache.py",
            "position": 83,
            "pull_request_review_id": 1956368921,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536626200/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-23T12:54:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536626200",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1536626342"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1536626342"
                }
            },
            "author_association": "MEMBER",
            "body": "There's a `join_path` function above.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-23T12:35:37Z",
            "diff_hunk": "@@ -0,0 +1,189 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1536626342",
            "id": 1536626342,
            "line": 76,
            "node_id": "PRRC_kwDOABDGAc5blw6m",
            "original_commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "original_line": 76,
            "original_position": 76,
            "original_start_line": null,
            "path": "Cython/Build/Cache.py",
            "position": 76,
            "pull_request_review_id": 1956368921,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536626342/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-23T12:54:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536626342",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1536626763"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1536626763"
                }
            },
            "author_association": "MEMBER",
            "body": "This function (it's not even a method) now receives lots of arguments and does very little with them. That suggests that it receives too many arguments.\r\n\r\nFor example, it receive the complete set of compilation options, only to call `.get_fingerprint()` on them. Aren't they static at the time the cache is created? Do we need to take a new fingerprint of them for each file? Or is it something that a staticmethod factory function (`Cache.from_options(compile_options)`) could do at init time?\r\n\r\nSimilarly, it receives the dependencies instance, just to call `.all_dependencies()` on it with the filename that it also receives from outside. Maybe it only needs to know the list of dependencies, and not how to determine them? The latter part seems to belong into `Dependencies.py`.\r\n\r\nFinally, it also receives three separate options (`language`, `py_limited_api`, `np_pythran`), just to turn them into a tuple and stringify them. I think `language` is really a flag as well: C++ or not. So these are all flags that could be passed as a single parameter, maybe as a flags dataclass with defaults. The fact that the fingerprinting then uses `c++` or `c` (or often `None`, but we should normalise that) then is an implementation detail local to this function again.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-23T12:38:54Z",
            "diff_hunk": "@@ -0,0 +1,189 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1536626763",
            "id": 1536626763,
            "line": 88,
            "node_id": "PRRC_kwDOABDGAc5blxBL",
            "original_commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "original_line": 88,
            "original_position": 88,
            "original_start_line": null,
            "path": "Cython/Build/Cache.py",
            "position": 88,
            "pull_request_review_id": 1956368921,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536626763/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-23T12:54:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536626763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1536627673"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1536627673"
                }
            },
            "author_association": "MEMBER",
            "body": "This method doesn't just do a lookup, it extracts files from the cache. Funnily, it also creates directories, even if it doesn't find anything in the cache. And it then even returns True/False to indicate whether it did something or not. Loads of functionality stuffed into one function.\r\n\r\nI'd split this into two methods, one that does the lookup and returns the cache file or None, and one that extracts the files from the cache file. That way, users are informed after the first call that a cache entry exists, and can call the second method to use it.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-23T12:44:29Z",
            "diff_hunk": "@@ -0,0 +1,189 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+\n+    def zip_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + '.zip'\n+\n+    def lookup_cache(self, c_file, fingerprint):",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1536627673",
            "id": 1536627673,
            "line": 125,
            "node_id": "PRRC_kwDOABDGAc5blxPZ",
            "original_commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "original_line": 125,
            "original_position": 125,
            "original_start_line": null,
            "path": "Cython/Build/Cache.py",
            "position": 125,
            "pull_request_review_id": 1956368921,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536627673/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-23T12:54:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536627673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1536627965"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1536627965"
                }
            },
            "author_association": "MEMBER",
            "body": "This (and the renaming afterwards) seems worth extracting. I can't see a reason why copying back from the cache to the target file should behave differently. Both benefit from a temp file.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-23T12:46:37Z",
            "diff_hunk": "@@ -0,0 +1,189 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+\n+    def zip_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + '.zip'\n+\n+    def lookup_cache(self, c_file, fingerprint):\n+        # Cython-generated c files are highly compressible.\n+        # (E.g. a compression ratio of about 10 for Sage).\n+        if not os.path.exists(self.path):\n+            safe_makedirs(self.path)\n+        gz_fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+        zip_fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+        if os.path.exists(gz_fingerprint_file) or os.path.exists(zip_fingerprint_file):\n+            if os.path.exists(gz_fingerprint_file):\n+                os.utime(gz_fingerprint_file, None)\n+                with gzip_open(gz_fingerprint_file, 'rb') as g:\n+                    with open(c_file, 'wb') as f:\n+                        shutil.copyfileobj(g, f)\n+            else:\n+                os.utime(zip_fingerprint_file, None)\n+                dirname = os.path.dirname(c_file)\n+                with zipfile.ZipFile(zip_fingerprint_file) as z:\n+                    for artifact in z.namelist():\n+                        z.extract(artifact, os.path.join(dirname, artifact))\n+            return True\n+        return False\n+\n+\n+    def store_to_cache(self, fingerprint, c_file, compilation_result):\n+        artifacts = list(filter(None, [\n+            getattr(compilation_result, attr, None)\n+            for attr in ('c_file', 'h_file', 'api_file', 'i_file')]))\n+        if len(artifacts) == 1:\n+            fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+            with open(c_file, 'rb') as f:\n+                with gzip_open(fingerprint_file + '.tmp', 'wb') as g:\n+                    shutil.copyfileobj(f, g)",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1536627965",
            "id": 1536627965,
            "line": 156,
            "node_id": "PRRC_kwDOABDGAc5blxT9",
            "original_commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "original_line": 156,
            "original_position": 156,
            "original_start_line": 154,
            "path": "Cython/Build/Cache.py",
            "position": 156,
            "pull_request_review_id": 1956368921,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536627965/reactions"
            },
            "side": "RIGHT",
            "start_line": 154,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-23T12:54:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536627965",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6090#discussion_r1536628575"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6090"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1536628575"
                }
            },
            "author_association": "MEMBER",
            "body": "We can use `subprocess.run()` now.",
            "commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "created_at": "2024-03-23T12:50:42Z",
            "diff_hunk": "@@ -0,0 +1,189 @@\n+import sys\n+import os\n+import hashlib\n+import shutil\n+import subprocess\n+from ..Utils import safe_makedirs, cached_function\n+import zipfile\n+from .. import __version__\n+\n+try:\n+    import zlib\n+    zipfile_compression_mode = zipfile.ZIP_DEFLATED\n+except ImportError:\n+    zipfile_compression_mode = zipfile.ZIP_STORED\n+\n+try:\n+    import gzip\n+    gzip_open = gzip.open\n+    gzip_ext = '.gz'\n+except ImportError:\n+    gzip_open = open\n+    gzip_ext = ''\n+\n+\n+join_path = cached_function(os.path.join)\n+\n+@cached_function\n+def file_hash(filename):\n+    path = os.path.normpath(filename)\n+    prefix = ('%d:%s' % (len(path), path)).encode(\"UTF-8\")\n+    m = hashlib.sha1(prefix)\n+    with open(path, 'rb') as f:\n+        data = f.read(65000)\n+        while data:\n+            m.update(data)\n+            data = f.read(65000)\n+    return m.hexdigest()\n+\n+\n+@cached_function\n+def get_cython_cache_dir():\n+    r\"\"\"\n+    Return the base directory containing Cython's caches.\n+\n+    Priority:\n+\n+    1. CYTHON_CACHE_DIR\n+    2. (OS X): ~/Library/Caches/Cython\n+       (posix not OS X): XDG_CACHE_HOME/cython if XDG_CACHE_HOME defined\n+    3. ~/.cython\n+\n+    \"\"\"\n+    if 'CYTHON_CACHE_DIR' in os.environ:\n+        return os.environ['CYTHON_CACHE_DIR']\n+\n+    parent = None\n+    if os.name == 'posix':\n+        if sys.platform == 'darwin':\n+            parent = os.path.expanduser('~/Library/Caches')\n+        else:\n+            # this could fallback on ~/.cache\n+            parent = os.environ.get('XDG_CACHE_HOME')\n+\n+    if parent and os.path.isdir(parent):\n+        return os.path.join(parent, 'cython')\n+\n+    # last fallback: ~/.cython\n+    return os.path.expanduser(os.path.join('~', '.cython'))\n+\n+\n+class Cache:\n+\n+    def __init__(self, cache, cache_size=None):\n+        if cache is True:\n+            self.enabled = True\n+            self.path = os.path.join(get_cython_cache_dir(), 'compiler')\n+        elif cache:\n+            self.path = cache\n+            self.enabled = True\n+        else:\n+            self.path = None\n+            self.enabled = False\n+        self.cache_size = cache_size if cache_size is not None else 1024 * 1024 * 100\n+        if self.enabled:\n+            if not os.path.exists(self.path):\n+                os.makedirs(self.path)\n+\n+    def transitive_fingerprint(self, filename, dependencies, compilation_options, language, py_limited_api=False, np_pythran=False):\n+        r\"\"\"\n+        Return a fingerprint of a cython file that is about to be cythonized.\n+\n+        Fingerprints are looked up in future compilations. If the fingerprint\n+        is found, the cythonization can be skipped. The fingerprint must\n+        incorporate everything that has an influence on the generated code.\n+        \"\"\"\n+        try:\n+            m = hashlib.sha1(__version__.encode('UTF-8'))\n+            m.update(file_hash(filename).encode('UTF-8'))\n+            for x in sorted(dependencies.all_dependencies(filename)):\n+                if os.path.splitext(x)[1] not in ('.c', '.cpp', '.h'):\n+                    m.update(file_hash(x).encode('UTF-8'))\n+            # Include the module attributes that change the compilation result\n+            # in the fingerprint. We do not iterate over module.__dict__ and\n+            # include almost everything here as users might extend Extension\n+            # with arbitrary (random) attributes that would lead to cache\n+            # misses.\n+            m.update(\n+                str((language, py_limited_api,np_pythran)).encode('UTF-8')\n+            )\n+            m.update(compilation_options.get_fingerprint().encode('UTF-8'))\n+            return m.hexdigest()\n+        except OSError:\n+            return None\n+\n+    def fingerprint_file_base(self, cfile, fingerprint):\n+        return join_path(self.path, \"%s-%s\" % (os.path.basename(cfile), fingerprint))\n+\n+    def gz_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + gzip_ext\n+\n+\n+    def zip_fingerprint_file(self, cfile, fingerprint):\n+        return self.fingerprint_file_base(cfile, fingerprint) + '.zip'\n+\n+    def lookup_cache(self, c_file, fingerprint):\n+        # Cython-generated c files are highly compressible.\n+        # (E.g. a compression ratio of about 10 for Sage).\n+        if not os.path.exists(self.path):\n+            safe_makedirs(self.path)\n+        gz_fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+        zip_fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+        if os.path.exists(gz_fingerprint_file) or os.path.exists(zip_fingerprint_file):\n+            if os.path.exists(gz_fingerprint_file):\n+                os.utime(gz_fingerprint_file, None)\n+                with gzip_open(gz_fingerprint_file, 'rb') as g:\n+                    with open(c_file, 'wb') as f:\n+                        shutil.copyfileobj(g, f)\n+            else:\n+                os.utime(zip_fingerprint_file, None)\n+                dirname = os.path.dirname(c_file)\n+                with zipfile.ZipFile(zip_fingerprint_file) as z:\n+                    for artifact in z.namelist():\n+                        z.extract(artifact, os.path.join(dirname, artifact))\n+            return True\n+        return False\n+\n+\n+    def store_to_cache(self, fingerprint, c_file, compilation_result):\n+        artifacts = list(filter(None, [\n+            getattr(compilation_result, attr, None)\n+            for attr in ('c_file', 'h_file', 'api_file', 'i_file')]))\n+        if len(artifacts) == 1:\n+            fingerprint_file = self.gz_fingerprint_file(c_file, fingerprint)\n+            with open(c_file, 'rb') as f:\n+                with gzip_open(fingerprint_file + '.tmp', 'wb') as g:\n+                    shutil.copyfileobj(f, g)\n+        else:\n+            fingerprint_file = self.zip_fingerprint_file(c_file, fingerprint)\n+            with zipfile.ZipFile(\n+                    fingerprint_file + '.tmp', 'w', zipfile_compression_mode) as zip:\n+                for artifact in artifacts:\n+                    zip.write(artifact, os.path.basename(artifact))\n+        os.rename(fingerprint_file + '.tmp', fingerprint_file)\n+\n+\n+    def cleanup_cache(self, ratio=.85):\n+        try:\n+            p = subprocess.Popen(['du', '-s', '-k', os.path.abspath(self.path)], stdout=subprocess.PIPE)\n+            stdout, _ = p.communicate()\n+            res = p.wait()\n+            if res == 0:",
            "html_url": "https://github.com/cython/cython/pull/6090#discussion_r1536628575",
            "id": 1536628575,
            "line": 171,
            "node_id": "PRRC_kwDOABDGAc5blxdf",
            "original_commit_id": "c70242dac0c542973571696b6a00a545a8966b67",
            "original_line": 171,
            "original_position": 171,
            "original_start_line": 168,
            "path": "Cython/Build/Cache.py",
            "position": 171,
            "pull_request_review_id": 1956368921,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6090",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536628575/reactions"
            },
            "side": "RIGHT",
            "start_line": 168,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-23T12:54:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1536628575",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6090/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a0462118b8cf66a7fe97833dd2d4dd9026c20b09/comments",
            "commit": {
                "author": {
                    "date": "2024-03-16T11:36:07Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-16T18:39:58Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Move Cython cache to separate module",
                "tree": {
                    "sha": "91eaca7dbba47f37e9f060f703e84b5acd879581",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/91eaca7dbba47f37e9f060f703e84b5acd879581"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a0462118b8cf66a7fe97833dd2d4dd9026c20b09",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/a0462118b8cf66a7fe97833dd2d4dd9026c20b09",
            "node_id": "C_kwDOFL4z49oAKGEwNDYyMTE4YjhjZjY2YTdmZTk3ODMzZGQyZDRkZDkwMjZjMjBiMDk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4d90a5de9ba606c0ebc6aa1baca8e2d9003b3247",
                    "sha": "4d90a5de9ba606c0ebc6aa1baca8e2d9003b3247",
                    "url": "https://api.github.com/repos/cython/cython/commits/4d90a5de9ba606c0ebc6aa1baca8e2d9003b3247"
                }
            ],
            "sha": "a0462118b8cf66a7fe97833dd2d4dd9026c20b09",
            "url": "https://api.github.com/repos/cython/cython/commits/a0462118b8cf66a7fe97833dd2d4dd9026c20b09"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b17181e5e062451199b348ee1b22897b6a5fe47b/comments",
            "commit": {
                "author": {
                    "date": "2024-03-16T19:02:00Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-16T19:02:00Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Merge remote-tracking branch 'upstream/master' into refactor_cache",
                "tree": {
                    "sha": "fe13e640662291c6ceb3c832c5ad15f0fb72401f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/fe13e640662291c6ceb3c832c5ad15f0fb72401f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b17181e5e062451199b348ee1b22897b6a5fe47b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/b17181e5e062451199b348ee1b22897b6a5fe47b",
            "node_id": "C_kwDOFL4z49oAKGIxNzE4MWU1ZTA2MjQ1MTE5OWIzNDhlZTFiMjI4OTdiNmE1ZmU0N2I",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a0462118b8cf66a7fe97833dd2d4dd9026c20b09",
                    "sha": "a0462118b8cf66a7fe97833dd2d4dd9026c20b09",
                    "url": "https://api.github.com/repos/cython/cython/commits/a0462118b8cf66a7fe97833dd2d4dd9026c20b09"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/7484c01022c33af0754d991e24af1fdf0487ecb0",
                    "sha": "7484c01022c33af0754d991e24af1fdf0487ecb0",
                    "url": "https://api.github.com/repos/cython/cython/commits/7484c01022c33af0754d991e24af1fdf0487ecb0"
                }
            ],
            "sha": "b17181e5e062451199b348ee1b22897b6a5fe47b",
            "url": "https://api.github.com/repos/cython/cython/commits/b17181e5e062451199b348ee1b22897b6a5fe47b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6fde7fafd45c2a5ab02775a9aac757326856cf4f/comments",
            "commit": {
                "author": {
                    "date": "2024-03-17T10:17:04Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-17T10:17:04Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Cython/Compiler/Cache.py\n\nCo-authored-by: da-woods <dw-git@d-woods.co.uk>",
                "tree": {
                    "sha": "09407ed51dfad7d38d8dc209b760f77b454e7eea",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/09407ed51dfad7d38d8dc209b760f77b454e7eea"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6fde7fafd45c2a5ab02775a9aac757326856cf4f",
                "verification": {
                    "payload": "tree 09407ed51dfad7d38d8dc209b760f77b454e7eea\nparent b17181e5e062451199b348ee1b22897b6a5fe47b\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1710670624 +0100\ncommitter GitHub <noreply@github.com> 1710670624 +0100\n\nUpdate Cython/Compiler/Cache.py\n\nCo-authored-by: da-woods <dw-git@d-woods.co.uk>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJl9sMgCRC1aQ7uu5UhlAAA2kEQABA0i3Aw9hkFLpatgCy1po9y\nbNFDhu264GdJzewzcogigh48F1jwDkEXH+helDdYLOZoy7KfXP0L98PhoHI31e4m\nZcNzjn3hLMqkcIDKh13Pwpbssx+e262UJwHw4ay+a9U7PshbuXQtPOPWYisrPcoQ\n+hRQlh4RVOgnt+caBgfgVB7M1SyIPTuckTQSh4e9jptPtC5ggwIuMpMRMsHZ+luK\nNJEtGo6o1w0Zx9CaB1E4jprPLyu5c6LhK7ZVCTFjUYBgq6WL5BoB8UynTRoyVfuy\nTTPBhcule9MP/I805WeusOoGyaybmrIEhipdP+j8BRUPi+KGBva27y0tRDuM5FgC\nzU0EgLuVlzT6gkUIIj43wPk6BlodX9c5FfpPEpH86ny/00wN2VvWLPDMPPzhbE7E\nv+MaZYlU9NlLNtBSx8lW8Y8kfIbfNsu5nLgGrt92u8UKXOjyxtk9vIIlPsETWd8i\nAxjmH3x5rjTAyBW3Vzefe5lKwHemOXuhrYD5f8OEM+u5bBT9m2jkDmB2OOFTV2Nf\nmYGajAVi56eoHsscRANj8IlCtc69jpu3MVYKhSd65O8c7oATQmPosqpSc/t9WsHE\n8nfZdW2GEgtuTOA8HowE/10loKFZOZfao8f8bznWlaOGzVVZnCfZnDIujCfMMaXm\n+gzKEjkmiynrEkrlSpy+\n=Aefv\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/6fde7fafd45c2a5ab02775a9aac757326856cf4f",
            "node_id": "C_kwDOFL4z49oAKDZmZGU3ZmFmZDQ1YzJhNWFiMDI3NzVhOWFhYzc1NzMyNjg1NmNmNGY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b17181e5e062451199b348ee1b22897b6a5fe47b",
                    "sha": "b17181e5e062451199b348ee1b22897b6a5fe47b",
                    "url": "https://api.github.com/repos/cython/cython/commits/b17181e5e062451199b348ee1b22897b6a5fe47b"
                }
            ],
            "sha": "6fde7fafd45c2a5ab02775a9aac757326856cf4f",
            "url": "https://api.github.com/repos/cython/cython/commits/6fde7fafd45c2a5ab02775a9aac757326856cf4f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/cf0bd2d1e4742f3a2fa6086e9033b2255ecddce9/comments",
            "commit": {
                "author": {
                    "date": "2024-03-17T10:18:11Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-17T10:18:11Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: da-woods <dw-git@d-woods.co.uk>",
                "tree": {
                    "sha": "a47df8c6571b476ecd53c44b2011b5d593410b57",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a47df8c6571b476ecd53c44b2011b5d593410b57"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/cf0bd2d1e4742f3a2fa6086e9033b2255ecddce9",
                "verification": {
                    "payload": "tree a47df8c6571b476ecd53c44b2011b5d593410b57\nparent 6fde7fafd45c2a5ab02775a9aac757326856cf4f\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1710670691 +0100\ncommitter GitHub <noreply@github.com> 1710670691 +0100\n\nApply suggestions from code review\n\nCo-authored-by: da-woods <dw-git@d-woods.co.uk>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJl9sNjCRC1aQ7uu5UhlAAADVYQAA3JU0ETzWWrz5yvwK3ovQ6a\ns9CjkSP+pFJ+Vg9VJ+fCVcYkRbf9LiJFzPwA6keJ91tJHqmZ22QYBM+pBUc/8ceM\nzWrmtlEha9w3a8HiYgR1qDJsnVfmgtirU9iMMNtjqiGDeTY+eqma96avwUVBHp/P\n2WLk3Atd4TqJE5pHE+tgfRqap/kbvUg0AjgnmHogMPJXtm49EqBRLV0Hliw1rAbc\nw2NrrogkiP39MInB1QjOOv483RgyM+SbJLJF5mmpr00BZoCvYHnLIClBqB068YTW\n+jMSBr/fYnnm3KWllfMbi7Pcvmn4EDvqBLibvQ4kCXwalpZQTauq4w/9XHq5WRgM\nXJ2dSM4MPE1nBhtTM5lFzg7pMYBVzbleNF/3epf9yYcqk1jHe9fZBCACIdMTQzre\n1WzrYgt20cKusUEe9D8z2tSO7aZw3COBE8PN2W8k2PA/kziBtgXeANvo3M9GrLKk\ntvYph7vWCuZb/Q+rz+UEk6S6tEvHSRPhi9zoTOUaXdNkd4xVrxC0KiHYaQdkNp49\nW5aNRLjR0WbngtTRoxRZT2tkpredaFRw9dFZMO+exVHcsjrXCQolVj+88YgJUiRa\ndPSBRXGTlWRTprR0ZNEVbwbY+szb9G7ebAW2Inu6oTpvDwxUCwfvt+CHyEKBA3J+\n47AgIX+eJQoXePK2bZGv\n=G+5s\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/cf0bd2d1e4742f3a2fa6086e9033b2255ecddce9",
            "node_id": "C_kwDOFL4z49oAKGNmMGJkMmQxZTQ3NDJmM2EyZmE2MDg2ZTkwMzNiMjI1NWVjZGRjZTk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6fde7fafd45c2a5ab02775a9aac757326856cf4f",
                    "sha": "6fde7fafd45c2a5ab02775a9aac757326856cf4f",
                    "url": "https://api.github.com/repos/cython/cython/commits/6fde7fafd45c2a5ab02775a9aac757326856cf4f"
                }
            ],
            "sha": "cf0bd2d1e4742f3a2fa6086e9033b2255ecddce9",
            "url": "https://api.github.com/repos/cython/cython/commits/cf0bd2d1e4742f3a2fa6086e9033b2255ecddce9"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/df96b9ba8f22855b3527da389e72d7b557326e18/comments",
            "commit": {
                "author": {
                    "date": "2024-03-17T10:19:51Z",
                    "email": "matusvalo@users.noreply.github.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-17T10:19:51Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Cython/Compiler/Cache.py\n\nCo-authored-by: da-woods <dw-git@d-woods.co.uk>",
                "tree": {
                    "sha": "e9a3c751609e7b399d9a7da3a8dd9ec05e7b764e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e9a3c751609e7b399d9a7da3a8dd9ec05e7b764e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/df96b9ba8f22855b3527da389e72d7b557326e18",
                "verification": {
                    "payload": "tree e9a3c751609e7b399d9a7da3a8dd9ec05e7b764e\nparent cf0bd2d1e4742f3a2fa6086e9033b2255ecddce9\nauthor Matus Valo <matusvalo@users.noreply.github.com> 1710670791 +0100\ncommitter GitHub <noreply@github.com> 1710670791 +0100\n\nUpdate Cython/Compiler/Cache.py\n\nCo-authored-by: da-woods <dw-git@d-woods.co.uk>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJl9sPHCRC1aQ7uu5UhlAAAFaIQAH6XKUXh+gAFbYUEOGAKQism\nrJKrzKPAY/EEW32ZDqUuNkQSY0Ox0U+pAZdDDZQfjLEnKv03z+wyVdSVe+eeF9uZ\nweuADZrOUNISelm10e69GnlSDWcyu2T/CSULiIzxj8SN/0Q9M8Ee2t8CDke70I48\nwAsqVis+T+VDBumHamNfl7w4ztefr6AaqWmK28bJvj4qDHdWQXdxaf7cY0WCEpnS\nRlx0OEZDP5LW5U2yb5El8LaIgNPBKy9cspjPGjsFBX0Hkp1+1t+o0oLQmYdu8OK8\nYndAybI7PDWI9L1qJwAhoCktNoID6B07+1EKNiysqHo9lRXSJEZHYz2Ztw7oefxd\n+2VYAbfzoSwXkR7gTdWm3MPLbPwC3LK/Py0Jp7BEtEvI0T30v95/1WXz8IAR1GDX\n4pBC0/q8NXlMS+z2v4JheJQ1dwpPJEJ4aC4GQTTSIaqTbYduSEgIy6QEZO0ZIIO/\nrvOQa08fIr+R4b8mGvCzrODwbr7mJaj2v1GdAqt61I9ztubSaAgTmeF2X+7pe3cG\n769lwXue3QNSnemiYzGF5IMhZawidzP34a9nm2GaoT+IDc/wm+pRJ4adHgXvWtQL\neSOUbwqDb7JElyyiuESGKno6NoCBuDKqVtHq721KB/6eOWXBg5Trq2igVaNwBbE5\nRbI38IpCr6Yb3PYGPm1h\n=kV8A\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/df96b9ba8f22855b3527da389e72d7b557326e18",
            "node_id": "C_kwDOFL4z49oAKGRmOTZiOWJhOGYyMjg1NWIzNTI3ZGEzODllNzJkN2I1NTczMjZlMTg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cf0bd2d1e4742f3a2fa6086e9033b2255ecddce9",
                    "sha": "cf0bd2d1e4742f3a2fa6086e9033b2255ecddce9",
                    "url": "https://api.github.com/repos/cython/cython/commits/cf0bd2d1e4742f3a2fa6086e9033b2255ecddce9"
                }
            ],
            "sha": "df96b9ba8f22855b3527da389e72d7b557326e18",
            "url": "https://api.github.com/repos/cython/cython/commits/df96b9ba8f22855b3527da389e72d7b557326e18"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/89f5c3e470b8c55f087af0f55e64eaffb972ca95/comments",
            "commit": {
                "author": {
                    "date": "2024-03-17T10:21:02Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-17T10:21:02Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Remove unused import",
                "tree": {
                    "sha": "eb8af0df925d1722917177b847e1daa961b7af66",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/eb8af0df925d1722917177b847e1daa961b7af66"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/89f5c3e470b8c55f087af0f55e64eaffb972ca95",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/89f5c3e470b8c55f087af0f55e64eaffb972ca95",
            "node_id": "C_kwDOFL4z49oAKDg5ZjVjM2U0NzBiOGM1NWYwODdhZjBmNTVlNjRlYWZmYjk3MmNhOTU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/df96b9ba8f22855b3527da389e72d7b557326e18",
                    "sha": "df96b9ba8f22855b3527da389e72d7b557326e18",
                    "url": "https://api.github.com/repos/cython/cython/commits/df96b9ba8f22855b3527da389e72d7b557326e18"
                }
            ],
            "sha": "89f5c3e470b8c55f087af0f55e64eaffb972ca95",
            "url": "https://api.github.com/repos/cython/cython/commits/89f5c3e470b8c55f087af0f55e64eaffb972ca95"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c70242dac0c542973571696b6a00a545a8966b67/comments",
            "commit": {
                "author": {
                    "date": "2024-03-19T20:05:59Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-19T20:05:59Z",
                    "email": "matusvalo@gmail.com",
                    "name": "Matus Valo"
                },
                "message": "Move Cache.py to Cython/Build/",
                "tree": {
                    "sha": "bd5486dabb62f81e1aaedcfce95705aae0309ad7",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/bd5486dabb62f81e1aaedcfce95705aae0309ad7"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c70242dac0c542973571696b6a00a545a8966b67",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "html_url": "https://github.com/cython/cython/commit/c70242dac0c542973571696b6a00a545a8966b67",
            "node_id": "C_kwDOFL4z49oAKGM3MDI0MmRhYzBjNTQyOTczNTcxNjk2YjZhMDBhNTQ1YTg5NjZiNjc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/89f5c3e470b8c55f087af0f55e64eaffb972ca95",
                    "sha": "89f5c3e470b8c55f087af0f55e64eaffb972ca95",
                    "url": "https://api.github.com/repos/cython/cython/commits/89f5c3e470b8c55f087af0f55e64eaffb972ca95"
                }
            ],
            "sha": "c70242dac0c542973571696b6a00a545a8966b67",
            "url": "https://api.github.com/repos/cython/cython/commits/c70242dac0c542973571696b6a00a545a8966b67"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/6090/commits",
    "created_at": "2024-03-16T19:41:34Z",
    "diff_url": "https://github.com/cython/cython/pull/6090.diff",
    "draft": false,
    "head": {
        "label": "matusvalo:refactor_cache",
        "ref": "refactor_cache",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/matusvalo/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/matusvalo/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/matusvalo/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/matusvalo/cython/branches{/branch}",
            "clone_url": "https://github.com/matusvalo/cython.git",
            "collaborators_url": "https://api.github.com/repos/matusvalo/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/matusvalo/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/matusvalo/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/matusvalo/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/matusvalo/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/matusvalo/cython/contributors",
            "created_at": "2021-03-15T14:49:34Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/matusvalo/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/matusvalo/cython/downloads",
            "events_url": "https://api.github.com/repos/matusvalo/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/matusvalo/cython/forks",
            "full_name": "matusvalo/cython",
            "git_commits_url": "https://api.github.com/repos/matusvalo/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/matusvalo/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/matusvalo/cython/git/tags{/sha}",
            "git_url": "git://github.com/matusvalo/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/matusvalo/cython/hooks",
            "html_url": "https://github.com/matusvalo/cython",
            "id": 348009443,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/matusvalo/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/matusvalo/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/matusvalo/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/matusvalo/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/matusvalo/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/matusvalo/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/matusvalo/cython/merges",
            "milestones_url": "https://api.github.com/repos/matusvalo/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNDgwMDk0NDM=",
            "notifications_url": "https://api.github.com/repos/matusvalo/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/matusvalo/cython/pulls{/number}",
            "pushed_at": "2024-03-22T09:53:34Z",
            "releases_url": "https://api.github.com/repos/matusvalo/cython/releases{/id}",
            "size": 72843,
            "ssh_url": "git@github.com:matusvalo/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/matusvalo/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/matusvalo/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/matusvalo/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/matusvalo/cython/subscription",
            "svn_url": "https://github.com/matusvalo/cython",
            "tags_url": "https://api.github.com/repos/matusvalo/cython/tags",
            "teams_url": "https://api.github.com/repos/matusvalo/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/matusvalo/cython/git/trees{/sha}",
            "updated_at": "2022-01-01T09:57:48Z",
            "url": "https://api.github.com/repos/matusvalo/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "c70242dac0c542973571696b6a00a545a8966b67",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
            "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
            "followers_url": "https://api.github.com/users/matusvalo/followers",
            "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
            "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/matusvalo",
            "id": 827060,
            "login": "matusvalo",
            "node_id": "MDQ6VXNlcjgyNzA2MA==",
            "organizations_url": "https://api.github.com/users/matusvalo/orgs",
            "received_events_url": "https://api.github.com/users/matusvalo/received_events",
            "repos_url": "https://api.github.com/users/matusvalo/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/matusvalo"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/6090",
    "id": 1775661289,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/6090",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558030,
            "name": "cleanup",
            "node_id": "MDU6TGFiZWw0MjU1NTgwMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/cleanup"
        }
    ],
    "locked": false,
    "merge_commit_sha": "61b5f3c59872d7fe4021c403a9fc8b443667345d",
    "merged_at": "2024-03-20T17:15:03Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 98,
        "created_at": "2019-02-24T14:21:23Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Remove support for Python 2 and Python < 3.8.",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/65",
        "id": 4082235,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/65/labels",
        "node_id": "MDk6TWlsZXN0b25lNDA4MjIzNQ==",
        "number": 65,
        "open_issues": 18,
        "state": "open",
        "title": "3.1",
        "updated_at": "2024-03-24T10:01:41Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/65"
    },
    "node_id": "PR_kwDOABDGAc5p1nDp",
    "number": 6090,
    "patch_url": "https://github.com/cython/cython/pull/6090.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/6090/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/c70242dac0c542973571696b6a00a545a8966b67",
    "title": "Move Cython cache to separate module",
    "updated_at": "2024-03-24T07:51:07Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/6090",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
        "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
        "followers_url": "https://api.github.com/users/matusvalo/followers",
        "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
        "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/matusvalo",
        "id": 827060,
        "login": "matusvalo",
        "node_id": "MDQ6VXNlcjgyNzA2MA==",
        "organizations_url": "https://api.github.com/users/matusvalo/orgs",
        "received_events_url": "https://api.github.com/users/matusvalo/received_events",
        "repos_url": "https://api.github.com/users/matusvalo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/matusvalo"
    }
}