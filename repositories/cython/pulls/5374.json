{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/5374/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5374/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/5374"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/5374"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5374/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5374"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/4f9712c1250cc6bd562c079c3628e3c5a66b17fa"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1376,
            "forks_count": 1376,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1158,
            "open_issues_count": 1158,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2023-04-12T08:05:58Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 68090,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 7837,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2023-04-12T04:28:24Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 7837,
            "watchers_count": 7837,
            "web_commit_signoff_required": false
        },
        "sha": "d0bbecb7fba10f8a992972ea824b55a851646938",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Towards https://github.com/cython/cython/issues/4867.\r\n\r\nThis is mostly still a suggestion, but before I spend more time on it, I wanted to check what people think of the idea. As I mentioned in the issue, I think the wiki on github is orders of magnitude less visible than the checked-in & online docs, and it would be helpful to move the FAQ over. Its remoteness has let it bit-rot quite a bit already.\r\n\r\nTo make reviewing of this somewhat feasible, I tried to distinguish between small commits where I change something, and large mechanical commits that don't need to be reviewed (assuming you trust that I didn't mess up a copy & paste).\r\n\r\nThis still needs _a lot_ more editing, clean-ups, cross-referencing the existing docs, outright deletion, etc.\r\n\r\nObviously my choice of sections and how to group (and order) the questions is highly subjective and I'm very open for feedback on this. I just wanted to make _a_ choice. Mostly I've gone with absolutely trivial questions under Basics, questions under \"How do I ...?\" sorted _roughly_ in ascending order of difficulty/length/obsolteness, and then the rest.\r\n\r\nI haven't tried sorting through possible formatting issues either, but in any case, [this](https://github.com/h-vetinari/cython/blob/faq/docs/src/userguide/faq.rst) is how github would render the content.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5374#discussion_r1164117136"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5374"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1164117136"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It's probably worth to mention new pure python mode right here, because it have almost all the features and thus can be used interchangeably",
            "commit_id": "4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
            "created_at": "2023-04-12T13:12:31Z",
            "diff_hunk": "@@ -0,0 +1,1018 @@\n+.. contents::\n+\n+Basics\n+======\n+\n+Do I need to rename my ``.py`` file to ``.pyx``?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: No. Cython can compile both .py and .pyx files. The difference is that the extended Cython syntax (``cdef …``) is only available in Cython .pyx files and not in Python .py files.",
            "html_url": "https://github.com/cython/cython/pull/5374#discussion_r1164117136",
            "id": 1164117136,
            "line": 9,
            "node_id": "PRRC_kwDOABDGAc5FYwSQ",
            "original_commit_id": "4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "docs/src/userguide/faq.rst",
            "position": 9,
            "pull_request_review_id": 1381291560,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5374",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1164117136/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T13:36:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1164117136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5374#discussion_r1164135791"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5374"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1164135791"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I am pretty sure this chapter is no longer needed",
            "commit_id": "4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
            "created_at": "2023-04-12T13:26:55Z",
            "diff_hunk": "@@ -0,0 +1,1018 @@\n+.. contents::\n+\n+Basics\n+======\n+\n+Do I need to rename my ``.py`` file to ``.pyx``?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: No. Cython can compile both .py and .pyx files. The difference is that the extended Cython syntax (``cdef …``) is only available in Cython .pyx files and not in Python .py files.\n+\n+But you can use Cython's `pure Python mode<pure-mode>`_ to provide type declarations for the compilation, including Python's PEP-484 syntax for type hints.\n+\n+For cases where no interaction with external C libraries is required, this is also the recommended way to type your code, since sticking to .py files with regular Python syntax keeps the whole range of debugging, linting, formatting, profiling etc. tools for Python code available for your software development needs, which usually cannot handle the syntax of .pyx files.\n+\n+----------\n+\n+Can Cython generate C code for classes?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Yes, these classes become fully fledged Python classes.\n+\n+----------\n+\n+Can I call my Python code from C?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Yes, easily. Follow the example in Demos/callback/ in the Cython source distribution.\n+\n+----------\n+\n+How do I interface numpy arrays using Cython?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Follow the `example<numpy_tutorial>`_.\n+\n+----------\n+\n+How do I compile Cython with subpackages?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: It's highly recommended to arrange Cython modules in exactly the same Python package structure as the Python parts of the code base. As long as you don't keep your Cython code in unusual places, everything should just work.\n+\n+This is in part due to the fact that fully qualified names are resolved at compile time, and moving .so files around or adding __init__ files between the Cython compile and the Python runtime invocation means that cimports and imports may resolve differently. Failure to do this may result in errors like .pxd files not found or ``'module' object has no attribute '__pyx_capi__'``.\n+\n+----------\n+\n+How do I speed up the C compilation?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Especially with large modules, the code that Cython generates can take the C compiler quite some time to optimise. This is usually ok for production builds, but during development, this can get in the way.\n+\n+It can substantially speed up the C compiler runs to disable the code optimisation, e.g. by setting the environment variable ``CFLAGS=\"-O0 -ggdb\"`` on Linux or MacOS, which also enables full debugging symbols for better crash reports and debugger usage.  For MSVC on Windows, you can pass the option ``/Od`` to disable all optimisations.\n+\n+----------\n+\n+How do I reduce the size of the binary modules?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: The Python distutils build often includes debugging symbols in the extension modules.  The default for gcc is ``-g2``, for example. Disabling them (``CFLAGS=-g0`` for gcc), or setting them to the bare minimum that is required to produce stack traces on crashes (``CFLAGS=-g1`` for gcc), can visibly reduce the size of the binaries.\n+\n+----------\n+\n+How well is Unicode supported?",
            "html_url": "https://github.com/cython/cython/pull/5374#discussion_r1164135791",
            "id": 1164135791,
            "line": 63,
            "node_id": "PRRC_kwDOABDGAc5FY01v",
            "original_commit_id": "4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
            "original_line": 63,
            "original_position": 63,
            "original_start_line": null,
            "path": "docs/src/userguide/faq.rst",
            "position": 63,
            "pull_request_review_id": 1381291560,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5374",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1164135791/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T13:36:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1164135791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5374#discussion_r1164144126"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5374"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1164144126"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "0.29.x - the last 0.x release cycle only supports 2.7\r\n ",
            "commit_id": "4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
            "created_at": "2023-04-12T13:33:01Z",
            "diff_hunk": "@@ -0,0 +1,1018 @@\n+.. contents::\n+\n+Basics\n+======\n+\n+Do I need to rename my ``.py`` file to ``.pyx``?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: No. Cython can compile both .py and .pyx files. The difference is that the extended Cython syntax (``cdef …``) is only available in Cython .pyx files and not in Python .py files.\n+\n+But you can use Cython's `pure Python mode<pure-mode>`_ to provide type declarations for the compilation, including Python's PEP-484 syntax for type hints.\n+\n+For cases where no interaction with external C libraries is required, this is also the recommended way to type your code, since sticking to .py files with regular Python syntax keeps the whole range of debugging, linting, formatting, profiling etc. tools for Python code available for your software development needs, which usually cannot handle the syntax of .pyx files.\n+\n+----------\n+\n+Can Cython generate C code for classes?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Yes, these classes become fully fledged Python classes.\n+\n+----------\n+\n+Can I call my Python code from C?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Yes, easily. Follow the example in Demos/callback/ in the Cython source distribution.\n+\n+----------\n+\n+How do I interface numpy arrays using Cython?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Follow the `example<numpy_tutorial>`_.\n+\n+----------\n+\n+How do I compile Cython with subpackages?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: It's highly recommended to arrange Cython modules in exactly the same Python package structure as the Python parts of the code base. As long as you don't keep your Cython code in unusual places, everything should just work.\n+\n+This is in part due to the fact that fully qualified names are resolved at compile time, and moving .so files around or adding __init__ files between the Cython compile and the Python runtime invocation means that cimports and imports may resolve differently. Failure to do this may result in errors like .pxd files not found or ``'module' object has no attribute '__pyx_capi__'``.\n+\n+----------\n+\n+How do I speed up the C compilation?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Especially with large modules, the code that Cython generates can take the C compiler quite some time to optimise. This is usually ok for production builds, but during development, this can get in the way.\n+\n+It can substantially speed up the C compiler runs to disable the code optimisation, e.g. by setting the environment variable ``CFLAGS=\"-O0 -ggdb\"`` on Linux or MacOS, which also enables full debugging symbols for better crash reports and debugger usage.  For MSVC on Windows, you can pass the option ``/Od`` to disable all optimisations.\n+\n+----------\n+\n+How do I reduce the size of the binary modules?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: The Python distutils build often includes debugging symbols in the extension modules.  The default for gcc is ``-g2``, for example. Disabling them (``CFLAGS=-g0`` for gcc), or setting them to the bare minimum that is required to produce stack traces on crashes (``CFLAGS=-g1`` for gcc), can visibly reduce the size of the binaries.\n+\n+----------\n+\n+How well is Unicode supported?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: The support for Unicode is as good as CPythons, as long as you are using the Python ``unicode`` string type. But there is no equivalent C type available for Unicode strings. To prevent user errors, Cython will also disallow any implicit conversion to char* as this not going to be correct.\n+\n+There is also native support for the ``Py_UNICODE`` type that represents a single unicode character. In fact, Cython will try to infer this type for single character unicode literals, and avoid the creation of a unicode string object for them if possible. This is because many operations work much more efficiently (in plain C) on ``Py_UNICODE`` than on unicode objects.\n+\n+See the `string tutorial<string_tutorial>`_.\n+\n+\n+How do I ...?\n+=============\n+\n+How do I pickle cdef classes?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: See `the documentation<auto_pickle>`_.\n+\n+----------\n+\n+How do I use a Cython class in a C++ framework?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: See, for example, http://bitbucket.org/binet/cy-cxxfwk/src and http://groups.google.com/group/cython-users/browse_thread/thread/bc007d85b2ccc518 .\n+\n+----------\n+\n+How do I help Cython find numpy header files?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: If you are seeing errors like these:\n+\n+::\n+\n+     error: numpy/arrayobject.h: No such file or directory\n+     error: numpy/ufuncobject.h: No such file or directory\n+\n+You should modify your setup.py file to grab the numpy include directory as follows:\n+\n+::\n+\n+    import numpy\n+    ...\n+    setup(\n+        ...\n+        ext_modules = [Extension(..., include_dirs=[numpy.get_include()])]\n+    )\n+\n+----------\n+\n+How do I declare numeric or integer C types?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: In most cases, you don't need to. For types declared in ``stdint.h``, just ``cimport`` them from ``libc.stdint`` which comes with Cython, e.g.\n+\n+::\n+\n+    from libc.stdint cimport uint32_t, int64_t\n+    cdef int64_t i = 5\n+\n+For non-standard types, it's enough to provide Cython with a ``ctypedef`` declaration that maps them to a closely related standard C type, e.g.\n+\n+::\n+\n+    cdef extern from \"someheader.h\":\n+        ctypedef unsigned long MySpecialCInt_t\n+\n+    cdef MySpecialCInt_t i\n+\n+Make sure you use the original C type name in declarations, not the replacement type you chose!\n+\n+The exact size of the type at C compile time is not that important because Cython generates automatic size detection code (evaluated at C compile time). However, when your code mixes different types in arithmetic code, Cython must know about the correct signedness and the approximate longness in order to infer the appropriate result type of an expression. Therefore, when using a ``ctypedef`` as above, try to come up with a good approximation of the expected C type. Since the largest type wins in mixed arithmetic expressions, it's usually not a problem if the type turns out to be somewhat larger than what the C compiler eventually determines for a given platform. In the worst case, if your replacement type is substantially larger than the real C type (say, 'long long' instead of 'int'), you may end up with slightly slower conversion code. However, if the type is declared too small and Cython considers it smaller than other types it is used together with, Cython may infer the wrong type for an expression and may end up generating incorrect coercion code. You may or may not get a warning by the C compiler in this case.\n+\n+Also note that Cython will consider large integer literals (>32 bit signed) unsafe to use in C code and may therefore use Python objects to represent them. You can make sure a large literal is considered a safe C literal by appending a C suffix, such as 'LL' or 'UL'. Note that a single 'L' is not considered a C suffix in Python 2 code.\n+\n+----------\n+\n+How do I declare an object of type bool?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Well, that depends on whether you want the C99/C++ ``bool`` or the Python ``bool``. Previously, Cython always defaulted to the Python ``bool`` type, which led to hard-to-debug issues when users unsuspectingly used ``bool`` in wrapping C++ code. We decided to make the choice explicit -- you can import whichever you'd like:\n+\n+ * For the Python type, do ``from cpython cimport bool``.\n+ * For the C++ type, do ``from libcpp cimport bool``.\n+\n+Note that there is also a type called ``bint``, which is essentially a C ``int`` but automatically coerces from and to a Python bool value, i.e. ``cdef object x = <bint>some_c_integer_value`` gives either ``True`` or ``False``.\n+\n+----------\n+\n+How do I use ``const``?\n+^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: You can just use it in your code and in your declarations.\n+\n+----------\n+\n+How do I use builtins like ``len()`` with the C type ``char *``?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Cython maps ``len(char*)`` directly to ``strlen()``, which means that it will count the number of characters up to the first 0 byte. Similarly, ``(char*).decode(...)`` is optimised into a C-API call, and applying it to sliced ``char*`` values will skip the length counting step.\n+\n+See the `string tutorial<string_tutorial>`_.\n+\n+For other Python operations on ``char*``, the generated code may be inefficient, as a temporary object may have to get created. If you notice this for your code and think that Cython can do better, please speak up on the mailing list.\n+\n+----------\n+\n+How do I make a cdef'd class that derives from a builtin Python type such as list?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: You can just use the type as a base class in your cdef class declaration.\n+\n+The only exception are the types bytes ('str' in Python 2) and tuple, which can only be subtyped by Python classes (not cdef classes). This is considered a [[bug|https://github.com/cython/cython/issues/711|bug]]. However, you can safely subtype 'unicode' and 'list' instead.\n+\n+----------\n+\n+How do I raise an exception in Cython code that will be visible to ancestor (in the callstack) CPython code?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**:\n+\n+If your cdef or cpdef function or method does not declare a return type (as is normal in CPython code), then you get exceptions without any extra effort.\n+\n+If your cdef or cpdef function or method declares a C-style return type, then look [[here|http://docs.cython.org/src/reference/language_basics.html#error-and-exception-handling]].\n+\n+----------\n+\n+How do I declare a global variable?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**:\n+\n+::\n+\n+    global variable\n+\n+----------\n+\n+How do I assign to a global variable?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: You need to declare the variable to be global (see above) before trying to assign to it. Often this occurs when one has code like\n+\n+::\n+\n+    cdef int *data\n+\n+    def foo(n):\n+        data = malloc(n * sizeof(int))\n+\n+This will result in an error \"Cannot convert 'int *' to Python object.\" This is because, as in Python, assignment declares a local variable. Instead, you must write\n+\n+::\n+\n+    cdef int *data\n+\n+    def foo(n):\n+        global data\n+        data = malloc(n * sizeof(int))\n+\n+See http://docs.python.org/tutorial/classes.html#python-scopes-and-name-spaces for more details.\n+\n+----------\n+\n+How do I create objects or apply operators to locally created objects as pure C code?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: For methods like ``__init__`` and ``__getitem__`` the Python calling convention is mandatory and identical for all objects, so Cython cannot provide a major speed-up for them.\n+\n+To instantiate an extension type, however, the fastest way is to actually use the normal Python idiom of calling the ``__new__()`` method of a type:\n+\n+.. code:: python\n+\n+    cdef class ExampleClass:\n+        cdef int _value\n+        def __init__(self):\n+            # calling \"__new__()\" will not call \"__init__()\" !\n+            raise TypeError(\"This class cannot be instantiated from Python\")\n+\n+    cdef ExampleClass _factory():\n+        cdef ExampleClass instance = ExampleClass.__new__(ExampleClass)\n+        instance._value = 1\n+        return instance\n+\n+Note that this has similar restrictions as the normal Python code: it will not call the ``__init__()`` method (which makes it quite a bit faster). Also, while all Python class members will be initialised to None, you have to take care to initialise the C members. Either the ``__cinit__()`` method or a factory function like the one above are good places to do so.\n+\n+How do I implement a single class method in a Cython module?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Cython-defined methods don't bind by default, regardless from where they are referenced. Because of this the following does not work:\n+\n+::\n+\n+    #!python\n+    import cython_module\n+\n+    class A(object):\n+        method = cython_module.optimized_method\n+\n+``method`` is unbound and trying to call it will result in an error:\n+\n+::\n+\n+    #!python\n+    >>> a = A()\n+    >>> a.method()\n+    exceptions.TypeError: optimized_method() takes exactly one argument (0 given)\n+\n+You have can explicitly create a bound method, either in Python:\n+\n+::\n+\n+    #!python\n+    import types\n+    import cython_module\n+\n+    class A(object):\n+        pass\n+\n+    A.method = types.MethodType(cython_module.optimized_method, None, A)\n+\n+or by using the ``cython.binding`` directive to make the method bind automatically, e.g.\n+\n+::\n+\n+    cimport cython\n+    @cython.binding(True)\n+    def optimized_method(self, ...):\n+        ...\n+\n+----------\n+\n+How do I pass string buffers that may contain 0 bytes to Cython?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: See the `string tutorial<string_tutorial>`_.\n+\n+You need to use either a Python byte string object or a char*/length pair of variables.\n+\n+The normal way to convert a char* to a Python byte string is as follows:\n+\n+.. code:: python\n+\n+    #!python\n+    cdef char* s = \"a normal C byte string\"\n+    cdef bytes a_python_byte_string = s\n+\n+However, this will not work for C strings that contain 0 bytes, as a 0 byte is the normal C way of terminating a string. So the above method will cut the string at the first 0 byte. To handle this case correctly, you have to specify the total length of the string that you want to convert:\n+\n+.. code:: python\n+\n+    cdef char* s = \"an unusual \\0 containing C byte string\"\n+    a_python_byte_string = s[:21]    #  take the first 21 bytes of the string, including the \\0 byte\n+\n+Note that this will not handle the case that the specified slice length is longer than the actual C string. This code will crash if the allocated memory area of the ``char*`` is shorter.\n+\n+There is also support for decoding a C string slice efficiently into a Python unicode string. Just do this:\n+\n+.. code:: python\n+\n+    # -*- coding: ISO8859-15\n+    cdef char* s = \"a UTF-8 encoded C string with fünny chäräctörs\"\n+    cdef Py_ssize_t byte_length = 46\n+\n+    a_python_unicode_string = s[:byte_length].decode('ISO8859-15')\n+\n+----------\n+\n+How do I pass a Python string parameter on to a C library?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+See the `string tutorial<string_tutorial>`_.\n+\n+**Answer**: It depends on the semantics of the string. Imagine you have this C function:\n+\n+::\n+\n+    cdef extern from \"something.h\":\n+        cdef int c_handle_data(char* data, int length)\n+\n+For __binary data__, you can simply require byte strings at the API level, so that this will work:\n+\n+::\n+\n+    def work_with_binary_data(bytes binary_data):\n+        c_handle_data(binary_data, len(binary_data))\n+\n+It will raise an error (with a message that may or may not be appropriate for your use case) if users pass other things than a byte string.\n+\n+For __textual data__, however, you must handle Unicode data input. What you do with it depends on what your C function accepts. For example, if it requires UTF-8 encoded byte sequences, this might work:\n+\n+::\n+\n+    def work_with_text_data(text):\n+        if not isinstance(text, unicode):\n+            raise ValueError(\"requires text input, got %s\" % type(text))\n+        utf8_data = text.encode('UTF-8')\n+        c_handle_data( utf8_data, len(utf8_data) )\n+\n+Note that this also accepts subtypes of the Python unicode type. Typing the \"text\" parameter as \"unicode\" will not cover this case.\n+\n+The above is the right thing to do in Py3. However, some (not all, just some) module APIs may become more user friendly in Python 2.x if you additionally allow well defined byte strings. For example, it may make sense to allow plain ASCII strings in some cases, as they are often used for textual data in Python 2.x programs. This could be done as follows:\n+\n+::\n+\n+    from python_version cimport PY_MAJOR_VERSION\n+\n+    def work_with_text_data(text):\n+        if isinstance(text, unicode): # most common case first\n+            utf8_data = text.encode('UTF-8')\n+        elif (PY_MAJOR_VERSION < 3) and isinstance(text, str):\n+            text.decode('ASCII') # trial decoding, or however you want to check for plain ASCII data\n+            utf8_data = text\n+        else:\n+            raise ValueError(\"requires text input, got %s\" % type(text))\n+        c_handle_data(utf8_data, len(utf8_data))\n+\n+----------\n+\n+How do I use variable args?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: It can't be done cleanly yet, but the code below works:\n+\n+::\n+\n+    cdef extern from \"stdarg.h\":\n+        ctypedef struct va_list:\n+            pass\n+        ctypedef struct fake_type:\n+            pass\n+        void va_start(va_list, void* arg)\n+        void* va_arg(va_list, fake_type)\n+        void va_end(va_list)\n+        fake_type int_type \"int\"\n+\n+    cdef int foo(int n, ...):\n+        print \"starting\"\n+        cdef va_list args\n+        va_start(args, <void*>n)\n+        while n != 0:\n+            print n\n+            n = <int>va_arg(args, int_type)\n+        va_end(args)\n+        print \"done\"\n+\n+    def call_foo():\n+        foo(1, 2, 3, 0)\n+        foo(1, 2, 0)\n+\n+----------\n+\n+How do I make a standalone binary from a Python program using cython?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: You probably want a recipe something like this:\n+\n+::\n+\n+    PYVERSION=2.7\n+    foobar: foobar.py\n+        cython --embed foobar.py -o foobar.c\n+        $(CC) -I /usr/include/python$(PYVERSION) foobar.c -lpython$(PYVERSION) -o foobar\n+\n+The magic is the --embed option, which embeds a copy of the Python interpreter main in the generated C.  You'll want to change 'foobar' to reflect the name of your script, of course, and PYVERSION as appropriate.\n+\n+----------\n+\n+How do I have to wrap C code that uses the restrict qualifier?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: There currently is no way of doing this directly into C code. Cython does not understand the restrict qualifier. However you can wrap your way around it.\n+\n+See the following example code:\n+\n+slurp.h\n+-------\n+\n+::\n+\n+    #include <sys/types.h>\n+    #include <stdio.h>\n+    #include <stdlib.h>\n+    #include <regex.h>\n+    #include <Python.h>\n+\n+    int th_match(char *, char *);\n+\n+cslurp.c\n+--------\n+\n+::\n+\n+    #include \"slurp.h\"\n+\n+    int th_match(char *string, char *pattern) {\n+      int status;\n+      regex_t re;\n+      if(regcomp(&re, pattern, REG_EXTENDED|REG_NOSUB) != 0) { return 0; }\n+      status = regexec(&re, string, (size_t)0, NULL, 0);\n+      regfree(&re);\n+      if(status != 0)\n+        return 0;\n+      return 1;\n+    }\n+\n+slurp.pyx\n+---------\n+\n+::\n+\n+    cdef extern from \"slurp.h\":\n+        int th_match(char *st, char *pt)\n+\n+    class Slurp:\n+        '''\n+        This is a simple, but optimized PEG (Parser Expression Group) parser.\n+        It will parse through anything you hand it provided what you hand it\n+        has a readline() method.\n+\n+        Example:\n+            import sys\n+            from thci.ext import slurp\n+            o = slurp.Slurp()\n+            o.register_trigger('^root:.*:.*:.*:.*$', sys.stdout.write)\n+            o.process(open('/etc/passwd', 'r'))\n+        '''\n+\n+        def __init__(self):\n+            ''' __init__(self) '''\n+            self.map = {}\n+            self.idx = 0\n+\n+        def register_trigger(self, patt=None, cback=None, args=None):\n+            ''' register_trigger(self, patt=None, cback=None, args=None) '''\n+            if patt == None or cback == None:\n+                return False\n+            if args == None: args = False\n+            self.map[self.idx] = (patt, cback, args)\n+            self.idx += 0\n+            return True\n+\n+        def process(self, fp=None):\n+            ''' process(self, fp=None) '''\n+            if fp == None:\n+                return False\n+            while True:\n+                buf = fp.readline()\n+                if not buf: break\n+                for patt, cback, args in self.map.values():\n+                    if th_match(buf, patt) == True:\n+                        if args == False:\n+                            cback(buf.strip())\n+                        else:\n+                            cback(buf.strip(), args)\n+\n+This avoids the problems using the restrict qualifiers (Such as are needed with the functions declared in regex.h on FreeBSD [at least 7.X]) by\n+allowing the C compiler to handle things going from C to C, Cython's support for this even using the \"const trick\" doesn't seem to behave properly\n+(at least as of 0.12). the following commands will generate your compiled module from the above source:\n+\n+::\n+\n+    cython -o slurp.c slurp.pyx\n+    cc -shared -I/usr/include -I./ -I/usr/local/include/python2.5 -L/usr/local/lib -lpthread -lpython2.5 cslurp.c slurp.c -o slurp.so\n+\n+It is also possible to use distutils by adding the file cslurp.c (or your files name) to the list of files to be compiled for the extension.\n+\n+----------\n+\n+How do I automatically generate Cython definition files from C (.h) or C++ (.hpp) header files ?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Several people have created scripts to parse header files and automatically produce Cython bindings.\n+\n+### autowrap\n+\n+autowrap automatically generates python extension modules for wrapping C++ libraries based on annotated (commented) cython pxd files. Current features include wrapping of template classes, enums, free functions and static methods as well as converters from Python data types to (many) STL containers and back. Finally, also manually written Cython code can be incorporated for wrapping code.\n+\n+http://github.com/uweschmitt/autowrap\n+\n+### python-autopxd\n+\n+Automatically generate pxd from C headers. It uses [pycparser](https://github.com/eliben/pycparser) to parse the definitions, so the only requirement beyond python dependencies is a C preprocessor on PATH.\n+\n+https://github.com/gabrieldemarmiesse/python-autopxd2 (A friendly fork of python-autopxd, supporting recent Python versions)\n+\n+https://github.com/tarruda/python-autopxd (original version)\n+\n+----------\n+\n+How do I run doctests in Cython code (pyx files)?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**:\n+\n+Cython generates a ``__test__`` dictionary in the module that contains all docstrings of Python visible functions and classes that look like doctests (i.e. that contain ``>>>``). The doctest module will properly pick this up and run the doctests.\n+\n+This module (let's call it \"cydoctest\") offers a Cython-compatible workaround.\n+\n+::\n+\n+    #!python\n+    \"\"\"\n+    Cython-compatible wrapper for doctest.testmod().\n+\n+    Usage example, assuming a Cython module mymod.pyx is compiled.\n+    This is run from the command line, passing a command to Python:\n+    python -c \"import cydoctest, mymod; cydoctest.testmod(mymod)\"\n+\n+    (This still won't let a Cython module run its own doctests\n+    when called with \"python mymod.py\", but it's pretty close.\n+    Further options can be passed to testmod() as desired, e.g.\n+    verbose=True.)\n+    \"\"\"\n+\n+    import doctest\n+    import inspect\n+\n+    def _from_module(module, object):\n+        \"\"\"\n+        Return true if the given object is defined in the given module.\n+        \"\"\"\n+        if module is None:\n+            return True\n+        elif inspect.getmodule(object) is not None:\n+            return module is inspect.getmodule(object)\n+        elif inspect.isfunction(object):\n+            return module.__dict__ is object.func_globals\n+        elif inspect.isclass(object):\n+            return module.__name__ == object.__module__\n+        elif hasattr(object, '__module__'):\n+            return module.__name__ == object.__module__\n+        elif isinstance(object, property):\n+            return True # [XX] no way not be sure.\n+        else:\n+            raise ValueError(\"object must be a class or function\")\n+\n+    def fix_module_doctest(module):\n+        \"\"\"\n+        Extract docstrings from cython functions, that would be skipped by doctest\n+        otherwise.\n+        \"\"\"\n+        module.__test__ = {}\n+        for name in dir(module):\n+           value = getattr(module, name)\n+           if inspect.isbuiltin(value) and isinstance(value.__doc__, str) and _from_module(module, value):\n+               module.__test__[name] = value.__doc__\n+\n+    def testmod(m=None, *args, **kwargs):\n+        \"\"\"\n+        Fix a Cython module's doctests, then call doctest.testmod()\n+\n+        All other arguments are passed directly to doctest.testmod().\n+        \"\"\"\n+        fix_module_doctest(m)\n+        doctest.testmod(m, *args, **kwargs)\n+\n+----------\n+\n+How do I work around the ``-Wno-long-double error`` when installing on OS X?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**:\n+\n+This is a known issue in OS X with some Python installs. It has nothing to do with Cython, and you will run\n+on the same trouble **every** time you want to build an C extension\n+module.\n+\n+This is the most sane (if not the only) way to fix it:\n+\n+1) Enter Python prompt, and type this:\n+\n+::\n+\n+    >>> from distutils import sysconfig\n+    >>> sysconfig.get_makefile_filename()\n+\n+That should output the full path of a 'Makefile'... Open that file\n+with any text editor and remove  all occurrences of '-Wno-long-double'\n+flag.\n+\n+----------\n+\n+How do I work around the \"unable to find vcvarsall.bat\" error when using MinGW as the compiler (on Windows)?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: This error means that Python cannot find the C++ compiler on your system. Normally, this is managed by distutils, but it may happen that it's not yet up-to-date.\n+\n+For example, you may be using this in setup.py:\n+\n+```\n+from distutils.core import setup\n+from distutils.extension import Extension\n+```\n+\n+Instead, you can try to load setuptools, which will monkey-patch distutils to find vcvarsall.bat:\n+\n+```\n+try:\n+    from setuptools import setup\n+    from setuptools import Extension\n+except ImportError:\n+    from distutils.core import setup\n+    from distutils.extension import Extension\n+```\n+\n+In IPython, you can just import setuptools, like this:\n+\n+```\n+# First cell:\n+    import setuptools\n+    %load_ext Cython\n+\n+# Second cell:\n+    %%cython -a\n+    import cython\n+    cimport cython\n+\n+    cdef int alpha = 255\n+    print alpha\n+```\n+\n+If this is unsuccessful, try the following workarounds.\n+\n+If no python libraries are imported, define the compiler by adding the following statement:\n+```\n+--compiler=mingw32\n+```\n+\n+Therefore, the line should read:\n+```\n+python pyprog.py build_ext --compiler=mingw32 --inplace\n+```\n+This, however, does not solve the issue when using the pyximport method (see the tutorial).\n+Alternatively, the following patch can be applied.\n+\n+**NOTE: This is untested.**\n+\n+Open the file pyximport/pyxbuild.py and add the four lines marked with \"+\" at the appropriate place.\n+```diff\n+diff -r 7fbe931e5ab7 pyximport/pyxbuild.py\n+--- a/pyximport/pyxbuild.py Wed Sep 16 15:50:00 2009 +0200\n++++ b/pyximport/pyxbuild.py Fri Sep 18 12:39:51 2009 -0300\n+@@ -55,6 +55,11 @@\n+build = dist.get_command_obj('build')\n+build.build_base = pyxbuild_dir\n+\n++ config_files = dist.find_config_files()\n++ try: config_files.remove('setup.cfg')\n++ except ValueError: pass\n++ dist.parse_config_files(config_files)\n++\n+try:\n+ok = dist.parse_command_line()\n+except DistutilsArgError:\n+```\n+\n+Finally, if this does not work, create a file called \"pydistutils.cfg\" in notepad and give it\n+the contents:\n+```ini\n+[build_ext]\n+compiler=mingw32\n+```\n+Save this to the home directory, which can be found by typing at the command\n+prompt:\n+```python\n+import os\n+os.path.expanduser('~')\n+```\n+\n+----------\n+\n+How do I access native Python file objects?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**:  See this small example of how to access Python file objects:\n+\n+::\n+\n+    #!python\n+    # Idiom for accessing Python files.\n+    # First, declare the Python macro to access files:\n+    cdef extern from \"Python.h\":\n+        ctypedef struct FILE\n+        FILE* PyFile_AsFile(object)\n+        void  fprintf(FILE* f, char* s, char* s)\n+    # Next, enter the builtin file class into the namespace:\n+    cdef extern from \"fileobject.h\":\n+        ctypedef class __builtin__.file [object PyFileObject]:\n+            pass\n+    # Now declare the C function that requires a file:\n+    cdef void c_printSomething(FILE* outFile, char* str):\n+        fprintf(outFile, \"%s\", str)\n+    # Now create a class or some other definition that uses the function:\n+    ctypedef class ExampleUsingFile:\n+        def printSomething(self, file outFile, char* str):\n+            c_printSomething(PyFile_AsFile(outFile), str)\n+\n+with simple test:\n+\n+::\n+\n+    #!python\n+    import sys\n+    import file_example\n+    x = file_example.ExampleUsingFile()\n+    x.printSomething(sys.stdout, \"hello world!\\n\")\n+\n+**Note**: This does no longer work in Python 3, where file objects have no representation at the C-API level.\n+\n+\n+Explanations\n+============\n+\n+What is the difference between a ``.pxd`` and ``.pxi`` file? When should either be used?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+SHORT **Answer**:  You should always use .pxd files for declarations and .pxi files only for code that you want to include.\n+\n+MEDIUM **Answer**:  A .pxd files are lists of declarations, .pxi files are textually included, and their use for declarations is a historical artifact of the way common declarations were shared before .pxd files existed.\n+\n+LONG **Answer**:  A .pxd file is a declaration file, and is used to declare classes, methods, etc. in a C extension module, (typically as implemented in a .pyx file of the same name). It can contain declarations only, i.e. no executable statements. One can ``cimport`` things from .pxd files just as one would import things in Python. Two separate modules cimporting from the same .pxd file will receive identical objects.\n+\n+A .pxi file is an include file and is textually included (similar to the C ``#include`` directive) and may contain any valid Cython code at the given point in the program. It may contain implementations (e.g. common cdef inline functions) which will be copied into both files. For example, this means that if I have a class A declared in a.pxi, and both b.pyx and c.pyx do ``include a.pxi`` then I will have two distinct classes b.A and c.A. Interfaces to C libraries (including the Python/C API) have usually been declared in .pxi files (as they are not associated to a specific module). It is also re-parsed at every invocation.\n+\n+Now that \"cimport *\" can be used, there is no reason to use .pxi files for external declarations.\n+\n+----------\n+\n+What is better, a single big module or multiple separate modules?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: In short, one big module is clumsy to handle but allows broader optimisations by the C compiler.\n+\n+The compile time might actually decrease for multiple modules since the build can be parallelised. The \"build_ext\" command in distutils has a \"-j\" option since Py3.5. Also, smaller modules are usually faster to compile by the C compiler, because some optimisations may involve non-linear overhead.\n+\n+The distribution size, and the size per module, will probably increase when splitting a module because there are some things that Cython has to copy into each module. There is a [[feature request|https://github.com/cython/cython/issues/2356]] that would mitigate this.\n+\n+C calls between modules are slightly slower than C calls inside of a module, simply because the C compiler cannot optimise and/or inline them. You will have to use shared .pxd declarations for them, which will then call through a function pointer. If modules use a functional split, however, this should not hurt too much. It might still be a good idea to create a shared .pxd file (or .pxi) with inline functions for performance critical code that is used in multiple modules.\n+\n+When splitting an existing module, you will also have to deal with the API changes. Leaving some legacy imports here and there, or turning a module into a package that merges the module namespaces back together via imports, might prevent code breakage for users of your original module when you move names around and redistribute them across multiple modules.\n+\n+----------\n+\n+What is the difference between ``PyObject*`` and ``object``?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: A variable of type ``PyObject*`` is a simple C pointer, just like ``void*``. It is not reference counted, which is sometimes referred to as a borrowed reference. An ``object`` variable is an owned reference to a Python object. You can convert one into the other by casting:\n+\n+::\n+\n+    from cpython.ref cimport PyObject\n+\n+    py_object = [1,2,3]\n+\n+    cdef PyObject* ptr = <PyObject*>py_object\n+\n+    cdef object l = <object>ptr    # this increases the reference count to the list\n+\n+Note that the lifetime of the object is only bound to its owned references, not to any C pointers that happen to point to it. This means that ``ptr`` in the example above becomes invalid as soon as the last reference to the object dies:\n+\n+::\n+\n+    py_object = [1,2,3]\n+    cdef PyObject* ptr = <PyObject*>py_object\n+    py_object = None   # last reference to list dies here\n+\n+    # ptr now points to a dead object\n+    print(<object>ptr)   # expect a crash here!\n+\n+Pointers are commonly used when passing objects through C callbacks, e.g.\n+\n+::\n+\n+    cdef int call_it_from_c(void* py_function, void* args):\n+        py_args = <tuple>args if args is not NULL else ()\n+        return (<object>py_function)(*py_args)\n+\n+    def py_func(a,b,c):\n+        print(a,b,c)\n+        return -1\n+\n+    args = [1,2,3]\n+\n+    call_it_from_c(<PyObject*>py_func, <PyObject*>args)\n+\n+Once again, care must be taken to keep the objects alive as long as any pointers to them are still in use.\n+\n+----------\n+\n+Why does ``**`` on int literals not work (as it seems to do in Pyrex)?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: It works as expected in recent versions of Cython.\n+\n+----------\n+\n+Why does Cython not always give errors for uninitialized variables?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Cython does some static checks for variable initialization before use during  compile time, but these are very basic, as Cython has no definite knowledge  what paths of code will be taken at runtime:\n+\n+Consider the following\n+\n+.. code:: python\n+\n+    def testUnboundedLocal1():\n+       if False:\n+          c = 1\n+       print c\n+    def testUnboundedLocal2():\n+       print c\n+\n+With CPython, both functions lead to the following exception:\n+\n+::\n+\n+    NameError: global name 'c' is not defined\n+\n+With Cython, the first variant prints \"None\", the second variant leads to a  compile time error. Both behaviours differ from CPython's.\n+\n+This is considered a BUG and will change in the future.\n+\n+----------\n+\n+Why does a function with cdef'd parameters accept None?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: It is a fairly common idiom in Python to use ``None`` as a way to mean \"no value\" or \"invalid\". This doesn't play well with C, as ``None`` is not compatible with any C type. To accommodate for this, the default behavior is for functions with cdefed parameters to also accept None. This behavior was inherited from Pyrex, and while it has been proposed that it be changed, it will likely stay (at least for a while) for backwards capability.\n+\n+You have four choices for how to handle ``None`` in your code:\n+\n+1. In Cython 3.x, use Python type annotations instead of Cython syntax. Python type annotations distinguish between ``func(x: MyType)`` and ``func(x: Optional[MyType])``, where the first **disallows** ``None`` and the second explicitly allows it.  ``func(x: MyType = None)`` allows it as well because it is explicitly required by the provided default value.\n+\n+2. If you want to consider ``None`` invalid input, then you need to write code that checks for it, and raised an appropriate exception.\n+\n+3. If you want Cython to raise an exception if ``None`` is passed in for an extension type parameter, you can use the ``not None`` declaration:\n+\n+   ::\n+\n+       def foo(MyClass val not None): <...>\n+\n+   which is a short-hand for\n+\n+   ::\n+\n+       def foo(MyClass val):\n+           if val is None: raise <...>\n+           <...>\n+\n+4. You can also put ``#cython: nonecheck=True`` at the top of your file and all access will be checked for None, but it\n+   will slow things down, as it is adding a check on every access, rather that once on function call.\n+\n+\n+About the project\n+=================\n+\n+Is Cython a Python implementation?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Not officially, no. However, it compiles almost all existing Python code, which gets it pretty close to a real Python implementation. The result depends on the CPython runtime, though, which we consider a major compatibility advantage. In any case, it is an official goal for Cython to compile regular Python code and run (most of) the normal Python test suite - obviously faster than CPython. ;-)\n+\n+----------\n+\n+Is Cython faster than CPython?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: For most things, yes. For example, a Cython compiled pybench runs more than 30% faster in total, while being 60-90% faster on control structures like ``if-elif-else`` and ``for``-loops. We regularly run the tests from the CPython benchmark suite (which includes Django templates, 2to3, computational benchmarks and other applications) and most of them work out-of-the-box without modifications or static typing, with a performance increase of 20-60%.\n+\n+However the main advantage of Cython is that it scales very well to even greater performance requirements. For code that operates heavily on common builtin types (lists, dicts, strings), Cython can often speed up processing loops by factors. For numerical code, speed-ups of 100-1000 times compared to CPython are not unusual, and are achieved by simply adding static type declarations to performance critical parts of the code, thus trading Python's dynamic typing for speed. As this can be done at any granularity in the code, Cython makes it easy to write simple Python code that is fast enough, and just tune the critical 5% of your code into maximum performance by using static C types in just the right places.\n+\n+----------\n+\n+What Python versions does Cython support?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: From Cython 0.21 on, the supported versions are 2.6, 2.7 and 3.4+. Cython 3.0 removes support for Python 2.6 and requires either Python 2.7 or Python 3.4+. Python 2.x support is scheduled for removal in Cython 3.1, which will probably require Python 3.6 or later at the time of its release.",
            "html_url": "https://github.com/cython/cython/pull/5374#discussion_r1164144126",
            "id": 1164144126,
            "line": 939,
            "node_id": "PRRC_kwDOABDGAc5FY23-",
            "original_commit_id": "4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
            "original_line": 939,
            "original_position": 939,
            "original_start_line": null,
            "path": "docs/src/userguide/faq.rst",
            "position": 939,
            "pull_request_review_id": 1381291560,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5374",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1164144126/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T13:36:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1164144126",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5374#discussion_r1164145432"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5374"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1164145432"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\nPyrex/Cython doesn't do anything similar, and linking against Python is not restricted by the Python License, so the output belongs to the User, no other rights or restrictions involved.\r\n```",
            "commit_id": "4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
            "created_at": "2023-04-12T13:34:01Z",
            "diff_hunk": "@@ -0,0 +1,1018 @@\n+.. contents::\n+\n+Basics\n+======\n+\n+Do I need to rename my ``.py`` file to ``.pyx``?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: No. Cython can compile both .py and .pyx files. The difference is that the extended Cython syntax (``cdef …``) is only available in Cython .pyx files and not in Python .py files.\n+\n+But you can use Cython's `pure Python mode<pure-mode>`_ to provide type declarations for the compilation, including Python's PEP-484 syntax for type hints.\n+\n+For cases where no interaction with external C libraries is required, this is also the recommended way to type your code, since sticking to .py files with regular Python syntax keeps the whole range of debugging, linting, formatting, profiling etc. tools for Python code available for your software development needs, which usually cannot handle the syntax of .pyx files.\n+\n+----------\n+\n+Can Cython generate C code for classes?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Yes, these classes become fully fledged Python classes.\n+\n+----------\n+\n+Can I call my Python code from C?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Yes, easily. Follow the example in Demos/callback/ in the Cython source distribution.\n+\n+----------\n+\n+How do I interface numpy arrays using Cython?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Follow the `example<numpy_tutorial>`_.\n+\n+----------\n+\n+How do I compile Cython with subpackages?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: It's highly recommended to arrange Cython modules in exactly the same Python package structure as the Python parts of the code base. As long as you don't keep your Cython code in unusual places, everything should just work.\n+\n+This is in part due to the fact that fully qualified names are resolved at compile time, and moving .so files around or adding __init__ files between the Cython compile and the Python runtime invocation means that cimports and imports may resolve differently. Failure to do this may result in errors like .pxd files not found or ``'module' object has no attribute '__pyx_capi__'``.\n+\n+----------\n+\n+How do I speed up the C compilation?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Especially with large modules, the code that Cython generates can take the C compiler quite some time to optimise. This is usually ok for production builds, but during development, this can get in the way.\n+\n+It can substantially speed up the C compiler runs to disable the code optimisation, e.g. by setting the environment variable ``CFLAGS=\"-O0 -ggdb\"`` on Linux or MacOS, which also enables full debugging symbols for better crash reports and debugger usage.  For MSVC on Windows, you can pass the option ``/Od`` to disable all optimisations.\n+\n+----------\n+\n+How do I reduce the size of the binary modules?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: The Python distutils build often includes debugging symbols in the extension modules.  The default for gcc is ``-g2``, for example. Disabling them (``CFLAGS=-g0`` for gcc), or setting them to the bare minimum that is required to produce stack traces on crashes (``CFLAGS=-g1`` for gcc), can visibly reduce the size of the binaries.\n+\n+----------\n+\n+How well is Unicode supported?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: The support for Unicode is as good as CPythons, as long as you are using the Python ``unicode`` string type. But there is no equivalent C type available for Unicode strings. To prevent user errors, Cython will also disallow any implicit conversion to char* as this not going to be correct.\n+\n+There is also native support for the ``Py_UNICODE`` type that represents a single unicode character. In fact, Cython will try to infer this type for single character unicode literals, and avoid the creation of a unicode string object for them if possible. This is because many operations work much more efficiently (in plain C) on ``Py_UNICODE`` than on unicode objects.\n+\n+See the `string tutorial<string_tutorial>`_.\n+\n+\n+How do I ...?\n+=============\n+\n+How do I pickle cdef classes?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: See `the documentation<auto_pickle>`_.\n+\n+----------\n+\n+How do I use a Cython class in a C++ framework?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: See, for example, http://bitbucket.org/binet/cy-cxxfwk/src and http://groups.google.com/group/cython-users/browse_thread/thread/bc007d85b2ccc518 .\n+\n+----------\n+\n+How do I help Cython find numpy header files?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: If you are seeing errors like these:\n+\n+::\n+\n+     error: numpy/arrayobject.h: No such file or directory\n+     error: numpy/ufuncobject.h: No such file or directory\n+\n+You should modify your setup.py file to grab the numpy include directory as follows:\n+\n+::\n+\n+    import numpy\n+    ...\n+    setup(\n+        ...\n+        ext_modules = [Extension(..., include_dirs=[numpy.get_include()])]\n+    )\n+\n+----------\n+\n+How do I declare numeric or integer C types?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: In most cases, you don't need to. For types declared in ``stdint.h``, just ``cimport`` them from ``libc.stdint`` which comes with Cython, e.g.\n+\n+::\n+\n+    from libc.stdint cimport uint32_t, int64_t\n+    cdef int64_t i = 5\n+\n+For non-standard types, it's enough to provide Cython with a ``ctypedef`` declaration that maps them to a closely related standard C type, e.g.\n+\n+::\n+\n+    cdef extern from \"someheader.h\":\n+        ctypedef unsigned long MySpecialCInt_t\n+\n+    cdef MySpecialCInt_t i\n+\n+Make sure you use the original C type name in declarations, not the replacement type you chose!\n+\n+The exact size of the type at C compile time is not that important because Cython generates automatic size detection code (evaluated at C compile time). However, when your code mixes different types in arithmetic code, Cython must know about the correct signedness and the approximate longness in order to infer the appropriate result type of an expression. Therefore, when using a ``ctypedef`` as above, try to come up with a good approximation of the expected C type. Since the largest type wins in mixed arithmetic expressions, it's usually not a problem if the type turns out to be somewhat larger than what the C compiler eventually determines for a given platform. In the worst case, if your replacement type is substantially larger than the real C type (say, 'long long' instead of 'int'), you may end up with slightly slower conversion code. However, if the type is declared too small and Cython considers it smaller than other types it is used together with, Cython may infer the wrong type for an expression and may end up generating incorrect coercion code. You may or may not get a warning by the C compiler in this case.\n+\n+Also note that Cython will consider large integer literals (>32 bit signed) unsafe to use in C code and may therefore use Python objects to represent them. You can make sure a large literal is considered a safe C literal by appending a C suffix, such as 'LL' or 'UL'. Note that a single 'L' is not considered a C suffix in Python 2 code.\n+\n+----------\n+\n+How do I declare an object of type bool?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Well, that depends on whether you want the C99/C++ ``bool`` or the Python ``bool``. Previously, Cython always defaulted to the Python ``bool`` type, which led to hard-to-debug issues when users unsuspectingly used ``bool`` in wrapping C++ code. We decided to make the choice explicit -- you can import whichever you'd like:\n+\n+ * For the Python type, do ``from cpython cimport bool``.\n+ * For the C++ type, do ``from libcpp cimport bool``.\n+\n+Note that there is also a type called ``bint``, which is essentially a C ``int`` but automatically coerces from and to a Python bool value, i.e. ``cdef object x = <bint>some_c_integer_value`` gives either ``True`` or ``False``.\n+\n+----------\n+\n+How do I use ``const``?\n+^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: You can just use it in your code and in your declarations.\n+\n+----------\n+\n+How do I use builtins like ``len()`` with the C type ``char *``?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Cython maps ``len(char*)`` directly to ``strlen()``, which means that it will count the number of characters up to the first 0 byte. Similarly, ``(char*).decode(...)`` is optimised into a C-API call, and applying it to sliced ``char*`` values will skip the length counting step.\n+\n+See the `string tutorial<string_tutorial>`_.\n+\n+For other Python operations on ``char*``, the generated code may be inefficient, as a temporary object may have to get created. If you notice this for your code and think that Cython can do better, please speak up on the mailing list.\n+\n+----------\n+\n+How do I make a cdef'd class that derives from a builtin Python type such as list?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: You can just use the type as a base class in your cdef class declaration.\n+\n+The only exception are the types bytes ('str' in Python 2) and tuple, which can only be subtyped by Python classes (not cdef classes). This is considered a [[bug|https://github.com/cython/cython/issues/711|bug]]. However, you can safely subtype 'unicode' and 'list' instead.\n+\n+----------\n+\n+How do I raise an exception in Cython code that will be visible to ancestor (in the callstack) CPython code?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**:\n+\n+If your cdef or cpdef function or method does not declare a return type (as is normal in CPython code), then you get exceptions without any extra effort.\n+\n+If your cdef or cpdef function or method declares a C-style return type, then look [[here|http://docs.cython.org/src/reference/language_basics.html#error-and-exception-handling]].\n+\n+----------\n+\n+How do I declare a global variable?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**:\n+\n+::\n+\n+    global variable\n+\n+----------\n+\n+How do I assign to a global variable?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: You need to declare the variable to be global (see above) before trying to assign to it. Often this occurs when one has code like\n+\n+::\n+\n+    cdef int *data\n+\n+    def foo(n):\n+        data = malloc(n * sizeof(int))\n+\n+This will result in an error \"Cannot convert 'int *' to Python object.\" This is because, as in Python, assignment declares a local variable. Instead, you must write\n+\n+::\n+\n+    cdef int *data\n+\n+    def foo(n):\n+        global data\n+        data = malloc(n * sizeof(int))\n+\n+See http://docs.python.org/tutorial/classes.html#python-scopes-and-name-spaces for more details.\n+\n+----------\n+\n+How do I create objects or apply operators to locally created objects as pure C code?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: For methods like ``__init__`` and ``__getitem__`` the Python calling convention is mandatory and identical for all objects, so Cython cannot provide a major speed-up for them.\n+\n+To instantiate an extension type, however, the fastest way is to actually use the normal Python idiom of calling the ``__new__()`` method of a type:\n+\n+.. code:: python\n+\n+    cdef class ExampleClass:\n+        cdef int _value\n+        def __init__(self):\n+            # calling \"__new__()\" will not call \"__init__()\" !\n+            raise TypeError(\"This class cannot be instantiated from Python\")\n+\n+    cdef ExampleClass _factory():\n+        cdef ExampleClass instance = ExampleClass.__new__(ExampleClass)\n+        instance._value = 1\n+        return instance\n+\n+Note that this has similar restrictions as the normal Python code: it will not call the ``__init__()`` method (which makes it quite a bit faster). Also, while all Python class members will be initialised to None, you have to take care to initialise the C members. Either the ``__cinit__()`` method or a factory function like the one above are good places to do so.\n+\n+How do I implement a single class method in a Cython module?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Cython-defined methods don't bind by default, regardless from where they are referenced. Because of this the following does not work:\n+\n+::\n+\n+    #!python\n+    import cython_module\n+\n+    class A(object):\n+        method = cython_module.optimized_method\n+\n+``method`` is unbound and trying to call it will result in an error:\n+\n+::\n+\n+    #!python\n+    >>> a = A()\n+    >>> a.method()\n+    exceptions.TypeError: optimized_method() takes exactly one argument (0 given)\n+\n+You have can explicitly create a bound method, either in Python:\n+\n+::\n+\n+    #!python\n+    import types\n+    import cython_module\n+\n+    class A(object):\n+        pass\n+\n+    A.method = types.MethodType(cython_module.optimized_method, None, A)\n+\n+or by using the ``cython.binding`` directive to make the method bind automatically, e.g.\n+\n+::\n+\n+    cimport cython\n+    @cython.binding(True)\n+    def optimized_method(self, ...):\n+        ...\n+\n+----------\n+\n+How do I pass string buffers that may contain 0 bytes to Cython?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: See the `string tutorial<string_tutorial>`_.\n+\n+You need to use either a Python byte string object or a char*/length pair of variables.\n+\n+The normal way to convert a char* to a Python byte string is as follows:\n+\n+.. code:: python\n+\n+    #!python\n+    cdef char* s = \"a normal C byte string\"\n+    cdef bytes a_python_byte_string = s\n+\n+However, this will not work for C strings that contain 0 bytes, as a 0 byte is the normal C way of terminating a string. So the above method will cut the string at the first 0 byte. To handle this case correctly, you have to specify the total length of the string that you want to convert:\n+\n+.. code:: python\n+\n+    cdef char* s = \"an unusual \\0 containing C byte string\"\n+    a_python_byte_string = s[:21]    #  take the first 21 bytes of the string, including the \\0 byte\n+\n+Note that this will not handle the case that the specified slice length is longer than the actual C string. This code will crash if the allocated memory area of the ``char*`` is shorter.\n+\n+There is also support for decoding a C string slice efficiently into a Python unicode string. Just do this:\n+\n+.. code:: python\n+\n+    # -*- coding: ISO8859-15\n+    cdef char* s = \"a UTF-8 encoded C string with fünny chäräctörs\"\n+    cdef Py_ssize_t byte_length = 46\n+\n+    a_python_unicode_string = s[:byte_length].decode('ISO8859-15')\n+\n+----------\n+\n+How do I pass a Python string parameter on to a C library?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+See the `string tutorial<string_tutorial>`_.\n+\n+**Answer**: It depends on the semantics of the string. Imagine you have this C function:\n+\n+::\n+\n+    cdef extern from \"something.h\":\n+        cdef int c_handle_data(char* data, int length)\n+\n+For __binary data__, you can simply require byte strings at the API level, so that this will work:\n+\n+::\n+\n+    def work_with_binary_data(bytes binary_data):\n+        c_handle_data(binary_data, len(binary_data))\n+\n+It will raise an error (with a message that may or may not be appropriate for your use case) if users pass other things than a byte string.\n+\n+For __textual data__, however, you must handle Unicode data input. What you do with it depends on what your C function accepts. For example, if it requires UTF-8 encoded byte sequences, this might work:\n+\n+::\n+\n+    def work_with_text_data(text):\n+        if not isinstance(text, unicode):\n+            raise ValueError(\"requires text input, got %s\" % type(text))\n+        utf8_data = text.encode('UTF-8')\n+        c_handle_data( utf8_data, len(utf8_data) )\n+\n+Note that this also accepts subtypes of the Python unicode type. Typing the \"text\" parameter as \"unicode\" will not cover this case.\n+\n+The above is the right thing to do in Py3. However, some (not all, just some) module APIs may become more user friendly in Python 2.x if you additionally allow well defined byte strings. For example, it may make sense to allow plain ASCII strings in some cases, as they are often used for textual data in Python 2.x programs. This could be done as follows:\n+\n+::\n+\n+    from python_version cimport PY_MAJOR_VERSION\n+\n+    def work_with_text_data(text):\n+        if isinstance(text, unicode): # most common case first\n+            utf8_data = text.encode('UTF-8')\n+        elif (PY_MAJOR_VERSION < 3) and isinstance(text, str):\n+            text.decode('ASCII') # trial decoding, or however you want to check for plain ASCII data\n+            utf8_data = text\n+        else:\n+            raise ValueError(\"requires text input, got %s\" % type(text))\n+        c_handle_data(utf8_data, len(utf8_data))\n+\n+----------\n+\n+How do I use variable args?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: It can't be done cleanly yet, but the code below works:\n+\n+::\n+\n+    cdef extern from \"stdarg.h\":\n+        ctypedef struct va_list:\n+            pass\n+        ctypedef struct fake_type:\n+            pass\n+        void va_start(va_list, void* arg)\n+        void* va_arg(va_list, fake_type)\n+        void va_end(va_list)\n+        fake_type int_type \"int\"\n+\n+    cdef int foo(int n, ...):\n+        print \"starting\"\n+        cdef va_list args\n+        va_start(args, <void*>n)\n+        while n != 0:\n+            print n\n+            n = <int>va_arg(args, int_type)\n+        va_end(args)\n+        print \"done\"\n+\n+    def call_foo():\n+        foo(1, 2, 3, 0)\n+        foo(1, 2, 0)\n+\n+----------\n+\n+How do I make a standalone binary from a Python program using cython?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: You probably want a recipe something like this:\n+\n+::\n+\n+    PYVERSION=2.7\n+    foobar: foobar.py\n+        cython --embed foobar.py -o foobar.c\n+        $(CC) -I /usr/include/python$(PYVERSION) foobar.c -lpython$(PYVERSION) -o foobar\n+\n+The magic is the --embed option, which embeds a copy of the Python interpreter main in the generated C.  You'll want to change 'foobar' to reflect the name of your script, of course, and PYVERSION as appropriate.\n+\n+----------\n+\n+How do I have to wrap C code that uses the restrict qualifier?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: There currently is no way of doing this directly into C code. Cython does not understand the restrict qualifier. However you can wrap your way around it.\n+\n+See the following example code:\n+\n+slurp.h\n+-------\n+\n+::\n+\n+    #include <sys/types.h>\n+    #include <stdio.h>\n+    #include <stdlib.h>\n+    #include <regex.h>\n+    #include <Python.h>\n+\n+    int th_match(char *, char *);\n+\n+cslurp.c\n+--------\n+\n+::\n+\n+    #include \"slurp.h\"\n+\n+    int th_match(char *string, char *pattern) {\n+      int status;\n+      regex_t re;\n+      if(regcomp(&re, pattern, REG_EXTENDED|REG_NOSUB) != 0) { return 0; }\n+      status = regexec(&re, string, (size_t)0, NULL, 0);\n+      regfree(&re);\n+      if(status != 0)\n+        return 0;\n+      return 1;\n+    }\n+\n+slurp.pyx\n+---------\n+\n+::\n+\n+    cdef extern from \"slurp.h\":\n+        int th_match(char *st, char *pt)\n+\n+    class Slurp:\n+        '''\n+        This is a simple, but optimized PEG (Parser Expression Group) parser.\n+        It will parse through anything you hand it provided what you hand it\n+        has a readline() method.\n+\n+        Example:\n+            import sys\n+            from thci.ext import slurp\n+            o = slurp.Slurp()\n+            o.register_trigger('^root:.*:.*:.*:.*$', sys.stdout.write)\n+            o.process(open('/etc/passwd', 'r'))\n+        '''\n+\n+        def __init__(self):\n+            ''' __init__(self) '''\n+            self.map = {}\n+            self.idx = 0\n+\n+        def register_trigger(self, patt=None, cback=None, args=None):\n+            ''' register_trigger(self, patt=None, cback=None, args=None) '''\n+            if patt == None or cback == None:\n+                return False\n+            if args == None: args = False\n+            self.map[self.idx] = (patt, cback, args)\n+            self.idx += 0\n+            return True\n+\n+        def process(self, fp=None):\n+            ''' process(self, fp=None) '''\n+            if fp == None:\n+                return False\n+            while True:\n+                buf = fp.readline()\n+                if not buf: break\n+                for patt, cback, args in self.map.values():\n+                    if th_match(buf, patt) == True:\n+                        if args == False:\n+                            cback(buf.strip())\n+                        else:\n+                            cback(buf.strip(), args)\n+\n+This avoids the problems using the restrict qualifiers (Such as are needed with the functions declared in regex.h on FreeBSD [at least 7.X]) by\n+allowing the C compiler to handle things going from C to C, Cython's support for this even using the \"const trick\" doesn't seem to behave properly\n+(at least as of 0.12). the following commands will generate your compiled module from the above source:\n+\n+::\n+\n+    cython -o slurp.c slurp.pyx\n+    cc -shared -I/usr/include -I./ -I/usr/local/include/python2.5 -L/usr/local/lib -lpthread -lpython2.5 cslurp.c slurp.c -o slurp.so\n+\n+It is also possible to use distutils by adding the file cslurp.c (or your files name) to the list of files to be compiled for the extension.\n+\n+----------\n+\n+How do I automatically generate Cython definition files from C (.h) or C++ (.hpp) header files ?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Several people have created scripts to parse header files and automatically produce Cython bindings.\n+\n+### autowrap\n+\n+autowrap automatically generates python extension modules for wrapping C++ libraries based on annotated (commented) cython pxd files. Current features include wrapping of template classes, enums, free functions and static methods as well as converters from Python data types to (many) STL containers and back. Finally, also manually written Cython code can be incorporated for wrapping code.\n+\n+http://github.com/uweschmitt/autowrap\n+\n+### python-autopxd\n+\n+Automatically generate pxd from C headers. It uses [pycparser](https://github.com/eliben/pycparser) to parse the definitions, so the only requirement beyond python dependencies is a C preprocessor on PATH.\n+\n+https://github.com/gabrieldemarmiesse/python-autopxd2 (A friendly fork of python-autopxd, supporting recent Python versions)\n+\n+https://github.com/tarruda/python-autopxd (original version)\n+\n+----------\n+\n+How do I run doctests in Cython code (pyx files)?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**:\n+\n+Cython generates a ``__test__`` dictionary in the module that contains all docstrings of Python visible functions and classes that look like doctests (i.e. that contain ``>>>``). The doctest module will properly pick this up and run the doctests.\n+\n+This module (let's call it \"cydoctest\") offers a Cython-compatible workaround.\n+\n+::\n+\n+    #!python\n+    \"\"\"\n+    Cython-compatible wrapper for doctest.testmod().\n+\n+    Usage example, assuming a Cython module mymod.pyx is compiled.\n+    This is run from the command line, passing a command to Python:\n+    python -c \"import cydoctest, mymod; cydoctest.testmod(mymod)\"\n+\n+    (This still won't let a Cython module run its own doctests\n+    when called with \"python mymod.py\", but it's pretty close.\n+    Further options can be passed to testmod() as desired, e.g.\n+    verbose=True.)\n+    \"\"\"\n+\n+    import doctest\n+    import inspect\n+\n+    def _from_module(module, object):\n+        \"\"\"\n+        Return true if the given object is defined in the given module.\n+        \"\"\"\n+        if module is None:\n+            return True\n+        elif inspect.getmodule(object) is not None:\n+            return module is inspect.getmodule(object)\n+        elif inspect.isfunction(object):\n+            return module.__dict__ is object.func_globals\n+        elif inspect.isclass(object):\n+            return module.__name__ == object.__module__\n+        elif hasattr(object, '__module__'):\n+            return module.__name__ == object.__module__\n+        elif isinstance(object, property):\n+            return True # [XX] no way not be sure.\n+        else:\n+            raise ValueError(\"object must be a class or function\")\n+\n+    def fix_module_doctest(module):\n+        \"\"\"\n+        Extract docstrings from cython functions, that would be skipped by doctest\n+        otherwise.\n+        \"\"\"\n+        module.__test__ = {}\n+        for name in dir(module):\n+           value = getattr(module, name)\n+           if inspect.isbuiltin(value) and isinstance(value.__doc__, str) and _from_module(module, value):\n+               module.__test__[name] = value.__doc__\n+\n+    def testmod(m=None, *args, **kwargs):\n+        \"\"\"\n+        Fix a Cython module's doctests, then call doctest.testmod()\n+\n+        All other arguments are passed directly to doctest.testmod().\n+        \"\"\"\n+        fix_module_doctest(m)\n+        doctest.testmod(m, *args, **kwargs)\n+\n+----------\n+\n+How do I work around the ``-Wno-long-double error`` when installing on OS X?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**:\n+\n+This is a known issue in OS X with some Python installs. It has nothing to do with Cython, and you will run\n+on the same trouble **every** time you want to build an C extension\n+module.\n+\n+This is the most sane (if not the only) way to fix it:\n+\n+1) Enter Python prompt, and type this:\n+\n+::\n+\n+    >>> from distutils import sysconfig\n+    >>> sysconfig.get_makefile_filename()\n+\n+That should output the full path of a 'Makefile'... Open that file\n+with any text editor and remove  all occurrences of '-Wno-long-double'\n+flag.\n+\n+----------\n+\n+How do I work around the \"unable to find vcvarsall.bat\" error when using MinGW as the compiler (on Windows)?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: This error means that Python cannot find the C++ compiler on your system. Normally, this is managed by distutils, but it may happen that it's not yet up-to-date.\n+\n+For example, you may be using this in setup.py:\n+\n+```\n+from distutils.core import setup\n+from distutils.extension import Extension\n+```\n+\n+Instead, you can try to load setuptools, which will monkey-patch distutils to find vcvarsall.bat:\n+\n+```\n+try:\n+    from setuptools import setup\n+    from setuptools import Extension\n+except ImportError:\n+    from distutils.core import setup\n+    from distutils.extension import Extension\n+```\n+\n+In IPython, you can just import setuptools, like this:\n+\n+```\n+# First cell:\n+    import setuptools\n+    %load_ext Cython\n+\n+# Second cell:\n+    %%cython -a\n+    import cython\n+    cimport cython\n+\n+    cdef int alpha = 255\n+    print alpha\n+```\n+\n+If this is unsuccessful, try the following workarounds.\n+\n+If no python libraries are imported, define the compiler by adding the following statement:\n+```\n+--compiler=mingw32\n+```\n+\n+Therefore, the line should read:\n+```\n+python pyprog.py build_ext --compiler=mingw32 --inplace\n+```\n+This, however, does not solve the issue when using the pyximport method (see the tutorial).\n+Alternatively, the following patch can be applied.\n+\n+**NOTE: This is untested.**\n+\n+Open the file pyximport/pyxbuild.py and add the four lines marked with \"+\" at the appropriate place.\n+```diff\n+diff -r 7fbe931e5ab7 pyximport/pyxbuild.py\n+--- a/pyximport/pyxbuild.py Wed Sep 16 15:50:00 2009 +0200\n++++ b/pyximport/pyxbuild.py Fri Sep 18 12:39:51 2009 -0300\n+@@ -55,6 +55,11 @@\n+build = dist.get_command_obj('build')\n+build.build_base = pyxbuild_dir\n+\n++ config_files = dist.find_config_files()\n++ try: config_files.remove('setup.cfg')\n++ except ValueError: pass\n++ dist.parse_config_files(config_files)\n++\n+try:\n+ok = dist.parse_command_line()\n+except DistutilsArgError:\n+```\n+\n+Finally, if this does not work, create a file called \"pydistutils.cfg\" in notepad and give it\n+the contents:\n+```ini\n+[build_ext]\n+compiler=mingw32\n+```\n+Save this to the home directory, which can be found by typing at the command\n+prompt:\n+```python\n+import os\n+os.path.expanduser('~')\n+```\n+\n+----------\n+\n+How do I access native Python file objects?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**:  See this small example of how to access Python file objects:\n+\n+::\n+\n+    #!python\n+    # Idiom for accessing Python files.\n+    # First, declare the Python macro to access files:\n+    cdef extern from \"Python.h\":\n+        ctypedef struct FILE\n+        FILE* PyFile_AsFile(object)\n+        void  fprintf(FILE* f, char* s, char* s)\n+    # Next, enter the builtin file class into the namespace:\n+    cdef extern from \"fileobject.h\":\n+        ctypedef class __builtin__.file [object PyFileObject]:\n+            pass\n+    # Now declare the C function that requires a file:\n+    cdef void c_printSomething(FILE* outFile, char* str):\n+        fprintf(outFile, \"%s\", str)\n+    # Now create a class or some other definition that uses the function:\n+    ctypedef class ExampleUsingFile:\n+        def printSomething(self, file outFile, char* str):\n+            c_printSomething(PyFile_AsFile(outFile), str)\n+\n+with simple test:\n+\n+::\n+\n+    #!python\n+    import sys\n+    import file_example\n+    x = file_example.ExampleUsingFile()\n+    x.printSomething(sys.stdout, \"hello world!\\n\")\n+\n+**Note**: This does no longer work in Python 3, where file objects have no representation at the C-API level.\n+\n+\n+Explanations\n+============\n+\n+What is the difference between a ``.pxd`` and ``.pxi`` file? When should either be used?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+SHORT **Answer**:  You should always use .pxd files for declarations and .pxi files only for code that you want to include.\n+\n+MEDIUM **Answer**:  A .pxd files are lists of declarations, .pxi files are textually included, and their use for declarations is a historical artifact of the way common declarations were shared before .pxd files existed.\n+\n+LONG **Answer**:  A .pxd file is a declaration file, and is used to declare classes, methods, etc. in a C extension module, (typically as implemented in a .pyx file of the same name). It can contain declarations only, i.e. no executable statements. One can ``cimport`` things from .pxd files just as one would import things in Python. Two separate modules cimporting from the same .pxd file will receive identical objects.\n+\n+A .pxi file is an include file and is textually included (similar to the C ``#include`` directive) and may contain any valid Cython code at the given point in the program. It may contain implementations (e.g. common cdef inline functions) which will be copied into both files. For example, this means that if I have a class A declared in a.pxi, and both b.pyx and c.pyx do ``include a.pxi`` then I will have two distinct classes b.A and c.A. Interfaces to C libraries (including the Python/C API) have usually been declared in .pxi files (as they are not associated to a specific module). It is also re-parsed at every invocation.\n+\n+Now that \"cimport *\" can be used, there is no reason to use .pxi files for external declarations.\n+\n+----------\n+\n+What is better, a single big module or multiple separate modules?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: In short, one big module is clumsy to handle but allows broader optimisations by the C compiler.\n+\n+The compile time might actually decrease for multiple modules since the build can be parallelised. The \"build_ext\" command in distutils has a \"-j\" option since Py3.5. Also, smaller modules are usually faster to compile by the C compiler, because some optimisations may involve non-linear overhead.\n+\n+The distribution size, and the size per module, will probably increase when splitting a module because there are some things that Cython has to copy into each module. There is a [[feature request|https://github.com/cython/cython/issues/2356]] that would mitigate this.\n+\n+C calls between modules are slightly slower than C calls inside of a module, simply because the C compiler cannot optimise and/or inline them. You will have to use shared .pxd declarations for them, which will then call through a function pointer. If modules use a functional split, however, this should not hurt too much. It might still be a good idea to create a shared .pxd file (or .pxi) with inline functions for performance critical code that is used in multiple modules.\n+\n+When splitting an existing module, you will also have to deal with the API changes. Leaving some legacy imports here and there, or turning a module into a package that merges the module namespaces back together via imports, might prevent code breakage for users of your original module when you move names around and redistribute them across multiple modules.\n+\n+----------\n+\n+What is the difference between ``PyObject*`` and ``object``?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: A variable of type ``PyObject*`` is a simple C pointer, just like ``void*``. It is not reference counted, which is sometimes referred to as a borrowed reference. An ``object`` variable is an owned reference to a Python object. You can convert one into the other by casting:\n+\n+::\n+\n+    from cpython.ref cimport PyObject\n+\n+    py_object = [1,2,3]\n+\n+    cdef PyObject* ptr = <PyObject*>py_object\n+\n+    cdef object l = <object>ptr    # this increases the reference count to the list\n+\n+Note that the lifetime of the object is only bound to its owned references, not to any C pointers that happen to point to it. This means that ``ptr`` in the example above becomes invalid as soon as the last reference to the object dies:\n+\n+::\n+\n+    py_object = [1,2,3]\n+    cdef PyObject* ptr = <PyObject*>py_object\n+    py_object = None   # last reference to list dies here\n+\n+    # ptr now points to a dead object\n+    print(<object>ptr)   # expect a crash here!\n+\n+Pointers are commonly used when passing objects through C callbacks, e.g.\n+\n+::\n+\n+    cdef int call_it_from_c(void* py_function, void* args):\n+        py_args = <tuple>args if args is not NULL else ()\n+        return (<object>py_function)(*py_args)\n+\n+    def py_func(a,b,c):\n+        print(a,b,c)\n+        return -1\n+\n+    args = [1,2,3]\n+\n+    call_it_from_c(<PyObject*>py_func, <PyObject*>args)\n+\n+Once again, care must be taken to keep the objects alive as long as any pointers to them are still in use.\n+\n+----------\n+\n+Why does ``**`` on int literals not work (as it seems to do in Pyrex)?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: It works as expected in recent versions of Cython.\n+\n+----------\n+\n+Why does Cython not always give errors for uninitialized variables?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Cython does some static checks for variable initialization before use during  compile time, but these are very basic, as Cython has no definite knowledge  what paths of code will be taken at runtime:\n+\n+Consider the following\n+\n+.. code:: python\n+\n+    def testUnboundedLocal1():\n+       if False:\n+          c = 1\n+       print c\n+    def testUnboundedLocal2():\n+       print c\n+\n+With CPython, both functions lead to the following exception:\n+\n+::\n+\n+    NameError: global name 'c' is not defined\n+\n+With Cython, the first variant prints \"None\", the second variant leads to a  compile time error. Both behaviours differ from CPython's.\n+\n+This is considered a BUG and will change in the future.\n+\n+----------\n+\n+Why does a function with cdef'd parameters accept None?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: It is a fairly common idiom in Python to use ``None`` as a way to mean \"no value\" or \"invalid\". This doesn't play well with C, as ``None`` is not compatible with any C type. To accommodate for this, the default behavior is for functions with cdefed parameters to also accept None. This behavior was inherited from Pyrex, and while it has been proposed that it be changed, it will likely stay (at least for a while) for backwards capability.\n+\n+You have four choices for how to handle ``None`` in your code:\n+\n+1. In Cython 3.x, use Python type annotations instead of Cython syntax. Python type annotations distinguish between ``func(x: MyType)`` and ``func(x: Optional[MyType])``, where the first **disallows** ``None`` and the second explicitly allows it.  ``func(x: MyType = None)`` allows it as well because it is explicitly required by the provided default value.\n+\n+2. If you want to consider ``None`` invalid input, then you need to write code that checks for it, and raised an appropriate exception.\n+\n+3. If you want Cython to raise an exception if ``None`` is passed in for an extension type parameter, you can use the ``not None`` declaration:\n+\n+   ::\n+\n+       def foo(MyClass val not None): <...>\n+\n+   which is a short-hand for\n+\n+   ::\n+\n+       def foo(MyClass val):\n+           if val is None: raise <...>\n+           <...>\n+\n+4. You can also put ``#cython: nonecheck=True`` at the top of your file and all access will be checked for None, but it\n+   will slow things down, as it is adding a check on every access, rather that once on function call.\n+\n+\n+About the project\n+=================\n+\n+Is Cython a Python implementation?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: Not officially, no. However, it compiles almost all existing Python code, which gets it pretty close to a real Python implementation. The result depends on the CPython runtime, though, which we consider a major compatibility advantage. In any case, it is an official goal for Cython to compile regular Python code and run (most of) the normal Python test suite - obviously faster than CPython. ;-)\n+\n+----------\n+\n+Is Cython faster than CPython?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: For most things, yes. For example, a Cython compiled pybench runs more than 30% faster in total, while being 60-90% faster on control structures like ``if-elif-else`` and ``for``-loops. We regularly run the tests from the CPython benchmark suite (which includes Django templates, 2to3, computational benchmarks and other applications) and most of them work out-of-the-box without modifications or static typing, with a performance increase of 20-60%.\n+\n+However the main advantage of Cython is that it scales very well to even greater performance requirements. For code that operates heavily on common builtin types (lists, dicts, strings), Cython can often speed up processing loops by factors. For numerical code, speed-ups of 100-1000 times compared to CPython are not unusual, and are achieved by simply adding static type declarations to performance critical parts of the code, thus trading Python's dynamic typing for speed. As this can be done at any granularity in the code, Cython makes it easy to write simple Python code that is fast enough, and just tune the critical 5% of your code into maximum performance by using static C types in just the right places.\n+\n+----------\n+\n+What Python versions does Cython support?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: From Cython 0.21 on, the supported versions are 2.6, 2.7 and 3.4+. Cython 3.0 removes support for Python 2.6 and requires either Python 2.7 or Python 3.4+. Python 2.x support is scheduled for removal in Cython 3.1, which will probably require Python 3.6 or later at the time of its release.\n+\n+The C code generated by Cython is portable and builds in all supported Python versions. All supported CPython release series are tested regularly. New CPython versions are usually supported before they are released.\n+\n+The source code that Cython compiles can use both Python 2 and Python 3 syntax, defaulting to Python 2 syntax in Cython 0.x and Python 3 syntax in Cython 3.x and later. When compiling Cython modules (.pyx files) in Python 2 mode, most Python 3 syntax features are available by default if they do not interfere with Python 2 syntax (as in Python 2.7), but the general language semantics are defined as in Python 2. When compiling Python modules (.py files), the special Cython syntax (such as the ``cdef`` keyword) is not available. For both input types, the language level can be set to Python 3 by either passing the \"-3\" option to the compiler, or by putting\n+\n+::\n+\n+    # cython: language_level=3\n+\n+at the top of the module file (within the first comment and before any code or empty lines). With Cython 3.x, compiling Python 2 code requires the option \"-2\" or the directive ``language_level=2``. The most visible difference is that unprefixed strings are unicode strings under Python 3 semantics, but this also makes ``print()`` a function, keeps loop variables in list comprehensions from leaking into the outer scope, etc. To get Python 3 syntax features without enforcing unicode literals, set ``language_level=3str`` or use the option ``--3str``.\n+\n+----------\n+\n+Can I place the output under the BSD license, or does it have to be the python-license as well?\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+**Answer**: You can use the output of Pyrex/Cython however you like (and license it how you like - be it BSD, public domain, GPL, all rights reserved, whatever).\n+\n+More details: The Python License is different from the GPL used for GCC, for example. GCC requires a special exception clause for its output as it is *linked* against the library part of GCC, i.e. against GPL software, which triggers the GPL restrictions.\n+\n+Pyrex doesn't do anything similar, and linking against Python is not restricted by the Python License, so the output belongs to the User, no other rights or restrictions involved.",
            "html_url": "https://github.com/cython/cython/pull/5374#discussion_r1164145432",
            "id": 1164145432,
            "line": 960,
            "node_id": "PRRC_kwDOABDGAc5FY3MY",
            "original_commit_id": "4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
            "original_line": 960,
            "original_position": 960,
            "original_start_line": null,
            "path": "docs/src/userguide/faq.rst",
            "position": 960,
            "pull_request_review_id": 1381291560,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5374",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1164145432/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T13:36:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1164145432",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5374/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/097d36b4e92879c9e04047cd56af967d3e5f4521/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T04:50:34Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T04:55:55Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "1:1 copy of https://github.com/cython/cython/wiki/FAQ source",
                "tree": {
                    "sha": "272590b59c9fa305d1f9836e52eba68bf7f7745b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/272590b59c9fa305d1f9836e52eba68bf7f7745b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/097d36b4e92879c9e04047cd56af967d3e5f4521",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/097d36b4e92879c9e04047cd56af967d3e5f4521",
            "node_id": "C_kwDOGCEqy9oAKDA5N2QzNmI0ZTkyODc5YzllMDQwNDdjZDU2YWY5NjdkM2U1ZjQ1MjE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d0bbecb7fba10f8a992972ea824b55a851646938",
                    "sha": "d0bbecb7fba10f8a992972ea824b55a851646938",
                    "url": "https://api.github.com/repos/cython/cython/commits/d0bbecb7fba10f8a992972ea824b55a851646938"
                }
            ],
            "sha": "097d36b4e92879c9e04047cd56af967d3e5f4521",
            "url": "https://api.github.com/repos/cython/cython/commits/097d36b4e92879c9e04047cd56af967d3e5f4521"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a39c4a24186a6497b09d4c5503c44277aae63799/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T04:55:00Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T07:20:22Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "whitespace cleanup",
                "tree": {
                    "sha": "8245dac8787ced1a88f99b558ddc6ab31c400ced",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8245dac8787ced1a88f99b558ddc6ab31c400ced"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a39c4a24186a6497b09d4c5503c44277aae63799",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/a39c4a24186a6497b09d4c5503c44277aae63799",
            "node_id": "C_kwDOGCEqy9oAKGEzOWM0YTI0MTg2YTY0OTdiMDlkNGM1NTAzYzQ0Mjc3YWFlNjM3OTk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/097d36b4e92879c9e04047cd56af967d3e5f4521",
                    "sha": "097d36b4e92879c9e04047cd56af967d3e5f4521",
                    "url": "https://api.github.com/repos/cython/cython/commits/097d36b4e92879c9e04047cd56af967d3e5f4521"
                }
            ],
            "sha": "a39c4a24186a6497b09d4c5503c44277aae63799",
            "url": "https://api.github.com/repos/cython/cython/commits/a39c4a24186a6497b09d4c5503c44277aae63799"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/99473401f5d38f7ef4d033b386ba24c5558e813f/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T06:46:06Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:11:42Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "introduce some section headers",
                "tree": {
                    "sha": "00f98accd4270e72a7cdc74481a28d0269e904da",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/00f98accd4270e72a7cdc74481a28d0269e904da"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/99473401f5d38f7ef4d033b386ba24c5558e813f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/99473401f5d38f7ef4d033b386ba24c5558e813f",
            "node_id": "C_kwDOGCEqy9oAKDk5NDczNDAxZjVkMzhmN2VmNGQwMzNiMzg2YmEyNGM1NTU4ZTgxM2Y",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a39c4a24186a6497b09d4c5503c44277aae63799",
                    "sha": "a39c4a24186a6497b09d4c5503c44277aae63799",
                    "url": "https://api.github.com/repos/cython/cython/commits/a39c4a24186a6497b09d4c5503c44277aae63799"
                }
            ],
            "sha": "99473401f5d38f7ef4d033b386ba24c5558e813f",
            "url": "https://api.github.com/repos/cython/cython/commits/99473401f5d38f7ef4d033b386ba24c5558e813f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/02a9e87395574660330381a8f5c5efe14c069b22/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T06:51:14Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:11:42Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "remove footer",
                "tree": {
                    "sha": "f0e3923d79874621a75db316a922904d375bc66c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f0e3923d79874621a75db316a922904d375bc66c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/02a9e87395574660330381a8f5c5efe14c069b22",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/02a9e87395574660330381a8f5c5efe14c069b22",
            "node_id": "C_kwDOGCEqy9oAKDAyYTllODczOTU1NzQ2NjAzMzAzODFhOGY1YzVlZmUxNGMwNjliMjI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/99473401f5d38f7ef4d033b386ba24c5558e813f",
                    "sha": "99473401f5d38f7ef4d033b386ba24c5558e813f",
                    "url": "https://api.github.com/repos/cython/cython/commits/99473401f5d38f7ef4d033b386ba24c5558e813f"
                }
            ],
            "sha": "02a9e87395574660330381a8f5c5efe14c069b22",
            "url": "https://api.github.com/repos/cython/cython/commits/02a9e87395574660330381a8f5c5efe14c069b22"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f446b234fb6d3f1065528ed2fd08208fc2a8ca58/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T06:55:52Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:11:42Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "move selected questions to section \"Basics\"\n\nAside from linebreaks and separators, this is 1:1 copy&paste",
                "tree": {
                    "sha": "fc048a31894312e546d58c283fff6b7f9dfb9250",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/fc048a31894312e546d58c283fff6b7f9dfb9250"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f446b234fb6d3f1065528ed2fd08208fc2a8ca58",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/f446b234fb6d3f1065528ed2fd08208fc2a8ca58",
            "node_id": "C_kwDOGCEqy9oAKGY0NDZiMjM0ZmI2ZDNmMTA2NTUyOGVkMmZkMDgyMDhmYzJhOGNhNTg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/02a9e87395574660330381a8f5c5efe14c069b22",
                    "sha": "02a9e87395574660330381a8f5c5efe14c069b22",
                    "url": "https://api.github.com/repos/cython/cython/commits/02a9e87395574660330381a8f5c5efe14c069b22"
                }
            ],
            "sha": "f446b234fb6d3f1065528ed2fd08208fc2a8ca58",
            "url": "https://api.github.com/repos/cython/cython/commits/f446b234fb6d3f1065528ed2fd08208fc2a8ca58"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/cdd5ff62e3c8689d55f3e8c1ddee4d847a5a8eab/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T07:19:07Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:35:44Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "move selected questions to section \"How do I ...?\"\n\nAside from linebreaks and separators, this is 1:1 copy&paste",
                "tree": {
                    "sha": "a202418db65e0b96ead1e49ce7727d83df49071f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a202418db65e0b96ead1e49ce7727d83df49071f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/cdd5ff62e3c8689d55f3e8c1ddee4d847a5a8eab",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/cdd5ff62e3c8689d55f3e8c1ddee4d847a5a8eab",
            "node_id": "C_kwDOGCEqy9oAKGNkZDVmZjYyZTNjODY4OWQ1NWYzZThjMWRkZWU0ZDg0N2E1YThlYWI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f446b234fb6d3f1065528ed2fd08208fc2a8ca58",
                    "sha": "f446b234fb6d3f1065528ed2fd08208fc2a8ca58",
                    "url": "https://api.github.com/repos/cython/cython/commits/f446b234fb6d3f1065528ed2fd08208fc2a8ca58"
                }
            ],
            "sha": "cdd5ff62e3c8689d55f3e8c1ddee4d847a5a8eab",
            "url": "https://api.github.com/repos/cython/cython/commits/cdd5ff62e3c8689d55f3e8c1ddee4d847a5a8eab"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/50bd1b9723a994f1791202f455176f6c371591cb/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T07:25:56Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:35:44Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "move selected questions to section \"Explanations\"\n\nAside from linebreaks and separators, this is 1:1 copy&paste",
                "tree": {
                    "sha": "f7ce0b03e2c9a1a690330ea911bb6d9f22cea9c3",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f7ce0b03e2c9a1a690330ea911bb6d9f22cea9c3"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/50bd1b9723a994f1791202f455176f6c371591cb",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/50bd1b9723a994f1791202f455176f6c371591cb",
            "node_id": "C_kwDOGCEqy9oAKDUwYmQxYjk3MjNhOTk0ZjE3OTEyMDJmNDU1MTc2ZjZjMzcxNTkxY2I",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cdd5ff62e3c8689d55f3e8c1ddee4d847a5a8eab",
                    "sha": "cdd5ff62e3c8689d55f3e8c1ddee4d847a5a8eab",
                    "url": "https://api.github.com/repos/cython/cython/commits/cdd5ff62e3c8689d55f3e8c1ddee4d847a5a8eab"
                }
            ],
            "sha": "50bd1b9723a994f1791202f455176f6c371591cb",
            "url": "https://api.github.com/repos/cython/cython/commits/50bd1b9723a994f1791202f455176f6c371591cb"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f505f988b01b1553e4ad605bed2df7bbbff7eee3/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T07:27:48Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:35:45Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "sort questions in section \"About the project\"\n\nAside from linebreaks and separators, this is 1:1 copy&paste",
                "tree": {
                    "sha": "f3a34fcc56e5e8aaa7934a3df3b2c89565af9362",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f3a34fcc56e5e8aaa7934a3df3b2c89565af9362"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f505f988b01b1553e4ad605bed2df7bbbff7eee3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/f505f988b01b1553e4ad605bed2df7bbbff7eee3",
            "node_id": "C_kwDOGCEqy9oAKGY1MDVmOTg4YjAxYjE1NTNlNGFkNjA1YmVkMmRmN2JiYmZmN2VlZTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/50bd1b9723a994f1791202f455176f6c371591cb",
                    "sha": "50bd1b9723a994f1791202f455176f6c371591cb",
                    "url": "https://api.github.com/repos/cython/cython/commits/50bd1b9723a994f1791202f455176f6c371591cb"
                }
            ],
            "sha": "f505f988b01b1553e4ad605bed2df7bbbff7eee3",
            "url": "https://api.github.com/repos/cython/cython/commits/f505f988b01b1553e4ad605bed2df7bbbff7eee3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c6d8d6d5b9a914155ace2793fbdf974e18f0bac2/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T07:39:02Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:35:45Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "clean up question titles; use consistent style",
                "tree": {
                    "sha": "3a5a502d70bdf9f68ab754aff5ce919c85bfd73f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3a5a502d70bdf9f68ab754aff5ce919c85bfd73f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c6d8d6d5b9a914155ace2793fbdf974e18f0bac2",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/c6d8d6d5b9a914155ace2793fbdf974e18f0bac2",
            "node_id": "C_kwDOGCEqy9oAKGM2ZDhkNmQ1YjlhOTE0MTU1YWNlMjc5M2ZiZGY5NzRlMThmMGJhYzI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f505f988b01b1553e4ad605bed2df7bbbff7eee3",
                    "sha": "f505f988b01b1553e4ad605bed2df7bbbff7eee3",
                    "url": "https://api.github.com/repos/cython/cython/commits/f505f988b01b1553e4ad605bed2df7bbbff7eee3"
                }
            ],
            "sha": "c6d8d6d5b9a914155ace2793fbdf974e18f0bac2",
            "url": "https://api.github.com/repos/cython/cython/commits/c6d8d6d5b9a914155ace2793fbdf974e18f0bac2"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/522bc18c77b8083a703692cf47d7e4ac628b599b/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T07:41:24Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:35:45Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "copy relevant content from AutoPxd wiki (instead of linking to it)",
                "tree": {
                    "sha": "89939724f84c7bc9072a3c2c12367f136ae9f3f1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/89939724f84c7bc9072a3c2c12367f136ae9f3f1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/522bc18c77b8083a703692cf47d7e4ac628b599b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/522bc18c77b8083a703692cf47d7e4ac628b599b",
            "node_id": "C_kwDOGCEqy9oAKDUyMmJjMThjNzdiODA4M2E3MDM2OTJjZjQ3ZDdlNGFjNjI4YjU5OWI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c6d8d6d5b9a914155ace2793fbdf974e18f0bac2",
                    "sha": "c6d8d6d5b9a914155ace2793fbdf974e18f0bac2",
                    "url": "https://api.github.com/repos/cython/cython/commits/c6d8d6d5b9a914155ace2793fbdf974e18f0bac2"
                }
            ],
            "sha": "522bc18c77b8083a703692cf47d7e4ac628b599b",
            "url": "https://api.github.com/repos/cython/cython/commits/522bc18c77b8083a703692cf47d7e4ac628b599b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f36e6170433d3398c6da547c1156f4e8ecbd8a96/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T22:54:50Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:35:45Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "use `**Answer**:` consistently",
                "tree": {
                    "sha": "742f54b966b972e9daac725e3f0a1a45c0014f02",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/742f54b966b972e9daac725e3f0a1a45c0014f02"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f36e6170433d3398c6da547c1156f4e8ecbd8a96",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/f36e6170433d3398c6da547c1156f4e8ecbd8a96",
            "node_id": "C_kwDOGCEqy9oAKGYzNmU2MTcwNDMzZDMzOThjNmRhNTQ3YzExNTZmNGU4ZWNiZDhhOTY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/522bc18c77b8083a703692cf47d7e4ac628b599b",
                    "sha": "522bc18c77b8083a703692cf47d7e4ac628b599b",
                    "url": "https://api.github.com/repos/cython/cython/commits/522bc18c77b8083a703692cf47d7e4ac628b599b"
                }
            ],
            "sha": "f36e6170433d3398c6da547c1156f4e8ecbd8a96",
            "url": "https://api.github.com/repos/cython/cython/commits/f36e6170433d3398c6da547c1156f4e8ecbd8a96"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c542e27f54a2337be17fc6c1ae2134003619e764/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T23:01:48Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:37:02Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "remove references to ancient cython versions",
                "tree": {
                    "sha": "508178902d00f1ebad32f1190960bb002e85577f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/508178902d00f1ebad32f1190960bb002e85577f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c542e27f54a2337be17fc6c1ae2134003619e764",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/c542e27f54a2337be17fc6c1ae2134003619e764",
            "node_id": "C_kwDOGCEqy9oAKGM1NDJlMjdmNTRhMjMzN2JlMTdmYzZjMWFlMjEzNDAwMzYxOWU3NjQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f36e6170433d3398c6da547c1156f4e8ecbd8a96",
                    "sha": "f36e6170433d3398c6da547c1156f4e8ecbd8a96",
                    "url": "https://api.github.com/repos/cython/cython/commits/f36e6170433d3398c6da547c1156f4e8ecbd8a96"
                }
            ],
            "sha": "c542e27f54a2337be17fc6c1ae2134003619e764",
            "url": "https://api.github.com/repos/cython/cython/commits/c542e27f54a2337be17fc6c1ae2134003619e764"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8a6f9b2189079c4af53d5a1a89be37fbe5d4bf05/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T23:35:18Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:56:20Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "make links to docs local",
                "tree": {
                    "sha": "5e00601791f3fc602f826cf5683ddedd398cfe0d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5e00601791f3fc602f826cf5683ddedd398cfe0d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8a6f9b2189079c4af53d5a1a89be37fbe5d4bf05",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/8a6f9b2189079c4af53d5a1a89be37fbe5d4bf05",
            "node_id": "C_kwDOGCEqy9oAKDhhNmY5YjIxODkwNzljNGFmNTNkNWExYTg5YmUzN2ZiZTVkNGJmMDU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c542e27f54a2337be17fc6c1ae2134003619e764",
                    "sha": "c542e27f54a2337be17fc6c1ae2134003619e764",
                    "url": "https://api.github.com/repos/cython/cython/commits/c542e27f54a2337be17fc6c1ae2134003619e764"
                }
            ],
            "sha": "8a6f9b2189079c4af53d5a1a89be37fbe5d4bf05",
            "url": "https://api.github.com/repos/cython/cython/commits/8a6f9b2189079c4af53d5a1a89be37fbe5d4bf05"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4f9712c1250cc6bd562c079c3628e3c5a66b17fa/comments",
            "commit": {
                "author": {
                    "date": "2023-04-11T23:39:35Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-04-11T23:56:20Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "update old trac link to github",
                "tree": {
                    "sha": "41b2d59ad8c2f5a2ee2c0bdcb804ee2589d31996",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/41b2d59ad8c2f5a2ee2c0bdcb804ee2589d31996"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
            "node_id": "C_kwDOGCEqy9oAKDRmOTcxMmMxMjUwY2M2YmQ1NjJjMDc5YzM2MjhlM2M1YTY2YjE3ZmE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8a6f9b2189079c4af53d5a1a89be37fbe5d4bf05",
                    "sha": "8a6f9b2189079c4af53d5a1a89be37fbe5d4bf05",
                    "url": "https://api.github.com/repos/cython/cython/commits/8a6f9b2189079c4af53d5a1a89be37fbe5d4bf05"
                }
            ],
            "sha": "4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
            "url": "https://api.github.com/repos/cython/cython/commits/4f9712c1250cc6bd562c079c3628e3c5a66b17fa"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/5374/commits",
    "created_at": "2023-04-11T23:52:18Z",
    "diff_url": "https://github.com/cython/cython/pull/5374.diff",
    "draft": true,
    "head": {
        "label": "h-vetinari:faq",
        "ref": "faq",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/h-vetinari/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/h-vetinari/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/h-vetinari/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/h-vetinari/cython/branches{/branch}",
            "clone_url": "https://github.com/h-vetinari/cython.git",
            "collaborators_url": "https://api.github.com/repos/h-vetinari/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/h-vetinari/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/h-vetinari/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/h-vetinari/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/h-vetinari/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/h-vetinari/cython/contributors",
            "created_at": "2021-09-09T18:19:04Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/h-vetinari/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/h-vetinari/cython/downloads",
            "events_url": "https://api.github.com/repos/h-vetinari/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/h-vetinari/cython/forks",
            "full_name": "h-vetinari/cython",
            "git_commits_url": "https://api.github.com/repos/h-vetinari/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/h-vetinari/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/h-vetinari/cython/git/tags{/sha}",
            "git_url": "git://github.com/h-vetinari/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/h-vetinari/cython/hooks",
            "html_url": "https://github.com/h-vetinari/cython",
            "id": 404826827,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/h-vetinari/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/h-vetinari/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/h-vetinari/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/h-vetinari/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/h-vetinari/cython/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/h-vetinari/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/h-vetinari/cython/merges",
            "milestones_url": "https://api.github.com/repos/h-vetinari/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnk0MDQ4MjY4Mjc=",
            "notifications_url": "https://api.github.com/repos/h-vetinari/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/h-vetinari/cython/pulls{/number}",
            "pushed_at": "2023-04-11T23:56:28Z",
            "releases_url": "https://api.github.com/repos/h-vetinari/cython/releases{/id}",
            "size": 67757,
            "ssh_url": "git@github.com:h-vetinari/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/h-vetinari/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/h-vetinari/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/h-vetinari/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/h-vetinari/cython/subscription",
            "svn_url": "https://github.com/h-vetinari/cython",
            "tags_url": "https://api.github.com/repos/h-vetinari/cython/tags",
            "teams_url": "https://api.github.com/repos/h-vetinari/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/h-vetinari/cython/git/trees{/sha}",
            "updated_at": "2021-09-09T18:19:05Z",
            "url": "https://api.github.com/repos/h-vetinari/cython",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
            "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
            "followers_url": "https://api.github.com/users/h-vetinari/followers",
            "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
            "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/h-vetinari",
            "id": 33685575,
            "login": "h-vetinari",
            "node_id": "MDQ6VXNlcjMzNjg1NTc1",
            "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
            "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
            "repos_url": "https://api.github.com/users/h-vetinari/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/h-vetinari"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/5374",
    "id": 1309829269,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/5374",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "8b40704626cab6d7ee8d618556eaad09caf1449a",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOABDGAc5OEmiV",
    "number": 5374,
    "patch_url": "https://github.com/cython/cython/pull/5374.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/5374/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/4f9712c1250cc6bd562c079c3628e3c5a66b17fa",
    "title": "WIP: Move FAQ from wiki to userguide",
    "updated_at": "2023-04-12T13:36:45Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/5374",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
        "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
        "followers_url": "https://api.github.com/users/h-vetinari/followers",
        "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
        "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/h-vetinari",
        "id": 33685575,
        "login": "h-vetinari",
        "node_id": "MDQ6VXNlcjMzNjg1NTc1",
        "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
        "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
        "repos_url": "https://api.github.com/users/h-vetinari/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/h-vetinari"
    }
}