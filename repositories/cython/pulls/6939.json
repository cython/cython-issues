{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/6939/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6939/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/6939"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/6939"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6939/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6939"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/f1dc290709391563097e0716a86c9fb7f2ff06bc"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1528,
            "forks_count": 1528,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1429,
            "open_issues_count": 1429,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2025-06-08T12:33:57Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 75966,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 10056,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2025-06-08T14:29:15Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 10056,
            "watchers_count": 10056,
            "web_commit_signoff_required": false
        },
        "sha": "815402c361be9c0d24b18402881e04237212d7a6",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": "Although we did already account for the possibility of the object changing size during, it wasn't handled in a thread-safe way.\r\n\r\nThere's a slight discrepency with Python here (and for list iteration too) - in Python I think the iteration should always just end. In Cython, we may end with an `IndexError` if the sizes changes at the wrong time. I can live with that.\r\n\r\nAlso add some locking in the bytearray getitem/setitem. Unlike `list`, CPython doesn't do any special tricks to make access into bytearrays efficient so adding locking is basically the same as what they do.",
    "closed_at": "2025-06-07T16:04:23Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2126111243"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2126111243"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't know how many future uses we'll have for this. It's obviously can't be used where nodes would be transformed differently.\r\n\r\nMy idea is that all existing code that expects true/false can continue to work, but we have the option of looking for the special case if we want.",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-04T09:16:59Z",
            "diff_hunk": "@@ -346,6 +347,21 @@ class DEFER_ANALYSIS_OF_ARGUMENTS:\n     pass\n DEFER_ANALYSIS_OF_ARGUMENTS = DEFER_ANALYSIS_OF_ARGUMENTS()\n \n+class BoundsCheckEnum(enum.Enum):",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2126111243",
            "id": 2126111243,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5-ueIL",
            "original_commit_id": "96971c9176418c9f830295e4d07de279d5c7ef99",
            "original_line": 350,
            "original_position": 12,
            "original_start_line": null,
            "path": "Cython/Compiler/Options.py",
            "position": null,
            "pull_request_review_id": 2895953865,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2126111243/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-04T09:16:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2126111243",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2126291277"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2126291277"
                }
            },
            "author_association": "MEMBER",
            "body": "Looking at this from a threading perspective, I'd say it's rather the whole \"check loop termination, read index\" block that should be guarded by a single critical section, not just part of it. I don't think changing `GetItem` is the helpful in that regard. A `CriticalSectionNode` around that part could do it. Or dedicated code generation.",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-04T10:45:44Z",
            "diff_hunk": "@@ -345,10 +345,9 @@ def make_length_call():\n             lhs = node.target,\n             rhs = target_value)\n \n-        # analyse with boundscheck and wraparound\n-        # off (because we're confident we know the size)\n         env = self.current_env()\n-        new_directives = Options.copy_inherited_directives(env.directives, boundscheck=False, wraparound=False)\n+        boundscheck = Options.BoundsCheckEnum.OnFreethreading if is_mutable else False\n+        new_directives = Options.copy_inherited_directives(env.directives, boundscheck=boundscheck, wraparound=False)",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2126291277",
            "id": 2126291277,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5-vKFN",
            "original_commit_id": "96971c9176418c9f830295e4d07de279d5c7ef99",
            "original_line": 350,
            "original_position": 9,
            "original_start_line": 351,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2896235553,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2126291277/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2025-06-04T10:46:28Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2126291277",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2126292377"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2126292377"
                }
            },
            "author_association": "MEMBER",
            "body": "It looks like your \"thread safety\" option came back in disguise. I'd rather consider thread safety (or not) a side effect here, rather than something that we explicitly code into `boundscheck`.",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-04T10:46:21Z",
            "diff_hunk": "@@ -346,6 +347,21 @@ class DEFER_ANALYSIS_OF_ARGUMENTS:\n     pass\n DEFER_ANALYSIS_OF_ARGUMENTS = DEFER_ANALYSIS_OF_ARGUMENTS()\n \n+class BoundsCheckEnum(enum.Enum):",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2126292377",
            "id": 2126292377,
            "in_reply_to_id": 2126111243,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5-vKWZ",
            "original_commit_id": "96971c9176418c9f830295e4d07de279d5c7ef99",
            "original_line": 350,
            "original_position": 12,
            "original_start_line": null,
            "path": "Cython/Compiler/Options.py",
            "position": null,
            "pull_request_review_id": 2896235553,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2126292377/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-04T10:46:28Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2126292377",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2126304208"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2126304208"
                }
            },
            "author_association": "MEMBER",
            "body": "I think the `GetItem/SetItem` changes are necessary for general correctness of indexing into byte arrays, even if we write the loop differently.\r\n\r\nWith that said, maybe it's better to solve the loop problem with a wider critical section as you suggest. I'll have a look at that.",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-04T10:52:52Z",
            "diff_hunk": "@@ -345,10 +345,9 @@ def make_length_call():\n             lhs = node.target,\n             rhs = target_value)\n \n-        # analyse with boundscheck and wraparound\n-        # off (because we're confident we know the size)\n         env = self.current_env()\n-        new_directives = Options.copy_inherited_directives(env.directives, boundscheck=False, wraparound=False)\n+        boundscheck = Options.BoundsCheckEnum.OnFreethreading if is_mutable else False\n+        new_directives = Options.copy_inherited_directives(env.directives, boundscheck=boundscheck, wraparound=False)",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2126304208",
            "id": 2126304208,
            "in_reply_to_id": 2126291277,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5-vNPQ",
            "original_commit_id": "96971c9176418c9f830295e4d07de279d5c7ef99",
            "original_line": 350,
            "original_position": 9,
            "original_start_line": 351,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2896256400,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2126304208/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2025-06-04T10:52:52Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2126304208",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2129592635"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2129592635"
                }
            },
            "author_association": "MEMBER",
            "body": "I've rewritten the bytearray iteration code as you suggest - that involves changing the loop type because with a \"for from\" loop the bytearray access was spread over the start and end of the loop so it was hard to get into one critical section.",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-05T17:51:24Z",
            "diff_hunk": "@@ -345,10 +345,9 @@ def make_length_call():\n             lhs = node.target,\n             rhs = target_value)\n \n-        # analyse with boundscheck and wraparound\n-        # off (because we're confident we know the size)\n         env = self.current_env()\n-        new_directives = Options.copy_inherited_directives(env.directives, boundscheck=False, wraparound=False)\n+        boundscheck = Options.BoundsCheckEnum.OnFreethreading if is_mutable else False\n+        new_directives = Options.copy_inherited_directives(env.directives, boundscheck=boundscheck, wraparound=False)",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2129592635",
            "id": 2129592635,
            "in_reply_to_id": 2126291277,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5-7wE7",
            "original_commit_id": "96971c9176418c9f830295e4d07de279d5c7ef99",
            "original_line": 350,
            "original_position": 9,
            "original_start_line": 351,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2901442906,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2129592635/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2025-06-05T17:51:24Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2129592635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2132851690"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2132851690"
                }
            },
            "author_association": "MEMBER",
            "body": "Doesn't a `LetNode` work here as well? Whether the temps are reassigned after initialising them shouldn't matter, or does it?",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-06T20:10:09Z",
            "diff_hunk": "@@ -355,43 +404,82 @@ def make_length_call():\n             body=target_assign,\n         )\n \n-        body = Nodes.StatListNode(\n+        length_check_and_target_assign = Nodes.IfStatNode(\n             node.pos,\n-            stats = [target_assign])  # exclude node.body for now to not reanalyse it\n+            if_clauses=[\n+                Nodes.IfClauseNode(\n+                    node.pos,\n+                    condition=test_node,\n+                    body=target_assign\n+                ),\n+            ],\n+            else_clause=failed_test_body)\n+\n         if is_mutable:\n-            # We need to be slightly careful here that we are actually modifying the loop\n-            # bounds and not a temp copy of it. Setting is_temp=True on length_temp seems\n-            # to ensure this.\n-            # If this starts to fail then we could insert an \"if out_of_bounds: break\" instead\n-            loop_length_reassign = Nodes.SingleAssignmentNode(node.pos,\n-                                                        lhs = length_temp,\n-                                                        rhs = make_length_call())\n-            body.stats.append(loop_length_reassign)\n+            assert slice_node.type.is_pyobject, slice_node.type\n+            # For mutable containers, the size can change underneath us.\n+            # In freethreaded builds we need to lock around the length check and the indexing.\n+            length_check_and_target_assign = Nodes.CriticalSectionStatNode(\n+                node.pos,\n+                args=[unpack_temp_node],\n+                body=length_check_and_target_assign\n+            )\n+            length_check_and_target_assign.analyse_declarations(env)  # sets up \"finally_except_clause\"\n+        body = Nodes.StatListNode(\n+            node.pos,\n+            stats = [\n+                length_check_and_target_assign,\n+                # exclude node.body for now to not reanalyse it\n+                Nodes.ExprStatNode(\n+                    node.pos,\n+                    expr=ExprNodes.NumBinopNode(\n+                        node.pos,\n+                        operator=\"-=\" if reversed else \"+=\",\n+                        operand1=counter_ref,\n+                        operand2=ExprNodes.IntNode(node.pos, value=\"1\", constant_result=1, type=PyrexTypes.c_py_ssize_t_type)\n+                    )\n+                )\n+            ])\n \n-        loop_node = Nodes.ForFromStatNode(\n+        loop_node = Nodes.WhileStatNode(\n             node.pos,\n-            bound1=start_node, relation1=relation1,\n-            target=counter_ref,\n-            relation2=relation2, bound2=end_node,\n-            step=None, body=body,\n-            else_clause=node.else_clause,\n-            from_range=True)\n+            condition = keep_going_ref,\n+            body = body,\n+            else_clause = node.else_clause,\n+        )\n \n-        ret = UtilNodes.LetNode(\n-                    unpack_temp_node,\n-                    UtilNodes.LetNode(\n-                        length_temp,\n-                        # TempResultFromStatNode provides the framework where the \"counter_ref\"\n-                        # temp is set up and can be assigned to. However, we don't need the\n-                        # result it returns so wrap it in an ExprStatNode.\n-                        Nodes.ExprStatNode(node.pos,\n-                            expr=UtilNodes.TempResultFromStatNode(\n-                                    counter_ref,\n-                                    loop_node\n-                            )\n-                        )\n-                    )\n-                ).analyse_expressions(env)\n+        initialization_and_loop = Nodes.StatListNode(\n+            node.pos,\n+            stats=[\n+                Nodes.SingleAssignmentNode(\n+                    node.pos,\n+                    lhs=counter_ref,\n+                    rhs=start_node\n+                ),\n+                Nodes.SingleAssignmentNode(\n+                    node.pos,\n+                    lhs=keep_going_ref,\n+                    rhs=ExprNodes.BoolNode(node.pos, value=True)\n+                ),\n+                loop_node\n+            ])\n+\n+        ret = initialization_and_loop\n+        # temps that are are assigned once on entry to the loop\n+        for let_ref_node in [unpack_temp_node] + ([end_node] if not is_mutable else []):\n+            ret = UtilNodes.LetNode(\n+                let_ref_node,\n+                ret\n+            )\n+        # temps that are re-assigned during the loop. TempResultFromStatNode provides\n+        # a framework to work with these temps, but we don't need the result so we wrap\n+        # it in an ExprStatNode.\n+        for let_ref_node in [keep_going_ref, counter_ref]:\n+            ret = Nodes.ExprStatNode(\n+                node.pos,\n+                expr=UtilNodes.TempResultFromStatNode(let_ref_node, ret))",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2132851690",
            "id": 2132851690,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5_ILvq",
            "original_commit_id": "842795ef2b86f8433da7ecf557de4d94754b541a",
            "original_line": 480,
            "original_position": 216,
            "original_start_line": 474,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2906051147,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2132851690/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-06T20:21:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2132851690",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2132859798"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2132859798"
                }
            },
            "author_association": "MEMBER",
            "body": "(untested)\r\n```suggestion\r\n                    expr=ExprNodes.binop_node(\r\n                        node.pos,\r\n                        operator=\"-\" if reversed else \"+\",\r\n                        inplace=True,\r\n                        operand1=counter_ref,\r\n                        operand2=ExprNodes.IntNode(node.pos, value=\"1\", constant_result=1, type=PyrexTypes.c_py_ssize_t_type)\r\n                    )\r\n```",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-06T20:17:47Z",
            "diff_hunk": "@@ -355,43 +404,82 @@ def make_length_call():\n             body=target_assign,\n         )\n \n-        body = Nodes.StatListNode(\n+        length_check_and_target_assign = Nodes.IfStatNode(\n             node.pos,\n-            stats = [target_assign])  # exclude node.body for now to not reanalyse it\n+            if_clauses=[\n+                Nodes.IfClauseNode(\n+                    node.pos,\n+                    condition=test_node,\n+                    body=target_assign\n+                ),\n+            ],\n+            else_clause=failed_test_body)\n+\n         if is_mutable:\n-            # We need to be slightly careful here that we are actually modifying the loop\n-            # bounds and not a temp copy of it. Setting is_temp=True on length_temp seems\n-            # to ensure this.\n-            # If this starts to fail then we could insert an \"if out_of_bounds: break\" instead\n-            loop_length_reassign = Nodes.SingleAssignmentNode(node.pos,\n-                                                        lhs = length_temp,\n-                                                        rhs = make_length_call())\n-            body.stats.append(loop_length_reassign)\n+            assert slice_node.type.is_pyobject, slice_node.type\n+            # For mutable containers, the size can change underneath us.\n+            # In freethreaded builds we need to lock around the length check and the indexing.\n+            length_check_and_target_assign = Nodes.CriticalSectionStatNode(\n+                node.pos,\n+                args=[unpack_temp_node],\n+                body=length_check_and_target_assign\n+            )\n+            length_check_and_target_assign.analyse_declarations(env)  # sets up \"finally_except_clause\"\n+        body = Nodes.StatListNode(\n+            node.pos,\n+            stats = [\n+                length_check_and_target_assign,\n+                # exclude node.body for now to not reanalyse it\n+                Nodes.ExprStatNode(\n+                    node.pos,\n+                    expr=ExprNodes.NumBinopNode(\n+                        node.pos,\n+                        operator=\"-=\" if reversed else \"+=\",\n+                        operand1=counter_ref,\n+                        operand2=ExprNodes.IntNode(node.pos, value=\"1\", constant_result=1, type=PyrexTypes.c_py_ssize_t_type)\n+                    )",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2132859798",
            "id": 2132859798,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5_INuW",
            "original_commit_id": "842795ef2b86f8433da7ecf557de4d94754b541a",
            "original_line": 440,
            "original_position": 154,
            "original_start_line": 435,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2906051147,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2132859798/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-06T20:21:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2132859798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2132878464"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2132878464"
                }
            },
            "author_association": "MEMBER",
            "body": "This doesn't seem to work (it seems to ignore the `inplace`)",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-06T20:35:31Z",
            "diff_hunk": "@@ -355,43 +404,82 @@ def make_length_call():\n             body=target_assign,\n         )\n \n-        body = Nodes.StatListNode(\n+        length_check_and_target_assign = Nodes.IfStatNode(\n             node.pos,\n-            stats = [target_assign])  # exclude node.body for now to not reanalyse it\n+            if_clauses=[\n+                Nodes.IfClauseNode(\n+                    node.pos,\n+                    condition=test_node,\n+                    body=target_assign\n+                ),\n+            ],\n+            else_clause=failed_test_body)\n+\n         if is_mutable:\n-            # We need to be slightly careful here that we are actually modifying the loop\n-            # bounds and not a temp copy of it. Setting is_temp=True on length_temp seems\n-            # to ensure this.\n-            # If this starts to fail then we could insert an \"if out_of_bounds: break\" instead\n-            loop_length_reassign = Nodes.SingleAssignmentNode(node.pos,\n-                                                        lhs = length_temp,\n-                                                        rhs = make_length_call())\n-            body.stats.append(loop_length_reassign)\n+            assert slice_node.type.is_pyobject, slice_node.type\n+            # For mutable containers, the size can change underneath us.\n+            # In freethreaded builds we need to lock around the length check and the indexing.\n+            length_check_and_target_assign = Nodes.CriticalSectionStatNode(\n+                node.pos,\n+                args=[unpack_temp_node],\n+                body=length_check_and_target_assign\n+            )\n+            length_check_and_target_assign.analyse_declarations(env)  # sets up \"finally_except_clause\"\n+        body = Nodes.StatListNode(\n+            node.pos,\n+            stats = [\n+                length_check_and_target_assign,\n+                # exclude node.body for now to not reanalyse it\n+                Nodes.ExprStatNode(\n+                    node.pos,\n+                    expr=ExprNodes.NumBinopNode(\n+                        node.pos,\n+                        operator=\"-=\" if reversed else \"+=\",\n+                        operand1=counter_ref,\n+                        operand2=ExprNodes.IntNode(node.pos, value=\"1\", constant_result=1, type=PyrexTypes.c_py_ssize_t_type)\n+                    )",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2132878464",
            "id": 2132878464,
            "in_reply_to_id": 2132859798,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5_ISSA",
            "original_commit_id": "842795ef2b86f8433da7ecf557de4d94754b541a",
            "original_line": 440,
            "original_position": 154,
            "original_start_line": 435,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2906094584,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2132878464/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-06T20:35:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2132878464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2132882255"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2132882255"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah this seems to work so I've done it.",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-06T20:39:35Z",
            "diff_hunk": "@@ -355,43 +404,82 @@ def make_length_call():\n             body=target_assign,\n         )\n \n-        body = Nodes.StatListNode(\n+        length_check_and_target_assign = Nodes.IfStatNode(\n             node.pos,\n-            stats = [target_assign])  # exclude node.body for now to not reanalyse it\n+            if_clauses=[\n+                Nodes.IfClauseNode(\n+                    node.pos,\n+                    condition=test_node,\n+                    body=target_assign\n+                ),\n+            ],\n+            else_clause=failed_test_body)\n+\n         if is_mutable:\n-            # We need to be slightly careful here that we are actually modifying the loop\n-            # bounds and not a temp copy of it. Setting is_temp=True on length_temp seems\n-            # to ensure this.\n-            # If this starts to fail then we could insert an \"if out_of_bounds: break\" instead\n-            loop_length_reassign = Nodes.SingleAssignmentNode(node.pos,\n-                                                        lhs = length_temp,\n-                                                        rhs = make_length_call())\n-            body.stats.append(loop_length_reassign)\n+            assert slice_node.type.is_pyobject, slice_node.type\n+            # For mutable containers, the size can change underneath us.\n+            # In freethreaded builds we need to lock around the length check and the indexing.\n+            length_check_and_target_assign = Nodes.CriticalSectionStatNode(\n+                node.pos,\n+                args=[unpack_temp_node],\n+                body=length_check_and_target_assign\n+            )\n+            length_check_and_target_assign.analyse_declarations(env)  # sets up \"finally_except_clause\"\n+        body = Nodes.StatListNode(\n+            node.pos,\n+            stats = [\n+                length_check_and_target_assign,\n+                # exclude node.body for now to not reanalyse it\n+                Nodes.ExprStatNode(\n+                    node.pos,\n+                    expr=ExprNodes.NumBinopNode(\n+                        node.pos,\n+                        operator=\"-=\" if reversed else \"+=\",\n+                        operand1=counter_ref,\n+                        operand2=ExprNodes.IntNode(node.pos, value=\"1\", constant_result=1, type=PyrexTypes.c_py_ssize_t_type)\n+                    )\n+                )\n+            ])\n \n-        loop_node = Nodes.ForFromStatNode(\n+        loop_node = Nodes.WhileStatNode(\n             node.pos,\n-            bound1=start_node, relation1=relation1,\n-            target=counter_ref,\n-            relation2=relation2, bound2=end_node,\n-            step=None, body=body,\n-            else_clause=node.else_clause,\n-            from_range=True)\n+            condition = keep_going_ref,\n+            body = body,\n+            else_clause = node.else_clause,\n+        )\n \n-        ret = UtilNodes.LetNode(\n-                    unpack_temp_node,\n-                    UtilNodes.LetNode(\n-                        length_temp,\n-                        # TempResultFromStatNode provides the framework where the \"counter_ref\"\n-                        # temp is set up and can be assigned to. However, we don't need the\n-                        # result it returns so wrap it in an ExprStatNode.\n-                        Nodes.ExprStatNode(node.pos,\n-                            expr=UtilNodes.TempResultFromStatNode(\n-                                    counter_ref,\n-                                    loop_node\n-                            )\n-                        )\n-                    )\n-                ).analyse_expressions(env)\n+        initialization_and_loop = Nodes.StatListNode(\n+            node.pos,\n+            stats=[\n+                Nodes.SingleAssignmentNode(\n+                    node.pos,\n+                    lhs=counter_ref,\n+                    rhs=start_node\n+                ),\n+                Nodes.SingleAssignmentNode(\n+                    node.pos,\n+                    lhs=keep_going_ref,\n+                    rhs=ExprNodes.BoolNode(node.pos, value=True)\n+                ),\n+                loop_node\n+            ])\n+\n+        ret = initialization_and_loop\n+        # temps that are are assigned once on entry to the loop\n+        for let_ref_node in [unpack_temp_node] + ([end_node] if not is_mutable else []):\n+            ret = UtilNodes.LetNode(\n+                let_ref_node,\n+                ret\n+            )\n+        # temps that are re-assigned during the loop. TempResultFromStatNode provides\n+        # a framework to work with these temps, but we don't need the result so we wrap\n+        # it in an ExprStatNode.\n+        for let_ref_node in [keep_going_ref, counter_ref]:\n+            ret = Nodes.ExprStatNode(\n+                node.pos,\n+                expr=UtilNodes.TempResultFromStatNode(let_ref_node, ret))",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2132882255",
            "id": 2132882255,
            "in_reply_to_id": 2132851690,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5_ITNP",
            "original_commit_id": "842795ef2b86f8433da7ecf557de4d94754b541a",
            "original_line": 480,
            "original_position": 216,
            "original_start_line": 474,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2906100932,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2132882255/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-06T20:39:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2132882255",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2133343897"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2133343897"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, right, sorry. That's not how this works. It just informs the `BinopNode` that it is part of an inplace assignment (and can thus try to optimise) but doesn't do the actual assignment.\r\n\r\nIn any case, what you're building here is not how inplace assignments look in the syntax tree. I guess you're just lucky that this generates suitable code but it's probably not intentional. You need to spell out the assignment of the sum instead (as a `SimpleAssignmentNode` at this point). `counter_ref` is a `LetRefNode`, you can use that twice (at least, we do that in several other places).",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-07T04:32:10Z",
            "diff_hunk": "@@ -355,43 +404,82 @@ def make_length_call():\n             body=target_assign,\n         )\n \n-        body = Nodes.StatListNode(\n+        length_check_and_target_assign = Nodes.IfStatNode(\n             node.pos,\n-            stats = [target_assign])  # exclude node.body for now to not reanalyse it\n+            if_clauses=[\n+                Nodes.IfClauseNode(\n+                    node.pos,\n+                    condition=test_node,\n+                    body=target_assign\n+                ),\n+            ],\n+            else_clause=failed_test_body)\n+\n         if is_mutable:\n-            # We need to be slightly careful here that we are actually modifying the loop\n-            # bounds and not a temp copy of it. Setting is_temp=True on length_temp seems\n-            # to ensure this.\n-            # If this starts to fail then we could insert an \"if out_of_bounds: break\" instead\n-            loop_length_reassign = Nodes.SingleAssignmentNode(node.pos,\n-                                                        lhs = length_temp,\n-                                                        rhs = make_length_call())\n-            body.stats.append(loop_length_reassign)\n+            assert slice_node.type.is_pyobject, slice_node.type\n+            # For mutable containers, the size can change underneath us.\n+            # In freethreaded builds we need to lock around the length check and the indexing.\n+            length_check_and_target_assign = Nodes.CriticalSectionStatNode(\n+                node.pos,\n+                args=[unpack_temp_node],\n+                body=length_check_and_target_assign\n+            )\n+            length_check_and_target_assign.analyse_declarations(env)  # sets up \"finally_except_clause\"\n+        body = Nodes.StatListNode(\n+            node.pos,\n+            stats = [\n+                length_check_and_target_assign,\n+                # exclude node.body for now to not reanalyse it\n+                Nodes.ExprStatNode(\n+                    node.pos,\n+                    expr=ExprNodes.NumBinopNode(\n+                        node.pos,\n+                        operator=\"-=\" if reversed else \"+=\",\n+                        operand1=counter_ref,\n+                        operand2=ExprNodes.IntNode(node.pos, value=\"1\", constant_result=1, type=PyrexTypes.c_py_ssize_t_type)\n+                    )",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2133343897",
            "id": 2133343897,
            "in_reply_to_id": 2132859798,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5_KD6Z",
            "original_commit_id": "842795ef2b86f8433da7ecf557de4d94754b541a",
            "original_line": 440,
            "original_position": 154,
            "original_start_line": 435,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2906745109,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133343897/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-07T05:41:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133343897",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2133396674"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2133396674"
                }
            },
            "author_association": "MEMBER",
            "body": "`LetRefNode` extracts the type itself if we let it.\r\n```suggestion\r\n        keep_going_ref = UtilNodes.LetRefNode(ExprNodes.BoolNode(node.pos, value=True))\r\n```",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-07T05:29:35Z",
            "diff_hunk": "@@ -311,42 +311,92 @@ def _transform_reversed_iteration(self, node, reversed_function):\n \n     def _transform_indexable_iteration(self, node, slice_node, is_mutable, reversed=False):\n         \"\"\"In principle can handle any iterable that Cython has a len() for and knows how to index\"\"\"\n+        # Generates code that looks approximately like:\n+        #\n+        # done = False\n+        # index = 0\n+        # while not done:\n+        #    with critical_section(iterable):\n+        #        if index > len(iterable):\n+        #            done = True\n+        #            continue\n+        #        value = iterable[index]\n+        #    ...\n+        #    index += 1\n+        # else:\n+        #     ...\n+        #\n+        # with small adjustments for reverse iteration and non-mutable sequences.\n         unpack_temp_node = UtilNodes.LetRefNode(\n             slice_node.as_none_safe_node(\"'NoneType' is not iterable\"),\n             may_hold_none=False, is_temp=True\n             )\n \n+        length_call_node = ExprNodes.SimpleCallNode(\n+            node.pos,\n+            function=ExprNodes.NameNode(\n+                node.pos, name=\"len\",\n+                entry=Builtin.builtin_scope.lookup(\"len\")),\n+            args=[unpack_temp_node])\n+        if is_mutable:\n+            end_node = length_call_node\n+        else:\n+            end_node = UtilNodes.LetRefNode(length_call_node, type=PyrexTypes.c_py_ssize_t_type)\n         start_node = ExprNodes.IntNode(\n             node.pos, value='0', constant_result=0, type=PyrexTypes.c_py_ssize_t_type)\n-        def make_length_call():\n-            # helper function since we need to create this node for a couple of places\n-            builtin_len = ExprNodes.NameNode(node.pos, name=\"len\",\n-                                             entry=Builtin.builtin_scope.lookup(\"len\"))\n-            return ExprNodes.SimpleCallNode(node.pos,\n-                                    function=builtin_len,\n-                                    args=[unpack_temp_node]\n-                                    )\n-        length_temp = UtilNodes.LetRefNode(make_length_call(), type=PyrexTypes.c_py_ssize_t_type, is_temp=True)\n-        end_node = length_temp\n+        keep_going_ref = UtilNodes.LetRefNode(ExprNodes.BoolNode(node.pos, value=True), type=PyrexTypes.c_bint_type)",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2133396674",
            "id": 2133396674,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5_KQzC",
            "original_commit_id": "fe0e19c144f2299eda2037e583bbc83111ee9003",
            "original_line": 347,
            "original_position": 47,
            "original_start_line": null,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2906745109,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133396674/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-07T05:41:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133396674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2133408797"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2133408797"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        # temps that are assigned once on entry to the loop\r\n```",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-07T05:35:40Z",
            "diff_hunk": "@@ -355,43 +405,60 @@ def make_length_call():\n             body=target_assign,\n         )\n \n-        body = Nodes.StatListNode(\n+        length_check_and_target_assign = Nodes.IfStatNode(\n             node.pos,\n-            stats = [target_assign])  # exclude node.body for now to not reanalyse it\n+            if_clauses=[\n+                Nodes.IfClauseNode(\n+                    node.pos,\n+                    condition=test_node,\n+                    body=target_assign\n+                ),\n+            ],\n+            else_clause=failed_test_body)\n+\n         if is_mutable:\n-            # We need to be slightly careful here that we are actually modifying the loop\n-            # bounds and not a temp copy of it. Setting is_temp=True on length_temp seems\n-            # to ensure this.\n-            # If this starts to fail then we could insert an \"if out_of_bounds: break\" instead\n-            loop_length_reassign = Nodes.SingleAssignmentNode(node.pos,\n-                                                        lhs = length_temp,\n-                                                        rhs = make_length_call())\n-            body.stats.append(loop_length_reassign)\n+            assert slice_node.type.is_pyobject, slice_node.type\n+            # For mutable containers, the size can change underneath us.\n+            # In freethreaded builds we need to lock around the length check and the indexing.\n+            length_check_and_target_assign = Nodes.CriticalSectionStatNode(\n+                node.pos,\n+                args=[unpack_temp_node],\n+                body=length_check_and_target_assign\n+            )\n+            length_check_and_target_assign.analyse_declarations(env)  # sets up \"finally_except_clause\"\n+        body = Nodes.StatListNode(\n+            node.pos,\n+            stats = [\n+                length_check_and_target_assign,\n+                # exclude node.body for now to not reanalyse it\n+                Nodes.ExprStatNode(\n+                    node.pos,\n+                    expr=ExprNodes.NumBinopNode(\n+                        node.pos,\n+                        operator=\"-=\" if reversed else \"+=\",\n+                        operand1=counter_ref,\n+                        operand2=ExprNodes.IntNode(node.pos, value=\"1\", constant_result=1, type=PyrexTypes.c_py_ssize_t_type)\n+                    )\n+                )\n+            ])\n \n-        loop_node = Nodes.ForFromStatNode(\n+        loop_node = Nodes.WhileStatNode(\n             node.pos,\n-            bound1=start_node, relation1=relation1,\n-            target=counter_ref,\n-            relation2=relation2, bound2=end_node,\n-            step=None, body=body,\n-            else_clause=node.else_clause,\n-            from_range=True)\n+            condition = keep_going_ref,\n+            body = body,\n+            else_clause = node.else_clause,\n+        )\n \n-        ret = UtilNodes.LetNode(\n-                    unpack_temp_node,\n-                    UtilNodes.LetNode(\n-                        length_temp,\n-                        # TempResultFromStatNode provides the framework where the \"counter_ref\"\n-                        # temp is set up and can be assigned to. However, we don't need the\n-                        # result it returns so wrap it in an ExprStatNode.\n-                        Nodes.ExprStatNode(node.pos,\n-                            expr=UtilNodes.TempResultFromStatNode(\n-                                    counter_ref,\n-                                    loop_node\n-                            )\n-                        )\n-                    )\n-                ).analyse_expressions(env)\n+        ret = loop_node\n+        # temps that are are assigned once on entry to the loop",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2133408797",
            "id": 2133408797,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5_KTwd",
            "original_commit_id": "fe0e19c144f2299eda2037e583bbc83111ee9003",
            "original_line": 453,
            "original_position": 189,
            "original_start_line": null,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2906745109,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133408797/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-07T05:41:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133408797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2133410172"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2133410172"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think this is long and obscure enough to merit multiple lines.\r\n```suggestion\r\n            ret = UtilNodes.LetNode(let_ref_node, ret)\r\n```",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-07T05:36:43Z",
            "diff_hunk": "@@ -355,43 +405,60 @@ def make_length_call():\n             body=target_assign,\n         )\n \n-        body = Nodes.StatListNode(\n+        length_check_and_target_assign = Nodes.IfStatNode(\n             node.pos,\n-            stats = [target_assign])  # exclude node.body for now to not reanalyse it\n+            if_clauses=[\n+                Nodes.IfClauseNode(\n+                    node.pos,\n+                    condition=test_node,\n+                    body=target_assign\n+                ),\n+            ],\n+            else_clause=failed_test_body)\n+\n         if is_mutable:\n-            # We need to be slightly careful here that we are actually modifying the loop\n-            # bounds and not a temp copy of it. Setting is_temp=True on length_temp seems\n-            # to ensure this.\n-            # If this starts to fail then we could insert an \"if out_of_bounds: break\" instead\n-            loop_length_reassign = Nodes.SingleAssignmentNode(node.pos,\n-                                                        lhs = length_temp,\n-                                                        rhs = make_length_call())\n-            body.stats.append(loop_length_reassign)\n+            assert slice_node.type.is_pyobject, slice_node.type\n+            # For mutable containers, the size can change underneath us.\n+            # In freethreaded builds we need to lock around the length check and the indexing.\n+            length_check_and_target_assign = Nodes.CriticalSectionStatNode(\n+                node.pos,\n+                args=[unpack_temp_node],\n+                body=length_check_and_target_assign\n+            )\n+            length_check_and_target_assign.analyse_declarations(env)  # sets up \"finally_except_clause\"\n+        body = Nodes.StatListNode(\n+            node.pos,\n+            stats = [\n+                length_check_and_target_assign,\n+                # exclude node.body for now to not reanalyse it\n+                Nodes.ExprStatNode(\n+                    node.pos,\n+                    expr=ExprNodes.NumBinopNode(\n+                        node.pos,\n+                        operator=\"-=\" if reversed else \"+=\",\n+                        operand1=counter_ref,\n+                        operand2=ExprNodes.IntNode(node.pos, value=\"1\", constant_result=1, type=PyrexTypes.c_py_ssize_t_type)\n+                    )\n+                )\n+            ])\n \n-        loop_node = Nodes.ForFromStatNode(\n+        loop_node = Nodes.WhileStatNode(\n             node.pos,\n-            bound1=start_node, relation1=relation1,\n-            target=counter_ref,\n-            relation2=relation2, bound2=end_node,\n-            step=None, body=body,\n-            else_clause=node.else_clause,\n-            from_range=True)\n+            condition = keep_going_ref,\n+            body = body,\n+            else_clause = node.else_clause,\n+        )\n \n-        ret = UtilNodes.LetNode(\n-                    unpack_temp_node,\n-                    UtilNodes.LetNode(\n-                        length_temp,\n-                        # TempResultFromStatNode provides the framework where the \"counter_ref\"\n-                        # temp is set up and can be assigned to. However, we don't need the\n-                        # result it returns so wrap it in an ExprStatNode.\n-                        Nodes.ExprStatNode(node.pos,\n-                            expr=UtilNodes.TempResultFromStatNode(\n-                                    counter_ref,\n-                                    loop_node\n-                            )\n-                        )\n-                    )\n-                ).analyse_expressions(env)\n+        ret = loop_node\n+        # temps that are are assigned once on entry to the loop\n+        for let_ref_node in [unpack_temp_node, keep_going_ref, counter_ref] + (\n+                [end_node] if not is_mutable else []):\n+            ret = UtilNodes.LetNode(\n+                let_ref_node,\n+                ret\n+            )",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2133410172",
            "id": 2133410172,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5_KUF8",
            "original_commit_id": "fe0e19c144f2299eda2037e583bbc83111ee9003",
            "original_line": 459,
            "original_position": 195,
            "original_start_line": 456,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2906745109,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133410172/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-07T05:41:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133410172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2133412700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2133412700"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        # Reinsert loop body after analysing the rest.\r\n        body.stats.insert(1, node.body)\r\n```",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-07T05:38:32Z",
            "diff_hunk": "@@ -355,43 +405,60 @@ def make_length_call():\n             body=target_assign,\n         )\n \n-        body = Nodes.StatListNode(\n+        length_check_and_target_assign = Nodes.IfStatNode(\n             node.pos,\n-            stats = [target_assign])  # exclude node.body for now to not reanalyse it\n+            if_clauses=[\n+                Nodes.IfClauseNode(\n+                    node.pos,\n+                    condition=test_node,\n+                    body=target_assign\n+                ),\n+            ],\n+            else_clause=failed_test_body)\n+\n         if is_mutable:\n-            # We need to be slightly careful here that we are actually modifying the loop\n-            # bounds and not a temp copy of it. Setting is_temp=True on length_temp seems\n-            # to ensure this.\n-            # If this starts to fail then we could insert an \"if out_of_bounds: break\" instead\n-            loop_length_reassign = Nodes.SingleAssignmentNode(node.pos,\n-                                                        lhs = length_temp,\n-                                                        rhs = make_length_call())\n-            body.stats.append(loop_length_reassign)\n+            assert slice_node.type.is_pyobject, slice_node.type\n+            # For mutable containers, the size can change underneath us.\n+            # In freethreaded builds we need to lock around the length check and the indexing.\n+            length_check_and_target_assign = Nodes.CriticalSectionStatNode(\n+                node.pos,\n+                args=[unpack_temp_node],\n+                body=length_check_and_target_assign\n+            )\n+            length_check_and_target_assign.analyse_declarations(env)  # sets up \"finally_except_clause\"\n+        body = Nodes.StatListNode(\n+            node.pos,\n+            stats = [\n+                length_check_and_target_assign,\n+                # exclude node.body for now to not reanalyse it\n+                Nodes.ExprStatNode(\n+                    node.pos,\n+                    expr=ExprNodes.NumBinopNode(\n+                        node.pos,\n+                        operator=\"-=\" if reversed else \"+=\",\n+                        operand1=counter_ref,\n+                        operand2=ExprNodes.IntNode(node.pos, value=\"1\", constant_result=1, type=PyrexTypes.c_py_ssize_t_type)\n+                    )\n+                )\n+            ])\n \n-        loop_node = Nodes.ForFromStatNode(\n+        loop_node = Nodes.WhileStatNode(\n             node.pos,\n-            bound1=start_node, relation1=relation1,\n-            target=counter_ref,\n-            relation2=relation2, bound2=end_node,\n-            step=None, body=body,\n-            else_clause=node.else_clause,\n-            from_range=True)\n+            condition = keep_going_ref,\n+            body = body,\n+            else_clause = node.else_clause,\n+        )\n \n-        ret = UtilNodes.LetNode(\n-                    unpack_temp_node,\n-                    UtilNodes.LetNode(\n-                        length_temp,\n-                        # TempResultFromStatNode provides the framework where the \"counter_ref\"\n-                        # temp is set up and can be assigned to. However, we don't need the\n-                        # result it returns so wrap it in an ExprStatNode.\n-                        Nodes.ExprStatNode(node.pos,\n-                            expr=UtilNodes.TempResultFromStatNode(\n-                                    counter_ref,\n-                                    loop_node\n-                            )\n-                        )\n-                    )\n-                ).analyse_expressions(env)\n+        ret = loop_node\n+        # temps that are are assigned once on entry to the loop\n+        for let_ref_node in [unpack_temp_node, keep_going_ref, counter_ref] + (\n+                [end_node] if not is_mutable else []):\n+            ret = UtilNodes.LetNode(\n+                let_ref_node,\n+                ret\n+            )\n+\n+        ret = ret.analyse_expressions(env)\n         body.stats.insert(1, node.body)",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2133412700",
            "id": 2133412700,
            "line": 464,
            "node_id": "PRRC_kwDOABDGAc5_KUtc",
            "original_commit_id": "fe0e19c144f2299eda2037e583bbc83111ee9003",
            "original_line": 462,
            "original_position": 198,
            "original_start_line": null,
            "path": "Cython/Compiler/Optimize.py",
            "position": 191,
            "pull_request_review_id": 2906745109,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133412700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-07T05:41:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133412700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6939#discussion_r2133413762"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6939"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2133413762"
                }
            },
            "author_association": "MEMBER",
            "body": "This comment still seems valid.",
            "commit_id": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "created_at": "2025-06-07T05:39:22Z",
            "diff_hunk": "@@ -311,42 +311,92 @@ def _transform_reversed_iteration(self, node, reversed_function):\n \n     def _transform_indexable_iteration(self, node, slice_node, is_mutable, reversed=False):\n         \"\"\"In principle can handle any iterable that Cython has a len() for and knows how to index\"\"\"\n+        # Generates code that looks approximately like:\n+        #\n+        # done = False\n+        # index = 0\n+        # while not done:\n+        #    with critical_section(iterable):\n+        #        if index > len(iterable):\n+        #            done = True\n+        #            continue\n+        #        value = iterable[index]\n+        #    ...\n+        #    index += 1\n+        # else:\n+        #     ...\n+        #\n+        # with small adjustments for reverse iteration and non-mutable sequences.\n         unpack_temp_node = UtilNodes.LetRefNode(\n             slice_node.as_none_safe_node(\"'NoneType' is not iterable\"),\n             may_hold_none=False, is_temp=True\n             )\n \n+        length_call_node = ExprNodes.SimpleCallNode(\n+            node.pos,\n+            function=ExprNodes.NameNode(\n+                node.pos, name=\"len\",\n+                entry=Builtin.builtin_scope.lookup(\"len\")),\n+            args=[unpack_temp_node])\n+        if is_mutable:\n+            end_node = length_call_node\n+        else:\n+            end_node = UtilNodes.LetRefNode(length_call_node, type=PyrexTypes.c_py_ssize_t_type)\n         start_node = ExprNodes.IntNode(\n             node.pos, value='0', constant_result=0, type=PyrexTypes.c_py_ssize_t_type)\n-        def make_length_call():\n-            # helper function since we need to create this node for a couple of places\n-            builtin_len = ExprNodes.NameNode(node.pos, name=\"len\",\n-                                             entry=Builtin.builtin_scope.lookup(\"len\"))\n-            return ExprNodes.SimpleCallNode(node.pos,\n-                                    function=builtin_len,\n-                                    args=[unpack_temp_node]\n-                                    )\n-        length_temp = UtilNodes.LetRefNode(make_length_call(), type=PyrexTypes.c_py_ssize_t_type, is_temp=True)\n-        end_node = length_temp\n+        keep_going_ref = UtilNodes.LetRefNode(ExprNodes.BoolNode(node.pos, value=True), type=PyrexTypes.c_bint_type)\n \n         if reversed:\n             relation1, relation2 = '>', '>='\n-            start_node, end_node = end_node, start_node\n+            start_check_node, end_node = end_node, start_node\n+            start_node = ExprNodes.SubNode(\n+                node.pos,\n+                operator='-',\n+                operand1=copy.copy(start_check_node),\n+                operand2=ExprNodes.IntNode(node.pos, value=\"1\", constant_result=1, type=PyrexTypes.c_py_ssize_t_type))\n         else:\n+            start_check_node = copy.copy(start_node)\n             relation1, relation2 = '<=', '<'\n \n-        counter_ref = UtilNodes.LetRefNode(pos=node.pos, type=PyrexTypes.c_py_ssize_t_type)\n+        counter_ref = UtilNodes.LetRefNode(start_node, type=PyrexTypes.c_py_ssize_t_type)\n+\n+        test_node = ExprNodes.PrimaryCmpNode(\n+            node.pos,\n+            operator=relation2,\n+            operand1=counter_ref,\n+            operand2=end_node)\n+        if is_mutable and reversed:\n+            test_node = ExprNodes.BoolBinopNode(\n+                node.pos,\n+                operator=\"and\",\n+                operand1=test_node,\n+                operand2=ExprNodes.PrimaryCmpNode(\n+                    node.pos,\n+                    operator=relation1,\n+                    operand1=start_check_node,\n+                    operand2=counter_ref,\n+                )\n+            )\n+        failed_test_body = Nodes.StatListNode(\n+            node.pos,\n+            stats=[\n+                # set \"done\" to true and continue. This'll terminate the loop and trigger the else clause\n+                Nodes.SingleAssignmentNode(\n+                    node.pos,\n+                    lhs=keep_going_ref,\n+                    rhs=ExprNodes.BoolNode(node.pos, value=False)\n+                ),\n+                Nodes.ContinueStatNode(node.pos)\n+            ]\n+        )\n \n         target_value = ExprNodes.IndexNode(slice_node.pos, base=unpack_temp_node,\n                                            index=counter_ref)\n-\n         target_assign = Nodes.SingleAssignmentNode(\n             pos = node.target.pos,\n             lhs = node.target,\n             rhs = target_value)\n \n-        # analyse with boundscheck and wraparound\n-        # off (because we're confident we know the size)",
            "html_url": "https://github.com/cython/cython/pull/6939#discussion_r2133413762",
            "id": 2133413762,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5_KU-C",
            "original_commit_id": "fe0e19c144f2299eda2037e583bbc83111ee9003",
            "original_line": 349,
            "original_position": 104,
            "original_start_line": 348,
            "path": "Cython/Compiler/Optimize.py",
            "position": null,
            "pull_request_review_id": 2906745109,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6939",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133413762/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2025-06-07T05:41:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2133413762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6939/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/af1a97a4ee86a7259f9cc6c07f0d60d813825505/comments",
            "commit": {
                "author": {
                    "date": "2025-05-26T13:12:39Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-05-26T13:12:39Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Close a freethreading loophole on bytearray loops\n\nAlthough we did already account for the possibility of the object\nchanging size during, it wasn't handled in a thread-safe way.\n\nThere's a slight discrepency with Python here (and for list\niteration too) - in Python I think the iteration should always\njust end. In Cython, we may end with an `IndexError` if\nthe sizes changes at the wrong time. I can live with that.",
                "tree": {
                    "sha": "fcabfc267e6194efb9463d2a468c54523ec04977",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/fcabfc267e6194efb9463d2a468c54523ec04977"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/af1a97a4ee86a7259f9cc6c07f0d60d813825505",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/af1a97a4ee86a7259f9cc6c07f0d60d813825505",
            "node_id": "C_kwDOAhr4b9oAKGFmMWE5N2E0ZWU4NmE3MjU5ZjljYzZjMDdmMGQ2MGQ4MTM4MjU1MDU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1775c9c6ff0d7f22b0d2dc9c37d77c3571e8e4b6",
                    "sha": "1775c9c6ff0d7f22b0d2dc9c37d77c3571e8e4b6",
                    "url": "https://api.github.com/repos/cython/cython/commits/1775c9c6ff0d7f22b0d2dc9c37d77c3571e8e4b6"
                }
            ],
            "sha": "af1a97a4ee86a7259f9cc6c07f0d60d813825505",
            "url": "https://api.github.com/repos/cython/cython/commits/af1a97a4ee86a7259f9cc6c07f0d60d813825505"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2ca5aa4bd10084256582e7ab66bda34503114f9d/comments",
            "commit": {
                "author": {
                    "date": "2025-06-04T08:26:52Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-06-04T08:26:52Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Add mechanism to change code-gen in freethreading",
                "tree": {
                    "sha": "c9890747b52bd753f29d7e7d824cb376d12be618",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c9890747b52bd753f29d7e7d824cb376d12be618"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2ca5aa4bd10084256582e7ab66bda34503114f9d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/2ca5aa4bd10084256582e7ab66bda34503114f9d",
            "node_id": "C_kwDOAhr4b9oAKDJjYTVhYTRiZDEwMDg0MjU2NTgyZTdhYjY2YmRhMzQ1MDMxMTRmOWQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/af1a97a4ee86a7259f9cc6c07f0d60d813825505",
                    "sha": "af1a97a4ee86a7259f9cc6c07f0d60d813825505",
                    "url": "https://api.github.com/repos/cython/cython/commits/af1a97a4ee86a7259f9cc6c07f0d60d813825505"
                }
            ],
            "sha": "2ca5aa4bd10084256582e7ab66bda34503114f9d",
            "url": "https://api.github.com/repos/cython/cython/commits/2ca5aa4bd10084256582e7ab66bda34503114f9d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/96971c9176418c9f830295e4d07de279d5c7ef99/comments",
            "commit": {
                "author": {
                    "date": "2025-06-04T09:12:12Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-06-04T09:12:12Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Enforce thread-safety in the get-set functions",
                "tree": {
                    "sha": "a209cc9237f616dd0e858891943856b24b3bfc7a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a209cc9237f616dd0e858891943856b24b3bfc7a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/96971c9176418c9f830295e4d07de279d5c7ef99",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/96971c9176418c9f830295e4d07de279d5c7ef99",
            "node_id": "C_kwDOAhr4b9oAKDk2OTcxYzkxNzY0MThjOWY4MzAyOTVlNGQwN2RlMjc5ZDVjN2VmOTk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2ca5aa4bd10084256582e7ab66bda34503114f9d",
                    "sha": "2ca5aa4bd10084256582e7ab66bda34503114f9d",
                    "url": "https://api.github.com/repos/cython/cython/commits/2ca5aa4bd10084256582e7ab66bda34503114f9d"
                }
            ],
            "sha": "96971c9176418c9f830295e4d07de279d5c7ef99",
            "url": "https://api.github.com/repos/cython/cython/commits/96971c9176418c9f830295e4d07de279d5c7ef99"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/94142cb1518e5adbd5a75e22f70fe0c19a020f1b/comments",
            "commit": {
                "author": {
                    "date": "2025-06-05T08:25:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-06-05T08:25:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Revert \"Add mechanism to change code-gen in freethreading\"\n\nThis reverts commit 2ca5aa4bd10084256582e7ab66bda34503114f9d.",
                "tree": {
                    "sha": "768e0bf35a46801977e31b73079a2d6e649a9196",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/768e0bf35a46801977e31b73079a2d6e649a9196"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/94142cb1518e5adbd5a75e22f70fe0c19a020f1b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/94142cb1518e5adbd5a75e22f70fe0c19a020f1b",
            "node_id": "C_kwDOAhr4b9oAKDk0MTQyY2IxNTE4ZTVhZGJkNWE3NWUyMmY3MGZlMGMxOWEwMjBmMWI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/96971c9176418c9f830295e4d07de279d5c7ef99",
                    "sha": "96971c9176418c9f830295e4d07de279d5c7ef99",
                    "url": "https://api.github.com/repos/cython/cython/commits/96971c9176418c9f830295e4d07de279d5c7ef99"
                }
            ],
            "sha": "94142cb1518e5adbd5a75e22f70fe0c19a020f1b",
            "url": "https://api.github.com/repos/cython/cython/commits/94142cb1518e5adbd5a75e22f70fe0c19a020f1b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/45652abafdc9b4032b8b01857dd0043c2ea07eab/comments",
            "commit": {
                "author": {
                    "date": "2025-06-05T17:46:42Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-06-05T17:46:42Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "bytearray iteration manually boundscheck locked value",
                "tree": {
                    "sha": "433829fbc1ab41cad4c2c98c4b85893df999239d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/433829fbc1ab41cad4c2c98c4b85893df999239d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/45652abafdc9b4032b8b01857dd0043c2ea07eab",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/45652abafdc9b4032b8b01857dd0043c2ea07eab",
            "node_id": "C_kwDOAhr4b9oAKDQ1NjUyYWJhZmRjOWI0MDMyYjhiMDE4NTdkZDAwNDNjMmVhMDdlYWI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/94142cb1518e5adbd5a75e22f70fe0c19a020f1b",
                    "sha": "94142cb1518e5adbd5a75e22f70fe0c19a020f1b",
                    "url": "https://api.github.com/repos/cython/cython/commits/94142cb1518e5adbd5a75e22f70fe0c19a020f1b"
                }
            ],
            "sha": "45652abafdc9b4032b8b01857dd0043c2ea07eab",
            "url": "https://api.github.com/repos/cython/cython/commits/45652abafdc9b4032b8b01857dd0043c2ea07eab"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/842795ef2b86f8433da7ecf557de4d94754b541a/comments",
            "commit": {
                "author": {
                    "date": "2025-06-06T19:54:57Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-06-06T19:54:57Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Revert \"Enforce thread-safety in the get-set functions\"\n\nThis reverts commit 96971c9176418c9f830295e4d07de279d5c7ef99.",
                "tree": {
                    "sha": "c3619d1e36b1b78f5c709963cc3c20684fffc5bc",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c3619d1e36b1b78f5c709963cc3c20684fffc5bc"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/842795ef2b86f8433da7ecf557de4d94754b541a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/842795ef2b86f8433da7ecf557de4d94754b541a",
            "node_id": "C_kwDOAhr4b9oAKDg0Mjc5NWVmMmI4NmY4NDMzZGE3ZWNmNTU3ZGU0ZDk0NzU0YjU0MWE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/45652abafdc9b4032b8b01857dd0043c2ea07eab",
                    "sha": "45652abafdc9b4032b8b01857dd0043c2ea07eab",
                    "url": "https://api.github.com/repos/cython/cython/commits/45652abafdc9b4032b8b01857dd0043c2ea07eab"
                }
            ],
            "sha": "842795ef2b86f8433da7ecf557de4d94754b541a",
            "url": "https://api.github.com/repos/cython/cython/commits/842795ef2b86f8433da7ecf557de4d94754b541a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fe0e19c144f2299eda2037e583bbc83111ee9003/comments",
            "commit": {
                "author": {
                    "date": "2025-06-06T20:39:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-06-06T20:39:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Simplify LetNode handling",
                "tree": {
                    "sha": "d34a4148a62346ee2983b3d977e8bdc834f7f0d6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d34a4148a62346ee2983b3d977e8bdc834f7f0d6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fe0e19c144f2299eda2037e583bbc83111ee9003",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/fe0e19c144f2299eda2037e583bbc83111ee9003",
            "node_id": "C_kwDOAhr4b9oAKGZlMGUxOWMxNDRmMjI5OWVkYTIwMzdlNTgzYmJjODMxMTFlZTkwMDM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/842795ef2b86f8433da7ecf557de4d94754b541a",
                    "sha": "842795ef2b86f8433da7ecf557de4d94754b541a",
                    "url": "https://api.github.com/repos/cython/cython/commits/842795ef2b86f8433da7ecf557de4d94754b541a"
                }
            ],
            "sha": "fe0e19c144f2299eda2037e583bbc83111ee9003",
            "url": "https://api.github.com/repos/cython/cython/commits/fe0e19c144f2299eda2037e583bbc83111ee9003"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4703291918ca65eaaa5d786c07d25813aa9b9cbc/comments",
            "commit": {
                "author": {
                    "date": "2025-06-07T07:17:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-06-07T07:17:08Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "7a80af71413643f32b0b2729a6ca215635c9aaaa",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7a80af71413643f32b0b2729a6ca215635c9aaaa"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4703291918ca65eaaa5d786c07d25813aa9b9cbc",
                "verification": {
                    "payload": "tree 7a80af71413643f32b0b2729a6ca215635c9aaaa\nparent fe0e19c144f2299eda2037e583bbc83111ee9003\nauthor da-woods <dw-git@d-woods.co.uk> 1749280628 +0100\ncommitter GitHub <noreply@github.com> 1749280628 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoQ+d0CRC1aQ7uu5UhlAAA4mYQALHdi3vdS5KMcncpQ7D8sfU2\nH5mhBlQSmBLD0VM30j5LMBnu0T8TqNcegwyMSvmmxMf+4aGkLqBM/cqjmB7fB7qC\nVXrUlnHBLVufuaNva2sFg+7l4WTRPqHFP8QWRbbi73OB/W6nDY5+RNhbqURYrJHI\nfeMiO4MKldcpbXoAiUoCobGAuhCgri6THWKOpObx15zj9ki44akUBOAfUM+HHJHF\nHXAfIDGZf4CD690efSRpTcTGmTTrYStdHqgFQsPXypIu7bmMbspDJby93a/7aHAG\nURdnDrbKnzyI9BeSB8hj2owepBfaHCaeBDpaWkv0RV+wDe+gbEVgrHvSCf5VG7Iw\nJvfIwfR7kIhjgN2Y00oDVROn1muxjuUc/D39cGiVjLBZ/4Wcm0BKp6LT3hkhU8NZ\nAAaKh8osEsMMd4K4Bt98SfIn5rvQtZX+nZa00XXESiIEiSFv5z+p6Li6IyxK6Od6\n/NoJvx5NgIIQcNdjAec2q0SLsdhYmNLxNDB+0snMPAYNToiXnf+rWR2mtIZLdmo5\nhOJuxs5NjBWLYFIFc7GMyl/xtoHHNJsBwIg4sSRjD6uEcikRQpJf/zkqfKG94+ZU\nncOzjAAvrcSWWQXn8UOW25iQLbrj878ShePNxWJ9kCNIB0KB/rrfwsVn4lB37U4P\nThaaExK5nhx5agxX+j60\n=OuQO\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-06-07T07:22:11Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/4703291918ca65eaaa5d786c07d25813aa9b9cbc",
            "node_id": "C_kwDOAhr4b9oAKDQ3MDMyOTE5MThjYTY1ZWFhYTVkNzg2YzA3ZDI1ODEzYWE5YjljYmM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fe0e19c144f2299eda2037e583bbc83111ee9003",
                    "sha": "fe0e19c144f2299eda2037e583bbc83111ee9003",
                    "url": "https://api.github.com/repos/cython/cython/commits/fe0e19c144f2299eda2037e583bbc83111ee9003"
                }
            ],
            "sha": "4703291918ca65eaaa5d786c07d25813aa9b9cbc",
            "url": "https://api.github.com/repos/cython/cython/commits/4703291918ca65eaaa5d786c07d25813aa9b9cbc"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f1dc290709391563097e0716a86c9fb7f2ff06bc/comments",
            "commit": {
                "author": {
                    "date": "2025-06-07T07:26:43Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-06-07T07:26:43Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Other review changes",
                "tree": {
                    "sha": "79147019e90b61171942685d3e591c0adc56e763",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/79147019e90b61171942685d3e591c0adc56e763"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f1dc290709391563097e0716a86c9fb7f2ff06bc",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "node_id": "C_kwDOAhr4b9oAKGYxZGMyOTA3MDkzOTE1NjMwOTdlMDcxNmE4NmM5ZmI3ZjJmZjA2YmM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4703291918ca65eaaa5d786c07d25813aa9b9cbc",
                    "sha": "4703291918ca65eaaa5d786c07d25813aa9b9cbc",
                    "url": "https://api.github.com/repos/cython/cython/commits/4703291918ca65eaaa5d786c07d25813aa9b9cbc"
                }
            ],
            "sha": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
            "url": "https://api.github.com/repos/cython/cython/commits/f1dc290709391563097e0716a86c9fb7f2ff06bc"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/6939/commits",
    "created_at": "2025-06-04T09:14:35Z",
    "diff_url": "https://github.com/cython/cython/pull/6939.diff",
    "draft": false,
    "head": {
        "label": "da-woods:bytearray-loop-thread-safety",
        "ref": "bytearray-loop-thread-safety",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2025-06-08T10:17:06Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 79180,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2025-06-04T22:39:56Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "f1dc290709391563097e0716a86c9fb7f2ff06bc",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/6939",
    "id": 2566670558,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/6939",
    "labels": [
        {
            "color": "F5AB5D",
            "default": false,
            "description": "",
            "id": 6871764375,
            "name": "freethreading CPython",
            "node_id": "LA_kwDOABDGAc8AAAABmZbNlw",
            "url": "https://api.github.com/repos/cython/cython/labels/freethreading%20CPython"
        }
    ],
    "locked": false,
    "merge_commit_sha": "053cbac69d65fd060860e8558f391263f1b4bd86",
    "merged_at": "2025-06-07T16:04:23Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 32,
        "created_at": "2020-02-09T13:21:48Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder",
            "user_view_type": "public"
        },
        "description": "First feature release after the cleanup releases 3.0 and 3.1.",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/75",
        "id": 5085425,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/75/labels",
        "node_id": "MDk6TWlsZXN0b25lNTA4NTQyNQ==",
        "number": 75,
        "open_issues": 16,
        "state": "open",
        "title": "3.2",
        "updated_at": "2025-06-08T05:15:52Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/75"
    },
    "node_id": "PR_kwDOABDGAc6Y_Eje",
    "number": 6939,
    "patch_url": "https://github.com/cython/cython/pull/6939.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/6939/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/f1dc290709391563097e0716a86c9fb7f2ff06bc",
    "title": "Close a freethreading loophole on bytearray loops",
    "updated_at": "2025-06-07T16:04:27Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/6939",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods",
        "user_view_type": "public"
    }
}