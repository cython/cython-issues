{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/7080/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7080/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/7080"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/7080"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7080/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7080"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/a74a5342f3f4b1b2f063067ba70a6467aef9583d"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1545,
            "forks_count": 1545,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1470,
            "open_issues_count": 1470,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2025-08-13T09:11:29Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 76556,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 10214,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2025-08-13T10:05:47Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 10214,
            "watchers_count": 10214,
            "web_commit_signoff_required": false
        },
        "sha": "a5fe318694c06150fbedaa5be7bdd431d409ec48",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": "When using multi-phase init and module state, use a hash table instead of bisection into an array. This should hopefully perform better on average (especially when there are many modules available).\r\n\r\nSpecial case the 0th module so this one's always available quickly.\r\n\r\nMake it so the implementation can be tested independently on subinterpreters/module state.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7080#discussion_r2272414170"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7080"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2272414170"
                }
            },
            "author_association": "MEMBER",
            "body": "What speaks against a directly inlined hash function, given that we need to provide our own implementation below either way? That CityHash is probably much faster in practice than the generic hash implementation that is indirectly called by the call to `Py_HashBuffer`.",
            "commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "created_at": "2025-08-13T07:58:09Z",
            "diff_hunk": "@@ -2699,344 +2746,436 @@ static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n \n \n typedef struct {\n+    // module == NULL -> free to use/reuse\n+    // id == 0 -> uninitialized and thus searches for an id should not go further\n+    // id == -1 -> set to this before setting the module to NULL, so searches\n+    //             for other ids can continue beyond it, but it doesn't get mistaken for a valid id.\n+  #if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n     int64_t id;\n     PyObject *module;\n+  #else\n+    __pyx_atomic_intn_type(64) id;\n+    __pyx_atomic_ptr_type module;\n+  #endif\n } __Pyx_InterpreterIdAndModule;\n \n typedef struct {\n-    char interpreter_id_as_index;\n-    Py_ssize_t count;\n-    Py_ssize_t allocated;\n-    __Pyx_InterpreterIdAndModule table[1];\n+    Py_ssize_t size;\n+    __Pyx_InterpreterIdAndModule entries[1];\n+} __Pyx_ModuleStateLookupTable;\n+\n+typedef struct __Pyx_ModuleStateLookupData {\n+  __PYX_MODULE_STATE_MUTEX_DECL\n+  #if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+    __pyx_atomic_int_type read_counter;\n+  #endif\n+    // special case for interpreter 0\n+    PyObject *module0;\n+  #if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+    __pyx_atomic_intn_type(64) count;\n+    __pyx_atomic_ptr_type table;\n+  #else\n+    int64_t count;\n+    __Pyx_ModuleStateLookupTable* table;\n+  #endif\n } __Pyx_ModuleStateLookupData;\n \n-#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32\n-// \"interpreter_id_as_index\" above means \"the maximum interpreter ID ever seen is smaller than\n-// __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE and thus they're stored in an array\n-// where the index corresponds to interpreter ID, and __Pyx_ModuleStateLookup_count\n-// is the size of the array.\n-\n-#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n-static __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;\n-#endif\n-\n-// A sorted list of (sub)interpreter IDs and the module that was imported into that interpreter.\n-// For now look this up via binary search.\n-#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n-static __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;\n-#else\n-static __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;\n+static __Pyx_ModuleStateLookupData __Pyx_ModuleStateLookup_data = {\n+    __PYX_MODULE_STATE_MUTEX_INIT\n+// C++ is a bit picky about how we initialize. Before C++11 {} doesn't work.\n+// On some compilers after C++11, 0 doesn't work for atomics. \n+#if defined(__cplusplus) && __cplusplus >= 201103L\n+  #if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+    {}, // read_counter\n+  #endif\n+    {}, {}, {}\n+#elif !defined(__cplusplus)\n+  #if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+    0, // read_counter\n+  #endif\n+    0, // module0\n+    0, // count\n+    0 // table\n #endif\n+};\n \n \n-static __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(\n-        __Pyx_InterpreterIdAndModule* table,\n-        Py_ssize_t count,\n-        int64_t interpreterId) {\n-    __Pyx_InterpreterIdAndModule* begin = table;\n-    __Pyx_InterpreterIdAndModule* end = begin + count;\n \n-    // fairly likely - e.g. single interpreter\n-    if (begin->id == interpreterId) {\n-        return begin;\n-    }\n-\n-    while ((end - begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {\n-        __Pyx_InterpreterIdAndModule* halfway = begin + (end - begin)/2;\n-        if (halfway->id == interpreterId) {\n-            return halfway;\n-        }\n-        if (halfway->id < interpreterId) {\n-            begin = halfway;\n-        } else {\n-            end = halfway;\n-        }\n-    }\n-\n-    // Assume that for small ranges, it's quicker to do a linear search\n-    for (; begin < end; ++begin) {\n-        if (begin->id >= interpreterId) return begin;\n-    }\n-    return begin;\n+static int64_t __Pyx_ModuleStateLookup_HashId(int64_t id)\n+{\n+  #if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030E0000\n+    int64_t v = Py_HashBuffer((void*)&id, sizeof(id));\n+    return v >= 0 ? v : -(v+1);  // make sure we return something +ve\n+  #else",
            "html_url": "https://github.com/cython/cython/pull/7080#discussion_r2272414170",
            "id": 2272414170,
            "line": 2809,
            "node_id": "PRRC_kwDOABDGAc6Hckna",
            "original_commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "original_line": 2809,
            "original_position": 304,
            "original_start_line": 2806,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": 304,
            "pull_request_review_id": 3114397156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7080",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272414170/reactions"
            },
            "side": "RIGHT",
            "start_line": 2806,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-13T09:06:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272414170",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7080#discussion_r2272473924"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7080"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2272473924"
                }
            },
            "author_association": "MEMBER",
            "body": "Do you think that we'd have a reason to shrink the table in the real world? I'd expect the number of interpreters to stay somewhat small, and this is just a table, probably dwarfed by the actual module state data. IIUC, we spend 16 bytes per module. Even if an application ends up running 1000 interpreters at a time, that'd just be a table of 16KiB, probably less than 30KiB as a hash table. And it seems unlikely that such a peak usage only appears once in a longer running application.\r\n\r\nYou know your code better than me – if it's not a big deal to allow shrinking then why not, but it can sometimes simplify the implementation to allow only growth. And it avoids excessive rehashing on larger fluctuations, e.g. when several interpreters are started and terminated repeatedly in batches (as you could expect in a long-running server setting).",
            "commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "created_at": "2025-08-13T08:18:49Z",
            "diff_hunk": "@@ -2699,344 +2746,436 @@ static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;\n \n \n typedef struct {\n+    // module == NULL -> free to use/reuse\n+    // id == 0 -> uninitialized and thus searches for an id should not go further\n+    // id == -1 -> set to this before setting the module to NULL, so searches\n+    //             for other ids can continue beyond it, but it doesn't get mistaken for a valid id.\n+  #if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n     int64_t id;\n     PyObject *module;\n+  #else\n+    __pyx_atomic_intn_type(64) id;\n+    __pyx_atomic_ptr_type module;\n+  #endif\n } __Pyx_InterpreterIdAndModule;\n \n typedef struct {\n-    char interpreter_id_as_index;\n-    Py_ssize_t count;\n-    Py_ssize_t allocated;\n-    __Pyx_InterpreterIdAndModule table[1];\n+    Py_ssize_t size;\n+    __Pyx_InterpreterIdAndModule entries[1];\n+} __Pyx_ModuleStateLookupTable;\n+\n+typedef struct __Pyx_ModuleStateLookupData {\n+  __PYX_MODULE_STATE_MUTEX_DECL\n+  #if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+    __pyx_atomic_int_type read_counter;\n+  #endif\n+    // special case for interpreter 0\n+    PyObject *module0;\n+  #if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+    __pyx_atomic_intn_type(64) count;\n+    __pyx_atomic_ptr_type table;\n+  #else\n+    int64_t count;\n+    __Pyx_ModuleStateLookupTable* table;\n+  #endif\n } __Pyx_ModuleStateLookupData;\n \n-#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32\n-// \"interpreter_id_as_index\" above means \"the maximum interpreter ID ever seen is smaller than\n-// __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE and thus they're stored in an array\n-// where the index corresponds to interpreter ID, and __Pyx_ModuleStateLookup_count\n-// is the size of the array.\n-\n-#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n-static __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;\n-#endif\n-\n-// A sorted list of (sub)interpreter IDs and the module that was imported into that interpreter.\n-// For now look this up via binary search.\n-#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n-static __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;\n-#else\n-static __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;\n+static __Pyx_ModuleStateLookupData __Pyx_ModuleStateLookup_data = {\n+    __PYX_MODULE_STATE_MUTEX_INIT\n+// C++ is a bit picky about how we initialize. Before C++11 {} doesn't work.\n+// On some compilers after C++11, 0 doesn't work for atomics. \n+#if defined(__cplusplus) && __cplusplus >= 201103L\n+  #if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+    {}, // read_counter\n+  #endif\n+    {}, {}, {}\n+#elif !defined(__cplusplus)\n+  #if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+    0, // read_counter\n+  #endif\n+    0, // module0\n+    0, // count\n+    0 // table\n #endif\n+};\n \n \n-static __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(\n-        __Pyx_InterpreterIdAndModule* table,\n-        Py_ssize_t count,\n-        int64_t interpreterId) {\n-    __Pyx_InterpreterIdAndModule* begin = table;\n-    __Pyx_InterpreterIdAndModule* end = begin + count;\n \n-    // fairly likely - e.g. single interpreter\n-    if (begin->id == interpreterId) {\n-        return begin;\n-    }\n-\n-    while ((end - begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {\n-        __Pyx_InterpreterIdAndModule* halfway = begin + (end - begin)/2;\n-        if (halfway->id == interpreterId) {\n-            return halfway;\n-        }\n-        if (halfway->id < interpreterId) {\n-            begin = halfway;\n-        } else {\n-            end = halfway;\n-        }\n-    }\n-\n-    // Assume that for small ranges, it's quicker to do a linear search\n-    for (; begin < end; ++begin) {\n-        if (begin->id >= interpreterId) return begin;\n-    }\n-    return begin;\n+static int64_t __Pyx_ModuleStateLookup_HashId(int64_t id)\n+{\n+  #if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030E0000\n+    int64_t v = Py_HashBuffer((void*)&id, sizeof(id));\n+    return v >= 0 ? v : -(v+1);  // make sure we return something +ve\n+  #else\n+    // CityHash\n+    char* buf = (char*)&id;\n+    uint64_t a = 0, b = 0;\n+    memcpy(&a, buf, 4);\n+    memcpy(&b, buf+4, 4);\n+\n+    uint64_t u = 8+(a<<3);\n+    uint64_t v = b;\n+\n+    const uint64_t kMul = 0x9ddfea08eb382d69ULL;\n+    a = (u ^ v) * kMul;\n+    a ^= (a >> 47);\n+    b = (v ^ a) * kMul;\n+    b ^= (b >> 47);\n+    b *= kMul;\n+    return (b >> 1); // lose a bit and convert to signed int\n+  #endif\n }\n \n-static PyObject *__Pyx_State_FindModule(CYTHON_UNUSED void* dummy) {\n-    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());\n-    if (interpreter_id == -1) return NULL;\n-\n+static __Pyx_ModuleStateLookupTable* __Pyx_ModuleStateLookup_load_table_for_read(__Pyx_ModuleStateLookupData *data) {\n #if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n-    __Pyx_ModuleStateLookupData* data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);\n+    __Pyx_ModuleStateLookupTable* table = (__Pyx_ModuleStateLookupTable*)__pyx_atomic_pointer_load_relaxed(&data->table);\n     {\n         // Thread sanitizer says that this is OK relaxed, but I think it needs to be acquire-release\n-        __pyx_atomic_incr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);\n-        // data == NULL can either mean we're writing, or it's uninitialized.\n+        __pyx_atomic_incr_acq_rel(&data->read_counter);\n+        // table == NULL can either mean we're writing, or it's uninitialized.\n         // Uninitialized only happens infrequently on the first few calls, so it's fine\n         // to be on the slow path.\n-        if (likely(data)) {\n-            __Pyx_ModuleStateLookupData* new_data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_acquire(&__Pyx_ModuleStateLookup_data);\n-            if (likely(data == new_data)) {\n+        if (likely(table)) {\n+            __Pyx_ModuleStateLookupTable* new_table = (__Pyx_ModuleStateLookupTable*)__pyx_atomic_pointer_load_acquire(&data->table);\n+            if (likely(table == new_table)) {\n                 // Nothing has written the data between incrementing the read counter and loading the pointer.\n                 goto read_finished;\n             }\n         }\n         // In principle DW believes this could be \"relaxed\", but it's on the unlikely slow path anyway\n         // so let's not add more macros.\n         // Undo our addition to the read counter.\n-        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);\n+        __pyx_atomic_decr_acq_rel(&data->read_counter);\n         // Wait for the write to finish and try again\n-        __Pyx_ModuleStateLookup_Lock();\n-        __pyx_atomic_incr_relaxed(&__Pyx_ModuleStateLookup_read_counter);\n-        data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);\n-        __Pyx_ModuleStateLookup_Unlock();\n+        __Pyx_ModuleStateLookup_Lock(data);\n+        __pyx_atomic_incr_relaxed(&data->read_counter);\n+        table = (__Pyx_ModuleStateLookupTable*)__pyx_atomic_pointer_load_relaxed(&data->table);\n+        __Pyx_ModuleStateLookup_Unlock(data);\n     }\n   read_finished:;\n \n #else\n-    __Pyx_ModuleStateLookupData* data = __Pyx_ModuleStateLookup_data;\n+    __Pyx_ModuleStateLookupTable* table = data->table;\n #endif\n+    return table;\n+}\n \n-    __Pyx_InterpreterIdAndModule* found = NULL;\n-\n+static __Pyx_InterpreterIdAndModule *__Pyx_ModuleStateLookup_find_id_in_table(__Pyx_ModuleStateLookupTable* table, int64_t interpreter_id)\n+{\n     // There's one \"already imported\" check that'll hit this\n-    if (unlikely(!data)) goto end;\n-\n-    if (data->interpreter_id_as_index) {\n-        if (interpreter_id < data->count) {\n-            found = data->table+interpreter_id;\n+    if (unlikely(!table)) return NULL;\n+\n+    int64_t hash_id = __Pyx_ModuleStateLookup_HashId(interpreter_id);\n+    int64_t starting_bucket = hash_id % table->size;\n+    int n;\n+    for (n=0; n<2; ++n) {\n+        int64_t start = (n==0) ? starting_bucket : 0;\n+        int64_t stop = (n==0) ? table->size : starting_bucket;\n+        int64_t bucket;\n+        for (bucket=start; bucket<stop; ++bucket) {\n+          #if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+            int64_t bucket_id = table->entries[bucket].id;\n+          #else\n+            int64_t bucket_id = __pyx_atomic_load_n(64, &table->entries[bucket].id);\n+          #endif\n+            if (bucket_id == interpreter_id) {\n+                return &table->entries[bucket];\n+            } else if (bucket_id == 0) {\n+                return NULL; // shouldn't happen, but we're not going to find it\n+            }\n         }\n-    } else {\n-        found = __Pyx_State_FindModuleStateLookupTableLowerBound(\n-            data->table, data->count, interpreter_id);\n     }\n+    return NULL;\n+}\n \n-  end:\n-    {\n-        PyObject *result=NULL;\n+static PyObject *__Pyx_ModuleStateLookup_FindModule(__Pyx_ModuleStateLookupData *data, int64_t interpreter_id) {\n+    if (interpreter_id == 0) return data->module0;\n+    if (interpreter_id == -1) return NULL;\n+\n+    __Pyx_ModuleStateLookupTable *table = __Pyx_ModuleStateLookup_load_table_for_read(data);\n+\n+    PyObject* found = NULL;\n+    __Pyx_InterpreterIdAndModule *id_and_module = __Pyx_ModuleStateLookup_find_id_in_table(table, interpreter_id);\n+    if (id_and_module) {\n+      #if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+        found = (PyObject*)id_and_module->module;\n+      #else\n+        found = (PyObject*)__pyx_atomic_pointer_load_acquire(&id_and_module->module);\n+      #endif\n+    }\n \n-        if (found && found->id == interpreter_id) {\n-            result = found->module;\n-        }\n #if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n-        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);\n+    __pyx_atomic_decr_acq_rel(&data->read_counter);\n #endif\n-        return result;\n-    }\n+    return found;\n+}\n+\n+static PyObject *__Pyx_State_FindModule(CYTHON_UNUSED void* dummy) {\n+    __PYX_MODULE_STATE_MUTEX_RUNTIME_INIT_GLOBAL();\n+    int64_t interpreter_id = __Pyx_GetCurrentInterpreterId();\n+    return __Pyx_ModuleStateLookup_FindModule(&__Pyx_ModuleStateLookup_data, interpreter_id);\n }\n \n #if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n-static void __Pyx_ModuleStateLookup_wait_until_no_readers(void) {\n+static void __Pyx_ModuleStateLookup_wait_until_no_readers(__Pyx_ModuleStateLookupData *data) {\n     // Wait for any readers still working on the old data. Spin-lock is\n     // fine because readers should be much faster than memory allocation.\n-    while (__pyx_atomic_load(&__Pyx_ModuleStateLookup_read_counter) != 0);\n+    // This is called while also being a reader, so allow one reader.\n+    while (__pyx_atomic_load(&data->read_counter) > 1);\n }\n #else\n-#define __Pyx_ModuleStateLookup_wait_until_no_readers()\n-#endif\n-\n-static int __Pyx_State_AddModuleInterpIdAsIndex(__Pyx_ModuleStateLookupData **old_data, PyObject* module, int64_t interpreter_id) {\n-    Py_ssize_t to_allocate = (*old_data)->allocated;\n-    while (to_allocate <= interpreter_id) {\n-        if (to_allocate == 0) to_allocate = 1;\n-        else to_allocate *= 2;\n-    }\n-    __Pyx_ModuleStateLookupData *new_data = *old_data;\n-    if (to_allocate != (*old_data)->allocated) {\n-         new_data = (__Pyx_ModuleStateLookupData *)realloc(\n-            *old_data,\n-            sizeof(__Pyx_ModuleStateLookupData)+(to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));\n-        if (!new_data) {\n-            PyErr_NoMemory();\n-            return -1;\n-        }\n-        for (Py_ssize_t i = new_data->allocated; i < to_allocate; ++i) {\n-            new_data->table[i].id = i;\n-            new_data->table[i].module = NULL;\n+#define __Pyx_ModuleStateLookup_wait_until_no_readers(data)\n+#endif\n+\n+static int __Pyx_ModuleStateLookup_add_to_table(int64_t interpreter_id, PyObject *module, __Pyx_ModuleStateLookupTable* table) {\n+    int64_t hash_id = __Pyx_ModuleStateLookup_HashId(interpreter_id);\n+    int64_t starting_bucket = hash_id % table->size;\n+    int n;\n+    for (n=0; n<2; ++n) {\n+        int64_t start = (n==0) ? starting_bucket : 0;\n+        int64_t stop = (n==0) ? table->size : starting_bucket;\n+        int64_t bucket;\n+        for (bucket=start; bucket<stop; ++bucket) {\n+            // We can insert module into the next available bucket with a NULL module\n+          #if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+            if (table->entries[bucket].module == 0) {\n+                table->entries[bucket].module = module;\n+                table->entries[bucket].id = interpreter_id;\n+                return 0;\n+            }\n+          #else\n+            __pyx_nonatomic_ptr_type expected = 0;\n+            if (__pyx_atomic_pointer_cmp_exchange(&table->entries[bucket].module, &expected, (__pyx_nonatomic_ptr_type)module)) {\n+                __pyx_atomic_store_n(64, &table->entries[bucket].id, interpreter_id);\n+                return 0;\n+            }\n+          #endif\n         }\n-        new_data->allocated = to_allocate;\n-    }\n-    new_data->table[interpreter_id].module = module;\n-    if (new_data->count < interpreter_id+1) {\n-        new_data->count = interpreter_id+1;\n     }\n-    *old_data = new_data;\n-    return 0;\n+    PyErr_Format(\n+      PyExc_SystemError,\n+      \"Cython failed to add interpreter %lli to lookup table\",\n+      (long long)interpreter_id\n+    );\n+    return -1;\n }\n \n-static void __Pyx_State_ConvertFromInterpIdAsIndex(__Pyx_ModuleStateLookupData *data) {\n-    __Pyx_InterpreterIdAndModule *read = data->table;\n-    __Pyx_InterpreterIdAndModule *write = data->table;\n-    __Pyx_InterpreterIdAndModule *end = read + data->count;\n+static Py_ssize_t __Pyx_ModuleStateLookup_calculate_target_size(__Pyx_ModuleStateLookupData* data, __Pyx_ModuleStateLookupTable *table) {\n+  #if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE\n+    int64_t count = data->count;\n+  #else\n+    int64_t count = __pyx_atomic_load_n(64, &data->count);\n+  #endif\n+    Py_ssize_t allocated = table ? table->size : 0;\n+    Py_ssize_t target = allocated;\n+    // arbitrary minimum size\n+    if (target < 10) target = 10;\n \n-    for (; read<end; ++read) {\n-        if (read->module) {\n-            write->id = read->id;\n-            write->module = read->module;\n-            ++write;\n-        }\n-        // Otherwise empty; don't copy\n+    // keep it less than half filled\n+    while (target <= count*2) {\n+        target *= 2;\n     }\n-    data->count = write - data->table;\n-    for (; write<end; ++write) {\n-        // clear rest of array\n-        write->id = 0;\n-        write->module = NULL;\n+    // but shrink if less than 10% filled\n+    while (target < count/10) {\n+        target /= 2;\n+        if (target < 10) {\n+            return 10;\n+        }\n     }",
            "html_url": "https://github.com/cython/cython/pull/7080#discussion_r2272473924",
            "id": 2272473924,
            "line": 2984,
            "node_id": "PRRC_kwDOABDGAc6HczNE",
            "original_commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "original_line": 2984,
            "original_position": 560,
            "original_start_line": 2978,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": 560,
            "pull_request_review_id": 3114397156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7080",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272473924/reactions"
            },
            "side": "RIGHT",
            "start_line": 2978,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-13T09:06:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272473924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7080#discussion_r2272529365"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7080"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2272529365"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we can simplify the usage here:\r\n```suggestion\r\ndef add_macro(macro_name, value):\r\n    def update(ext):\r\n        ext.define_macros.append((macro_name, value))\r\n        return ext\r\n    return update\r\n```\r\n(I considered making the value optional but chose not to because it would require a different function name.)",
            "commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "created_at": "2025-08-13T08:39:00Z",
            "diff_hunk": "@@ -264,9 +264,11 @@ def exclude_test_if_no_gdb(*, _has_gdb=[None]):\n     return not _has_gdb[0]\n \n \n-def update_linetrace_extension(ext):\n-    ext.define_macros.append(('CYTHON_TRACE', 1))\n-    return ext\n+def get_update_with_macro(macro):\n+    def update(ext):\n+        ext.define_macros.append(macro)\n+        return ext\n+    return update",
            "html_url": "https://github.com/cython/cython/pull/7080#discussion_r2272529365",
            "id": 2272529365,
            "line": 271,
            "node_id": "PRRC_kwDOABDGAc6HdAvV",
            "original_commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "original_line": 271,
            "original_position": 11,
            "original_start_line": 267,
            "path": "runtests.py",
            "position": 11,
            "pull_request_review_id": 3114397156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7080",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272529365/reactions"
            },
            "side": "RIGHT",
            "start_line": 267,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-13T09:06:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272529365",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7080#discussion_r2272534366"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7080"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2272534366"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    'tag:trace' : add_macro('CYTHON_TRACE', 1),\r\n    'tag:cppexecpolicies': require_gcc(\"9.1\"),\r\n    'tag:module_state_utility_code' : add_macro('CYTHON_TEST_MODULE_STATE_LOOKUP', 1),\r\n```",
            "commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "created_at": "2025-08-13T08:40:54Z",
            "diff_hunk": "@@ -473,8 +475,9 @@ def get_openmp_compiler_flags(language):\n     'tag:cpp17': update_cpp17_extension,\n     'tag:cpp20': update_cpp20_extension,\n     'tag:c11': update_c11_extension,\n-    'tag:trace' : update_linetrace_extension,\n+    'tag:trace' : get_update_with_macro(('CYTHON_TRACE', 1)),\n     'tag:cppexecpolicies': require_gcc(\"9.1\"),\n+    'tag:module_state_utility_code' : get_update_with_macro(('CYTHON_TEST_MODULE_STATE_LOOKUP', 1))",
            "html_url": "https://github.com/cython/cython/pull/7080#discussion_r2272534366",
            "id": 2272534366,
            "line": 480,
            "node_id": "PRRC_kwDOABDGAc6HdB9e",
            "original_commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "original_line": 480,
            "original_position": 22,
            "original_start_line": 478,
            "path": "runtests.py",
            "position": 22,
            "pull_request_review_id": 3114397156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7080",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272534366/reactions"
            },
            "side": "RIGHT",
            "start_line": 478,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-13T09:06:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272534366",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7080#discussion_r2272539059"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7080"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2272539059"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\ndef test_module0():\r\n```",
            "commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "created_at": "2025-08-13T08:42:56Z",
            "diff_hunk": "@@ -0,0 +1,132 @@\n+# mode: run\n+# tag: module_state_utility_code\n+\n+# cython: language_level=3\n+\n+# Currently this test only checks the adding/removal of modules\n+# and not the thread safety.\n+\n+from cpython.ref cimport PyObject\n+from libc.stdint cimport int64_t\n+\n+cdef extern from *:\n+    ctypedef struct __Pyx_ModuleStateLookupData:\n+        pass\n+\n+    __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_allocate_for_tests() except NULL\n+    void __Pyx_ModuleStateLookup_free_for_tests(__Pyx_ModuleStateLookupData*)\n+    PyObject *__Pyx_ModuleStateLookup_FindModule(__Pyx_ModuleStateLookupData*, int64_t)\n+    int __Pyx_ModuleStateLookup_AddModule(__Pyx_ModuleStateLookupData*, int64_t, PyObject*) except -1\n+    int __Pyx_ModuleStateLookup_RemoveModule(__Pyx_ModuleStateLookupData*, int64_t) except -1\n+\n+def test_module0():",
            "html_url": "https://github.com/cython/cython/pull/7080#discussion_r2272539059",
            "id": 2272539059,
            "line": 22,
            "node_id": "PRRC_kwDOABDGAc6HdDGz",
            "original_commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "original_line": 22,
            "original_position": 22,
            "original_start_line": null,
            "path": "tests/run/modulestatelookup_impl.pyx",
            "position": 22,
            "pull_request_review_id": 3114397156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7080",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272539059/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-13T09:06:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272539059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7080#discussion_r2272539664"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7080"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2272539664"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\ndef test_add_modules():\r\n```",
            "commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "created_at": "2025-08-13T08:43:13Z",
            "diff_hunk": "@@ -0,0 +1,132 @@\n+# mode: run\n+# tag: module_state_utility_code\n+\n+# cython: language_level=3\n+\n+# Currently this test only checks the adding/removal of modules\n+# and not the thread safety.\n+\n+from cpython.ref cimport PyObject\n+from libc.stdint cimport int64_t\n+\n+cdef extern from *:\n+    ctypedef struct __Pyx_ModuleStateLookupData:\n+        pass\n+\n+    __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_allocate_for_tests() except NULL\n+    void __Pyx_ModuleStateLookup_free_for_tests(__Pyx_ModuleStateLookupData*)\n+    PyObject *__Pyx_ModuleStateLookup_FindModule(__Pyx_ModuleStateLookupData*, int64_t)\n+    int __Pyx_ModuleStateLookup_AddModule(__Pyx_ModuleStateLookupData*, int64_t, PyObject*) except -1\n+    int __Pyx_ModuleStateLookup_RemoveModule(__Pyx_ModuleStateLookupData*, int64_t) except -1\n+\n+def test_module0():\n+    \"\"\"\n+    >>> test_module0()\n+    \"\"\"\n+    data = __Pyx_ModuleStateLookup_allocate_for_tests();\n+    try:\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == NULL\n+\n+        example_mod = object()\n+        __Pyx_ModuleStateLookup_AddModule(data, 0, <PyObject*>example_mod)\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == <PyObject*>example_mod\n+\n+        __Pyx_ModuleStateLookup_RemoveModule(data, 0)\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == NULL\n+    finally:\n+        __Pyx_ModuleStateLookup_free_for_tests(data)\n+\n+def test_add_modules():",
            "html_url": "https://github.com/cython/cython/pull/7080#discussion_r2272539664",
            "id": 2272539664,
            "line": 39,
            "node_id": "PRRC_kwDOABDGAc6HdDQQ",
            "original_commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "tests/run/modulestatelookup_impl.pyx",
            "position": 39,
            "pull_request_review_id": 3114397156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7080",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272539664/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-13T09:06:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272539664",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7080#discussion_r2272539943"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7080"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2272539943"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\ndef test_remove_modules():\r\n```",
            "commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "created_at": "2025-08-13T08:43:19Z",
            "diff_hunk": "@@ -0,0 +1,132 @@\n+# mode: run\n+# tag: module_state_utility_code\n+\n+# cython: language_level=3\n+\n+# Currently this test only checks the adding/removal of modules\n+# and not the thread safety.\n+\n+from cpython.ref cimport PyObject\n+from libc.stdint cimport int64_t\n+\n+cdef extern from *:\n+    ctypedef struct __Pyx_ModuleStateLookupData:\n+        pass\n+\n+    __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_allocate_for_tests() except NULL\n+    void __Pyx_ModuleStateLookup_free_for_tests(__Pyx_ModuleStateLookupData*)\n+    PyObject *__Pyx_ModuleStateLookup_FindModule(__Pyx_ModuleStateLookupData*, int64_t)\n+    int __Pyx_ModuleStateLookup_AddModule(__Pyx_ModuleStateLookupData*, int64_t, PyObject*) except -1\n+    int __Pyx_ModuleStateLookup_RemoveModule(__Pyx_ModuleStateLookupData*, int64_t) except -1\n+\n+def test_module0():\n+    \"\"\"\n+    >>> test_module0()\n+    \"\"\"\n+    data = __Pyx_ModuleStateLookup_allocate_for_tests();\n+    try:\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == NULL\n+\n+        example_mod = object()\n+        __Pyx_ModuleStateLookup_AddModule(data, 0, <PyObject*>example_mod)\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == <PyObject*>example_mod\n+\n+        __Pyx_ModuleStateLookup_RemoveModule(data, 0)\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == NULL\n+    finally:\n+        __Pyx_ModuleStateLookup_free_for_tests(data)\n+\n+def test_add_modules():\n+    \"\"\"\n+    >>> test_add_modules()\n+    \"\"\"\n+    data = __Pyx_ModuleStateLookup_allocate_for_tests();\n+    try:\n+        modules = [object() for _ in range(500)]\n+        for n, module in enumerate(modules):\n+            assert __Pyx_ModuleStateLookup_FindModule(data, n) == NULL\n+            __Pyx_ModuleStateLookup_AddModule(data, n, <PyObject*>module)\n+\n+        for n, module in enumerate(modules):\n+            assert __Pyx_ModuleStateLookup_FindModule(data, n) == <PyObject*>module\n+    finally:\n+        __Pyx_ModuleStateLookup_free_for_tests(data)\n+\n+def test_remove_modules():",
            "html_url": "https://github.com/cython/cython/pull/7080#discussion_r2272539943",
            "id": 2272539943,
            "line": 55,
            "node_id": "PRRC_kwDOABDGAc6HdDUn",
            "original_commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "original_line": 55,
            "original_position": 55,
            "original_start_line": null,
            "path": "tests/run/modulestatelookup_impl.pyx",
            "position": 55,
            "pull_request_review_id": 3114397156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7080",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272539943/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-13T09:06:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272539943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7080#discussion_r2272540208"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7080"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2272540208"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\ndef test_random_add_removal():\r\n```",
            "commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "created_at": "2025-08-13T08:43:26Z",
            "diff_hunk": "@@ -0,0 +1,132 @@\n+# mode: run\n+# tag: module_state_utility_code\n+\n+# cython: language_level=3\n+\n+# Currently this test only checks the adding/removal of modules\n+# and not the thread safety.\n+\n+from cpython.ref cimport PyObject\n+from libc.stdint cimport int64_t\n+\n+cdef extern from *:\n+    ctypedef struct __Pyx_ModuleStateLookupData:\n+        pass\n+\n+    __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_allocate_for_tests() except NULL\n+    void __Pyx_ModuleStateLookup_free_for_tests(__Pyx_ModuleStateLookupData*)\n+    PyObject *__Pyx_ModuleStateLookup_FindModule(__Pyx_ModuleStateLookupData*, int64_t)\n+    int __Pyx_ModuleStateLookup_AddModule(__Pyx_ModuleStateLookupData*, int64_t, PyObject*) except -1\n+    int __Pyx_ModuleStateLookup_RemoveModule(__Pyx_ModuleStateLookupData*, int64_t) except -1\n+\n+def test_module0():\n+    \"\"\"\n+    >>> test_module0()\n+    \"\"\"\n+    data = __Pyx_ModuleStateLookup_allocate_for_tests();\n+    try:\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == NULL\n+\n+        example_mod = object()\n+        __Pyx_ModuleStateLookup_AddModule(data, 0, <PyObject*>example_mod)\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == <PyObject*>example_mod\n+\n+        __Pyx_ModuleStateLookup_RemoveModule(data, 0)\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == NULL\n+    finally:\n+        __Pyx_ModuleStateLookup_free_for_tests(data)\n+\n+def test_add_modules():\n+    \"\"\"\n+    >>> test_add_modules()\n+    \"\"\"\n+    data = __Pyx_ModuleStateLookup_allocate_for_tests();\n+    try:\n+        modules = [object() for _ in range(500)]\n+        for n, module in enumerate(modules):\n+            assert __Pyx_ModuleStateLookup_FindModule(data, n) == NULL\n+            __Pyx_ModuleStateLookup_AddModule(data, n, <PyObject*>module)\n+\n+        for n, module in enumerate(modules):\n+            assert __Pyx_ModuleStateLookup_FindModule(data, n) == <PyObject*>module\n+    finally:\n+        __Pyx_ModuleStateLookup_free_for_tests(data)\n+\n+def test_remove_modules():\n+    \"\"\"\n+    test_remove_modules()\n+    \"\"\"\n+    data = __Pyx_ModuleStateLookup_allocate_for_tests();\n+    try:\n+        modules = [object() for _ in range(500)]\n+        for n, module in enumerate(modules):\n+            try:\n+                __Pyx_ModuleStateLookup_RemoveModule(data, n)\n+            except SystemError:\n+                pass  # expected\n+            else:\n+                assert False, \"Didn't raise SystemError\"\n+            __Pyx_ModuleStateLookup_AddModule(data, n, <PyObject*>module)\n+\n+        for n, module in range(len(modules)):\n+            __Pyx_ModuleStateLookup_RemoveModule(data, n)\n+        for n, module in range(len(modules)):\n+            assert __Pyx_ModuleStateLookup_FindModule(data, n) == NULL\n+    finally:\n+        __Pyx_ModuleStateLookup_free_for_tests(data)\n+\n+def test_random_add_removal():",
            "html_url": "https://github.com/cython/cython/pull/7080#discussion_r2272540208",
            "id": 2272540208,
            "line": 78,
            "node_id": "PRRC_kwDOABDGAc6HdDYw",
            "original_commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "tests/run/modulestatelookup_impl.pyx",
            "position": 78,
            "pull_request_review_id": 3114397156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7080",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272540208/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-13T09:06:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272540208",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7080#discussion_r2272555062"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7080"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2272555062"
                }
            },
            "author_association": "MEMBER",
            "body": "Randomisation makes test failures difficult to debug. Can we use a deterministic series of operations? E.g. create a few modules, then do a couple of add-remove cycles, maybe nest some add-remove cycles, maybe nest some in increasingly growing depths, then clean up? You could use the permutation generators in `itertools` to create varying degrees of add-remove nesting.",
            "commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "created_at": "2025-08-13T08:49:12Z",
            "diff_hunk": "@@ -0,0 +1,132 @@\n+# mode: run\n+# tag: module_state_utility_code\n+\n+# cython: language_level=3\n+\n+# Currently this test only checks the adding/removal of modules\n+# and not the thread safety.\n+\n+from cpython.ref cimport PyObject\n+from libc.stdint cimport int64_t\n+\n+cdef extern from *:\n+    ctypedef struct __Pyx_ModuleStateLookupData:\n+        pass\n+\n+    __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_allocate_for_tests() except NULL\n+    void __Pyx_ModuleStateLookup_free_for_tests(__Pyx_ModuleStateLookupData*)\n+    PyObject *__Pyx_ModuleStateLookup_FindModule(__Pyx_ModuleStateLookupData*, int64_t)\n+    int __Pyx_ModuleStateLookup_AddModule(__Pyx_ModuleStateLookupData*, int64_t, PyObject*) except -1\n+    int __Pyx_ModuleStateLookup_RemoveModule(__Pyx_ModuleStateLookupData*, int64_t) except -1\n+\n+def test_module0():\n+    \"\"\"\n+    >>> test_module0()\n+    \"\"\"\n+    data = __Pyx_ModuleStateLookup_allocate_for_tests();\n+    try:\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == NULL\n+\n+        example_mod = object()\n+        __Pyx_ModuleStateLookup_AddModule(data, 0, <PyObject*>example_mod)\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == <PyObject*>example_mod\n+\n+        __Pyx_ModuleStateLookup_RemoveModule(data, 0)\n+        assert __Pyx_ModuleStateLookup_FindModule(data, 0) == NULL\n+    finally:\n+        __Pyx_ModuleStateLookup_free_for_tests(data)\n+\n+def test_add_modules():\n+    \"\"\"\n+    >>> test_add_modules()\n+    \"\"\"\n+    data = __Pyx_ModuleStateLookup_allocate_for_tests();\n+    try:\n+        modules = [object() for _ in range(500)]\n+        for n, module in enumerate(modules):\n+            assert __Pyx_ModuleStateLookup_FindModule(data, n) == NULL\n+            __Pyx_ModuleStateLookup_AddModule(data, n, <PyObject*>module)\n+\n+        for n, module in enumerate(modules):\n+            assert __Pyx_ModuleStateLookup_FindModule(data, n) == <PyObject*>module\n+    finally:\n+        __Pyx_ModuleStateLookup_free_for_tests(data)\n+\n+def test_remove_modules():\n+    \"\"\"\n+    test_remove_modules()\n+    \"\"\"\n+    data = __Pyx_ModuleStateLookup_allocate_for_tests();\n+    try:\n+        modules = [object() for _ in range(500)]\n+        for n, module in enumerate(modules):\n+            try:\n+                __Pyx_ModuleStateLookup_RemoveModule(data, n)\n+            except SystemError:\n+                pass  # expected\n+            else:\n+                assert False, \"Didn't raise SystemError\"\n+            __Pyx_ModuleStateLookup_AddModule(data, n, <PyObject*>module)\n+\n+        for n, module in range(len(modules)):\n+            __Pyx_ModuleStateLookup_RemoveModule(data, n)\n+        for n, module in range(len(modules)):\n+            assert __Pyx_ModuleStateLookup_FindModule(data, n) == NULL\n+    finally:\n+        __Pyx_ModuleStateLookup_free_for_tests(data)\n+\n+def test_random_add_removal():\n+    \"\"\"\n+    >>> test_random_add_removal()\n+    \"\"\"\n+    import random\n+\n+    generator = random.Random()",
            "html_url": "https://github.com/cython/cython/pull/7080#discussion_r2272555062",
            "id": 2272555062,
            "line": 84,
            "node_id": "PRRC_kwDOABDGAc6HdHA2",
            "original_commit_id": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "original_line": 84,
            "original_position": 84,
            "original_start_line": 82,
            "path": "tests/run/modulestatelookup_impl.pyx",
            "position": 84,
            "pull_request_review_id": 3114397156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7080",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272555062/reactions"
            },
            "side": "RIGHT",
            "start_line": 82,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-13T09:06:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2272555062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/7080/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0319928e35fa5a21efb4e064a21c098a615baa6d/comments",
            "commit": {
                "author": {
                    "date": "2025-08-09T12:05:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-09T12:21:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Replace module state lookup with hash table\n\nWhen using multi-phase init and module state, use a hash\ntable instead of bisection into an array. This should hopefully\nperform better on average (especially when there are\nmany modules available).\n\nSpecial case the 0th module so this one's always available\nquickly.\n\nMake it so the implementation can be tested independently\non subinterpreters/module state.",
                "tree": {
                    "sha": "76618abeacffdc1c89c27d25927463459c5fd139",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/76618abeacffdc1c89c27d25927463459c5fd139"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0319928e35fa5a21efb4e064a21c098a615baa6d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/0319928e35fa5a21efb4e064a21c098a615baa6d",
            "node_id": "C_kwDOAhr4b9oAKDAzMTk5MjhlMzVmYTVhMjFlZmI0ZTA2NGEyMWMwOThhNjE1YmFhNmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d5d9e459d5380e8ed81f74c69cf8c06c7c1ce51f",
                    "sha": "d5d9e459d5380e8ed81f74c69cf8c06c7c1ce51f",
                    "url": "https://api.github.com/repos/cython/cython/commits/d5d9e459d5380e8ed81f74c69cf8c06c7c1ce51f"
                }
            ],
            "sha": "0319928e35fa5a21efb4e064a21c098a615baa6d",
            "url": "https://api.github.com/repos/cython/cython/commits/0319928e35fa5a21efb4e064a21c098a615baa6d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/dc773c78c2dc8ebe7ca177c95467563ee518c122/comments",
            "commit": {
                "author": {
                    "date": "2025-08-09T12:43:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-09T12:43:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix older versions of Python",
                "tree": {
                    "sha": "837c6de4c82c3eeadd01984dcdb9f3de6d890d99",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/837c6de4c82c3eeadd01984dcdb9f3de6d890d99"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/dc773c78c2dc8ebe7ca177c95467563ee518c122",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/dc773c78c2dc8ebe7ca177c95467563ee518c122",
            "node_id": "C_kwDOAhr4b9oAKGRjNzczYzc4YzJkYzhlYmU3Y2ExNzdjOTU0Njc1NjNlZTUxOGMxMjI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0319928e35fa5a21efb4e064a21c098a615baa6d",
                    "sha": "0319928e35fa5a21efb4e064a21c098a615baa6d",
                    "url": "https://api.github.com/repos/cython/cython/commits/0319928e35fa5a21efb4e064a21c098a615baa6d"
                }
            ],
            "sha": "dc773c78c2dc8ebe7ca177c95467563ee518c122",
            "url": "https://api.github.com/repos/cython/cython/commits/dc773c78c2dc8ebe7ca177c95467563ee518c122"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4a01412b6851a606d8cbd69cbe378c9ad567fba0/comments",
            "commit": {
                "author": {
                    "date": "2025-08-09T13:09:56Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-09T13:09:56Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix C++11 hopefully",
                "tree": {
                    "sha": "dd89d34fbb64224b4169bfef190892b71b665b2e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/dd89d34fbb64224b4169bfef190892b71b665b2e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4a01412b6851a606d8cbd69cbe378c9ad567fba0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/4a01412b6851a606d8cbd69cbe378c9ad567fba0",
            "node_id": "C_kwDOAhr4b9oAKDRhMDE0MTJiNjg1MWE2MDZkOGNiZDY5Y2JlMzc4YzlhZDU2N2ZiYTA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/dc773c78c2dc8ebe7ca177c95467563ee518c122",
                    "sha": "dc773c78c2dc8ebe7ca177c95467563ee518c122",
                    "url": "https://api.github.com/repos/cython/cython/commits/dc773c78c2dc8ebe7ca177c95467563ee518c122"
                }
            ],
            "sha": "4a01412b6851a606d8cbd69cbe378c9ad567fba0",
            "url": "https://api.github.com/repos/cython/cython/commits/4a01412b6851a606d8cbd69cbe378c9ad567fba0"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/eac1fadc82afa56dac985787555a4e2bb939c39c/comments",
            "commit": {
                "author": {
                    "date": "2025-08-09T13:18:04Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-09T13:18:04Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Spelling",
                "tree": {
                    "sha": "11dd84cf1366bbca5fc6b3e513af0c1d0c026128",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/11dd84cf1366bbca5fc6b3e513af0c1d0c026128"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/eac1fadc82afa56dac985787555a4e2bb939c39c",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/eac1fadc82afa56dac985787555a4e2bb939c39c",
            "node_id": "C_kwDOAhr4b9oAKGVhYzFmYWRjODJhZmE1NmRhYzk4NTc4NzU1NWE0ZTJiYjkzOWMzOWM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4a01412b6851a606d8cbd69cbe378c9ad567fba0",
                    "sha": "4a01412b6851a606d8cbd69cbe378c9ad567fba0",
                    "url": "https://api.github.com/repos/cython/cython/commits/4a01412b6851a606d8cbd69cbe378c9ad567fba0"
                }
            ],
            "sha": "eac1fadc82afa56dac985787555a4e2bb939c39c",
            "url": "https://api.github.com/repos/cython/cython/commits/eac1fadc82afa56dac985787555a4e2bb939c39c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/be4065f797d5d866563f2ce7067adfedcd270734/comments",
            "commit": {
                "author": {
                    "date": "2025-08-09T13:58:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-09T13:58:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Hopefully fix MSVC",
                "tree": {
                    "sha": "c0ba4e25e6414f292337720b5d271c0d79a37727",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c0ba4e25e6414f292337720b5d271c0d79a37727"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/be4065f797d5d866563f2ce7067adfedcd270734",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/be4065f797d5d866563f2ce7067adfedcd270734",
            "node_id": "C_kwDOAhr4b9oAKGJlNDA2NWY3OTdkNWQ4NjY1NjNmMmNlNzA2N2FkZmVkY2QyNzA3MzQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/eac1fadc82afa56dac985787555a4e2bb939c39c",
                    "sha": "eac1fadc82afa56dac985787555a4e2bb939c39c",
                    "url": "https://api.github.com/repos/cython/cython/commits/eac1fadc82afa56dac985787555a4e2bb939c39c"
                }
            ],
            "sha": "be4065f797d5d866563f2ce7067adfedcd270734",
            "url": "https://api.github.com/repos/cython/cython/commits/be4065f797d5d866563f2ce7067adfedcd270734"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/25fb2f1e6b37fd81a53191332ece3cffacee35fa/comments",
            "commit": {
                "author": {
                    "date": "2025-08-09T15:10:09Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-09T15:10:09Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix PyPy, maybe fix OSX",
                "tree": {
                    "sha": "a0e007abb0aaa3ec9da7a97f328c42ecf0326719",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a0e007abb0aaa3ec9da7a97f328c42ecf0326719"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/25fb2f1e6b37fd81a53191332ece3cffacee35fa",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/25fb2f1e6b37fd81a53191332ece3cffacee35fa",
            "node_id": "C_kwDOAhr4b9oAKDI1ZmIyZjFlNmIzN2ZkODFhNTMxOTEzMzJlY2UzY2ZmYWNlZTM1ZmE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/be4065f797d5d866563f2ce7067adfedcd270734",
                    "sha": "be4065f797d5d866563f2ce7067adfedcd270734",
                    "url": "https://api.github.com/repos/cython/cython/commits/be4065f797d5d866563f2ce7067adfedcd270734"
                }
            ],
            "sha": "25fb2f1e6b37fd81a53191332ece3cffacee35fa",
            "url": "https://api.github.com/repos/cython/cython/commits/25fb2f1e6b37fd81a53191332ece3cffacee35fa"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1f5f02b591d5da6bfe59892aaa7f08834e613113/comments",
            "commit": {
                "author": {
                    "date": "2025-08-09T18:17:28Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-09T18:17:28Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Try again OSX",
                "tree": {
                    "sha": "3da9b5041efc3135d39da9b83ac821e88c4fd42b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3da9b5041efc3135d39da9b83ac821e88c4fd42b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1f5f02b591d5da6bfe59892aaa7f08834e613113",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/1f5f02b591d5da6bfe59892aaa7f08834e613113",
            "node_id": "C_kwDOAhr4b9oAKDFmNWYwMmI1OTFkNWRhNmJmZTU5ODkyYWFhN2YwODgzNGU2MTMxMTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/25fb2f1e6b37fd81a53191332ece3cffacee35fa",
                    "sha": "25fb2f1e6b37fd81a53191332ece3cffacee35fa",
                    "url": "https://api.github.com/repos/cython/cython/commits/25fb2f1e6b37fd81a53191332ece3cffacee35fa"
                }
            ],
            "sha": "1f5f02b591d5da6bfe59892aaa7f08834e613113",
            "url": "https://api.github.com/repos/cython/cython/commits/1f5f02b591d5da6bfe59892aaa7f08834e613113"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/df5108e8a98d44d360c23ddc2a4ae271f9047a85/comments",
            "commit": {
                "author": {
                    "date": "2025-08-09T18:28:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-09T18:30:39Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Use Python to hash where available",
                "tree": {
                    "sha": "5605af8269849c24cb788cd1ec92ea7caccaa33d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5605af8269849c24cb788cd1ec92ea7caccaa33d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/df5108e8a98d44d360c23ddc2a4ae271f9047a85",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/df5108e8a98d44d360c23ddc2a4ae271f9047a85",
            "node_id": "C_kwDOAhr4b9oAKGRmNTEwOGU4YTk4ZDQ0ZDM2MGMyM2RkYzJhNGFlMjcxZjkwNDdhODU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1f5f02b591d5da6bfe59892aaa7f08834e613113",
                    "sha": "1f5f02b591d5da6bfe59892aaa7f08834e613113",
                    "url": "https://api.github.com/repos/cython/cython/commits/1f5f02b591d5da6bfe59892aaa7f08834e613113"
                }
            ],
            "sha": "df5108e8a98d44d360c23ddc2a4ae271f9047a85",
            "url": "https://api.github.com/repos/cython/cython/commits/df5108e8a98d44d360c23ddc2a4ae271f9047a85"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6e6478949bd68d60b4f2988c9cb0d48c3c98be7c/comments",
            "commit": {
                "author": {
                    "date": "2025-08-09T18:42:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-09T18:42:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Make sure we return something positive from Py version",
                "tree": {
                    "sha": "8f09ad31bfd3397a5684b7721eee1725834322e2",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8f09ad31bfd3397a5684b7721eee1725834322e2"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6e6478949bd68d60b4f2988c9cb0d48c3c98be7c",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/6e6478949bd68d60b4f2988c9cb0d48c3c98be7c",
            "node_id": "C_kwDOAhr4b9oAKDZlNjQ3ODk0OWJkNjhkNjBiNGYyOTg4YzljYjBkNDhjM2M5OGJlN2M",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/df5108e8a98d44d360c23ddc2a4ae271f9047a85",
                    "sha": "df5108e8a98d44d360c23ddc2a4ae271f9047a85",
                    "url": "https://api.github.com/repos/cython/cython/commits/df5108e8a98d44d360c23ddc2a4ae271f9047a85"
                }
            ],
            "sha": "6e6478949bd68d60b4f2988c9cb0d48c3c98be7c",
            "url": "https://api.github.com/repos/cython/cython/commits/6e6478949bd68d60b4f2988c9cb0d48c3c98be7c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a74a5342f3f4b1b2f063067ba70a6467aef9583d/comments",
            "commit": {
                "author": {
                    "date": "2025-08-09T19:18:37Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-09T19:18:37Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix",
                "tree": {
                    "sha": "aa2ee774c7c95c50371e5f0b1d9d15b50ecc892f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/aa2ee774c7c95c50371e5f0b1d9d15b50ecc892f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a74a5342f3f4b1b2f063067ba70a6467aef9583d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "node_id": "C_kwDOAhr4b9oAKGE3NGE1MzQyZjNmNGIxYjJmMDYzMDY3YmE3MGE2NDY3YWVmOTU4M2Q",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6e6478949bd68d60b4f2988c9cb0d48c3c98be7c",
                    "sha": "6e6478949bd68d60b4f2988c9cb0d48c3c98be7c",
                    "url": "https://api.github.com/repos/cython/cython/commits/6e6478949bd68d60b4f2988c9cb0d48c3c98be7c"
                }
            ],
            "sha": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
            "url": "https://api.github.com/repos/cython/cython/commits/a74a5342f3f4b1b2f063067ba70a6467aef9583d"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/7080/commits",
    "created_at": "2025-08-09T12:23:03Z",
    "diff_url": "https://github.com/cython/cython/pull/7080.diff",
    "draft": false,
    "head": {
        "label": "da-woods:module-state-hash-table",
        "ref": "module-state-hash-table",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2025-08-13T05:47:09Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 79897,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2025-08-04T06:37:01Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "a74a5342f3f4b1b2f063067ba70a6467aef9583d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/7080",
    "id": 2732604441,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/7080",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "516403e6bbc8e84a83dd92cb3bf3633b7af62e62",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOABDGAc6i4DwZ",
    "number": 7080,
    "patch_url": "https://github.com/cython/cython/pull/7080.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/7080/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/a74a5342f3f4b1b2f063067ba70a6467aef9583d",
    "title": "Replace module state lookup with hash table",
    "updated_at": "2025-08-13T09:06:56Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/7080",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods",
        "user_view_type": "public"
    }
}