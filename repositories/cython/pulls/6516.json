{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/6516/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6516/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/6516"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/6516"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6516/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6516"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/d10cc1755f611c00d2c31b17c19d098650d0845b"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1490,
            "forks_count": 1490,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1377,
            "open_issues_count": 1377,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2024-11-27T19:16:21Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 74756,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 9554,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2024-11-28T13:23:08Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 9554,
            "watchers_count": 9554,
            "web_commit_signoff_required": false
        },
        "sha": "bca353e573fd6c2686831a22b4e96f0436a80fc2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": "This just provides a nice interface for the freethreading Python's critical section feature, so that users can attempt to do their own locking.\r\n\r\nImplementation is heavily based on `with gil`/`with nogil` blocks however I haven't attempted to directly share it via inheritance.",
    "closed_at": "2024-11-27T10:03:17Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1855988066"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1855988066"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        super().__init__(\r\n            pos,\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T07:36:02Z",
            "diff_hunk": "@@ -8937,6 +8937,129 @@ def generate_execution_code(self, code):\n         code.put_ensure_gil(declare_gilstate=False)\n \n \n+class CriticalSectionStatNode(TryFinallyStatNode):\n+    \"\"\"\n+    Represents a freethreading Python critical section.\n+    In non-freethreading Python, this is a no-op.\n+\n+    args    list of ExprNode    1 or 2 elements, must be object\n+    \"\"\"\n+\n+    child_attrs = [\"args\"] + TryFinallyStatNode.child_attrs\n+\n+    # loosely follow the naming convention that Python itself follows\n+    DEFAULT_VARIABLE_NAME = \"__pyx_cs\"\n+\n+    var_type = None\n+    state_temp = None\n+\n+    def __init__(self, pos, /, args, body, **kwds):\n+        if len(args) > 1:\n+            self.var_type = PyrexTypes.c_py_critical_section2_type\n+        else:\n+            self.var_type = PyrexTypes.c_py_critical_section_type\n+\n+        self.create_state_temp_if_needed(pos, args, body)\n+\n+        TryFinallyStatNode.__init__(\n+            self, pos,",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1855988066",
            "id": 1855988066,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoCFi",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 8965,
            "original_position": 29,
            "original_start_line": 8964,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1855988066/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-25T08:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1855988066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1855989870"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1855989870"
                }
            },
            "author_association": "MEMBER",
            "body": "It seems unusual to pass more keyword arguments after `**kwargs`.\r\n```suggestion\r\n            finally_clause=CriticalSectionExitNode(\r\n                pos, len=len(args), state_temp=self.state_temp),\r\n            **kwds,\r\n        )\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T07:37:33Z",
            "diff_hunk": "@@ -8937,6 +8937,129 @@ def generate_execution_code(self, code):\n         code.put_ensure_gil(declare_gilstate=False)\n \n \n+class CriticalSectionStatNode(TryFinallyStatNode):\n+    \"\"\"\n+    Represents a freethreading Python critical section.\n+    In non-freethreading Python, this is a no-op.\n+\n+    args    list of ExprNode    1 or 2 elements, must be object\n+    \"\"\"\n+\n+    child_attrs = [\"args\"] + TryFinallyStatNode.child_attrs\n+\n+    # loosely follow the naming convention that Python itself follows\n+    DEFAULT_VARIABLE_NAME = \"__pyx_cs\"\n+\n+    var_type = None\n+    state_temp = None\n+\n+    def __init__(self, pos, /, args, body, **kwds):\n+        if len(args) > 1:\n+            self.var_type = PyrexTypes.c_py_critical_section2_type\n+        else:\n+            self.var_type = PyrexTypes.c_py_critical_section_type\n+\n+        self.create_state_temp_if_needed(pos, args, body)\n+\n+        TryFinallyStatNode.__init__(\n+            self, pos,\n+            args=args,\n+            body=body,\n+            **kwds,\n+            finally_clause=CriticalSectionExitNode(\n+                pos, len=len(args), state_temp=self.state_temp))",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1855989870",
            "id": 1855989870,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoChu",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 8970,
            "original_position": 34,
            "original_start_line": 8968,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1855989870/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-25T19:01:16Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1855989870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1855991768"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1855991768"
                }
            },
            "author_association": "MEMBER",
            "body": "`args` is unused.",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T07:38:58Z",
            "diff_hunk": "@@ -8937,6 +8937,129 @@ def generate_execution_code(self, code):\n         code.put_ensure_gil(declare_gilstate=False)\n \n \n+class CriticalSectionStatNode(TryFinallyStatNode):\n+    \"\"\"\n+    Represents a freethreading Python critical section.\n+    In non-freethreading Python, this is a no-op.\n+\n+    args    list of ExprNode    1 or 2 elements, must be object\n+    \"\"\"\n+\n+    child_attrs = [\"args\"] + TryFinallyStatNode.child_attrs\n+\n+    # loosely follow the naming convention that Python itself follows\n+    DEFAULT_VARIABLE_NAME = \"__pyx_cs\"\n+\n+    var_type = None\n+    state_temp = None\n+\n+    def __init__(self, pos, /, args, body, **kwds):\n+        if len(args) > 1:\n+            self.var_type = PyrexTypes.c_py_critical_section2_type\n+        else:\n+            self.var_type = PyrexTypes.c_py_critical_section_type\n+\n+        self.create_state_temp_if_needed(pos, args, body)\n+\n+        TryFinallyStatNode.__init__(\n+            self, pos,\n+            args=args,\n+            body=body,\n+            **kwds,\n+            finally_clause=CriticalSectionExitNode(\n+                pos, len=len(args), state_temp=self.state_temp))\n+\n+    def create_state_temp_if_needed(self, pos, args, body):\n+        from .ParseTreeTransforms import YieldNodeCollector\n+        collector = YieldNodeCollector()\n+        collector.visitchildren(body)\n+        if not collector.yields:\n+            return\n+\n+        from . import ExprNodes\n+        self.state_temp = ExprNodes.TempNode(pos, self.var_type)",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1855991768",
            "id": 1855991768,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoC_Y",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 8980,
            "original_position": 44,
            "original_start_line": 8972,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1855991768/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-25T08:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1855991768",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1855992637"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1855992637"
                }
            },
            "author_association": "MEMBER",
            "body": "Without dot, it's unclear at first sight whether this comment has one sentence or one plus a headline.\r\n```suggestion\r\n    # Note that this refers to openmp critical sections, not freethreading\r\n    # Python critical sections.\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T07:39:37Z",
            "diff_hunk": "@@ -9275,6 +9398,8 @@ class ParallelStatNode(StatNode, ParallelNode):\n         Naming.clineno_cname,\n     )\n \n+    # Note that this refers to openmp critical sections, not freethreading\n+    # Python critical sections",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1855992637",
            "id": 1855992637,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoDM9",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 9402,
            "original_position": 135,
            "original_start_line": 9401,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1855992637/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-25T08:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1855992637",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1856002191"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1856002191"
                }
            },
            "author_association": "MEMBER",
            "body": "Since the loop body is getting lengthy, can we move the two special cases to separate methods? Maybe `_transform_with_gil` and `_transform_with_critical_section`?\r\n```suggestion\r\n                    elif name == \"critical_section\":\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T07:47:06Z",
            "diff_hunk": "@@ -1424,6 +1424,16 @@ def visit_WithStatNode(self, node):\n                                 PostParseError(node.pos, \"Compiler directive %s accepts one positional argument.\" % name))\n                         node = Nodes.GILStatNode(node.pos, state=name, body=node.body, condition=condition)\n                         return self.visit_Node(node)\n+                    if name == \"critical_section\":",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1856002191",
            "id": 1856002191,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoFiP",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 1427,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856002191/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-25T08:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856002191",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1856016037"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1856016037"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it's clearer to just always return False.\r\n```suggestion\r\n    def __exit__(self, exc_class, exc, tb):\r\n        return False\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T07:58:38Z",
            "diff_hunk": "@@ -227,6 +227,15 @@ def __exit__(self, exc_class, exc, tb):\n del _nogil\n \n \n+class critical_section:\n+    def __init__(self, *args):\n+        pass\n+    def __enter__(self):\n+        pass\n+    def __exit__(self, exc_class, exc, tb):\n+        return exc_class is None",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1856016037",
            "id": 1856016037,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoI6l",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 236,
            "original_position": 10,
            "original_start_line": 235,
            "path": "Cython/Shadow.py",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856016037/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-25T08:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856016037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1856017603"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1856017603"
                }
            },
            "author_association": "MEMBER",
            "body": "IMHO, these would better be handled with separate visitor methods (`visit_GILStatNode` etc.) that override the super class handling.",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T08:00:01Z",
            "diff_hunk": "@@ -3757,7 +3767,9 @@ def visit_TryFinallyStatNode(self, node):\n         \"\"\"\n         Take care of try/finally statements in nogil code sections.\n         \"\"\"\n-        if not self.nogil or isinstance(node, Nodes.GILStatNode):\n+        if (not self.nogil or\n+                isinstance(node, Nodes.GILStatNode) or\n+                isinstance(node, Nodes.CriticalSectionStatNode)):",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1856017603",
            "id": 1856017603,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoJTD",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 3772,
            "original_position": 24,
            "original_start_line": 3770,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856017603/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-25T08:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856017603",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1856037035"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1856037035"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n* It is guaranteed that the lock will be held when executing code within the \r\n  critical section. However, there is no guarantee that the code block will be executed\r\n  in one atomic action.  This is very similar to the guarantee provided by\r\n  a ``with gil`` block.\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T08:10:56Z",
            "diff_hunk": "@@ -51,6 +51,42 @@ extension modules claim to support it then you can either:\n \n These options are mainly useful for testing.\n \n+Tools for Thread-safety\n+=======================\n+\n+Cython is gradually adding tools to help you write thread-safe code. These are\n+described here.\n+\n+Critical Sections\n+-----------------\n+\n+`Critical Sections <https://docs.python.org/3.13/c-api/init.html#python-critical-section-api>`_\n+are a feature provided by Python to generate a local lock based on some Python object.\n+Cython allows you to use critical sections with a convenient\n+syntax::\n+\n+    o = object()\n+    ...\n+    with cython.critical_section(o):\n+      ...\n+      \n+Critical sections can take one or two Python objects as arguments.  You are required to\n+hold the GIL on entry to a critical section (you can release the GIL inside the critical\n+section but that also temporarily releases the critical section so is unlikely to be\n+a useful thing to do).\n+\n+We suggest reading the Python documentation to understand how critical sections work.\n+\n+* You can guarantee that the lock will be held when executing code within the \n+  critical section, however you can not guarantee that the lock will be executed\n+  in one atomic action.  This is very similar to the guarantee provided by\n+  a ``with gil`` block.",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1856037035",
            "id": 1856037035,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoOCr",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 83,
            "original_position": 33,
            "original_start_line": 80,
            "path": "docs/src/userguide/freethreading.rst",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856037035/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-25T08:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856037035",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1856050087"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1856050087"
                }
            },
            "author_association": "MEMBER",
            "body": "This might be a timing thing, deep-copying before vs. after allocation.\r\n\r\nI'd rather let the exit node refer to the critical section node that owns the state than to a shared temp node.",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T08:14:38Z",
            "diff_hunk": "@@ -8937,6 +8937,129 @@ def generate_execution_code(self, code):\n         code.put_ensure_gil(declare_gilstate=False)\n \n \n+class CriticalSectionStatNode(TryFinallyStatNode):\n+    \"\"\"\n+    Represents a freethreading Python critical section.\n+    In non-freethreading Python, this is a no-op.\n+\n+    args    list of ExprNode    1 or 2 elements, must be object\n+    \"\"\"\n+\n+    child_attrs = [\"args\"] + TryFinallyStatNode.child_attrs\n+\n+    # loosely follow the naming convention that Python itself follows\n+    DEFAULT_VARIABLE_NAME = \"__pyx_cs\"\n+\n+    var_type = None\n+    state_temp = None\n+\n+    def __init__(self, pos, /, args, body, **kwds):\n+        if len(args) > 1:\n+            self.var_type = PyrexTypes.c_py_critical_section2_type\n+        else:\n+            self.var_type = PyrexTypes.c_py_critical_section_type\n+\n+        self.create_state_temp_if_needed(pos, args, body)\n+\n+        TryFinallyStatNode.__init__(\n+            self, pos,\n+            args=args,\n+            body=body,\n+            **kwds,\n+            finally_clause=CriticalSectionExitNode(\n+                pos, len=len(args), state_temp=self.state_temp))\n+\n+    def create_state_temp_if_needed(self, pos, args, body):\n+        from .ParseTreeTransforms import YieldNodeCollector\n+        collector = YieldNodeCollector()\n+        collector.visitchildren(body)\n+        if not collector.yields:\n+            return\n+\n+        from . import ExprNodes\n+        self.state_temp = ExprNodes.TempNode(pos, self.var_type)\n+\n+    def analyse_declarations(self, env):\n+        for arg in self.args:\n+            arg.analyse_declarations(env)\n+        return super().analyse_declarations(env)\n+\n+    def analyse_expressions(self, env):\n+        env.use_utility_code(\n+            UtilityCode.load_cached(\"CriticalSections\", \"ModuleSetupCode.c\"))\n+\n+        for n in range(len(self.args)):\n+            # Coerce to temp because it's a bit of a disaster if the argument is destroyed\n+            # while we're working on it, and the Python critical section implementation\n+            # doesn't ensure this.\n+            # TODO - we could potentially be a bit smarter about this, and avoid\n+            # it for local variables that we know are never re-assigned.\n+            self.args[n] = self.args[n].analyse_expressions(env).coerce_to_temp(env)\n+            # Note - deliberately no coercion to Python object.\n+            # Critical sections only really make sense on a specific known Python object,\n+            # so using them on coerced Python objects is very unlikely to make sense.\n+            if not self.args[n].type.is_pyobject:\n+                error(\n+                    self.pos,\n+                    \"Arguments to cython.critical_section must be Python objects.\"\n+                )\n+        return super().analyse_expressions(env)\n+\n+    def generate_execution_code(self, code):\n+        code.mark_pos(self.pos)\n+        code.begin_block()\n+        if self.state_temp:\n+            self.state_temp.allocate(code)\n+            variable = self.state_temp.result()\n+        else:\n+            variable = self.DEFAULT_VARIABLE_NAME\n+            code.putln(f\"{self.var_type.declaration_code(variable)};\")\n+\n+        for arg in self.args:\n+            arg.generate_evaluation_code(code)\n+        args = [ f\"(PyObject*){arg.result()}\" for arg in self.args ]\n+        code.putln(\n+            f\"__Pyx_PyCriticalSection_Begin{len(args)}(&{variable}, {', '.join(args)});\"\n+        )\n+\n+        TryFinallyStatNode.generate_execution_code(self, code)\n+\n+        for arg in self.args:\n+            arg.generate_disposal_code(code)\n+            arg.free_temps(code)\n+\n+        if self.state_temp:\n+            self.state_temp.release(code)\n+\n+        code.end_block()\n+\n+    def nogil_check(self, env):\n+        error(self.pos, \"Critical sections require the GIL\")\n+\n+\n+class CriticalSectionExitNode(StatNode):\n+    child_attrs = []\n+\n+    def __deepcopy__(self, memo):\n+        # I have no idea how GILExitNode manages to deepcopy but still\n+        # have an initialized state_temp. However, here we just avoid\n+        # copying so that finally_clause and finally_except_clause are\n+        # the same object\n+        return self",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1856050087",
            "id": 1856050087,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoROn",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 9048,
            "original_position": 112,
            "original_start_line": 9043,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856050087/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-25T08:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856050087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1856076270"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1856076270"
                }
            },
            "author_association": "MEMBER",
            "body": "- why loop over `range(len(…))` when you still need to access the list items in the loop?\r\n- error on `arg.pos`, not `self.pos`\r\n```suggestion\r\n        for i, arg in enumerate(self.args):\r\n            # Coerce to temp because it's a bit of a disaster if the argument is destroyed\r\n            # while we're working on it, and the Python critical section implementation\r\n            # doesn't ensure this.\r\n            # TODO - we could potentially be a bit smarter about this, and avoid\r\n            # it for local variables that we know are never re-assigned.\r\n            arg = arg.analyse_expressions(env).coerce_to_temp(env)\r\n            # Note - deliberately no coercion to Python object.\r\n            # Critical sections only really make sense on a specific known Python object,\r\n            # so using them on coerced Python objects is very unlikely to make sense.\r\n            if not arg.type.is_pyobject:\r\n                error(\r\n                    arg.pos,\r\n                    \"Arguments to cython.critical_section must be Python objects.\"\r\n                )\r\n            self.args[i] = arg\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T08:21:19Z",
            "diff_hunk": "@@ -8937,6 +8937,129 @@ def generate_execution_code(self, code):\n         code.put_ensure_gil(declare_gilstate=False)\n \n \n+class CriticalSectionStatNode(TryFinallyStatNode):\n+    \"\"\"\n+    Represents a freethreading Python critical section.\n+    In non-freethreading Python, this is a no-op.\n+\n+    args    list of ExprNode    1 or 2 elements, must be object\n+    \"\"\"\n+\n+    child_attrs = [\"args\"] + TryFinallyStatNode.child_attrs\n+\n+    # loosely follow the naming convention that Python itself follows\n+    DEFAULT_VARIABLE_NAME = \"__pyx_cs\"\n+\n+    var_type = None\n+    state_temp = None\n+\n+    def __init__(self, pos, /, args, body, **kwds):\n+        if len(args) > 1:\n+            self.var_type = PyrexTypes.c_py_critical_section2_type\n+        else:\n+            self.var_type = PyrexTypes.c_py_critical_section_type\n+\n+        self.create_state_temp_if_needed(pos, args, body)\n+\n+        TryFinallyStatNode.__init__(\n+            self, pos,\n+            args=args,\n+            body=body,\n+            **kwds,\n+            finally_clause=CriticalSectionExitNode(\n+                pos, len=len(args), state_temp=self.state_temp))\n+\n+    def create_state_temp_if_needed(self, pos, args, body):\n+        from .ParseTreeTransforms import YieldNodeCollector\n+        collector = YieldNodeCollector()\n+        collector.visitchildren(body)\n+        if not collector.yields:\n+            return\n+\n+        from . import ExprNodes\n+        self.state_temp = ExprNodes.TempNode(pos, self.var_type)\n+\n+    def analyse_declarations(self, env):\n+        for arg in self.args:\n+            arg.analyse_declarations(env)\n+        return super().analyse_declarations(env)\n+\n+    def analyse_expressions(self, env):\n+        env.use_utility_code(\n+            UtilityCode.load_cached(\"CriticalSections\", \"ModuleSetupCode.c\"))\n+\n+        for n in range(len(self.args)):\n+            # Coerce to temp because it's a bit of a disaster if the argument is destroyed\n+            # while we're working on it, and the Python critical section implementation\n+            # doesn't ensure this.\n+            # TODO - we could potentially be a bit smarter about this, and avoid\n+            # it for local variables that we know are never re-assigned.\n+            self.args[n] = self.args[n].analyse_expressions(env).coerce_to_temp(env)\n+            # Note - deliberately no coercion to Python object.\n+            # Critical sections only really make sense on a specific known Python object,\n+            # so using them on coerced Python objects is very unlikely to make sense.\n+            if not self.args[n].type.is_pyobject:\n+                error(\n+                    self.pos,\n+                    \"Arguments to cython.critical_section must be Python objects.\"\n+                )",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1856076270",
            "id": 1856076270,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoXnu",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 9005,
            "original_position": 69,
            "original_start_line": 8991,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856076270/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-25T08:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856076270",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1856081626"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1856081626"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this is too early. It can be included during code generation, when we really know that we need it.",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T08:22:58Z",
            "diff_hunk": "@@ -8937,6 +8937,129 @@ def generate_execution_code(self, code):\n         code.put_ensure_gil(declare_gilstate=False)\n \n \n+class CriticalSectionStatNode(TryFinallyStatNode):\n+    \"\"\"\n+    Represents a freethreading Python critical section.\n+    In non-freethreading Python, this is a no-op.\n+\n+    args    list of ExprNode    1 or 2 elements, must be object\n+    \"\"\"\n+\n+    child_attrs = [\"args\"] + TryFinallyStatNode.child_attrs\n+\n+    # loosely follow the naming convention that Python itself follows\n+    DEFAULT_VARIABLE_NAME = \"__pyx_cs\"\n+\n+    var_type = None\n+    state_temp = None\n+\n+    def __init__(self, pos, /, args, body, **kwds):\n+        if len(args) > 1:\n+            self.var_type = PyrexTypes.c_py_critical_section2_type\n+        else:\n+            self.var_type = PyrexTypes.c_py_critical_section_type\n+\n+        self.create_state_temp_if_needed(pos, args, body)\n+\n+        TryFinallyStatNode.__init__(\n+            self, pos,\n+            args=args,\n+            body=body,\n+            **kwds,\n+            finally_clause=CriticalSectionExitNode(\n+                pos, len=len(args), state_temp=self.state_temp))\n+\n+    def create_state_temp_if_needed(self, pos, args, body):\n+        from .ParseTreeTransforms import YieldNodeCollector\n+        collector = YieldNodeCollector()\n+        collector.visitchildren(body)\n+        if not collector.yields:\n+            return\n+\n+        from . import ExprNodes\n+        self.state_temp = ExprNodes.TempNode(pos, self.var_type)\n+\n+    def analyse_declarations(self, env):\n+        for arg in self.args:\n+            arg.analyse_declarations(env)\n+        return super().analyse_declarations(env)\n+\n+    def analyse_expressions(self, env):\n+        env.use_utility_code(\n+            UtilityCode.load_cached(\"CriticalSections\", \"ModuleSetupCode.c\"))",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1856081626",
            "id": 1856081626,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoY7a",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 8989,
            "original_position": 53,
            "original_start_line": 8988,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856081626/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-25T08:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856081626",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1856086374"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1856086374"
                }
            },
            "author_association": "MEMBER",
            "body": "-> `Naming.py`?",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-25T08:24:24Z",
            "diff_hunk": "@@ -8937,6 +8937,129 @@ def generate_execution_code(self, code):\n         code.put_ensure_gil(declare_gilstate=False)\n \n \n+class CriticalSectionStatNode(TryFinallyStatNode):\n+    \"\"\"\n+    Represents a freethreading Python critical section.\n+    In non-freethreading Python, this is a no-op.\n+\n+    args    list of ExprNode    1 or 2 elements, must be object\n+    \"\"\"\n+\n+    child_attrs = [\"args\"] + TryFinallyStatNode.child_attrs\n+\n+    # loosely follow the naming convention that Python itself follows\n+    DEFAULT_VARIABLE_NAME = \"__pyx_cs\"",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1856086374",
            "id": 1856086374,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uoaFm",
            "original_commit_id": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "original_line": 8951,
            "original_position": 15,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 2457451225,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856086374/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-25T08:31:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1856086374",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1857944227"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1857944227"
                }
            },
            "author_association": "MEMBER",
            "body": "> the CriticalSectionStatNode that owns this\r\n\r\nSo, why not call it `critical_section`?",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-26T07:24:00Z",
            "diff_hunk": "@@ -9038,21 +9040,24 @@ def nogil_check(self, env):\n \n \n class CriticalSectionExitNode(StatNode):\n+    \"\"\"\n+    parent_node - the CriticalSectionStatNode that owns this",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1857944227",
            "id": 1857944227,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uvfqj",
            "original_commit_id": "7f07a0bf4788e004e5dd4ac3a1504aca95f936e3",
            "original_line": 9044,
            "original_position": 75,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 2460612093,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1857944227/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-26T08:12:15Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1857944227",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1857951815"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1857951815"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry for being unclear, I meant to move the whole name into `Naming.py`. It's a local name, sure, but it still shouldn't accidentally shadow any global names that we define.",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-26T07:30:20Z",
            "diff_hunk": "@@ -8948,7 +8948,7 @@ class CriticalSectionStatNode(TryFinallyStatNode):\n     child_attrs = [\"args\"] + TryFinallyStatNode.child_attrs\n \n     # loosely follow the naming convention that Python itself follows\n-    DEFAULT_VARIABLE_NAME = \"__pyx_cs\"\n+    DEFAULT_VARIABLE_NAME = Naming.pyrex_prefix + \"cs\"",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1857951815",
            "id": 1857951815,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5uvhhH",
            "original_commit_id": "7f07a0bf4788e004e5dd4ac3a1504aca95f936e3",
            "original_line": 8951,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 2460612093,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1857951815/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-26T08:12:15Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1857951815",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860056801"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860056801"
                }
            },
            "author_association": "MEMBER",
            "body": "I wonder if we could implement a generic `__deepcopy__` method in the `Node` base class that deepcopies the declared node child attributes and shallow copies all the rest. Probably just needs trying out. We'd certainly run into unclean dependencies here and there.",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T07:17:55Z",
            "diff_hunk": "@@ -8937,6 +8937,131 @@ def generate_execution_code(self, code):\n         code.put_ensure_gil(declare_gilstate=False)\n \n \n+class CriticalSectionStatNode(TryFinallyStatNode):\n+    \"\"\"\n+    Represents a freethreading Python critical section.\n+    In non-freethreading Python, this is a no-op.\n+\n+    args    list of ExprNode    1 or 2 elements, must be object\n+    \"\"\"\n+\n+    child_attrs = [\"args\"] + TryFinallyStatNode.child_attrs\n+\n+    var_type = None\n+    state_temp = None\n+\n+    def __init__(self, pos, /, args, body, **kwds):\n+        if len(args) > 1:\n+            self.var_type = PyrexTypes.c_py_critical_section2_type\n+        else:\n+            self.var_type = PyrexTypes.c_py_critical_section_type\n+\n+        self.create_state_temp_if_needed(pos, body)\n+\n+        super().__init__(\n+            pos,\n+            args=args,\n+            body=body,\n+            finally_clause=CriticalSectionExitNode(\n+                pos, len=len(args), critical_section=self),\n+            **kwds,\n+        )\n+\n+    def create_state_temp_if_needed(self, pos, body):\n+        from .ParseTreeTransforms import YieldNodeCollector\n+        collector = YieldNodeCollector()\n+        collector.visitchildren(body)\n+        if not collector.yields:\n+            return\n+\n+        from . import ExprNodes\n+        self.state_temp = ExprNodes.TempNode(pos, self.var_type)\n+\n+    def analyse_declarations(self, env):\n+        for arg in self.args:\n+            arg.analyse_declarations(env)\n+        return super().analyse_declarations(env)\n+\n+    def analyse_expressions(self, env):\n+        for i, arg in enumerate(self.args):\n+            # Coerce to temp because it's a bit of a disaster if the argument is destroyed\n+            # while we're working on it, and the Python critical section implementation\n+            # doesn't ensure this.\n+            # TODO - we could potentially be a bit smarter about this, and avoid\n+            # it for local variables that we know are never re-assigned.\n+            arg = arg.analyse_expressions(env).coerce_to_temp(env)\n+            # Note - deliberately no coercion to Python object.\n+            # Critical sections only really make sense on a specific known Python object,\n+            # so using them on coerced Python objects is very unlikely to make sense.\n+            if not arg.type.is_pyobject:\n+                error(\n+                    arg.pos,\n+                    \"Arguments to cython.critical_section must be Python objects.\"\n+                )\n+            self.args[i] = arg\n+        return super().analyse_expressions(env)\n+\n+    def generate_execution_code(self, code):\n+        code.globalstate.use_utility_code(\n+            UtilityCode.load_cached(\"CriticalSections\", \"ModuleSetupCode.c\"))\n+\n+        code.mark_pos(self.pos)\n+        code.begin_block()\n+        if self.state_temp:\n+            self.state_temp.allocate(code)\n+            variable = self.state_temp.result()\n+        else:\n+            variable = Naming.critical_section_variable\n+            code.putln(f\"{self.var_type.declaration_code(variable)};\")\n+\n+        for arg in self.args:\n+            arg.generate_evaluation_code(code)\n+        args = [ f\"(PyObject*){arg.result()}\" for arg in self.args ]\n+        code.putln(\n+            f\"__Pyx_PyCriticalSection_Begin{len(args)}(&{variable}, {', '.join(args)});\"\n+        )\n+\n+        TryFinallyStatNode.generate_execution_code(self, code)\n+\n+        for arg in self.args:\n+            arg.generate_disposal_code(code)\n+            arg.free_temps(code)\n+\n+        if self.state_temp:\n+            self.state_temp.release(code)\n+\n+        code.end_block()\n+\n+    def nogil_check(self, env):\n+        error(self.pos, \"Critical sections require the GIL\")\n+\n+\n+class CriticalSectionExitNode(StatNode):\n+    \"\"\"\n+    critical_section - the CriticalSectionStatNode that owns this\n+    \"\"\"\n+    child_attrs = []\n+\n+    def __deepcopy__(self, memo):\n+        # This gets deepcopied when generating finally_clause and\n+        # finally_except_clause. In this case the node has essentially\n+        # no state, except for a reference to its parent.\n+        # We definitely don't want to let that reference be copied.\n+        return self",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860056801",
            "id": 1860056801,
            "line": 9050,
            "node_id": "PRRC_kwDOABDGAc5u3jbh",
            "original_commit_id": "ec7fab4607fae133895614426a70bacb73cd0a45",
            "original_line": 9050,
            "original_position": 114,
            "original_start_line": 9045,
            "path": "Cython/Compiler/Nodes.py",
            "position": 114,
            "pull_request_review_id": 2464081834,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860056801/reactions"
            },
            "side": "RIGHT",
            "start_line": 9045,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-27T07:18:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860056801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860058871"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860058871"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    'critical_section': ('with statement',),\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T07:19:52Z",
            "diff_hunk": "@@ -391,6 +392,7 @@ class DEFER_ANALYSIS_OF_ARGUMENTS:\n     'nogil' : ('function', 'with statement'),\n     'gil' : ('with statement'),\n     'with_gil' : ('function',),\n+    'critical_section': ('with statement'),",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860058871",
            "id": 1860058871,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5u3j73",
            "original_commit_id": "ec7fab4607fae133895614426a70bacb73cd0a45",
            "original_line": 395,
            "original_position": 12,
            "original_start_line": null,
            "path": "Cython/Compiler/Options.py",
            "position": null,
            "pull_request_review_id": 2464084847,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860058871/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-27T07:19:52Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860058871",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860074249"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860074249"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\ndef test_double_critical_section(n_loops):\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T07:32:49Z",
            "diff_hunk": "@@ -0,0 +1,121 @@\n+# mode: run\n+\n+cimport cython\n+\n+import threading\n+\n+# This test is most useful on free-threading builds.\n+# It should pass on regular builds just by virtue of\n+# the GIL.\n+\n+def test_single_critical_section(n_threads, n_loops):\n+    \"\"\"\n+    >>> test_single_critical_section(4, 100)\n+    \"\"\"\n+    cdef int count = 0\n+    lock = object()\n+    barrier = threading.Barrier(n_threads)\n+\n+    def worker():\n+        nonlocal count\n+        barrier.wait()\n+        for i in range(n_loops):\n+            with cython.critical_section(lock):\n+                count += i\n+\n+    threads = [\n+        threading.Thread(target=worker)\n+        for _ in range(n_threads)\n+    ]\n+    for t in threads:\n+        t.start()\n+    for t in threads:\n+        t.join()\n+\n+    expected = ((n_loops * (n_loops - 1))/2)*n_threads\n+    assert count == expected, (count, expected)\n+\n+def test_double_critical_section(n_loops):",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860074249",
            "id": 1860074249,
            "line": 39,
            "node_id": "PRRC_kwDOABDGAc5u3nsJ",
            "original_commit_id": "95f4afba0953a07dee86583169ca678e13ad0784",
            "original_line": 38,
            "original_position": 38,
            "original_start_line": null,
            "path": "tests/run/critical_sections.pyx",
            "position": 39,
            "pull_request_review_id": 2464109924,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860074249/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-27T07:56:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860074249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860074558"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860074558"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\ndef test_critical_section_in_generators(n_threads, n_loops):\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T07:33:06Z",
            "diff_hunk": "@@ -0,0 +1,121 @@\n+# mode: run\n+\n+cimport cython\n+\n+import threading\n+\n+# This test is most useful on free-threading builds.\n+# It should pass on regular builds just by virtue of\n+# the GIL.\n+\n+def test_single_critical_section(n_threads, n_loops):\n+    \"\"\"\n+    >>> test_single_critical_section(4, 100)\n+    \"\"\"\n+    cdef int count = 0\n+    lock = object()\n+    barrier = threading.Barrier(n_threads)\n+\n+    def worker():\n+        nonlocal count\n+        barrier.wait()\n+        for i in range(n_loops):\n+            with cython.critical_section(lock):\n+                count += i\n+\n+    threads = [\n+        threading.Thread(target=worker)\n+        for _ in range(n_threads)\n+    ]\n+    for t in threads:\n+        t.start()\n+    for t in threads:\n+        t.join()\n+\n+    expected = ((n_loops * (n_loops - 1))/2)*n_threads\n+    assert count == expected, (count, expected)\n+\n+def test_double_critical_section(n_loops):\n+    \"\"\"\n+    >>> test_double_critical_section(100)\n+    \"\"\"\n+    cdef int a = 2\n+    cdef int b = 3\n+    barrier = threading.Barrier(3)\n+    finished_event = threading.Event()\n+    failed = threading.Event()\n+    lock_a = object()\n+    lock_b = object()\n+\n+    def reader1():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_a):\n+                    if not (a==2 or a==3):\n+                        failed.set()\n+\n+    def reader2():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_b):\n+                    if not (b==2 or b==3):\n+                        failed.set()\n+\n+    def swapper():\n+        nonlocal a, b\n+        barrier.wait()\n+        for _ in range(n_loops):\n+            with cython.critical_section(lock_a, lock_b):\n+                old_a = a\n+                old_b = b\n+                a = 1000\n+                b = 2000\n+                a = old_b\n+                b = old_a\n+        finished_event.set()\n+    t1 = threading.Thread(target=reader1)\n+    t2 = threading.Thread(target=reader2)\n+    t3 = threading.Thread(target=swapper)\n+    t1.start()\n+    t2.start()\n+    t3.start()\n+    t1.join()\n+    t2.join()\n+    t3.join()\n+\n+    assert not failed.is_set()\n+\n+def test_critical_section_in_generators(n_threads, n_loops):",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860074558",
            "id": 1860074558,
            "line": 86,
            "node_id": "PRRC_kwDOABDGAc5u3nw-",
            "original_commit_id": "95f4afba0953a07dee86583169ca678e13ad0784",
            "original_line": 90,
            "original_position": 90,
            "original_start_line": null,
            "path": "tests/run/critical_sections.pyx",
            "position": 86,
            "pull_request_review_id": 2464109924,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860074558/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-27T07:56:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860074558",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860080146"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860080146"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\n_ERRORS = \"\"\"\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T07:36:10Z",
            "diff_hunk": "@@ -0,0 +1,30 @@\n+# mode: error\n+\n+cimport cython\n+\n+def f():\n+    o = object()\n+    with cython.critical_section():  # no arguments\n+        pass\n+    with cython.critical_section(o, o, o):  # Too many arguments (also the same argument, but we don't check for that)\n+        pass\n+    with cython.critical_section(please_ensure_thread_safety=True):  # While this keyword argument would be nice, it doesn't exist\n+        pass\n+    with cython.critical_section(1):  # C argument type\n+        pass\n+    with cython.critical_section(<void*>o):  # silly, but again, a C argument\n+        pass\n+    with nogil:\n+        with cython.critical_section(o):  # critical sections require the GIL\n+            pass\n+\n+_ERRORS = \"\"\"",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860080146",
            "id": 1860080146,
            "line": 22,
            "node_id": "PRRC_kwDOABDGAc5u3pIS",
            "original_commit_id": "95f4afba0953a07dee86583169ca678e13ad0784",
            "original_line": 21,
            "original_position": 21,
            "original_start_line": null,
            "path": "tests/errors/critical_sections.pyx",
            "position": 22,
            "pull_request_review_id": 2464109924,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860080146/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-27T07:56:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860080146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860086501"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860086501"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\n    threads = [\r\n        threading.Thread(target=target)\r\n        for target in [reader1, reader2, swapper]\r\n    ]\r\n    for thread in threads:\r\n        thread.start()\r\n    for thread in threads:\r\n        thread.join()\r\n\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T07:40:33Z",
            "diff_hunk": "@@ -0,0 +1,121 @@\n+# mode: run\n+\n+cimport cython\n+\n+import threading\n+\n+# This test is most useful on free-threading builds.\n+# It should pass on regular builds just by virtue of\n+# the GIL.\n+\n+def test_single_critical_section(n_threads, n_loops):\n+    \"\"\"\n+    >>> test_single_critical_section(4, 100)\n+    \"\"\"\n+    cdef int count = 0\n+    lock = object()\n+    barrier = threading.Barrier(n_threads)\n+\n+    def worker():\n+        nonlocal count\n+        barrier.wait()\n+        for i in range(n_loops):\n+            with cython.critical_section(lock):\n+                count += i\n+\n+    threads = [\n+        threading.Thread(target=worker)\n+        for _ in range(n_threads)\n+    ]\n+    for t in threads:\n+        t.start()\n+    for t in threads:\n+        t.join()\n+\n+    expected = ((n_loops * (n_loops - 1))/2)*n_threads\n+    assert count == expected, (count, expected)\n+\n+def test_double_critical_section(n_loops):\n+    \"\"\"\n+    >>> test_double_critical_section(100)\n+    \"\"\"\n+    cdef int a = 2\n+    cdef int b = 3\n+    barrier = threading.Barrier(3)\n+    finished_event = threading.Event()\n+    failed = threading.Event()\n+    lock_a = object()\n+    lock_b = object()\n+\n+    def reader1():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_a):\n+                    if not (a==2 or a==3):\n+                        failed.set()\n+\n+    def reader2():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_b):\n+                    if not (b==2 or b==3):\n+                        failed.set()\n+\n+    def swapper():\n+        nonlocal a, b\n+        barrier.wait()\n+        for _ in range(n_loops):\n+            with cython.critical_section(lock_a, lock_b):\n+                old_a = a\n+                old_b = b\n+                a = 1000\n+                b = 2000\n+                a = old_b\n+                b = old_a\n+        finished_event.set()\n+    t1 = threading.Thread(target=reader1)\n+    t2 = threading.Thread(target=reader2)\n+    t3 = threading.Thread(target=swapper)\n+    t1.start()\n+    t2.start()\n+    t3.start()\n+    t1.join()\n+    t2.join()\n+    t3.join()",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860086501",
            "id": 1860086501,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5u3qrl",
            "original_commit_id": "95f4afba0953a07dee86583169ca678e13ad0784",
            "original_line": 86,
            "original_position": 86,
            "original_start_line": 78,
            "path": "tests/run/critical_sections.pyx",
            "position": null,
            "pull_request_review_id": 2464109924,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860086501/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-27T07:56:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860086501",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860089382"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860089382"
                }
            },
            "author_association": "MEMBER",
            "body": "I actually only wanted to add spaces around the comparison operators, but `not in` seems more pythonic here.\r\n```suggestion\r\n                    if a not in (2, 3):\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T07:41:28Z",
            "diff_hunk": "@@ -0,0 +1,121 @@\n+# mode: run\n+\n+cimport cython\n+\n+import threading\n+\n+# This test is most useful on free-threading builds.\n+# It should pass on regular builds just by virtue of\n+# the GIL.\n+\n+def test_single_critical_section(n_threads, n_loops):\n+    \"\"\"\n+    >>> test_single_critical_section(4, 100)\n+    \"\"\"\n+    cdef int count = 0\n+    lock = object()\n+    barrier = threading.Barrier(n_threads)\n+\n+    def worker():\n+        nonlocal count\n+        barrier.wait()\n+        for i in range(n_loops):\n+            with cython.critical_section(lock):\n+                count += i\n+\n+    threads = [\n+        threading.Thread(target=worker)\n+        for _ in range(n_threads)\n+    ]\n+    for t in threads:\n+        t.start()\n+    for t in threads:\n+        t.join()\n+\n+    expected = ((n_loops * (n_loops - 1))/2)*n_threads\n+    assert count == expected, (count, expected)\n+\n+def test_double_critical_section(n_loops):\n+    \"\"\"\n+    >>> test_double_critical_section(100)\n+    \"\"\"\n+    cdef int a = 2\n+    cdef int b = 3\n+    barrier = threading.Barrier(3)\n+    finished_event = threading.Event()\n+    failed = threading.Event()\n+    lock_a = object()\n+    lock_b = object()\n+\n+    def reader1():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_a):\n+                    if not (a==2 or a==3):",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860089382",
            "id": 1860089382,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5u3rYm",
            "original_commit_id": "95f4afba0953a07dee86583169ca678e13ad0784",
            "original_line": 55,
            "original_position": 55,
            "original_start_line": null,
            "path": "tests/run/critical_sections.pyx",
            "position": null,
            "pull_request_review_id": 2464109924,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860089382/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-27T07:56:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860089382",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860092525"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860092525"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                    if b not in (2, 3):\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T07:41:55Z",
            "diff_hunk": "@@ -0,0 +1,121 @@\n+# mode: run\n+\n+cimport cython\n+\n+import threading\n+\n+# This test is most useful on free-threading builds.\n+# It should pass on regular builds just by virtue of\n+# the GIL.\n+\n+def test_single_critical_section(n_threads, n_loops):\n+    \"\"\"\n+    >>> test_single_critical_section(4, 100)\n+    \"\"\"\n+    cdef int count = 0\n+    lock = object()\n+    barrier = threading.Barrier(n_threads)\n+\n+    def worker():\n+        nonlocal count\n+        barrier.wait()\n+        for i in range(n_loops):\n+            with cython.critical_section(lock):\n+                count += i\n+\n+    threads = [\n+        threading.Thread(target=worker)\n+        for _ in range(n_threads)\n+    ]\n+    for t in threads:\n+        t.start()\n+    for t in threads:\n+        t.join()\n+\n+    expected = ((n_loops * (n_loops - 1))/2)*n_threads\n+    assert count == expected, (count, expected)\n+\n+def test_double_critical_section(n_loops):\n+    \"\"\"\n+    >>> test_double_critical_section(100)\n+    \"\"\"\n+    cdef int a = 2\n+    cdef int b = 3\n+    barrier = threading.Barrier(3)\n+    finished_event = threading.Event()\n+    failed = threading.Event()\n+    lock_a = object()\n+    lock_b = object()\n+\n+    def reader1():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_a):\n+                    if not (a==2 or a==3):\n+                        failed.set()\n+\n+    def reader2():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_b):\n+                    if not (b==2 or b==3):",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860092525",
            "id": 1860092525,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5u3sJt",
            "original_commit_id": "95f4afba0953a07dee86583169ca678e13ad0784",
            "original_line": 63,
            "original_position": 63,
            "original_start_line": null,
            "path": "tests/run/critical_sections.pyx",
            "position": null,
            "pull_request_review_id": 2464109924,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860092525/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-27T07:56:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860092525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860116314"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860116314"
                }
            },
            "author_association": "MEMBER",
            "body": "I wonder if this really ends up as code in the binary module. Isn't the C compiler free to remove the intermediate assignments? Maybe add an arbitrary Python operation in between, to be on the safe side?\r\n```suggestion\r\n                # Calling into Python hopefully disrupts C compiler optimisations.\r\n                a = 1000\r\n                b = 2000\r\n                b = 5 + <int> id([])\r\n                a = old_b\r\n                b = old_a\r\n```",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T07:54:16Z",
            "diff_hunk": "@@ -0,0 +1,121 @@\n+# mode: run\n+\n+cimport cython\n+\n+import threading\n+\n+# This test is most useful on free-threading builds.\n+# It should pass on regular builds just by virtue of\n+# the GIL.\n+\n+def test_single_critical_section(n_threads, n_loops):\n+    \"\"\"\n+    >>> test_single_critical_section(4, 100)\n+    \"\"\"\n+    cdef int count = 0\n+    lock = object()\n+    barrier = threading.Barrier(n_threads)\n+\n+    def worker():\n+        nonlocal count\n+        barrier.wait()\n+        for i in range(n_loops):\n+            with cython.critical_section(lock):\n+                count += i\n+\n+    threads = [\n+        threading.Thread(target=worker)\n+        for _ in range(n_threads)\n+    ]\n+    for t in threads:\n+        t.start()\n+    for t in threads:\n+        t.join()\n+\n+    expected = ((n_loops * (n_loops - 1))/2)*n_threads\n+    assert count == expected, (count, expected)\n+\n+def test_double_critical_section(n_loops):\n+    \"\"\"\n+    >>> test_double_critical_section(100)\n+    \"\"\"\n+    cdef int a = 2\n+    cdef int b = 3\n+    barrier = threading.Barrier(3)\n+    finished_event = threading.Event()\n+    failed = threading.Event()\n+    lock_a = object()\n+    lock_b = object()\n+\n+    def reader1():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_a):\n+                    if not (a==2 or a==3):\n+                        failed.set()\n+\n+    def reader2():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_b):\n+                    if not (b==2 or b==3):\n+                        failed.set()\n+\n+    def swapper():\n+        nonlocal a, b\n+        barrier.wait()\n+        for _ in range(n_loops):\n+            with cython.critical_section(lock_a, lock_b):\n+                old_a = a\n+                old_b = b\n+                a = 1000\n+                b = 2000\n+                a = old_b\n+                b = old_a",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860116314",
            "id": 1860116314,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5u3x9a",
            "original_commit_id": "95f4afba0953a07dee86583169ca678e13ad0784",
            "original_line": 76,
            "original_position": 76,
            "original_start_line": 73,
            "path": "tests/run/critical_sections.pyx",
            "position": null,
            "pull_request_review_id": 2464109924,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860116314/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-27T07:56:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860116314",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860156776"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860156776"
                }
            },
            "author_association": "MEMBER",
            "body": "My worry there is that it's a place that it could suspend the critical section. (i.e. they aren't atomic if Python decides it needs to use another one in the Python operation)",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T08:05:08Z",
            "diff_hunk": "@@ -0,0 +1,121 @@\n+# mode: run\n+\n+cimport cython\n+\n+import threading\n+\n+# This test is most useful on free-threading builds.\n+# It should pass on regular builds just by virtue of\n+# the GIL.\n+\n+def test_single_critical_section(n_threads, n_loops):\n+    \"\"\"\n+    >>> test_single_critical_section(4, 100)\n+    \"\"\"\n+    cdef int count = 0\n+    lock = object()\n+    barrier = threading.Barrier(n_threads)\n+\n+    def worker():\n+        nonlocal count\n+        barrier.wait()\n+        for i in range(n_loops):\n+            with cython.critical_section(lock):\n+                count += i\n+\n+    threads = [\n+        threading.Thread(target=worker)\n+        for _ in range(n_threads)\n+    ]\n+    for t in threads:\n+        t.start()\n+    for t in threads:\n+        t.join()\n+\n+    expected = ((n_loops * (n_loops - 1))/2)*n_threads\n+    assert count == expected, (count, expected)\n+\n+def test_double_critical_section(n_loops):\n+    \"\"\"\n+    >>> test_double_critical_section(100)\n+    \"\"\"\n+    cdef int a = 2\n+    cdef int b = 3\n+    barrier = threading.Barrier(3)\n+    finished_event = threading.Event()\n+    failed = threading.Event()\n+    lock_a = object()\n+    lock_b = object()\n+\n+    def reader1():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_a):\n+                    if not (a==2 or a==3):\n+                        failed.set()\n+\n+    def reader2():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_b):\n+                    if not (b==2 or b==3):\n+                        failed.set()\n+\n+    def swapper():\n+        nonlocal a, b\n+        barrier.wait()\n+        for _ in range(n_loops):\n+            with cython.critical_section(lock_a, lock_b):\n+                old_a = a\n+                old_b = b\n+                a = 1000\n+                b = 2000\n+                a = old_b\n+                b = old_a",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860156776",
            "id": 1860156776,
            "in_reply_to_id": 1860116314,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5u371o",
            "original_commit_id": "95f4afba0953a07dee86583169ca678e13ad0784",
            "original_line": 76,
            "original_position": 76,
            "original_start_line": 73,
            "path": "tests/run/critical_sections.pyx",
            "position": null,
            "pull_request_review_id": 2464214471,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860156776/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-27T08:05:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860156776",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860179198"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860179198"
                }
            },
            "author_association": "MEMBER",
            "body": "I think I'll rewrite this test to just use `+=` like the others. Since that's something that shouldn't get optimized out.",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T08:14:21Z",
            "diff_hunk": "@@ -0,0 +1,121 @@\n+# mode: run\n+\n+cimport cython\n+\n+import threading\n+\n+# This test is most useful on free-threading builds.\n+# It should pass on regular builds just by virtue of\n+# the GIL.\n+\n+def test_single_critical_section(n_threads, n_loops):\n+    \"\"\"\n+    >>> test_single_critical_section(4, 100)\n+    \"\"\"\n+    cdef int count = 0\n+    lock = object()\n+    barrier = threading.Barrier(n_threads)\n+\n+    def worker():\n+        nonlocal count\n+        barrier.wait()\n+        for i in range(n_loops):\n+            with cython.critical_section(lock):\n+                count += i\n+\n+    threads = [\n+        threading.Thread(target=worker)\n+        for _ in range(n_threads)\n+    ]\n+    for t in threads:\n+        t.start()\n+    for t in threads:\n+        t.join()\n+\n+    expected = ((n_loops * (n_loops - 1))/2)*n_threads\n+    assert count == expected, (count, expected)\n+\n+def test_double_critical_section(n_loops):\n+    \"\"\"\n+    >>> test_double_critical_section(100)\n+    \"\"\"\n+    cdef int a = 2\n+    cdef int b = 3\n+    barrier = threading.Barrier(3)\n+    finished_event = threading.Event()\n+    failed = threading.Event()\n+    lock_a = object()\n+    lock_b = object()\n+\n+    def reader1():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_a):\n+                    if not (a==2 or a==3):\n+                        failed.set()\n+\n+    def reader2():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_b):\n+                    if not (b==2 or b==3):\n+                        failed.set()\n+\n+    def swapper():\n+        nonlocal a, b\n+        barrier.wait()\n+        for _ in range(n_loops):\n+            with cython.critical_section(lock_a, lock_b):\n+                old_a = a\n+                old_b = b\n+                a = 1000\n+                b = 2000\n+                a = old_b\n+                b = old_a",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860179198",
            "id": 1860179198,
            "in_reply_to_id": 1860116314,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5u4BT-",
            "original_commit_id": "95f4afba0953a07dee86583169ca678e13ad0784",
            "original_line": 76,
            "original_position": 76,
            "original_start_line": 73,
            "path": "tests/run/critical_sections.pyx",
            "position": null,
            "pull_request_review_id": 2464253296,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860179198/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-27T08:14:21Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860179198",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6516#discussion_r1860187129"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6516"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1860187129"
                }
            },
            "author_association": "MEMBER",
            "body": "~Maybe like this?~ Hmm – strike that. It would probably still mean that the binary code selectively sets a/b to 1000/2000 *or* 2/3, not both in a row. We'd really need something external here.\r\n```suggestion\r\n                a = 1000\r\n                b = 2000\r\n                # Obfuscate the reset to the C compiler to prevent optimisations.\r\n                if barrier is not None:\r\n                    a = old_b\r\n                    b = old_a\r\n```\r\nBut yes, `+= 1` on a pointer deref should not allow optimisations.",
            "commit_id": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "created_at": "2024-11-27T08:19:55Z",
            "diff_hunk": "@@ -0,0 +1,121 @@\n+# mode: run\n+\n+cimport cython\n+\n+import threading\n+\n+# This test is most useful on free-threading builds.\n+# It should pass on regular builds just by virtue of\n+# the GIL.\n+\n+def test_single_critical_section(n_threads, n_loops):\n+    \"\"\"\n+    >>> test_single_critical_section(4, 100)\n+    \"\"\"\n+    cdef int count = 0\n+    lock = object()\n+    barrier = threading.Barrier(n_threads)\n+\n+    def worker():\n+        nonlocal count\n+        barrier.wait()\n+        for i in range(n_loops):\n+            with cython.critical_section(lock):\n+                count += i\n+\n+    threads = [\n+        threading.Thread(target=worker)\n+        for _ in range(n_threads)\n+    ]\n+    for t in threads:\n+        t.start()\n+    for t in threads:\n+        t.join()\n+\n+    expected = ((n_loops * (n_loops - 1))/2)*n_threads\n+    assert count == expected, (count, expected)\n+\n+def test_double_critical_section(n_loops):\n+    \"\"\"\n+    >>> test_double_critical_section(100)\n+    \"\"\"\n+    cdef int a = 2\n+    cdef int b = 3\n+    barrier = threading.Barrier(3)\n+    finished_event = threading.Event()\n+    failed = threading.Event()\n+    lock_a = object()\n+    lock_b = object()\n+\n+    def reader1():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_a):\n+                    if not (a==2 or a==3):\n+                        failed.set()\n+\n+    def reader2():\n+        barrier.wait()\n+        while not finished_event.is_set():\n+            for _ in range(10):\n+                with cython.critical_section(lock_b):\n+                    if not (b==2 or b==3):\n+                        failed.set()\n+\n+    def swapper():\n+        nonlocal a, b\n+        barrier.wait()\n+        for _ in range(n_loops):\n+            with cython.critical_section(lock_a, lock_b):\n+                old_a = a\n+                old_b = b\n+                a = 1000\n+                b = 2000\n+                a = old_b\n+                b = old_a",
            "html_url": "https://github.com/cython/cython/pull/6516#discussion_r1860187129",
            "id": 1860187129,
            "in_reply_to_id": 1860116314,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5u4DP5",
            "original_commit_id": "95f4afba0953a07dee86583169ca678e13ad0784",
            "original_line": 76,
            "original_position": 76,
            "original_start_line": 73,
            "path": "tests/run/critical_sections.pyx",
            "position": null,
            "pull_request_review_id": 2464265032,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6516",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860187129/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-27T08:22:18Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1860187129",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6516/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/91cec8d7bcccf4c639f2900bbffddb6595d6120c/comments",
            "commit": {
                "author": {
                    "date": "2024-11-24T15:47:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-24T15:53:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Implement cython.critical_section\n\nThis just provides a nice interface for the freethreading\nPython's critical section feature, so that users can attempt to\ndo their own locking.\n\nImplementation is heavily based on `with gil`/`with nogil` blocks\nhowever I haven't attempted to directly share it via inheritance.",
                "tree": {
                    "sha": "15639a14721f2cf55dab3354dceb52fe7035ccc2",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/15639a14721f2cf55dab3354dceb52fe7035ccc2"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/91cec8d7bcccf4c639f2900bbffddb6595d6120c",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/91cec8d7bcccf4c639f2900bbffddb6595d6120c",
            "node_id": "C_kwDOAhr4b9oAKDkxY2VjOGQ3YmNjY2Y0YzYzOWYyOTAwYmJmZmRkYjY1OTVkNjEyMGM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/033ae2eb614f9fcb526c6049a751706df561db88",
                    "sha": "033ae2eb614f9fcb526c6049a751706df561db88",
                    "url": "https://api.github.com/repos/cython/cython/commits/033ae2eb614f9fcb526c6049a751706df561db88"
                }
            ],
            "sha": "91cec8d7bcccf4c639f2900bbffddb6595d6120c",
            "url": "https://api.github.com/repos/cython/cython/commits/91cec8d7bcccf4c639f2900bbffddb6595d6120c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9ba96cc646bd690fc164962b0f7e86375d299f21/comments",
            "commit": {
                "author": {
                    "date": "2024-11-24T16:43:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-24T16:43:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix non-freethreading macro",
                "tree": {
                    "sha": "56aa539343b092d78fc8c5df50a5ef93914da4f5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/56aa539343b092d78fc8c5df50a5ef93914da4f5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9ba96cc646bd690fc164962b0f7e86375d299f21",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/9ba96cc646bd690fc164962b0f7e86375d299f21",
            "node_id": "C_kwDOAhr4b9oAKDliYTk2Y2M2NDZiZDY5MGZjMTY0OTYyYjBmN2U4NjM3NWQyOTlmMjE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/91cec8d7bcccf4c639f2900bbffddb6595d6120c",
                    "sha": "91cec8d7bcccf4c639f2900bbffddb6595d6120c",
                    "url": "https://api.github.com/repos/cython/cython/commits/91cec8d7bcccf4c639f2900bbffddb6595d6120c"
                }
            ],
            "sha": "9ba96cc646bd690fc164962b0f7e86375d299f21",
            "url": "https://api.github.com/repos/cython/cython/commits/9ba96cc646bd690fc164962b0f7e86375d299f21"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f6c7ca59a11485766cf11c87d1c5bddc471a7c36/comments",
            "commit": {
                "author": {
                    "date": "2024-11-24T17:19:43Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-24T17:19:43Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Add to Shadow.py",
                "tree": {
                    "sha": "5b26e2520c9fc3805a8b33295ef295a4197181ce",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5b26e2520c9fc3805a8b33295ef295a4197181ce"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f6c7ca59a11485766cf11c87d1c5bddc471a7c36",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/f6c7ca59a11485766cf11c87d1c5bddc471a7c36",
            "node_id": "C_kwDOAhr4b9oAKGY2YzdjYTU5YTExNDg1NzY2Y2YxMWM4N2QxYzViZGRjNDcxYTdjMzY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9ba96cc646bd690fc164962b0f7e86375d299f21",
                    "sha": "9ba96cc646bd690fc164962b0f7e86375d299f21",
                    "url": "https://api.github.com/repos/cython/cython/commits/9ba96cc646bd690fc164962b0f7e86375d299f21"
                }
            ],
            "sha": "f6c7ca59a11485766cf11c87d1c5bddc471a7c36",
            "url": "https://api.github.com/repos/cython/cython/commits/f6c7ca59a11485766cf11c87d1c5bddc471a7c36"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/780297a7e773824e0d898cbac1c1e4df0b5c37ea/comments",
            "commit": {
                "author": {
                    "date": "2024-11-24T18:54:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-24T18:54:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix code-style",
                "tree": {
                    "sha": "14837b55379e4af82a84abe76d2569d82d8a6c06",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/14837b55379e4af82a84abe76d2569d82d8a6c06"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/780297a7e773824e0d898cbac1c1e4df0b5c37ea",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "node_id": "C_kwDOAhr4b9oAKDc4MDI5N2E3ZTc3MzgyNGUwZDg5OGNiYWMxYzFlNGRmMGI1YzM3ZWE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f6c7ca59a11485766cf11c87d1c5bddc471a7c36",
                    "sha": "f6c7ca59a11485766cf11c87d1c5bddc471a7c36",
                    "url": "https://api.github.com/repos/cython/cython/commits/f6c7ca59a11485766cf11c87d1c5bddc471a7c36"
                }
            ],
            "sha": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
            "url": "https://api.github.com/repos/cython/cython/commits/780297a7e773824e0d898cbac1c1e4df0b5c37ea"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ce6deccd48f9a3fe92bec62efa6dd3f1823ec7e7/comments",
            "commit": {
                "author": {
                    "date": "2024-11-25T19:02:47Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-25T19:02:47Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "637537e5d32afa961d880a7be2ef1ffe2303c368",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/637537e5d32afa961d880a7be2ef1ffe2303c368"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ce6deccd48f9a3fe92bec62efa6dd3f1823ec7e7",
                "verification": {
                    "payload": "tree 637537e5d32afa961d880a7be2ef1ffe2303c368\nparent 780297a7e773824e0d898cbac1c1e4df0b5c37ea\nauthor da-woods <dw-git@d-woods.co.uk> 1732561367 +0000\ncommitter GitHub <noreply@github.com> 1732561367 +0000\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnRMnXCRC1aQ7uu5UhlAAAxPsQAIu8G/RwqI4UD41zAvQ3sXFy\nzUnO08GxsYN2jdv6iqfpAabKOXpvvuOeTdmchlKoNcg15ULBDlTgerJ56NlL0Yhb\nRI2e2q0ldYoRzsRMMlcDAwdTSW4DT6o04e0rF4/Py14ddAbiqcxFEpElc12kVCSB\nphD+UD1gWtCwutCwA6uJxm4XUke6IbkKS9SKsz+D47KdtWe/UcvuBc+cVt/C1Qo9\nFEEFXuO2Fd/HwYGct/XaUcAB8umesi7RTl2OebyIMTjFQ9cSvjddDdSC3hygZV5F\n7MwOKdYd9b3Z57G1MDJyddC2oOllrI+diG5gO2m9ffMJ4qXVHVSSHb7AhYIvPNp8\nxA6lbl+57Q21eh5OWqUogXtlm/6NANWQnvjXp+TL9NFN9C6zj+wh2yYfYsIrq2rs\naT3YeSGNqnc6I1+6QwKyG1ylXttYkWc8Y80jLKcxpqkyNO6NMGDu3P9rxXJgW/BH\nKepqtKixVNGehvIDeLoejF3KoIqNX4uuLYay+D4qYnyhiFfE696tCXrpngldmJeW\nszMHmJ4N4ZeVnWwn/onHT5IbWY4uX0lFrt3qlfJ1pWmvWnudG7MvFdMNia6+XfAr\nuIdIuZ/GedaFuFZ53Wcz2aArXUPcu3TPb5+4JlgLjSEuMdR0aY0sUd1s/OuasBPW\n19RnJA7z6O8WjuY7iguO\n=4wqg\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2024-11-25T19:07:51Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/ce6deccd48f9a3fe92bec62efa6dd3f1823ec7e7",
            "node_id": "C_kwDOAhr4b9oAKGNlNmRlY2NkNDhmOWEzZmU5MmJlYzYyZWZhNmRkM2YxODIzZWM3ZTc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/780297a7e773824e0d898cbac1c1e4df0b5c37ea",
                    "sha": "780297a7e773824e0d898cbac1c1e4df0b5c37ea",
                    "url": "https://api.github.com/repos/cython/cython/commits/780297a7e773824e0d898cbac1c1e4df0b5c37ea"
                }
            ],
            "sha": "ce6deccd48f9a3fe92bec62efa6dd3f1823ec7e7",
            "url": "https://api.github.com/repos/cython/cython/commits/ce6deccd48f9a3fe92bec62efa6dd3f1823ec7e7"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7f07a0bf4788e004e5dd4ac3a1504aca95f936e3/comments",
            "commit": {
                "author": {
                    "date": "2024-11-25T19:25:00Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-25T19:25:00Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "More review comments",
                "tree": {
                    "sha": "e2595bb68e52827a11b02955c901da6573d523d8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e2595bb68e52827a11b02955c901da6573d523d8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7f07a0bf4788e004e5dd4ac3a1504aca95f936e3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/7f07a0bf4788e004e5dd4ac3a1504aca95f936e3",
            "node_id": "C_kwDOAhr4b9oAKDdmMDdhMGJmNDc4OGUwMDRlNWRkNGFjM2ExNTA0YWNhOTVmOTM2ZTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ce6deccd48f9a3fe92bec62efa6dd3f1823ec7e7",
                    "sha": "ce6deccd48f9a3fe92bec62efa6dd3f1823ec7e7",
                    "url": "https://api.github.com/repos/cython/cython/commits/ce6deccd48f9a3fe92bec62efa6dd3f1823ec7e7"
                }
            ],
            "sha": "7f07a0bf4788e004e5dd4ac3a1504aca95f936e3",
            "url": "https://api.github.com/repos/cython/cython/commits/7f07a0bf4788e004e5dd4ac3a1504aca95f936e3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fb8dafb6de027657c5a8d8c4d47bf2e665da64ef/comments",
            "commit": {
                "author": {
                    "date": "2024-11-26T07:28:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-26T07:28:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Missed review comment",
                "tree": {
                    "sha": "ddfe93c6aabc3efb536f2adfaa84c50cf940fb65",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ddfe93c6aabc3efb536f2adfaa84c50cf940fb65"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fb8dafb6de027657c5a8d8c4d47bf2e665da64ef",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/fb8dafb6de027657c5a8d8c4d47bf2e665da64ef",
            "node_id": "C_kwDOAhr4b9oAKGZiOGRhZmI2ZGUwMjc2NTdjNWE4ZDhjNGQ0N2JmMmU2NjVkYTY0ZWY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7f07a0bf4788e004e5dd4ac3a1504aca95f936e3",
                    "sha": "7f07a0bf4788e004e5dd4ac3a1504aca95f936e3",
                    "url": "https://api.github.com/repos/cython/cython/commits/7f07a0bf4788e004e5dd4ac3a1504aca95f936e3"
                }
            ],
            "sha": "fb8dafb6de027657c5a8d8c4d47bf2e665da64ef",
            "url": "https://api.github.com/repos/cython/cython/commits/fb8dafb6de027657c5a8d8c4d47bf2e665da64ef"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2913e74c4bbaa176599d33a7b5f9e0922baa8c12/comments",
            "commit": {
                "author": {
                    "date": "2024-11-26T09:35:36Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-26T09:35:36Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into critical_sections",
                "tree": {
                    "sha": "adbfb5c4145dabe08d81d74c4f2de4d611e014f7",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/adbfb5c4145dabe08d81d74c4f2de4d611e014f7"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2913e74c4bbaa176599d33a7b5f9e0922baa8c12",
                "verification": {
                    "payload": "tree adbfb5c4145dabe08d81d74c4f2de4d611e014f7\nparent fb8dafb6de027657c5a8d8c4d47bf2e665da64ef\nparent bca353e573fd6c2686831a22b4e96f0436a80fc2\nauthor scoder <stefan_ml@behnel.de> 1732613736 +0100\ncommitter GitHub <noreply@github.com> 1732613736 +0100\n\nMerge branch 'master' into critical_sections",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnRZZoCRC1aQ7uu5UhlAAAhb0QAKF/HFgLGyFTnbRASGTKz2ns\n+ORDHd9fCOG+Dba1rWNKNHaVvFpoHLVcyeJfOw7b4n8dOepZo3aAgNPOXVJNqsfA\nhXQl8fYH9MCPhusGl26NZICxaVBXrdzTg6fZZgiaV0nlbsdt0oerYYoySZl59b2U\nOQ9a3DUMbkzT6AyRM8bMmTnDjCqXUm5IzwhYx8Q7ScnznRHa7f/GaEahZJB/bWaM\n8ze+KNPH9wDCfbN1sqf7gmDEa8E03OKgYPd1envWCKctWBBorGzF/VntI/WJJ3hg\nE/DxMjLKtmrvaZgJmGiJEnULqpHq77UxE4wTQ4SGSwviCvrH5CjcdDzuP/0CQy/S\nNFyabuKHKdxfk2I7/XeNCe/v4bqjo5eAh/VCR7aWYScrGYOnufJ9q4WWE25Jkcyc\nGRB54NzmOz2pDtAJZPNmL9PaWHU2sLMe3jZLa2/c7G/rkgy2oWRTguhavR9vcFJX\nNa+eLM4ebncyxY5DryPRLfo29SsrADybSSE+L1J5IufcWQdttxpKyA5NNZecaOiF\nz7QDRAWe0AypyK+WJZzeAzyJGa+/y7SBnS5dz2aRt8+1/w6VuLt9rZgFwGfdYVsx\nZ+pBsP6R6jFBNDr4AVFyeK0qUz+N/WjWOkNK1qJ7jvZaFv3uTSw+v4L6zSWkKeLJ\nUipnMIWKdxSeTPMaQT9W\n=146d\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2024-11-26T09:35:45Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/2913e74c4bbaa176599d33a7b5f9e0922baa8c12",
            "node_id": "C_kwDOAhr4b9oAKDI5MTNlNzRjNGJiYWExNzY1OTlkMzNhN2I1ZjllMDkyMmJhYThjMTI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fb8dafb6de027657c5a8d8c4d47bf2e665da64ef",
                    "sha": "fb8dafb6de027657c5a8d8c4d47bf2e665da64ef",
                    "url": "https://api.github.com/repos/cython/cython/commits/fb8dafb6de027657c5a8d8c4d47bf2e665da64ef"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/bca353e573fd6c2686831a22b4e96f0436a80fc2",
                    "sha": "bca353e573fd6c2686831a22b4e96f0436a80fc2",
                    "url": "https://api.github.com/repos/cython/cython/commits/bca353e573fd6c2686831a22b4e96f0436a80fc2"
                }
            ],
            "sha": "2913e74c4bbaa176599d33a7b5f9e0922baa8c12",
            "url": "https://api.github.com/repos/cython/cython/commits/2913e74c4bbaa176599d33a7b5f9e0922baa8c12"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ec7fab4607fae133895614426a70bacb73cd0a45/comments",
            "commit": {
                "author": {
                    "date": "2024-11-26T19:27:02Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-26T19:27:02Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Naming",
                "tree": {
                    "sha": "926742eaf0bd2f7a1b6e05f16afd8201da985ebc",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/926742eaf0bd2f7a1b6e05f16afd8201da985ebc"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ec7fab4607fae133895614426a70bacb73cd0a45",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/ec7fab4607fae133895614426a70bacb73cd0a45",
            "node_id": "C_kwDOAhr4b9oAKGVjN2ZhYjQ2MDdmYWUxMzM4OTU2MTQ0MjZhNzBiYWNiNzNjZDBhNDU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2913e74c4bbaa176599d33a7b5f9e0922baa8c12",
                    "sha": "2913e74c4bbaa176599d33a7b5f9e0922baa8c12",
                    "url": "https://api.github.com/repos/cython/cython/commits/2913e74c4bbaa176599d33a7b5f9e0922baa8c12"
                }
            ],
            "sha": "ec7fab4607fae133895614426a70bacb73cd0a45",
            "url": "https://api.github.com/repos/cython/cython/commits/ec7fab4607fae133895614426a70bacb73cd0a45"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/95f4afba0953a07dee86583169ca678e13ad0784/comments",
            "commit": {
                "author": {
                    "date": "2024-11-27T07:21:15Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-27T07:21:15Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix option configuration.",
                "tree": {
                    "sha": "53d4d3fa295bbb5b2430128cd3437dbd8f8ee55f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/53d4d3fa295bbb5b2430128cd3437dbd8f8ee55f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/95f4afba0953a07dee86583169ca678e13ad0784",
                "verification": {
                    "payload": "tree 53d4d3fa295bbb5b2430128cd3437dbd8f8ee55f\nparent ec7fab4607fae133895614426a70bacb73cd0a45\nauthor scoder <stefan_ml@behnel.de> 1732692075 +0100\ncommitter GitHub <noreply@github.com> 1732692075 +0100\n\nFix option configuration.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnRshsCRC1aQ7uu5UhlAAA258QAB2tLXF2ZwQRex+21a3yA7Wm\nrAm1PO/QdHrW7WSwngqHFEMKCT6hRT4JD8gDxb4J9J2oCGV+uVMaalymRV7q7Fzw\nz85V8c3kiSzWw2kG6oavmrrNXTXM2p96L0t3X/vA/yFZY+2dRlT+dOE0Be8bJJw+\nZJyQvMKG+4gjnJ86KcR8Cwaf8qseVR6MVT+6ppPat6T8jz3f6gfuHeF60mdc29Pc\nGNQs1kEO8fQaFpPMRJfckL5TLucNTZWKBHbKF7nuUxfpAoAqO+UM2XL7uc6YNRf8\nsr0ybYAjF3Q8TsVOWqnq7rWq0Bu9RcaiFuDSuvlA1jemRc/WJQ9XOyUh2znt7mri\noA8UW5dEj3tdLhS7MxzDsmYcj8E8uiTZa/XN1HFV5bVxYWAIV//Vj1pcfTz2KvSw\nplAzoAOLscHV6BzSAY8qYmICi8sKtqu/5SfEez5UeE64UUgf0rblt7nSyZcHeaV1\n455wOCOb1L6PIA79zu1qu7ab8Q+QqzHFoyCT7AngSFbTP+ndbpHkl6M+O7iA+dVG\nGEoHjXVakbGc4Hp60h3RCOUFwK0O1z2rER2gWWegcLYfyEwlAY8qbJxI9CALyRYd\nPzWtJ1o2tMBosgz0SIC+DqPbplfzGTyXw6y1whnaRr4ZGaaHRoyGO7B05gmcZuNs\n6oGNuJ+ro7gxFTilDQUk\n=BfNx\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2024-11-27T07:21:25Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/95f4afba0953a07dee86583169ca678e13ad0784",
            "node_id": "C_kwDOAhr4b9oAKDk1ZjRhZmJhMDk1M2EwN2RlZTg2NTgzMTY5Y2E2NzhlMTNhZDA3ODQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ec7fab4607fae133895614426a70bacb73cd0a45",
                    "sha": "ec7fab4607fae133895614426a70bacb73cd0a45",
                    "url": "https://api.github.com/repos/cython/cython/commits/ec7fab4607fae133895614426a70bacb73cd0a45"
                }
            ],
            "sha": "95f4afba0953a07dee86583169ca678e13ad0784",
            "url": "https://api.github.com/repos/cython/cython/commits/95f4afba0953a07dee86583169ca678e13ad0784"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e8e1d567c3bbbbc0fe5f6d37db0de3f71a660866/comments",
            "commit": {
                "author": {
                    "date": "2024-11-27T08:25:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-27T08:26:33Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Change double_critical_section test to be more robust",
                "tree": {
                    "sha": "4203c86ef268f9233c17c874f1d8b0032f12d088",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4203c86ef268f9233c17c874f1d8b0032f12d088"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e8e1d567c3bbbbc0fe5f6d37db0de3f71a660866",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/e8e1d567c3bbbbc0fe5f6d37db0de3f71a660866",
            "node_id": "C_kwDOAhr4b9oAKGU4ZTFkNTY3YzNiYmJiYzBmZTVmNmQzN2RiMGRlM2Y3MWE2NjA4NjY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/95f4afba0953a07dee86583169ca678e13ad0784",
                    "sha": "95f4afba0953a07dee86583169ca678e13ad0784",
                    "url": "https://api.github.com/repos/cython/cython/commits/95f4afba0953a07dee86583169ca678e13ad0784"
                }
            ],
            "sha": "e8e1d567c3bbbbc0fe5f6d37db0de3f71a660866",
            "url": "https://api.github.com/repos/cython/cython/commits/e8e1d567c3bbbbc0fe5f6d37db0de3f71a660866"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d10cc1755f611c00d2c31b17c19d098650d0845b/comments",
            "commit": {
                "author": {
                    "date": "2024-11-27T08:27:54Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-11-27T08:27:54Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "a66158f798340023f394256cec3312b25fcb140a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a66158f798340023f394256cec3312b25fcb140a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d10cc1755f611c00d2c31b17c19d098650d0845b",
                "verification": {
                    "payload": "tree a66158f798340023f394256cec3312b25fcb140a\nparent e8e1d567c3bbbbc0fe5f6d37db0de3f71a660866\nauthor da-woods <dw-git@d-woods.co.uk> 1732696074 +0000\ncommitter GitHub <noreply@github.com> 1732696074 +0000\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnRtgKCRC1aQ7uu5UhlAAAH5QQAEvuvwaMDCjt8CWSvv5n2GiP\nAw6DeMfeq+pnHs4fT9J92VX+TdBWlXzyDW3o9v46DrsSzBjg3zzHM2Lq5X6Qp1aF\noW2Ft39wCT1YQ/XK34EVBFACrXqubhMfK+GxY3YhOOsfjXIidPFT077mnql2eJXU\nOmAch3R05z5VJf0dLZwSkqTkz+21G/15WHOt0ZC7OT92apvgo0ORBtRbSSbbm3yU\nXnFAMhbejJOyukVUaXj/+KTUyEoHZSxdh5u6FyQxEvrdwoTrhTf3nT3p6/87rmmg\nPGFUxDRYT70N3+QwnCTvTNmU+oSBBZ/CIju01bhG7ux7IaZYLOhapfgn5D8nbYlI\nBKrJrFWbTrdq3dxCVjby+wsR5fSzEVsx3mO8trL+VZfZPJfdtHZC+S8aONBomBYA\n86fr529IchF95JuWgN4M6OOAtFubPJsBZSBY2XSchwExX2sevsmb+Ixyjq5m+Hrh\nCLJ1tB5zBt9OKV0bFrSZO3vWAy3MSn0pmohYdr6OZsJqtu2QGOxCiEcD5nIMTzW8\njThTSdyOv294J7r5IkxAexbhAO55Lp404Ro2ICn3WkorgBDvVkhTdVbane9fVWf6\nNBn8JtskqWYO4Izej7fvx6vdBINh6yJEBflrbKR9v4Vf6z+B2bLqC3gwCB0/JEXd\naLsaPrHJJBkG2NUmAJ6x\n=tRrP\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2024-11-27T08:27:58Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/d10cc1755f611c00d2c31b17c19d098650d0845b",
            "node_id": "C_kwDOAhr4b9oAKGQxMGNjMTc1NWY2MTFjMDBkMmMzMWIxN2MxOWQwOTg2NTBkMDg0NWI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e8e1d567c3bbbbc0fe5f6d37db0de3f71a660866",
                    "sha": "e8e1d567c3bbbbc0fe5f6d37db0de3f71a660866",
                    "url": "https://api.github.com/repos/cython/cython/commits/e8e1d567c3bbbbc0fe5f6d37db0de3f71a660866"
                }
            ],
            "sha": "d10cc1755f611c00d2c31b17c19d098650d0845b",
            "url": "https://api.github.com/repos/cython/cython/commits/d10cc1755f611c00d2c31b17c19d098650d0845b"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/6516/commits",
    "created_at": "2024-11-24T15:55:16Z",
    "diff_url": "https://github.com/cython/cython/pull/6516.diff",
    "draft": false,
    "head": {
        "label": "da-woods:critical_sections",
        "ref": "critical_sections",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2024-11-27T19:16:25Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 77256,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2024-04-06T10:51:16Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "d10cc1755f611c00d2c31b17c19d098650d0845b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/6516",
    "id": 2196845165,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/6516",
    "labels": [
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425559948,
            "name": "Cython Language Feature",
            "node_id": "MDU6TGFiZWw0MjU1NTk5NDg=",
            "url": "https://api.github.com/repos/cython/cython/labels/Cython%20Language%20Feature"
        },
        {
            "color": "A37CC3",
            "default": false,
            "description": "",
            "id": 6871764375,
            "name": "nogil CPython",
            "node_id": "LA_kwDOABDGAc8AAAABmZbNlw",
            "url": "https://api.github.com/repos/cython/cython/labels/nogil%20CPython"
        }
    ],
    "locked": false,
    "merge_commit_sha": "75c8f612515bb724eb1ba76aa93b2d096023c499",
    "merged_at": "2024-11-27T10:03:17Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 277,
        "created_at": "2019-02-24T14:21:23Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder",
            "user_view_type": "public"
        },
        "description": "* Remove code for Python 2 and Python < 3.8.\r\n* Integrate better with Python 3.\r\n* Improve support for the Limited API.\r\n* Start supporting GIL-free Python 3.13.\r\n* Support the Py3.13 `sys.monitoring` API.\r\n* Support and use `am_send` for coroutines.",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/65",
        "id": 4082235,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/65/labels",
        "node_id": "MDk6TWlsZXN0b25lNDA4MjIzNQ==",
        "number": 65,
        "open_issues": 19,
        "state": "open",
        "title": "3.1",
        "updated_at": "2024-11-27T19:16:21Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/65"
    },
    "node_id": "PR_kwDOABDGAc6C8TJt",
    "number": 6516,
    "patch_url": "https://github.com/cython/cython/pull/6516.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/6516/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/d10cc1755f611c00d2c31b17c19d098650d0845b",
    "title": "Implement cython.critical_section",
    "updated_at": "2024-11-27T16:35:23Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/6516",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods",
        "user_view_type": "public"
    }
}