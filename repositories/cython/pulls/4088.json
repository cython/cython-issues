{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/4088/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4088/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/4088"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/4088"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4088/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4088"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/630aac9e79dab5ab5a73d8f68b7e568952a9e28f"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1136,
            "forks_count": 1136,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 950,
            "open_issues_count": 950,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2021-04-28T11:23:33Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 62198,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 6037,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2021-04-28T11:23:35Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 6037,
            "watchers_count": 6037
        },
        "sha": "9bc0abecb3a08ea13313200a51f1ee26a65e5be3",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Continuation of #3137. This provides declarations for the CPython Context Variables API, as a contextvars.pxd file. This also addresses comments made in the previous stale PR.\r\n\r\nCloses #2281\r\n\r\ncc @scoder ",
    "closed_at": "2021-04-27T19:01:58Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4088#discussion_r619134262"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4088"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/619134262"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    int PyContextVar_Get \"PyContextVar_Get\" (object var, PyObject* default_value, PyObject** value) except -1\r\n```",
            "commit_id": "630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
            "created_at": "2021-04-23T11:04:35Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+from cpython.object cimport PyObject\n+\n+cdef extern from \"Python.h\":\n+\n+    ############################################################################\n+    # Context Variables Objects\n+    ############################################################################\n+\n+    # PyContext\n+    # The C structure used to represent a `contextvars.Context` object.\n+\n+    # PyContextVar\n+    # The C structure used to represent a `contextvars.ContextVar` object.\n+\n+    # PyContextToken\n+    # The C structure used to represent a `contextvars.Token` object.\n+\n+    # PyTypeObject PyContext_Type\n+    # Type object representing the `contextvars.Context` type.\n+\n+    # PyTypeObject PyContextVar_Type\n+    # Type object representing the `contextvars.ContextVar` type.\n+\n+    # PyTypeObject PyContextToken_Type\n+    # Type object representing the `contextvars.Token` type.\n+\n+    bint PyContext_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContext_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextVar_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextVar_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextToken_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextToken_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    object PyContext_New()\n+    # Return value: New reference.\n+    # Create a new empty context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_Copy(object ctx)\n+    # Return value: New reference.\n+    # Create a shallow copy of the passed `ctx` context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_CopyCurrent()\n+    # Return value: New reference.\n+    # Create a shallow copy of the current thread context.\n+    # Returns NULL if an error has occurred.\n+\n+    int PyContext_Enter(object ctx) except -1\n+    # Set `ctx` as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    int PyContext_Exit(object ctx) except -1\n+    # Deactivate the `ctx` context and restore the previous context\n+    # as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    object PyContextVar_New(const char* name, object default_value)\n+    # Return value: New reference.\n+    # Create a new ContextVar object. The `name` parameter is used\n+    # for introspection and debug purposes. The `default_value` parameter\n+    # may optionally specify the default value for the context variable.\n+    # If an error has occurred, this function returns NULL.\n+\n+    int PyContextVar_Get1 \"PyContextVar_Get\" (PyObject* var, PyObject* default_value, PyObject** value) except -1",
            "html_url": "https://github.com/cython/cython/pull/4088#discussion_r619134262",
            "id": 619134262,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTEzNDI2Mg==",
            "original_commit_id": "7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
            "original_line": 70,
            "original_position": 70,
            "original_start_line": null,
            "path": "Cython/Includes/cpython/contextvars.pxd",
            "position": null,
            "pull_request_review_id": 643180597,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4088",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-04-26T13:33:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/619134262",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4088#discussion_r619134939"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4088"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/619134939"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    int PyContextVar_Get_with_default \"PyContextVar_Get\" (object var, object default_value, PyObject** value) except -1\r\n```",
            "commit_id": "630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
            "created_at": "2021-04-23T11:05:49Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+from cpython.object cimport PyObject\n+\n+cdef extern from \"Python.h\":\n+\n+    ############################################################################\n+    # Context Variables Objects\n+    ############################################################################\n+\n+    # PyContext\n+    # The C structure used to represent a `contextvars.Context` object.\n+\n+    # PyContextVar\n+    # The C structure used to represent a `contextvars.ContextVar` object.\n+\n+    # PyContextToken\n+    # The C structure used to represent a `contextvars.Token` object.\n+\n+    # PyTypeObject PyContext_Type\n+    # Type object representing the `contextvars.Context` type.\n+\n+    # PyTypeObject PyContextVar_Type\n+    # Type object representing the `contextvars.ContextVar` type.\n+\n+    # PyTypeObject PyContextToken_Type\n+    # Type object representing the `contextvars.Token` type.\n+\n+    bint PyContext_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContext_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextVar_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextVar_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextToken_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextToken_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    object PyContext_New()\n+    # Return value: New reference.\n+    # Create a new empty context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_Copy(object ctx)\n+    # Return value: New reference.\n+    # Create a shallow copy of the passed `ctx` context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_CopyCurrent()\n+    # Return value: New reference.\n+    # Create a shallow copy of the current thread context.\n+    # Returns NULL if an error has occurred.\n+\n+    int PyContext_Enter(object ctx) except -1\n+    # Set `ctx` as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    int PyContext_Exit(object ctx) except -1\n+    # Deactivate the `ctx` context and restore the previous context\n+    # as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    object PyContextVar_New(const char* name, object default_value)\n+    # Return value: New reference.\n+    # Create a new ContextVar object. The `name` parameter is used\n+    # for introspection and debug purposes. The `default_value` parameter\n+    # may optionally specify the default value for the context variable.\n+    # If an error has occurred, this function returns NULL.\n+\n+    int PyContextVar_Get1 \"PyContextVar_Get\" (PyObject* var, PyObject* default_value, PyObject** value) except -1\n+    # Get the value of a context variable.\n+    # Returns -1 if an error has occurred during lookup, and 0 if no error\n+    # occurred, whether or not a value was found.\n+    #\n+    # If the context variable was found, `value` will be a pointer to it.\n+    # If the context variable was not found, `value` will point to:\n+    #\n+    #   • `default_value`, if not NULL;\n+    #   • the default value of `var`, if not NULL;\n+    #   • NULL\n+    int PyContextVar_Get2 \"PyContextVar_Get\" (object var, object default_value, PyObject** value) except -1",
            "html_url": "https://github.com/cython/cython/pull/4088#discussion_r619134939",
            "id": 619134939,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTEzNDkzOQ==",
            "original_commit_id": "7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
            "original_line": 81,
            "original_position": 81,
            "original_start_line": null,
            "path": "Cython/Includes/cpython/contextvars.pxd",
            "position": null,
            "pull_request_review_id": 643180597,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4088",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-04-26T13:33:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/619134939",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4088#discussion_r619137146"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4088"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/619137146"
                }
            },
            "author_association": "MEMBER",
            "body": "I cannot believe that this is from the official documentation. This description of the return value is utterly unhelpful.",
            "commit_id": "630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
            "created_at": "2021-04-23T11:09:43Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+from cpython.object cimport PyObject\n+\n+cdef extern from \"Python.h\":\n+\n+    ############################################################################\n+    # Context Variables Objects\n+    ############################################################################\n+\n+    # PyContext\n+    # The C structure used to represent a `contextvars.Context` object.\n+\n+    # PyContextVar\n+    # The C structure used to represent a `contextvars.ContextVar` object.\n+\n+    # PyContextToken\n+    # The C structure used to represent a `contextvars.Token` object.\n+\n+    # PyTypeObject PyContext_Type\n+    # Type object representing the `contextvars.Context` type.\n+\n+    # PyTypeObject PyContextVar_Type\n+    # Type object representing the `contextvars.ContextVar` type.\n+\n+    # PyTypeObject PyContextToken_Type\n+    # Type object representing the `contextvars.Token` type.\n+\n+    bint PyContext_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContext_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextVar_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextVar_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextToken_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextToken_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    object PyContext_New()\n+    # Return value: New reference.\n+    # Create a new empty context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_Copy(object ctx)\n+    # Return value: New reference.\n+    # Create a shallow copy of the passed `ctx` context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_CopyCurrent()\n+    # Return value: New reference.\n+    # Create a shallow copy of the current thread context.\n+    # Returns NULL if an error has occurred.\n+\n+    int PyContext_Enter(object ctx) except -1\n+    # Set `ctx` as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    int PyContext_Exit(object ctx) except -1\n+    # Deactivate the `ctx` context and restore the previous context\n+    # as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    object PyContextVar_New(const char* name, object default_value)\n+    # Return value: New reference.\n+    # Create a new ContextVar object. The `name` parameter is used\n+    # for introspection and debug purposes. The `default_value` parameter\n+    # may optionally specify the default value for the context variable.\n+    # If an error has occurred, this function returns NULL.\n+\n+    int PyContextVar_Get1 \"PyContextVar_Get\" (PyObject* var, PyObject* default_value, PyObject** value) except -1\n+    # Get the value of a context variable.\n+    # Returns -1 if an error has occurred during lookup, and 0 if no error\n+    # occurred, whether or not a value was found.\n+    #\n+    # If the context variable was found, `value` will be a pointer to it.\n+    # If the context variable was not found, `value` will point to:\n+    #\n+    #   • `default_value`, if not NULL;\n+    #   • the default value of `var`, if not NULL;\n+    #   • NULL\n+    int PyContextVar_Get2 \"PyContextVar_Get\" (object var, object default_value, PyObject** value) except -1\n+    # a different declaration of PyContextVar_Get that requires default values\n+    # be passed on call.\n+\n+    object PyContextVar_Set(object var, object value)\n+    # Return value: New reference.\n+    # Set the value of `var` to `value` in the current context.\n+    # Returns a pointer to a PyObject object, or NULL if an error has occurred.",
            "html_url": "https://github.com/cython/cython/pull/4088#discussion_r619137146",
            "id": 619137146,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTEzNzE0Ng==",
            "original_commit_id": "7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
            "original_line": 88,
            "original_position": 88,
            "original_start_line": null,
            "path": "Cython/Includes/cpython/contextvars.pxd",
            "position": null,
            "pull_request_review_id": 643180597,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4088",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-04-26T13:33:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/619137146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4088#discussion_r619141327"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4088"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/619141327"
                }
            },
            "author_association": "MEMBER",
            "body": "It would be nice to also add convenience functions like (obviously with tests):\r\n```suggestion\r\n    # This function returns 0 on success and -1 on error.\r\n\r\n\r\ncdef inline object get_value(var, default_value=None):\r\n    \"\"\"Return a new reference to the value of the context variable,\r\n    or the provided default value if no such value was found.\r\n    \"\"\"\r\n    cdef PyObject *value\r\n    PyContextVar_Get(var, <PyObject*>default_value, &value)\r\n    return <object>value\r\n\r\n\r\ncdef inline object get_value_or_none(var):\r\n    \"\"\"Return a new reference to the value of the context variable,\r\n    or the default value of the context variable,\r\n    or None if no such value or default was found.\r\n    \"\"\"\r\n    cdef PyObject *value\r\n    PyContextVar_Get(var, NULL, &value)\r\n    return <object>value if value is not NULL else None\r\n```\r\n",
            "commit_id": "630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
            "created_at": "2021-04-23T11:17:47Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+from cpython.object cimport PyObject\n+\n+cdef extern from \"Python.h\":\n+\n+    ############################################################################\n+    # Context Variables Objects\n+    ############################################################################\n+\n+    # PyContext\n+    # The C structure used to represent a `contextvars.Context` object.\n+\n+    # PyContextVar\n+    # The C structure used to represent a `contextvars.ContextVar` object.\n+\n+    # PyContextToken\n+    # The C structure used to represent a `contextvars.Token` object.\n+\n+    # PyTypeObject PyContext_Type\n+    # Type object representing the `contextvars.Context` type.\n+\n+    # PyTypeObject PyContextVar_Type\n+    # Type object representing the `contextvars.ContextVar` type.\n+\n+    # PyTypeObject PyContextToken_Type\n+    # Type object representing the `contextvars.Token` type.\n+\n+    bint PyContext_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContext_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextVar_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextVar_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextToken_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextToken_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    object PyContext_New()\n+    # Return value: New reference.\n+    # Create a new empty context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_Copy(object ctx)\n+    # Return value: New reference.\n+    # Create a shallow copy of the passed `ctx` context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_CopyCurrent()\n+    # Return value: New reference.\n+    # Create a shallow copy of the current thread context.\n+    # Returns NULL if an error has occurred.\n+\n+    int PyContext_Enter(object ctx) except -1\n+    # Set `ctx` as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    int PyContext_Exit(object ctx) except -1\n+    # Deactivate the `ctx` context and restore the previous context\n+    # as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    object PyContextVar_New(const char* name, object default_value)\n+    # Return value: New reference.\n+    # Create a new ContextVar object. The `name` parameter is used\n+    # for introspection and debug purposes. The `default_value` parameter\n+    # may optionally specify the default value for the context variable.\n+    # If an error has occurred, this function returns NULL.\n+\n+    int PyContextVar_Get1 \"PyContextVar_Get\" (PyObject* var, PyObject* default_value, PyObject** value) except -1\n+    # Get the value of a context variable.\n+    # Returns -1 if an error has occurred during lookup, and 0 if no error\n+    # occurred, whether or not a value was found.\n+    #\n+    # If the context variable was found, `value` will be a pointer to it.\n+    # If the context variable was not found, `value` will point to:\n+    #\n+    #   • `default_value`, if not NULL;\n+    #   • the default value of `var`, if not NULL;\n+    #   • NULL\n+    int PyContextVar_Get2 \"PyContextVar_Get\" (object var, object default_value, PyObject** value) except -1\n+    # a different declaration of PyContextVar_Get that requires default values\n+    # be passed on call.\n+\n+    object PyContextVar_Set(object var, object value)\n+    # Return value: New reference.\n+    # Set the value of `var` to `value` in the current context.\n+    # Returns a pointer to a PyObject object, or NULL if an error has occurred.\n+\n+    int PyContextVar_Reset(object var, object token) except -1\n+    # Reset the state of the `var` context variable to that it was in\n+    # before `PyContextVar_Set()` that returned `token` was called.\n+    # This function returns 0 on success and -1 on error.",
            "html_url": "https://github.com/cython/cython/pull/4088#discussion_r619141327",
            "id": 619141327,
            "line": 93,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE0MTMyNw==",
            "original_commit_id": "7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
            "original_line": 93,
            "original_position": 93,
            "original_start_line": null,
            "path": "Cython/Includes/cpython/contextvars.pxd",
            "position": 93,
            "pull_request_review_id": 643180597,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4088",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-04-26T13:33:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/619141327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4088#discussion_r619426960"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4088"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/619426960"
                }
            },
            "author_association": "MEMBER",
            "body": "(this addition can be a separate PR if you don't feel like writing tests for this)",
            "commit_id": "630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
            "created_at": "2021-04-23T18:41:04Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+from cpython.object cimport PyObject\n+\n+cdef extern from \"Python.h\":\n+\n+    ############################################################################\n+    # Context Variables Objects\n+    ############################################################################\n+\n+    # PyContext\n+    # The C structure used to represent a `contextvars.Context` object.\n+\n+    # PyContextVar\n+    # The C structure used to represent a `contextvars.ContextVar` object.\n+\n+    # PyContextToken\n+    # The C structure used to represent a `contextvars.Token` object.\n+\n+    # PyTypeObject PyContext_Type\n+    # Type object representing the `contextvars.Context` type.\n+\n+    # PyTypeObject PyContextVar_Type\n+    # Type object representing the `contextvars.ContextVar` type.\n+\n+    # PyTypeObject PyContextToken_Type\n+    # Type object representing the `contextvars.Token` type.\n+\n+    bint PyContext_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContext_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextVar_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextVar_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextToken_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextToken_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    object PyContext_New()\n+    # Return value: New reference.\n+    # Create a new empty context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_Copy(object ctx)\n+    # Return value: New reference.\n+    # Create a shallow copy of the passed `ctx` context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_CopyCurrent()\n+    # Return value: New reference.\n+    # Create a shallow copy of the current thread context.\n+    # Returns NULL if an error has occurred.\n+\n+    int PyContext_Enter(object ctx) except -1\n+    # Set `ctx` as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    int PyContext_Exit(object ctx) except -1\n+    # Deactivate the `ctx` context and restore the previous context\n+    # as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    object PyContextVar_New(const char* name, object default_value)\n+    # Return value: New reference.\n+    # Create a new ContextVar object. The `name` parameter is used\n+    # for introspection and debug purposes. The `default_value` parameter\n+    # may optionally specify the default value for the context variable.\n+    # If an error has occurred, this function returns NULL.\n+\n+    int PyContextVar_Get1 \"PyContextVar_Get\" (PyObject* var, PyObject* default_value, PyObject** value) except -1\n+    # Get the value of a context variable.\n+    # Returns -1 if an error has occurred during lookup, and 0 if no error\n+    # occurred, whether or not a value was found.\n+    #\n+    # If the context variable was found, `value` will be a pointer to it.\n+    # If the context variable was not found, `value` will point to:\n+    #\n+    #   • `default_value`, if not NULL;\n+    #   • the default value of `var`, if not NULL;\n+    #   • NULL\n+    int PyContextVar_Get2 \"PyContextVar_Get\" (object var, object default_value, PyObject** value) except -1\n+    # a different declaration of PyContextVar_Get that requires default values\n+    # be passed on call.\n+\n+    object PyContextVar_Set(object var, object value)\n+    # Return value: New reference.\n+    # Set the value of `var` to `value` in the current context.\n+    # Returns a pointer to a PyObject object, or NULL if an error has occurred.\n+\n+    int PyContextVar_Reset(object var, object token) except -1\n+    # Reset the state of the `var` context variable to that it was in\n+    # before `PyContextVar_Set()` that returned `token` was called.\n+    # This function returns 0 on success and -1 on error.",
            "html_url": "https://github.com/cython/cython/pull/4088#discussion_r619426960",
            "id": 619426960,
            "in_reply_to_id": 619141327,
            "line": 93,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQyNjk2MA==",
            "original_commit_id": "7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
            "original_line": 93,
            "original_position": 93,
            "original_start_line": null,
            "path": "Cython/Includes/cpython/contextvars.pxd",
            "position": 93,
            "pull_request_review_id": 643572566,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4088",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-04-26T13:33:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/619426960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4088#discussion_r620300525"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4088"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/620300525"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    # Returns a pointer to a PyObject object, or NULL if an error has occurred.\r\n```\r\n```suggestion\r\n    # Returns a token object for this value change, or NULL if an error has occurred.\r\n```",
            "commit_id": "630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
            "created_at": "2021-04-26T13:33:21Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+from cpython.object cimport PyObject\n+\n+cdef extern from \"Python.h\":\n+\n+    ############################################################################\n+    # Context Variables Objects\n+    ############################################################################\n+\n+    # PyContext\n+    # The C structure used to represent a `contextvars.Context` object.\n+\n+    # PyContextVar\n+    # The C structure used to represent a `contextvars.ContextVar` object.\n+\n+    # PyContextToken\n+    # The C structure used to represent a `contextvars.Token` object.\n+\n+    # PyTypeObject PyContext_Type\n+    # Type object representing the `contextvars.Context` type.\n+\n+    # PyTypeObject PyContextVar_Type\n+    # Type object representing the `contextvars.ContextVar` type.\n+\n+    # PyTypeObject PyContextToken_Type\n+    # Type object representing the `contextvars.Token` type.\n+\n+    bint PyContext_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContext_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextVar_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextVar_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextToken_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextToken_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    object PyContext_New()\n+    # Return value: New reference.\n+    # Create a new empty context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_Copy(object ctx)\n+    # Return value: New reference.\n+    # Create a shallow copy of the passed `ctx` context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_CopyCurrent()\n+    # Return value: New reference.\n+    # Create a shallow copy of the current thread context.\n+    # Returns NULL if an error has occurred.\n+\n+    int PyContext_Enter(object ctx) except -1\n+    # Set `ctx` as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    int PyContext_Exit(object ctx) except -1\n+    # Deactivate the `ctx` context and restore the previous context\n+    # as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    object PyContextVar_New(const char* name, object default_value)\n+    # Return value: New reference.\n+    # Create a new ContextVar object. The `name` parameter is used\n+    # for introspection and debug purposes. The `default_value` parameter\n+    # may optionally specify the default value for the context variable.\n+    # If an error has occurred, this function returns NULL.\n+\n+    int PyContextVar_Get1 \"PyContextVar_Get\" (PyObject* var, PyObject* default_value, PyObject** value) except -1\n+    # Get the value of a context variable.\n+    # Returns -1 if an error has occurred during lookup, and 0 if no error\n+    # occurred, whether or not a value was found.\n+    #\n+    # If the context variable was found, `value` will be a pointer to it.\n+    # If the context variable was not found, `value` will point to:\n+    #\n+    #   • `default_value`, if not NULL;\n+    #   • the default value of `var`, if not NULL;\n+    #   • NULL\n+    int PyContextVar_Get2 \"PyContextVar_Get\" (object var, object default_value, PyObject** value) except -1\n+    # a different declaration of PyContextVar_Get that requires default values\n+    # be passed on call.\n+\n+    object PyContextVar_Set(object var, object value)\n+    # Return value: New reference.\n+    # Set the value of `var` to `value` in the current context.\n+    # Returns a pointer to a PyObject object, or NULL if an error has occurred.",
            "html_url": "https://github.com/cython/cython/pull/4088#discussion_r620300525",
            "id": 620300525,
            "in_reply_to_id": 619137146,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDMwMDUyNQ==",
            "original_commit_id": "7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
            "original_line": 88,
            "original_position": 88,
            "original_start_line": null,
            "path": "Cython/Includes/cpython/contextvars.pxd",
            "position": null,
            "pull_request_review_id": 644676739,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4088",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-04-26T13:33:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/620300525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4088#discussion_r621555725"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4088"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/621555725"
                }
            },
            "author_association": "MEMBER",
            "body": "I added similar helper functions in ff16389c0da5acc2be1b49fd074b0919cb252b88..",
            "commit_id": "630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
            "created_at": "2021-04-27T19:56:40Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+from cpython.object cimport PyObject\n+\n+cdef extern from \"Python.h\":\n+\n+    ############################################################################\n+    # Context Variables Objects\n+    ############################################################################\n+\n+    # PyContext\n+    # The C structure used to represent a `contextvars.Context` object.\n+\n+    # PyContextVar\n+    # The C structure used to represent a `contextvars.ContextVar` object.\n+\n+    # PyContextToken\n+    # The C structure used to represent a `contextvars.Token` object.\n+\n+    # PyTypeObject PyContext_Type\n+    # Type object representing the `contextvars.Context` type.\n+\n+    # PyTypeObject PyContextVar_Type\n+    # Type object representing the `contextvars.ContextVar` type.\n+\n+    # PyTypeObject PyContextToken_Type\n+    # Type object representing the `contextvars.Token` type.\n+\n+    bint PyContext_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContext_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextVar_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextVar_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    bint PyContextToken_CheckExact(object obj)\n+    # Return `true` if `obj` is of type `PyContextToken_Type`.\n+    # `obj` must not be NULL. This function always succeeds.\n+\n+    object PyContext_New()\n+    # Return value: New reference.\n+    # Create a new empty context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_Copy(object ctx)\n+    # Return value: New reference.\n+    # Create a shallow copy of the passed `ctx` context object.\n+    # Returns NULL if an error has occurred.\n+\n+    object PyContext_CopyCurrent()\n+    # Return value: New reference.\n+    # Create a shallow copy of the current thread context.\n+    # Returns NULL if an error has occurred.\n+\n+    int PyContext_Enter(object ctx) except -1\n+    # Set `ctx` as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    int PyContext_Exit(object ctx) except -1\n+    # Deactivate the `ctx` context and restore the previous context\n+    # as the current context for the current thread.\n+    # Returns 0 on success, and -1 on error.\n+\n+    object PyContextVar_New(const char* name, object default_value)\n+    # Return value: New reference.\n+    # Create a new ContextVar object. The `name` parameter is used\n+    # for introspection and debug purposes. The `default_value` parameter\n+    # may optionally specify the default value for the context variable.\n+    # If an error has occurred, this function returns NULL.\n+\n+    int PyContextVar_Get1 \"PyContextVar_Get\" (PyObject* var, PyObject* default_value, PyObject** value) except -1\n+    # Get the value of a context variable.\n+    # Returns -1 if an error has occurred during lookup, and 0 if no error\n+    # occurred, whether or not a value was found.\n+    #\n+    # If the context variable was found, `value` will be a pointer to it.\n+    # If the context variable was not found, `value` will point to:\n+    #\n+    #   • `default_value`, if not NULL;\n+    #   • the default value of `var`, if not NULL;\n+    #   • NULL\n+    int PyContextVar_Get2 \"PyContextVar_Get\" (object var, object default_value, PyObject** value) except -1\n+    # a different declaration of PyContextVar_Get that requires default values\n+    # be passed on call.\n+\n+    object PyContextVar_Set(object var, object value)\n+    # Return value: New reference.\n+    # Set the value of `var` to `value` in the current context.\n+    # Returns a pointer to a PyObject object, or NULL if an error has occurred.\n+\n+    int PyContextVar_Reset(object var, object token) except -1\n+    # Reset the state of the `var` context variable to that it was in\n+    # before `PyContextVar_Set()` that returned `token` was called.\n+    # This function returns 0 on success and -1 on error.",
            "html_url": "https://github.com/cython/cython/pull/4088#discussion_r621555725",
            "id": 621555725,
            "in_reply_to_id": 619141327,
            "line": 93,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTU1NTcyNQ==",
            "original_commit_id": "7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
            "original_line": 93,
            "original_position": 93,
            "original_start_line": null,
            "path": "Cython/Includes/cpython/contextvars.pxd",
            "position": 93,
            "pull_request_review_id": 646304315,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4088",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-04-27T19:56:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/621555725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4088/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/378969?v=4",
                "events_url": "https://api.github.com/users/fish2000/events{/privacy}",
                "followers_url": "https://api.github.com/users/fish2000/followers",
                "following_url": "https://api.github.com/users/fish2000/following{/other_user}",
                "gists_url": "https://api.github.com/users/fish2000/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fish2000",
                "id": 378969,
                "login": "fish2000",
                "node_id": "MDQ6VXNlcjM3ODk2OQ==",
                "organizations_url": "https://api.github.com/users/fish2000/orgs",
                "received_events_url": "https://api.github.com/users/fish2000/received_events",
                "repos_url": "https://api.github.com/users/fish2000/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fish2000/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fish2000/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fish2000"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/211cbc387e39b9b6ee5197ae58ef99e9dd96f27b/comments",
            "commit": {
                "author": {
                    "date": "2019-09-08T03:01:50Z",
                    "email": "fish2000@gmail.com",
                    "name": "Alexander Böhn"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2019-09-08T03:19:17Z",
                    "email": "fish2000@gmail.com",
                    "name": "Alexander Böhn"
                },
                "message": "Adding declarations for CPython’s Context Variables API",
                "tree": {
                    "sha": "1ae5b1a21713bc7ae4d5fe116e4cb255fd166525",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1ae5b1a21713bc7ae4d5fe116e4cb255fd166525"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/211cbc387e39b9b6ee5197ae58ef99e9dd96f27b",
                "verification": {
                    "payload": "tree 1ae5b1a21713bc7ae4d5fe116e4cb255fd166525\nparent bc1a0d42351ca2c6d052d0ec1e484ce4c43ce9bd\nauthor Alexander Böhn <fish2000@gmail.com> 1567911710 -0400\ncommitter Alexander Böhn <fish2000@gmail.com> 1567912757 -0400\n\nAdding declarations for CPython’s Context Variables API\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEl5hjvqbwao8J+LTEJIK1yfEutdgFAl10c0AACgkQJIK1yfEu\ntdit0BAAsbD7WSWr6Y+nwwtELXEyfTdoBFlMRWtmK8/4of1o01QNKF9mPiouGYoV\nKcg/Q6ihlpf2uzVdHL8GNcnejOUXXsbSoDWLJ8/P/D5HgOJPkY7ZURUaNshvcph5\nttpGs9R4FqEohjDQT3TX2H+qcSEe0BJJ0tVX7+pT+8RMKMyTZv4fZEYrqattoKED\ndeY8x7laZjcg6k427kgG35aL/tQBYY1M+N1Vyy/moqksfOuozoQkkSg8Bn+ubT58\nO1791E/tVFwahQHqBHuwGJCIXD7OzVqYLULDncQseYDAJiogxP3ww0/ja+Q42YAE\nkLVyncctsljMzQhvVroJOJmg5UOYoQHtjxhSSbT3Wz84jgTdG5MVJeJi+DVmiOfq\nJg8WeIREL/n41ikST08rCFhI/sPBAIIA7mDZxVVqAhBYQNs4+RAlvT5ZRxAHylqf\n9dOgLKgy6rtVbwdaX8db2lIn4NXiALoVPaxCqzK5bNce1wTK+dHPalr/O5sLWbAR\nDvDW0p6xn/CQNCZzSKi9HI7MBDGh0b4RK6oXSY//4QQ6ie4gr3qwPjgYphzLiDcx\nHG19yGGROxHM9OOcNYZ3LS1G0KrxpR2bVisk3pDiLgyqSr8aj92EXGp7DUf0OFb1\nUkVnIKaUaHYhbZ+1svjJRStdz7bv/Wo7XZ7uyMcy30gNILnNc5U=\n=P6j2\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/378969?v=4",
                "events_url": "https://api.github.com/users/fish2000/events{/privacy}",
                "followers_url": "https://api.github.com/users/fish2000/followers",
                "following_url": "https://api.github.com/users/fish2000/following{/other_user}",
                "gists_url": "https://api.github.com/users/fish2000/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fish2000",
                "id": 378969,
                "login": "fish2000",
                "node_id": "MDQ6VXNlcjM3ODk2OQ==",
                "organizations_url": "https://api.github.com/users/fish2000/orgs",
                "received_events_url": "https://api.github.com/users/fish2000/received_events",
                "repos_url": "https://api.github.com/users/fish2000/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fish2000/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fish2000/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fish2000"
            },
            "html_url": "https://github.com/cython/cython/commit/211cbc387e39b9b6ee5197ae58ef99e9dd96f27b",
            "node_id": "MDY6Q29tbWl0MzU0NTgxOTg2OjIxMWNiYzM4N2UzOWI5YjZlZTUxOTdhZTU4ZWY5OWU5ZGQ5NmYyN2I=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bc1a0d42351ca2c6d052d0ec1e484ce4c43ce9bd",
                    "sha": "bc1a0d42351ca2c6d052d0ec1e484ce4c43ce9bd",
                    "url": "https://api.github.com/repos/cython/cython/commits/bc1a0d42351ca2c6d052d0ec1e484ce4c43ce9bd"
                }
            ],
            "sha": "211cbc387e39b9b6ee5197ae58ef99e9dd96f27b",
            "url": "https://api.github.com/repos/cython/cython/commits/211cbc387e39b9b6ee5197ae58ef99e9dd96f27b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/44142765?v=4",
                "events_url": "https://api.github.com/users/zoj613/events{/privacy}",
                "followers_url": "https://api.github.com/users/zoj613/followers",
                "following_url": "https://api.github.com/users/zoj613/following{/other_user}",
                "gists_url": "https://api.github.com/users/zoj613/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zoj613",
                "id": 44142765,
                "login": "zoj613",
                "node_id": "MDQ6VXNlcjQ0MTQyNzY1",
                "organizations_url": "https://api.github.com/users/zoj613/orgs",
                "received_events_url": "https://api.github.com/users/zoj613/received_events",
                "repos_url": "https://api.github.com/users/zoj613/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zoj613/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zoj613/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zoj613"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/67a2cb100fe5d9ab662ba57475a194f46ad832aa/comments",
            "commit": {
                "author": {
                    "date": "2021-04-04T17:04:43Z",
                    "email": "44142765+zoj613@users.noreply.github.com",
                    "name": "zoj"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-04-04T17:04:43Z",
                    "email": "44142765+zoj613@users.noreply.github.com",
                    "name": "zoj"
                },
                "message": "Complete declarations for CPython’s Context Variables API",
                "tree": {
                    "sha": "8a0136fba8c6eb7b79b90c2e160fa1fc8e42dc80",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8a0136fba8c6eb7b79b90c2e160fa1fc8e42dc80"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/67a2cb100fe5d9ab662ba57475a194f46ad832aa",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/44142765?v=4",
                "events_url": "https://api.github.com/users/zoj613/events{/privacy}",
                "followers_url": "https://api.github.com/users/zoj613/followers",
                "following_url": "https://api.github.com/users/zoj613/following{/other_user}",
                "gists_url": "https://api.github.com/users/zoj613/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zoj613",
                "id": 44142765,
                "login": "zoj613",
                "node_id": "MDQ6VXNlcjQ0MTQyNzY1",
                "organizations_url": "https://api.github.com/users/zoj613/orgs",
                "received_events_url": "https://api.github.com/users/zoj613/received_events",
                "repos_url": "https://api.github.com/users/zoj613/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zoj613/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zoj613/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zoj613"
            },
            "html_url": "https://github.com/cython/cython/commit/67a2cb100fe5d9ab662ba57475a194f46ad832aa",
            "node_id": "MDY6Q29tbWl0MzU0NTgxOTg2OjY3YTJjYjEwMGZlNWQ5YWI2NjJiYTU3NDc1YTE5NGY0NmFkODMyYWE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/211cbc387e39b9b6ee5197ae58ef99e9dd96f27b",
                    "sha": "211cbc387e39b9b6ee5197ae58ef99e9dd96f27b",
                    "url": "https://api.github.com/repos/cython/cython/commits/211cbc387e39b9b6ee5197ae58ef99e9dd96f27b"
                }
            ],
            "sha": "67a2cb100fe5d9ab662ba57475a194f46ad832aa",
            "url": "https://api.github.com/repos/cython/cython/commits/67a2cb100fe5d9ab662ba57475a194f46ad832aa"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/44142765?v=4",
                "events_url": "https://api.github.com/users/zoj613/events{/privacy}",
                "followers_url": "https://api.github.com/users/zoj613/followers",
                "following_url": "https://api.github.com/users/zoj613/following{/other_user}",
                "gists_url": "https://api.github.com/users/zoj613/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zoj613",
                "id": 44142765,
                "login": "zoj613",
                "node_id": "MDQ6VXNlcjQ0MTQyNzY1",
                "organizations_url": "https://api.github.com/users/zoj613/orgs",
                "received_events_url": "https://api.github.com/users/zoj613/received_events",
                "repos_url": "https://api.github.com/users/zoj613/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zoj613/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zoj613/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zoj613"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140/comments",
            "commit": {
                "author": {
                    "date": "2021-04-04T17:12:51Z",
                    "email": "zolisa.bleki@gmail.com",
                    "name": "zoj613"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-04-04T17:12:51Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into contextvars-pxd",
                "tree": {
                    "sha": "d51ac63b033b89de204985ea73da84655a7a804b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d51ac63b033b89de204985ea73da84655a7a804b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
                "verification": {
                    "payload": "tree d51ac63b033b89de204985ea73da84655a7a804b\nparent 67a2cb100fe5d9ab662ba57475a194f46ad832aa\nparent 9bc0abecb3a08ea13313200a51f1ee26a65e5be3\nauthor zoj613 <zolisa.bleki@gmail.com> 1617556371 +0200\ncommitter GitHub <noreply@github.com> 1617556371 +0200\n\nMerge branch 'master' into contextvars-pxd",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgafOTCRBK7hj4Ov3rIwAAdHIIADZ6IyEZBzFR0g7gQLzoNvWi\ny1hdECtMbvqEJiJYKBkY5ieomOKzDdJSPtnFXgpHsz6QvKlvWeRb7y9STCz44Uk2\n+6hmHz25XOvGeGilFDS1aEPs7ZsS78tI5T+R4uxcAS1N7f0hE6hCEYjWM0RVONHu\neB9/La0285P4s45rs5WgoeIDlEBYbMQph3MP4HA3O52y5CS8xGdULJFOzXIz2LxA\ngeHWAVy4lt5jy9Qar5WZtGJg16AEjq6Wzcn2TE56e9c4Y+E4+R07HvaCSpol9/7r\nVmmO7kKIAB34Yyl4BZMEW7S4+ex3WMzBEvIx0a7kJOtWpxZ+0NOPLZ/+pIRLV/Y=\n=mTqI\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
            "node_id": "MDY6Q29tbWl0MzU0NTgxOTg2OjdmMTBiYWQ4NWUzZTJiMzczMWUzYTMwM2E2YmE2ZjllMmNmZTgxNDA=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/67a2cb100fe5d9ab662ba57475a194f46ad832aa",
                    "sha": "67a2cb100fe5d9ab662ba57475a194f46ad832aa",
                    "url": "https://api.github.com/repos/cython/cython/commits/67a2cb100fe5d9ab662ba57475a194f46ad832aa"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/9bc0abecb3a08ea13313200a51f1ee26a65e5be3",
                    "sha": "9bc0abecb3a08ea13313200a51f1ee26a65e5be3",
                    "url": "https://api.github.com/repos/cython/cython/commits/9bc0abecb3a08ea13313200a51f1ee26a65e5be3"
                }
            ],
            "sha": "7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
            "url": "https://api.github.com/repos/cython/cython/commits/7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/630aac9e79dab5ab5a73d8f68b7e568952a9e28f/comments",
            "commit": {
                "author": {
                    "date": "2021-04-26T13:33:43Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-04-26T13:33:43Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review",
                "tree": {
                    "sha": "5d831d9c5dc7b4e4e935ee359e1ce8e868eeb2ae",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5d831d9c5dc7b4e4e935ee359e1ce8e868eeb2ae"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
                "verification": {
                    "payload": "tree 5d831d9c5dc7b4e4e935ee359e1ce8e868eeb2ae\nparent 7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140\nauthor scoder <stefan_ml@behnel.de> 1619444023 +0200\ncommitter GitHub <noreply@github.com> 1619444023 +0200\n\nApply suggestions from code review",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghsE3CRBK7hj4Ov3rIwAAc48IAJ8k3EWZiZR3p5SoMNro966e\n9NimPyK4PIZBJphJeNozgZ/Bwan93KOZ6l6HzIT/hWaBYHOm2BJSldLvJ6PX/qFx\nMwlzvnHSorZic218GBiaODPok3yHKE9cMDrH4wbdgKq3gwoWMwgSKN6ZLrhS/kMJ\nCYBBp2KldGvgNpev4SxcnYFQMxx001tTXsKsEphVCVd1v1BHXhtgfRLP/PUSag8t\nR8kcBJ5nxIm249kL9VAm0aiicbeEAnfgQbfXbeIa/HvuOsHZmLfqh3MKoGKERJQK\nd0NkQD6hE7J0Yl/H2CAE5nF5zTNGLu0drBILmlao2j97+myd52yGi44zpOUlyeI=\n=mJTB\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
            "node_id": "MDY6Q29tbWl0MzU0NTgxOTg2OjYzMGFhYzllNzlkYWI1YWI1YTczZDhmNjhiN2U1Njg5NTJhOWUyOGY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
                    "sha": "7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140",
                    "url": "https://api.github.com/repos/cython/cython/commits/7f10bad85e3e2b3731e3a303a6ba6f9e2cfe8140"
                }
            ],
            "sha": "630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
            "url": "https://api.github.com/repos/cython/cython/commits/630aac9e79dab5ab5a73d8f68b7e568952a9e28f"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/4088/commits",
    "created_at": "2021-04-04T17:09:26Z",
    "diff_url": "https://github.com/cython/cython/pull/4088.diff",
    "draft": false,
    "head": {
        "label": "zoj613:contextvars-pxd",
        "ref": "contextvars-pxd",
        "repo": {
            "archive_url": "https://api.github.com/repos/zoj613/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/zoj613/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/zoj613/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/zoj613/cython/branches{/branch}",
            "clone_url": "https://github.com/zoj613/cython.git",
            "collaborators_url": "https://api.github.com/repos/zoj613/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/zoj613/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/zoj613/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/zoj613/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/zoj613/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/zoj613/cython/contributors",
            "created_at": "2021-04-04T15:42:27Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/zoj613/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/zoj613/cython/downloads",
            "events_url": "https://api.github.com/repos/zoj613/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/zoj613/cython/forks",
            "full_name": "zoj613/cython",
            "git_commits_url": "https://api.github.com/repos/zoj613/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/zoj613/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/zoj613/cython/git/tags{/sha}",
            "git_url": "git://github.com/zoj613/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/zoj613/cython/hooks",
            "html_url": "https://github.com/zoj613/cython",
            "id": 354581986,
            "issue_comment_url": "https://api.github.com/repos/zoj613/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/zoj613/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/zoj613/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/zoj613/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/zoj613/cython/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/zoj613/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/zoj613/cython/merges",
            "milestones_url": "https://api.github.com/repos/zoj613/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTQ1ODE5ODY=",
            "notifications_url": "https://api.github.com/repos/zoj613/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/44142765?v=4",
                "events_url": "https://api.github.com/users/zoj613/events{/privacy}",
                "followers_url": "https://api.github.com/users/zoj613/followers",
                "following_url": "https://api.github.com/users/zoj613/following{/other_user}",
                "gists_url": "https://api.github.com/users/zoj613/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zoj613",
                "id": 44142765,
                "login": "zoj613",
                "node_id": "MDQ6VXNlcjQ0MTQyNzY1",
                "organizations_url": "https://api.github.com/users/zoj613/orgs",
                "received_events_url": "https://api.github.com/users/zoj613/received_events",
                "repos_url": "https://api.github.com/users/zoj613/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zoj613/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zoj613/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zoj613"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/zoj613/cython/pulls{/number}",
            "pushed_at": "2021-04-26T13:33:43Z",
            "releases_url": "https://api.github.com/repos/zoj613/cython/releases{/id}",
            "size": 61391,
            "ssh_url": "git@github.com:zoj613/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/zoj613/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/zoj613/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/zoj613/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/zoj613/cython/subscription",
            "svn_url": "https://github.com/zoj613/cython",
            "tags_url": "https://api.github.com/repos/zoj613/cython/tags",
            "teams_url": "https://api.github.com/repos/zoj613/cython/teams",
            "trees_url": "https://api.github.com/repos/zoj613/cython/git/trees{/sha}",
            "updated_at": "2021-04-04T15:42:28Z",
            "url": "https://api.github.com/repos/zoj613/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/44142765?v=4",
            "events_url": "https://api.github.com/users/zoj613/events{/privacy}",
            "followers_url": "https://api.github.com/users/zoj613/followers",
            "following_url": "https://api.github.com/users/zoj613/following{/other_user}",
            "gists_url": "https://api.github.com/users/zoj613/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/zoj613",
            "id": 44142765,
            "login": "zoj613",
            "node_id": "MDQ6VXNlcjQ0MTQyNzY1",
            "organizations_url": "https://api.github.com/users/zoj613/orgs",
            "received_events_url": "https://api.github.com/users/zoj613/received_events",
            "repos_url": "https://api.github.com/users/zoj613/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/zoj613/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zoj613/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/zoj613"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/4088",
    "id": 608578715,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/4088",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425561823,
            "name": "Library",
            "node_id": "MDU6TGFiZWw0MjU1NjE4MjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/Library"
        },
        {
            "color": "444444",
            "default": true,
            "description": null,
            "id": 425556243,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNDM=",
            "url": "https://api.github.com/repos/cython/cython/labels/enhancement"
        }
    ],
    "locked": false,
    "merge_commit_sha": "24c533e0230119d2d91828454aa9427fc3c8b32d",
    "merged_at": "2021-04-27T19:01:58Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 347,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\n– New version scheme: 3.x instead of 0.x.\r\n– Change default `language_level` from `2` to `3`.\r\n– Change default for `binding` directive from `False` to `True`.\r\n– Fix some Python compatibility issues (if possible, allowing for breaking changes).\r\n",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 23,
        "state": "open",
        "title": "3.0",
        "updated_at": "2021-04-28T11:32:59Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjA4NTc4NzE1",
    "number": 4088,
    "patch_url": "https://github.com/cython/cython/pull/4088.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/4088/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/630aac9e79dab5ab5a73d8f68b7e568952a9e28f",
    "title": "Complete declarations for CPython’s Context Variables API",
    "updated_at": "2021-04-27T19:56:40Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/4088",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/44142765?v=4",
        "events_url": "https://api.github.com/users/zoj613/events{/privacy}",
        "followers_url": "https://api.github.com/users/zoj613/followers",
        "following_url": "https://api.github.com/users/zoj613/following{/other_user}",
        "gists_url": "https://api.github.com/users/zoj613/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/zoj613",
        "id": 44142765,
        "login": "zoj613",
        "node_id": "MDQ6VXNlcjQ0MTQyNzY1",
        "organizations_url": "https://api.github.com/users/zoj613/orgs",
        "received_events_url": "https://api.github.com/users/zoj613/received_events",
        "repos_url": "https://api.github.com/users/zoj613/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/zoj613/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zoj613/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/zoj613"
    }
}