{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/4897/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4897/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/4897"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/4897"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4897/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4897"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/ab8f4d53c793bfa33aea4aa75715810a4814ab56"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1488,
            "forks_count": 1488,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1243,
            "open_issues_count": 1243,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2023-11-10T08:05:06Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 69841,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 8491,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2023-11-10T12:39:23Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 8491,
            "watchers_count": 8491,
            "web_commit_signoff_required": false
        },
        "sha": "d693e91ed5ceb2a4443669b930ba01a480d61924",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "First step for https://github.com/cython/cython/issues/4029\r\n\r\nThis follows the CPython grammar specification as closely as I can. \r\n\r\nIt parsers the entire \"test_patma\" file (which I have copied from CPython). However, they then fail when they're analysed. I've introduced `return` statements in the `test_patma` file which means that the nodes will get eliminated by Cython's dead-code elimination (hence the failure to analyse isn't a problem). The return statements will be removed as features are implemented. ",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922799822"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922799822"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    Node type for things that we want to get through the parser\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T09:02:17Z",
            "diff_hunk": "@@ -10118,6 +10118,17 @@ def generate_execution_code(self, code):\n         self.node.generate_execution_code(code)\n \n \n+class ErrorNode(Node):\n+    \"\"\"\n+    Node type for things that we want to get throught the parser",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922799822",
            "id": 922799822,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43AM7O",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 10123,
            "original_position": 6,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 1041097699,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922799822/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-07-17T09:37:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922799822",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922800481"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922800481"
                }
            },
            "author_association": "MEMBER",
            "body": "Probably worth updating from latest CPython main branch already.\r\nhttps://github.com/python/cpython/blob/main/Lib/test/test_patma.py",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T09:07:28Z",
            "diff_hunk": "@@ -0,0 +1,3415 @@\n+### COPIED FROM CPython 3.9",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922800481",
            "id": 922800481,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43ANFh",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "tests/run/test_patma.py",
            "position": null,
            "pull_request_review_id": 1041097699,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922800481/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-07-17T09:37:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922800481",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922801087"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922801087"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd rather see a decorator being used here. It's unhelpful to search for left-over `return`s, but would be easy to search for `@disabled`.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T09:11:40Z",
            "diff_hunk": "@@ -0,0 +1,3415 @@\n+### COPIED FROM CPython 3.9\n+### Original part after ############\n+# cython: language_level=3\n+\n+# new code\n+import cython\n+from Cython.Compiler.Main import compile as cython_compile, CompileError\n+from Cython.Build.Inline import cython_inline\n+import contextlib\n+from tempfile import NamedTemporaryFile\n+\n+@contextlib.contextmanager\n+def hidden_stderr():\n+    try:\n+        from StringIO import StringIO\n+    except ImportError:\n+        from io import StringIO\n+\n+    old_stderr = sys.stderr\n+    try:\n+        sys.stderr = StringIO()\n+        yield\n+    finally:\n+        sys.stderr = old_stderr\n+\n+def _compile(code):\n+    with NamedTemporaryFile(suffix='.py') as f:\n+        f.write(code.encode('utf8'))\n+        f.flush()\n+\n+        with hidden_stderr():\n+            result = cython_compile(f.name, language_level=3)\n+    return result\n+\n+if cython.compiled:\n+    def compile(code, name, what):\n+        assert what == 'exec'\n+        result = _compile(code)\n+        if not result.c_file:\n+            raise SyntaxError('unexpected EOF')  # compile is only used for testing errors\n+\n+############## SLIGHTLY MODIFIED ORIGINAL CODE\n+import array\n+import collections\n+import enum\n+import inspect\n+import sys\n+import unittest\n+\n+if sys.version_info > (3, 10):\n+    import dataclasses\n+    @dataclasses.dataclass\n+    class Point:\n+        x: int\n+        y: int\n+else:\n+    # predates dataclasses with match args\n+    class Point:\n+        __match_args__ = (\"x\", \"y\")\n+        x: int\n+        y: int\n+\n+# TestCompiler removed - it's very CPython-specific\n+# TestTracing also removed - doesn't seem like a core test\n+\n+# FIXME - return all the \"return\"s added to cause code to be dropped\n+############## ORIGINAL PART FROM CPYTHON\n+\n+\n+class TestInheritance(unittest.TestCase):\n+\n+    @staticmethod\n+    def check_sequence_then_mapping(x):\n+        return",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922801087",
            "id": 922801087,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43ANO_",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 74,
            "original_position": 74,
            "original_start_line": null,
            "path": "tests/run/test_patma.py",
            "position": null,
            "pull_request_review_id": 1041097699,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922801087/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-07-17T09:37:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922801087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922801303"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922801303"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    s.expect('}')\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T09:13:51Z",
            "diff_hunk": "@@ -3967,6 +3974,429 @@ def p_cpp_class_attribute(s, ctx):\n             node.decorators = decorators\n         return node\n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy==\"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name, returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        p = p_pattern(s)\n+        return p\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result\n+    return p_class_pattern(s)\n+\n+def p_literal_pattern(s):\n+    # a lot of duplication in this function with \"p_atom\"\n+    next_must_be_a_number = False\n+    sign = ''\n+    if s.sy == '-':\n+        sign = s.sy\n+        sign_pos = s.position()\n+        s.next()\n+        next_must_be_a_number = True\n+\n+    sy = s.sy\n+    pos = s.position()\n+\n+    res = None\n+    if sy == 'INT':\n+        res = p_int_literal(s)\n+    elif sy == 'FLOAT':\n+        value = s.systring\n+        s.next()\n+        res = ExprNodes.FloatNode(pos, value = value)\n+    if res and sign == \"-\":\n+        res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+    if res and s.sy in ['+', '-']:\n+        sign = s.sy\n+        s.next()\n+        if s.sy != 'IMAG':\n+            s.error(\"Expected imaginary number\")\n+        else:\n+            add_pos = s.position()\n+            value = s.systring[:-1]\n+            s.next()\n+            res = ExprNodes.binop_node(\n+                add_pos,\n+                sign,\n+                operand1 = res,\n+                operand2 = ExprNodes.ImagNode(s.position(), value = value)\n+            )\n+\n+    if not res and sy == 'IMAG':\n+        value = s.systring[:-1]\n+        s.next()\n+        res = ExprNodes.ImagNode(pos, value = sign+value)\n+        if sign == \"-\":\n+            res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+\n+    if res:\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value = res)\n+\n+    if sy == 'BEGIN_STRING':\n+        if next_must_be_a_number:\n+            s.error(\"Expected a number\")\n+        kind, bytes_value, unicode_value = p_cat_string_literal(s)\n+        if kind == 'c':\n+            res = ExprNodes.CharNode(pos, value = bytes_value)\n+        elif kind == 'u':\n+            res = ExprNodes.UnicodeNode(pos, value = unicode_value, bytes_value = bytes_value)\n+        elif kind == 'b':\n+            res = ExprNodes.BytesNode(pos, value = bytes_value)\n+        elif kind == 'f':\n+            res = Nodes.ErrorNode(pos, what = \"f-strings are not accepted for pattern matching\")\n+        elif kind == '':\n+            res = ExprNodes.StringNode(pos, value = bytes_value, unicode_value = unicode_value)\n+        else:\n+            s.error(\"invalid string kind '%s'\" % kind)\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value = res)\n+    elif sy == 'IDENT':\n+        name = s.systring\n+        result = None\n+        if name == \"None\":\n+            result = ExprNodes.NoneNode(pos)\n+        elif name == \"True\":\n+            result = ExprNodes.BoolNode(pos, value=True)\n+        elif name == \"False\":\n+            result = ExprNodes.BoolNode(pos, value=False)\n+        elif name == \"NULL\" and not s.in_python_file:\n+            # Included Null as an exactly matched constant here\n+            result = ExprNodes.NullNode(pos)\n+        if result:\n+            s.next()\n+            return MatchCaseNodes.MatchValuePatternNode(pos, value = result, is_is_check = True)\n+\n+    s.error(\"Failed to match literal\")\n+\n+def p_capture_pattern(s):\n+    return MatchCaseNodes.MatchAndAssignPatternNode(\n+        s.position(),\n+        target = p_pattern_capture_target(s)\n+    )\n+\n+def p_value_pattern(s):\n+    if s.sy != \"IDENT\":\n+        s.error(\"Expected identifier\")\n+    pos = s.position()\n+    res = p_name(s, s.systring)\n+    s.next()\n+    if s.sy != '.':\n+        s.error(\"Expected '.'\")\n+    while s.sy == '.':\n+        attr_pos = s.position()\n+        s.next()\n+        attr = p_ident(s)\n+        res = ExprNodes.AttributeNode(attr_pos, obj = res, attribute=attr)\n+    if s.sy in ['(', '=']:\n+        s.error(\"Unexpected symbol '%s'\" % s.sy)\n+    return MatchCaseNodes.MatchValuePatternNode(pos, value = res)\n+\n+def p_group_pattern(s):\n+    s.expect(\"(\")\n+    pattern = p_pattern(s)\n+    s.expect(\")\")\n+    return pattern\n+\n+def p_sequence_pattern(s):\n+    opener = s.sy\n+    pos = s.position()\n+    if opener in ['[', '(']:\n+        closer = ']' if opener == '[' else ')'\n+        s.next()\n+        # maybe_sequence_pattern and open_sequence_pattern\n+        patterns = []\n+        if s.sy == closer:\n+            s.next()\n+        else:\n+            while True:\n+                patterns.append(p_maybe_star_pattern(s))\n+                if s.sy == \",\":\n+                    s.next()\n+                    if s.sy == closer:\n+                        break\n+                else:\n+                    if opener == ')' and len(patterns)==1:\n+                        s.error(\"tuple-like pattern of length 1 must finish with ','\")\n+                    break\n+            s.expect(closer)\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns=patterns)\n+    else:\n+        s.error(\"Expected '[' or '('\")\n+\n+def p_mapping_pattern(s):\n+    pos = s.position()\n+    s.expect('{')\n+    if s.sy == '}':\n+        s.next()\n+        return MatchCaseNodes.MatchMappingPatternNode(pos)\n+    double_star_capture_target = None\n+    items_patterns = []\n+    double_star_set_twice = None\n+    while True:\n+        if s.sy == '**':\n+            if double_star_capture_target:\n+                double_star_set_twice = s.position()\n+            s.next()\n+            double_star_capture_target = p_pattern_capture_target(s)\n+        else:\n+            # key=(literal_expr | attr)\n+            with tentatively_scan(s) as errors:\n+                pattern = p_literal_pattern(s)\n+                key = pattern.value\n+            if errors:\n+                pattern = p_value_pattern(s)\n+                key = pattern.value\n+            s.expect(':')\n+            value = p_pattern(s)\n+            items_patterns.append((key, value))\n+        if s.sy==',':\n+            s.next()\n+        else:\n+            break\n+        if s.sy=='}':\n+            break\n+    if s.sy != '}':\n+        s.error(\"Expected '}'\")\n+    s.next()",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922801303",
            "id": 922801303,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43ANSX",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 4322,
            "original_position": 385,
            "original_start_line": 4320,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1041097699,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922801303/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-07-17T09:37:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922801303",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922801731"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922801731"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n# In a separate file because they're unlikely to be useful for much else.\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T09:17:07Z",
            "diff_hunk": "@@ -0,0 +1,257 @@\n+# Nodes for structural pattern matching.\n+#\n+# In a separate file because they're unlikely to be useful\n+# for much else",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922801731",
            "id": 922801731,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43ANZD",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 4,
            "original_position": 4,
            "original_start_line": 3,
            "path": "Cython/Compiler/MatchCaseNodes.py",
            "position": null,
            "pull_request_review_id": 1041097699,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922801731/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-07-17T09:37:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922801731",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922802437"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922802437"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if \"as_targets\" not in kwds:\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T09:22:51Z",
            "diff_hunk": "@@ -0,0 +1,257 @@\n+# Nodes for structural pattern matching.\n+#\n+# In a separate file because they're unlikely to be useful\n+# for much else\n+\n+from .Nodes import Node, StatNode\n+from .Errors import error\n+\n+\n+class MatchNode(StatNode):\n+    \"\"\"\n+    subject  ExprNode    The expression to be matched\n+    cases    [MatchCaseNode]  list of cases\n+    \"\"\"\n+\n+    child_attrs = [\"subject\", \"cases\"]\n+\n+    def validate_irrefutable(self):\n+        found_irrefutable_case = None\n+        for c in self.cases:\n+            if found_irrefutable_case:\n+                error(\n+                    found_irrefutable_case.pos,\n+                    (\n+                        \"%s makes remaining patterns unreachable\"\n+                        % found_irrefutable_case.pattern.irrefutable_message()\n+                    ),\n+                )\n+                break\n+            if c.is_irrefutable():\n+                found_irrefutable_case = c\n+            c.validate_irrefutable()\n+\n+    def analyse_expressions(self, env):\n+        error(self.pos, \"Structural pattern match is not yet implemented\")\n+        return self\n+\n+\n+class MatchCaseNode(Node):\n+    \"\"\"\n+    pattern    PatternNode\n+    body       StatListNode\n+    guard      ExprNode or None\n+    \"\"\"\n+\n+    child_attrs = [\"pattern\", \"body\", \"guard\"]\n+\n+    def is_irrefutable(self):\n+        return self.pattern.is_irrefutable() and not self.guard\n+\n+    def validate_targets(self):\n+        self.pattern.get_targets()\n+\n+    def validate_irrefutable(self):\n+        self.pattern.validate_irrefutable()\n+\n+\n+class PatternNode(Node):\n+    \"\"\"\n+    DW decided that PatternNode shouldn't be an expression because\n+    it does several things (evalutating a boolean expression,\n+    assignment of targets), and they need to be done at different\n+    times.\n+\n+    as_targets   [NameNode]    any target assign by \"as\"\n+    \"\"\"\n+\n+    child_attrs = [\"as_targets\"]\n+\n+    def __init__(self, pos, **kwds):\n+        super(PatternNode, self).__init__(pos, **kwds)\n+        if not hasattr(self, \"as_targets\"):",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922802437",
            "id": 922802437,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43ANkF",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 72,
            "original_position": 72,
            "original_start_line": null,
            "path": "Cython/Compiler/MatchCaseNodes.py",
            "position": null,
            "pull_request_review_id": 1041097699,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922802437/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-07-17T09:37:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922802437",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922802807"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922802807"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T09:26:08Z",
            "diff_hunk": "@@ -3967,6 +3974,429 @@ def p_cpp_class_attribute(s, ctx):\n             node.decorators = decorators\n         return node\n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy==\"IDENT\" and s.systring == \"case\"):",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922802807",
            "id": 922802807,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43ANp3",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 4009,
            "original_position": 72,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1041097699,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922802807/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-07-17T09:37:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922802807",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922803098"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922803098"
                }
            },
            "author_association": "MEMBER",
            "body": "Looks funny to have two different variables for the same thing, one properly named, one abbreviated.\r\n```suggestion\r\n        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\r\n            s.position(), target = target, is_star = True\r\n        )\r\n        return pattern\r\n    else:\r\n        pattern = p_pattern(s)\r\n        return pattern\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T09:28:28Z",
            "diff_hunk": "@@ -3967,6 +3974,429 @@ def p_cpp_class_attribute(s, ctx):\n             node.decorators = decorators\n         return node\n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy==\"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name, returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        p = p_pattern(s)\n+        return p",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922803098",
            "id": 922803098,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43ANua",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 4066,
            "original_position": 129,
            "original_start_line": 4060,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1041097699,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922803098/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-07-17T09:37:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922803098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922803396"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922803396"
                }
            },
            "author_association": "MEMBER",
            "body": "Worth testing then.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T09:31:18Z",
            "diff_hunk": "@@ -3967,6 +3974,429 @@ def p_cpp_class_attribute(s, ctx):\n             node.decorators = decorators\n         return node\n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy==\"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name, returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        p = p_pattern(s)\n+        return p\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result\n+    return p_class_pattern(s)\n+\n+def p_literal_pattern(s):\n+    # a lot of duplication in this function with \"p_atom\"\n+    next_must_be_a_number = False\n+    sign = ''\n+    if s.sy == '-':\n+        sign = s.sy\n+        sign_pos = s.position()\n+        s.next()\n+        next_must_be_a_number = True\n+\n+    sy = s.sy\n+    pos = s.position()\n+\n+    res = None\n+    if sy == 'INT':\n+        res = p_int_literal(s)\n+    elif sy == 'FLOAT':\n+        value = s.systring\n+        s.next()\n+        res = ExprNodes.FloatNode(pos, value = value)\n+    if res and sign == \"-\":\n+        res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+    if res and s.sy in ['+', '-']:\n+        sign = s.sy\n+        s.next()\n+        if s.sy != 'IMAG':\n+            s.error(\"Expected imaginary number\")\n+        else:\n+            add_pos = s.position()\n+            value = s.systring[:-1]\n+            s.next()\n+            res = ExprNodes.binop_node(\n+                add_pos,\n+                sign,\n+                operand1 = res,\n+                operand2 = ExprNodes.ImagNode(s.position(), value = value)\n+            )\n+\n+    if not res and sy == 'IMAG':\n+        value = s.systring[:-1]\n+        s.next()\n+        res = ExprNodes.ImagNode(pos, value = sign+value)\n+        if sign == \"-\":\n+            res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+\n+    if res:\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value = res)\n+\n+    if sy == 'BEGIN_STRING':\n+        if next_must_be_a_number:\n+            s.error(\"Expected a number\")\n+        kind, bytes_value, unicode_value = p_cat_string_literal(s)\n+        if kind == 'c':\n+            res = ExprNodes.CharNode(pos, value = bytes_value)\n+        elif kind == 'u':\n+            res = ExprNodes.UnicodeNode(pos, value = unicode_value, bytes_value = bytes_value)\n+        elif kind == 'b':\n+            res = ExprNodes.BytesNode(pos, value = bytes_value)\n+        elif kind == 'f':\n+            res = Nodes.ErrorNode(pos, what = \"f-strings are not accepted for pattern matching\")\n+        elif kind == '':\n+            res = ExprNodes.StringNode(pos, value = bytes_value, unicode_value = unicode_value)\n+        else:\n+            s.error(\"invalid string kind '%s'\" % kind)\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value = res)\n+    elif sy == 'IDENT':\n+        name = s.systring\n+        result = None\n+        if name == \"None\":\n+            result = ExprNodes.NoneNode(pos)\n+        elif name == \"True\":\n+            result = ExprNodes.BoolNode(pos, value=True)\n+        elif name == \"False\":\n+            result = ExprNodes.BoolNode(pos, value=False)\n+        elif name == \"NULL\" and not s.in_python_file:\n+            # Included Null as an exactly matched constant here\n+            result = ExprNodes.NullNode(pos)",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922803396",
            "id": 922803396,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43ANzE",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 4226,
            "original_position": 289,
            "original_start_line": 4224,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1041097699,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922803396/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-07-17T09:37:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922803396",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922803973"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922803973"
                }
            },
            "author_association": "MEMBER",
            "body": "The tests only seem to look for syntax errors, so it's probably enough to use a `TreeFragment` here.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T09:36:28Z",
            "diff_hunk": "@@ -0,0 +1,3415 @@\n+### COPIED FROM CPython 3.9\n+### Original part after ############\n+# cython: language_level=3\n+\n+# new code\n+import cython\n+from Cython.Compiler.Main import compile as cython_compile, CompileError\n+from Cython.Build.Inline import cython_inline\n+import contextlib\n+from tempfile import NamedTemporaryFile\n+\n+@contextlib.contextmanager\n+def hidden_stderr():\n+    try:\n+        from StringIO import StringIO\n+    except ImportError:\n+        from io import StringIO\n+\n+    old_stderr = sys.stderr\n+    try:\n+        sys.stderr = StringIO()\n+        yield\n+    finally:\n+        sys.stderr = old_stderr\n+\n+def _compile(code):\n+    with NamedTemporaryFile(suffix='.py') as f:\n+        f.write(code.encode('utf8'))\n+        f.flush()\n+\n+        with hidden_stderr():\n+            result = cython_compile(f.name, language_level=3)\n+    return result",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922803973",
            "id": 922803973,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43AN8F",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 33,
            "original_position": 33,
            "original_start_line": 26,
            "path": "tests/run/test_patma.py",
            "position": null,
            "pull_request_review_id": 1041097699,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922803973/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-07-17T09:37:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922803973",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922804934"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922804934"
                }
            },
            "author_association": "MEMBER",
            "body": "I agree but I don't think it'd work. The decorator would remove them at runtime, but `return` drops them before `AnalyseExpressions` (where they just raise the error \"Structural pattern match is not yet implemented\")",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T09:44:41Z",
            "diff_hunk": "@@ -0,0 +1,3415 @@\n+### COPIED FROM CPython 3.9\n+### Original part after ############\n+# cython: language_level=3\n+\n+# new code\n+import cython\n+from Cython.Compiler.Main import compile as cython_compile, CompileError\n+from Cython.Build.Inline import cython_inline\n+import contextlib\n+from tempfile import NamedTemporaryFile\n+\n+@contextlib.contextmanager\n+def hidden_stderr():\n+    try:\n+        from StringIO import StringIO\n+    except ImportError:\n+        from io import StringIO\n+\n+    old_stderr = sys.stderr\n+    try:\n+        sys.stderr = StringIO()\n+        yield\n+    finally:\n+        sys.stderr = old_stderr\n+\n+def _compile(code):\n+    with NamedTemporaryFile(suffix='.py') as f:\n+        f.write(code.encode('utf8'))\n+        f.flush()\n+\n+        with hidden_stderr():\n+            result = cython_compile(f.name, language_level=3)\n+    return result\n+\n+if cython.compiled:\n+    def compile(code, name, what):\n+        assert what == 'exec'\n+        result = _compile(code)\n+        if not result.c_file:\n+            raise SyntaxError('unexpected EOF')  # compile is only used for testing errors\n+\n+############## SLIGHTLY MODIFIED ORIGINAL CODE\n+import array\n+import collections\n+import enum\n+import inspect\n+import sys\n+import unittest\n+\n+if sys.version_info > (3, 10):\n+    import dataclasses\n+    @dataclasses.dataclass\n+    class Point:\n+        x: int\n+        y: int\n+else:\n+    # predates dataclasses with match args\n+    class Point:\n+        __match_args__ = (\"x\", \"y\")\n+        x: int\n+        y: int\n+\n+# TestCompiler removed - it's very CPython-specific\n+# TestTracing also removed - doesn't seem like a core test\n+\n+# FIXME - return all the \"return\"s added to cause code to be dropped\n+############## ORIGINAL PART FROM CPYTHON\n+\n+\n+class TestInheritance(unittest.TestCase):\n+\n+    @staticmethod\n+    def check_sequence_then_mapping(x):\n+        return",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922804934",
            "id": 922804934,
            "in_reply_to_id": 922801087,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43AOLG",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 74,
            "original_position": 74,
            "original_start_line": null,
            "path": "tests/run/test_patma.py",
            "position": null,
            "pull_request_review_id": 1041102152,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922804934/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-07-17T09:44:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922804934",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922807914"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922807914"
                }
            },
            "author_association": "MEMBER",
            "body": "I'll update it in the next update although the difference is very small. The comment was clearly wrong since it's a CPython 3.10 feature anyway.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T10:10:03Z",
            "diff_hunk": "@@ -0,0 +1,3415 @@\n+### COPIED FROM CPython 3.9",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922807914",
            "id": 922807914,
            "in_reply_to_id": 922800481,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43AO5q",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "tests/run/test_patma.py",
            "position": null,
            "pull_request_review_id": 1041104791,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922807914/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-07-17T10:10:03Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922807914",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922811601"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922811601"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Perhaps do `return #  disabled` so it's easy to search for.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T10:40:45Z",
            "diff_hunk": "@@ -0,0 +1,3415 @@\n+### COPIED FROM CPython 3.9\n+### Original part after ############\n+# cython: language_level=3\n+\n+# new code\n+import cython\n+from Cython.Compiler.Main import compile as cython_compile, CompileError\n+from Cython.Build.Inline import cython_inline\n+import contextlib\n+from tempfile import NamedTemporaryFile\n+\n+@contextlib.contextmanager\n+def hidden_stderr():\n+    try:\n+        from StringIO import StringIO\n+    except ImportError:\n+        from io import StringIO\n+\n+    old_stderr = sys.stderr\n+    try:\n+        sys.stderr = StringIO()\n+        yield\n+    finally:\n+        sys.stderr = old_stderr\n+\n+def _compile(code):\n+    with NamedTemporaryFile(suffix='.py') as f:\n+        f.write(code.encode('utf8'))\n+        f.flush()\n+\n+        with hidden_stderr():\n+            result = cython_compile(f.name, language_level=3)\n+    return result\n+\n+if cython.compiled:\n+    def compile(code, name, what):\n+        assert what == 'exec'\n+        result = _compile(code)\n+        if not result.c_file:\n+            raise SyntaxError('unexpected EOF')  # compile is only used for testing errors\n+\n+############## SLIGHTLY MODIFIED ORIGINAL CODE\n+import array\n+import collections\n+import enum\n+import inspect\n+import sys\n+import unittest\n+\n+if sys.version_info > (3, 10):\n+    import dataclasses\n+    @dataclasses.dataclass\n+    class Point:\n+        x: int\n+        y: int\n+else:\n+    # predates dataclasses with match args\n+    class Point:\n+        __match_args__ = (\"x\", \"y\")\n+        x: int\n+        y: int\n+\n+# TestCompiler removed - it's very CPython-specific\n+# TestTracing also removed - doesn't seem like a core test\n+\n+# FIXME - return all the \"return\"s added to cause code to be dropped\n+############## ORIGINAL PART FROM CPYTHON\n+\n+\n+class TestInheritance(unittest.TestCase):\n+\n+    @staticmethod\n+    def check_sequence_then_mapping(x):\n+        return",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922811601",
            "id": 922811601,
            "in_reply_to_id": 922801087,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43APzR",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 74,
            "original_position": 74,
            "original_start_line": null,
            "path": "tests/run/test_patma.py",
            "position": null,
            "pull_request_review_id": 1041108025,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922811601/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-07-17T10:40:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922811601",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922811884"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922811884"
                }
            },
            "author_association": "MEMBER",
            "body": "@TeamSpen210 good suggestion - I'll do that",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T10:43:10Z",
            "diff_hunk": "@@ -0,0 +1,3415 @@\n+### COPIED FROM CPython 3.9\n+### Original part after ############\n+# cython: language_level=3\n+\n+# new code\n+import cython\n+from Cython.Compiler.Main import compile as cython_compile, CompileError\n+from Cython.Build.Inline import cython_inline\n+import contextlib\n+from tempfile import NamedTemporaryFile\n+\n+@contextlib.contextmanager\n+def hidden_stderr():\n+    try:\n+        from StringIO import StringIO\n+    except ImportError:\n+        from io import StringIO\n+\n+    old_stderr = sys.stderr\n+    try:\n+        sys.stderr = StringIO()\n+        yield\n+    finally:\n+        sys.stderr = old_stderr\n+\n+def _compile(code):\n+    with NamedTemporaryFile(suffix='.py') as f:\n+        f.write(code.encode('utf8'))\n+        f.flush()\n+\n+        with hidden_stderr():\n+            result = cython_compile(f.name, language_level=3)\n+    return result\n+\n+if cython.compiled:\n+    def compile(code, name, what):\n+        assert what == 'exec'\n+        result = _compile(code)\n+        if not result.c_file:\n+            raise SyntaxError('unexpected EOF')  # compile is only used for testing errors\n+\n+############## SLIGHTLY MODIFIED ORIGINAL CODE\n+import array\n+import collections\n+import enum\n+import inspect\n+import sys\n+import unittest\n+\n+if sys.version_info > (3, 10):\n+    import dataclasses\n+    @dataclasses.dataclass\n+    class Point:\n+        x: int\n+        y: int\n+else:\n+    # predates dataclasses with match args\n+    class Point:\n+        __match_args__ = (\"x\", \"y\")\n+        x: int\n+        y: int\n+\n+# TestCompiler removed - it's very CPython-specific\n+# TestTracing also removed - doesn't seem like a core test\n+\n+# FIXME - return all the \"return\"s added to cause code to be dropped\n+############## ORIGINAL PART FROM CPYTHON\n+\n+\n+class TestInheritance(unittest.TestCase):\n+\n+    @staticmethod\n+    def check_sequence_then_mapping(x):\n+        return",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922811884",
            "id": 922811884,
            "in_reply_to_id": 922801087,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43AP3s",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 74,
            "original_position": 74,
            "original_start_line": null,
            "path": "tests/run/test_patma.py",
            "position": null,
            "pull_request_review_id": 1041108285,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922811884/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-07-17T10:43:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922811884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922876220"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922876220"
                }
            },
            "author_association": "MEMBER",
            "body": "Done.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T18:01:00Z",
            "diff_hunk": "@@ -3967,6 +3974,429 @@ def p_cpp_class_attribute(s, ctx):\n             node.decorators = decorators\n         return node\n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy==\"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name, returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        p = p_pattern(s)\n+        return p\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result\n+    return p_class_pattern(s)\n+\n+def p_literal_pattern(s):\n+    # a lot of duplication in this function with \"p_atom\"\n+    next_must_be_a_number = False\n+    sign = ''\n+    if s.sy == '-':\n+        sign = s.sy\n+        sign_pos = s.position()\n+        s.next()\n+        next_must_be_a_number = True\n+\n+    sy = s.sy\n+    pos = s.position()\n+\n+    res = None\n+    if sy == 'INT':\n+        res = p_int_literal(s)\n+    elif sy == 'FLOAT':\n+        value = s.systring\n+        s.next()\n+        res = ExprNodes.FloatNode(pos, value = value)\n+    if res and sign == \"-\":\n+        res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+    if res and s.sy in ['+', '-']:\n+        sign = s.sy\n+        s.next()\n+        if s.sy != 'IMAG':\n+            s.error(\"Expected imaginary number\")\n+        else:\n+            add_pos = s.position()\n+            value = s.systring[:-1]\n+            s.next()\n+            res = ExprNodes.binop_node(\n+                add_pos,\n+                sign,\n+                operand1 = res,\n+                operand2 = ExprNodes.ImagNode(s.position(), value = value)\n+            )\n+\n+    if not res and sy == 'IMAG':\n+        value = s.systring[:-1]\n+        s.next()\n+        res = ExprNodes.ImagNode(pos, value = sign+value)\n+        if sign == \"-\":\n+            res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+\n+    if res:\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value = res)\n+\n+    if sy == 'BEGIN_STRING':\n+        if next_must_be_a_number:\n+            s.error(\"Expected a number\")\n+        kind, bytes_value, unicode_value = p_cat_string_literal(s)\n+        if kind == 'c':\n+            res = ExprNodes.CharNode(pos, value = bytes_value)\n+        elif kind == 'u':\n+            res = ExprNodes.UnicodeNode(pos, value = unicode_value, bytes_value = bytes_value)\n+        elif kind == 'b':\n+            res = ExprNodes.BytesNode(pos, value = bytes_value)\n+        elif kind == 'f':\n+            res = Nodes.ErrorNode(pos, what = \"f-strings are not accepted for pattern matching\")\n+        elif kind == '':\n+            res = ExprNodes.StringNode(pos, value = bytes_value, unicode_value = unicode_value)\n+        else:\n+            s.error(\"invalid string kind '%s'\" % kind)\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value = res)\n+    elif sy == 'IDENT':\n+        name = s.systring\n+        result = None\n+        if name == \"None\":\n+            result = ExprNodes.NoneNode(pos)\n+        elif name == \"True\":\n+            result = ExprNodes.BoolNode(pos, value=True)\n+        elif name == \"False\":\n+            result = ExprNodes.BoolNode(pos, value=False)\n+        elif name == \"NULL\" and not s.in_python_file:\n+            # Included Null as an exactly matched constant here\n+            result = ExprNodes.NullNode(pos)",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922876220",
            "id": 922876220,
            "in_reply_to_id": 922803396,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43Afk8",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 4226,
            "original_position": 289,
            "original_start_line": 4224,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1041167447,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922876220/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-07-17T18:01:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922876220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r922876295"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/922876295"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes that seems to work so it's done now.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-17T18:01:18Z",
            "diff_hunk": "@@ -0,0 +1,3415 @@\n+### COPIED FROM CPython 3.9\n+### Original part after ############\n+# cython: language_level=3\n+\n+# new code\n+import cython\n+from Cython.Compiler.Main import compile as cython_compile, CompileError\n+from Cython.Build.Inline import cython_inline\n+import contextlib\n+from tempfile import NamedTemporaryFile\n+\n+@contextlib.contextmanager\n+def hidden_stderr():\n+    try:\n+        from StringIO import StringIO\n+    except ImportError:\n+        from io import StringIO\n+\n+    old_stderr = sys.stderr\n+    try:\n+        sys.stderr = StringIO()\n+        yield\n+    finally:\n+        sys.stderr = old_stderr\n+\n+def _compile(code):\n+    with NamedTemporaryFile(suffix='.py') as f:\n+        f.write(code.encode('utf8'))\n+        f.flush()\n+\n+        with hidden_stderr():\n+            result = cython_compile(f.name, language_level=3)\n+    return result",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r922876295",
            "id": 922876295,
            "in_reply_to_id": 922803973,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43AfmH",
            "original_commit_id": "fe17d9533d13edf873674a946b9cdf788640428e",
            "original_line": 33,
            "original_position": 33,
            "original_start_line": 26,
            "path": "tests/run/test_patma.py",
            "position": null,
            "pull_request_review_id": 1041167475,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/922876295/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-07-17T18:01:18Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/922876295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934004877"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934004877"
                }
            },
            "author_association": "MEMBER",
            "body": "This even seems worth moving into `TestUtils.py`, under an appropriate name (e.g. `py_parse_code()` or something like that). We need to replace `compile()` in several Python test modules, and something like this should generally suffice here.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-31T15:44:14Z",
            "diff_hunk": "@@ -4,40 +4,34 @@\n \n # new code\n import cython\n-from Cython.Compiler.Main import compile as cython_compile, CompileError\n-from Cython.Build.Inline import cython_inline\n-import contextlib\n-from tempfile import NamedTemporaryFile\n-\n-@contextlib.contextmanager\n-def hidden_stderr():\n-    try:\n-        from StringIO import StringIO\n-    except ImportError:\n-        from io import StringIO\n-\n-    old_stderr = sys.stderr\n-    try:\n-        sys.stderr = StringIO()\n-        yield\n-    finally:\n-        sys.stderr = old_stderr\n+from Cython.Compiler.TreeFragment import TreeFragment, StringParseContext\n+from Cython.Compiler.Errors import local_errors, CompileError\n+from Cython.Compiler.ParseTreeTransforms import PostParse\n \n def _compile(code):\n-    with NamedTemporaryFile(suffix='.py') as f:\n-        f.write(code.encode('utf8'))\n-        f.flush()\n+    context = StringParseContext(\"test\")\n+    # all the errors we care about are in the parsing or postparse stage\n+    try:\n+        with local_errors() as errors:\n+            result = TreeFragment(code, pipeline=[PostParse(context)])\n+            result = result.substitute()\n+        if errors:\n+            raise errors[0]  # compile error, which should get caught\n+        else:\n+            return result\n+    except CompileError as e:\n+        raise SyntaxError(e.message_only)",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934004877",
            "id": 934004877,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43q8iN",
            "original_commit_id": "7183d4896804bb7364e296d9146722a41a0a4d56",
            "original_line": 23,
            "original_position": 41,
            "original_start_line": 11,
            "path": "tests/run/test_patma.py",
            "position": null,
            "pull_request_review_id": 1056583762,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934004877/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-07-31T18:47:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934004877",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934025035"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934025035"
                }
            },
            "author_association": "MEMBER",
            "body": "`double_star_is_not_final` makes me think of the `final` C modifier. And we generally use `star_star` in other places. I suggest naming this variable `star_star_arg_pos`. (And the other variable accordingly.)",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-31T18:46:15Z",
            "diff_hunk": "@@ -4313,11 +4313,11 @@ def p_mapping_pattern(s):\n \n     double_star_capture_target = None\n     items_patterns = []\n-    double_star_set_twice = None\n+    double_star_is_not_final = None\n     while True:\n+        if double_star_capture_target and not double_star_is_not_final:\n+            double_star_is_not_final = s.position()",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934025035",
            "id": 934025035,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43rBdL",
            "original_commit_id": "7183d4896804bb7364e296d9146722a41a0a4d56",
            "original_line": 4319,
            "original_position": 8,
            "original_start_line": 4318,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1056583762,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934025035/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-07-31T18:47:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934025035",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934029618"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934029618"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n      python -m pip install -r test-requirements-pypy27.txt || exit 1\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-31T19:31:39Z",
            "diff_hunk": "@@ -76,6 +76,8 @@ else\n \n     if [[ $PYTHON_VERSION != \"pypy\"* && $PYTHON_VERSION != \"3.\"[1]* ]]; then\n       python -m pip install -r test-requirements-cpython.txt || exit 1\n+    elif [[ $PYTHON_VERSION == \"pypy-2.7\" ]]; then\n+     python -m pip install -r test-requirements-pypy27.txt || exit 1",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934029618",
            "id": 934029618,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43rCky",
            "original_commit_id": "34b72dc6fc511c900d0e27c415550fd625c4d724",
            "original_line": 80,
            "original_position": 5,
            "original_start_line": null,
            "path": "Tools/ci-run.sh",
            "position": null,
            "pull_request_review_id": 1056606966,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934029618/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-07-31T19:31:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934029618",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934033364"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934033364"
                }
            },
            "author_association": "MEMBER",
            "body": "I've moved this. I don't know how useful it'll be (each test file seems to end up with slightly different requirements for `compile` does) but it's now there available to reuse",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-07-31T20:08:48Z",
            "diff_hunk": "@@ -4,40 +4,34 @@\n \n # new code\n import cython\n-from Cython.Compiler.Main import compile as cython_compile, CompileError\n-from Cython.Build.Inline import cython_inline\n-import contextlib\n-from tempfile import NamedTemporaryFile\n-\n-@contextlib.contextmanager\n-def hidden_stderr():\n-    try:\n-        from StringIO import StringIO\n-    except ImportError:\n-        from io import StringIO\n-\n-    old_stderr = sys.stderr\n-    try:\n-        sys.stderr = StringIO()\n-        yield\n-    finally:\n-        sys.stderr = old_stderr\n+from Cython.Compiler.TreeFragment import TreeFragment, StringParseContext\n+from Cython.Compiler.Errors import local_errors, CompileError\n+from Cython.Compiler.ParseTreeTransforms import PostParse\n \n def _compile(code):\n-    with NamedTemporaryFile(suffix='.py') as f:\n-        f.write(code.encode('utf8'))\n-        f.flush()\n+    context = StringParseContext(\"test\")\n+    # all the errors we care about are in the parsing or postparse stage\n+    try:\n+        with local_errors() as errors:\n+            result = TreeFragment(code, pipeline=[PostParse(context)])\n+            result = result.substitute()\n+        if errors:\n+            raise errors[0]  # compile error, which should get caught\n+        else:\n+            return result\n+    except CompileError as e:\n+        raise SyntaxError(e.message_only)",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934033364",
            "id": 934033364,
            "in_reply_to_id": 934004877,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43rDfU",
            "original_commit_id": "7183d4896804bb7364e296d9146722a41a0a4d56",
            "original_line": 23,
            "original_position": 41,
            "original_start_line": 11,
            "path": "tests/run/test_patma.py",
            "position": null,
            "pull_request_review_id": 1056609672,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934033364/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-07-31T20:08:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934033364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934380655"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934380655"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    PatternNode is not an expression because\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T10:31:22Z",
            "diff_hunk": "@@ -0,0 +1,256 @@\n+# Nodes for structural pattern matching.\n+#\n+# In a separate file because they're unlikely to be useful for much else.\n+\n+from .Nodes import Node, StatNode\n+from .Errors import error\n+\n+\n+class MatchNode(StatNode):\n+    \"\"\"\n+    subject  ExprNode    The expression to be matched\n+    cases    [MatchCaseNode]  list of cases\n+    \"\"\"\n+\n+    child_attrs = [\"subject\", \"cases\"]\n+\n+    def validate_irrefutable(self):\n+        found_irrefutable_case = None\n+        for c in self.cases:\n+            if found_irrefutable_case:\n+                error(\n+                    found_irrefutable_case.pos,\n+                    (\n+                        \"%s makes remaining patterns unreachable\"\n+                        % found_irrefutable_case.pattern.irrefutable_message()\n+                    ),\n+                )\n+                break\n+            if c.is_irrefutable():\n+                found_irrefutable_case = c\n+            c.validate_irrefutable()\n+\n+    def analyse_expressions(self, env):\n+        error(self.pos, \"Structural pattern match is not yet implemented\")\n+        return self\n+\n+\n+class MatchCaseNode(Node):\n+    \"\"\"\n+    pattern    PatternNode\n+    body       StatListNode\n+    guard      ExprNode or None\n+    \"\"\"\n+\n+    child_attrs = [\"pattern\", \"body\", \"guard\"]\n+\n+    def is_irrefutable(self):\n+        return self.pattern.is_irrefutable() and not self.guard\n+\n+    def validate_targets(self):\n+        self.pattern.get_targets()\n+\n+    def validate_irrefutable(self):\n+        self.pattern.validate_irrefutable()\n+\n+\n+class PatternNode(Node):\n+    \"\"\"\n+    DW decided that PatternNode shouldn't be an expression because",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934380655",
            "id": 934380655,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43sYRv",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 59,
            "original_position": 59,
            "original_start_line": null,
            "path": "Cython/Compiler/MatchCaseNodes.py",
            "position": null,
            "pull_request_review_id": 1057085076,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934380655/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T11:05:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934380655",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934382697"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934382697"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's not use two different ways to set the same attribute.\r\n```suggestion\r\n    def __init__(self, pos, **kwds):\r\n        if \"as_targets\" not in kwds:\r\n            kwds[\"as_targets\"] = []\r\n        super(PatternNode, self).__init__(pos, **kwds)\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T10:33:54Z",
            "diff_hunk": "@@ -0,0 +1,256 @@\n+# Nodes for structural pattern matching.\n+#\n+# In a separate file because they're unlikely to be useful for much else.\n+\n+from .Nodes import Node, StatNode\n+from .Errors import error\n+\n+\n+class MatchNode(StatNode):\n+    \"\"\"\n+    subject  ExprNode    The expression to be matched\n+    cases    [MatchCaseNode]  list of cases\n+    \"\"\"\n+\n+    child_attrs = [\"subject\", \"cases\"]\n+\n+    def validate_irrefutable(self):\n+        found_irrefutable_case = None\n+        for c in self.cases:\n+            if found_irrefutable_case:\n+                error(\n+                    found_irrefutable_case.pos,\n+                    (\n+                        \"%s makes remaining patterns unreachable\"\n+                        % found_irrefutable_case.pattern.irrefutable_message()\n+                    ),\n+                )\n+                break\n+            if c.is_irrefutable():\n+                found_irrefutable_case = c\n+            c.validate_irrefutable()\n+\n+    def analyse_expressions(self, env):\n+        error(self.pos, \"Structural pattern match is not yet implemented\")\n+        return self\n+\n+\n+class MatchCaseNode(Node):\n+    \"\"\"\n+    pattern    PatternNode\n+    body       StatListNode\n+    guard      ExprNode or None\n+    \"\"\"\n+\n+    child_attrs = [\"pattern\", \"body\", \"guard\"]\n+\n+    def is_irrefutable(self):\n+        return self.pattern.is_irrefutable() and not self.guard\n+\n+    def validate_targets(self):\n+        self.pattern.get_targets()\n+\n+    def validate_irrefutable(self):\n+        self.pattern.validate_irrefutable()\n+\n+\n+class PatternNode(Node):\n+    \"\"\"\n+    DW decided that PatternNode shouldn't be an expression because\n+    it does several things (evalutating a boolean expression,\n+    assignment of targets), and they need to be done at different\n+    times.\n+\n+    as_targets   [NameNode]    any target assign by \"as\"\n+    \"\"\"\n+\n+    child_attrs = [\"as_targets\"]\n+\n+    def __init__(self, pos, **kwds):\n+        super(PatternNode, self).__init__(pos, **kwds)\n+        if \"as_targets\" not in kwds:\n+            self.as_targets = []",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934382697",
            "id": 934382697,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43sYxp",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 72,
            "original_position": 72,
            "original_start_line": 69,
            "path": "Cython/Compiler/MatchCaseNodes.py",
            "position": null,
            "pull_request_review_id": 1057085076,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934382697/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-01T11:05:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934382697",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934385421"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934385421"
                }
            },
            "author_association": "MEMBER",
            "body": "Given the method name, I don't think the intermediate variable adds any information. But the loop variable name does.\r\n```suggestion\r\n        for name in targets.intersection(other_targets):\r\n            error(self.pos, \"multiple assignments to name '%s' in pattern\" % name)\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T10:37:39Z",
            "diff_hunk": "@@ -0,0 +1,256 @@\n+# Nodes for structural pattern matching.\n+#\n+# In a separate file because they're unlikely to be useful for much else.\n+\n+from .Nodes import Node, StatNode\n+from .Errors import error\n+\n+\n+class MatchNode(StatNode):\n+    \"\"\"\n+    subject  ExprNode    The expression to be matched\n+    cases    [MatchCaseNode]  list of cases\n+    \"\"\"\n+\n+    child_attrs = [\"subject\", \"cases\"]\n+\n+    def validate_irrefutable(self):\n+        found_irrefutable_case = None\n+        for c in self.cases:\n+            if found_irrefutable_case:\n+                error(\n+                    found_irrefutable_case.pos,\n+                    (\n+                        \"%s makes remaining patterns unreachable\"\n+                        % found_irrefutable_case.pattern.irrefutable_message()\n+                    ),\n+                )\n+                break\n+            if c.is_irrefutable():\n+                found_irrefutable_case = c\n+            c.validate_irrefutable()\n+\n+    def analyse_expressions(self, env):\n+        error(self.pos, \"Structural pattern match is not yet implemented\")\n+        return self\n+\n+\n+class MatchCaseNode(Node):\n+    \"\"\"\n+    pattern    PatternNode\n+    body       StatListNode\n+    guard      ExprNode or None\n+    \"\"\"\n+\n+    child_attrs = [\"pattern\", \"body\", \"guard\"]\n+\n+    def is_irrefutable(self):\n+        return self.pattern.is_irrefutable() and not self.guard\n+\n+    def validate_targets(self):\n+        self.pattern.get_targets()\n+\n+    def validate_irrefutable(self):\n+        self.pattern.validate_irrefutable()\n+\n+\n+class PatternNode(Node):\n+    \"\"\"\n+    DW decided that PatternNode shouldn't be an expression because\n+    it does several things (evalutating a boolean expression,\n+    assignment of targets), and they need to be done at different\n+    times.\n+\n+    as_targets   [NameNode]    any target assign by \"as\"\n+    \"\"\"\n+\n+    child_attrs = [\"as_targets\"]\n+\n+    def __init__(self, pos, **kwds):\n+        super(PatternNode, self).__init__(pos, **kwds)\n+        if \"as_targets\" not in kwds:\n+            self.as_targets = []\n+\n+    def is_irrefutable(self):\n+        return False\n+\n+    def get_targets(self):\n+        targets = self.get_main_pattern_targets()\n+        for t in self.as_targets:\n+            self.add_target_to_targets(targets, t.name)\n+        return targets\n+\n+    def update_targets_with_targets(self, targets, other_targets):\n+        intersection = targets.intersection(other_targets)\n+        for i in intersection:\n+            error(self.pos, \"multiple assignments to name '%s' in pattern\" % i)",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934385421",
            "id": 934385421,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43sZcN",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 86,
            "original_position": 86,
            "original_start_line": 84,
            "path": "Cython/Compiler/MatchCaseNodes.py",
            "position": null,
            "pull_request_review_id": 1057085076,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934385421/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-01T11:05:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934385421",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934388186"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934388186"
                }
            },
            "author_association": "MEMBER",
            "body": "`None` seems a likely case, so let's avoid the type check in that case.\r\n```suggestion\r\n            if child is not None and isinstance(child, PatternNode):\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T10:41:10Z",
            "diff_hunk": "@@ -0,0 +1,256 @@\n+# Nodes for structural pattern matching.\n+#\n+# In a separate file because they're unlikely to be useful for much else.\n+\n+from .Nodes import Node, StatNode\n+from .Errors import error\n+\n+\n+class MatchNode(StatNode):\n+    \"\"\"\n+    subject  ExprNode    The expression to be matched\n+    cases    [MatchCaseNode]  list of cases\n+    \"\"\"\n+\n+    child_attrs = [\"subject\", \"cases\"]\n+\n+    def validate_irrefutable(self):\n+        found_irrefutable_case = None\n+        for c in self.cases:\n+            if found_irrefutable_case:\n+                error(\n+                    found_irrefutable_case.pos,\n+                    (\n+                        \"%s makes remaining patterns unreachable\"\n+                        % found_irrefutable_case.pattern.irrefutable_message()\n+                    ),\n+                )\n+                break\n+            if c.is_irrefutable():\n+                found_irrefutable_case = c\n+            c.validate_irrefutable()\n+\n+    def analyse_expressions(self, env):\n+        error(self.pos, \"Structural pattern match is not yet implemented\")\n+        return self\n+\n+\n+class MatchCaseNode(Node):\n+    \"\"\"\n+    pattern    PatternNode\n+    body       StatListNode\n+    guard      ExprNode or None\n+    \"\"\"\n+\n+    child_attrs = [\"pattern\", \"body\", \"guard\"]\n+\n+    def is_irrefutable(self):\n+        return self.pattern.is_irrefutable() and not self.guard\n+\n+    def validate_targets(self):\n+        self.pattern.get_targets()\n+\n+    def validate_irrefutable(self):\n+        self.pattern.validate_irrefutable()\n+\n+\n+class PatternNode(Node):\n+    \"\"\"\n+    DW decided that PatternNode shouldn't be an expression because\n+    it does several things (evalutating a boolean expression,\n+    assignment of targets), and they need to be done at different\n+    times.\n+\n+    as_targets   [NameNode]    any target assign by \"as\"\n+    \"\"\"\n+\n+    child_attrs = [\"as_targets\"]\n+\n+    def __init__(self, pos, **kwds):\n+        super(PatternNode, self).__init__(pos, **kwds)\n+        if \"as_targets\" not in kwds:\n+            self.as_targets = []\n+\n+    def is_irrefutable(self):\n+        return False\n+\n+    def get_targets(self):\n+        targets = self.get_main_pattern_targets()\n+        for t in self.as_targets:\n+            self.add_target_to_targets(targets, t.name)\n+        return targets\n+\n+    def update_targets_with_targets(self, targets, other_targets):\n+        intersection = targets.intersection(other_targets)\n+        for i in intersection:\n+            error(self.pos, \"multiple assignments to name '%s' in pattern\" % i)\n+        targets.update(other_targets)\n+\n+    def add_target_to_targets(self, targets, target):\n+        if target in targets:\n+            error(self.pos, \"multiple assignments to name '%s in pattern\" % target)\n+        targets.add(target)\n+\n+    def get_main_pattern_targets(self):\n+        # exclude \"as\" target\n+        raise NotImplementedError\n+\n+    def validate_irrefutable(self):\n+        for attr in self.child_attrs:\n+            child = getattr(self, attr)\n+            if isinstance(child, PatternNode):",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934388186",
            "id": 934388186,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43saHa",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 101,
            "original_position": 101,
            "original_start_line": null,
            "path": "Cython/Compiler/MatchCaseNodes.py",
            "position": null,
            "pull_request_review_id": 1057085076,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934388186/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T11:05:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934388186",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934390381"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934390381"
                }
            },
            "author_association": "MEMBER",
            "body": "To a reader, words are cheap, letters are expensive.\r\n```suggestion\r\n        for target in self.as_targets:\r\n            self.add_target_to_targets(targets, target.name)\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T10:44:02Z",
            "diff_hunk": "@@ -0,0 +1,256 @@\n+# Nodes for structural pattern matching.\n+#\n+# In a separate file because they're unlikely to be useful for much else.\n+\n+from .Nodes import Node, StatNode\n+from .Errors import error\n+\n+\n+class MatchNode(StatNode):\n+    \"\"\"\n+    subject  ExprNode    The expression to be matched\n+    cases    [MatchCaseNode]  list of cases\n+    \"\"\"\n+\n+    child_attrs = [\"subject\", \"cases\"]\n+\n+    def validate_irrefutable(self):\n+        found_irrefutable_case = None\n+        for c in self.cases:\n+            if found_irrefutable_case:\n+                error(\n+                    found_irrefutable_case.pos,\n+                    (\n+                        \"%s makes remaining patterns unreachable\"\n+                        % found_irrefutable_case.pattern.irrefutable_message()\n+                    ),\n+                )\n+                break\n+            if c.is_irrefutable():\n+                found_irrefutable_case = c\n+            c.validate_irrefutable()\n+\n+    def analyse_expressions(self, env):\n+        error(self.pos, \"Structural pattern match is not yet implemented\")\n+        return self\n+\n+\n+class MatchCaseNode(Node):\n+    \"\"\"\n+    pattern    PatternNode\n+    body       StatListNode\n+    guard      ExprNode or None\n+    \"\"\"\n+\n+    child_attrs = [\"pattern\", \"body\", \"guard\"]\n+\n+    def is_irrefutable(self):\n+        return self.pattern.is_irrefutable() and not self.guard\n+\n+    def validate_targets(self):\n+        self.pattern.get_targets()\n+\n+    def validate_irrefutable(self):\n+        self.pattern.validate_irrefutable()\n+\n+\n+class PatternNode(Node):\n+    \"\"\"\n+    DW decided that PatternNode shouldn't be an expression because\n+    it does several things (evalutating a boolean expression,\n+    assignment of targets), and they need to be done at different\n+    times.\n+\n+    as_targets   [NameNode]    any target assign by \"as\"\n+    \"\"\"\n+\n+    child_attrs = [\"as_targets\"]\n+\n+    def __init__(self, pos, **kwds):\n+        super(PatternNode, self).__init__(pos, **kwds)\n+        if \"as_targets\" not in kwds:\n+            self.as_targets = []\n+\n+    def is_irrefutable(self):\n+        return False\n+\n+    def get_targets(self):\n+        targets = self.get_main_pattern_targets()\n+        for t in self.as_targets:\n+            self.add_target_to_targets(targets, t.name)",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934390381",
            "id": 934390381,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43sapt",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 80,
            "original_position": 80,
            "original_start_line": 79,
            "path": "Cython/Compiler/MatchCaseNodes.py",
            "position": null,
            "pull_request_review_id": 1057085076,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934390381/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-01T11:05:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934390381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934400234"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934400234"
                }
            },
            "author_association": "MEMBER",
            "body": "A generic name like this should be renamed on import to provide understandable context.\r\nAlso, global names added here are probably also worth adding to the list of declared static C names above.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T10:57:04Z",
            "diff_hunk": "@@ -19,12 +20,13 @@\n from io import StringIO\n import re\n import sys\n-from unicodedata import lookup as lookup_unicodechar, category as unicode_category\n+from unicodedata import lookup as lookup_unicodechar, category as unicode_category, name",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934400234",
            "id": 934400234,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43sdDq",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 23,
            "original_position": 13,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057085076,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934400234/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T11:05:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934400234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934401046"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934401046"
                }
            },
            "author_association": "MEMBER",
            "body": "This import should go further down (assuming it's really used and not just a left-over).",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T10:58:07Z",
            "diff_hunk": "@@ -4,6 +4,7 @@\n #\n \n from __future__ import absolute_import\n+from ast import Expression",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934401046",
            "id": 934401046,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43sdQW",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 7,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057085076,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934401046/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T11:05:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934401046",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934403348"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934403348"
                }
            },
            "author_association": "MEMBER",
            "body": "This looks fairly expensive. It would be nice if we could avoid some of the repeated scans (although you probably already considered that).",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T11:01:06Z",
            "diff_hunk": "@@ -3968,6 +3975,459 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934403348",
            "id": 934403348,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43sd0U",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 4157,
            "original_position": 219,
            "original_start_line": 4146,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057085076,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934403348/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-01T11:05:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934403348",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934404252"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934404252"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we move the `if not errors` into the `with` block? I think that would make the control flow easier to understand.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T11:02:19Z",
            "diff_hunk": "@@ -3968,6 +3975,459 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934404252",
            "id": 934404252,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43seCc",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 4143,
            "original_position": 205,
            "original_start_line": 4140,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057085076,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934404252/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-01T11:05:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934404252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934405700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934405700"
                }
            },
            "author_association": "MEMBER",
            "body": "Don't we have much of this already?",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T11:04:08Z",
            "diff_hunk": "@@ -3968,6 +3975,459 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result\n+    return p_class_pattern(s)\n+\n+\n+def p_literal_pattern(s):",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934405700",
            "id": 934405700,
            "line": 4244,
            "node_id": "PRRC_kwDOABDGAc43seZE",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 4161,
            "original_position": 223,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": 288,
            "pull_request_review_id": 1057085076,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934405700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T11:05:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934405700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934406378"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934406378"
                }
            },
            "author_association": "MEMBER",
            "body": "`obj = res, attribute=attr` – code style :)",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T11:05:06Z",
            "diff_hunk": "@@ -3968,6 +3975,459 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result\n+    return p_class_pattern(s)\n+\n+\n+def p_literal_pattern(s):\n+    # a lot of duplication in this function with \"p_atom\"\n+    next_must_be_a_number = False\n+    sign = ''\n+    if s.sy == '-':\n+        sign = s.sy\n+        sign_pos = s.position()\n+        s.next()\n+        next_must_be_a_number = True\n+\n+    sy = s.sy\n+    pos = s.position()\n+\n+    res = None\n+    if sy == 'INT':\n+        res = p_int_literal(s)\n+    elif sy == 'FLOAT':\n+        value = s.systring\n+        s.next()\n+        res = ExprNodes.FloatNode(pos, value = value)\n+\n+    if res and sign == \"-\":\n+        res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+\n+    if res and s.sy in ['+', '-']:\n+        sign = s.sy\n+        s.next()\n+        if s.sy != 'IMAG':\n+            s.error(\"Expected imaginary number\")\n+        else:\n+            add_pos = s.position()\n+            value = s.systring[:-1]\n+            s.next()\n+            res = ExprNodes.binop_node(\n+                add_pos,\n+                sign,\n+                operand1 = res,\n+                operand2 = ExprNodes.ImagNode(s.position(), value = value)\n+            )\n+\n+    if not res and sy == 'IMAG':\n+        value = s.systring[:-1]\n+        s.next()\n+        res = ExprNodes.ImagNode(pos, value = sign+value)\n+        if sign == \"-\":\n+            res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+\n+    if res:\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value = res)\n+\n+    if sy == 'BEGIN_STRING':\n+        if next_must_be_a_number:\n+            s.error(\"Expected a number\")\n+        kind, bytes_value, unicode_value = p_cat_string_literal(s)\n+        if kind == 'c':\n+            res = ExprNodes.CharNode(pos, value = bytes_value)\n+        elif kind == 'u':\n+            res = ExprNodes.UnicodeNode(pos, value = unicode_value, bytes_value = bytes_value)\n+        elif kind == 'b':\n+            res = ExprNodes.BytesNode(pos, value = bytes_value)\n+        elif kind == 'f':\n+            res = Nodes.ErrorNode(pos, what = \"f-strings are not accepted for pattern matching\")\n+        elif kind == '':\n+            res = ExprNodes.StringNode(pos, value = bytes_value, unicode_value = unicode_value)\n+        else:\n+            s.error(\"invalid string kind '%s'\" % kind)\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value = res)\n+    elif sy == 'IDENT':\n+        name = s.systring\n+        result = None\n+        if name == \"None\":\n+            result = ExprNodes.NoneNode(pos)\n+        elif name == \"True\":\n+            result = ExprNodes.BoolNode(pos, value=True)\n+        elif name == \"False\":\n+            result = ExprNodes.BoolNode(pos, value=False)\n+        elif name == \"NULL\" and not s.in_python_file:\n+            # Included Null as an exactly matched constant here\n+            result = ExprNodes.NullNode(pos)\n+        if result:\n+            s.next()\n+            return MatchCaseNodes.MatchValuePatternNode(pos, value = result, is_is_check = True)\n+\n+    s.error(\"Failed to match literal\")\n+\n+\n+def p_capture_pattern(s):\n+    return MatchCaseNodes.MatchAndAssignPatternNode(\n+        s.position(),\n+        target = p_pattern_capture_target(s)\n+    )\n+\n+\n+def p_value_pattern(s):\n+    if s.sy != \"IDENT\":\n+        s.error(\"Expected identifier\")\n+    pos = s.position()\n+    res = p_name(s, s.systring)\n+    s.next()\n+    if s.sy != '.':\n+        s.error(\"Expected '.'\")\n+    while s.sy == '.':\n+        attr_pos = s.position()\n+        s.next()\n+        attr = p_ident(s)\n+        res = ExprNodes.AttributeNode(attr_pos, obj = res, attribute=attr)",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934406378",
            "id": 934406378,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43sejq",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 4266,
            "original_position": 328,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057085076,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934406378/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T11:05:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934406378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934522863"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934522863"
                }
            },
            "author_association": "MEMBER",
            "body": "I switched to Visual Studio code fairly recently. I think it took me a few weeks to turn off its feature where it'll helpful add random imports for you based on guesswork. So I think this was never intended to be there and I'll remove it.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T13:22:32Z",
            "diff_hunk": "@@ -4,6 +4,7 @@\n #\n \n from __future__ import absolute_import\n+from ast import Expression",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934522863",
            "id": 934522863,
            "in_reply_to_id": 934401046,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43s6_v",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 7,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057289194,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934522863/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T13:35:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934522863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934530997"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934530997"
                }
            },
            "author_association": "MEMBER",
            "body": "I tried to spot some of the unambiguous stuff and move it to the top of the function, so unfortunately most of the easy ways of avoiding repeated scans have already been done.\r\n\r\nIt's then a trade-off between writing it how it's specified (which I think this this close to) and trying to be clever and find better ways.\r\n\r\nI did time the parsing of the large test_patma file and it didn't seem to bad compared to all the subsequent compiler steps so I decided not to worry too much. Don't have the numbers to hand right now though",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T13:30:24Z",
            "diff_hunk": "@@ -3968,6 +3975,459 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934530997",
            "id": 934530997,
            "in_reply_to_id": 934403348,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43s8-1",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 4157,
            "original_position": 219,
            "original_start_line": 4146,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057289194,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934530997/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-01T13:35:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934530997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934536746"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934536746"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes we do. And I'm not hugely happy about the duplication. The question is: are we prepared to add a `in_pattern_match` flag in `p_atom`.\r\n\r\nThere's some oddities in what's allowed here. For example `-1` is allowed but `+1` isn't. And f-strings are banned while other strings are allowed. Some of that could be moved to post parse checks though.\r\n\r\nI'll have a fresh look and see if it can be improved. At the time I wrote it this seemed like the \"least worst option\"",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T13:35:01Z",
            "diff_hunk": "@@ -3968,6 +3975,459 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result\n+    return p_class_pattern(s)\n+\n+\n+def p_literal_pattern(s):",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934536746",
            "id": 934536746,
            "in_reply_to_id": 934405700,
            "line": 4244,
            "node_id": "PRRC_kwDOABDGAc43s-Yq",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 4161,
            "original_position": 223,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": 288,
            "pull_request_review_id": 1057289194,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934536746/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T13:35:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934536746",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934588366"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934588366"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> add random imports for you based on guesswork\r\n\r\nHm, never happened to me, what extensions do you use?",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T14:21:03Z",
            "diff_hunk": "@@ -4,6 +4,7 @@\n #\n \n from __future__ import absolute_import\n+from ast import Expression",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934588366",
            "id": 934588366,
            "in_reply_to_id": 934401046,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43tK_O",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 7,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057387845,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934588366/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T14:22:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934588366",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52697657?v=4",
                "events_url": "https://api.github.com/users/0dminnimda/events{/privacy}",
                "followers_url": "https://api.github.com/users/0dminnimda/followers",
                "following_url": "https://api.github.com/users/0dminnimda/following{/other_user}",
                "gists_url": "https://api.github.com/users/0dminnimda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/0dminnimda",
                "id": 52697657,
                "login": "0dminnimda",
                "node_id": "MDQ6VXNlcjUyNjk3NjU3",
                "organizations_url": "https://api.github.com/users/0dminnimda/orgs",
                "received_events_url": "https://api.github.com/users/0dminnimda/received_events",
                "repos_url": "https://api.github.com/users/0dminnimda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/0dminnimda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/0dminnimda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/0dminnimda"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934739585"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934739585"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this was another thing where my editor was trying to second-guess me so I've removed this too",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T17:02:29Z",
            "diff_hunk": "@@ -19,12 +20,13 @@\n from io import StringIO\n import re\n import sys\n-from unicodedata import lookup as lookup_unicodechar, category as unicode_category\n+from unicodedata import lookup as lookup_unicodechar, category as unicode_category, name",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934739585",
            "id": 934739585,
            "in_reply_to_id": 934400234,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43tv6B",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 23,
            "original_position": 13,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057604893,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934739585/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T17:02:29Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934739585",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934740384"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934740384"
                }
            },
            "author_association": "MEMBER",
            "body": "@0dminnimda I think it was Pylance \"Python > Analysis: Auto import completions\". I've turned it off now so it hopefully won't be an issue in future.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T17:03:33Z",
            "diff_hunk": "@@ -4,6 +4,7 @@\n #\n \n from __future__ import absolute_import\n+from ast import Expression",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934740384",
            "id": 934740384,
            "in_reply_to_id": 934401046,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43twGg",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 7,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057606021,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934740384/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T17:03:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934740384",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934742155"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934742155"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes - that works and is clearer in this case. It might not be great if there was anything more complicated than a return statement though.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T17:05:57Z",
            "diff_hunk": "@@ -3968,6 +3975,459 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934742155",
            "id": 934742155,
            "in_reply_to_id": 934404252,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43twiL",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 4143,
            "original_position": 205,
            "original_start_line": 4140,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057608622,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934742155/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-01T17:05:57Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934742155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934766467"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934766467"
                }
            },
            "author_association": "MEMBER",
            "body": "I've factored out two of the large duplicated chunks of `p_atom`. I think that's probably an improvement, but it does make changes to other bits of the parser so is more invasive. It's in a separate commit so can be reverted.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T17:39:06Z",
            "diff_hunk": "@@ -3968,6 +3975,459 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result\n+    return p_class_pattern(s)\n+\n+\n+def p_literal_pattern(s):",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934766467",
            "id": 934766467,
            "in_reply_to_id": 934405700,
            "line": 4244,
            "node_id": "PRRC_kwDOABDGAc43t2eD",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 4161,
            "original_position": 223,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": 288,
            "pull_request_review_id": 1057643514,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934766467/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T17:39:06Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934766467",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934770439"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934770439"
                }
            },
            "author_association": "MEMBER",
            "body": "> There's some oddities in what's allowed here. For example `-1` is allowed but `+1` isn't. And f-strings are banned while other strings are allowed. Some of that could be moved to post parse checks though.\r\n\r\nThese checks sound like they shouldn't be done right in the parser. PostParse sounds much better.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T17:44:38Z",
            "diff_hunk": "@@ -3968,6 +3975,459 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result\n+    return p_class_pattern(s)\n+\n+\n+def p_literal_pattern(s):",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934770439",
            "id": 934770439,
            "in_reply_to_id": 934405700,
            "line": 4244,
            "node_id": "PRRC_kwDOABDGAc43t3cH",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 4161,
            "original_position": 223,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": 288,
            "pull_request_review_id": 1057649329,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934770439/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T17:44:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934770439",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934774495"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934774495"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe we could even get rid of the `ErrorNode` then?",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T17:50:04Z",
            "diff_hunk": "@@ -3968,6 +3975,459 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result\n+    return p_class_pattern(s)\n+\n+\n+def p_literal_pattern(s):",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934774495",
            "id": 934774495,
            "in_reply_to_id": 934405700,
            "line": 4244,
            "node_id": "PRRC_kwDOABDGAc43t4bf",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 4161,
            "original_position": 223,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": 288,
            "pull_request_review_id": 1057655057,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934774495/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T17:50:05Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934774495",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934779116"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934779116"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry, PEP 8 actually [wants it](https://peps.python.org/pep-0008/#other-recommendations) the other way round.\r\n```suggestion\r\n        res = ExprNodes.AttributeNode(attr_pos, obj=res, attribute=attr)\r\n```\r\nCython's code base still uses spaces all over the place, for legacy reasons. I'm trying to get rid of those slowly, whenever I modify arguments somewhere.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T17:56:12Z",
            "diff_hunk": "@@ -4263,7 +4259,7 @@ def p_value_pattern(s):\n         attr_pos = s.position()\n         s.next()\n         attr = p_ident(s)\n-        res = ExprNodes.AttributeNode(attr_pos, obj = res, attribute=attr)\n+        res = ExprNodes.AttributeNode(attr_pos, obj = res, attribute = attr)",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934779116",
            "id": 934779116,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43t5js",
            "original_commit_id": "9f35805dc92b820e32d85600dd08ba3aa13ede03",
            "original_line": 4262,
            "original_position": 167,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057661533,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934779116/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T17:56:12Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934779116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934780640"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934780640"
                }
            },
            "author_association": "MEMBER",
            "body": "Fair enough. I copied the rest of the file but that clearly wasn't the right thing to do\r\n\r\nThere's a whole bunch more of these in the new code so I'll go correct them all in a big batch",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T17:58:15Z",
            "diff_hunk": "@@ -4263,7 +4259,7 @@ def p_value_pattern(s):\n         attr_pos = s.position()\n         s.next()\n         attr = p_ident(s)\n-        res = ExprNodes.AttributeNode(attr_pos, obj = res, attribute=attr)\n+        res = ExprNodes.AttributeNode(attr_pos, obj = res, attribute = attr)",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934780640",
            "id": 934780640,
            "in_reply_to_id": 934779116,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43t57g",
            "original_commit_id": "9f35805dc92b820e32d85600dd08ba3aa13ede03",
            "original_line": 4262,
            "original_position": 167,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057663653,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934780640/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T17:58:15Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934780640",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934807125"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934807125"
                }
            },
            "author_association": "MEMBER",
            "body": "> Maybe we could even get rid of the ErrorNode then?\r\n\r\nYeah I've got rid of that and moved the check to post-parse.\r\n\r\n> These checks sound like they shouldn't be done right in the parser. PostParse sounds much better.\r\n\r\nNot completely sure. At least for the `+` and `-` they're part of the grammar. For the f-strings it looks like CPython catches them in a post-parse validation though\r\n",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T18:34:01Z",
            "diff_hunk": "@@ -3968,6 +3975,459 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject = subject, cases = cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos = e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns = patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target = target, is_star = True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives = patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what = errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what = \"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+        if not errors:\n+            return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+    if not errors:\n+        return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+    if not errors:\n+        return result\n+    return p_class_pattern(s)\n+\n+\n+def p_literal_pattern(s):",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934807125",
            "id": 934807125,
            "in_reply_to_id": 934405700,
            "line": 4244,
            "node_id": "PRRC_kwDOABDGAc43uAZV",
            "original_commit_id": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "original_line": 4161,
            "original_position": 223,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": 288,
            "pull_request_review_id": 1057701024,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934807125/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T18:34:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934807125",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934946593"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934946593"
                }
            },
            "author_association": "MEMBER",
            "body": "What about a pattern like `[f\"{x}\"]`? That should probably be rejected as well, right?\r\nI was thinking more of a status flag that we're \"in a match pattern\", which would reject certain nodes.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T21:50:49Z",
            "diff_hunk": "@@ -397,6 +397,19 @@ def visit_MatchNode(self, node):\n         self.visitchildren(node)\n         return node\n \n+    def visit_MatchValuePatternNode(self, node):\n+        if isinstance(node.value, ExprNodes.JoinedStrNode):\n+            error(node.value.pos, \"f-strings are not accepted for pattern matching\")\n+        self.visitchildren(node)\n+        return node",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934946593",
            "id": 934946593,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43uich",
            "original_commit_id": "039a2c244361da1a6a16f28dc6478dd78438d0d5",
            "original_line": 404,
            "original_position": 8,
            "original_start_line": 400,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 1057898252,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934946593/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-01T22:09:09Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934946593",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934950145"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934950145"
                }
            },
            "author_association": "MEMBER",
            "body": "I wonder why you called these `parse_…`. I think they fit ok with the normal parser `p_…` type of functions.\r\n\r\nAlso, yes, we do have the scanner position on the caller side. But that doesn't mean that we need to pass it as an argument. I think it's fine to retrieve it again inside of these functions and then only pass the scanner object.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T21:57:12Z",
            "diff_hunk": "@@ -64,6 +64,8 @@ cdef expect_ellipsis(PyrexScanner s)\n cdef make_slice_nodes(pos, subscripts)\n cpdef make_slice_node(pos, start, stop = *, step = *)\n cdef p_atom(PyrexScanner s)\n+cdef parse_atom_string(pos, PyrexScanner s):\n+cdef parse_atom_ident_constants(pos, PyrexScanner s):",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934950145",
            "id": 934950145,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43ujUB",
            "original_commit_id": "9f35805dc92b820e32d85600dd08ba3aa13ede03",
            "original_line": 68,
            "original_position": 5,
            "original_start_line": 67,
            "path": "Cython/Compiler/Parsing.pxd",
            "position": null,
            "pull_request_review_id": 1057898252,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934950145/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-01T22:09:09Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934950145",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934952638"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934952638"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                    if opener == ')' and len(patterns) == 1:\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T22:02:06Z",
            "diff_hunk": "@@ -3968,6 +3989,440 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject=subject, cases=cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos=e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns=patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target=target, is_star=True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives=patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what=errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what=\"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+            if not errors:\n+                return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+        if not errors:\n+            return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+        if not errors:\n+            return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+        if not errors:\n+            return result\n+    return p_class_pattern(s)\n+\n+\n+def p_literal_pattern(s):\n+    # a lot of duplication in this function with \"p_atom\"\n+    next_must_be_a_number = False\n+    sign = ''\n+    if s.sy == '-':\n+        sign = s.sy\n+        sign_pos = s.position()\n+        s.next()\n+        next_must_be_a_number = True\n+\n+    sy = s.sy\n+    pos = s.position()\n+\n+    res = None\n+    if sy == 'INT':\n+        res = p_int_literal(s)\n+    elif sy == 'FLOAT':\n+        value = s.systring\n+        s.next()\n+        res = ExprNodes.FloatNode(pos, value=value)\n+\n+    if res and sign == \"-\":\n+        res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+\n+    if res and s.sy in ['+', '-']:\n+        sign = s.sy\n+        s.next()\n+        if s.sy != 'IMAG':\n+            s.error(\"Expected imaginary number\")\n+        else:\n+            add_pos = s.position()\n+            value = s.systring[:-1]\n+            s.next()\n+            res = ExprNodes.binop_node(\n+                add_pos,\n+                sign,\n+                operand1=res,\n+                operand2=ExprNodes.ImagNode(s.position(), value=value)\n+            )\n+\n+    if not res and sy == 'IMAG':\n+        value = s.systring[:-1]\n+        s.next()\n+        res = ExprNodes.ImagNode(pos, value=sign+value)\n+        if sign == \"-\":\n+            res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+\n+    if res:\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value=res)\n+\n+    if next_must_be_a_number:\n+        s.error(\"Expected a number\")\n+    if sy == 'BEGIN_STRING':\n+        res = parse_atom_string(pos, s)\n+        # f-strings not being accepted is validated in PostParse\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value=res)\n+    elif sy == 'IDENT':\n+        # Note that p_atom_ident_constants includes NULL.\n+        # This is a deliberate Cython addition to the pattern matching specification\n+        result = parse_atom_ident_constants(pos, s)\n+        if result:\n+            s.next()\n+            return MatchCaseNodes.MatchValuePatternNode(pos, value=result, is_is_check=True)\n+\n+    s.error(\"Failed to match literal\")\n+\n+\n+def p_capture_pattern(s):\n+    return MatchCaseNodes.MatchAndAssignPatternNode(\n+        s.position(),\n+        target=p_pattern_capture_target(s)\n+    )\n+\n+\n+def p_value_pattern(s):\n+    if s.sy != \"IDENT\":\n+        s.error(\"Expected identifier\")\n+    pos = s.position()\n+    res = p_name(s, s.systring)\n+    s.next()\n+    if s.sy != '.':\n+        s.error(\"Expected '.'\")\n+    while s.sy == '.':\n+        attr_pos = s.position()\n+        s.next()\n+        attr = p_ident(s)\n+        res = ExprNodes.AttributeNode(attr_pos, obj=res, attribute=attr)\n+    if s.sy in ['(', '=']:\n+        s.error(\"Unexpected symbol '%s'\" % s.sy)\n+    return MatchCaseNodes.MatchValuePatternNode(pos, value=res)\n+\n+\n+def p_group_pattern(s):\n+    s.expect(\"(\")\n+    pattern = p_pattern(s)\n+    s.expect(\")\")\n+    return pattern\n+\n+\n+def p_sequence_pattern(s):\n+    opener = s.sy\n+    pos = s.position()\n+    if opener in ['[', '(']:\n+        closer = ']' if opener == '[' else ')'\n+        s.next()\n+        # maybe_sequence_pattern and open_sequence_pattern\n+        patterns = []\n+        if s.sy == closer:\n+            s.next()\n+        else:\n+            while True:\n+                patterns.append(p_maybe_star_pattern(s))\n+                if s.sy == \",\":\n+                    s.next()\n+                    if s.sy == closer:\n+                        break\n+                else:\n+                    if opener == ')' and len(patterns)==1:",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934952638",
            "id": 934952638,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43uj6-",
            "original_commit_id": "039a2c244361da1a6a16f28dc6478dd78438d0d5",
            "original_line": 4292,
            "original_position": 404,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057898252,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934952638/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-01T22:09:09Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934952638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934954276"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934954276"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this spelling is simpler.\r\n```suggestion\r\n        if s.sy != ',':\r\n            break\r\n        s.next()\r\n        if s.sy == '}':\r\n            break  # Allow trailing comma.\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T22:05:23Z",
            "diff_hunk": "@@ -3968,6 +3989,440 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject=subject, cases=cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos=e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns=patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target=target, is_star=True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives=patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what=errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what=\"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+            if not errors:\n+                return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+        if not errors:\n+            return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+        if not errors:\n+            return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+        if not errors:\n+            return result\n+    return p_class_pattern(s)\n+\n+\n+def p_literal_pattern(s):\n+    # a lot of duplication in this function with \"p_atom\"\n+    next_must_be_a_number = False\n+    sign = ''\n+    if s.sy == '-':\n+        sign = s.sy\n+        sign_pos = s.position()\n+        s.next()\n+        next_must_be_a_number = True\n+\n+    sy = s.sy\n+    pos = s.position()\n+\n+    res = None\n+    if sy == 'INT':\n+        res = p_int_literal(s)\n+    elif sy == 'FLOAT':\n+        value = s.systring\n+        s.next()\n+        res = ExprNodes.FloatNode(pos, value=value)\n+\n+    if res and sign == \"-\":\n+        res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+\n+    if res and s.sy in ['+', '-']:\n+        sign = s.sy\n+        s.next()\n+        if s.sy != 'IMAG':\n+            s.error(\"Expected imaginary number\")\n+        else:\n+            add_pos = s.position()\n+            value = s.systring[:-1]\n+            s.next()\n+            res = ExprNodes.binop_node(\n+                add_pos,\n+                sign,\n+                operand1=res,\n+                operand2=ExprNodes.ImagNode(s.position(), value=value)\n+            )\n+\n+    if not res and sy == 'IMAG':\n+        value = s.systring[:-1]\n+        s.next()\n+        res = ExprNodes.ImagNode(pos, value=sign+value)\n+        if sign == \"-\":\n+            res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+\n+    if res:\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value=res)\n+\n+    if next_must_be_a_number:\n+        s.error(\"Expected a number\")\n+    if sy == 'BEGIN_STRING':\n+        res = parse_atom_string(pos, s)\n+        # f-strings not being accepted is validated in PostParse\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value=res)\n+    elif sy == 'IDENT':\n+        # Note that p_atom_ident_constants includes NULL.\n+        # This is a deliberate Cython addition to the pattern matching specification\n+        result = parse_atom_ident_constants(pos, s)\n+        if result:\n+            s.next()\n+            return MatchCaseNodes.MatchValuePatternNode(pos, value=result, is_is_check=True)\n+\n+    s.error(\"Failed to match literal\")\n+\n+\n+def p_capture_pattern(s):\n+    return MatchCaseNodes.MatchAndAssignPatternNode(\n+        s.position(),\n+        target=p_pattern_capture_target(s)\n+    )\n+\n+\n+def p_value_pattern(s):\n+    if s.sy != \"IDENT\":\n+        s.error(\"Expected identifier\")\n+    pos = s.position()\n+    res = p_name(s, s.systring)\n+    s.next()\n+    if s.sy != '.':\n+        s.error(\"Expected '.'\")\n+    while s.sy == '.':\n+        attr_pos = s.position()\n+        s.next()\n+        attr = p_ident(s)\n+        res = ExprNodes.AttributeNode(attr_pos, obj=res, attribute=attr)\n+    if s.sy in ['(', '=']:\n+        s.error(\"Unexpected symbol '%s'\" % s.sy)\n+    return MatchCaseNodes.MatchValuePatternNode(pos, value=res)\n+\n+\n+def p_group_pattern(s):\n+    s.expect(\"(\")\n+    pattern = p_pattern(s)\n+    s.expect(\")\")\n+    return pattern\n+\n+\n+def p_sequence_pattern(s):\n+    opener = s.sy\n+    pos = s.position()\n+    if opener in ['[', '(']:\n+        closer = ']' if opener == '[' else ')'\n+        s.next()\n+        # maybe_sequence_pattern and open_sequence_pattern\n+        patterns = []\n+        if s.sy == closer:\n+            s.next()\n+        else:\n+            while True:\n+                patterns.append(p_maybe_star_pattern(s))\n+                if s.sy == \",\":\n+                    s.next()\n+                    if s.sy == closer:\n+                        break\n+                else:\n+                    if opener == ')' and len(patterns)==1:\n+                        s.error(\"tuple-like pattern of length 1 must finish with ','\")\n+                    break\n+            s.expect(closer)\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns=patterns)\n+    else:\n+        s.error(\"Expected '[' or '('\")\n+\n+\n+def p_mapping_pattern(s):\n+    pos = s.position()\n+    s.expect('{')\n+    if s.sy == '}':\n+        # trivial empty mapping\n+        s.next()\n+        return MatchCaseNodes.MatchMappingPatternNode(pos)\n+\n+    double_star_capture_target = None\n+    items_patterns = []\n+    star_star_arg_pos = None\n+    while True:\n+        if double_star_capture_target and not star_star_arg_pos:\n+            star_star_arg_pos = s.position()\n+        if s.sy == '**':\n+            s.next()\n+            double_star_capture_target = p_pattern_capture_target(s)\n+        else:\n+            # key=(literal_expr | attr)\n+            with tentatively_scan(s) as errors:\n+                pattern = p_literal_pattern(s)\n+                key = pattern.value\n+            if errors:\n+                pattern = p_value_pattern(s)\n+                key = pattern.value\n+            s.expect(':')\n+            value = p_pattern(s)\n+            items_patterns.append((key, value))\n+        if s.sy==',':\n+            s.next()\n+        else:\n+            break\n+        if s.sy=='}':\n+            break",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934954276",
            "id": 934954276,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43ukUk",
            "original_commit_id": "039a2c244361da1a6a16f28dc6478dd78438d0d5",
            "original_line": 4334,
            "original_position": 446,
            "original_start_line": 4329,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057898252,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934954276/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-01T22:09:09Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934954276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r934954950"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/934954950"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if s.sy != \",\":\r\n            break\r\n        s.next()\r\n        if s.sy == \")\":\r\n            break  # Allow trailing comma.\r\n```",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-01T22:06:22Z",
            "diff_hunk": "@@ -3968,6 +3989,440 @@ def p_cpp_class_attribute(s, ctx):\n         return node\n \n \n+def p_match_statement(s, ctx):\n+    assert s.sy == \"IDENT\" and s.systring == \"match\"\n+    pos = s.position()\n+    with tentatively_scan(s) as errors:\n+        s.next()\n+        subject = p_namedexpr_test(s)\n+        subjects = None\n+        if s.sy == \",\":\n+            subjects = [subject]\n+        while s.sy == \",\":\n+            s.next()\n+            if s.sy == \":\":\n+                break\n+            subjects.append(p_test(s))\n+        if subjects is not None:\n+            subject = ExprNodes.TupleNode(pos, args=subjects)\n+        s.expect(\":\")\n+    if errors:\n+        return None\n+\n+    # at this stage were commited to it being a match block so continue\n+    # outside \"with tentatively_scan\"\n+    # (I think this deviates from the PEG parser slightly, and it'd\n+    # backtrack on the whole thing)\n+    s.expect_newline()\n+    s.expect_indent()\n+    cases = []\n+    while s.sy != \"DEDENT\":\n+        cases.append(p_case_block(s, ctx))\n+    s.expect_dedent()\n+    return MatchCaseNodes.MatchNode(pos, subject=subject, cases=cases)\n+\n+\n+def p_case_block(s, ctx):\n+    if not (s.sy == \"IDENT\" and s.systring == \"case\"):\n+        s.error(\"Expected 'case'\")\n+    s.next()\n+    pos = s.position()\n+    pattern = p_patterns(s)\n+    guard = None\n+    if s.sy == 'if':\n+        s.next()\n+        guard = p_test(s)\n+    body = p_suite(s, ctx)\n+\n+    return MatchCaseNodes.MatchCaseNode(pos, pattern=pattern, body=body, guard=guard)\n+\n+\n+def p_patterns(s):\n+    # note - in slight contrast to the name (which comes from the Python grammar),\n+    # returns a single pattern\n+    patterns = []\n+    seq = False\n+    pos = s.position()\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            pattern = p_maybe_star_pattern(s)\n+        if errors:\n+            if patterns:\n+                break  # all is good provided we have at least 1 pattern\n+            else:\n+                e = errors[0]\n+                s.error(e.args[1], pos=e.args[0])\n+        patterns.append(pattern)\n+\n+        if s.sy == \",\":\n+            seq = True\n+            s.next()\n+            if s.sy in [\":\", \"if\"]:\n+                break  # common reasons to break\n+        else:\n+            break\n+\n+    if seq:\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns=patterns)\n+    else:\n+        return patterns[0]\n+\n+\n+def p_maybe_star_pattern(s):\n+    # For match case. Either star_pattern or pattern\n+    if s.sy == \"*\":\n+        # star pattern\n+        s.next()\n+        target = None\n+        if s.systring != \"_\":  # for match-case '_' is treated as a special wildcard\n+            target = p_pattern_capture_target(s)\n+        else:\n+            s.next()\n+        pattern = MatchCaseNodes.MatchAndAssignPatternNode(\n+            s.position(), target=target, is_star=True\n+        )\n+        return pattern\n+    else:\n+        pattern = p_pattern(s)\n+        return pattern\n+\n+\n+def p_pattern(s):\n+    # try \"as_pattern\" then \"or_pattern\"\n+    # (but practically \"as_pattern\" starts with \"or_pattern\" too)\n+    patterns = []\n+    pos = s.position()\n+    while True:\n+        patterns.append(p_closed_pattern(s))\n+        if s.sy == \"|\":\n+            s.next()\n+        else:\n+            break\n+\n+    if len(patterns) > 1:\n+        pattern = MatchCaseNodes.OrPatternNode(\n+            pos,\n+            alternatives=patterns\n+        )\n+    else:\n+        pattern = patterns[0]\n+\n+    if s.sy == 'IDENT' and s.systring == 'as':\n+        s.next()\n+        with tentatively_scan(s) as errors:\n+            pattern.as_targets.append(p_pattern_capture_target(s))\n+        if errors and s.sy == \"_\":\n+            s.next()\n+            # make this a specific error\n+            return Nodes.ErrorNode(errors[0].args[0], what=errors[0].args[1])\n+        elif errors:\n+            with tentatively_scan(s):\n+                expr = p_test(s)\n+                return Nodes.ErrorNode(expr.pos, what=\"Invalid pattern target\")\n+            s.error(errors[0])\n+    return pattern\n+\n+\n+def p_closed_pattern(s):\n+    \"\"\"\n+    The PEG parser specifies it as\n+    | literal_pattern\n+    | capture_pattern\n+    | wildcard_pattern\n+    | value_pattern\n+    | group_pattern\n+    | sequence_pattern\n+    | mapping_pattern\n+    | class_pattern\n+\n+    For the sake avoiding too much backtracking, we know:\n+    * starts with \"{\" is a sequence_pattern\n+    * starts with \"[\" is a mapping_pattern\n+    * starts with \"(\" is a group_pattern or sequence_pattern\n+    * wildcard pattern is just identifier=='_'\n+    The rest are then tried in order with backtracking\n+    \"\"\"\n+    if s.sy == 'IDENT' and s.systring == '_':\n+        pos = s.position()\n+        s.next()\n+        return MatchCaseNodes.MatchAndAssignPatternNode(pos)\n+    elif s.sy == '{':\n+        return p_mapping_pattern(s)\n+    elif s.sy == '[':\n+        return p_sequence_pattern(s)\n+    elif s.sy == '(':\n+        with tentatively_scan(s) as errors:\n+            result = p_group_pattern(s)\n+            if not errors:\n+                return result\n+        return p_sequence_pattern(s)\n+\n+    with tentatively_scan(s) as errors:\n+        result = p_literal_pattern(s)\n+        if not errors:\n+            return result\n+    with tentatively_scan(s) as errors:\n+        result = p_capture_pattern(s)\n+        if not errors:\n+            return result\n+    with tentatively_scan(s) as errors:\n+        result = p_value_pattern(s)\n+        if not errors:\n+            return result\n+    return p_class_pattern(s)\n+\n+\n+def p_literal_pattern(s):\n+    # a lot of duplication in this function with \"p_atom\"\n+    next_must_be_a_number = False\n+    sign = ''\n+    if s.sy == '-':\n+        sign = s.sy\n+        sign_pos = s.position()\n+        s.next()\n+        next_must_be_a_number = True\n+\n+    sy = s.sy\n+    pos = s.position()\n+\n+    res = None\n+    if sy == 'INT':\n+        res = p_int_literal(s)\n+    elif sy == 'FLOAT':\n+        value = s.systring\n+        s.next()\n+        res = ExprNodes.FloatNode(pos, value=value)\n+\n+    if res and sign == \"-\":\n+        res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+\n+    if res and s.sy in ['+', '-']:\n+        sign = s.sy\n+        s.next()\n+        if s.sy != 'IMAG':\n+            s.error(\"Expected imaginary number\")\n+        else:\n+            add_pos = s.position()\n+            value = s.systring[:-1]\n+            s.next()\n+            res = ExprNodes.binop_node(\n+                add_pos,\n+                sign,\n+                operand1=res,\n+                operand2=ExprNodes.ImagNode(s.position(), value=value)\n+            )\n+\n+    if not res and sy == 'IMAG':\n+        value = s.systring[:-1]\n+        s.next()\n+        res = ExprNodes.ImagNode(pos, value=sign+value)\n+        if sign == \"-\":\n+            res = ExprNodes.UnaryMinusNode(sign_pos, operand=res)\n+\n+    if res:\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value=res)\n+\n+    if next_must_be_a_number:\n+        s.error(\"Expected a number\")\n+    if sy == 'BEGIN_STRING':\n+        res = parse_atom_string(pos, s)\n+        # f-strings not being accepted is validated in PostParse\n+        return MatchCaseNodes.MatchValuePatternNode(pos, value=res)\n+    elif sy == 'IDENT':\n+        # Note that p_atom_ident_constants includes NULL.\n+        # This is a deliberate Cython addition to the pattern matching specification\n+        result = parse_atom_ident_constants(pos, s)\n+        if result:\n+            s.next()\n+            return MatchCaseNodes.MatchValuePatternNode(pos, value=result, is_is_check=True)\n+\n+    s.error(\"Failed to match literal\")\n+\n+\n+def p_capture_pattern(s):\n+    return MatchCaseNodes.MatchAndAssignPatternNode(\n+        s.position(),\n+        target=p_pattern_capture_target(s)\n+    )\n+\n+\n+def p_value_pattern(s):\n+    if s.sy != \"IDENT\":\n+        s.error(\"Expected identifier\")\n+    pos = s.position()\n+    res = p_name(s, s.systring)\n+    s.next()\n+    if s.sy != '.':\n+        s.error(\"Expected '.'\")\n+    while s.sy == '.':\n+        attr_pos = s.position()\n+        s.next()\n+        attr = p_ident(s)\n+        res = ExprNodes.AttributeNode(attr_pos, obj=res, attribute=attr)\n+    if s.sy in ['(', '=']:\n+        s.error(\"Unexpected symbol '%s'\" % s.sy)\n+    return MatchCaseNodes.MatchValuePatternNode(pos, value=res)\n+\n+\n+def p_group_pattern(s):\n+    s.expect(\"(\")\n+    pattern = p_pattern(s)\n+    s.expect(\")\")\n+    return pattern\n+\n+\n+def p_sequence_pattern(s):\n+    opener = s.sy\n+    pos = s.position()\n+    if opener in ['[', '(']:\n+        closer = ']' if opener == '[' else ')'\n+        s.next()\n+        # maybe_sequence_pattern and open_sequence_pattern\n+        patterns = []\n+        if s.sy == closer:\n+            s.next()\n+        else:\n+            while True:\n+                patterns.append(p_maybe_star_pattern(s))\n+                if s.sy == \",\":\n+                    s.next()\n+                    if s.sy == closer:\n+                        break\n+                else:\n+                    if opener == ')' and len(patterns)==1:\n+                        s.error(\"tuple-like pattern of length 1 must finish with ','\")\n+                    break\n+            s.expect(closer)\n+        return MatchCaseNodes.MatchSequencePatternNode(pos, patterns=patterns)\n+    else:\n+        s.error(\"Expected '[' or '('\")\n+\n+\n+def p_mapping_pattern(s):\n+    pos = s.position()\n+    s.expect('{')\n+    if s.sy == '}':\n+        # trivial empty mapping\n+        s.next()\n+        return MatchCaseNodes.MatchMappingPatternNode(pos)\n+\n+    double_star_capture_target = None\n+    items_patterns = []\n+    star_star_arg_pos = None\n+    while True:\n+        if double_star_capture_target and not star_star_arg_pos:\n+            star_star_arg_pos = s.position()\n+        if s.sy == '**':\n+            s.next()\n+            double_star_capture_target = p_pattern_capture_target(s)\n+        else:\n+            # key=(literal_expr | attr)\n+            with tentatively_scan(s) as errors:\n+                pattern = p_literal_pattern(s)\n+                key = pattern.value\n+            if errors:\n+                pattern = p_value_pattern(s)\n+                key = pattern.value\n+            s.expect(':')\n+            value = p_pattern(s)\n+            items_patterns.append((key, value))\n+        if s.sy==',':\n+            s.next()\n+        else:\n+            break\n+        if s.sy=='}':\n+            break\n+    s.expect('}')\n+\n+    if star_star_arg_pos is not None:\n+        return Nodes.ErrorNode(\n+            star_star_arg_pos,\n+            what = \"** pattern must be the final part of a mapping pattern.\"\n+        )\n+    return MatchCaseNodes.MatchMappingPatternNode(\n+        pos,\n+        keys = [kv[0] for kv in items_patterns],\n+        value_patterns = [kv[1] for kv in items_patterns],\n+        double_star_capture_target = double_star_capture_target\n+    )\n+\n+\n+def p_class_pattern(s):\n+    # start by parsing the class as name_or_attr\n+    pos = s.position()\n+    res = p_name(s, s.systring)\n+    s.next()\n+    while s.sy == '.':\n+        attr_pos = s.position()\n+        s.next()\n+        attr = p_ident(s)\n+        res = ExprNodes.AttributeNode(attr_pos, obj=res, attribute=attr)\n+    class_ = res\n+\n+    s.expect(\"(\")\n+    if s.sy == \")\":\n+        # trivial case with no arguments matched\n+        s.next()\n+        return MatchCaseNodes.ClassPatternNode(pos, class_=class_)\n+\n+    # parse the arguments\n+    positional_patterns = []\n+    keyword_patterns = []\n+    keyword_patterns_error = None\n+    while True:\n+        with tentatively_scan(s) as errors:\n+            positional_patterns.append(p_pattern(s))\n+        if not errors:\n+            if keyword_patterns:\n+                keyword_patterns_error = s.position()\n+        else:\n+            with tentatively_scan(s) as errors:\n+                keyword_patterns.append(p_keyword_pattern(s))\n+        if s.sy == \",\":\n+            s.next()\n+            if s.sy == \")\":\n+                break\n+        else:\n+            break",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r934954950",
            "id": 934954950,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43ukfG",
            "original_commit_id": "039a2c244361da1a6a16f28dc6478dd78438d0d5",
            "original_line": 4386,
            "original_position": 498,
            "original_start_line": 4381,
            "path": "Cython/Compiler/Parsing.py",
            "position": null,
            "pull_request_review_id": 1057898252,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/934954950/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-01T22:09:09Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/934954950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r935155786"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/935155786"
                }
            },
            "author_association": "MEMBER",
            "body": "That is currently rejected. The structure is\r\n\r\n```\r\n- MatchSequencePatternNode\r\n   - patterns: [\r\n       - MatchValuePatternNode\r\n          - value: JoinedStrNode\r\n    ]\r\n```\r\n\r\nso it does just rejected by the check in `visit_MatchValuePatternNode`. (`MatchMappingPatternNode` is special-cased because the keys aren't made up of `MatchValuePatternNodes`. That's mainly because the rules for matching keys are a little difference (they're all match by `==` rather than some being matched by `is`) so there wasn't much shared implementation).\r\n\r\nI'll switch to a status flag on my next lot of edits though - that's probably future-proof it a little more.",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-02T06:19:19Z",
            "diff_hunk": "@@ -397,6 +397,19 @@ def visit_MatchNode(self, node):\n         self.visitchildren(node)\n         return node\n \n+    def visit_MatchValuePatternNode(self, node):\n+        if isinstance(node.value, ExprNodes.JoinedStrNode):\n+            error(node.value.pos, \"f-strings are not accepted for pattern matching\")\n+        self.visitchildren(node)\n+        return node",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r935155786",
            "id": 935155786,
            "in_reply_to_id": 934946593,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43vVhK",
            "original_commit_id": "039a2c244361da1a6a16f28dc6478dd78438d0d5",
            "original_line": 404,
            "original_position": 8,
            "original_start_line": 400,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 1058175951,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/935155786/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-02T06:19:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/935155786",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r935982466"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/935982466"
                }
            },
            "author_association": "MEMBER",
            "body": "I've renamed them and made them behave a little more like every other `p_...` function. I'd originally not used `p_...` because they seemed slightly different, but you're probably right that they can be made similar enough",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-02T20:07:21Z",
            "diff_hunk": "@@ -64,6 +64,8 @@ cdef expect_ellipsis(PyrexScanner s)\n cdef make_slice_nodes(pos, subscripts)\n cpdef make_slice_node(pos, start, stop = *, step = *)\n cdef p_atom(PyrexScanner s)\n+cdef parse_atom_string(pos, PyrexScanner s):\n+cdef parse_atom_ident_constants(pos, PyrexScanner s):",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r935982466",
            "id": 935982466,
            "in_reply_to_id": 934950145,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43yfWC",
            "original_commit_id": "9f35805dc92b820e32d85600dd08ba3aa13ede03",
            "original_line": 68,
            "original_position": 5,
            "original_start_line": 67,
            "path": "Cython/Compiler/Parsing.pxd",
            "position": null,
            "pull_request_review_id": 1059364734,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/935982466/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-02T20:07:28Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/935982466",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4897#discussion_r935983894"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4897"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/935983894"
                }
            },
            "author_association": "MEMBER",
            "body": "This is not done by a status flag in `PostParse`. I don't think it changes the behaviour about what's allowed, but it's probably a little clearer (no `isinstance` check except the hidden one in the visitor dispatch)",
            "commit_id": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "created_at": "2022-08-02T20:09:12Z",
            "diff_hunk": "@@ -397,6 +397,19 @@ def visit_MatchNode(self, node):\n         self.visitchildren(node)\n         return node\n \n+    def visit_MatchValuePatternNode(self, node):\n+        if isinstance(node.value, ExprNodes.JoinedStrNode):\n+            error(node.value.pos, \"f-strings are not accepted for pattern matching\")\n+        self.visitchildren(node)\n+        return node",
            "html_url": "https://github.com/cython/cython/pull/4897#discussion_r935983894",
            "id": 935983894,
            "in_reply_to_id": 934946593,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc43yfsW",
            "original_commit_id": "039a2c244361da1a6a16f28dc6478dd78438d0d5",
            "original_line": 404,
            "original_position": 8,
            "original_start_line": 400,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": null,
            "pull_request_review_id": 1059366651,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4897",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/935983894/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-02T20:09:12Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/935983894",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4897/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b3451fad27ba0db2c85db8ba5a606f50a7aa41d0/comments",
            "commit": {
                "author": {
                    "date": "2022-05-28T17:35:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-28T17:35:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Initial work to help restore Scanner state\n\nThings like match-case (essentially anything that uses Python's\nnew PEG parser capacities) are going to have to be implemented\nby trying to parse something, failing, then going back and trying\nto parse something else. This commit gets the initial work done\nto make this easier to do",
                "tree": {
                    "sha": "e3282e73ee6f7b06c9b5750bbc8620322f517480",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e3282e73ee6f7b06c9b5750bbc8620322f517480"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b3451fad27ba0db2c85db8ba5a606f50a7aa41d0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/b3451fad27ba0db2c85db8ba5a606f50a7aa41d0",
            "node_id": "C_kwDOAhr4b9oAKGIzNDUxZmFkMjdiYTBkYjJjODVkYjhiYTVhNjA2ZjUwYTdhYTQxZDA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/66d1ee5ac43599967bc1bfce380cffb0d32d2fb2",
                    "sha": "66d1ee5ac43599967bc1bfce380cffb0d32d2fb2",
                    "url": "https://api.github.com/repos/cython/cython/commits/66d1ee5ac43599967bc1bfce380cffb0d32d2fb2"
                }
            ],
            "sha": "b3451fad27ba0db2c85db8ba5a606f50a7aa41d0",
            "url": "https://api.github.com/repos/cython/cython/commits/b3451fad27ba0db2c85db8ba5a606f50a7aa41d0"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9c0081d4062d115cb00eda05c2e47da1cc5def62/comments",
            "commit": {
                "author": {
                    "date": "2022-05-28T19:21:56Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-28T19:21:56Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Add testing (and some fixes)",
                "tree": {
                    "sha": "fdcb47ac5a09bb4707b428c68b0f77e9edede369",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/fdcb47ac5a09bb4707b428c68b0f77e9edede369"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9c0081d4062d115cb00eda05c2e47da1cc5def62",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/9c0081d4062d115cb00eda05c2e47da1cc5def62",
            "node_id": "C_kwDOAhr4b9oAKDljMDA4MWQ0MDYyZDExNWNiMDBlZGEwNWMyZTQ3ZGExY2M1ZGVmNjI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b3451fad27ba0db2c85db8ba5a606f50a7aa41d0",
                    "sha": "b3451fad27ba0db2c85db8ba5a606f50a7aa41d0",
                    "url": "https://api.github.com/repos/cython/cython/commits/b3451fad27ba0db2c85db8ba5a606f50a7aa41d0"
                }
            ],
            "sha": "9c0081d4062d115cb00eda05c2e47da1cc5def62",
            "url": "https://api.github.com/repos/cython/cython/commits/9c0081d4062d115cb00eda05c2e47da1cc5def62"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5da2c05428fec9c8ee5d1dd0551dd2e78193cd48/comments",
            "commit": {
                "author": {
                    "date": "2022-05-28T19:27:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-28T19:27:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Run black on TestScanning",
                "tree": {
                    "sha": "4da16835be93edb8f211dd0d41d473c7dbc1fa92",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4da16835be93edb8f211dd0d41d473c7dbc1fa92"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5da2c05428fec9c8ee5d1dd0551dd2e78193cd48",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/5da2c05428fec9c8ee5d1dd0551dd2e78193cd48",
            "node_id": "C_kwDOAhr4b9oAKDVkYTJjMDU0MjhmZWM5YzhlZTVkMWRkMDU1MWRkMmU3ODE5M2NkNDg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9c0081d4062d115cb00eda05c2e47da1cc5def62",
                    "sha": "9c0081d4062d115cb00eda05c2e47da1cc5def62",
                    "url": "https://api.github.com/repos/cython/cython/commits/9c0081d4062d115cb00eda05c2e47da1cc5def62"
                }
            ],
            "sha": "5da2c05428fec9c8ee5d1dd0551dd2e78193cd48",
            "url": "https://api.github.com/repos/cython/cython/commits/5da2c05428fec9c8ee5d1dd0551dd2e78193cd48"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9679380391cbecafc85be71bd9c0885e0ab08290/comments",
            "commit": {
                "author": {
                    "date": "2022-05-28T20:21:46Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-28T20:21:46Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixes to Parsing.py",
                "tree": {
                    "sha": "2687c0e9f3e83eb7a1b865f236676393bd1e0db4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2687c0e9f3e83eb7a1b865f236676393bd1e0db4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9679380391cbecafc85be71bd9c0885e0ab08290",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/9679380391cbecafc85be71bd9c0885e0ab08290",
            "node_id": "C_kwDOAhr4b9oAKDk2NzkzODAzOTFjYmVjYWZjODViZTcxYmQ5YzA4ODVlMGFiMDgyOTA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5da2c05428fec9c8ee5d1dd0551dd2e78193cd48",
                    "sha": "5da2c05428fec9c8ee5d1dd0551dd2e78193cd48",
                    "url": "https://api.github.com/repos/cython/cython/commits/5da2c05428fec9c8ee5d1dd0551dd2e78193cd48"
                }
            ],
            "sha": "9679380391cbecafc85be71bd9c0885e0ab08290",
            "url": "https://api.github.com/repos/cython/cython/commits/9679380391cbecafc85be71bd9c0885e0ab08290"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/592bdb753abe75d0ba1d5082e90c2cc26af536d8/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T07:24:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T07:24:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix error string locations in text",
                "tree": {
                    "sha": "5149d01b0bbfc27887d9a9f59abf811986cf495a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5149d01b0bbfc27887d9a9f59abf811986cf495a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/592bdb753abe75d0ba1d5082e90c2cc26af536d8",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/592bdb753abe75d0ba1d5082e90c2cc26af536d8",
            "node_id": "C_kwDOAhr4b9oAKDU5MmJkYjc1M2FiZTc1ZDBiYTFkNTA4MmU5MGMyY2MyNmFmNTM2ZDg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9679380391cbecafc85be71bd9c0885e0ab08290",
                    "sha": "9679380391cbecafc85be71bd9c0885e0ab08290",
                    "url": "https://api.github.com/repos/cython/cython/commits/9679380391cbecafc85be71bd9c0885e0ab08290"
                }
            ],
            "sha": "592bdb753abe75d0ba1d5082e90c2cc26af536d8",
            "url": "https://api.github.com/repos/cython/cython/commits/592bdb753abe75d0ba1d5082e90c2cc26af536d8"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/bd54e43f146b2b7510c8a9f80b96eea564c8135c/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T07:44:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T07:45:02Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix tests on Py2",
                "tree": {
                    "sha": "b49f7ec47a8cd051fe6733742ac2e19b5c106415",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b49f7ec47a8cd051fe6733742ac2e19b5c106415"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/bd54e43f146b2b7510c8a9f80b96eea564c8135c",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/bd54e43f146b2b7510c8a9f80b96eea564c8135c",
            "node_id": "C_kwDOAhr4b9oAKGJkNTRlNDNmMTQ2YjJiNzUxMGM4YTlmODBiOTZlZWE1NjRjODEzNWM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/592bdb753abe75d0ba1d5082e90c2cc26af536d8",
                    "sha": "592bdb753abe75d0ba1d5082e90c2cc26af536d8",
                    "url": "https://api.github.com/repos/cython/cython/commits/592bdb753abe75d0ba1d5082e90c2cc26af536d8"
                }
            ],
            "sha": "bd54e43f146b2b7510c8a9f80b96eea564c8135c",
            "url": "https://api.github.com/repos/cython/cython/commits/bd54e43f146b2b7510c8a9f80b96eea564c8135c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/057984adac3f555fb68a168efae1e14a0153274f/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T08:01:10Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T08:01:10Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "c++ tests",
                "tree": {
                    "sha": "8dae00b13cc80de4e6ee24fb8df3ee1130cd6e92",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8dae00b13cc80de4e6ee24fb8df3ee1130cd6e92"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/057984adac3f555fb68a168efae1e14a0153274f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/057984adac3f555fb68a168efae1e14a0153274f",
            "node_id": "C_kwDOAhr4b9oAKDA1Nzk4NGFkYWMzZjU1NWZiNjhhMTY4ZWZhZTFlMTRhMDE1MzI3NGY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bd54e43f146b2b7510c8a9f80b96eea564c8135c",
                    "sha": "bd54e43f146b2b7510c8a9f80b96eea564c8135c",
                    "url": "https://api.github.com/repos/cython/cython/commits/bd54e43f146b2b7510c8a9f80b96eea564c8135c"
                }
            ],
            "sha": "057984adac3f555fb68a168efae1e14a0153274f",
            "url": "https://api.github.com/repos/cython/cython/commits/057984adac3f555fb68a168efae1e14a0153274f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/68ec9f7d9ec68a4ee997c03deb7f26957a5d52f0/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T14:52:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T14:54:40Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Initial work on parsing match statements",
                "tree": {
                    "sha": "43cc673fb6a0939b97631e3d3a601130788fc8ba",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/43cc673fb6a0939b97631e3d3a601130788fc8ba"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/68ec9f7d9ec68a4ee997c03deb7f26957a5d52f0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/68ec9f7d9ec68a4ee997c03deb7f26957a5d52f0",
            "node_id": "C_kwDOAhr4b9oAKDY4ZWM5ZjdkOWVjNjhhNGVlOTk3YzAzZGViN2YyNjk1N2E1ZDUyZjA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/057984adac3f555fb68a168efae1e14a0153274f",
                    "sha": "057984adac3f555fb68a168efae1e14a0153274f",
                    "url": "https://api.github.com/repos/cython/cython/commits/057984adac3f555fb68a168efae1e14a0153274f"
                }
            ],
            "sha": "68ec9f7d9ec68a4ee997c03deb7f26957a5d52f0",
            "url": "https://api.github.com/repos/cython/cython/commits/68ec9f7d9ec68a4ee997c03deb7f26957a5d52f0"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fbf10b8f2a07d54c76434d44beda0d49c0733eb5/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T14:58:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T14:58:05Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix error in restoring state",
                "tree": {
                    "sha": "d6ffd65a60d998abf4dfdae5ed183604c8540fbe",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d6ffd65a60d998abf4dfdae5ed183604c8540fbe"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fbf10b8f2a07d54c76434d44beda0d49c0733eb5",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/fbf10b8f2a07d54c76434d44beda0d49c0733eb5",
            "node_id": "C_kwDOAhr4b9oAKGZiZjEwYjhmMmEwN2Q1NGM3NjQzNGQ0NGJlZGEwZDQ5YzA3MzNlYjU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/057984adac3f555fb68a168efae1e14a0153274f",
                    "sha": "057984adac3f555fb68a168efae1e14a0153274f",
                    "url": "https://api.github.com/repos/cython/cython/commits/057984adac3f555fb68a168efae1e14a0153274f"
                }
            ],
            "sha": "fbf10b8f2a07d54c76434d44beda0d49c0733eb5",
            "url": "https://api.github.com/repos/cython/cython/commits/fbf10b8f2a07d54c76434d44beda0d49c0733eb5"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fd94d07e02088b339220ad29ef3c6e15a7c0b1d0/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T17:32:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T17:46:06Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Comments from review",
                "tree": {
                    "sha": "32fe944ba0262e6998a962b31bc11973486927cf",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/32fe944ba0262e6998a962b31bc11973486927cf"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fd94d07e02088b339220ad29ef3c6e15a7c0b1d0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/fd94d07e02088b339220ad29ef3c6e15a7c0b1d0",
            "node_id": "C_kwDOAhr4b9oAKGZkOTRkMDdlMDIwODhiMzM5MjIwYWQyOWVmM2M2ZTE1YTdjMGIxZDA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fbf10b8f2a07d54c76434d44beda0d49c0733eb5",
                    "sha": "fbf10b8f2a07d54c76434d44beda0d49c0733eb5",
                    "url": "https://api.github.com/repos/cython/cython/commits/fbf10b8f2a07d54c76434d44beda0d49c0733eb5"
                }
            ],
            "sha": "fd94d07e02088b339220ad29ef3c6e15a7c0b1d0",
            "url": "https://api.github.com/repos/cython/cython/commits/fd94d07e02088b339220ad29ef3c6e15a7c0b1d0"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/428a6bfb4c3dd1c6d7cf0bf1dd8d7c05b99b4996/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T17:59:19Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T17:59:19Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix a few mistakes in pxd file",
                "tree": {
                    "sha": "38f77bb0f27d167ea6e31811adb0b6970536950c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/38f77bb0f27d167ea6e31811adb0b6970536950c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/428a6bfb4c3dd1c6d7cf0bf1dd8d7c05b99b4996",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/428a6bfb4c3dd1c6d7cf0bf1dd8d7c05b99b4996",
            "node_id": "C_kwDOAhr4b9oAKDQyOGE2YmZiNGMzZGQxYzZkN2NmMGJmMWRkOGQ3YzA1Yjk5YjQ5OTY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fd94d07e02088b339220ad29ef3c6e15a7c0b1d0",
                    "sha": "fd94d07e02088b339220ad29ef3c6e15a7c0b1d0",
                    "url": "https://api.github.com/repos/cython/cython/commits/fd94d07e02088b339220ad29ef3c6e15a7c0b1d0"
                }
            ],
            "sha": "428a6bfb4c3dd1c6d7cf0bf1dd8d7c05b99b4996",
            "url": "https://api.github.com/repos/cython/cython/commits/428a6bfb4c3dd1c6d7cf0bf1dd8d7c05b99b4996"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9a8ab7cac559750c0f5cef3184f0766a456fae69/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T18:26:56Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T18:26:56Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Add back in separate scanning position",
                "tree": {
                    "sha": "f0ca7946dbb86333b0cce7284e799e599f4ac2ea",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f0ca7946dbb86333b0cce7284e799e599f4ac2ea"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9a8ab7cac559750c0f5cef3184f0766a456fae69",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/9a8ab7cac559750c0f5cef3184f0766a456fae69",
            "node_id": "C_kwDOAhr4b9oAKDlhOGFiN2NhYzU1OTc1MGMwZjVjZWYzMTg0ZjA3NjZhNDU2ZmFlNjk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/428a6bfb4c3dd1c6d7cf0bf1dd8d7c05b99b4996",
                    "sha": "428a6bfb4c3dd1c6d7cf0bf1dd8d7c05b99b4996",
                    "url": "https://api.github.com/repos/cython/cython/commits/428a6bfb4c3dd1c6d7cf0bf1dd8d7c05b99b4996"
                }
            ],
            "sha": "9a8ab7cac559750c0f5cef3184f0766a456fae69",
            "url": "https://api.github.com/repos/cython/cython/commits/9a8ab7cac559750c0f5cef3184f0766a456fae69"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/804b37c18538f6a598daea04e43fe14fe668b73b/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T18:33:12Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T18:33:12Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix code style and print",
                "tree": {
                    "sha": "a699d1b134e8228b73224e63105c7a131c8dfa56",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a699d1b134e8228b73224e63105c7a131c8dfa56"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/804b37c18538f6a598daea04e43fe14fe668b73b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/804b37c18538f6a598daea04e43fe14fe668b73b",
            "node_id": "C_kwDOAhr4b9oAKDgwNGIzN2MxODUzOGY2YTU5OGRhZWEwNGU0M2ZlMTRmZTY2OGI3M2I",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9a8ab7cac559750c0f5cef3184f0766a456fae69",
                    "sha": "9a8ab7cac559750c0f5cef3184f0766a456fae69",
                    "url": "https://api.github.com/repos/cython/cython/commits/9a8ab7cac559750c0f5cef3184f0766a456fae69"
                }
            ],
            "sha": "804b37c18538f6a598daea04e43fe14fe668b73b",
            "url": "https://api.github.com/repos/cython/cython/commits/804b37c18538f6a598daea04e43fe14fe668b73b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0c897d3feeb6b72f50bb09154151c47f0901860d/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T18:49:57Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T18:49:57Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'scanning-restore-state' into parse-match",
                "tree": {
                    "sha": "9c43cd25c109265e071b2e5a10d9e4c186fc8510",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9c43cd25c109265e071b2e5a10d9e4c186fc8510"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0c897d3feeb6b72f50bb09154151c47f0901860d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/0c897d3feeb6b72f50bb09154151c47f0901860d",
            "node_id": "C_kwDOAhr4b9oAKDBjODk3ZDNmZWViNmI3MmY1MGJiMDkxNTQxNTFjNDdmMDkwMTg2MGQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/68ec9f7d9ec68a4ee997c03deb7f26957a5d52f0",
                    "sha": "68ec9f7d9ec68a4ee997c03deb7f26957a5d52f0",
                    "url": "https://api.github.com/repos/cython/cython/commits/68ec9f7d9ec68a4ee997c03deb7f26957a5d52f0"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/804b37c18538f6a598daea04e43fe14fe668b73b",
                    "sha": "804b37c18538f6a598daea04e43fe14fe668b73b",
                    "url": "https://api.github.com/repos/cython/cython/commits/804b37c18538f6a598daea04e43fe14fe668b73b"
                }
            ],
            "sha": "0c897d3feeb6b72f50bb09154151c47f0901860d",
            "url": "https://api.github.com/repos/cython/cython/commits/0c897d3feeb6b72f50bb09154151c47f0901860d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/95e0a8ea9dc2f8df61e920c517c08956684b103e/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T20:21:39Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T20:21:39Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Basically parses right (but very little else)\n\nStructure it parses into is largely nonsense",
                "tree": {
                    "sha": "10ccb27638608c018d38ae15f5ae82e534bcac98",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/10ccb27638608c018d38ae15f5ae82e534bcac98"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/95e0a8ea9dc2f8df61e920c517c08956684b103e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/95e0a8ea9dc2f8df61e920c517c08956684b103e",
            "node_id": "C_kwDOAhr4b9oAKDk1ZTBhOGVhOWRjMmY4ZGY2MWU5MjBjNTE3YzA4OTU2Njg0YjEwM2U",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0c897d3feeb6b72f50bb09154151c47f0901860d",
                    "sha": "0c897d3feeb6b72f50bb09154151c47f0901860d",
                    "url": "https://api.github.com/repos/cython/cython/commits/0c897d3feeb6b72f50bb09154151c47f0901860d"
                }
            ],
            "sha": "95e0a8ea9dc2f8df61e920c517c08956684b103e",
            "url": "https://api.github.com/repos/cython/cython/commits/95e0a8ea9dc2f8df61e920c517c08956684b103e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6337c45fd48485fe4cc45d66de2cb698eed19bfe/comments",
            "commit": {
                "author": {
                    "date": "2022-05-29T20:26:51Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-29T20:26:51Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix minor typo",
                "tree": {
                    "sha": "73af8b2d1afba6bf94d44a659c866d317cdca973",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/73af8b2d1afba6bf94d44a659c866d317cdca973"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6337c45fd48485fe4cc45d66de2cb698eed19bfe",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/6337c45fd48485fe4cc45d66de2cb698eed19bfe",
            "node_id": "C_kwDOAhr4b9oAKDYzMzdjNDVmZDQ4NDg1ZmU0Y2M0NWQ2NmRlMmNiNjk4ZWVkMTliZmU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/804b37c18538f6a598daea04e43fe14fe668b73b",
                    "sha": "804b37c18538f6a598daea04e43fe14fe668b73b",
                    "url": "https://api.github.com/repos/cython/cython/commits/804b37c18538f6a598daea04e43fe14fe668b73b"
                }
            ],
            "sha": "6337c45fd48485fe4cc45d66de2cb698eed19bfe",
            "url": "https://api.github.com/repos/cython/cython/commits/6337c45fd48485fe4cc45d66de2cb698eed19bfe"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/82ec7b45400cd80bd7131defebeefb4a92afa3ce/comments",
            "commit": {
                "author": {
                    "date": "2022-05-30T19:32:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-30T19:32:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix to handle nested \"tentatively_scan\" blocks",
                "tree": {
                    "sha": "c329003bd81d092a73df7333dba6f438da08038c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c329003bd81d092a73df7333dba6f438da08038c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/82ec7b45400cd80bd7131defebeefb4a92afa3ce",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/82ec7b45400cd80bd7131defebeefb4a92afa3ce",
            "node_id": "C_kwDOAhr4b9oAKDgyZWM3YjQ1NDAwY2Q4MGJkNzEzMWRlZmViZWVmYjRhOTJhZmEzY2U",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6337c45fd48485fe4cc45d66de2cb698eed19bfe",
                    "sha": "6337c45fd48485fe4cc45d66de2cb698eed19bfe",
                    "url": "https://api.github.com/repos/cython/cython/commits/6337c45fd48485fe4cc45d66de2cb698eed19bfe"
                }
            ],
            "sha": "82ec7b45400cd80bd7131defebeefb4a92afa3ce",
            "url": "https://api.github.com/repos/cython/cython/commits/82ec7b45400cd80bd7131defebeefb4a92afa3ce"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/27a22395f98c230f067660ee407f499ee52b6913/comments",
            "commit": {
                "author": {
                    "date": "2022-05-30T19:33:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-30T19:33:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'scanning-restore-state' into parse-match",
                "tree": {
                    "sha": "f8b454103d931ae7ced8d2d8e3add03db6c14dc9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f8b454103d931ae7ced8d2d8e3add03db6c14dc9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/27a22395f98c230f067660ee407f499ee52b6913",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/27a22395f98c230f067660ee407f499ee52b6913",
            "node_id": "C_kwDOAhr4b9oAKDI3YTIyMzk1Zjk4YzIzMGYwNjc2NjBlZTQwN2Y0OTllZTUyYjY5MTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/95e0a8ea9dc2f8df61e920c517c08956684b103e",
                    "sha": "95e0a8ea9dc2f8df61e920c517c08956684b103e",
                    "url": "https://api.github.com/repos/cython/cython/commits/95e0a8ea9dc2f8df61e920c517c08956684b103e"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/82ec7b45400cd80bd7131defebeefb4a92afa3ce",
                    "sha": "82ec7b45400cd80bd7131defebeefb4a92afa3ce",
                    "url": "https://api.github.com/repos/cython/cython/commits/82ec7b45400cd80bd7131defebeefb4a92afa3ce"
                }
            ],
            "sha": "27a22395f98c230f067660ee407f499ee52b6913",
            "url": "https://api.github.com/repos/cython/cython/commits/27a22395f98c230f067660ee407f499ee52b6913"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/204a69b54c44c6b457622122ae283273916edb40/comments",
            "commit": {
                "author": {
                    "date": "2022-05-30T19:29:39Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-30T21:32:30Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Parses the test file without error into a moderately sensible structure",
                "tree": {
                    "sha": "92b427b639b7452a0e6131317574e0b5165416c7",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/92b427b639b7452a0e6131317574e0b5165416c7"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/204a69b54c44c6b457622122ae283273916edb40",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/204a69b54c44c6b457622122ae283273916edb40",
            "node_id": "C_kwDOAhr4b9oAKDIwNGE2OWI1NGM0NGM2YjQ1NzYyMjEyMmFlMjgzMjczOTE2ZWRiNDA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/27a22395f98c230f067660ee407f499ee52b6913",
                    "sha": "27a22395f98c230f067660ee407f499ee52b6913",
                    "url": "https://api.github.com/repos/cython/cython/commits/27a22395f98c230f067660ee407f499ee52b6913"
                }
            ],
            "sha": "204a69b54c44c6b457622122ae283273916edb40",
            "url": "https://api.github.com/repos/cython/cython/commits/204a69b54c44c6b457622122ae283273916edb40"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/964bf1b0367228291fdbcc58c485e763a79438f5/comments",
            "commit": {
                "author": {
                    "date": "2022-05-31T19:27:37Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-31T19:27:37Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "515fac0e174d8934427ef3a31a695d65ec2a1892",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/515fac0e174d8934427ef3a31a695d65ec2a1892"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/964bf1b0367228291fdbcc58c485e763a79438f5",
                "verification": {
                    "payload": "tree 515fac0e174d8934427ef3a31a695d65ec2a1892\nparent 82ec7b45400cd80bd7131defebeefb4a92afa3ce\nauthor da-woods <dw-git@d-woods.co.uk> 1654025257 +0100\ncommitter GitHub <noreply@github.com> 1654025257 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJilmwpCRBK7hj4Ov3rIwAAE0kIAGnSGaOd8bgDHlnst3Hcxa87\nbQB56TKMb3CcHL4LVJytM84eBjOg0ZI8KzktDEWU7KQ77fHiLykW3sod+YIhTTA4\nwvUIHdohdDq/MzFucPCMu6vxNY/rSAfD+GP4bOtnmp5rUAsv8jJmgxyyn+QHgt+n\nRh5kw+VT3WHYTE9YemA/JGikpHcWXuRfZUNvldTS7QUWAc6+yhPlfvIWyRBkBIsm\noxC1FlJ8HOTWvu1XvncKYjqufXhZELX5x4mi01yi22D1WqNbHTouWW8V6c8PoW7T\n5iOSSSZ6vQVpt4pYEaBh7cj4QrZ26jZyqNYMaqyR/KScG8/WO/GMOoIHKndqiM4=\n=Q7v1\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/964bf1b0367228291fdbcc58c485e763a79438f5",
            "node_id": "C_kwDOAhr4b9oAKDk2NGJmMWIwMzY3MjI4MjkxZmRiY2M1OGM0ODVlNzYzYTc5NDM4ZjU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/82ec7b45400cd80bd7131defebeefb4a92afa3ce",
                    "sha": "82ec7b45400cd80bd7131defebeefb4a92afa3ce",
                    "url": "https://api.github.com/repos/cython/cython/commits/82ec7b45400cd80bd7131defebeefb4a92afa3ce"
                }
            ],
            "sha": "964bf1b0367228291fdbcc58c485e763a79438f5",
            "url": "https://api.github.com/repos/cython/cython/commits/964bf1b0367228291fdbcc58c485e763a79438f5"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/cafb4db3ee2a688c421fa8f1995d97c4ce82fa4c/comments",
            "commit": {
                "author": {
                    "date": "2022-05-31T19:27:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-31T19:27:55Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Basic validation. Test \"passes\"",
                "tree": {
                    "sha": "a3e2e568640645e23698beb76fc8b484cdac0dd4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a3e2e568640645e23698beb76fc8b484cdac0dd4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/cafb4db3ee2a688c421fa8f1995d97c4ce82fa4c",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/cafb4db3ee2a688c421fa8f1995d97c4ce82fa4c",
            "node_id": "C_kwDOAhr4b9oAKGNhZmI0ZGIzZWUyYTY4OGM0MjFmYThmMTk5NWQ5N2M0Y2U4MmZhNGM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/204a69b54c44c6b457622122ae283273916edb40",
                    "sha": "204a69b54c44c6b457622122ae283273916edb40",
                    "url": "https://api.github.com/repos/cython/cython/commits/204a69b54c44c6b457622122ae283273916edb40"
                }
            ],
            "sha": "cafb4db3ee2a688c421fa8f1995d97c4ce82fa4c",
            "url": "https://api.github.com/repos/cython/cython/commits/cafb4db3ee2a688c421fa8f1995d97c4ce82fa4c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/091346acdadd6c71953ebc70a22ece2ec0cb06ef/comments",
            "commit": {
                "author": {
                    "date": "2022-05-31T19:41:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-31T19:41:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "More suggestions from review",
                "tree": {
                    "sha": "28835aaa87977d2dc326d14c76e9aaf08c37c22d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/28835aaa87977d2dc326d14c76e9aaf08c37c22d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/091346acdadd6c71953ebc70a22ece2ec0cb06ef",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/091346acdadd6c71953ebc70a22ece2ec0cb06ef",
            "node_id": "C_kwDOAhr4b9oAKDA5MTM0NmFjZGFkZDZjNzE5NTNlYmM3MGEyMmVjZTJlYzBjYjA2ZWY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/964bf1b0367228291fdbcc58c485e763a79438f5",
                    "sha": "964bf1b0367228291fdbcc58c485e763a79438f5",
                    "url": "https://api.github.com/repos/cython/cython/commits/964bf1b0367228291fdbcc58c485e763a79438f5"
                }
            ],
            "sha": "091346acdadd6c71953ebc70a22ece2ec0cb06ef",
            "url": "https://api.github.com/repos/cython/cython/commits/091346acdadd6c71953ebc70a22ece2ec0cb06ef"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ec7949e9ebeee21bc772036d1b2aaa47d8b3a7e1/comments",
            "commit": {
                "author": {
                    "date": "2022-05-31T19:46:42Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-31T19:46:42Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Added comment",
                "tree": {
                    "sha": "fbb3964c8bf168990e34138bea4f5c0690393e98",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/fbb3964c8bf168990e34138bea4f5c0690393e98"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ec7949e9ebeee21bc772036d1b2aaa47d8b3a7e1",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/ec7949e9ebeee21bc772036d1b2aaa47d8b3a7e1",
            "node_id": "C_kwDOAhr4b9oAKGVjNzk0OWU5ZWJlZWUyMWJjNzcyMDM2ZDFiMmFhYTQ3ZDhiM2E3ZTE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cafb4db3ee2a688c421fa8f1995d97c4ce82fa4c",
                    "sha": "cafb4db3ee2a688c421fa8f1995d97c4ce82fa4c",
                    "url": "https://api.github.com/repos/cython/cython/commits/cafb4db3ee2a688c421fa8f1995d97c4ce82fa4c"
                }
            ],
            "sha": "ec7949e9ebeee21bc772036d1b2aaa47d8b3a7e1",
            "url": "https://api.github.com/repos/cython/cython/commits/ec7949e9ebeee21bc772036d1b2aaa47d8b3a7e1"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/989b278bc8640d6b23e501e25f7276a083b0da74/comments",
            "commit": {
                "author": {
                    "date": "2022-05-31T19:54:47Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-05-31T19:54:47Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'scanning-restore-state' into parse-match",
                "tree": {
                    "sha": "78577c056a1a201d8a27a807702ca2f5592e0ea3",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/78577c056a1a201d8a27a807702ca2f5592e0ea3"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/989b278bc8640d6b23e501e25f7276a083b0da74",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/989b278bc8640d6b23e501e25f7276a083b0da74",
            "node_id": "C_kwDOAhr4b9oAKDk4OWIyNzhiYzg2NDBkNmIyM2U1MDFlMjVmNzI3NmEwODNiMGRhNzQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ec7949e9ebeee21bc772036d1b2aaa47d8b3a7e1",
                    "sha": "ec7949e9ebeee21bc772036d1b2aaa47d8b3a7e1",
                    "url": "https://api.github.com/repos/cython/cython/commits/ec7949e9ebeee21bc772036d1b2aaa47d8b3a7e1"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/091346acdadd6c71953ebc70a22ece2ec0cb06ef",
                    "sha": "091346acdadd6c71953ebc70a22ece2ec0cb06ef",
                    "url": "https://api.github.com/repos/cython/cython/commits/091346acdadd6c71953ebc70a22ece2ec0cb06ef"
                }
            ],
            "sha": "989b278bc8640d6b23e501e25f7276a083b0da74",
            "url": "https://api.github.com/repos/cython/cython/commits/989b278bc8640d6b23e501e25f7276a083b0da74"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f5c46fe614ea7ff82f31f00e5c52f2fca7d97adc/comments",
            "commit": {
                "author": {
                    "date": "2022-06-01T21:30:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-01T21:30:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Small cleanup",
                "tree": {
                    "sha": "812aa50e7bad1ff569c111e4baa7f0f0c724edf1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/812aa50e7bad1ff569c111e4baa7f0f0c724edf1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f5c46fe614ea7ff82f31f00e5c52f2fca7d97adc",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/f5c46fe614ea7ff82f31f00e5c52f2fca7d97adc",
            "node_id": "C_kwDOAhr4b9oAKGY1YzQ2ZmU2MTRlYTdmZjgyZjMxZjAwZTVjNTJmMmZjYTdkOTdhZGM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/989b278bc8640d6b23e501e25f7276a083b0da74",
                    "sha": "989b278bc8640d6b23e501e25f7276a083b0da74",
                    "url": "https://api.github.com/repos/cython/cython/commits/989b278bc8640d6b23e501e25f7276a083b0da74"
                }
            ],
            "sha": "f5c46fe614ea7ff82f31f00e5c52f2fca7d97adc",
            "url": "https://api.github.com/repos/cython/cython/commits/f5c46fe614ea7ff82f31f00e5c52f2fca7d97adc"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/70b2889f164dba503fb376dfe6215e96187bb710/comments",
            "commit": {
                "author": {
                    "date": "2022-06-01T21:50:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-01T21:50:08Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Handle targets a bit better",
                "tree": {
                    "sha": "bfa584830ce0a37ae4b37f789c59aa2bd7f0e1b9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/bfa584830ce0a37ae4b37f789c59aa2bd7f0e1b9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/70b2889f164dba503fb376dfe6215e96187bb710",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/70b2889f164dba503fb376dfe6215e96187bb710",
            "node_id": "C_kwDOAhr4b9oAKDcwYjI4ODlmMTY0ZGJhNTAzZmIzNzZkZmU2MjE1ZTk2MTg3YmI3MTA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f5c46fe614ea7ff82f31f00e5c52f2fca7d97adc",
                    "sha": "f5c46fe614ea7ff82f31f00e5c52f2fca7d97adc",
                    "url": "https://api.github.com/repos/cython/cython/commits/f5c46fe614ea7ff82f31f00e5c52f2fca7d97adc"
                }
            ],
            "sha": "70b2889f164dba503fb376dfe6215e96187bb710",
            "url": "https://api.github.com/repos/cython/cython/commits/70b2889f164dba503fb376dfe6215e96187bb710"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/70085209a32dd1cc5263ba2f8227e41f5059272a/comments",
            "commit": {
                "author": {
                    "date": "2022-06-05T08:34:06Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-05T08:34:25Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Moved pattern match to its own file",
                "tree": {
                    "sha": "b399ee8842cb0701bca09e10b9dc0bc5c8cfb440",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b399ee8842cb0701bca09e10b9dc0bc5c8cfb440"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/70085209a32dd1cc5263ba2f8227e41f5059272a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/70085209a32dd1cc5263ba2f8227e41f5059272a",
            "node_id": "C_kwDOAhr4b9oAKDcwMDg1MjA5YTMyZGQxY2M1MjYzYmEyZjgyMjdlNDFmNTA1OTI3MmE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/70b2889f164dba503fb376dfe6215e96187bb710",
                    "sha": "70b2889f164dba503fb376dfe6215e96187bb710",
                    "url": "https://api.github.com/repos/cython/cython/commits/70b2889f164dba503fb376dfe6215e96187bb710"
                }
            ],
            "sha": "70085209a32dd1cc5263ba2f8227e41f5059272a",
            "url": "https://api.github.com/repos/cython/cython/commits/70085209a32dd1cc5263ba2f8227e41f5059272a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8871b10b5a1d472f31c3c12ab48e1aad12c34087/comments",
            "commit": {
                "author": {
                    "date": "2022-06-05T08:35:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-05T08:35:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Reformatted with \"black\"",
                "tree": {
                    "sha": "92669545f28e08b7c9ed332b8dba891b7f1d1a03",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/92669545f28e08b7c9ed332b8dba891b7f1d1a03"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8871b10b5a1d472f31c3c12ab48e1aad12c34087",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/8871b10b5a1d472f31c3c12ab48e1aad12c34087",
            "node_id": "C_kwDOAhr4b9oAKDg4NzFiMTBiNWExZDQ3MmYzMWMzYzEyYWI0OGUxYWFkMTJjMzQwODc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/70085209a32dd1cc5263ba2f8227e41f5059272a",
                    "sha": "70085209a32dd1cc5263ba2f8227e41f5059272a",
                    "url": "https://api.github.com/repos/cython/cython/commits/70085209a32dd1cc5263ba2f8227e41f5059272a"
                }
            ],
            "sha": "8871b10b5a1d472f31c3c12ab48e1aad12c34087",
            "url": "https://api.github.com/repos/cython/cython/commits/8871b10b5a1d472f31c3c12ab48e1aad12c34087"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ec1c145c2f628fc59b42b817e443236fa7b96cbd/comments",
            "commit": {
                "author": {
                    "date": "2022-06-05T09:53:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-05T09:53:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Or pattern irrefutibility",
                "tree": {
                    "sha": "92a70e74b059ee0eea350acaba6a467b206f0957",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/92a70e74b059ee0eea350acaba6a467b206f0957"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ec1c145c2f628fc59b42b817e443236fa7b96cbd",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/ec1c145c2f628fc59b42b817e443236fa7b96cbd",
            "node_id": "C_kwDOAhr4b9oAKGVjMWMxNDVjMmY2MjhmYzU5YjQyYjgxN2U0NDMyMzZmYTdiOTZjYmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8871b10b5a1d472f31c3c12ab48e1aad12c34087",
                    "sha": "8871b10b5a1d472f31c3c12ab48e1aad12c34087",
                    "url": "https://api.github.com/repos/cython/cython/commits/8871b10b5a1d472f31c3c12ab48e1aad12c34087"
                }
            ],
            "sha": "ec1c145c2f628fc59b42b817e443236fa7b96cbd",
            "url": "https://api.github.com/repos/cython/cython/commits/ec1c145c2f628fc59b42b817e443236fa7b96cbd"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e3aaf02beb7961d3575414dd62fe0b8c85a41593/comments",
            "commit": {
                "author": {
                    "date": "2022-06-05T10:35:36Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-05T10:35:36Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Code comment fix",
                "tree": {
                    "sha": "6544de4f0914d170a7526be5f4332c79dbca0797",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/6544de4f0914d170a7526be5f4332c79dbca0797"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e3aaf02beb7961d3575414dd62fe0b8c85a41593",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/e3aaf02beb7961d3575414dd62fe0b8c85a41593",
            "node_id": "C_kwDOAhr4b9oAKGUzYWFmMDJiZWI3OTYxZDM1NzU0MTRkZDYyZmUwYjhjODVhNDE1OTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ec1c145c2f628fc59b42b817e443236fa7b96cbd",
                    "sha": "ec1c145c2f628fc59b42b817e443236fa7b96cbd",
                    "url": "https://api.github.com/repos/cython/cython/commits/ec1c145c2f628fc59b42b817e443236fa7b96cbd"
                }
            ],
            "sha": "e3aaf02beb7961d3575414dd62fe0b8c85a41593",
            "url": "https://api.github.com/repos/cython/cython/commits/e3aaf02beb7961d3575414dd62fe0b8c85a41593"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fddb1822d507130850ad53f4c53423ee30603fbd/comments",
            "commit": {
                "author": {
                    "date": "2022-06-05T14:43:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-05T14:43:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Remove copy in Nodes.py",
                "tree": {
                    "sha": "2d92372732839db43c94e7257ceb826a1ad90105",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2d92372732839db43c94e7257ceb826a1ad90105"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fddb1822d507130850ad53f4c53423ee30603fbd",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/fddb1822d507130850ad53f4c53423ee30603fbd",
            "node_id": "C_kwDOAhr4b9oAKGZkZGIxODIyZDUwNzEzMDg1MGFkNTNmNGM1MzQyM2VlMzA2MDNmYmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e3aaf02beb7961d3575414dd62fe0b8c85a41593",
                    "sha": "e3aaf02beb7961d3575414dd62fe0b8c85a41593",
                    "url": "https://api.github.com/repos/cython/cython/commits/e3aaf02beb7961d3575414dd62fe0b8c85a41593"
                }
            ],
            "sha": "fddb1822d507130850ad53f4c53423ee30603fbd",
            "url": "https://api.github.com/repos/cython/cython/commits/fddb1822d507130850ad53f4c53423ee30603fbd"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ccb540bb5afd9f79968c1936f3a25a22d3895664/comments",
            "commit": {
                "author": {
                    "date": "2022-06-06T18:39:02Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-06T18:40:46Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Handle \"group patterns\" better\n\nThey can generate multiple \"as_targets\"",
                "tree": {
                    "sha": "68be83d4fdd7c927a5ea9b431f9daa7ae49e6b21",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/68be83d4fdd7c927a5ea9b431f9daa7ae49e6b21"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ccb540bb5afd9f79968c1936f3a25a22d3895664",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/ccb540bb5afd9f79968c1936f3a25a22d3895664",
            "node_id": "C_kwDOAhr4b9oAKGNjYjU0MGJiNWFmZDlmNzk5NjhjMTkzNmYzYTI1YTIyZDM4OTU2NjQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fddb1822d507130850ad53f4c53423ee30603fbd",
                    "sha": "fddb1822d507130850ad53f4c53423ee30603fbd",
                    "url": "https://api.github.com/repos/cython/cython/commits/fddb1822d507130850ad53f4c53423ee30603fbd"
                }
            ],
            "sha": "ccb540bb5afd9f79968c1936f3a25a22d3895664",
            "url": "https://api.github.com/repos/cython/cython/commits/ccb540bb5afd9f79968c1936f3a25a22d3895664"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7c9f67910babad0efcf31960db1513ac398cb4b2/comments",
            "commit": {
                "author": {
                    "date": "2022-06-15T21:02:45Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-15T21:03:34Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix sign mistake in parsing",
                "tree": {
                    "sha": "b596bfe9896ee680ca8f5ba22f8c6876aba7673a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b596bfe9896ee680ca8f5ba22f8c6876aba7673a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7c9f67910babad0efcf31960db1513ac398cb4b2",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/7c9f67910babad0efcf31960db1513ac398cb4b2",
            "node_id": "C_kwDOAhr4b9oAKDdjOWY2NzkxMGJhYmFkMGVmY2YzMTk2MGRiMTUxM2FjMzk4Y2I0YjI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ccb540bb5afd9f79968c1936f3a25a22d3895664",
                    "sha": "ccb540bb5afd9f79968c1936f3a25a22d3895664",
                    "url": "https://api.github.com/repos/cython/cython/commits/ccb540bb5afd9f79968c1936f3a25a22d3895664"
                }
            ],
            "sha": "7c9f67910babad0efcf31960db1513ac398cb4b2",
            "url": "https://api.github.com/repos/cython/cython/commits/7c9f67910babad0efcf31960db1513ac398cb4b2"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2277c3345ed81770166a0f457c77e3b01b26f994/comments",
            "commit": {
                "author": {
                    "date": "2022-06-18T09:10:02Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-18T09:10:02Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Improve pattern identification\n\nSome types of pattern are unambiguous so don't need backtracking",
                "tree": {
                    "sha": "b11e694dcec8f145fc375062839ad0646a3644f1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b11e694dcec8f145fc375062839ad0646a3644f1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2277c3345ed81770166a0f457c77e3b01b26f994",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/2277c3345ed81770166a0f457c77e3b01b26f994",
            "node_id": "C_kwDOAhr4b9oAKDIyNzdjMzM0NWVkODE3NzAxNjZhMGY0NTdjNzdlM2IwMWIyNmY5OTQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7c9f67910babad0efcf31960db1513ac398cb4b2",
                    "sha": "7c9f67910babad0efcf31960db1513ac398cb4b2",
                    "url": "https://api.github.com/repos/cython/cython/commits/7c9f67910babad0efcf31960db1513ac398cb4b2"
                }
            ],
            "sha": "2277c3345ed81770166a0f457c77e3b01b26f994",
            "url": "https://api.github.com/repos/cython/cython/commits/2277c3345ed81770166a0f457c77e3b01b26f994"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d2d25a25c2a5b526fba1b907138bd9dcb4476ef5/comments",
            "commit": {
                "author": {
                    "date": "2022-06-19T18:37:25Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-06-19T18:37:25Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "+ NUMBER isn't a valid pattern",
                "tree": {
                    "sha": "b207327b65b8918eb73e23eb6d8c29cf8594bb59",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b207327b65b8918eb73e23eb6d8c29cf8594bb59"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d2d25a25c2a5b526fba1b907138bd9dcb4476ef5",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/d2d25a25c2a5b526fba1b907138bd9dcb4476ef5",
            "node_id": "C_kwDOAhr4b9oAKGQyZDI1YTI1YzJhNWI1MjZmYmExYjkwNzEzOGJkOWRjYjQ0NzZlZjU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2277c3345ed81770166a0f457c77e3b01b26f994",
                    "sha": "2277c3345ed81770166a0f457c77e3b01b26f994",
                    "url": "https://api.github.com/repos/cython/cython/commits/2277c3345ed81770166a0f457c77e3b01b26f994"
                }
            ],
            "sha": "d2d25a25c2a5b526fba1b907138bd9dcb4476ef5",
            "url": "https://api.github.com/repos/cython/cython/commits/d2d25a25c2a5b526fba1b907138bd9dcb4476ef5"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9a1aa9e9b91f1eb6dea2932060478fdfdffb3a18/comments",
            "commit": {
                "author": {
                    "date": "2022-07-16T15:50:42Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-16T15:50:42Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge branch 'master' into parse-match",
                "tree": {
                    "sha": "e0846c669361b5d1784d7872ff5ee7e1d707d451",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e0846c669361b5d1784d7872ff5ee7e1d707d451"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9a1aa9e9b91f1eb6dea2932060478fdfdffb3a18",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/9a1aa9e9b91f1eb6dea2932060478fdfdffb3a18",
            "node_id": "C_kwDOAhr4b9oAKDlhMWFhOWU5YjkxZjFlYjZkZWEyOTMyMDYwNDc4ZmRmZGZmYjNhMTg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d2d25a25c2a5b526fba1b907138bd9dcb4476ef5",
                    "sha": "d2d25a25c2a5b526fba1b907138bd9dcb4476ef5",
                    "url": "https://api.github.com/repos/cython/cython/commits/d2d25a25c2a5b526fba1b907138bd9dcb4476ef5"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/1777f13461f971d064bd1644b02d92b350e6e7d1",
                    "sha": "1777f13461f971d064bd1644b02d92b350e6e7d1",
                    "url": "https://api.github.com/repos/cython/cython/commits/1777f13461f971d064bd1644b02d92b350e6e7d1"
                }
            ],
            "sha": "9a1aa9e9b91f1eb6dea2932060478fdfdffb3a18",
            "url": "https://api.github.com/repos/cython/cython/commits/9a1aa9e9b91f1eb6dea2932060478fdfdffb3a18"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fe17d9533d13edf873674a946b9cdf788640428e/comments",
            "commit": {
                "author": {
                    "date": "2022-07-16T16:18:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-16T16:18:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Update to reflect named_expr refactor",
                "tree": {
                    "sha": "258e1b6d34d8a00f8522c4f501b032f2cca6343e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/258e1b6d34d8a00f8522c4f501b032f2cca6343e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fe17d9533d13edf873674a946b9cdf788640428e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/fe17d9533d13edf873674a946b9cdf788640428e",
            "node_id": "C_kwDOAhr4b9oAKGZlMTdkOTUzM2QxM2VkZjg3MzY3NGE5NDZiOWNkZjc4ODY0MDQyOGU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9a1aa9e9b91f1eb6dea2932060478fdfdffb3a18",
                    "sha": "9a1aa9e9b91f1eb6dea2932060478fdfdffb3a18",
                    "url": "https://api.github.com/repos/cython/cython/commits/9a1aa9e9b91f1eb6dea2932060478fdfdffb3a18"
                }
            ],
            "sha": "fe17d9533d13edf873674a946b9cdf788640428e",
            "url": "https://api.github.com/repos/cython/cython/commits/fe17d9533d13edf873674a946b9cdf788640428e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/da2732fccdfe38598f45c2a70fbeb6f1faa2df7e/comments",
            "commit": {
                "author": {
                    "date": "2022-07-17T09:48:52Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-17T09:48:52Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "4ff77754ed19cf8672d0004da361b55da141bad6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4ff77754ed19cf8672d0004da361b55da141bad6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/da2732fccdfe38598f45c2a70fbeb6f1faa2df7e",
                "verification": {
                    "payload": "tree 4ff77754ed19cf8672d0004da361b55da141bad6\nparent fe17d9533d13edf873674a946b9cdf788640428e\nauthor da-woods <dw-git@d-woods.co.uk> 1658051332 +0100\ncommitter GitHub <noreply@github.com> 1658051332 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi09sECRBK7hj4Ov3rIwAA5FkIAA28uKaIU1/mQUso+gwtf5dK\nin8w4onjgm9RO4F7MnFxVfIqNkp4d4NGoWxs1gdRqey62ahMPMnNs8AFWB61eMEq\nB/kzz0mqHzG0I+NX4DyygV+3GQpFv0LSfz9Gdb8hEkL60MQw3Yjl8iU4LlmpgoUN\n60p2G8vBca69j2JL2FOH0kp6JgFQHHZ4FPCGqdmoh7dQ3WsHazMRVDJoglaUjY9s\nWC2oSpMRjRiccYox81GVjYiNcwuORy/B9mHiLr0PUIcBq7k91QlbaNCMrD9hlPZM\n/LDFPsMGRUVCMpNnrw5stlNPE4ZSO38jidaURaTiwyMgIsR9k4OcDZlm+kXPHlg=\n=z2Qo\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/da2732fccdfe38598f45c2a70fbeb6f1faa2df7e",
            "node_id": "C_kwDOAhr4b9oAKGRhMjczMmZjY2RmZTM4NTk4ZjQ1YzJhNzBmYmViNmYxZmFhMmRmN2U",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fe17d9533d13edf873674a946b9cdf788640428e",
                    "sha": "fe17d9533d13edf873674a946b9cdf788640428e",
                    "url": "https://api.github.com/repos/cython/cython/commits/fe17d9533d13edf873674a946b9cdf788640428e"
                }
            ],
            "sha": "da2732fccdfe38598f45c2a70fbeb6f1faa2df7e",
            "url": "https://api.github.com/repos/cython/cython/commits/da2732fccdfe38598f45c2a70fbeb6f1faa2df7e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5e8e5a490a0721fbb86f422e366c725051ffc74f/comments",
            "commit": {
                "author": {
                    "date": "2022-07-17T09:49:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-17T09:49:58Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply one more suggestion\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "ac3adb9fbab6c87b57631acf9fdc35a922ae7699",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ac3adb9fbab6c87b57631acf9fdc35a922ae7699"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5e8e5a490a0721fbb86f422e366c725051ffc74f",
                "verification": {
                    "payload": "tree ac3adb9fbab6c87b57631acf9fdc35a922ae7699\nparent da2732fccdfe38598f45c2a70fbeb6f1faa2df7e\nauthor da-woods <dw-git@d-woods.co.uk> 1658051398 +0100\ncommitter GitHub <noreply@github.com> 1658051398 +0100\n\nApply one more suggestion\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi09tGCRBK7hj4Ov3rIwAAocwIAISbQqxtn1cVmofAhwozmm0r\nyJODC1igPmbDGB5a0K+7F3SDGxDbc6qvhx242s/KW1zvHAaMGhNx9C5liGyZEY7N\nOH/tjFr8dOz3O+h1mnnC+OrRKq+U/GyLinGZ7+V4NDvZLri/Ch3aSDu9oxHU78VM\n4zNI9c6KhUy7di4PgZFl5Ytt1yL+AnXkplvb4HUUUjZorrH616qZp3+1NJn6f8Zd\njOTNWXXqmHCE5gd47AgaqeFwGok/Zo8cgpk50kWJKoHm43j5weZNEct7ZZ1CQNH6\noTjv9lPpgoOV8sjurorwtm+2DmKR9tD+d1wukXm9PyEqNW66b/ZA8HvVH5uDPwo=\n=q+iV\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/5e8e5a490a0721fbb86f422e366c725051ffc74f",
            "node_id": "C_kwDOAhr4b9oAKDVlOGU1YTQ5MGEwNzIxZmJiODZmNDIyZTM2NmM3MjUwNTFmZmM3NGY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/da2732fccdfe38598f45c2a70fbeb6f1faa2df7e",
                    "sha": "da2732fccdfe38598f45c2a70fbeb6f1faa2df7e",
                    "url": "https://api.github.com/repos/cython/cython/commits/da2732fccdfe38598f45c2a70fbeb6f1faa2df7e"
                }
            ],
            "sha": "5e8e5a490a0721fbb86f422e366c725051ffc74f",
            "url": "https://api.github.com/repos/cython/cython/commits/5e8e5a490a0721fbb86f422e366c725051ffc74f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b1ffd71c4af5888173fda64b2bca43f709b6893a/comments",
            "commit": {
                "author": {
                    "date": "2022-07-17T09:28:32Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-17T10:00:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Tiny comment fixes",
                "tree": {
                    "sha": "21fb5d9bcd28b13a20e7ef75cc69df71aa1acee0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/21fb5d9bcd28b13a20e7ef75cc69df71aa1acee0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b1ffd71c4af5888173fda64b2bca43f709b6893a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/b1ffd71c4af5888173fda64b2bca43f709b6893a",
            "node_id": "C_kwDOAhr4b9oAKGIxZmZkNzFjNGFmNTg4ODE3M2ZkYTY0YjJiY2E0M2Y3MDliNjg5M2E",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5e8e5a490a0721fbb86f422e366c725051ffc74f",
                    "sha": "5e8e5a490a0721fbb86f422e366c725051ffc74f",
                    "url": "https://api.github.com/repos/cython/cython/commits/5e8e5a490a0721fbb86f422e366c725051ffc74f"
                }
            ],
            "sha": "b1ffd71c4af5888173fda64b2bca43f709b6893a",
            "url": "https://api.github.com/repos/cython/cython/commits/b1ffd71c4af5888173fda64b2bca43f709b6893a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9924b689f3f6160f48dbf7a17df0f0b9f277f583/comments",
            "commit": {
                "author": {
                    "date": "2022-07-17T10:18:06Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-17T10:18:06Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Updated test_patma to match most recent CPython",
                "tree": {
                    "sha": "d524a441a67a40f908de3a794a56852020c5b44d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d524a441a67a40f908de3a794a56852020c5b44d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9924b689f3f6160f48dbf7a17df0f0b9f277f583",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/9924b689f3f6160f48dbf7a17df0f0b9f277f583",
            "node_id": "C_kwDOAhr4b9oAKDk5MjRiNjg5ZjNmNjE2MGY0OGRiZjdhMTdkZjBmMGI5ZjI3N2Y1ODM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b1ffd71c4af5888173fda64b2bca43f709b6893a",
                    "sha": "b1ffd71c4af5888173fda64b2bca43f709b6893a",
                    "url": "https://api.github.com/repos/cython/cython/commits/b1ffd71c4af5888173fda64b2bca43f709b6893a"
                }
            ],
            "sha": "9924b689f3f6160f48dbf7a17df0f0b9f277f583",
            "url": "https://api.github.com/repos/cython/cython/commits/9924b689f3f6160f48dbf7a17df0f0b9f277f583"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e14e3308b47ed7b4e84646241d21cb3061d422e6/comments",
            "commit": {
                "author": {
                    "date": "2022-07-17T10:48:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-17T10:48:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Make disabling returns easier to find",
                "tree": {
                    "sha": "0f2bf57bcc23ae18feeeecf17bb5c127b2b9bb7d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/0f2bf57bcc23ae18feeeecf17bb5c127b2b9bb7d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e14e3308b47ed7b4e84646241d21cb3061d422e6",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/e14e3308b47ed7b4e84646241d21cb3061d422e6",
            "node_id": "C_kwDOAhr4b9oAKGUxNGUzMzA4YjQ3ZWQ3YjRlODQ2NDYyNDFkMjFjYjMwNjFkNDIyZTY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9924b689f3f6160f48dbf7a17df0f0b9f277f583",
                    "sha": "9924b689f3f6160f48dbf7a17df0f0b9f277f583",
                    "url": "https://api.github.com/repos/cython/cython/commits/9924b689f3f6160f48dbf7a17df0f0b9f277f583"
                }
            ],
            "sha": "e14e3308b47ed7b4e84646241d21cb3061d422e6",
            "url": "https://api.github.com/repos/cython/cython/commits/e14e3308b47ed7b4e84646241d21cb3061d422e6"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4989461fa51c8cb99c94476f8cdc446f1ff82ab8/comments",
            "commit": {
                "author": {
                    "date": "2022-07-17T11:02:12Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-17T11:02:12Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "A bit of spacing for readability",
                "tree": {
                    "sha": "47d190a25547fd2a113f81af0f6ebe527da04215",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/47d190a25547fd2a113f81af0f6ebe527da04215"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4989461fa51c8cb99c94476f8cdc446f1ff82ab8",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/4989461fa51c8cb99c94476f8cdc446f1ff82ab8",
            "node_id": "C_kwDOAhr4b9oAKDQ5ODk0NjFmYTUxYzhjYjk5Yzk0NDc2ZjhjZGM0NDZmMWZmODJhYjg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e14e3308b47ed7b4e84646241d21cb3061d422e6",
                    "sha": "e14e3308b47ed7b4e84646241d21cb3061d422e6",
                    "url": "https://api.github.com/repos/cython/cython/commits/e14e3308b47ed7b4e84646241d21cb3061d422e6"
                }
            ],
            "sha": "4989461fa51c8cb99c94476f8cdc446f1ff82ab8",
            "url": "https://api.github.com/repos/cython/cython/commits/4989461fa51c8cb99c94476f8cdc446f1ff82ab8"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3a919f5cb689ac0e72d4431515ab27171f2e1d72/comments",
            "commit": {
                "author": {
                    "date": "2022-07-17T11:20:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-17T11:20:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "setup enum34 on pypy2.7",
                "tree": {
                    "sha": "f345e6fffa9a067cd3c7f197ec7091831636fe05",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f345e6fffa9a067cd3c7f197ec7091831636fe05"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3a919f5cb689ac0e72d4431515ab27171f2e1d72",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/3a919f5cb689ac0e72d4431515ab27171f2e1d72",
            "node_id": "C_kwDOAhr4b9oAKDNhOTE5ZjVjYjY4OWFjMGU3MmQ0NDMxNTE1YWIyNzE3MWYyZTFkNzI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4989461fa51c8cb99c94476f8cdc446f1ff82ab8",
                    "sha": "4989461fa51c8cb99c94476f8cdc446f1ff82ab8",
                    "url": "https://api.github.com/repos/cython/cython/commits/4989461fa51c8cb99c94476f8cdc446f1ff82ab8"
                }
            ],
            "sha": "3a919f5cb689ac0e72d4431515ab27171f2e1d72",
            "url": "https://api.github.com/repos/cython/cython/commits/3a919f5cb689ac0e72d4431515ab27171f2e1d72"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7183d4896804bb7364e296d9146722a41a0a4d56/comments",
            "commit": {
                "author": {
                    "date": "2022-07-17T11:20:14Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-17T17:55:30Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Change compile tests to use TreeFragment\n\nand fix a few tests",
                "tree": {
                    "sha": "ecc9b07c72de805ce053717308875f87b378c322",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ecc9b07c72de805ce053717308875f87b378c322"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7183d4896804bb7364e296d9146722a41a0a4d56",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/7183d4896804bb7364e296d9146722a41a0a4d56",
            "node_id": "C_kwDOAhr4b9oAKDcxODNkNDg5NjgwNGJiNzM2NGUyOTZkOTE0NjcyMmE0MWEwYTRkNTY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3a919f5cb689ac0e72d4431515ab27171f2e1d72",
                    "sha": "3a919f5cb689ac0e72d4431515ab27171f2e1d72",
                    "url": "https://api.github.com/repos/cython/cython/commits/3a919f5cb689ac0e72d4431515ab27171f2e1d72"
                }
            ],
            "sha": "7183d4896804bb7364e296d9146722a41a0a4d56",
            "url": "https://api.github.com/repos/cython/cython/commits/7183d4896804bb7364e296d9146722a41a0a4d56"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/771051ab77593b507b91e8041da0c293a5e9dd13/comments",
            "commit": {
                "author": {
                    "date": "2022-07-17T17:59:06Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-17T17:59:06Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Added a NULL test",
                "tree": {
                    "sha": "fa9df5c00fa0a3b1307d23f1687a25b569407a63",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/fa9df5c00fa0a3b1307d23f1687a25b569407a63"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/771051ab77593b507b91e8041da0c293a5e9dd13",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/771051ab77593b507b91e8041da0c293a5e9dd13",
            "node_id": "C_kwDOAhr4b9oAKDc3MTA1MWFiNzc1OTNiNTA3YjkxZTgwNDFkYTBjMjkzYTVlOWRkMTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7183d4896804bb7364e296d9146722a41a0a4d56",
                    "sha": "7183d4896804bb7364e296d9146722a41a0a4d56",
                    "url": "https://api.github.com/repos/cython/cython/commits/7183d4896804bb7364e296d9146722a41a0a4d56"
                }
            ],
            "sha": "771051ab77593b507b91e8041da0c293a5e9dd13",
            "url": "https://api.github.com/repos/cython/cython/commits/771051ab77593b507b91e8041da0c293a5e9dd13"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/34b72dc6fc511c900d0e27c415550fd625c4d724/comments",
            "commit": {
                "author": {
                    "date": "2022-07-17T20:18:54Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-17T20:18:54Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Substitute subtest of Python 2.7",
                "tree": {
                    "sha": "62e2847a7e55fefbd3bdf3d447a5da0db95e95c5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/62e2847a7e55fefbd3bdf3d447a5da0db95e95c5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/34b72dc6fc511c900d0e27c415550fd625c4d724",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/34b72dc6fc511c900d0e27c415550fd625c4d724",
            "node_id": "C_kwDOAhr4b9oAKDM0YjcyZGM2ZmM1MTFjOTAwZDBlMjdjNDE1NTUwZmQ2MjVjNGQ3MjQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/771051ab77593b507b91e8041da0c293a5e9dd13",
                    "sha": "771051ab77593b507b91e8041da0c293a5e9dd13",
                    "url": "https://api.github.com/repos/cython/cython/commits/771051ab77593b507b91e8041da0c293a5e9dd13"
                }
            ],
            "sha": "34b72dc6fc511c900d0e27c415550fd625c4d724",
            "url": "https://api.github.com/repos/cython/cython/commits/34b72dc6fc511c900d0e27c415550fd625c4d724"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/23972a4aeaab166a173797c08f371ada8231614d/comments",
            "commit": {
                "author": {
                    "date": "2022-07-31T18:59:56Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-31T18:59:56Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Moved \"_compile\" to shared test util",
                "tree": {
                    "sha": "15eb43d0a52fbd9acab1ba73ec09c15e98b83075",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/15eb43d0a52fbd9acab1ba73ec09c15e98b83075"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/23972a4aeaab166a173797c08f371ada8231614d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/23972a4aeaab166a173797c08f371ada8231614d",
            "node_id": "C_kwDOAhr4b9oAKDIzOTcyYTRhZWFhYjE2NmExNzM3OTdjMDhmMzcxYWRhODIzMTYxNGQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/34b72dc6fc511c900d0e27c415550fd625c4d724",
                    "sha": "34b72dc6fc511c900d0e27c415550fd625c4d724",
                    "url": "https://api.github.com/repos/cython/cython/commits/34b72dc6fc511c900d0e27c415550fd625c4d724"
                }
            ],
            "sha": "23972a4aeaab166a173797c08f371ada8231614d",
            "url": "https://api.github.com/repos/cython/cython/commits/23972a4aeaab166a173797c08f371ada8231614d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e4ad14fa103dd94d2f1747a9a6b852bbb0a59cfb/comments",
            "commit": {
                "author": {
                    "date": "2022-07-31T19:33:00Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-31T19:33:00Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "indent Tools/ci-run.sh\n\nCo-authored-by: 0dminnimda <0dminnimda@gmail.com>",
                "tree": {
                    "sha": "a65229f6b7806d5bafabab58cf980193222d65f6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a65229f6b7806d5bafabab58cf980193222d65f6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e4ad14fa103dd94d2f1747a9a6b852bbb0a59cfb",
                "verification": {
                    "payload": "tree a65229f6b7806d5bafabab58cf980193222d65f6\nparent 34b72dc6fc511c900d0e27c415550fd625c4d724\nauthor da-woods <dw-git@d-woods.co.uk> 1659295980 +0100\ncommitter GitHub <noreply@github.com> 1659295980 +0100\n\nindent Tools/ci-run.sh\n\nCo-authored-by: 0dminnimda <0dminnimda@gmail.com>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5tjsCRBK7hj4Ov3rIwAAztQIABQiX9Ldk/TPhX37OCP8qs7D\ncO1Jde/vMVzYAVu18ijYndr2hGganbdvqNLDnT8yNwmbc7WHLq0xf3Vz3JrTqAP5\ni9ItTp0xcprd1lg36An+Iu4u2RrN2UB2dwDeMPuBwKviVpojgOd0Ps6sJFLCpaSn\n5hCO/bhm8dRSA9woQLE6YvRI15ZnSCB+Ug6JLc8N6pKCcRo05VlSjQn5mR4HQBJa\nmYCjFjMs6at5R2nDr+TEd1BcJWY3ivDmgtA8TwrFz7nZ9qDYYVOQ10L38peQKpKc\nAu7SQnXYNiwK+DoYQpLFVXfyLec1xzP22H9Jn7boHrh0KPS3roUmWlQo+83FlTk=\n=rG8T\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/e4ad14fa103dd94d2f1747a9a6b852bbb0a59cfb",
            "node_id": "C_kwDOAhr4b9oAKGU0YWQxNGZhMTAzZGQ5NGQyZjE3NDdhOWE2Yjg1MmJiYjBhNTljZmI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/34b72dc6fc511c900d0e27c415550fd625c4d724",
                    "sha": "34b72dc6fc511c900d0e27c415550fd625c4d724",
                    "url": "https://api.github.com/repos/cython/cython/commits/34b72dc6fc511c900d0e27c415550fd625c4d724"
                }
            ],
            "sha": "e4ad14fa103dd94d2f1747a9a6b852bbb0a59cfb",
            "url": "https://api.github.com/repos/cython/cython/commits/e4ad14fa103dd94d2f1747a9a6b852bbb0a59cfb"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1bb1210126ed17638e7a73b570bde927a45d2a27/comments",
            "commit": {
                "author": {
                    "date": "2022-07-31T19:54:19Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-31T19:54:19Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Rename variable in parser",
                "tree": {
                    "sha": "c22da1554000db347655fc5c757be516df57984a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c22da1554000db347655fc5c757be516df57984a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1bb1210126ed17638e7a73b570bde927a45d2a27",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/1bb1210126ed17638e7a73b570bde927a45d2a27",
            "node_id": "C_kwDOAhr4b9oAKDFiYjEyMTAxMjZlZDE3NjM4ZTdhNzNiNTcwYmRlOTI3YTQ1ZDJhMjc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/23972a4aeaab166a173797c08f371ada8231614d",
                    "sha": "23972a4aeaab166a173797c08f371ada8231614d",
                    "url": "https://api.github.com/repos/cython/cython/commits/23972a4aeaab166a173797c08f371ada8231614d"
                }
            ],
            "sha": "1bb1210126ed17638e7a73b570bde927a45d2a27",
            "url": "https://api.github.com/repos/cython/cython/commits/1bb1210126ed17638e7a73b570bde927a45d2a27"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f7861ad3046ebfd51f40ca951214ce5f610af2d3/comments",
            "commit": {
                "author": {
                    "date": "2022-07-31T20:03:33Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-07-31T20:03:33Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge remote-tracking branch 'origin/parse-match' into parse-match",
                "tree": {
                    "sha": "41bf1080cbc6ef59d76c45bc4ceb3bf845ee04ac",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/41bf1080cbc6ef59d76c45bc4ceb3bf845ee04ac"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f7861ad3046ebfd51f40ca951214ce5f610af2d3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "node_id": "C_kwDOAhr4b9oAKGY3ODYxYWQzMDQ2ZWJmZDUxZjQwY2E5NTEyMTRjZTVmNjEwYWYyZDM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1bb1210126ed17638e7a73b570bde927a45d2a27",
                    "sha": "1bb1210126ed17638e7a73b570bde927a45d2a27",
                    "url": "https://api.github.com/repos/cython/cython/commits/1bb1210126ed17638e7a73b570bde927a45d2a27"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/e4ad14fa103dd94d2f1747a9a6b852bbb0a59cfb",
                    "sha": "e4ad14fa103dd94d2f1747a9a6b852bbb0a59cfb",
                    "url": "https://api.github.com/repos/cython/cython/commits/e4ad14fa103dd94d2f1747a9a6b852bbb0a59cfb"
                }
            ],
            "sha": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
            "url": "https://api.github.com/repos/cython/cython/commits/f7861ad3046ebfd51f40ca951214ce5f610af2d3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1482bb8d159a8da3d2d7a53886a64602603ec11a/comments",
            "commit": {
                "author": {
                    "date": "2022-08-01T16:58:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-08-01T16:58:24Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "3244d50013ecad96260cc6a8d30cbb84ec3233c3",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3244d50013ecad96260cc6a8d30cbb84ec3233c3"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1482bb8d159a8da3d2d7a53886a64602603ec11a",
                "verification": {
                    "payload": "tree 3244d50013ecad96260cc6a8d30cbb84ec3233c3\nparent f7861ad3046ebfd51f40ca951214ce5f610af2d3\nauthor da-woods <dw-git@d-woods.co.uk> 1659373104 +0100\ncommitter GitHub <noreply@github.com> 1659373104 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6AYwCRBK7hj4Ov3rIwAAVGAIAEW5xlXfOYOzmqZ7fJl3EIAz\n01NKryD07CDJGg9fM/OTC65hclyEpMlnEP4YAwE5Bg5t7jiCsFB8vYlWj4a9NnNd\nRWHBFrZAGTr/etaXimSDnF2pMuOXYd10mssQFqxyb6WkevbRqL3fcMaQfVHLe375\n/7LHFOUFfn1wVL/J2Tur+efjOic6XaNikZn2qYPX6fmFpbKJQrK+09U/fkWv/4Z8\ngGHUySIsGmNdpFFjODvWnGcJ7nOTwU/bUT8Yt39vA23uHVMqvlDFz/mnFX+SpDtc\nnJDOPoZ1O2cAQTM1L3dhSLxKsi9zZTGXsKws35JJXrjchIOhxnib5pMI5NMlX9Q=\n=Tobc\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/1482bb8d159a8da3d2d7a53886a64602603ec11a",
            "node_id": "C_kwDOAhr4b9oAKDE0ODJiYjhkMTU5YThkYTNkMmQ3YTUzODg2YTY0NjAyNjAzZWMxMWE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f7861ad3046ebfd51f40ca951214ce5f610af2d3",
                    "sha": "f7861ad3046ebfd51f40ca951214ce5f610af2d3",
                    "url": "https://api.github.com/repos/cython/cython/commits/f7861ad3046ebfd51f40ca951214ce5f610af2d3"
                }
            ],
            "sha": "1482bb8d159a8da3d2d7a53886a64602603ec11a",
            "url": "https://api.github.com/repos/cython/cython/commits/1482bb8d159a8da3d2d7a53886a64602603ec11a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/57eaf627e5cc3276485ea041cb78aa844e812faf/comments",
            "commit": {
                "author": {
                    "date": "2022-08-01T17:18:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-08-01T17:18:16Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Changes from review (mainly better names)",
                "tree": {
                    "sha": "8edb7df2753cd7cb5d23e7903aa0bfb3b0a39d06",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8edb7df2753cd7cb5d23e7903aa0bfb3b0a39d06"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/57eaf627e5cc3276485ea041cb78aa844e812faf",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/57eaf627e5cc3276485ea041cb78aa844e812faf",
            "node_id": "C_kwDOAhr4b9oAKDU3ZWFmNjI3ZTVjYzMyNzY0ODVlYTA0MWNiNzhhYTg0NGU4MTJmYWY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1482bb8d159a8da3d2d7a53886a64602603ec11a",
                    "sha": "1482bb8d159a8da3d2d7a53886a64602603ec11a",
                    "url": "https://api.github.com/repos/cython/cython/commits/1482bb8d159a8da3d2d7a53886a64602603ec11a"
                }
            ],
            "sha": "57eaf627e5cc3276485ea041cb78aa844e812faf",
            "url": "https://api.github.com/repos/cython/cython/commits/57eaf627e5cc3276485ea041cb78aa844e812faf"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2aac3a01bce5edd6bc519d079f96fe8db4556426/comments",
            "commit": {
                "author": {
                    "date": "2022-08-01T17:32:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-08-01T17:35:19Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Improvements to Parsing.py",
                "tree": {
                    "sha": "542b565541fc94e49161129e64ef413880cdee9f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/542b565541fc94e49161129e64ef413880cdee9f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2aac3a01bce5edd6bc519d079f96fe8db4556426",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/2aac3a01bce5edd6bc519d079f96fe8db4556426",
            "node_id": "C_kwDOAhr4b9oAKDJhYWMzYTAxYmNlNWVkZDZiYzUxOWQwNzlmOTZmZThkYjQ1NTY0MjY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/57eaf627e5cc3276485ea041cb78aa844e812faf",
                    "sha": "57eaf627e5cc3276485ea041cb78aa844e812faf",
                    "url": "https://api.github.com/repos/cython/cython/commits/57eaf627e5cc3276485ea041cb78aa844e812faf"
                }
            ],
            "sha": "2aac3a01bce5edd6bc519d079f96fe8db4556426",
            "url": "https://api.github.com/repos/cython/cython/commits/2aac3a01bce5edd6bc519d079f96fe8db4556426"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9f35805dc92b820e32d85600dd08ba3aa13ede03/comments",
            "commit": {
                "author": {
                    "date": "2022-08-01T17:28:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-08-01T17:35:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Factor out shared bits of p_atom and p_literal_pattern",
                "tree": {
                    "sha": "eb31927fedaee2f07423aa4f4a10aaa96058ba7d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/eb31927fedaee2f07423aa4f4a10aaa96058ba7d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9f35805dc92b820e32d85600dd08ba3aa13ede03",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/9f35805dc92b820e32d85600dd08ba3aa13ede03",
            "node_id": "C_kwDOAhr4b9oAKDlmMzU4MDVkYzkyYjgyMGUzMmQ4NTYwMGRkMDhiYTNhYTEzZWRlMDM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2aac3a01bce5edd6bc519d079f96fe8db4556426",
                    "sha": "2aac3a01bce5edd6bc519d079f96fe8db4556426",
                    "url": "https://api.github.com/repos/cython/cython/commits/2aac3a01bce5edd6bc519d079f96fe8db4556426"
                }
            ],
            "sha": "9f35805dc92b820e32d85600dd08ba3aa13ede03",
            "url": "https://api.github.com/repos/cython/cython/commits/9f35805dc92b820e32d85600dd08ba3aa13ede03"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/28c7ba703ec94181f9924f7f6c13dab3efa88402/comments",
            "commit": {
                "author": {
                    "date": "2022-08-01T18:09:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-08-01T18:09:31Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "PEP8 keyword argument spacing",
                "tree": {
                    "sha": "3cf808463c33be870562ab095ee3572008134763",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3cf808463c33be870562ab095ee3572008134763"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/28c7ba703ec94181f9924f7f6c13dab3efa88402",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/28c7ba703ec94181f9924f7f6c13dab3efa88402",
            "node_id": "C_kwDOAhr4b9oAKDI4YzdiYTcwM2VjOTQxODFmOTkyNGY3ZjZjMTNkYWIzZWZhODg0MDI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9f35805dc92b820e32d85600dd08ba3aa13ede03",
                    "sha": "9f35805dc92b820e32d85600dd08ba3aa13ede03",
                    "url": "https://api.github.com/repos/cython/cython/commits/9f35805dc92b820e32d85600dd08ba3aa13ede03"
                }
            ],
            "sha": "28c7ba703ec94181f9924f7f6c13dab3efa88402",
            "url": "https://api.github.com/repos/cython/cython/commits/28c7ba703ec94181f9924f7f6c13dab3efa88402"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/039a2c244361da1a6a16f28dc6478dd78438d0d5/comments",
            "commit": {
                "author": {
                    "date": "2022-08-01T18:29:00Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-08-01T18:29:53Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Validate f-string in post-parse",
                "tree": {
                    "sha": "e82603c2af9c56f1f8b0ebac4ee0aaa0cac2f87f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e82603c2af9c56f1f8b0ebac4ee0aaa0cac2f87f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/039a2c244361da1a6a16f28dc6478dd78438d0d5",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/039a2c244361da1a6a16f28dc6478dd78438d0d5",
            "node_id": "C_kwDOAhr4b9oAKDAzOWEyYzI0NDM2MWRhMWE2YTE2ZjI4ZGM2NDc4ZGQ3ODQzOGQwZDU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/28c7ba703ec94181f9924f7f6c13dab3efa88402",
                    "sha": "28c7ba703ec94181f9924f7f6c13dab3efa88402",
                    "url": "https://api.github.com/repos/cython/cython/commits/28c7ba703ec94181f9924f7f6c13dab3efa88402"
                }
            ],
            "sha": "039a2c244361da1a6a16f28dc6478dd78438d0d5",
            "url": "https://api.github.com/repos/cython/cython/commits/039a2c244361da1a6a16f28dc6478dd78438d0d5"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7034c959be052664f557128a9299f537b6632582/comments",
            "commit": {
                "author": {
                    "date": "2022-08-02T06:14:35Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-08-02T06:14:35Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "ce106a6df0afb8c2a1253928681fe092334309f0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ce106a6df0afb8c2a1253928681fe092334309f0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7034c959be052664f557128a9299f537b6632582",
                "verification": {
                    "payload": "tree ce106a6df0afb8c2a1253928681fe092334309f0\nparent 039a2c244361da1a6a16f28dc6478dd78438d0d5\nauthor da-woods <dw-git@d-woods.co.uk> 1659420875 +0100\ncommitter GitHub <noreply@github.com> 1659420875 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6MDLCRBK7hj4Ov3rIwAALW8IAAtPYsjdft9DOtwev8eHkoMW\nug59YzPdRiRB8EWenAzUZ3pruBux8tZPv/AyYbWA+vsMth50zSeVvz0qAEDzkWVq\nLsLYgAO0xMc/qYgZIBoh1OS/y23eVRqV0Vqrewh+5gxr6ZEmDzIDreNksrxeBGMq\nHFgj5ltbxBr1BQ3Figa96G3XQsi/idSsJH+tweX0E33bMz8nn/oH8CgJtzAil/PY\nXxtCgsL+kWH79IIzyFGOmOusxMHYYb/eDlkKryJPYGJZjxHu/w8szqs6byUPje/Y\nMSi8z8/R8zcnfoeGHkkNivZ+Q/pZOPFgBNlH5cK9Dic7Z0HT88aByzFlIPDKL1c=\n=MPXq\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/7034c959be052664f557128a9299f537b6632582",
            "node_id": "C_kwDOAhr4b9oAKDcwMzRjOTU5YmUwNTI2NjRmNTU3MTI4YTkyOTlmNTM3YjY2MzI1ODI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/039a2c244361da1a6a16f28dc6478dd78438d0d5",
                    "sha": "039a2c244361da1a6a16f28dc6478dd78438d0d5",
                    "url": "https://api.github.com/repos/cython/cython/commits/039a2c244361da1a6a16f28dc6478dd78438d0d5"
                }
            ],
            "sha": "7034c959be052664f557128a9299f537b6632582",
            "url": "https://api.github.com/repos/cython/cython/commits/7034c959be052664f557128a9299f537b6632582"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/816612e35e05320bf510132c765dde7d4133b2ab/comments",
            "commit": {
                "author": {
                    "date": "2022-08-02T20:03:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-08-02T20:03:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Parsing function names/signatures, flag for in_pattern_node",
                "tree": {
                    "sha": "ef4b449ec3c0f8b58124634793a224ac1a99f030",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ef4b449ec3c0f8b58124634793a224ac1a99f030"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/816612e35e05320bf510132c765dde7d4133b2ab",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/816612e35e05320bf510132c765dde7d4133b2ab",
            "node_id": "C_kwDOAhr4b9oAKDgxNjYxMmUzNWUwNTMyMGJmNTEwMTMyYzc2NWRkZTdkNDEzM2IyYWI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7034c959be052664f557128a9299f537b6632582",
                    "sha": "7034c959be052664f557128a9299f537b6632582",
                    "url": "https://api.github.com/repos/cython/cython/commits/7034c959be052664f557128a9299f537b6632582"
                }
            ],
            "sha": "816612e35e05320bf510132c765dde7d4133b2ab",
            "url": "https://api.github.com/repos/cython/cython/commits/816612e35e05320bf510132c765dde7d4133b2ab"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6a71aa89a88f0ce86d2ede1c70cf7bff02f16900/comments",
            "commit": {
                "author": {
                    "date": "2022-08-02T20:49:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-08-02T20:49:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Add flag to compiled PostParse",
                "tree": {
                    "sha": "b071116d60cb71801119bcfeb57f9920067c0503",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b071116d60cb71801119bcfeb57f9920067c0503"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6a71aa89a88f0ce86d2ede1c70cf7bff02f16900",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/6a71aa89a88f0ce86d2ede1c70cf7bff02f16900",
            "node_id": "C_kwDOAhr4b9oAKDZhNzFhYTg5YTg4ZjBjZTg2ZDJlZGUxYzcwY2Y3YmZmMDJmMTY5MDA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/816612e35e05320bf510132c765dde7d4133b2ab",
                    "sha": "816612e35e05320bf510132c765dde7d4133b2ab",
                    "url": "https://api.github.com/repos/cython/cython/commits/816612e35e05320bf510132c765dde7d4133b2ab"
                }
            ],
            "sha": "6a71aa89a88f0ce86d2ede1c70cf7bff02f16900",
            "url": "https://api.github.com/repos/cython/cython/commits/6a71aa89a88f0ce86d2ede1c70cf7bff02f16900"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4ef752766d8ac28177996d76ec14165fbac90f4e/comments",
            "commit": {
                "author": {
                    "date": "2022-08-03T07:12:37Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-08-03T07:12:37Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Actually add flag to pxd",
                "tree": {
                    "sha": "05942d1c5a8809a057dd5bb9e15d8be8863be66a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/05942d1c5a8809a057dd5bb9e15d8be8863be66a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4ef752766d8ac28177996d76ec14165fbac90f4e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/4ef752766d8ac28177996d76ec14165fbac90f4e",
            "node_id": "C_kwDOAhr4b9oAKDRlZjc1Mjc2NmQ4YWMyODE3Nzk5NmQ3NmVjMTQxNjVmYmFjOTBmNGU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6a71aa89a88f0ce86d2ede1c70cf7bff02f16900",
                    "sha": "6a71aa89a88f0ce86d2ede1c70cf7bff02f16900",
                    "url": "https://api.github.com/repos/cython/cython/commits/6a71aa89a88f0ce86d2ede1c70cf7bff02f16900"
                }
            ],
            "sha": "4ef752766d8ac28177996d76ec14165fbac90f4e",
            "url": "https://api.github.com/repos/cython/cython/commits/4ef752766d8ac28177996d76ec14165fbac90f4e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9299a3fefc6c93bdb11f7fc35025615f5c1c0d56/comments",
            "commit": {
                "author": {
                    "date": "2022-11-17T18:04:15Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-11-17T18:04:15Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into parse-match",
                "tree": {
                    "sha": "40c2a7ce6c3d2bf9576374706280449bc84c93db",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/40c2a7ce6c3d2bf9576374706280449bc84c93db"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9299a3fefc6c93bdb11f7fc35025615f5c1c0d56",
                "verification": {
                    "payload": "tree 40c2a7ce6c3d2bf9576374706280449bc84c93db\nparent 4ef752766d8ac28177996d76ec14165fbac90f4e\nparent 1b028d34d6a3ec82f4687df1e0db598721c7a695\nauthor da-woods <dw-git@d-woods.co.uk> 1668708255 +0000\ncommitter GitHub <noreply@github.com> 1668708255 +0000\n\nMerge branch 'master' into parse-match",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjdnefCRBK7hj4Ov3rIwAAC78IAIs73DAFawyIAwxs3zZzF2Tx\nPPKV63JCX+Ho2pcZ54TYAo9nZtlgzVx9sw+Ya1dZiT+BlWGjMYwgj+L2sXduLeMt\n/apoxffnAzf1gjtt9PeiaMbXT4rUdf1OFu3WTznC+wPn/C0TZf6mFCJ6tmDFyvJE\nEzvXN+jouhZlySglJqxqhKzXI/s0VN0lfewtN3wCyk8xf0TSIV5nRgGr63CHaoq1\noPPOyzsXUNW3gTTwlFPK+cNdYqoA3Zy72H+JWlwzYKuClF0kwEXhHQ0x8DGZ5XoL\nQilrnkIYy2bcbz8BfymsRZ6XrKjrTdbB1TqZ8P06O3Ag3ZGDBjtPCGgvV82ymCQ=\n=RmYX\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/9299a3fefc6c93bdb11f7fc35025615f5c1c0d56",
            "node_id": "C_kwDOAhr4b9oAKDkyOTlhM2ZlZmM2YzkzYmRiMTFmN2ZjMzUwMjU2MTVmNWMxYzBkNTY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4ef752766d8ac28177996d76ec14165fbac90f4e",
                    "sha": "4ef752766d8ac28177996d76ec14165fbac90f4e",
                    "url": "https://api.github.com/repos/cython/cython/commits/4ef752766d8ac28177996d76ec14165fbac90f4e"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/1b028d34d6a3ec82f4687df1e0db598721c7a695",
                    "sha": "1b028d34d6a3ec82f4687df1e0db598721c7a695",
                    "url": "https://api.github.com/repos/cython/cython/commits/1b028d34d6a3ec82f4687df1e0db598721c7a695"
                }
            ],
            "sha": "9299a3fefc6c93bdb11f7fc35025615f5c1c0d56",
            "url": "https://api.github.com/repos/cython/cython/commits/9299a3fefc6c93bdb11f7fc35025615f5c1c0d56"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/82f7e9bfca66144712e2b0f8f05c268737595385/comments",
            "commit": {
                "author": {
                    "date": "2022-11-19T17:35:24Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-11-19T17:36:02Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Avoid crashing due to ErrorNodes",
                "tree": {
                    "sha": "5e7d23c3e4fe2263196c29616f5c72a9d2fd9dcd",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5e7d23c3e4fe2263196c29616f5c72a9d2fd9dcd"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/82f7e9bfca66144712e2b0f8f05c268737595385",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/82f7e9bfca66144712e2b0f8f05c268737595385",
            "node_id": "C_kwDOAhr4b9oAKDgyZjdlOWJmY2E2NjE0NDcxMmUyYjBmOGYwNWMyNjg3Mzc1OTUzODU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9299a3fefc6c93bdb11f7fc35025615f5c1c0d56",
                    "sha": "9299a3fefc6c93bdb11f7fc35025615f5c1c0d56",
                    "url": "https://api.github.com/repos/cython/cython/commits/9299a3fefc6c93bdb11f7fc35025615f5c1c0d56"
                }
            ],
            "sha": "82f7e9bfca66144712e2b0f8f05c268737595385",
            "url": "https://api.github.com/repos/cython/cython/commits/82f7e9bfca66144712e2b0f8f05c268737595385"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/59e978cbd187c4383ba5a54453fd703e019ccc82/comments",
            "commit": {
                "author": {
                    "date": "2023-11-09T20:40:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-11-09T20:40:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge remote-tracking branch 'real_origin/master' into parse-match",
                "tree": {
                    "sha": "e99d2303bc77e71ad09c96ec6e9321d21b8a3b97",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e99d2303bc77e71ad09c96ec6e9321d21b8a3b97"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/59e978cbd187c4383ba5a54453fd703e019ccc82",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/59e978cbd187c4383ba5a54453fd703e019ccc82",
            "node_id": "C_kwDOAhr4b9oAKDU5ZTk3OGNiZDE4N2M0MzgzYmE1YTU0NDUzZmQ3MDNlMDE5Y2NjODI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/82f7e9bfca66144712e2b0f8f05c268737595385",
                    "sha": "82f7e9bfca66144712e2b0f8f05c268737595385",
                    "url": "https://api.github.com/repos/cython/cython/commits/82f7e9bfca66144712e2b0f8f05c268737595385"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/d693e91ed5ceb2a4443669b930ba01a480d61924",
                    "sha": "d693e91ed5ceb2a4443669b930ba01a480d61924",
                    "url": "https://api.github.com/repos/cython/cython/commits/d693e91ed5ceb2a4443669b930ba01a480d61924"
                }
            ],
            "sha": "59e978cbd187c4383ba5a54453fd703e019ccc82",
            "url": "https://api.github.com/repos/cython/cython/commits/59e978cbd187c4383ba5a54453fd703e019ccc82"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ab8f4d53c793bfa33aea4aa75715810a4814ab56/comments",
            "commit": {
                "author": {
                    "date": "2023-11-10T08:04:51Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-11-10T08:04:51Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Spelling",
                "tree": {
                    "sha": "38f060650ef06f20a3492f8ffdfe2947147d58e9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/38f060650ef06f20a3492f8ffdfe2947147d58e9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ab8f4d53c793bfa33aea4aa75715810a4814ab56",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "node_id": "C_kwDOAhr4b9oAKGFiOGY0ZDUzYzc5M2JmYTMzYWVhNGFhNzU3MTU4MTBhNDgxNGFiNTY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/59e978cbd187c4383ba5a54453fd703e019ccc82",
                    "sha": "59e978cbd187c4383ba5a54453fd703e019ccc82",
                    "url": "https://api.github.com/repos/cython/cython/commits/59e978cbd187c4383ba5a54453fd703e019ccc82"
                }
            ],
            "sha": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
            "url": "https://api.github.com/repos/cython/cython/commits/ab8f4d53c793bfa33aea4aa75715810a4814ab56"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/4897/commits",
    "created_at": "2022-07-16T16:24:44Z",
    "diff_url": "https://github.com/cython/cython/pull/4897.diff",
    "draft": false,
    "head": {
        "label": "da-woods:parse-match",
        "ref": "parse-match",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2023-11-10T08:05:03Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 72924,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2022-08-11T09:03:48Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "ab8f4d53c793bfa33aea4aa75715810a4814ab56",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/4897",
    "id": 998457418,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/4897",
    "labels": [
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553653,
            "name": "Parsing",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTM=",
            "url": "https://api.github.com/repos/cython/cython/labels/Parsing"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556315,
            "name": "Python Semantics",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMTU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Python%20Semantics"
        }
    ],
    "locked": false,
    "merge_commit_sha": "5c26d2925344439b18e48122f911105d1496c70d",
    "merged_at": null,
    "milestone": {
        "closed_at": null,
        "closed_issues": 8,
        "created_at": "2019-02-24T14:21:23Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Remove support for Python 2 and Python < 3.8.",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/65",
        "id": 4082235,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/65/labels",
        "node_id": "MDk6TWlsZXN0b25lNDA4MjIzNQ==",
        "number": 65,
        "open_issues": 15,
        "state": "open",
        "title": "3.1",
        "updated_at": "2023-11-09T18:37:40Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/65"
    },
    "node_id": "PR_kwDOABDGAc47g0BK",
    "number": 4897,
    "patch_url": "https://github.com/cython/cython/pull/4897.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/4897/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/ab8f4d53c793bfa33aea4aa75715810a4814ab56",
    "title": "Parse structural pattern matching",
    "updated_at": "2023-11-10T08:05:06Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/4897",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}