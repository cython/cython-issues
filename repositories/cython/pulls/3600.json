{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3600/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3600/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3600"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3600"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3600/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3600"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/4cd18d67b9e5fe9481ab8e4394f858273ba11335"
        }
    },
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1015,
            "forks_count": 1015,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 821,
            "open_issues_count": 821,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2020-05-16T11:59:10Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 58314,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 5165,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2020-05-16T12:20:44Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 5165,
            "watchers_count": 5165
        },
        "sha": "fd71aabe0319ff3ecfa3aee291d13b98d3c6a76e",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Fixes #3536.\r\n\r\nThis also partially fixes #3539 (for the non-negative case) as `with_gil` otherwise regresses (it does `for c in char_ptr[10:]` and if our testsuite relies on it working it seems quite plausible elsewhere does.\r\n\r\nAn alternative fix here would be to special case the `for-in` optimization to not raise a compile-time error of \"C array iteration requires known end index\", but the current fix ensures consistent behaviour across all operations.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423608369"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423608369"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we need to wrap `self.base` in a `CloneNode` to allow the reuse of non-trivial expressions.",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T09:51:17Z",
            "diff_hunk": "@@ -4981,9 +4990,21 @@ def allow_none(node, default_value, env):\n                 if self.start.type.is_pyobject:\n                     self.start = allow_none(self.start, '0', env)\n                 self.start = self.start.coerce_to(c_int, env)\n+            if self.base.type.is_string and getting:\n+                default = PythonCapiCallNode(\n+                    self.stop.pos if self.stop else self.pos,\n+                    \"strlen\",\n+                    self.Pyx_strlen_func_type,\n+                    args=[self.base],",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423608369",
            "id": 423608369,
            "line": 4998,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYwODM2OQ==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 4998,
            "original_position": 37,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 37,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423608369",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423611599"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423611599"
                }
            },
            "author_association": "MEMBER",
            "body": "Since we're creating and assigning a new reference below, we also need one here.\r\n```suggestion\r\n                \"if (unlikely(%s <= %s)) { %s = __Pyx_NewRef(%s); }\" % (\r\n```",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T09:56:58Z",
            "diff_hunk": "@@ -5049,24 +5070,25 @@ def generate_result_code(self, code):\n                 type_name = 'ByteArray'\n             else:\n                 type_name = self.type.name.title()\n-            if self.stop is None:\n-                code.putln(\n-                    \"%s = __Pyx_Py%s_FromString(%s + %s); %s\" % (\n-                        result,\n-                        type_name,\n-                        base_result,\n-                        start_code,\n-                        code.error_goto_if_null(result, self.pos)))\n-            else:\n-                code.putln(\n-                    \"%s = __Pyx_Py%s_FromStringAndSize(%s + %s, %s - %s); %s\" % (\n-                        result,\n-                        type_name,\n-                        base_result,\n-                        start_code,\n-                        stop_code,\n-                        start_code,\n-                        code.error_goto_if_null(result, self.pos)))\n+            assert self.stop is not None\n+            code.putln(\n+                \"if (unlikely(%s <= %s)) { %s = %s; }\" % (",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423611599",
            "id": 423611599,
            "line": 5075,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMTU5OQ==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 5075,
            "original_position": 76,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 76,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423611599",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423614319"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423614319"
                }
            },
            "author_association": "MEMBER",
            "body": "Since we're otherwise inlining our own version, I think it's best to always inline it and not fall back to the CPython implementation at all. This is exactly the kind of code that really benefits from inlining: short and highly adaptive to the surrounding code, especially known constants.",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:01:34Z",
            "diff_hunk": "@@ -2875,3 +2875,61 @@ static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_le\n     PyNumber_Add(a, b) : __Pyx_PyStr_Concat(a, b))\n #define __Pyx_PyStr_ConcatInPlaceSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n     PyNumber_InPlaceAdd(a, b) : __Pyx_PyStr_ConcatInPlace(a, b))\n+\n+\n+/////////////// PySlice_AdjustIndices.proto ///////////////\n+\n+#if (PY_VERSION_HEX >= 0x03050400 && PY_VERSION_HEX < 0x03060000) || PY_VERSION_HEX >= 0x03060100",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423614319",
            "id": 423614319,
            "line": 2882,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNDMxOQ==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 2882,
            "original_position": 8,
            "original_start_line": null,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": 8,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423614319",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423617320"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423617320"
                }
            },
            "author_association": "MEMBER",
            "body": "This seems worth a `print_bytes()` helper function.",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:06:53Z",
            "diff_hunk": "@@ -149,6 +145,122 @@ def slice_charptr_for_loop_c_enumerate():\n     print [ (i,c) for i,c in enumerate(cstring[1:5]) ]\n     print [ (i,c) for i,c in enumerate(cstring[4:9]) ]\n \n+@cython.test_assert_path_exists(\"//ForFromStatNode\",\n+                                \"//ForFromStatNode//IndexNode\")\n+@cython.test_fail_if_path_exists(\"//ForInStatNode\",\n+                                 \"//SliceIndexNode\")\n+def slice_charptr_for_loop_c_reversed():\n+    \"\"\"\n+    >>> slice_charptr_for_loop_c_reversed()\n+    ['c', 'b', 'a']\n+    ['c', 'b', 'a']\n+    ['B', 'A', 'c', 'b']\n+    ['p', 't', 'q', 'C', 'B']\n+    \"\"\"\n+    cdef char c\n+    print [ chr(c) for c in reversed(cstring[:3]) ]\n+    print [ chr(c) for c in reversed(cstring[None:3]) ]\n+    print [ chr(c) for c in reversed(cstring[1:5]) ]\n+    print [ chr(c) for c in reversed(cstring[4:9]) ]\n+\n+@cython.test_assert_path_exists(\"//ForFromStatNode\",\n+                                \"//ForFromStatNode//IndexNode\")\n+@cython.test_fail_if_path_exists(\"//ForInStatNode\")\n+def omit_start_charptr():\n+    \"\"\"\n+    >>> omit_start_charptr()\n+    abcABCq\n+    abcABCqt\n+    ['a', 'b', 'c', 'A', 'B', 'C', 'q', 't', 'p']\n+    \"\"\"\n+    cdef char c\n+    print str(cstring[:7]).replace(\"b'\", \"\").replace(\"'\", \"\")",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423617320",
            "id": 423617320,
            "line": 177,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNzMyMA==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 177,
            "original_position": 152,
            "original_start_line": null,
            "path": "tests/run/carray_slicing.pyx",
            "position": 152,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423617320",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423619720"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423619720"
                }
            },
            "author_association": "MEMBER",
            "body": "Might be worth adding an assertion that there is no `CoerceToPyTypeNode` involved for the slice (or, I guess, anywhere inside of the loop node).",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:11:09Z",
            "diff_hunk": "@@ -149,6 +145,122 @@ def slice_charptr_for_loop_c_enumerate():\n     print [ (i,c) for i,c in enumerate(cstring[1:5]) ]\n     print [ (i,c) for i,c in enumerate(cstring[4:9]) ]\n \n+@cython.test_assert_path_exists(\"//ForFromStatNode\",\n+                                \"//ForFromStatNode//IndexNode\")\n+@cython.test_fail_if_path_exists(\"//ForInStatNode\",\n+                                 \"//SliceIndexNode\")\n+def slice_charptr_for_loop_c_reversed():\n+    \"\"\"\n+    >>> slice_charptr_for_loop_c_reversed()\n+    ['c', 'b', 'a']\n+    ['c', 'b', 'a']\n+    ['B', 'A', 'c', 'b']\n+    ['p', 't', 'q', 'C', 'B']\n+    \"\"\"\n+    cdef char c\n+    print [ chr(c) for c in reversed(cstring[:3]) ]\n+    print [ chr(c) for c in reversed(cstring[None:3]) ]\n+    print [ chr(c) for c in reversed(cstring[1:5]) ]\n+    print [ chr(c) for c in reversed(cstring[4:9]) ]\n+\n+@cython.test_assert_path_exists(\"//ForFromStatNode\",\n+                                \"//ForFromStatNode//IndexNode\")\n+@cython.test_fail_if_path_exists(\"//ForInStatNode\")",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423619720",
            "id": 423619720,
            "line": 168,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxOTcyMA==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 168,
            "original_position": 143,
            "original_start_line": 166,
            "path": "tests/run/carray_slicing.pyx",
            "position": 143,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": 166,
            "start_side": "RIGHT",
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423619720",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423622786"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423622786"
                }
            },
            "author_association": "MEMBER",
            "body": "The `Pyx_…` refers to the naming convention of internal helper function. It doesn't apply here. Just remove it.",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:16:42Z",
            "diff_hunk": "@@ -4892,6 +4892,12 @@ def analyse_target_types(self, env):\n             node.type = py_object_type\n         return node\n \n+    Pyx_strlen_func_type = PyrexTypes.CFuncType(",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423622786",
            "id": 423622786,
            "line": 4895,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyMjc4Ng==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 4895,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 4,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423622786",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423624887"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423624887"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we still need to apply the `Py_ssize_t` type coercion here.",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:20:37Z",
            "diff_hunk": "@@ -4958,10 +4964,13 @@ def allow_none(node, default_value, env):\n                 # Coerce to Py_ssize_t, but allow None as meaning the default slice bound.\n                 from .UtilNodes import EvalWithTempExprNode, ResultRefNode\n \n+                if not node.may_be_none():\n+                    return node",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423624887",
            "id": 423624887,
            "line": 4968,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNDg4Nw==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 4968,
            "original_position": 18,
            "original_start_line": 4964,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 18,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": 4964,
            "start_side": "RIGHT",
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423624887",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423626005"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423626005"
                }
            },
            "author_association": "MEMBER",
            "body": "One line is enough for these two.",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:22:44Z",
            "diff_hunk": "@@ -5049,24 +5070,25 @@ def generate_result_code(self, code):\n                 type_name = 'ByteArray'\n             else:\n                 type_name = self.type.name.title()\n-            if self.stop is None:\n-                code.putln(\n-                    \"%s = __Pyx_Py%s_FromString(%s + %s); %s\" % (\n-                        result,\n-                        type_name,\n-                        base_result,\n-                        start_code,\n-                        code.error_goto_if_null(result, self.pos)))\n-            else:\n-                code.putln(\n-                    \"%s = __Pyx_Py%s_FromStringAndSize(%s + %s, %s - %s); %s\" % (\n-                        result,\n-                        type_name,\n-                        base_result,\n-                        start_code,\n-                        stop_code,\n-                        start_code,\n-                        code.error_goto_if_null(result, self.pos)))\n+            assert self.stop is not None\n+            code.putln(\n+                \"if (unlikely(%s <= %s)) { %s = %s; }\" % (\n+                    stop_code,\n+                    start_code,\n+                    result,\n+                    Naming.empty_bytes))\n+            code.putln(\"else\")\n+            code.putln(\"{\")",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423626005",
            "id": 423626005,
            "line": 5081,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNjAwNQ==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 5081,
            "original_position": 82,
            "original_start_line": 5080,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 82,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": 5080,
            "start_side": "RIGHT",
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423626005",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423626113"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423626113"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            code.putln(\"else {\")\r\n```",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:22:57Z",
            "diff_hunk": "@@ -5049,24 +5070,25 @@ def generate_result_code(self, code):\n                 type_name = 'ByteArray'\n             else:\n                 type_name = self.type.name.title()\n-            if self.stop is None:\n-                code.putln(\n-                    \"%s = __Pyx_Py%s_FromString(%s + %s); %s\" % (\n-                        result,\n-                        type_name,\n-                        base_result,\n-                        start_code,\n-                        code.error_goto_if_null(result, self.pos)))\n-            else:\n-                code.putln(\n-                    \"%s = __Pyx_Py%s_FromStringAndSize(%s + %s, %s - %s); %s\" % (\n-                        result,\n-                        type_name,\n-                        base_result,\n-                        start_code,\n-                        stop_code,\n-                        start_code,\n-                        code.error_goto_if_null(result, self.pos)))\n+            assert self.stop is not None\n+            code.putln(\n+                \"if (unlikely(%s <= %s)) { %s = %s; }\" % (\n+                    stop_code,\n+                    start_code,\n+                    result,\n+                    Naming.empty_bytes))\n+            code.putln(\"else\")\n+            code.putln(\"{\")",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423626113",
            "id": 423626113,
            "line": 5081,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNjExMw==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 5081,
            "original_position": 82,
            "original_start_line": 5080,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 82,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": 5080,
            "start_side": "RIGHT",
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423626113",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423627835"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423627835"
                }
            },
            "author_association": "MEMBER",
            "body": "I should really add that to the linter config at some point, but line continuations for expressions tend to be nicer to the eyes when they use parentheses than the `\\` continuation character.\r\n```suggestion\r\n        if iterable.type.is_ptr or iterable.type.is_array or (\r\n                isinstance(iterable, ExprNodes.SliceIndexNode) and iterable.base.type.is_string):\r\n```",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:26:15Z",
            "diff_hunk": "@@ -222,7 +222,9 @@ def _optimise_for_loop(self, node, iterable, reversed=False):\n             return self._transform_set_iteration(node, iterable)\n \n         # C array (slice) iteration?\n-        if iterable.type.is_ptr or iterable.type.is_array:\n+        # note that a slice of char* is typed as bytes, but we can still treat it as a ptr here\n+        if iterable.type.is_ptr or iterable.type.is_array \\\n+                or isinstance(iterable, ExprNodes.SliceIndexNode) and iterable.base.type.is_string:",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423627835",
            "id": 423627835,
            "line": 227,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNzgzNQ==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 227,
            "original_position": 7,
            "original_start_line": 226,
            "path": "Cython/Compiler/Optimize.py",
            "position": 7,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": 226,
            "start_side": "RIGHT",
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423627835",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423629230"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423629230"
                }
            },
            "author_association": "MEMBER",
            "body": "Look at what `as_none_safe_node()` does. :)",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:28:45Z",
            "diff_hunk": "@@ -333,43 +335,119 @@ def _transform_reversed_iteration(self, node, reversed_function):\n             PyrexTypes.CFuncTypeArg(\"s\", Builtin.bytes_type, None)\n             ])\n \n+    PySlice_AdjustIndices_func_type = PyrexTypes.CFuncType(\n+        PyrexTypes.c_py_ssize_t_type, [\n+            PyrexTypes.CFuncTypeArg(\"length\", PyrexTypes.c_py_ssize_t_type, None),\n+            PyrexTypes.CFuncTypeArg(\"start\", PyrexTypes.c_py_ssize_t_ptr_type, None),\n+            PyrexTypes.CFuncTypeArg(\"stop\", PyrexTypes.c_py_ssize_t_ptr_type, None),\n+            PyrexTypes.CFuncTypeArg(\"step\", PyrexTypes.c_py_ssize_t_type, None)\n+        ])\n+\n     def _transform_bytes_iteration(self, node, slice_node, reversed=False):\n         target_type = node.target.type\n         if not target_type.is_int and target_type is not Builtin.bytes_type:\n-            # bytes iteration returns bytes objects in Py2, but\n-            # integers in Py3\n+            # because bytes iteration returns different types of object between\n+            # Py2 and Py3 and this code cannot be trivially set up to generate\n+            # code which varies between Python versions, we just give up on\n+            # this optimization if it isn't trivially applicable.\n             return node\n \n-        unpack_temp_node = UtilNodes.LetRefNode(\n-            slice_node.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        if isinstance(slice_node, ExprNodes.SliceIndexNode):\n+            base = slice_node.base\n+            start = slice_node.start\n+            stop = slice_node.stop\n+        else:\n+            base = slice_node\n+            start = None\n+            stop = None\n \n-        slice_base_node = ExprNodes.PythonCapiCallNode(\n+        if base.type is not Builtin.bytes_type:\n+            return node\n+\n+        if base.may_be_none():\n+            base = UtilNodes.LetRefNode(\n+                base.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        else:\n+            base = UtilNodes.LetRefNode(base)",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423629230",
            "id": 423629230,
            "line": 371,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyOTIzMA==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 371,
            "original_position": 53,
            "original_start_line": 367,
            "path": "Cython/Compiler/Optimize.py",
            "position": 53,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": 367,
            "start_side": "RIGHT",
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423629230",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423631585"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423631585"
                }
            },
            "author_association": "MEMBER",
            "body": "No need to pass the `.pos` here and below. It'll be taken from the expression node.",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:33:03Z",
            "diff_hunk": "@@ -333,43 +335,119 @@ def _transform_reversed_iteration(self, node, reversed_function):\n             PyrexTypes.CFuncTypeArg(\"s\", Builtin.bytes_type, None)\n             ])\n \n+    PySlice_AdjustIndices_func_type = PyrexTypes.CFuncType(\n+        PyrexTypes.c_py_ssize_t_type, [\n+            PyrexTypes.CFuncTypeArg(\"length\", PyrexTypes.c_py_ssize_t_type, None),\n+            PyrexTypes.CFuncTypeArg(\"start\", PyrexTypes.c_py_ssize_t_ptr_type, None),\n+            PyrexTypes.CFuncTypeArg(\"stop\", PyrexTypes.c_py_ssize_t_ptr_type, None),\n+            PyrexTypes.CFuncTypeArg(\"step\", PyrexTypes.c_py_ssize_t_type, None)\n+        ])\n+\n     def _transform_bytes_iteration(self, node, slice_node, reversed=False):\n         target_type = node.target.type\n         if not target_type.is_int and target_type is not Builtin.bytes_type:\n-            # bytes iteration returns bytes objects in Py2, but\n-            # integers in Py3\n+            # because bytes iteration returns different types of object between\n+            # Py2 and Py3 and this code cannot be trivially set up to generate\n+            # code which varies between Python versions, we just give up on\n+            # this optimization if it isn't trivially applicable.\n             return node\n \n-        unpack_temp_node = UtilNodes.LetRefNode(\n-            slice_node.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        if isinstance(slice_node, ExprNodes.SliceIndexNode):\n+            base = slice_node.base\n+            start = slice_node.start\n+            stop = slice_node.stop\n+        else:\n+            base = slice_node\n+            start = None\n+            stop = None\n \n-        slice_base_node = ExprNodes.PythonCapiCallNode(\n+        if base.type is not Builtin.bytes_type:\n+            return node\n+\n+        if base.may_be_none():\n+            base = UtilNodes.LetRefNode(\n+                base.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        else:\n+            base = UtilNodes.LetRefNode(base)\n+\n+        raw_base = ExprNodes.PythonCapiCallNode(\n             slice_node.pos, \"PyBytes_AS_STRING\",\n             self.PyBytes_AS_STRING_func_type,\n-            args = [unpack_temp_node],\n+            args = [base],\n             is_temp = 0,\n-            )\n-        len_node = ExprNodes.PythonCapiCallNode(\n+        )\n+\n+        length = ExprNodes.PythonCapiCallNode(\n             slice_node.pos, \"PyBytes_GET_SIZE\",\n             self.PyBytes_GET_SIZE_func_type,\n-            args = [unpack_temp_node],\n+            args = [base],\n             is_temp = 0,\n+        )\n+\n+        if start:\n+            start = start.coerce_to(PyrexTypes.c_py_ssize_t_type, self.current_env())\n+        else:\n+            start = ExprNodes.IntNode(slice_node.pos, type=PyrexTypes.c_py_ssize_t_type,\n+                                      value=\"0\",\n+                                      constant_result=0)\n+        start = UtilNodes.LetRefNode(start, start.pos)",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423631585",
            "id": 423631585,
            "line": 393,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMTU4NQ==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 393,
            "original_position": 79,
            "original_start_line": null,
            "path": "Cython/Compiler/Optimize.py",
            "position": 79,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423631585",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423632607"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423632607"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if (env.directives['wraparound'] or env.directives['boundscheck']) and not (\r\n                 start.expression.has_constant_result() and start.expression.constant_result == 0\r\n                 and stop.expression is length):\r\n```",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:35:04Z",
            "diff_hunk": "@@ -333,43 +335,119 @@ def _transform_reversed_iteration(self, node, reversed_function):\n             PyrexTypes.CFuncTypeArg(\"s\", Builtin.bytes_type, None)\n             ])\n \n+    PySlice_AdjustIndices_func_type = PyrexTypes.CFuncType(\n+        PyrexTypes.c_py_ssize_t_type, [\n+            PyrexTypes.CFuncTypeArg(\"length\", PyrexTypes.c_py_ssize_t_type, None),\n+            PyrexTypes.CFuncTypeArg(\"start\", PyrexTypes.c_py_ssize_t_ptr_type, None),\n+            PyrexTypes.CFuncTypeArg(\"stop\", PyrexTypes.c_py_ssize_t_ptr_type, None),\n+            PyrexTypes.CFuncTypeArg(\"step\", PyrexTypes.c_py_ssize_t_type, None)\n+        ])\n+\n     def _transform_bytes_iteration(self, node, slice_node, reversed=False):\n         target_type = node.target.type\n         if not target_type.is_int and target_type is not Builtin.bytes_type:\n-            # bytes iteration returns bytes objects in Py2, but\n-            # integers in Py3\n+            # because bytes iteration returns different types of object between\n+            # Py2 and Py3 and this code cannot be trivially set up to generate\n+            # code which varies between Python versions, we just give up on\n+            # this optimization if it isn't trivially applicable.\n             return node\n \n-        unpack_temp_node = UtilNodes.LetRefNode(\n-            slice_node.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        if isinstance(slice_node, ExprNodes.SliceIndexNode):\n+            base = slice_node.base\n+            start = slice_node.start\n+            stop = slice_node.stop\n+        else:\n+            base = slice_node\n+            start = None\n+            stop = None\n \n-        slice_base_node = ExprNodes.PythonCapiCallNode(\n+        if base.type is not Builtin.bytes_type:\n+            return node\n+\n+        if base.may_be_none():\n+            base = UtilNodes.LetRefNode(\n+                base.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        else:\n+            base = UtilNodes.LetRefNode(base)\n+\n+        raw_base = ExprNodes.PythonCapiCallNode(\n             slice_node.pos, \"PyBytes_AS_STRING\",\n             self.PyBytes_AS_STRING_func_type,\n-            args = [unpack_temp_node],\n+            args = [base],\n             is_temp = 0,\n-            )\n-        len_node = ExprNodes.PythonCapiCallNode(\n+        )\n+\n+        length = ExprNodes.PythonCapiCallNode(\n             slice_node.pos, \"PyBytes_GET_SIZE\",\n             self.PyBytes_GET_SIZE_func_type,\n-            args = [unpack_temp_node],\n+            args = [base],\n             is_temp = 0,\n+        )\n+\n+        if start:\n+            start = start.coerce_to(PyrexTypes.c_py_ssize_t_type, self.current_env())\n+        else:\n+            start = ExprNodes.IntNode(slice_node.pos, type=PyrexTypes.c_py_ssize_t_type,\n+                                      value=\"0\",\n+                                      constant_result=0)\n+        start = UtilNodes.LetRefNode(start, start.pos)\n+\n+        if stop:\n+            stop = stop.coerce_to(PyrexTypes.c_py_ssize_t_type, self.current_env())\n+        else:\n+            stop = length\n+        stop = UtilNodes.LetRefNode(stop, stop.pos)\n+\n+        env = self.current_env()\n+        if (env.directives['wraparound'] or env.directives['boundscheck']) \\\n+               and not (start.expression.has_constant_result() \\\n+                        and start.expression.constant_result == 0 \\\n+                        and stop.expression is length):",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423632607",
            "id": 423632607,
            "line": 405,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMjYwNw==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 405,
            "original_position": 91,
            "original_start_line": 402,
            "path": "Cython/Compiler/Optimize.py",
            "position": 91,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": 402,
            "start_side": "RIGHT",
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423632607",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423639309"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423639309"
                }
            },
            "author_association": "MEMBER",
            "body": "Seems worth adding a side-effect test that calls functions for these values and makes sure they are executed in the correct order. (Didn't double-check if there is one already.)",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:47:34Z",
            "diff_hunk": "@@ -333,43 +335,119 @@ def _transform_reversed_iteration(self, node, reversed_function):\n             PyrexTypes.CFuncTypeArg(\"s\", Builtin.bytes_type, None)\n             ])\n \n+    PySlice_AdjustIndices_func_type = PyrexTypes.CFuncType(\n+        PyrexTypes.c_py_ssize_t_type, [\n+            PyrexTypes.CFuncTypeArg(\"length\", PyrexTypes.c_py_ssize_t_type, None),\n+            PyrexTypes.CFuncTypeArg(\"start\", PyrexTypes.c_py_ssize_t_ptr_type, None),\n+            PyrexTypes.CFuncTypeArg(\"stop\", PyrexTypes.c_py_ssize_t_ptr_type, None),\n+            PyrexTypes.CFuncTypeArg(\"step\", PyrexTypes.c_py_ssize_t_type, None)\n+        ])\n+\n     def _transform_bytes_iteration(self, node, slice_node, reversed=False):\n         target_type = node.target.type\n         if not target_type.is_int and target_type is not Builtin.bytes_type:\n-            # bytes iteration returns bytes objects in Py2, but\n-            # integers in Py3\n+            # because bytes iteration returns different types of object between\n+            # Py2 and Py3 and this code cannot be trivially set up to generate\n+            # code which varies between Python versions, we just give up on\n+            # this optimization if it isn't trivially applicable.\n             return node\n \n-        unpack_temp_node = UtilNodes.LetRefNode(\n-            slice_node.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        if isinstance(slice_node, ExprNodes.SliceIndexNode):\n+            base = slice_node.base\n+            start = slice_node.start\n+            stop = slice_node.stop\n+        else:\n+            base = slice_node\n+            start = None\n+            stop = None\n \n-        slice_base_node = ExprNodes.PythonCapiCallNode(\n+        if base.type is not Builtin.bytes_type:\n+            return node\n+\n+        if base.may_be_none():\n+            base = UtilNodes.LetRefNode(\n+                base.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        else:\n+            base = UtilNodes.LetRefNode(base)\n+\n+        raw_base = ExprNodes.PythonCapiCallNode(\n             slice_node.pos, \"PyBytes_AS_STRING\",\n             self.PyBytes_AS_STRING_func_type,\n-            args = [unpack_temp_node],\n+            args = [base],\n             is_temp = 0,\n-            )\n-        len_node = ExprNodes.PythonCapiCallNode(\n+        )\n+\n+        length = ExprNodes.PythonCapiCallNode(\n             slice_node.pos, \"PyBytes_GET_SIZE\",\n             self.PyBytes_GET_SIZE_func_type,\n-            args = [unpack_temp_node],\n+            args = [base],\n             is_temp = 0,\n+        )\n+\n+        if start:\n+            start = start.coerce_to(PyrexTypes.c_py_ssize_t_type, self.current_env())\n+        else:\n+            start = ExprNodes.IntNode(slice_node.pos, type=PyrexTypes.c_py_ssize_t_type,\n+                                      value=\"0\",\n+                                      constant_result=0)\n+        start = UtilNodes.LetRefNode(start, start.pos)\n+\n+        if stop:\n+            stop = stop.coerce_to(PyrexTypes.c_py_ssize_t_type, self.current_env())\n+        else:\n+            stop = length\n+        stop = UtilNodes.LetRefNode(stop, stop.pos)\n+\n+        env = self.current_env()\n+        if (env.directives['wraparound'] or env.directives['boundscheck']) \\\n+               and not (start.expression.has_constant_result() \\\n+                        and start.expression.constant_result == 0 \\\n+                        and stop.expression is length):\n+            adjusted_length = ExprNodes.PythonCapiCallNode(\n+                slice_node.pos, \"__Pyx_PySlice_AdjustIndices\",\n+                self.PySlice_AdjustIndices_func_type,\n+                args = [length,\n+                        ExprNodes.AmpersandNode(start.pos, operand=start,\n+                                                type=PyrexTypes.c_py_ssize_t_ptr_type),\n+                        ExprNodes.AmpersandNode(stop.pos, operand=stop,\n+                                                type=PyrexTypes.c_py_ssize_t_ptr_type),\n+                        ExprNodes.IntNode(slice_node.pos, type=PyrexTypes.c_py_ssize_t_type,\n+                                          value=\"1\", constant_result=1),\n+                ],\n+                is_temp = True,\n+                result_is_used = False,\n+                utility_code=UtilityCode.load_cached(\"PySlice_AdjustIndices\", \"ObjectHandling.c\"),\n             )\n+        else:\n+            adjusted_length = None\n+\n+        iter_node = self._transform_carray_iteration(\n+            node,\n+            ExprNodes.SliceIndexNode(\n+                slice_node.pos,\n+                base = raw_base,\n+                start = start,\n+                step = None,\n+                stop = stop,\n+                type = raw_base.type,\n+                is_temp = 1,\n+            ),\n+            reversed = reversed)\n+\n+        if adjusted_length is None:\n+            node = iter_node\n+        else:\n+            node = Nodes.StatListNode(\n+                slice_node.pos,\n+                stats=[\n+                    Nodes.ExprStatNode(adjusted_length.pos, expr=adjusted_length),\n+                    iter_node\n+            ])\n \n-        return UtilNodes.LetNode(\n-            unpack_temp_node,\n-            self._transform_carray_iteration(\n-                node,\n-                ExprNodes.SliceIndexNode(\n-                    slice_node.pos,\n-                    base = slice_base_node,\n-                    start = None,\n-                    step = None,\n-                    stop = len_node,\n-                    type = slice_base_node.type,\n-                    is_temp = 1,\n-                    ),\n-                reversed = reversed))\n+        for var in [base, start, stop][::-1]:",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423639309",
            "id": 423639309,
            "line": 447,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzOTMwOQ==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 447,
            "original_position": 147,
            "original_start_line": null,
            "path": "Cython/Compiler/Optimize.py",
            "position": 147,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423639309",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423641495"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423641495"
                }
            },
            "author_association": "MEMBER",
            "body": "This only applies to the `SliceIndexNode` case above, right? The other case should be covered by the caller.",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:51:51Z",
            "diff_hunk": "@@ -411,29 +489,100 @@ def _transform_unicode_iteration(self, node, slice_node, reversed=False):\n                 )\n                 return self._transform_carray_iteration(node, bytes_slice, reversed)\n \n-        unpack_temp_node = UtilNodes.LetRefNode(\n-            slice_node.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        if isinstance(slice_node, ExprNodes.SliceIndexNode):\n+            base = slice_node.base\n+            start = slice_node.start\n+            stop = slice_node.stop\n+        else:\n+            base = slice_node\n+            start = None\n+            stop = None\n+\n+        if base.type is not Builtin.unicode_type:\n+            return node",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423641495",
            "id": 423641495,
            "line": 502,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0MTQ5NQ==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 502,
            "original_position": 170,
            "original_start_line": 501,
            "path": "Cython/Compiler/Optimize.py",
            "position": 170,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": 501,
            "start_side": "RIGHT",
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423641495",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423642453"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423642453"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        base = UtilNodes.LetRefNode(\r\n            base.as_none_safe_node(\"'NoneType' is not iterable\"))\r\n```",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:53:37Z",
            "diff_hunk": "@@ -411,29 +489,100 @@ def _transform_unicode_iteration(self, node, slice_node, reversed=False):\n                 )\n                 return self._transform_carray_iteration(node, bytes_slice, reversed)\n \n-        unpack_temp_node = UtilNodes.LetRefNode(\n-            slice_node.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        if isinstance(slice_node, ExprNodes.SliceIndexNode):\n+            base = slice_node.base\n+            start = slice_node.start\n+            stop = slice_node.stop\n+        else:\n+            base = slice_node\n+            start = None\n+            stop = None\n+\n+        if base.type is not Builtin.unicode_type:\n+            return node\n+\n+        if base.may_be_none():\n+            base = UtilNodes.LetRefNode(\n+                base.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        else:\n+            base = UtilNodes.LetRefNode(base)",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423642453",
            "id": 423642453,
            "line": 508,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0MjQ1Mw==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 508,
            "original_position": 176,
            "original_start_line": 504,
            "path": "Cython/Compiler/Optimize.py",
            "position": 176,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": 504,
            "start_side": "RIGHT",
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423642453",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423643247"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423643247"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        # note that 'stop' must only be created after 'setup_node' has run so it\r\n```",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:55:07Z",
            "diff_hunk": "@@ -449,35 +598,25 @@ def _transform_unicode_iteration(self, node, slice_node, reversed=False):\n \n         loop_node = Nodes.ForFromStatNode(\n             node.pos,\n-            bound1=start_node, relation1=relation1,\n-            target=counter_temp.ref(node.target.pos),\n-            relation2=relation2, bound2=end_node,\n+            bound1=start, relation1=relation1,\n+            target=counter.ref(node.pos),\n+            relation2=relation2, bound2=stop,\n             step=None, body=body,\n             else_clause=node.else_clause,\n             from_range=True)\n \n-        setup_node = Nodes.ExprStatNode(\n-            node.pos,\n-            expr = ExprNodes.PythonCapiCallNode(\n-                slice_node.pos, \"__Pyx_init_unicode_iteration\",\n-                self.init_unicode_iteration_func_type,\n-                args = [unpack_temp_node,\n-                        ExprNodes.AmpersandNode(slice_node.pos, operand=length_temp.ref(slice_node.pos),\n-                                                type=PyrexTypes.c_py_ssize_t_ptr_type),\n-                        ExprNodes.AmpersandNode(slice_node.pos, operand=data_temp.ref(slice_node.pos),\n-                                                type=PyrexTypes.c_void_ptr_ptr_type),\n-                        ExprNodes.AmpersandNode(slice_node.pos, operand=kind_temp.ref(slice_node.pos),\n-                                                type=PyrexTypes.c_int_ptr_type),\n-                        ],\n-                is_temp = True,\n-                result_is_used = False,\n-                utility_code=UtilityCode.load_cached(\"unicode_iter\", \"Optimize.c\"),\n-                ))\n-        return UtilNodes.LetNode(\n-            unpack_temp_node,\n-            UtilNodes.TempsBlockNode(\n-                node.pos, temps=[counter_temp, length_temp, data_temp, kind_temp],\n-                body=Nodes.StatListNode(node.pos, stats=[setup_node, loop_node])))\n+        if adjusted_length is None:\n+            node = loop_node\n+        else:\n+            node = Nodes.StatListNode(node.pos, stats=[adjusted_length, loop_node])\n+\n+        for var in [start, stop]:\n+            node = UtilNodes.LetNode(var, node)\n+\n+        # note that stop msut only be created after setup_node has run so it",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423643247",
            "id": 423643247,
            "line": 616,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0MzI0Nw==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 616,
            "original_position": 312,
            "original_start_line": null,
            "path": "Cython/Compiler/Optimize.py",
            "position": 312,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423643247",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423643871"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423643871"
                }
            },
            "author_association": "MEMBER",
            "body": "Seems worth a side-effect test as well.\r\n```suggestion\r\n        for var in [start, stop][::-1]:\r\n            node = UtilNodes.LetNode(var, node)\r\n```",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T10:56:20Z",
            "diff_hunk": "@@ -449,35 +598,25 @@ def _transform_unicode_iteration(self, node, slice_node, reversed=False):\n \n         loop_node = Nodes.ForFromStatNode(\n             node.pos,\n-            bound1=start_node, relation1=relation1,\n-            target=counter_temp.ref(node.target.pos),\n-            relation2=relation2, bound2=end_node,\n+            bound1=start, relation1=relation1,\n+            target=counter.ref(node.pos),\n+            relation2=relation2, bound2=stop,\n             step=None, body=body,\n             else_clause=node.else_clause,\n             from_range=True)\n \n-        setup_node = Nodes.ExprStatNode(\n-            node.pos,\n-            expr = ExprNodes.PythonCapiCallNode(\n-                slice_node.pos, \"__Pyx_init_unicode_iteration\",\n-                self.init_unicode_iteration_func_type,\n-                args = [unpack_temp_node,\n-                        ExprNodes.AmpersandNode(slice_node.pos, operand=length_temp.ref(slice_node.pos),\n-                                                type=PyrexTypes.c_py_ssize_t_ptr_type),\n-                        ExprNodes.AmpersandNode(slice_node.pos, operand=data_temp.ref(slice_node.pos),\n-                                                type=PyrexTypes.c_void_ptr_ptr_type),\n-                        ExprNodes.AmpersandNode(slice_node.pos, operand=kind_temp.ref(slice_node.pos),\n-                                                type=PyrexTypes.c_int_ptr_type),\n-                        ],\n-                is_temp = True,\n-                result_is_used = False,\n-                utility_code=UtilityCode.load_cached(\"unicode_iter\", \"Optimize.c\"),\n-                ))\n-        return UtilNodes.LetNode(\n-            unpack_temp_node,\n-            UtilNodes.TempsBlockNode(\n-                node.pos, temps=[counter_temp, length_temp, data_temp, kind_temp],\n-                body=Nodes.StatListNode(node.pos, stats=[setup_node, loop_node])))\n+        if adjusted_length is None:\n+            node = loop_node\n+        else:\n+            node = Nodes.StatListNode(node.pos, stats=[adjusted_length, loop_node])\n+\n+        for var in [start, stop]:\n+            node = UtilNodes.LetNode(var, node)",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423643871",
            "id": 423643871,
            "line": 614,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0Mzg3MQ==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 614,
            "original_position": 310,
            "original_start_line": 613,
            "path": "Cython/Compiler/Optimize.py",
            "position": 310,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": 613,
            "start_side": "RIGHT",
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423643871",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r423647655"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/423647655"
                }
            },
            "author_association": "MEMBER",
            "body": "I think these two need to be passed into `__Pyx_PySlice_AdjustIndices()` to prevent e.g. wrap-around when it's disabled.",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-12T11:03:35Z",
            "diff_hunk": "@@ -411,29 +489,100 @@ def _transform_unicode_iteration(self, node, slice_node, reversed=False):\n                 )\n                 return self._transform_carray_iteration(node, bytes_slice, reversed)\n \n-        unpack_temp_node = UtilNodes.LetRefNode(\n-            slice_node.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        if isinstance(slice_node, ExprNodes.SliceIndexNode):\n+            base = slice_node.base\n+            start = slice_node.start\n+            stop = slice_node.stop\n+        else:\n+            base = slice_node\n+            start = None\n+            stop = None\n+\n+        if base.type is not Builtin.unicode_type:\n+            return node\n+\n+        if base.may_be_none():\n+            base = UtilNodes.LetRefNode(\n+                base.as_none_safe_node(\"'NoneType' is not iterable\"))\n+        else:\n+            base = UtilNodes.LetRefNode(base)\n+\n+        length = UtilNodes.TempHandle(PyrexTypes.c_py_ssize_t_type)\n+        length_temp = length.ref(slice_node.pos)\n+        kind = UtilNodes.TempHandle(PyrexTypes.c_int_type)\n+        data = UtilNodes.TempHandle(PyrexTypes.c_void_ptr_type)\n+\n+        setup_node = Nodes.ExprStatNode(\n+            node.pos,\n+            expr = ExprNodes.PythonCapiCallNode(\n+                slice_node.pos, \"__Pyx_init_unicode_iteration\",\n+                self.init_unicode_iteration_func_type,\n+                args = [base,\n+                        ExprNodes.AmpersandNode(slice_node.pos, operand=length_temp,\n+                                                type=PyrexTypes.c_py_ssize_t_ptr_type),\n+                        ExprNodes.AmpersandNode(slice_node.pos, operand=data.ref(slice_node.pos),\n+                                                type=PyrexTypes.c_void_ptr_ptr_type),\n+                        ExprNodes.AmpersandNode(slice_node.pos, operand=kind.ref(slice_node.pos),\n+                                                type=PyrexTypes.c_int_ptr_type),\n+                        ],\n+                is_temp = True,\n+                result_is_used = False,\n+                utility_code=UtilityCode.load_cached(\"unicode_iter\", \"Optimize.c\"),\n+                ))\n+\n+        if start:\n+            start = start.coerce_to(PyrexTypes.c_py_ssize_t_type, self.current_env())\n+        else:\n+            start = ExprNodes.IntNode(slice_node.pos, type=PyrexTypes.c_py_ssize_t_type,\n+                                      value=\"0\",\n+                                      constant_result=0)\n+        start = UtilNodes.LetRefNode(start)\n+\n+        if stop:\n+            stop = stop.coerce_to(PyrexTypes.c_py_ssize_t_type, self.current_env())\n+        else:\n+            stop = length_temp\n+        stop = UtilNodes.LetRefNode(stop)\n+\n+        env = self.current_env()\n+        if (env.directives['wraparound'] or env.directives['boundscheck']) \\",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r423647655",
            "id": 423647655,
            "line": 548,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0NzY1NQ==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 548,
            "original_position": 216,
            "original_start_line": null,
            "path": "Cython/Compiler/Optimize.py",
            "position": 216,
            "pull_request_review_id": 409880908,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-12T20:46:40Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/423647655",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3600#discussion_r425834108"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3600"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/425834108"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n// copied from PySlice_AdjustIndices in CPython 3.6.1+\r\n```",
            "commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "created_at": "2020-05-15T14:19:09Z",
            "diff_hunk": "@@ -2875,3 +2875,61 @@ static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_le\n     PyNumber_Add(a, b) : __Pyx_PyStr_Concat(a, b))\n #define __Pyx_PyStr_ConcatInPlaceSafe(a, b) ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \\\n     PyNumber_InPlaceAdd(a, b) : __Pyx_PyStr_ConcatInPlace(a, b))\n+\n+\n+/////////////// PySlice_AdjustIndices.proto ///////////////\n+\n+#if (PY_VERSION_HEX >= 0x03050400 && PY_VERSION_HEX < 0x03060000) || PY_VERSION_HEX >= 0x03060100\n+    #define __Pyx_PySlice_AdjustIndices PySlice_AdjustIndices\n+#else\n+static CYTHON_INLINE Py_ssize_t __Pyx_PySlice_AdjustIndices(Py_ssize_t length,\n+                                                      Py_ssize_t *start, Py_ssize_t *stop,\n+                                                      Py_ssize_t step); /* proto */\n+#endif\n+\n+/////////////// PySlice_AdjustIndices ///////////////\n+\n+#if (PY_VERSION_HEX >= 0x03050400 && PY_VERSION_HEX < 0x03060000) || PY_VERSION_HEX >= 0x03060100\n+#else\n+// copied from PySlice_AdjustIndicies in CPython 3.6.1+",
            "html_url": "https://github.com/cython/cython/pull/3600#discussion_r425834108",
            "id": 425834108,
            "line": 2894,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgzNDEwOA==",
            "original_commit_id": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "original_line": 2894,
            "original_position": 20,
            "original_start_line": null,
            "path": "Cython/Utility/ObjectHandling.c",
            "position": 20,
            "pull_request_review_id": 412691074,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3600",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-15T14:19:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/425834108",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3600/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
                "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gsnedders/followers",
                "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gsnedders",
                "id": 176218,
                "login": "gsnedders",
                "node_id": "MDQ6VXNlcjE3NjIxOA==",
                "organizations_url": "https://api.github.com/users/gsnedders/orgs",
                "received_events_url": "https://api.github.com/users/gsnedders/received_events",
                "repos_url": "https://api.github.com/users/gsnedders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gsnedders"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0a458492e8d0105cd85fe2104b065c9f8fcc19ae/comments",
            "commit": {
                "author": {
                    "date": "2020-04-24T02:55:23Z",
                    "email": "me@gsnedders.com",
                    "name": "Sam Sneddon"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-12T00:58:37Z",
                    "email": "me@gsnedders.com",
                    "name": "Sam Sneddon"
                },
                "message": "Slices of char* should read to strlen when stop is omitted (GH-3539)\n\nThis doesn't yet handle the negative case",
                "tree": {
                    "sha": "e1b961c72adaabf81bd00c3adb7ce3c79cbe5e24",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e1b961c72adaabf81bd00c3adb7ce3c79cbe5e24"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0a458492e8d0105cd85fe2104b065c9f8fcc19ae",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
                "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gsnedders/followers",
                "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gsnedders",
                "id": 176218,
                "login": "gsnedders",
                "node_id": "MDQ6VXNlcjE3NjIxOA==",
                "organizations_url": "https://api.github.com/users/gsnedders/orgs",
                "received_events_url": "https://api.github.com/users/gsnedders/received_events",
                "repos_url": "https://api.github.com/users/gsnedders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gsnedders"
            },
            "html_url": "https://github.com/cython/cython/commit/0a458492e8d0105cd85fe2104b065c9f8fcc19ae",
            "node_id": "MDY6Q29tbWl0MjU3MTc2MzU3OjBhNDU4NDkyZThkMDEwNWNkODVmZTIxMDRiMDY1YzlmOGZjYzE5YWU=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fd71aabe0319ff3ecfa3aee291d13b98d3c6a76e",
                    "sha": "fd71aabe0319ff3ecfa3aee291d13b98d3c6a76e",
                    "url": "https://api.github.com/repos/cython/cython/commits/fd71aabe0319ff3ecfa3aee291d13b98d3c6a76e"
                }
            ],
            "sha": "0a458492e8d0105cd85fe2104b065c9f8fcc19ae",
            "url": "https://api.github.com/repos/cython/cython/commits/0a458492e8d0105cd85fe2104b065c9f8fcc19ae"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
                "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gsnedders/followers",
                "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gsnedders",
                "id": 176218,
                "login": "gsnedders",
                "node_id": "MDQ6VXNlcjE3NjIxOA==",
                "organizations_url": "https://api.github.com/users/gsnedders/orgs",
                "received_events_url": "https://api.github.com/users/gsnedders/received_events",
                "repos_url": "https://api.github.com/users/gsnedders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gsnedders"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6f31f7d8b1e5180faf0017cb26ed721382b7f32e/comments",
            "commit": {
                "author": {
                    "date": "2020-04-24T03:42:58Z",
                    "email": "me@gsnedders.com",
                    "name": "Sam Sneddon"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-12T00:58:37Z",
                    "email": "me@gsnedders.com",
                    "name": "Sam Sneddon"
                },
                "message": "Avoid creating a bytes object when iterating over a char* slice",
                "tree": {
                    "sha": "9c11d4f107f08c28d0fbb6a356700887511bcdcb",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9c11d4f107f08c28d0fbb6a356700887511bcdcb"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6f31f7d8b1e5180faf0017cb26ed721382b7f32e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
                "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gsnedders/followers",
                "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gsnedders",
                "id": 176218,
                "login": "gsnedders",
                "node_id": "MDQ6VXNlcjE3NjIxOA==",
                "organizations_url": "https://api.github.com/users/gsnedders/orgs",
                "received_events_url": "https://api.github.com/users/gsnedders/received_events",
                "repos_url": "https://api.github.com/users/gsnedders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gsnedders"
            },
            "html_url": "https://github.com/cython/cython/commit/6f31f7d8b1e5180faf0017cb26ed721382b7f32e",
            "node_id": "MDY6Q29tbWl0MjU3MTc2MzU3OjZmMzFmN2Q4YjFlNTE4MGZhZjAwMTdjYjI2ZWQ3MjEzODJiN2YzMmU=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0a458492e8d0105cd85fe2104b065c9f8fcc19ae",
                    "sha": "0a458492e8d0105cd85fe2104b065c9f8fcc19ae",
                    "url": "https://api.github.com/repos/cython/cython/commits/0a458492e8d0105cd85fe2104b065c9f8fcc19ae"
                }
            ],
            "sha": "6f31f7d8b1e5180faf0017cb26ed721382b7f32e",
            "url": "https://api.github.com/repos/cython/cython/commits/6f31f7d8b1e5180faf0017cb26ed721382b7f32e"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
                "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gsnedders/followers",
                "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gsnedders",
                "id": 176218,
                "login": "gsnedders",
                "node_id": "MDQ6VXNlcjE3NjIxOA==",
                "organizations_url": "https://api.github.com/users/gsnedders/orgs",
                "received_events_url": "https://api.github.com/users/gsnedders/received_events",
                "repos_url": "https://api.github.com/users/gsnedders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gsnedders"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fe556e9710eca672bcb62c7b2d719f6c5d153929/comments",
            "commit": {
                "author": {
                    "date": "2020-04-25T01:43:05Z",
                    "email": "me@gsnedders.com",
                    "name": "Sam Sneddon"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-12T00:58:37Z",
                    "email": "me@gsnedders.com",
                    "name": "Sam Sneddon"
                },
                "message": "Avoid creating a temporary object when iterating over a bytes slice",
                "tree": {
                    "sha": "88f45b734406803c426ebf01e2cb20f168236768",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/88f45b734406803c426ebf01e2cb20f168236768"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fe556e9710eca672bcb62c7b2d719f6c5d153929",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
                "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gsnedders/followers",
                "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gsnedders",
                "id": 176218,
                "login": "gsnedders",
                "node_id": "MDQ6VXNlcjE3NjIxOA==",
                "organizations_url": "https://api.github.com/users/gsnedders/orgs",
                "received_events_url": "https://api.github.com/users/gsnedders/received_events",
                "repos_url": "https://api.github.com/users/gsnedders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gsnedders"
            },
            "html_url": "https://github.com/cython/cython/commit/fe556e9710eca672bcb62c7b2d719f6c5d153929",
            "node_id": "MDY6Q29tbWl0MjU3MTc2MzU3OmZlNTU2ZTk3MTBlY2E2NzJiY2I2MmM3YjJkNzE5ZjZjNWQxNTM5Mjk=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6f31f7d8b1e5180faf0017cb26ed721382b7f32e",
                    "sha": "6f31f7d8b1e5180faf0017cb26ed721382b7f32e",
                    "url": "https://api.github.com/repos/cython/cython/commits/6f31f7d8b1e5180faf0017cb26ed721382b7f32e"
                }
            ],
            "sha": "fe556e9710eca672bcb62c7b2d719f6c5d153929",
            "url": "https://api.github.com/repos/cython/cython/commits/fe556e9710eca672bcb62c7b2d719f6c5d153929"
        },
        {
            "author": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
                "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gsnedders/followers",
                "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gsnedders",
                "id": 176218,
                "login": "gsnedders",
                "node_id": "MDQ6VXNlcjE3NjIxOA==",
                "organizations_url": "https://api.github.com/users/gsnedders/orgs",
                "received_events_url": "https://api.github.com/users/gsnedders/received_events",
                "repos_url": "https://api.github.com/users/gsnedders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gsnedders"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4cd18d67b9e5fe9481ab8e4394f858273ba11335/comments",
            "commit": {
                "author": {
                    "date": "2020-05-09T21:37:15Z",
                    "email": "me@gsnedders.com",
                    "name": "Sam Sneddon"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-12T00:58:37Z",
                    "email": "me@gsnedders.com",
                    "name": "Sam Sneddon"
                },
                "message": "Avoid creating a temporary object when iterating over a unicode slice (GH-3536)",
                "tree": {
                    "sha": "40646db1debdcdf58961f27e626e4d4ff0d8ccb8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/40646db1debdcdf58961f27e626e4d4ff0d8ccb8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4cd18d67b9e5fe9481ab8e4394f858273ba11335",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
                "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gsnedders/followers",
                "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gsnedders",
                "id": 176218,
                "login": "gsnedders",
                "node_id": "MDQ6VXNlcjE3NjIxOA==",
                "organizations_url": "https://api.github.com/users/gsnedders/orgs",
                "received_events_url": "https://api.github.com/users/gsnedders/received_events",
                "repos_url": "https://api.github.com/users/gsnedders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gsnedders"
            },
            "html_url": "https://github.com/cython/cython/commit/4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "node_id": "MDY6Q29tbWl0MjU3MTc2MzU3OjRjZDE4ZDY3YjllNWZlOTQ4MWFiOGU0Mzk0Zjg1ODI3M2JhMTEzMzU=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fe556e9710eca672bcb62c7b2d719f6c5d153929",
                    "sha": "fe556e9710eca672bcb62c7b2d719f6c5d153929",
                    "url": "https://api.github.com/repos/cython/cython/commits/fe556e9710eca672bcb62c7b2d719f6c5d153929"
                }
            ],
            "sha": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
            "url": "https://api.github.com/repos/cython/cython/commits/4cd18d67b9e5fe9481ab8e4394f858273ba11335"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3600/commits",
    "created_at": "2020-05-12T01:08:15Z",
    "diff_url": "https://github.com/cython/cython/pull/3600.diff",
    "draft": false,
    "head": {
        "label": "gsnedders:for_in_slice",
        "ref": "for_in_slice",
        "repo": {
            "archive_url": "https://api.github.com/repos/gsnedders/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gsnedders/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gsnedders/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gsnedders/cython/branches{/branch}",
            "clone_url": "https://github.com/gsnedders/cython.git",
            "collaborators_url": "https://api.github.com/repos/gsnedders/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gsnedders/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/gsnedders/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gsnedders/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gsnedders/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gsnedders/cython/contributors",
            "created_at": "2020-04-20T05:02:52Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gsnedders/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/gsnedders/cython/downloads",
            "events_url": "https://api.github.com/repos/gsnedders/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gsnedders/cython/forks",
            "full_name": "gsnedders/cython",
            "git_commits_url": "https://api.github.com/repos/gsnedders/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gsnedders/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gsnedders/cython/git/tags{/sha}",
            "git_url": "git://github.com/gsnedders/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/gsnedders/cython/hooks",
            "html_url": "https://github.com/gsnedders/cython",
            "id": 257176357,
            "issue_comment_url": "https://api.github.com/repos/gsnedders/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gsnedders/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gsnedders/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/gsnedders/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gsnedders/cython/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/gsnedders/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gsnedders/cython/merges",
            "milestones_url": "https://api.github.com/repos/gsnedders/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNTcxNzYzNTc=",
            "notifications_url": "https://api.github.com/repos/gsnedders/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
                "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gsnedders/followers",
                "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gsnedders",
                "id": 176218,
                "login": "gsnedders",
                "node_id": "MDQ6VXNlcjE3NjIxOA==",
                "organizations_url": "https://api.github.com/users/gsnedders/orgs",
                "received_events_url": "https://api.github.com/users/gsnedders/received_events",
                "repos_url": "https://api.github.com/users/gsnedders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gsnedders"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gsnedders/cython/pulls{/number}",
            "pushed_at": "2020-05-14T00:02:15Z",
            "releases_url": "https://api.github.com/repos/gsnedders/cython/releases{/id}",
            "size": 58236,
            "ssh_url": "git@github.com:gsnedders/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gsnedders/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/gsnedders/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gsnedders/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/gsnedders/cython/subscription",
            "svn_url": "https://github.com/gsnedders/cython",
            "tags_url": "https://api.github.com/repos/gsnedders/cython/tags",
            "teams_url": "https://api.github.com/repos/gsnedders/cython/teams",
            "trees_url": "https://api.github.com/repos/gsnedders/cython/git/trees{/sha}",
            "updated_at": "2020-04-20T05:02:55Z",
            "url": "https://api.github.com/repos/gsnedders/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "4cd18d67b9e5fe9481ab8e4394f858273ba11335",
        "user": {
            "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
            "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gsnedders/followers",
            "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gsnedders",
            "id": 176218,
            "login": "gsnedders",
            "node_id": "MDQ6VXNlcjE3NjIxOA==",
            "organizations_url": "https://api.github.com/users/gsnedders/orgs",
            "received_events_url": "https://api.github.com/users/gsnedders/received_events",
            "repos_url": "https://api.github.com/users/gsnedders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gsnedders"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3600",
    "id": 416427323,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3600",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "1b2681e24d48dd4b2e4977b7bdbf85077638b0a5",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDE2NDI3MzIz",
    "number": 3600,
    "patch_url": "https://github.com/cython/cython/pull/3600.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3600/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/4cd18d67b9e5fe9481ab8e4394f858273ba11335",
    "title": "Optimize iterating over char*/bytes/unicode slices",
    "updated_at": "2020-05-15T14:19:27Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3600",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/176218?v=4",
        "events_url": "https://api.github.com/users/gsnedders/events{/privacy}",
        "followers_url": "https://api.github.com/users/gsnedders/followers",
        "following_url": "https://api.github.com/users/gsnedders/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsnedders/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gsnedders",
        "id": 176218,
        "login": "gsnedders",
        "node_id": "MDQ6VXNlcjE3NjIxOA==",
        "organizations_url": "https://api.github.com/users/gsnedders/orgs",
        "received_events_url": "https://api.github.com/users/gsnedders/received_events",
        "repos_url": "https://api.github.com/users/gsnedders/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gsnedders/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsnedders/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gsnedders"
    }
}