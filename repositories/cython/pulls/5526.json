{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/5526/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5526/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/5526"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/5526"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5526/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5526"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/4c224f5021da32e2b48768978594bc8fb2960ce7"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1407,
            "forks_count": 1407,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1181,
            "open_issues_count": 1181,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2023-07-18T09:05:56Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 68241,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 8088,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2023-07-18T13:34:29Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 8088,
            "watchers_count": 8088,
            "web_commit_signoff_required": false
        },
        "sha": "d0302237943f14240d185010cf6d8341ad985835",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "With Cython 3.0 in development for a long time, the release notes -- which are split over 15 different sections (11 alphas, 3 betas, at least 1rc, plus GA) and many years -- are IMO very hard to absorb for an average (or even advanced) user. Add on top that various different fixes were backported to 0.29 (or sometimes, just the compatibility, without the functionality), and it becomes pretty much impenetrable to know what's _actually_ in 3.0.\r\n\r\nEven though it's probably a bunch of work, I think Cython 3.0 deserves some kind of unified release notes that are an easy reference of what's new, what's already in 0.29, what changed, etc.\r\n\r\nI had a moment today to try my hand at this, but quickly realized that I'm a bit in over my head with coming up with categories, writing a prose summary, and accurately categorizing/summarizing the various items. 😅 \r\n\r\nBefore I pour more time in this, I though I'd open a PR to see if there's even any appetite for this.\r\n\r\nMy goal would not be to _replace_ the current release notes, they can stay as they are. I see two variants that I'd find worthwhile:\r\n* an additional section with the unified & complete list of changes (ideally relegating the alpha/beta sections to a fold-out)\r\n* an additional section with just a high-level prose summary, leaving the details to the alpha/beta sections.\r\n\r\nPS. Only the last commit is currently worth reviewing; the first one is a 1:1 duplication of all the 3.0 release notes, so that it becomes easier to follow later commits that are just moving around lines. This is obviously very much WIP.\r\n\r\n",
    "closed_at": "2023-07-17T15:27:08Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1261647274"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1261647274"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this list is a mixture of a few different things.\r\n\r\n1) Cython 3 uses the Python 3 `language_level` by default, which picks up things like the print statement, unicode strings, division changes etc. Much of this was available in 0.29.x but not by default.\r\n\r\n2) Cython has changes a number of things to be closer to *Python* behaviour in general:\r\n\r\n* e.g. supporting `__add__` and `__radd__` operators in classes.\r\n* The power operator produces floating point/complex numbers as appropriate.\r\n* (I'm sure there's at least one other thing that's slipped my mind)\r\n\r\n3) Some new Python 3 features we've implemented:\r\n\r\n* the class initialization stuff,\r\n* `__annotations__` in classes\r\n* subscriptable types",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-12T19:37:50Z",
            "diff_hunk": "@@ -2,6 +2,1660 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+We mark affected lines below with †.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs:\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`)\n+* `PEP-487`_: Simpler customisation of class creation\n+* `PEP-563`_: Postponed Evaluation of Annotations\n+* `PEP-570`_: Positional-Only Parameters\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`)\n+* `PEP-590`_: Vectorcall protocol\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators\n+\n+Typing support in the sense of `PEP-484`_ and `PEP-560`_ was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1261647274",
            "id": 1261647274,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5LMzWq",
            "original_commit_id": "4dbf9a5615fcfb3ef04abd68bb8f6bc820d2f766",
            "original_line": 68,
            "original_position": 62,
            "original_start_line": null,
            "path": "CHANGES.rst",
            "position": null,
            "pull_request_review_id": 1527112166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1261647274/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-12T19:45:54Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1261647274",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1261648341"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1261648341"
                }
            },
            "author_association": "MEMBER",
            "body": "The substantial change here is that `noexcept` is no longer the default",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-12T19:39:01Z",
            "diff_hunk": "@@ -2,6 +2,1660 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+We mark affected lines below with †.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs:\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`)\n+* `PEP-487`_: Simpler customisation of class creation\n+* `PEP-563`_: Postponed Evaluation of Annotations\n+* `PEP-570`_: Positional-Only Parameters\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`)\n+* `PEP-590`_: Vectorcall protocol\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators\n+\n+Typing support in the sense of `PEP-484`_ and `PEP-560`_ was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+[TODO: more precise]\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting\n+\n+Furthermore, pure python mode gain many new features to be able to control\n+most things that were usually only available in C. Examples:\n+[TODO: improve]\n+* with gil / nogil\n+* etc.\n+\n+Also: Something about the limited API.\n+\n+Interaction with numpy\n+----------------------\n+\n+[various]\n+\n+Exception handling\n+------------------\n+\n+Cython 3.0.0 overhauled the exception handling by doing [XYZ]",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1261648341",
            "id": 1261648341,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5LMznV",
            "original_commit_id": "4dbf9a5615fcfb3ef04abd68bb8f6bc820d2f766",
            "original_line": 88,
            "original_position": 87,
            "original_start_line": null,
            "path": "CHANGES.rst",
            "position": null,
            "pull_request_review_id": 1527112166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1261648341/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-12T19:45:54Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1261648341",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1261650364"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1261650364"
                }
            },
            "author_association": "MEMBER",
            "body": "There's a few \"code-generation\" features that could be grouped here:\r\n* cdef dataclasses\r\n* total_ordering\r\n* numpy `ufunc`\r\n\r\nThe basic gist I think is that they're features that generate helper code around lower-level Cython features to try to make them more usable",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-12T19:41:09Z",
            "diff_hunk": "@@ -2,6 +2,1660 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+We mark affected lines below with †.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs:\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`)\n+* `PEP-487`_: Simpler customisation of class creation\n+* `PEP-563`_: Postponed Evaluation of Annotations\n+* `PEP-570`_: Positional-Only Parameters\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`)\n+* `PEP-590`_: Vectorcall protocol\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators\n+\n+Typing support in the sense of `PEP-484`_ and `PEP-560`_ was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+[TODO: more precise]\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting\n+\n+Furthermore, pure python mode gain many new features to be able to control\n+most things that were usually only available in C. Examples:\n+[TODO: improve]\n+* with gil / nogil\n+* etc.\n+\n+Also: Something about the limited API.\n+\n+Interaction with numpy\n+----------------------\n+\n+[various]\n+\n+Exception handling\n+------------------\n+\n+Cython 3.0.0 overhauled the exception handling by doing [XYZ]\n+\n+Compatibility with C\n+--------------------\n+\n+[Various]\n+\n+Compatibility with C++\n+----------------------\n+\n+[Lots]\n+\n+Commandline Interface\n+---------------------\n+\n+[Various]\n+\n+Build integration\n+-----------------\n+\n+[Various]\n+\n+Other changes\n+-------------\n+\n+[Various]",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1261650364",
            "id": 1261650364,
            "line": 574,
            "node_id": "PRRC_kwDOABDGAc5LM0G8",
            "original_commit_id": "4dbf9a5615fcfb3ef04abd68bb8f6bc820d2f766",
            "original_line": 457,
            "original_position": 112,
            "original_start_line": null,
            "path": "CHANGES.rst",
            "position": 573,
            "pull_request_review_id": 1527112166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1261650364/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-12T19:46:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1261650364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1261651441"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1261651441"
                }
            },
            "author_association": "MEMBER",
            "body": "There's a few \"code-generation\" features that could be grouped here:\r\n* cdef dataclasses\r\n* total_ordering\r\n* numpy `ufunc`\r\n\r\nThe basic gist I think is that they're features that generate helper code around Cython types to try to make them more usable",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-12T19:42:11Z",
            "diff_hunk": "@@ -2,6 +2,1660 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+We mark affected lines below with †.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs:\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`)\n+* `PEP-487`_: Simpler customisation of class creation\n+* `PEP-563`_: Postponed Evaluation of Annotations\n+* `PEP-570`_: Positional-Only Parameters\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`)\n+* `PEP-590`_: Vectorcall protocol\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators\n+\n+Typing support in the sense of `PEP-484`_ and `PEP-560`_ was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+[TODO: more precise]\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting\n+\n+Furthermore, pure python mode gain many new features to be able to control\n+most things that were usually only available in C. Examples:\n+[TODO: improve]\n+* with gil / nogil\n+* etc.\n+\n+Also: Something about the limited API.\n+\n+Interaction with numpy\n+----------------------\n+\n+[various]\n+\n+Exception handling\n+------------------\n+\n+Cython 3.0.0 overhauled the exception handling by doing [XYZ]\n+\n+Compatibility with C\n+--------------------\n+\n+[Various]\n+\n+Compatibility with C++\n+----------------------\n+\n+[Lots]\n+\n+Commandline Interface\n+---------------------\n+\n+[Various]\n+\n+Build integration\n+-----------------\n+\n+[Various]\n+\n+Other changes\n+-------------\n+\n+[Various]",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1261651441",
            "id": 1261651441,
            "line": 574,
            "node_id": "PRRC_kwDOABDGAc5LM0Xx",
            "original_commit_id": "4dbf9a5615fcfb3ef04abd68bb8f6bc820d2f766",
            "original_line": 457,
            "original_position": 112,
            "original_start_line": null,
            "path": "CHANGES.rst",
            "position": 573,
            "pull_request_review_id": 1527112166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1261651441/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-12T19:45:54Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1261651441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1261654312"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1261654312"
                }
            },
            "author_association": "MEMBER",
            "body": "Probably the most significant is \"forwarding references\", which makes it easier to wrap a lot of stuff.\r\n\r\nI added `cpp_locals` locals to try to make c++ variables behave more like Python ones (i.e. they start in an uninitialized state). I don't think anyone's used it much. The main practical advantage is that it removes the requirement to be default-constructible.\r\n\r\nThere's quite a few small changes to try to make Cython use `std::move` automatically, which should make things more efficient and reduce the need for everything to be automatically copyable.",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-12T19:45:06Z",
            "diff_hunk": "@@ -2,6 +2,1660 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+We mark affected lines below with †.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs:\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`)\n+* `PEP-487`_: Simpler customisation of class creation\n+* `PEP-563`_: Postponed Evaluation of Annotations\n+* `PEP-570`_: Positional-Only Parameters\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`)\n+* `PEP-590`_: Vectorcall protocol\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators\n+\n+Typing support in the sense of `PEP-484`_ and `PEP-560`_ was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+[TODO: more precise]\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting\n+\n+Furthermore, pure python mode gain many new features to be able to control\n+most things that were usually only available in C. Examples:\n+[TODO: improve]\n+* with gil / nogil\n+* etc.\n+\n+Also: Something about the limited API.\n+\n+Interaction with numpy\n+----------------------\n+\n+[various]\n+\n+Exception handling\n+------------------\n+\n+Cython 3.0.0 overhauled the exception handling by doing [XYZ]\n+\n+Compatibility with C\n+--------------------\n+\n+[Various]\n+\n+Compatibility with C++\n+----------------------\n+\n+[Lots]",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1261654312",
            "id": 1261654312,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5LM1Eo",
            "original_commit_id": "4dbf9a5615fcfb3ef04abd68bb8f6bc820d2f766",
            "original_line": 98,
            "original_position": 97,
            "original_start_line": null,
            "path": "CHANGES.rst",
            "position": null,
            "pull_request_review_id": 1527112166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1261654312/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-12T19:45:54Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1261654312",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1262866137"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1262866137"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I know. For now I just copied the text introducing that change to the top-level of that section.",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-13T17:28:54Z",
            "diff_hunk": "@@ -2,6 +2,1660 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+We mark affected lines below with †.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs:\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`)\n+* `PEP-487`_: Simpler customisation of class creation\n+* `PEP-563`_: Postponed Evaluation of Annotations\n+* `PEP-570`_: Positional-Only Parameters\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`)\n+* `PEP-590`_: Vectorcall protocol\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators\n+\n+Typing support in the sense of `PEP-484`_ and `PEP-560`_ was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+[TODO: more precise]\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting\n+\n+Furthermore, pure python mode gain many new features to be able to control\n+most things that were usually only available in C. Examples:\n+[TODO: improve]\n+* with gil / nogil\n+* etc.\n+\n+Also: Something about the limited API.\n+\n+Interaction with numpy\n+----------------------\n+\n+[various]\n+\n+Exception handling\n+------------------\n+\n+Cython 3.0.0 overhauled the exception handling by doing [XYZ]",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1262866137",
            "id": 1262866137,
            "in_reply_to_id": 1261648341,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5LRc7Z",
            "original_commit_id": "4dbf9a5615fcfb3ef04abd68bb8f6bc820d2f766",
            "original_line": 88,
            "original_position": 87,
            "original_start_line": null,
            "path": "CHANGES.rst",
            "position": null,
            "pull_request_review_id": 1528941628,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1262866137/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-13T17:28:54Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1262866137",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1262866975"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1262866975"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yeah, this is going to be a long list of things. I've introduced another level of headers to group these changes a bit more, but haven't touched on the things you mentioned yet.",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-13T17:29:44Z",
            "diff_hunk": "@@ -2,6 +2,1660 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+We mark affected lines below with †.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs:\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`)\n+* `PEP-487`_: Simpler customisation of class creation\n+* `PEP-563`_: Postponed Evaluation of Annotations\n+* `PEP-570`_: Positional-Only Parameters\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`)\n+* `PEP-590`_: Vectorcall protocol\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators\n+\n+Typing support in the sense of `PEP-484`_ and `PEP-560`_ was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1262866975",
            "id": 1262866975,
            "in_reply_to_id": 1261647274,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5LRdIf",
            "original_commit_id": "4dbf9a5615fcfb3ef04abd68bb8f6bc820d2f766",
            "original_line": 68,
            "original_position": 62,
            "original_start_line": null,
            "path": "CHANGES.rst",
            "position": null,
            "pull_request_review_id": 1528942958,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1262866975/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-13T17:29:44Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1262866975",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1262868122"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1262868122"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "For now I copied the obviously C++ related changes to that section, and it's pretty long. I haven't started condensing the changes into a summary, but what you've written here is a great start!\r\n",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-13T17:30:59Z",
            "diff_hunk": "@@ -2,6 +2,1660 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+We mark affected lines below with †.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs:\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`)\n+* `PEP-487`_: Simpler customisation of class creation\n+* `PEP-563`_: Postponed Evaluation of Annotations\n+* `PEP-570`_: Positional-Only Parameters\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`)\n+* `PEP-590`_: Vectorcall protocol\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators\n+\n+Typing support in the sense of `PEP-484`_ and `PEP-560`_ was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+[TODO: more precise]\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting\n+\n+Furthermore, pure python mode gain many new features to be able to control\n+most things that were usually only available in C. Examples:\n+[TODO: improve]\n+* with gil / nogil\n+* etc.\n+\n+Also: Something about the limited API.\n+\n+Interaction with numpy\n+----------------------\n+\n+[various]\n+\n+Exception handling\n+------------------\n+\n+Cython 3.0.0 overhauled the exception handling by doing [XYZ]\n+\n+Compatibility with C\n+--------------------\n+\n+[Various]\n+\n+Compatibility with C++\n+----------------------\n+\n+[Lots]",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1262868122",
            "id": 1262868122,
            "in_reply_to_id": 1261654312,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5LRdaa",
            "original_commit_id": "4dbf9a5615fcfb3ef04abd68bb8f6bc820d2f766",
            "original_line": 98,
            "original_position": 97,
            "original_start_line": null,
            "path": "CHANGES.rst",
            "position": null,
            "pull_request_review_id": 1528944829,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1262868122/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-13T17:30:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1262868122",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1265361687"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1265361687"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Bascially, my idea was that all the release notes that have been duplicated here (intentionally) are \"TODOs\" that still need to be moved to a proper subsection (even if it's \"Other\"), or deleted. I haven't managed to separate all of them into the approprate sections yet.\r\n\r\nThe CLI-parts should be easy, the build system part hopefully too. Pure Python mode is less obvious to me, and even less so where to add something about memory views or error handling.\r\n\r\nWe might also want to add additional sections like \"Improved typing\". There are _a lot_ of changes.",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-17T13:33:18Z",
            "diff_hunk": "@@ -2,6 +2,1614 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+We mark affected lines below with †.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs\n+^^^^^^^^^^^^^^^^\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers (Github issue :issue:`2601`)\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`) (Github issue :issue:`2580`)\n+* `PEP-487`_: Simpler customisation of class creation (Github issue :issue:`2781`)\n+* `PEP-563`_: Postponed Evaluation of Annotations (Github issue :issue:`3285`)\n+* `PEP-570`_: Positional-Only Parameters (Github issue :issue:`2915`)\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`) (Github issue :issue:`2636`)\n+* `PEP-590`_: Vectorcall protocol (Github issue :issue:`2263`)\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators (Github issue :issue:`4570`)\n+\n+Typing support in the sense of `PEP-484`_ (Github issues :issue:`3949`, :issue:`4243`)\n+and `PEP-560`_ (Github issues :issue:`2753`, :issue:`3537`, :issue:`3764`) was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Generator expressions and comprehensions now look up their outer-most iterable\n+  on creation, as Python does, and not later on start, as they did previously.\n+  (Github issue :issue:`1159`)\n+\n+* C-API declarations for context variables in Python 3.7 were added.\n+  Original patch by Zolisa Bleki.  (Github issue :issue:`2281`)\n+\n+* ``@cython.trashcan(True)`` can be used on an extension type to enable the\n+  CPython :ref:`trashcan`. This allows deallocating deeply recursive objects\n+  without overflowing the stack. Patch by Jeroen Demeyer.  (Github issue :issue:`2842`)\n+\n+* The long deprecated include files ``python_*``, ``stdio``, ``stdlib`` and\n+  ``stl`` in ``Cython/Includes/Deprecated/`` were removed.  Use the ``libc.*``\n+  and ``cpython.*`` pxd modules instead.\n+  Patch by Jeroen Demeyer.  (Github issue :issue:`2904`)\n+\n+* ``PyMem_[Raw]Calloc()`` was added to the ``cpython.mem`` declarations.\n+  Note that the ``Raw`` versions are no longer #defined by Cython.  The previous\n+  macros were not considered safe.\n+  Patch by William Schwartz and David Woods.  (Github issue :issue:`3047`)\n+\n+* Unicode module names and imports are supported.\n+  Patch by David Woods.  (Github issue :issue:`3119`)\n+\n+* ``PyEval_InitThreads()`` is no longer used in Py3.7+ where it is a no-op.\n+\n+* The ``Tempita`` module no longer contains HTML processing capabilities, which\n+  were found to be broken in Python 3.8 and later.\n+  Patch by Marcel Stimberg.  (Github issue :issue:`3309`)\n+\n+* Cython avoids raising ``StopIteration`` in ``__next__`` methods when possible.\n+  Patch by David Woods.  (Github issue :issue:`3447`)\n+\n+* ``__del__(self)`` on extension types now maps to ``tp_finalize`` in Python 3.\n+  Original patch by ax487.  (Github issue :issue:`3612`)\n+\n+* A low-level inline function ``total_seconds(timedelta)`` was added to\n+  ``cpython.datetime`` to bypass the Python method call.  Note that this function\n+  is not guaranteed to give exactly the same results for very large time intervals.\n+  Patch by Brock Mendel.  (Github issue :issue:`3616`)\n+\n+* A new module ``cpython.time`` was added with some low-level alternatives to\n+  Python's ``time`` module.\n+  Patch by Brock Mendel.  (Github issue :issue:`3767`)\n+\n+* Python's ``memoryview`` is now a known builtin type with optimised properties.\n+  (Github issue :issue:`3798`)\n+\n+* The value ``PyBUF_MAX_NDIM`` was added to the ``cpython.buffer`` module.\n+  Patch by John Kirkham.  (Github issue :issue:`3811`)\n+\n+* C-API declarations for ``cpython.fileobject`` were added.\n+  Patch by Zackery Spytz.  (Github issue :issue:`3906`)\n+\n+* The signature of ``PyFloat_FromString()`` in ``cpython.float`` was changed\n+  to match the signature in Py3.  It still has an automatic fallback for Py2.\n+  (Github issue :issue:`3909`)\n+\n+* The internal CPython macro ``Py_ISSPACE()`` is no longer used.\n+  Original patch by Andrew Jones.  (Github issue :issue:`4111`)\n+\n+* More C-API declarations for ``cpython.datetime``  were added.\n+  Patch by Bluenix2.  (Github issue :issue:`4128`)\n+\n+* The generated C code failed to compile in CPython 3.11a4 and later.\n+  (Github issue :issue:`4500`)\n+\n+* Some old usages of the deprecated Python ``imp`` module were replaced with ``importlib``.\n+  Patch by Matúš Valo.  (Github issue :issue:`4640`)\n+\n+* Context managers can be written in parentheses.\n+  Patch by David Woods.  (Github issue :issue:`4814`)\n+\n+* The runtime size check for imported ``PyVarObject`` types was improved\n+  to reduce false positives and adapt to Python 3.11.\n+  Patch by David Woods.  (Github issues :issue:`4827`, :issue:`4894`)\n+\n+* The special methods ``__matmul__``, ``__truediv__``, ``__floordiv__`` failed to type\n+  their ``self`` argument.\n+  (Github issue :issue:`5067`)\n+\n+* ``cpdef`` enums no longer use ``OrderedDict`` but ``dict`` in Python 3.6 and later.\n+  Patch by GalaxySnail.  (Github issue :issue:`5180`)\n+\n+* Several problems with CPython 3.12 were resolved.\n+  (Github issue :issue:`5238`)\n+\n+* Very long Python integer constants could exceed the maximum C name length of MSVC.\n+  Patch by 0dminnimda.  (Github issue :issue:`5290`)\n+\n+* The exception handling code was adapted to CPython 3.12.\n+  (Github issue :issue:`5442`)\n+\n+* The dataclass implementation was adapted to support Python 3.12.\n+  (Github issue :issue:`5346`)\n+\n+* The Python ``int`` handling code was adapted to make use of the new ``PyLong``\n+  internals in CPython 3.12.\n+  (Github issue :issue:`5353`)\n+\n+* The type ``cython.Py_hash_t`` is available in Python mode.\n+\n+* The names of Cython's internal types (functions, generator, coroutine, etc.)\n+  are now qualified with the module name of the internal Cython module that is\n+  used for sharing them across Cython implemented modules, for example\n+  ``_cython_3_0a5.coroutine``.  This was done to avoid making them look like\n+  homeless builtins, to help with debugging, and in order to avoid a CPython\n+  warning according to https://bugs.python.org/issue20204\n+\n+Initial support for Limited API\n+-------------------------------\n+\n+CPython provides a stable, limited subset of its C-API as the so-called Limited API.\n+This C-API comes with the guarantee of a stable ABI, meaning that extensions modules\n+that were compiled for one version of CPython can also be imported in later versions\n+without recompilation.\n+\n+There is initial support for this in Cython.  By defining the ``CYTHON_LIMITED_API``\n+macro, Cython cuts down its C-API usage and tries to adhere to the Limited C-API.\n+By also defining the CPython macro ``Py_LIMITED_API`` to a specific CPython\n+compatibility version, you can additionally restrict the C-API during the C compilation,\n+thus enforcing the forward compatibility of the extension module, probably at the cost\n+of a bit of performance.\n+\n+Note that \"initial support\" in Cython really means that setting the ``Py_LIMITED_API``\n+macro may not work for your specific code.  There are limitations in the Limited C-API\n+that are difficult for Cython to generate C code for, so some advanced Python features\n+(like async code) may not lead to C code that cannot adhere to the Limited C-API, or\n+where Cython simply does not know yet how to adhere to it.  Basically, if you get your\n+code to compile with both macros set, and it passes your test suite, then it should be\n+possible to import the extension module also in later CPython versions.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Preliminary support for the CPython's ``Py_LIMITED_API`` (stable ABI) is\n+  available by setting the  ``CYTHON_LIMITED_API`` C macro.  Note that the\n+  support is currently in an early stage and many features do not yet work.\n+  You currently still have to define ``Py_LIMITED_API`` externally in order\n+  to restrict the API usage.  This will change when the feature stabilises.\n+  Patches by Eddie Elizondo and David Woods.  (Github issues :issue:`3223`,\n+  :issue:`3311`, :issue:`3501`)\n+\n+* Limited API support was improved.\n+  Patches by Matthias Braun.  (Github issues :issue:`3693`, :issue:`3707`)\n+\n+* ``_Py_TPFLAGS_HAVE_VECTORCALL`` was always set on extension types when using the limited API.\n+  Patch by David Woods.  (Github issue :issue:`4453`)\n+\n+* Limited API C preprocessor warning is compatible with MSVC. Patch by\n+  Victor Molina Garcia.  (Github issue :issue:`4826`)\n+\n+* The embedding code no longer calls deprecated C-API functions but uses the new ``PyConfig``\n+  API instead on CPython versions that support it (3.8+).\n+  Patch by Alexander Shadchin.  (Github issue :issue:`4895`)\n+\n+* Some C code issue were resolved for the Limited API target.\n+  (Github issues :issue:`5264`, :issue:`5265`, :issue:`5266`)\n+\n+* Conversion of Python ints to C ``int128`` is now always supported, although slow\n+  if dedicated C-API support is missing (``_PyLong_AsByteArray()``), specifically in\n+  the Limited C-API.\n+  (Github issue :issue:`5419`)\n+\n+* Custom buffer slot methods are now supported in the Limited C-API of Python 3.9+.\n+  Patch by Lisandro Dalcin.  (Github issue :issue:`5422`)\n+\n+Improved fidelity to Python semantics\n+-------------------------------------\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting\n+\n+\n+Improvements in Pure Python mode\n+--------------------------------\n+\n+Pure python mode gained many new features and was generally overhauled to make\n+it as capable as the \n+\n+\n+Code generation changes\n+-----------------------\n+\n+Cython has gained several major new features that speed up both the development\n+and the code. Dataclasses have gained an extension type equivalent that implements\n+the dataclass features in C code.  Similarly, the ``@functools.total_ordering``\n+decorator to an extension type will implement the comparison functions in C.\n+\n+FInally, NumPy ufuncs can be generated from simple computation functions with the\n+new ``@cython.ufunc`` decorator.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* A new function decorator ``@cython.ufunc`` automatically generates a (NumPy) ufunc that\n+  applies the calculation function to an entire memoryview.\n+  (Github issue :issue:`4758`)\n+\n+* Generated NumPy ufuncs could crash for large arrays due to incorrect GIL handling.\n+  (Github issue :issue:`5328`)\n+\n+\n+Interaction with numpy\n+----------------------\n+\n+The NumPy declarations (``cimport numpy``) were moved over to the NumPy project in order\n+to allow version specific changes on their side.\n+\n+One effect is that Cython does not use deprecated NumPy C-APIs any more.  Thus, you\n+can define the respective NumPy C macro to get rid of the compatibility warning at\n+C compile time.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Deprecated NumPy API usages were removed from ``numpy.pxd``.\n+  Patch by Matti Picus.  (Github issue :issue:`3365`)\n+\n+* ``cython.inline()`` now sets the ``NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION``\n+  C macro automatically when ``numpy`` is imported in the code, to avoid C compiler\n+  warnings about deprecated NumPy C-API usage.\n+\n+* ``numpy.import_array()`` is automatically called if ``numpy`` has been cimported\n+  and it has not been called in the module code.  This is intended as a hidden\n+  fail-safe so user code should continue to call ``numpy.import_array``.\n+  Patch by David Woods.  (Github issue :issue:`3524`)\n+\n+* The outdated getbuffer/releasebuffer implementations in the NumPy\n+  declarations were removed so that buffers declared as ``ndarray``\n+  now use the normal implementation in NumPy.\n+\n+* Several macros/functions declared in the NumPy API are now usable without\n+  holding the GIL.\n+\n+* The ``numpy`` declarations were updated.\n+  Patch by Brock Mendel.  (Github issue :issue:`3630`)\n+\n+* ``ndarray.shape`` failed to compile with Pythran and recent NumPy.\n+  Patch by Serge Guelton.  (Github issue :issue:`3762`)\n+\n+* A C-level compatibility issue with recent NumPy versions was resolved.\n+  Patch by David Woods.  (Github issue :issue:`4396`)\n+\n+* The generated modules no longer import NumPy internally when using\n+  fused types but no memoryviews.\n+  Patch by David Woods.  (Github issue :issue:`4935`)\n+\n+* ``np.long_t`` and ``np.ulong_t`` were removed from the NumPy declarations,\n+  synching Cython with upstream NumPy v1.25.0.  The aliases were confusing\n+  since they could mean different things on different platforms.\n+\n+\n+Exception handling\n+------------------\n+\n+Cython-implemented C functions now propagate exceptions by default, rather than\n+swallowing them in non-object returning function if the user forgot to add an\n+``except`` declaration to the signature.  This was a long-standing source of bugs,\n+but can require adding the ``noexcept`` declaration to existing functions if\n+exception propagation is really undesired.\n+(Github issue :issue:`4280`)\n+\n+To ease the transition for this break in behaviour, it is possible to set\n+``legacy_implicit_noexcept=True``.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* The exception handling annotation ``except +*`` was broken.\n+  Patch by David Woods.  (Github issues :issue:`3065`, :issue:`3066`)\n+\n+* Exceptions within for-loops that run over memoryviews could lead to a ref-counting error.\n+  Patch by David Woods.  (Github issue :issue:`4662`)\n+\n+* Improve conversion between function pointers with non-identical but\n+  compatible exception specifications.  Patches by David Woods.\n+  (Github issues :issue:`4770`, :issue:`4689`)\n+\n+* To opt out of the new, safer exception handling behaviour, legacy code can set the new\n+  directive ``legacy_implicit_noexcept=True`` for a transition period to keep the\n+  previous, unsafe behaviour.  This directive will eventually be removed in a later release.\n+  Patch by Matúš Valo.  (Github issue :issue:`5094`)\n+\n+* ``noexcept`` was not automatically applied to function pointer attributes in extern structs.\n+  Patch by Matúš Valo.  (Github issue :issue:`5359`)\n+\n+* The code ``except +nogil`` (declaring a C++ exception handler function called ``nogil``)\n+  is now rejected because it is almost certainly a typo from ``except + nogil``.\n+  (Github issue :issue:`5430`)\n+\n+* Handling freshly raised exceptions that didn't have a traceback yet could crash.\n+  (Github issue :issue:`5495`)\n+\n+\n+Compatibility with C\n+--------------------\n+\n+The support for C features like ``const`` or ``volatile`` was substantially improved.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* The ``volatile`` C modifier is supported in Cython code.\n+  Patch by Jeroen Demeyer.  (Github issue :issue:`1667`)\n+\n+* ``const`` can be used together with fused types.\n+  Patch by Thomas Vincent.  (Github issue :issue:`1772`)\n+\n+* Constant integer expressions that used a negative exponent were evaluated\n+  as integer 0 instead of the expected float value.\n+  Patch by Kryštof Pilnáček.  (Github issue :issue:`2133`)\n+\n+* C11 ``complex.h`` is now properly detected.\n+  (Github issue :issue:`2513`)\n+\n+* Standard C/C++ atomic operations are now used for memory views, if available.\n+  (Github issue :issue:`4925`)\n+\n+* ``const`` types could not be returned from functions.\n+  Patch by Mike Graham.  (Github issue :issue:`5135`)\n+\n+* The module state struct was not initialised in correct C (before C23), leading to\n+  compile errors on Windows.\n+  Patch by yudonglin.  (Github issue :issue:`5169`)\n+\n+* Structs that contained an array field resulted in incorrect C code.  Their initialisation\n+  now uses ``memcpy()``.\n+  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5178`)\n+\n+* With MSVC, Cython no longer enables C-Complex support by accident (which is not supported there).\n+  (Github issue :issue:`5512`)\n+\n+* The ``extern \"C\"`` and ``extern \"C++\"`` markers that Cython generates for\n+  ``public`` functions can now be controlled by setting the C macro ``CYTHON_EXTERN_C``.\n+\n+\n+Compatibility with C++\n+----------------------\n+\n+Many C++ features like forwarding references or ``std::move`` are now supported or even used\n+internally, if possible.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Nested ``cppclass`` definitions are supported.\n+  Patch by samaingw.  (Github issue :issue:`1218`)\n+\n+* ``cdef public`` functions used an incorrect linkage declaration in C++.\n+  Patch by Maximilien Colange.  (Github issue :issue:`1839`)\n+\n+* Overloaded C++ static methods were lost.\n+  Patch by Ashwin Srinath.  (Github :issue:`1851`)\n+\n+* Direct assignments to C++ references are now allowed.\n+  Patch by David Woods.  (Github issue :issue:`1863`)\n+\n+* Templating C++ classes with memory view types lead to buggy code and is now rejected.\n+  Patch by David Woods.  (Github issue :issue:`3085`)\n+\n+* C++ ``typeid()`` failed for fused types.\n+  Patch by David Woods.  (Github issue :issue:`3203`)\n+\n+* The destructor is now called for fields in C++ structs.\n+  Patch by David Woods.  (Github issue :issue:`3226`)\n+\n+* ``std::move()`` is now used in C++ mode for internal temp variables to\n+  make them work without copying values.\n+  Patch by David Woods.  (Github issues :issue:`3253`, :issue:`1612`)\n+\n+* The C++ ``typeid()`` function was allowed in C mode.\n+  Patch by Celelibi.  (Github issue :issue:`3637`)\n+\n+* The construct ``for x in cpp_function_call()`` failed to compile.\n+  Patch by David Woods.  (Github issue :issue:`3663`)\n+\n+* C++ references failed to compile when used as Python object indexes.\n+  Patch by David Woods.  (Github issue :issue:`3754`)\n+\n+* A compile failure for C++ enums in Py3.4 / MSVC was resolved.\n+  Patch by Ashwin Srinath.  (Github issue :issue:`3782`)\n+\n+* C++17 execution policies are supported in ``libcpp.algorithm``.\n+  Patch by Ashwin Srinath.  (Github issue :issue:`3790`)\n+\n+* C++ iteration more safely stores the iterable in temporary variables.\n+  Patch by Xavier.  (Github issue :issue:`3828`)\n+\n+* Cython compiled functions always provided a ``__self__`` attribute,\n+  regardless of being used as a method or not.\n+  Patch by David Woods.  (Github issue :issue:`4036`)\n+\n+* Nested C++ types were not usable through ctypedefs.\n+  Patch by Vadim Pushtaev.  (Github issue :issue:`4039`)\n+\n+* Some C++ STL methods did not propagate exceptions.\n+  Patch by Max Bachmann.  (Github issue :issue:`4079`)\n+\n+* More declarations for C++ string methods were added.\n+\n+* Converting C++ containers to Python lists uses less memory allocations.\n+  Patch by Max Bachmann.  (Github issue :issue:`4081`)\n+\n+* Conversion from Python dict to C++ map now supports arbitrary Python mappings,\n+  not just dicts.\n+\n+* ``std::move()`` is now also called for temps during ``yield``.\n+  Patch by Yu Feng.  (Github issue :issue:`4154`)\n+\n+* A new directive ``cpp_locals`` was added that allows local C++ variables to\n+  be lazily initialised (without default constructor), thus making them behave\n+  more like Python variables.\n+  Patch by David Woods.  (Github issue :issue:`4160`)\n+\n+* Generated utility code for C++ conversions no longer depends on several user\n+  definable directives that may make it behave incorrectly.\n+  Patch by David Woods.  (Github issue :issue:`4206`)\n+\n+* Code optimisations were not applied to methods of Cython implemented C++ classes.\n+  Patch by David Woods.  (Github issue :issue:`4212`)\n+\n+* Conversion from Python dicts to ``std::map`` was broken.\n+  Patch by David Woods and Mikkel Skofelt.  (Github issues :issue:`4228`, :issue:`4231`)\n+\n+* Several issues with the new ``cpp_locals`` directive were resolved and\n+  its test coverage improved.\n+  Patch by David Woods.  (Github issues :issue:`4265`, :issue:`4266`)\n+\n+* Declarations for ``libcpp.algorithms``, ``libcpp.set`` and ``libcpp.unordered_set``\n+  were extended.\n+  Patch by David Woods.  (Github issues :issue:`4271`, :issue:`4273`)\n+\n+* ``prange`` loops generated incorrect code when ``cpp_locals`` is enabled.\n+  Patch by David Woods.  (Github issue :issue:`4354`)\n+\n+* C++ post-increment/-decrement operators were not correctly looked up on declared C++\n+  classes, thus allowing Cython declarations to be missing for them and incorrect C++\n+  code to be generated.\n+  Patch by Max Bachmann.  (Github issue :issue:`4536`)\n+\n+* ``cpp_locals`` no longer have to be \"assignable\".\n+  (Github issue :issue:`4558`)\n+\n+* C++ references did not work on fused types.\n+  (Github issue :issue:`4717`)\n+\n+* Several C++ library declarations were added and fixed.\n+  Patches by Dobatymo, account-login, Jonathan Helgert, Evgeny Yakimov, GalaxySnail, Max Bachmann.\n+  (Github issues :issue:`4408`, :issue:`4419`, :issue:`4410`, :issue:`4395`,\n+  :issue:`4423`, :issue:`4448`, :issue:`4462`, :issue:`3293`, :issue:`4522`,\n+  :issue:`2171`, :issue:`4531`)\n+\n+* Some C++ and CPython library declarations were extended and fixed.\n+  Patches by Max Bachmann, Till Hoffmann, Julien Jerphanion, Wenjun Si.\n+  (Github issues :issue:`4530`, :issue:`4528`, :issue:`4710`, :issue:`4746`,\n+  :issue:`4751`, :issue:`4818`, :issue:`4762`, :issue:`4910`)\n+\n+* Some C/C++ warnings were resolved.\n+  Patches by Max Bachmann, Alexander Shadchin, at al.\n+  (Github issues :issue:`5004`, :issue:`5005`, :issue:`5019`, :issue:`5029`, :issue:`5096`)\n+\n+* Declarations were added for the C++ bit operations, some other parts of C++20 and CPython APIs.\n+  Patches by Jonathan Helgert, Dobatymo, William Ayd and Max Bachmann.\n+  (Github issues :issue:`4962`, :issue:`5101`, :issue:`5157`, :issue:`5163`, :issue:`5257`)\n+\n+* ``reversed()`` can now be used together with C++ iteration.\n+  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5002`)\n+\n+* Fully qualified C++ names prefixed by a cimported module name could fail to compile.\n+  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5229`)\n+\n+* Cython generated C++ code accidentally used C++11 features in some cases.\n+  (Github issue :issue:`5316`)\n+\n+* Some C++ warnings regarding ``const`` usage in internally generated utility code were resolved.\n+  Patch by Max Bachmann.  (Github issue :issue:`5301`)\n+\n+* C++ declarations for ``<cmath>``, ``<numbers>`` and ``std::any`` were added.\n+  Patches by Jonathan Helgert and Maximilien Colange.\n+  (Github issues :issue:`5262`, :issue:`5309`, :issue:`5314`)\n+\n+* Reverse iteration in C++ no longer removes the ``const`` qualifier from the item type.\n+  Patch by Isuru Fernando.  (Github issue :issue:`5478`)\n+\n+* C++ containers of item type ``bint`` could conflict with those of item type ``int``.\n+  (Github issue :issue:`5516`)\n+\n+Commandline Interface\n+---------------------\n+\n+[Various]\n+\n+Build integration\n+-----------------\n+\n+[Various]\n+\n+Other changes\n+-------------\n+\n+[Various]\n+\n+Bugs fixed\n+----------\n+\n+* Parser crash on hex/oct enum values.\n+  (Github issue :issue:`5524`)\n+* ...\n+\n+\n+3.0.0 rc 1 (2023-07-12)\n+=======================\n+\n+Features added\n+--------------\n+\n+* ``with gil`` and ``with nogil(flag)`` now accept their flag argument also in Python code.\n+  Patch by Matúš Valo.  (Github issue :issue:`5113`)\n+\n+* A new decorator ``@cython.with_gil`` is available in Python code to match the ``with gil``\n+  function declaration in Cython syntax.\n+\n+* Assigning a list to a ctuple is slightly faster.\n+\n+Bugs fixed\n+----------\n+\n+* The reference counting of memory views involved useless overhead.\n+  (Github issue :issue:`5510`)\n+\n+* Duplicate values in a ``cpdef`` enum could lead to invalid switch statements.\n+  (Github issue :issue:`5400`)\n+\n+* The Python implementation of ``cimport cython.cimports…`` could raise an ``ImportError``\n+  instead of an ``AttributeError`` when looking up package variable names.\n+  Patch by Matti Picus.  (Github issue :issue:`5411`)",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1265361687",
            "id": 1265361687,
            "line": 609,
            "node_id": "PRRC_kwDOABDGAc5La-MX",
            "original_commit_id": "66a542073dd84f29a1eab065938f90c3e23e6fa3",
            "original_line": 610,
            "original_position": 609,
            "original_start_line": 591,
            "path": "CHANGES.rst",
            "position": 608,
            "pull_request_review_id": 1532798856,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265361687/reactions"
            },
            "side": "RIGHT",
            "start_line": 590,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-17T13:34:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265361687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1265363014"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1265363014"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Note that none of the backports have been mentioned yet, nor marked accordingly. This was just an idea when I started this, perhaps it's too much effort and we can simply drop it.",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-17T13:34:22Z",
            "diff_hunk": "@@ -2,6 +2,1614 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+We mark affected lines below with †.",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1265363014",
            "id": 1265363014,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5La-hG",
            "original_commit_id": "66a542073dd84f29a1eab065938f90c3e23e6fa3",
            "original_line": 18,
            "original_position": 17,
            "original_start_line": 16,
            "path": "CHANGES.rst",
            "position": null,
            "pull_request_review_id": 1532798856,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265363014/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-17T13:34:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265363014",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1265402312"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1265402312"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Aside from referencing the resolved issues, I think @da-woods would have a lot to say / flesh out about this?",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-17T13:56:09Z",
            "diff_hunk": "@@ -2,6 +2,1613 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs\n+^^^^^^^^^^^^^^^^\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers (Github issue :issue:`2601`)\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`) (Github issue :issue:`2580`)\n+* `PEP-487`_: Simpler customisation of class creation (Github issue :issue:`2781`)\n+* `PEP-563`_: Postponed Evaluation of Annotations (Github issue :issue:`3285`)\n+* `PEP-570`_: Positional-Only Parameters (Github issue :issue:`2915`)\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`) (Github issue :issue:`2636`)\n+* `PEP-590`_: Vectorcall protocol (Github issue :issue:`2263`)\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators (Github issue :issue:`4570`)\n+\n+Typing support in the sense of `PEP-484`_ (Github issues :issue:`3949`, :issue:`4243`)\n+and `PEP-560`_ (Github issues :issue:`2753`, :issue:`3537`, :issue:`3764`) was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Generator expressions and comprehensions now look up their outer-most iterable\n+  on creation, as Python does, and not later on start, as they did previously.\n+  (Github issue :issue:`1159`)\n+\n+* C-API declarations for context variables in Python 3.7 were added.\n+  Original patch by Zolisa Bleki.  (Github issue :issue:`2281`)\n+\n+* ``@cython.trashcan(True)`` can be used on an extension type to enable the\n+  CPython :ref:`trashcan`. This allows deallocating deeply recursive objects\n+  without overflowing the stack. Patch by Jeroen Demeyer.  (Github issue :issue:`2842`)\n+\n+* The long deprecated include files ``python_*``, ``stdio``, ``stdlib`` and\n+  ``stl`` in ``Cython/Includes/Deprecated/`` were removed.  Use the ``libc.*``\n+  and ``cpython.*`` pxd modules instead.\n+  Patch by Jeroen Demeyer.  (Github issue :issue:`2904`)\n+\n+* ``PyMem_[Raw]Calloc()`` was added to the ``cpython.mem`` declarations.\n+  Note that the ``Raw`` versions are no longer #defined by Cython.  The previous\n+  macros were not considered safe.\n+  Patch by William Schwartz and David Woods.  (Github issue :issue:`3047`)\n+\n+* Unicode module names and imports are supported.\n+  Patch by David Woods.  (Github issue :issue:`3119`)\n+\n+* ``PyEval_InitThreads()`` is no longer used in Py3.7+ where it is a no-op.\n+\n+* The ``Tempita`` module no longer contains HTML processing capabilities, which\n+  were found to be broken in Python 3.8 and later.\n+  Patch by Marcel Stimberg.  (Github issue :issue:`3309`)\n+\n+* Cython avoids raising ``StopIteration`` in ``__next__`` methods when possible.\n+  Patch by David Woods.  (Github issue :issue:`3447`)\n+\n+* ``__del__(self)`` on extension types now maps to ``tp_finalize`` in Python 3.\n+  Original patch by ax487.  (Github issue :issue:`3612`)\n+\n+* A low-level inline function ``total_seconds(timedelta)`` was added to\n+  ``cpython.datetime`` to bypass the Python method call.  Note that this function\n+  is not guaranteed to give exactly the same results for very large time intervals.\n+  Patch by Brock Mendel.  (Github issue :issue:`3616`)\n+\n+* A new module ``cpython.time`` was added with some low-level alternatives to\n+  Python's ``time`` module.\n+  Patch by Brock Mendel.  (Github issue :issue:`3767`)\n+\n+* Python's ``memoryview`` is now a known builtin type with optimised properties.\n+  (Github issue :issue:`3798`)\n+\n+* The value ``PyBUF_MAX_NDIM`` was added to the ``cpython.buffer`` module.\n+  Patch by John Kirkham.  (Github issue :issue:`3811`)\n+\n+* C-API declarations for ``cpython.fileobject`` were added.\n+  Patch by Zackery Spytz.  (Github issue :issue:`3906`)\n+\n+* The signature of ``PyFloat_FromString()`` in ``cpython.float`` was changed\n+  to match the signature in Py3.  It still has an automatic fallback for Py2.\n+  (Github issue :issue:`3909`)\n+\n+* The internal CPython macro ``Py_ISSPACE()`` is no longer used.\n+  Original patch by Andrew Jones.  (Github issue :issue:`4111`)\n+\n+* More C-API declarations for ``cpython.datetime``  were added.\n+  Patch by Bluenix2.  (Github issue :issue:`4128`)\n+\n+* The generated C code failed to compile in CPython 3.11a4 and later.\n+  (Github issue :issue:`4500`)\n+\n+* Some old usages of the deprecated Python ``imp`` module were replaced with ``importlib``.\n+  Patch by Matúš Valo.  (Github issue :issue:`4640`)\n+\n+* Context managers can be written in parentheses.\n+  Patch by David Woods.  (Github issue :issue:`4814`)\n+\n+* The runtime size check for imported ``PyVarObject`` types was improved\n+  to reduce false positives and adapt to Python 3.11.\n+  Patch by David Woods.  (Github issues :issue:`4827`, :issue:`4894`)\n+\n+* The special methods ``__matmul__``, ``__truediv__``, ``__floordiv__`` failed to type\n+  their ``self`` argument.\n+  (Github issue :issue:`5067`)\n+\n+* ``cpdef`` enums no longer use ``OrderedDict`` but ``dict`` in Python 3.6 and later.\n+  Patch by GalaxySnail.  (Github issue :issue:`5180`)\n+\n+* Several problems with CPython 3.12 were resolved.\n+  (Github issue :issue:`5238`)\n+\n+* Very long Python integer constants could exceed the maximum C name length of MSVC.\n+  Patch by 0dminnimda.  (Github issue :issue:`5290`)\n+\n+* The exception handling code was adapted to CPython 3.12.\n+  (Github issue :issue:`5442`)\n+\n+* The dataclass implementation was adapted to support Python 3.12.\n+  (Github issue :issue:`5346`)\n+\n+* The Python ``int`` handling code was adapted to make use of the new ``PyLong``\n+  internals in CPython 3.12.\n+  (Github issue :issue:`5353`)\n+\n+* The type ``cython.Py_hash_t`` is available in Python mode.\n+\n+* The names of Cython's internal types (functions, generator, coroutine, etc.)\n+  are now qualified with the module name of the internal Cython module that is\n+  used for sharing them across Cython implemented modules, for example\n+  ``_cython_3_0a5.coroutine``.  This was done to avoid making them look like\n+  homeless builtins, to help with debugging, and in order to avoid a CPython\n+  warning according to https://bugs.python.org/issue20204\n+\n+Initial support for Limited API\n+-------------------------------\n+\n+CPython provides a stable, limited subset of its C-API as the so-called Limited API.\n+This C-API comes with the guarantee of a stable ABI, meaning that extensions modules\n+that were compiled for one version of CPython can also be imported in later versions\n+without recompilation.\n+\n+There is initial support for this in Cython.  By defining the ``CYTHON_LIMITED_API``\n+macro, Cython cuts down its C-API usage and tries to adhere to the Limited C-API.\n+By also defining the CPython macro ``Py_LIMITED_API`` to a specific CPython\n+compatibility version, you can additionally restrict the C-API during the C compilation,\n+thus enforcing the forward compatibility of the extension module, probably at the cost\n+of a bit of performance.\n+\n+Note that \"initial support\" in Cython really means that setting the ``Py_LIMITED_API``\n+macro may not work for your specific code.  There are limitations in the Limited C-API\n+that are difficult for Cython to generate C code for, so some advanced Python features\n+(like async code) may not lead to C code that cannot adhere to the Limited C-API, or\n+where Cython simply does not know yet how to adhere to it.  Basically, if you get your\n+code to compile with both macros set, and it passes your test suite, then it should be\n+possible to import the extension module also in later CPython versions.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Preliminary support for the CPython's ``Py_LIMITED_API`` (stable ABI) is\n+  available by setting the  ``CYTHON_LIMITED_API`` C macro.  Note that the\n+  support is currently in an early stage and many features do not yet work.\n+  You currently still have to define ``Py_LIMITED_API`` externally in order\n+  to restrict the API usage.  This will change when the feature stabilises.\n+  Patches by Eddie Elizondo and David Woods.  (Github issues :issue:`3223`,\n+  :issue:`3311`, :issue:`3501`)\n+\n+* Limited API support was improved.\n+  Patches by Matthias Braun.  (Github issues :issue:`3693`, :issue:`3707`)\n+\n+* ``_Py_TPFLAGS_HAVE_VECTORCALL`` was always set on extension types when using the limited API.\n+  Patch by David Woods.  (Github issue :issue:`4453`)\n+\n+* Limited API C preprocessor warning is compatible with MSVC. Patch by\n+  Victor Molina Garcia.  (Github issue :issue:`4826`)\n+\n+* The embedding code no longer calls deprecated C-API functions but uses the new ``PyConfig``\n+  API instead on CPython versions that support it (3.8+).\n+  Patch by Alexander Shadchin.  (Github issue :issue:`4895`)\n+\n+* Some C code issue were resolved for the Limited API target.\n+  (Github issues :issue:`5264`, :issue:`5265`, :issue:`5266`)\n+\n+* Conversion of Python ints to C ``int128`` is now always supported, although slow\n+  if dedicated C-API support is missing (``_PyLong_AsByteArray()``), specifically in\n+  the Limited C-API.\n+  (Github issue :issue:`5419`)\n+\n+* Custom buffer slot methods are now supported in the Limited C-API of Python 3.9+.\n+  Patch by Lisandro Dalcin.  (Github issue :issue:`5422`)\n+\n+Improved fidelity to Python semantics\n+-------------------------------------\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1265402312",
            "id": 1265402312,
            "line": 244,
            "node_id": "PRRC_kwDOABDGAc5LbIHI",
            "original_commit_id": "478a5d777d96a180388c205d3db3ef62220eeab3",
            "original_line": 244,
            "original_position": 243,
            "original_start_line": 239,
            "path": "CHANGES.rst",
            "position": 243,
            "pull_request_review_id": 1532859882,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265402312/reactions"
            },
            "side": "RIGHT",
            "start_line": 239,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-17T13:56:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265402312",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1265402504"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1265402504"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This sentence is dangling.",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-17T13:56:19Z",
            "diff_hunk": "@@ -2,6 +2,1613 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs\n+^^^^^^^^^^^^^^^^\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers (Github issue :issue:`2601`)\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`) (Github issue :issue:`2580`)\n+* `PEP-487`_: Simpler customisation of class creation (Github issue :issue:`2781`)\n+* `PEP-563`_: Postponed Evaluation of Annotations (Github issue :issue:`3285`)\n+* `PEP-570`_: Positional-Only Parameters (Github issue :issue:`2915`)\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`) (Github issue :issue:`2636`)\n+* `PEP-590`_: Vectorcall protocol (Github issue :issue:`2263`)\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators (Github issue :issue:`4570`)\n+\n+Typing support in the sense of `PEP-484`_ (Github issues :issue:`3949`, :issue:`4243`)\n+and `PEP-560`_ (Github issues :issue:`2753`, :issue:`3537`, :issue:`3764`) was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Generator expressions and comprehensions now look up their outer-most iterable\n+  on creation, as Python does, and not later on start, as they did previously.\n+  (Github issue :issue:`1159`)\n+\n+* C-API declarations for context variables in Python 3.7 were added.\n+  Original patch by Zolisa Bleki.  (Github issue :issue:`2281`)\n+\n+* ``@cython.trashcan(True)`` can be used on an extension type to enable the\n+  CPython :ref:`trashcan`. This allows deallocating deeply recursive objects\n+  without overflowing the stack. Patch by Jeroen Demeyer.  (Github issue :issue:`2842`)\n+\n+* The long deprecated include files ``python_*``, ``stdio``, ``stdlib`` and\n+  ``stl`` in ``Cython/Includes/Deprecated/`` were removed.  Use the ``libc.*``\n+  and ``cpython.*`` pxd modules instead.\n+  Patch by Jeroen Demeyer.  (Github issue :issue:`2904`)\n+\n+* ``PyMem_[Raw]Calloc()`` was added to the ``cpython.mem`` declarations.\n+  Note that the ``Raw`` versions are no longer #defined by Cython.  The previous\n+  macros were not considered safe.\n+  Patch by William Schwartz and David Woods.  (Github issue :issue:`3047`)\n+\n+* Unicode module names and imports are supported.\n+  Patch by David Woods.  (Github issue :issue:`3119`)\n+\n+* ``PyEval_InitThreads()`` is no longer used in Py3.7+ where it is a no-op.\n+\n+* The ``Tempita`` module no longer contains HTML processing capabilities, which\n+  were found to be broken in Python 3.8 and later.\n+  Patch by Marcel Stimberg.  (Github issue :issue:`3309`)\n+\n+* Cython avoids raising ``StopIteration`` in ``__next__`` methods when possible.\n+  Patch by David Woods.  (Github issue :issue:`3447`)\n+\n+* ``__del__(self)`` on extension types now maps to ``tp_finalize`` in Python 3.\n+  Original patch by ax487.  (Github issue :issue:`3612`)\n+\n+* A low-level inline function ``total_seconds(timedelta)`` was added to\n+  ``cpython.datetime`` to bypass the Python method call.  Note that this function\n+  is not guaranteed to give exactly the same results for very large time intervals.\n+  Patch by Brock Mendel.  (Github issue :issue:`3616`)\n+\n+* A new module ``cpython.time`` was added with some low-level alternatives to\n+  Python's ``time`` module.\n+  Patch by Brock Mendel.  (Github issue :issue:`3767`)\n+\n+* Python's ``memoryview`` is now a known builtin type with optimised properties.\n+  (Github issue :issue:`3798`)\n+\n+* The value ``PyBUF_MAX_NDIM`` was added to the ``cpython.buffer`` module.\n+  Patch by John Kirkham.  (Github issue :issue:`3811`)\n+\n+* C-API declarations for ``cpython.fileobject`` were added.\n+  Patch by Zackery Spytz.  (Github issue :issue:`3906`)\n+\n+* The signature of ``PyFloat_FromString()`` in ``cpython.float`` was changed\n+  to match the signature in Py3.  It still has an automatic fallback for Py2.\n+  (Github issue :issue:`3909`)\n+\n+* The internal CPython macro ``Py_ISSPACE()`` is no longer used.\n+  Original patch by Andrew Jones.  (Github issue :issue:`4111`)\n+\n+* More C-API declarations for ``cpython.datetime``  were added.\n+  Patch by Bluenix2.  (Github issue :issue:`4128`)\n+\n+* The generated C code failed to compile in CPython 3.11a4 and later.\n+  (Github issue :issue:`4500`)\n+\n+* Some old usages of the deprecated Python ``imp`` module were replaced with ``importlib``.\n+  Patch by Matúš Valo.  (Github issue :issue:`4640`)\n+\n+* Context managers can be written in parentheses.\n+  Patch by David Woods.  (Github issue :issue:`4814`)\n+\n+* The runtime size check for imported ``PyVarObject`` types was improved\n+  to reduce false positives and adapt to Python 3.11.\n+  Patch by David Woods.  (Github issues :issue:`4827`, :issue:`4894`)\n+\n+* The special methods ``__matmul__``, ``__truediv__``, ``__floordiv__`` failed to type\n+  their ``self`` argument.\n+  (Github issue :issue:`5067`)\n+\n+* ``cpdef`` enums no longer use ``OrderedDict`` but ``dict`` in Python 3.6 and later.\n+  Patch by GalaxySnail.  (Github issue :issue:`5180`)\n+\n+* Several problems with CPython 3.12 were resolved.\n+  (Github issue :issue:`5238`)\n+\n+* Very long Python integer constants could exceed the maximum C name length of MSVC.\n+  Patch by 0dminnimda.  (Github issue :issue:`5290`)\n+\n+* The exception handling code was adapted to CPython 3.12.\n+  (Github issue :issue:`5442`)\n+\n+* The dataclass implementation was adapted to support Python 3.12.\n+  (Github issue :issue:`5346`)\n+\n+* The Python ``int`` handling code was adapted to make use of the new ``PyLong``\n+  internals in CPython 3.12.\n+  (Github issue :issue:`5353`)\n+\n+* The type ``cython.Py_hash_t`` is available in Python mode.\n+\n+* The names of Cython's internal types (functions, generator, coroutine, etc.)\n+  are now qualified with the module name of the internal Cython module that is\n+  used for sharing them across Cython implemented modules, for example\n+  ``_cython_3_0a5.coroutine``.  This was done to avoid making them look like\n+  homeless builtins, to help with debugging, and in order to avoid a CPython\n+  warning according to https://bugs.python.org/issue20204\n+\n+Initial support for Limited API\n+-------------------------------\n+\n+CPython provides a stable, limited subset of its C-API as the so-called Limited API.\n+This C-API comes with the guarantee of a stable ABI, meaning that extensions modules\n+that were compiled for one version of CPython can also be imported in later versions\n+without recompilation.\n+\n+There is initial support for this in Cython.  By defining the ``CYTHON_LIMITED_API``\n+macro, Cython cuts down its C-API usage and tries to adhere to the Limited C-API.\n+By also defining the CPython macro ``Py_LIMITED_API`` to a specific CPython\n+compatibility version, you can additionally restrict the C-API during the C compilation,\n+thus enforcing the forward compatibility of the extension module, probably at the cost\n+of a bit of performance.\n+\n+Note that \"initial support\" in Cython really means that setting the ``Py_LIMITED_API``\n+macro may not work for your specific code.  There are limitations in the Limited C-API\n+that are difficult for Cython to generate C code for, so some advanced Python features\n+(like async code) may not lead to C code that cannot adhere to the Limited C-API, or\n+where Cython simply does not know yet how to adhere to it.  Basically, if you get your\n+code to compile with both macros set, and it passes your test suite, then it should be\n+possible to import the extension module also in later CPython versions.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Preliminary support for the CPython's ``Py_LIMITED_API`` (stable ABI) is\n+  available by setting the  ``CYTHON_LIMITED_API`` C macro.  Note that the\n+  support is currently in an early stage and many features do not yet work.\n+  You currently still have to define ``Py_LIMITED_API`` externally in order\n+  to restrict the API usage.  This will change when the feature stabilises.\n+  Patches by Eddie Elizondo and David Woods.  (Github issues :issue:`3223`,\n+  :issue:`3311`, :issue:`3501`)\n+\n+* Limited API support was improved.\n+  Patches by Matthias Braun.  (Github issues :issue:`3693`, :issue:`3707`)\n+\n+* ``_Py_TPFLAGS_HAVE_VECTORCALL`` was always set on extension types when using the limited API.\n+  Patch by David Woods.  (Github issue :issue:`4453`)\n+\n+* Limited API C preprocessor warning is compatible with MSVC. Patch by\n+  Victor Molina Garcia.  (Github issue :issue:`4826`)\n+\n+* The embedding code no longer calls deprecated C-API functions but uses the new ``PyConfig``\n+  API instead on CPython versions that support it (3.8+).\n+  Patch by Alexander Shadchin.  (Github issue :issue:`4895`)\n+\n+* Some C code issue were resolved for the Limited API target.\n+  (Github issues :issue:`5264`, :issue:`5265`, :issue:`5266`)\n+\n+* Conversion of Python ints to C ``int128`` is now always supported, although slow\n+  if dedicated C-API support is missing (``_PyLong_AsByteArray()``), specifically in\n+  the Limited C-API.\n+  (Github issue :issue:`5419`)\n+\n+* Custom buffer slot methods are now supported in the Limited C-API of Python 3.9+.\n+  Patch by Lisandro Dalcin.  (Github issue :issue:`5422`)\n+\n+Improved fidelity to Python semantics\n+-------------------------------------\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting\n+\n+\n+Improvements in Pure Python mode\n+--------------------------------\n+\n+Pure python mode gained many new features and was generally overhauled to make\n+it as capable as the ",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1265402504",
            "id": 1265402504,
            "line": 251,
            "node_id": "PRRC_kwDOABDGAc5LbIKI",
            "original_commit_id": "478a5d777d96a180388c205d3db3ef62220eeab3",
            "original_line": 251,
            "original_position": 250,
            "original_start_line": 250,
            "path": "CHANGES.rst",
            "position": 250,
            "pull_request_review_id": 1532859882,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265402504/reactions"
            },
            "side": "RIGHT",
            "start_line": 250,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-17T13:56:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265402504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1265402958"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1265402958"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\nFinally, NumPy ufuncs can be generated from simple computation functions with the\r\n```",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-17T13:56:40Z",
            "diff_hunk": "@@ -2,6 +2,1613 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs\n+^^^^^^^^^^^^^^^^\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers (Github issue :issue:`2601`)\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`) (Github issue :issue:`2580`)\n+* `PEP-487`_: Simpler customisation of class creation (Github issue :issue:`2781`)\n+* `PEP-563`_: Postponed Evaluation of Annotations (Github issue :issue:`3285`)\n+* `PEP-570`_: Positional-Only Parameters (Github issue :issue:`2915`)\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`) (Github issue :issue:`2636`)\n+* `PEP-590`_: Vectorcall protocol (Github issue :issue:`2263`)\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators (Github issue :issue:`4570`)\n+\n+Typing support in the sense of `PEP-484`_ (Github issues :issue:`3949`, :issue:`4243`)\n+and `PEP-560`_ (Github issues :issue:`2753`, :issue:`3537`, :issue:`3764`) was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Generator expressions and comprehensions now look up their outer-most iterable\n+  on creation, as Python does, and not later on start, as they did previously.\n+  (Github issue :issue:`1159`)\n+\n+* C-API declarations for context variables in Python 3.7 were added.\n+  Original patch by Zolisa Bleki.  (Github issue :issue:`2281`)\n+\n+* ``@cython.trashcan(True)`` can be used on an extension type to enable the\n+  CPython :ref:`trashcan`. This allows deallocating deeply recursive objects\n+  without overflowing the stack. Patch by Jeroen Demeyer.  (Github issue :issue:`2842`)\n+\n+* The long deprecated include files ``python_*``, ``stdio``, ``stdlib`` and\n+  ``stl`` in ``Cython/Includes/Deprecated/`` were removed.  Use the ``libc.*``\n+  and ``cpython.*`` pxd modules instead.\n+  Patch by Jeroen Demeyer.  (Github issue :issue:`2904`)\n+\n+* ``PyMem_[Raw]Calloc()`` was added to the ``cpython.mem`` declarations.\n+  Note that the ``Raw`` versions are no longer #defined by Cython.  The previous\n+  macros were not considered safe.\n+  Patch by William Schwartz and David Woods.  (Github issue :issue:`3047`)\n+\n+* Unicode module names and imports are supported.\n+  Patch by David Woods.  (Github issue :issue:`3119`)\n+\n+* ``PyEval_InitThreads()`` is no longer used in Py3.7+ where it is a no-op.\n+\n+* The ``Tempita`` module no longer contains HTML processing capabilities, which\n+  were found to be broken in Python 3.8 and later.\n+  Patch by Marcel Stimberg.  (Github issue :issue:`3309`)\n+\n+* Cython avoids raising ``StopIteration`` in ``__next__`` methods when possible.\n+  Patch by David Woods.  (Github issue :issue:`3447`)\n+\n+* ``__del__(self)`` on extension types now maps to ``tp_finalize`` in Python 3.\n+  Original patch by ax487.  (Github issue :issue:`3612`)\n+\n+* A low-level inline function ``total_seconds(timedelta)`` was added to\n+  ``cpython.datetime`` to bypass the Python method call.  Note that this function\n+  is not guaranteed to give exactly the same results for very large time intervals.\n+  Patch by Brock Mendel.  (Github issue :issue:`3616`)\n+\n+* A new module ``cpython.time`` was added with some low-level alternatives to\n+  Python's ``time`` module.\n+  Patch by Brock Mendel.  (Github issue :issue:`3767`)\n+\n+* Python's ``memoryview`` is now a known builtin type with optimised properties.\n+  (Github issue :issue:`3798`)\n+\n+* The value ``PyBUF_MAX_NDIM`` was added to the ``cpython.buffer`` module.\n+  Patch by John Kirkham.  (Github issue :issue:`3811`)\n+\n+* C-API declarations for ``cpython.fileobject`` were added.\n+  Patch by Zackery Spytz.  (Github issue :issue:`3906`)\n+\n+* The signature of ``PyFloat_FromString()`` in ``cpython.float`` was changed\n+  to match the signature in Py3.  It still has an automatic fallback for Py2.\n+  (Github issue :issue:`3909`)\n+\n+* The internal CPython macro ``Py_ISSPACE()`` is no longer used.\n+  Original patch by Andrew Jones.  (Github issue :issue:`4111`)\n+\n+* More C-API declarations for ``cpython.datetime``  were added.\n+  Patch by Bluenix2.  (Github issue :issue:`4128`)\n+\n+* The generated C code failed to compile in CPython 3.11a4 and later.\n+  (Github issue :issue:`4500`)\n+\n+* Some old usages of the deprecated Python ``imp`` module were replaced with ``importlib``.\n+  Patch by Matúš Valo.  (Github issue :issue:`4640`)\n+\n+* Context managers can be written in parentheses.\n+  Patch by David Woods.  (Github issue :issue:`4814`)\n+\n+* The runtime size check for imported ``PyVarObject`` types was improved\n+  to reduce false positives and adapt to Python 3.11.\n+  Patch by David Woods.  (Github issues :issue:`4827`, :issue:`4894`)\n+\n+* The special methods ``__matmul__``, ``__truediv__``, ``__floordiv__`` failed to type\n+  their ``self`` argument.\n+  (Github issue :issue:`5067`)\n+\n+* ``cpdef`` enums no longer use ``OrderedDict`` but ``dict`` in Python 3.6 and later.\n+  Patch by GalaxySnail.  (Github issue :issue:`5180`)\n+\n+* Several problems with CPython 3.12 were resolved.\n+  (Github issue :issue:`5238`)\n+\n+* Very long Python integer constants could exceed the maximum C name length of MSVC.\n+  Patch by 0dminnimda.  (Github issue :issue:`5290`)\n+\n+* The exception handling code was adapted to CPython 3.12.\n+  (Github issue :issue:`5442`)\n+\n+* The dataclass implementation was adapted to support Python 3.12.\n+  (Github issue :issue:`5346`)\n+\n+* The Python ``int`` handling code was adapted to make use of the new ``PyLong``\n+  internals in CPython 3.12.\n+  (Github issue :issue:`5353`)\n+\n+* The type ``cython.Py_hash_t`` is available in Python mode.\n+\n+* The names of Cython's internal types (functions, generator, coroutine, etc.)\n+  are now qualified with the module name of the internal Cython module that is\n+  used for sharing them across Cython implemented modules, for example\n+  ``_cython_3_0a5.coroutine``.  This was done to avoid making them look like\n+  homeless builtins, to help with debugging, and in order to avoid a CPython\n+  warning according to https://bugs.python.org/issue20204\n+\n+Initial support for Limited API\n+-------------------------------\n+\n+CPython provides a stable, limited subset of its C-API as the so-called Limited API.\n+This C-API comes with the guarantee of a stable ABI, meaning that extensions modules\n+that were compiled for one version of CPython can also be imported in later versions\n+without recompilation.\n+\n+There is initial support for this in Cython.  By defining the ``CYTHON_LIMITED_API``\n+macro, Cython cuts down its C-API usage and tries to adhere to the Limited C-API.\n+By also defining the CPython macro ``Py_LIMITED_API`` to a specific CPython\n+compatibility version, you can additionally restrict the C-API during the C compilation,\n+thus enforcing the forward compatibility of the extension module, probably at the cost\n+of a bit of performance.\n+\n+Note that \"initial support\" in Cython really means that setting the ``Py_LIMITED_API``\n+macro may not work for your specific code.  There are limitations in the Limited C-API\n+that are difficult for Cython to generate C code for, so some advanced Python features\n+(like async code) may not lead to C code that cannot adhere to the Limited C-API, or\n+where Cython simply does not know yet how to adhere to it.  Basically, if you get your\n+code to compile with both macros set, and it passes your test suite, then it should be\n+possible to import the extension module also in later CPython versions.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Preliminary support for the CPython's ``Py_LIMITED_API`` (stable ABI) is\n+  available by setting the  ``CYTHON_LIMITED_API`` C macro.  Note that the\n+  support is currently in an early stage and many features do not yet work.\n+  You currently still have to define ``Py_LIMITED_API`` externally in order\n+  to restrict the API usage.  This will change when the feature stabilises.\n+  Patches by Eddie Elizondo and David Woods.  (Github issues :issue:`3223`,\n+  :issue:`3311`, :issue:`3501`)\n+\n+* Limited API support was improved.\n+  Patches by Matthias Braun.  (Github issues :issue:`3693`, :issue:`3707`)\n+\n+* ``_Py_TPFLAGS_HAVE_VECTORCALL`` was always set on extension types when using the limited API.\n+  Patch by David Woods.  (Github issue :issue:`4453`)\n+\n+* Limited API C preprocessor warning is compatible with MSVC. Patch by\n+  Victor Molina Garcia.  (Github issue :issue:`4826`)\n+\n+* The embedding code no longer calls deprecated C-API functions but uses the new ``PyConfig``\n+  API instead on CPython versions that support it (3.8+).\n+  Patch by Alexander Shadchin.  (Github issue :issue:`4895`)\n+\n+* Some C code issue were resolved for the Limited API target.\n+  (Github issues :issue:`5264`, :issue:`5265`, :issue:`5266`)\n+\n+* Conversion of Python ints to C ``int128`` is now always supported, although slow\n+  if dedicated C-API support is missing (``_PyLong_AsByteArray()``), specifically in\n+  the Limited C-API.\n+  (Github issue :issue:`5419`)\n+\n+* Custom buffer slot methods are now supported in the Limited C-API of Python 3.9+.\n+  Patch by Lisandro Dalcin.  (Github issue :issue:`5422`)\n+\n+Improved fidelity to Python semantics\n+-------------------------------------\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting\n+\n+\n+Improvements in Pure Python mode\n+--------------------------------\n+\n+Pure python mode gained many new features and was generally overhauled to make\n+it as capable as the \n+\n+\n+Code generation changes\n+-----------------------\n+\n+Cython has gained several major new features that speed up both the development\n+and the code. Dataclasses have gained an extension type equivalent that implements\n+the dataclass features in C code.  Similarly, the ``@functools.total_ordering``\n+decorator to an extension type will implement the comparison functions in C.\n+\n+FInally, NumPy ufuncs can be generated from simple computation functions with the",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1265402958",
            "id": 1265402958,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5LbIRO",
            "original_commit_id": "478a5d777d96a180388c205d3db3ef62220eeab3",
            "original_line": 262,
            "original_position": 261,
            "original_start_line": null,
            "path": "CHANGES.rst",
            "position": null,
            "pull_request_review_id": 1532859882,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265402958/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T13:56:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265402958",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1265406540"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1265406540"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think we also need to mention `language_level` and its impacts here.",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-17T13:59:20Z",
            "diff_hunk": "@@ -2,6 +2,1613 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs\n+^^^^^^^^^^^^^^^^\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers (Github issue :issue:`2601`)\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`) (Github issue :issue:`2580`)\n+* `PEP-487`_: Simpler customisation of class creation (Github issue :issue:`2781`)\n+* `PEP-563`_: Postponed Evaluation of Annotations (Github issue :issue:`3285`)\n+* `PEP-570`_: Positional-Only Parameters (Github issue :issue:`2915`)\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`) (Github issue :issue:`2636`)\n+* `PEP-590`_: Vectorcall protocol (Github issue :issue:`2263`)\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators (Github issue :issue:`4570`)\n+\n+Typing support in the sense of `PEP-484`_ (Github issues :issue:`3949`, :issue:`4243`)\n+and `PEP-560`_ (Github issues :issue:`2753`, :issue:`3537`, :issue:`3764`) was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Generator expressions and comprehensions now look up their outer-most iterable\n+  on creation, as Python does, and not later on start, as they did previously.\n+  (Github issue :issue:`1159`)\n+\n+* C-API declarations for context variables in Python 3.7 were added.\n+  Original patch by Zolisa Bleki.  (Github issue :issue:`2281`)\n+\n+* ``@cython.trashcan(True)`` can be used on an extension type to enable the\n+  CPython :ref:`trashcan`. This allows deallocating deeply recursive objects\n+  without overflowing the stack. Patch by Jeroen Demeyer.  (Github issue :issue:`2842`)\n+\n+* The long deprecated include files ``python_*``, ``stdio``, ``stdlib`` and\n+  ``stl`` in ``Cython/Includes/Deprecated/`` were removed.  Use the ``libc.*``\n+  and ``cpython.*`` pxd modules instead.\n+  Patch by Jeroen Demeyer.  (Github issue :issue:`2904`)\n+\n+* ``PyMem_[Raw]Calloc()`` was added to the ``cpython.mem`` declarations.\n+  Note that the ``Raw`` versions are no longer #defined by Cython.  The previous\n+  macros were not considered safe.\n+  Patch by William Schwartz and David Woods.  (Github issue :issue:`3047`)\n+\n+* Unicode module names and imports are supported.\n+  Patch by David Woods.  (Github issue :issue:`3119`)\n+\n+* ``PyEval_InitThreads()`` is no longer used in Py3.7+ where it is a no-op.\n+\n+* The ``Tempita`` module no longer contains HTML processing capabilities, which\n+  were found to be broken in Python 3.8 and later.\n+  Patch by Marcel Stimberg.  (Github issue :issue:`3309`)\n+\n+* Cython avoids raising ``StopIteration`` in ``__next__`` methods when possible.\n+  Patch by David Woods.  (Github issue :issue:`3447`)\n+\n+* ``__del__(self)`` on extension types now maps to ``tp_finalize`` in Python 3.\n+  Original patch by ax487.  (Github issue :issue:`3612`)\n+\n+* A low-level inline function ``total_seconds(timedelta)`` was added to\n+  ``cpython.datetime`` to bypass the Python method call.  Note that this function\n+  is not guaranteed to give exactly the same results for very large time intervals.\n+  Patch by Brock Mendel.  (Github issue :issue:`3616`)\n+\n+* A new module ``cpython.time`` was added with some low-level alternatives to\n+  Python's ``time`` module.\n+  Patch by Brock Mendel.  (Github issue :issue:`3767`)\n+\n+* Python's ``memoryview`` is now a known builtin type with optimised properties.\n+  (Github issue :issue:`3798`)\n+\n+* The value ``PyBUF_MAX_NDIM`` was added to the ``cpython.buffer`` module.\n+  Patch by John Kirkham.  (Github issue :issue:`3811`)\n+\n+* C-API declarations for ``cpython.fileobject`` were added.\n+  Patch by Zackery Spytz.  (Github issue :issue:`3906`)\n+\n+* The signature of ``PyFloat_FromString()`` in ``cpython.float`` was changed\n+  to match the signature in Py3.  It still has an automatic fallback for Py2.\n+  (Github issue :issue:`3909`)\n+\n+* The internal CPython macro ``Py_ISSPACE()`` is no longer used.\n+  Original patch by Andrew Jones.  (Github issue :issue:`4111`)\n+\n+* More C-API declarations for ``cpython.datetime``  were added.\n+  Patch by Bluenix2.  (Github issue :issue:`4128`)\n+\n+* The generated C code failed to compile in CPython 3.11a4 and later.\n+  (Github issue :issue:`4500`)\n+\n+* Some old usages of the deprecated Python ``imp`` module were replaced with ``importlib``.\n+  Patch by Matúš Valo.  (Github issue :issue:`4640`)\n+\n+* Context managers can be written in parentheses.\n+  Patch by David Woods.  (Github issue :issue:`4814`)\n+\n+* The runtime size check for imported ``PyVarObject`` types was improved\n+  to reduce false positives and adapt to Python 3.11.\n+  Patch by David Woods.  (Github issues :issue:`4827`, :issue:`4894`)\n+\n+* The special methods ``__matmul__``, ``__truediv__``, ``__floordiv__`` failed to type\n+  their ``self`` argument.\n+  (Github issue :issue:`5067`)\n+\n+* ``cpdef`` enums no longer use ``OrderedDict`` but ``dict`` in Python 3.6 and later.\n+  Patch by GalaxySnail.  (Github issue :issue:`5180`)\n+\n+* Several problems with CPython 3.12 were resolved.\n+  (Github issue :issue:`5238`)\n+\n+* Very long Python integer constants could exceed the maximum C name length of MSVC.\n+  Patch by 0dminnimda.  (Github issue :issue:`5290`)\n+\n+* The exception handling code was adapted to CPython 3.12.\n+  (Github issue :issue:`5442`)\n+\n+* The dataclass implementation was adapted to support Python 3.12.\n+  (Github issue :issue:`5346`)\n+\n+* The Python ``int`` handling code was adapted to make use of the new ``PyLong``\n+  internals in CPython 3.12.\n+  (Github issue :issue:`5353`)\n+\n+* The type ``cython.Py_hash_t`` is available in Python mode.\n+\n+* The names of Cython's internal types (functions, generator, coroutine, etc.)\n+  are now qualified with the module name of the internal Cython module that is\n+  used for sharing them across Cython implemented modules, for example\n+  ``_cython_3_0a5.coroutine``.  This was done to avoid making them look like\n+  homeless builtins, to help with debugging, and in order to avoid a CPython\n+  warning according to https://bugs.python.org/issue20204\n+\n+Initial support for Limited API\n+-------------------------------\n+\n+CPython provides a stable, limited subset of its C-API as the so-called Limited API.\n+This C-API comes with the guarantee of a stable ABI, meaning that extensions modules\n+that were compiled for one version of CPython can also be imported in later versions\n+without recompilation.\n+\n+There is initial support for this in Cython.  By defining the ``CYTHON_LIMITED_API``\n+macro, Cython cuts down its C-API usage and tries to adhere to the Limited C-API.\n+By also defining the CPython macro ``Py_LIMITED_API`` to a specific CPython\n+compatibility version, you can additionally restrict the C-API during the C compilation,\n+thus enforcing the forward compatibility of the extension module, probably at the cost\n+of a bit of performance.\n+\n+Note that \"initial support\" in Cython really means that setting the ``Py_LIMITED_API``\n+macro may not work for your specific code.  There are limitations in the Limited C-API\n+that are difficult for Cython to generate C code for, so some advanced Python features\n+(like async code) may not lead to C code that cannot adhere to the Limited C-API, or\n+where Cython simply does not know yet how to adhere to it.  Basically, if you get your\n+code to compile with both macros set, and it passes your test suite, then it should be\n+possible to import the extension module also in later CPython versions.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Preliminary support for the CPython's ``Py_LIMITED_API`` (stable ABI) is\n+  available by setting the  ``CYTHON_LIMITED_API`` C macro.  Note that the\n+  support is currently in an early stage and many features do not yet work.\n+  You currently still have to define ``Py_LIMITED_API`` externally in order\n+  to restrict the API usage.  This will change when the feature stabilises.\n+  Patches by Eddie Elizondo and David Woods.  (Github issues :issue:`3223`,\n+  :issue:`3311`, :issue:`3501`)\n+\n+* Limited API support was improved.\n+  Patches by Matthias Braun.  (Github issues :issue:`3693`, :issue:`3707`)\n+\n+* ``_Py_TPFLAGS_HAVE_VECTORCALL`` was always set on extension types when using the limited API.\n+  Patch by David Woods.  (Github issue :issue:`4453`)\n+\n+* Limited API C preprocessor warning is compatible with MSVC. Patch by\n+  Victor Molina Garcia.  (Github issue :issue:`4826`)\n+\n+* The embedding code no longer calls deprecated C-API functions but uses the new ``PyConfig``\n+  API instead on CPython versions that support it (3.8+).\n+  Patch by Alexander Shadchin.  (Github issue :issue:`4895`)\n+\n+* Some C code issue were resolved for the Limited API target.\n+  (Github issues :issue:`5264`, :issue:`5265`, :issue:`5266`)\n+\n+* Conversion of Python ints to C ``int128`` is now always supported, although slow\n+  if dedicated C-API support is missing (``_PyLong_AsByteArray()``), specifically in\n+  the Limited C-API.\n+  (Github issue :issue:`5419`)\n+\n+* Custom buffer slot methods are now supported in the Limited C-API of Python 3.9+.\n+  Patch by Lisandro Dalcin.  (Github issue :issue:`5422`)\n+\n+Improved fidelity to Python semantics\n+-------------------------------------\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1265406540",
            "id": 1265406540,
            "line": 237,
            "node_id": "PRRC_kwDOABDGAc5LbJJM",
            "original_commit_id": "478a5d777d96a180388c205d3db3ef62220eeab3",
            "original_line": 237,
            "original_position": 236,
            "original_start_line": null,
            "path": "CHANGES.rst",
            "position": 236,
            "pull_request_review_id": 1532866683,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265406540/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:00:14Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265406540",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1265407517"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1265407517"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Might also have a sections for pure deprecations, like for mentioning `DEF`",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-17T13:59:56Z",
            "diff_hunk": "@@ -2,6 +2,1613 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs\n+^^^^^^^^^^^^^^^^\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers (Github issue :issue:`2601`)\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`) (Github issue :issue:`2580`)\n+* `PEP-487`_: Simpler customisation of class creation (Github issue :issue:`2781`)\n+* `PEP-563`_: Postponed Evaluation of Annotations (Github issue :issue:`3285`)\n+* `PEP-570`_: Positional-Only Parameters (Github issue :issue:`2915`)\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`) (Github issue :issue:`2636`)\n+* `PEP-590`_: Vectorcall protocol (Github issue :issue:`2263`)\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators (Github issue :issue:`4570`)\n+\n+Typing support in the sense of `PEP-484`_ (Github issues :issue:`3949`, :issue:`4243`)\n+and `PEP-560`_ (Github issues :issue:`2753`, :issue:`3537`, :issue:`3764`) was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Generator expressions and comprehensions now look up their outer-most iterable\n+  on creation, as Python does, and not later on start, as they did previously.\n+  (Github issue :issue:`1159`)\n+\n+* C-API declarations for context variables in Python 3.7 were added.\n+  Original patch by Zolisa Bleki.  (Github issue :issue:`2281`)\n+\n+* ``@cython.trashcan(True)`` can be used on an extension type to enable the\n+  CPython :ref:`trashcan`. This allows deallocating deeply recursive objects\n+  without overflowing the stack. Patch by Jeroen Demeyer.  (Github issue :issue:`2842`)\n+\n+* The long deprecated include files ``python_*``, ``stdio``, ``stdlib`` and\n+  ``stl`` in ``Cython/Includes/Deprecated/`` were removed.  Use the ``libc.*``\n+  and ``cpython.*`` pxd modules instead.\n+  Patch by Jeroen Demeyer.  (Github issue :issue:`2904`)\n+\n+* ``PyMem_[Raw]Calloc()`` was added to the ``cpython.mem`` declarations.\n+  Note that the ``Raw`` versions are no longer #defined by Cython.  The previous\n+  macros were not considered safe.\n+  Patch by William Schwartz and David Woods.  (Github issue :issue:`3047`)\n+\n+* Unicode module names and imports are supported.\n+  Patch by David Woods.  (Github issue :issue:`3119`)\n+\n+* ``PyEval_InitThreads()`` is no longer used in Py3.7+ where it is a no-op.\n+\n+* The ``Tempita`` module no longer contains HTML processing capabilities, which\n+  were found to be broken in Python 3.8 and later.\n+  Patch by Marcel Stimberg.  (Github issue :issue:`3309`)\n+\n+* Cython avoids raising ``StopIteration`` in ``__next__`` methods when possible.\n+  Patch by David Woods.  (Github issue :issue:`3447`)\n+\n+* ``__del__(self)`` on extension types now maps to ``tp_finalize`` in Python 3.\n+  Original patch by ax487.  (Github issue :issue:`3612`)\n+\n+* A low-level inline function ``total_seconds(timedelta)`` was added to\n+  ``cpython.datetime`` to bypass the Python method call.  Note that this function\n+  is not guaranteed to give exactly the same results for very large time intervals.\n+  Patch by Brock Mendel.  (Github issue :issue:`3616`)\n+\n+* A new module ``cpython.time`` was added with some low-level alternatives to\n+  Python's ``time`` module.\n+  Patch by Brock Mendel.  (Github issue :issue:`3767`)\n+\n+* Python's ``memoryview`` is now a known builtin type with optimised properties.\n+  (Github issue :issue:`3798`)\n+\n+* The value ``PyBUF_MAX_NDIM`` was added to the ``cpython.buffer`` module.\n+  Patch by John Kirkham.  (Github issue :issue:`3811`)\n+\n+* C-API declarations for ``cpython.fileobject`` were added.\n+  Patch by Zackery Spytz.  (Github issue :issue:`3906`)\n+\n+* The signature of ``PyFloat_FromString()`` in ``cpython.float`` was changed\n+  to match the signature in Py3.  It still has an automatic fallback for Py2.\n+  (Github issue :issue:`3909`)\n+\n+* The internal CPython macro ``Py_ISSPACE()`` is no longer used.\n+  Original patch by Andrew Jones.  (Github issue :issue:`4111`)\n+\n+* More C-API declarations for ``cpython.datetime``  were added.\n+  Patch by Bluenix2.  (Github issue :issue:`4128`)\n+\n+* The generated C code failed to compile in CPython 3.11a4 and later.\n+  (Github issue :issue:`4500`)\n+\n+* Some old usages of the deprecated Python ``imp`` module were replaced with ``importlib``.\n+  Patch by Matúš Valo.  (Github issue :issue:`4640`)\n+\n+* Context managers can be written in parentheses.\n+  Patch by David Woods.  (Github issue :issue:`4814`)\n+\n+* The runtime size check for imported ``PyVarObject`` types was improved\n+  to reduce false positives and adapt to Python 3.11.\n+  Patch by David Woods.  (Github issues :issue:`4827`, :issue:`4894`)\n+\n+* The special methods ``__matmul__``, ``__truediv__``, ``__floordiv__`` failed to type\n+  their ``self`` argument.\n+  (Github issue :issue:`5067`)\n+\n+* ``cpdef`` enums no longer use ``OrderedDict`` but ``dict`` in Python 3.6 and later.\n+  Patch by GalaxySnail.  (Github issue :issue:`5180`)\n+\n+* Several problems with CPython 3.12 were resolved.\n+  (Github issue :issue:`5238`)\n+\n+* Very long Python integer constants could exceed the maximum C name length of MSVC.\n+  Patch by 0dminnimda.  (Github issue :issue:`5290`)\n+\n+* The exception handling code was adapted to CPython 3.12.\n+  (Github issue :issue:`5442`)\n+\n+* The dataclass implementation was adapted to support Python 3.12.\n+  (Github issue :issue:`5346`)\n+\n+* The Python ``int`` handling code was adapted to make use of the new ``PyLong``\n+  internals in CPython 3.12.\n+  (Github issue :issue:`5353`)\n+\n+* The type ``cython.Py_hash_t`` is available in Python mode.\n+\n+* The names of Cython's internal types (functions, generator, coroutine, etc.)\n+  are now qualified with the module name of the internal Cython module that is\n+  used for sharing them across Cython implemented modules, for example\n+  ``_cython_3_0a5.coroutine``.  This was done to avoid making them look like\n+  homeless builtins, to help with debugging, and in order to avoid a CPython\n+  warning according to https://bugs.python.org/issue20204\n+\n+Initial support for Limited API\n+-------------------------------\n+\n+CPython provides a stable, limited subset of its C-API as the so-called Limited API.\n+This C-API comes with the guarantee of a stable ABI, meaning that extensions modules\n+that were compiled for one version of CPython can also be imported in later versions\n+without recompilation.\n+\n+There is initial support for this in Cython.  By defining the ``CYTHON_LIMITED_API``\n+macro, Cython cuts down its C-API usage and tries to adhere to the Limited C-API.\n+By also defining the CPython macro ``Py_LIMITED_API`` to a specific CPython\n+compatibility version, you can additionally restrict the C-API during the C compilation,\n+thus enforcing the forward compatibility of the extension module, probably at the cost\n+of a bit of performance.\n+\n+Note that \"initial support\" in Cython really means that setting the ``Py_LIMITED_API``\n+macro may not work for your specific code.  There are limitations in the Limited C-API\n+that are difficult for Cython to generate C code for, so some advanced Python features\n+(like async code) may not lead to C code that cannot adhere to the Limited C-API, or\n+where Cython simply does not know yet how to adhere to it.  Basically, if you get your\n+code to compile with both macros set, and it passes your test suite, then it should be\n+possible to import the extension module also in later CPython versions.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Preliminary support for the CPython's ``Py_LIMITED_API`` (stable ABI) is\n+  available by setting the  ``CYTHON_LIMITED_API`` C macro.  Note that the\n+  support is currently in an early stage and many features do not yet work.\n+  You currently still have to define ``Py_LIMITED_API`` externally in order\n+  to restrict the API usage.  This will change when the feature stabilises.\n+  Patches by Eddie Elizondo and David Woods.  (Github issues :issue:`3223`,\n+  :issue:`3311`, :issue:`3501`)\n+\n+* Limited API support was improved.\n+  Patches by Matthias Braun.  (Github issues :issue:`3693`, :issue:`3707`)\n+\n+* ``_Py_TPFLAGS_HAVE_VECTORCALL`` was always set on extension types when using the limited API.\n+  Patch by David Woods.  (Github issue :issue:`4453`)\n+\n+* Limited API C preprocessor warning is compatible with MSVC. Patch by\n+  Victor Molina Garcia.  (Github issue :issue:`4826`)\n+\n+* The embedding code no longer calls deprecated C-API functions but uses the new ``PyConfig``\n+  API instead on CPython versions that support it (3.8+).\n+  Patch by Alexander Shadchin.  (Github issue :issue:`4895`)\n+\n+* Some C code issue were resolved for the Limited API target.\n+  (Github issues :issue:`5264`, :issue:`5265`, :issue:`5266`)\n+\n+* Conversion of Python ints to C ``int128`` is now always supported, although slow\n+  if dedicated C-API support is missing (``_PyLong_AsByteArray()``), specifically in\n+  the Limited C-API.\n+  (Github issue :issue:`5419`)\n+\n+* Custom buffer slot methods are now supported in the Limited C-API of Python 3.9+.\n+  Patch by Lisandro Dalcin.  (Github issue :issue:`5422`)\n+\n+Improved fidelity to Python semantics\n+-------------------------------------\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting\n+\n+\n+Improvements in Pure Python mode\n+--------------------------------\n+\n+Pure python mode gained many new features and was generally overhauled to make\n+it as capable as the \n+\n+\n+Code generation changes\n+-----------------------\n+\n+Cython has gained several major new features that speed up both the development\n+and the code. Dataclasses have gained an extension type equivalent that implements\n+the dataclass features in C code.  Similarly, the ``@functools.total_ordering``\n+decorator to an extension type will implement the comparison functions in C.\n+\n+FInally, NumPy ufuncs can be generated from simple computation functions with the\n+new ``@cython.ufunc`` decorator.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* A new function decorator ``@cython.ufunc`` automatically generates a (NumPy) ufunc that\n+  applies the calculation function to an entire memoryview.\n+  (Github issue :issue:`4758`)\n+\n+* Generated NumPy ufuncs could crash for large arrays due to incorrect GIL handling.\n+  (Github issue :issue:`5328`)\n+\n+\n+Interaction with numpy\n+----------------------\n+\n+The NumPy declarations (``cimport numpy``) were moved over to the NumPy project in order\n+to allow version specific changes on their side.\n+\n+One effect is that Cython does not use deprecated NumPy C-APIs any more.  Thus, you\n+can define the respective NumPy C macro to get rid of the compatibility warning at\n+C compile time.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Deprecated NumPy API usages were removed from ``numpy.pxd``.\n+  Patch by Matti Picus.  (Github issue :issue:`3365`)\n+\n+* ``cython.inline()`` now sets the ``NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION``\n+  C macro automatically when ``numpy`` is imported in the code, to avoid C compiler\n+  warnings about deprecated NumPy C-API usage.\n+\n+* ``numpy.import_array()`` is automatically called if ``numpy`` has been cimported\n+  and it has not been called in the module code.  This is intended as a hidden\n+  fail-safe so user code should continue to call ``numpy.import_array``.\n+  Patch by David Woods.  (Github issue :issue:`3524`)\n+\n+* The outdated getbuffer/releasebuffer implementations in the NumPy\n+  declarations were removed so that buffers declared as ``ndarray``\n+  now use the normal implementation in NumPy.\n+\n+* Several macros/functions declared in the NumPy API are now usable without\n+  holding the GIL.\n+\n+* The ``numpy`` declarations were updated.\n+  Patch by Brock Mendel.  (Github issue :issue:`3630`)\n+\n+* ``ndarray.shape`` failed to compile with Pythran and recent NumPy.\n+  Patch by Serge Guelton.  (Github issue :issue:`3762`)\n+\n+* A C-level compatibility issue with recent NumPy versions was resolved.\n+  Patch by David Woods.  (Github issue :issue:`4396`)\n+\n+* The generated modules no longer import NumPy internally when using\n+  fused types but no memoryviews.\n+  Patch by David Woods.  (Github issue :issue:`4935`)\n+\n+* ``np.long_t`` and ``np.ulong_t`` were removed from the NumPy declarations,\n+  synching Cython with upstream NumPy v1.25.0.  The aliases were confusing\n+  since they could mean different things on different platforms.\n+\n+\n+Exception handling\n+------------------\n+\n+Cython-implemented C functions now propagate exceptions by default, rather than\n+swallowing them in non-object returning function if the user forgot to add an\n+``except`` declaration to the signature.  This was a long-standing source of bugs,\n+but can require adding the ``noexcept`` declaration to existing functions if\n+exception propagation is really undesired.\n+(Github issue :issue:`4280`)\n+\n+To ease the transition for this break in behaviour, it is possible to set\n+``legacy_implicit_noexcept=True``.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* The exception handling annotation ``except +*`` was broken.\n+  Patch by David Woods.  (Github issues :issue:`3065`, :issue:`3066`)\n+\n+* Exceptions within for-loops that run over memoryviews could lead to a ref-counting error.\n+  Patch by David Woods.  (Github issue :issue:`4662`)\n+\n+* Improve conversion between function pointers with non-identical but\n+  compatible exception specifications.  Patches by David Woods.\n+  (Github issues :issue:`4770`, :issue:`4689`)\n+\n+* To opt out of the new, safer exception handling behaviour, legacy code can set the new\n+  directive ``legacy_implicit_noexcept=True`` for a transition period to keep the\n+  previous, unsafe behaviour.  This directive will eventually be removed in a later release.\n+  Patch by Matúš Valo.  (Github issue :issue:`5094`)\n+\n+* ``noexcept`` was not automatically applied to function pointer attributes in extern structs.\n+  Patch by Matúš Valo.  (Github issue :issue:`5359`)\n+\n+* The code ``except +nogil`` (declaring a C++ exception handler function called ``nogil``)\n+  is now rejected because it is almost certainly a typo from ``except + nogil``.\n+  (Github issue :issue:`5430`)\n+\n+* Handling freshly raised exceptions that didn't have a traceback yet could crash.\n+  (Github issue :issue:`5495`)\n+\n+\n+Compatibility with C\n+--------------------\n+\n+The support for C features like ``const`` or ``volatile`` was substantially improved.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* The ``volatile`` C modifier is supported in Cython code.\n+  Patch by Jeroen Demeyer.  (Github issue :issue:`1667`)\n+\n+* ``const`` can be used together with fused types.\n+  Patch by Thomas Vincent.  (Github issue :issue:`1772`)\n+\n+* Constant integer expressions that used a negative exponent were evaluated\n+  as integer 0 instead of the expected float value.\n+  Patch by Kryštof Pilnáček.  (Github issue :issue:`2133`)\n+\n+* C11 ``complex.h`` is now properly detected.\n+  (Github issue :issue:`2513`)\n+\n+* Standard C/C++ atomic operations are now used for memory views, if available.\n+  (Github issue :issue:`4925`)\n+\n+* ``const`` types could not be returned from functions.\n+  Patch by Mike Graham.  (Github issue :issue:`5135`)\n+\n+* The module state struct was not initialised in correct C (before C23), leading to\n+  compile errors on Windows.\n+  Patch by yudonglin.  (Github issue :issue:`5169`)\n+\n+* Structs that contained an array field resulted in incorrect C code.  Their initialisation\n+  now uses ``memcpy()``.\n+  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5178`)\n+\n+* With MSVC, Cython no longer enables C-Complex support by accident (which is not supported there).\n+  (Github issue :issue:`5512`)\n+\n+* The ``extern \"C\"`` and ``extern \"C++\"`` markers that Cython generates for\n+  ``public`` functions can now be controlled by setting the C macro ``CYTHON_EXTERN_C``.\n+\n+\n+Compatibility with C++\n+----------------------\n+\n+Many C++ features like forwarding references or ``std::move`` are now supported or even used\n+internally, if possible.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Nested ``cppclass`` definitions are supported.\n+  Patch by samaingw.  (Github issue :issue:`1218`)\n+\n+* ``cdef public`` functions used an incorrect linkage declaration in C++.\n+  Patch by Maximilien Colange.  (Github issue :issue:`1839`)\n+\n+* Overloaded C++ static methods were lost.\n+  Patch by Ashwin Srinath.  (Github :issue:`1851`)\n+\n+* Direct assignments to C++ references are now allowed.\n+  Patch by David Woods.  (Github issue :issue:`1863`)\n+\n+* Templating C++ classes with memory view types lead to buggy code and is now rejected.\n+  Patch by David Woods.  (Github issue :issue:`3085`)\n+\n+* C++ ``typeid()`` failed for fused types.\n+  Patch by David Woods.  (Github issue :issue:`3203`)\n+\n+* The destructor is now called for fields in C++ structs.\n+  Patch by David Woods.  (Github issue :issue:`3226`)\n+\n+* ``std::move()`` is now used in C++ mode for internal temp variables to\n+  make them work without copying values.\n+  Patch by David Woods.  (Github issues :issue:`3253`, :issue:`1612`)\n+\n+* The C++ ``typeid()`` function was allowed in C mode.\n+  Patch by Celelibi.  (Github issue :issue:`3637`)\n+\n+* The construct ``for x in cpp_function_call()`` failed to compile.\n+  Patch by David Woods.  (Github issue :issue:`3663`)\n+\n+* C++ references failed to compile when used as Python object indexes.\n+  Patch by David Woods.  (Github issue :issue:`3754`)\n+\n+* A compile failure for C++ enums in Py3.4 / MSVC was resolved.\n+  Patch by Ashwin Srinath.  (Github issue :issue:`3782`)\n+\n+* C++17 execution policies are supported in ``libcpp.algorithm``.\n+  Patch by Ashwin Srinath.  (Github issue :issue:`3790`)\n+\n+* C++ iteration more safely stores the iterable in temporary variables.\n+  Patch by Xavier.  (Github issue :issue:`3828`)\n+\n+* Cython compiled functions always provided a ``__self__`` attribute,\n+  regardless of being used as a method or not.\n+  Patch by David Woods.  (Github issue :issue:`4036`)\n+\n+* Nested C++ types were not usable through ctypedefs.\n+  Patch by Vadim Pushtaev.  (Github issue :issue:`4039`)\n+\n+* Some C++ STL methods did not propagate exceptions.\n+  Patch by Max Bachmann.  (Github issue :issue:`4079`)\n+\n+* More declarations for C++ string methods were added.\n+\n+* Converting C++ containers to Python lists uses less memory allocations.\n+  Patch by Max Bachmann.  (Github issue :issue:`4081`)\n+\n+* Conversion from Python dict to C++ map now supports arbitrary Python mappings,\n+  not just dicts.\n+\n+* ``std::move()`` is now also called for temps during ``yield``.\n+  Patch by Yu Feng.  (Github issue :issue:`4154`)\n+\n+* A new directive ``cpp_locals`` was added that allows local C++ variables to\n+  be lazily initialised (without default constructor), thus making them behave\n+  more like Python variables.\n+  Patch by David Woods.  (Github issue :issue:`4160`)\n+\n+* Generated utility code for C++ conversions no longer depends on several user\n+  definable directives that may make it behave incorrectly.\n+  Patch by David Woods.  (Github issue :issue:`4206`)\n+\n+* Code optimisations were not applied to methods of Cython implemented C++ classes.\n+  Patch by David Woods.  (Github issue :issue:`4212`)\n+\n+* Conversion from Python dicts to ``std::map`` was broken.\n+  Patch by David Woods and Mikkel Skofelt.  (Github issues :issue:`4228`, :issue:`4231`)\n+\n+* Several issues with the new ``cpp_locals`` directive were resolved and\n+  its test coverage improved.\n+  Patch by David Woods.  (Github issues :issue:`4265`, :issue:`4266`)\n+\n+* Declarations for ``libcpp.algorithms``, ``libcpp.set`` and ``libcpp.unordered_set``\n+  were extended.\n+  Patch by David Woods.  (Github issues :issue:`4271`, :issue:`4273`)\n+\n+* ``prange`` loops generated incorrect code when ``cpp_locals`` is enabled.\n+  Patch by David Woods.  (Github issue :issue:`4354`)\n+\n+* C++ post-increment/-decrement operators were not correctly looked up on declared C++\n+  classes, thus allowing Cython declarations to be missing for them and incorrect C++\n+  code to be generated.\n+  Patch by Max Bachmann.  (Github issue :issue:`4536`)\n+\n+* ``cpp_locals`` no longer have to be \"assignable\".\n+  (Github issue :issue:`4558`)\n+\n+* C++ references did not work on fused types.\n+  (Github issue :issue:`4717`)\n+\n+* Several C++ library declarations were added and fixed.\n+  Patches by Dobatymo, account-login, Jonathan Helgert, Evgeny Yakimov, GalaxySnail, Max Bachmann.\n+  (Github issues :issue:`4408`, :issue:`4419`, :issue:`4410`, :issue:`4395`,\n+  :issue:`4423`, :issue:`4448`, :issue:`4462`, :issue:`3293`, :issue:`4522`,\n+  :issue:`2171`, :issue:`4531`)\n+\n+* Some C++ and CPython library declarations were extended and fixed.\n+  Patches by Max Bachmann, Till Hoffmann, Julien Jerphanion, Wenjun Si.\n+  (Github issues :issue:`4530`, :issue:`4528`, :issue:`4710`, :issue:`4746`,\n+  :issue:`4751`, :issue:`4818`, :issue:`4762`, :issue:`4910`)\n+\n+* Some C/C++ warnings were resolved.\n+  Patches by Max Bachmann, Alexander Shadchin, at al.\n+  (Github issues :issue:`5004`, :issue:`5005`, :issue:`5019`, :issue:`5029`, :issue:`5096`)\n+\n+* Declarations were added for the C++ bit operations, some other parts of C++20 and CPython APIs.\n+  Patches by Jonathan Helgert, Dobatymo, William Ayd and Max Bachmann.\n+  (Github issues :issue:`4962`, :issue:`5101`, :issue:`5157`, :issue:`5163`, :issue:`5257`)\n+\n+* ``reversed()`` can now be used together with C++ iteration.\n+  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5002`)\n+\n+* Fully qualified C++ names prefixed by a cimported module name could fail to compile.\n+  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5229`)\n+\n+* Cython generated C++ code accidentally used C++11 features in some cases.\n+  (Github issue :issue:`5316`)\n+\n+* Some C++ warnings regarding ``const`` usage in internally generated utility code were resolved.\n+  Patch by Max Bachmann.  (Github issue :issue:`5301`)\n+\n+* C++ declarations for ``<cmath>``, ``<numbers>`` and ``std::any`` were added.\n+  Patches by Jonathan Helgert and Maximilien Colange.\n+  (Github issues :issue:`5262`, :issue:`5309`, :issue:`5314`)\n+\n+* Reverse iteration in C++ no longer removes the ``const`` qualifier from the item type.\n+  Patch by Isuru Fernando.  (Github issue :issue:`5478`)\n+\n+* C++ containers of item type ``bint`` could conflict with those of item type ``int``.\n+  (Github issue :issue:`5516`)\n+\n+Commandline Interface\n+---------------------\n+\n+[Various]\n+\n+Build integration\n+-----------------\n+\n+[Various]\n+\n+Other changes\n+-------------",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1265407517",
            "id": 1265407517,
            "line": 572,
            "node_id": "PRRC_kwDOABDGAc5LbJYd",
            "original_commit_id": "478a5d777d96a180388c205d3db3ef62220eeab3",
            "original_line": 572,
            "original_position": 571,
            "original_start_line": 571,
            "path": "CHANGES.rst",
            "position": 571,
            "pull_request_review_id": 1532866683,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265407517/reactions"
            },
            "side": "RIGHT",
            "start_line": 571,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-17T14:00:14Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265407517",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1265556749"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1265556749"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Done in #5532",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-17T15:39:17Z",
            "diff_hunk": "@@ -2,6 +2,1613 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs\n+^^^^^^^^^^^^^^^^\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers (Github issue :issue:`2601`)\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`) (Github issue :issue:`2580`)\n+* `PEP-487`_: Simpler customisation of class creation (Github issue :issue:`2781`)\n+* `PEP-563`_: Postponed Evaluation of Annotations (Github issue :issue:`3285`)\n+* `PEP-570`_: Positional-Only Parameters (Github issue :issue:`2915`)\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`) (Github issue :issue:`2636`)\n+* `PEP-590`_: Vectorcall protocol (Github issue :issue:`2263`)\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators (Github issue :issue:`4570`)\n+\n+Typing support in the sense of `PEP-484`_ (Github issues :issue:`3949`, :issue:`4243`)\n+and `PEP-560`_ (Github issues :issue:`2753`, :issue:`3537`, :issue:`3764`) was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Generator expressions and comprehensions now look up their outer-most iterable\n+  on creation, as Python does, and not later on start, as they did previously.\n+  (Github issue :issue:`1159`)\n+\n+* C-API declarations for context variables in Python 3.7 were added.\n+  Original patch by Zolisa Bleki.  (Github issue :issue:`2281`)\n+\n+* ``@cython.trashcan(True)`` can be used on an extension type to enable the\n+  CPython :ref:`trashcan`. This allows deallocating deeply recursive objects\n+  without overflowing the stack. Patch by Jeroen Demeyer.  (Github issue :issue:`2842`)\n+\n+* The long deprecated include files ``python_*``, ``stdio``, ``stdlib`` and\n+  ``stl`` in ``Cython/Includes/Deprecated/`` were removed.  Use the ``libc.*``\n+  and ``cpython.*`` pxd modules instead.\n+  Patch by Jeroen Demeyer.  (Github issue :issue:`2904`)\n+\n+* ``PyMem_[Raw]Calloc()`` was added to the ``cpython.mem`` declarations.\n+  Note that the ``Raw`` versions are no longer #defined by Cython.  The previous\n+  macros were not considered safe.\n+  Patch by William Schwartz and David Woods.  (Github issue :issue:`3047`)\n+\n+* Unicode module names and imports are supported.\n+  Patch by David Woods.  (Github issue :issue:`3119`)\n+\n+* ``PyEval_InitThreads()`` is no longer used in Py3.7+ where it is a no-op.\n+\n+* The ``Tempita`` module no longer contains HTML processing capabilities, which\n+  were found to be broken in Python 3.8 and later.\n+  Patch by Marcel Stimberg.  (Github issue :issue:`3309`)\n+\n+* Cython avoids raising ``StopIteration`` in ``__next__`` methods when possible.\n+  Patch by David Woods.  (Github issue :issue:`3447`)\n+\n+* ``__del__(self)`` on extension types now maps to ``tp_finalize`` in Python 3.\n+  Original patch by ax487.  (Github issue :issue:`3612`)\n+\n+* A low-level inline function ``total_seconds(timedelta)`` was added to\n+  ``cpython.datetime`` to bypass the Python method call.  Note that this function\n+  is not guaranteed to give exactly the same results for very large time intervals.\n+  Patch by Brock Mendel.  (Github issue :issue:`3616`)\n+\n+* A new module ``cpython.time`` was added with some low-level alternatives to\n+  Python's ``time`` module.\n+  Patch by Brock Mendel.  (Github issue :issue:`3767`)\n+\n+* Python's ``memoryview`` is now a known builtin type with optimised properties.\n+  (Github issue :issue:`3798`)\n+\n+* The value ``PyBUF_MAX_NDIM`` was added to the ``cpython.buffer`` module.\n+  Patch by John Kirkham.  (Github issue :issue:`3811`)\n+\n+* C-API declarations for ``cpython.fileobject`` were added.\n+  Patch by Zackery Spytz.  (Github issue :issue:`3906`)\n+\n+* The signature of ``PyFloat_FromString()`` in ``cpython.float`` was changed\n+  to match the signature in Py3.  It still has an automatic fallback for Py2.\n+  (Github issue :issue:`3909`)\n+\n+* The internal CPython macro ``Py_ISSPACE()`` is no longer used.\n+  Original patch by Andrew Jones.  (Github issue :issue:`4111`)\n+\n+* More C-API declarations for ``cpython.datetime``  were added.\n+  Patch by Bluenix2.  (Github issue :issue:`4128`)\n+\n+* The generated C code failed to compile in CPython 3.11a4 and later.\n+  (Github issue :issue:`4500`)\n+\n+* Some old usages of the deprecated Python ``imp`` module were replaced with ``importlib``.\n+  Patch by Matúš Valo.  (Github issue :issue:`4640`)\n+\n+* Context managers can be written in parentheses.\n+  Patch by David Woods.  (Github issue :issue:`4814`)\n+\n+* The runtime size check for imported ``PyVarObject`` types was improved\n+  to reduce false positives and adapt to Python 3.11.\n+  Patch by David Woods.  (Github issues :issue:`4827`, :issue:`4894`)\n+\n+* The special methods ``__matmul__``, ``__truediv__``, ``__floordiv__`` failed to type\n+  their ``self`` argument.\n+  (Github issue :issue:`5067`)\n+\n+* ``cpdef`` enums no longer use ``OrderedDict`` but ``dict`` in Python 3.6 and later.\n+  Patch by GalaxySnail.  (Github issue :issue:`5180`)\n+\n+* Several problems with CPython 3.12 were resolved.\n+  (Github issue :issue:`5238`)\n+\n+* Very long Python integer constants could exceed the maximum C name length of MSVC.\n+  Patch by 0dminnimda.  (Github issue :issue:`5290`)\n+\n+* The exception handling code was adapted to CPython 3.12.\n+  (Github issue :issue:`5442`)\n+\n+* The dataclass implementation was adapted to support Python 3.12.\n+  (Github issue :issue:`5346`)\n+\n+* The Python ``int`` handling code was adapted to make use of the new ``PyLong``\n+  internals in CPython 3.12.\n+  (Github issue :issue:`5353`)\n+\n+* The type ``cython.Py_hash_t`` is available in Python mode.\n+\n+* The names of Cython's internal types (functions, generator, coroutine, etc.)\n+  are now qualified with the module name of the internal Cython module that is\n+  used for sharing them across Cython implemented modules, for example\n+  ``_cython_3_0a5.coroutine``.  This was done to avoid making them look like\n+  homeless builtins, to help with debugging, and in order to avoid a CPython\n+  warning according to https://bugs.python.org/issue20204\n+\n+Initial support for Limited API\n+-------------------------------\n+\n+CPython provides a stable, limited subset of its C-API as the so-called Limited API.\n+This C-API comes with the guarantee of a stable ABI, meaning that extensions modules\n+that were compiled for one version of CPython can also be imported in later versions\n+without recompilation.\n+\n+There is initial support for this in Cython.  By defining the ``CYTHON_LIMITED_API``\n+macro, Cython cuts down its C-API usage and tries to adhere to the Limited C-API.\n+By also defining the CPython macro ``Py_LIMITED_API`` to a specific CPython\n+compatibility version, you can additionally restrict the C-API during the C compilation,\n+thus enforcing the forward compatibility of the extension module, probably at the cost\n+of a bit of performance.\n+\n+Note that \"initial support\" in Cython really means that setting the ``Py_LIMITED_API``\n+macro may not work for your specific code.  There are limitations in the Limited C-API\n+that are difficult for Cython to generate C code for, so some advanced Python features\n+(like async code) may not lead to C code that cannot adhere to the Limited C-API, or\n+where Cython simply does not know yet how to adhere to it.  Basically, if you get your\n+code to compile with both macros set, and it passes your test suite, then it should be\n+possible to import the extension module also in later CPython versions.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Preliminary support for the CPython's ``Py_LIMITED_API`` (stable ABI) is\n+  available by setting the  ``CYTHON_LIMITED_API`` C macro.  Note that the\n+  support is currently in an early stage and many features do not yet work.\n+  You currently still have to define ``Py_LIMITED_API`` externally in order\n+  to restrict the API usage.  This will change when the feature stabilises.\n+  Patches by Eddie Elizondo and David Woods.  (Github issues :issue:`3223`,\n+  :issue:`3311`, :issue:`3501`)\n+\n+* Limited API support was improved.\n+  Patches by Matthias Braun.  (Github issues :issue:`3693`, :issue:`3707`)\n+\n+* ``_Py_TPFLAGS_HAVE_VECTORCALL`` was always set on extension types when using the limited API.\n+  Patch by David Woods.  (Github issue :issue:`4453`)\n+\n+* Limited API C preprocessor warning is compatible with MSVC. Patch by\n+  Victor Molina Garcia.  (Github issue :issue:`4826`)\n+\n+* The embedding code no longer calls deprecated C-API functions but uses the new ``PyConfig``\n+  API instead on CPython versions that support it (3.8+).\n+  Patch by Alexander Shadchin.  (Github issue :issue:`4895`)\n+\n+* Some C code issue were resolved for the Limited API target.\n+  (Github issues :issue:`5264`, :issue:`5265`, :issue:`5266`)\n+\n+* Conversion of Python ints to C ``int128`` is now always supported, although slow\n+  if dedicated C-API support is missing (``_PyLong_AsByteArray()``), specifically in\n+  the Limited C-API.\n+  (Github issue :issue:`5419`)\n+\n+* Custom buffer slot methods are now supported in the Limited C-API of Python 3.9+.\n+  Patch by Lisandro Dalcin.  (Github issue :issue:`5422`)\n+\n+Improved fidelity to Python semantics\n+-------------------------------------\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:\n+\n+* division\n+* power operator\n+* print\n+* classes\n+* types\n+* subscripting\n+\n+\n+Improvements in Pure Python mode\n+--------------------------------\n+\n+Pure python mode gained many new features and was generally overhauled to make\n+it as capable as the \n+\n+\n+Code generation changes\n+-----------------------\n+\n+Cython has gained several major new features that speed up both the development\n+and the code. Dataclasses have gained an extension type equivalent that implements\n+the dataclass features in C code.  Similarly, the ``@functools.total_ordering``\n+decorator to an extension type will implement the comparison functions in C.\n+\n+FInally, NumPy ufuncs can be generated from simple computation functions with the\n+new ``@cython.ufunc`` decorator.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* A new function decorator ``@cython.ufunc`` automatically generates a (NumPy) ufunc that\n+  applies the calculation function to an entire memoryview.\n+  (Github issue :issue:`4758`)\n+\n+* Generated NumPy ufuncs could crash for large arrays due to incorrect GIL handling.\n+  (Github issue :issue:`5328`)\n+\n+\n+Interaction with numpy\n+----------------------\n+\n+The NumPy declarations (``cimport numpy``) were moved over to the NumPy project in order\n+to allow version specific changes on their side.\n+\n+One effect is that Cython does not use deprecated NumPy C-APIs any more.  Thus, you\n+can define the respective NumPy C macro to get rid of the compatibility warning at\n+C compile time.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Deprecated NumPy API usages were removed from ``numpy.pxd``.\n+  Patch by Matti Picus.  (Github issue :issue:`3365`)\n+\n+* ``cython.inline()`` now sets the ``NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION``\n+  C macro automatically when ``numpy`` is imported in the code, to avoid C compiler\n+  warnings about deprecated NumPy C-API usage.\n+\n+* ``numpy.import_array()`` is automatically called if ``numpy`` has been cimported\n+  and it has not been called in the module code.  This is intended as a hidden\n+  fail-safe so user code should continue to call ``numpy.import_array``.\n+  Patch by David Woods.  (Github issue :issue:`3524`)\n+\n+* The outdated getbuffer/releasebuffer implementations in the NumPy\n+  declarations were removed so that buffers declared as ``ndarray``\n+  now use the normal implementation in NumPy.\n+\n+* Several macros/functions declared in the NumPy API are now usable without\n+  holding the GIL.\n+\n+* The ``numpy`` declarations were updated.\n+  Patch by Brock Mendel.  (Github issue :issue:`3630`)\n+\n+* ``ndarray.shape`` failed to compile with Pythran and recent NumPy.\n+  Patch by Serge Guelton.  (Github issue :issue:`3762`)\n+\n+* A C-level compatibility issue with recent NumPy versions was resolved.\n+  Patch by David Woods.  (Github issue :issue:`4396`)\n+\n+* The generated modules no longer import NumPy internally when using\n+  fused types but no memoryviews.\n+  Patch by David Woods.  (Github issue :issue:`4935`)\n+\n+* ``np.long_t`` and ``np.ulong_t`` were removed from the NumPy declarations,\n+  synching Cython with upstream NumPy v1.25.0.  The aliases were confusing\n+  since they could mean different things on different platforms.\n+\n+\n+Exception handling\n+------------------\n+\n+Cython-implemented C functions now propagate exceptions by default, rather than\n+swallowing them in non-object returning function if the user forgot to add an\n+``except`` declaration to the signature.  This was a long-standing source of bugs,\n+but can require adding the ``noexcept`` declaration to existing functions if\n+exception propagation is really undesired.\n+(Github issue :issue:`4280`)\n+\n+To ease the transition for this break in behaviour, it is possible to set\n+``legacy_implicit_noexcept=True``.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* The exception handling annotation ``except +*`` was broken.\n+  Patch by David Woods.  (Github issues :issue:`3065`, :issue:`3066`)\n+\n+* Exceptions within for-loops that run over memoryviews could lead to a ref-counting error.\n+  Patch by David Woods.  (Github issue :issue:`4662`)\n+\n+* Improve conversion between function pointers with non-identical but\n+  compatible exception specifications.  Patches by David Woods.\n+  (Github issues :issue:`4770`, :issue:`4689`)\n+\n+* To opt out of the new, safer exception handling behaviour, legacy code can set the new\n+  directive ``legacy_implicit_noexcept=True`` for a transition period to keep the\n+  previous, unsafe behaviour.  This directive will eventually be removed in a later release.\n+  Patch by Matúš Valo.  (Github issue :issue:`5094`)\n+\n+* ``noexcept`` was not automatically applied to function pointer attributes in extern structs.\n+  Patch by Matúš Valo.  (Github issue :issue:`5359`)\n+\n+* The code ``except +nogil`` (declaring a C++ exception handler function called ``nogil``)\n+  is now rejected because it is almost certainly a typo from ``except + nogil``.\n+  (Github issue :issue:`5430`)\n+\n+* Handling freshly raised exceptions that didn't have a traceback yet could crash.\n+  (Github issue :issue:`5495`)\n+\n+\n+Compatibility with C\n+--------------------\n+\n+The support for C features like ``const`` or ``volatile`` was substantially improved.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* The ``volatile`` C modifier is supported in Cython code.\n+  Patch by Jeroen Demeyer.  (Github issue :issue:`1667`)\n+\n+* ``const`` can be used together with fused types.\n+  Patch by Thomas Vincent.  (Github issue :issue:`1772`)\n+\n+* Constant integer expressions that used a negative exponent were evaluated\n+  as integer 0 instead of the expected float value.\n+  Patch by Kryštof Pilnáček.  (Github issue :issue:`2133`)\n+\n+* C11 ``complex.h`` is now properly detected.\n+  (Github issue :issue:`2513`)\n+\n+* Standard C/C++ atomic operations are now used for memory views, if available.\n+  (Github issue :issue:`4925`)\n+\n+* ``const`` types could not be returned from functions.\n+  Patch by Mike Graham.  (Github issue :issue:`5135`)\n+\n+* The module state struct was not initialised in correct C (before C23), leading to\n+  compile errors on Windows.\n+  Patch by yudonglin.  (Github issue :issue:`5169`)\n+\n+* Structs that contained an array field resulted in incorrect C code.  Their initialisation\n+  now uses ``memcpy()``.\n+  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5178`)\n+\n+* With MSVC, Cython no longer enables C-Complex support by accident (which is not supported there).\n+  (Github issue :issue:`5512`)\n+\n+* The ``extern \"C\"`` and ``extern \"C++\"`` markers that Cython generates for\n+  ``public`` functions can now be controlled by setting the C macro ``CYTHON_EXTERN_C``.\n+\n+\n+Compatibility with C++\n+----------------------\n+\n+Many C++ features like forwarding references or ``std::move`` are now supported or even used\n+internally, if possible.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Nested ``cppclass`` definitions are supported.\n+  Patch by samaingw.  (Github issue :issue:`1218`)\n+\n+* ``cdef public`` functions used an incorrect linkage declaration in C++.\n+  Patch by Maximilien Colange.  (Github issue :issue:`1839`)\n+\n+* Overloaded C++ static methods were lost.\n+  Patch by Ashwin Srinath.  (Github :issue:`1851`)\n+\n+* Direct assignments to C++ references are now allowed.\n+  Patch by David Woods.  (Github issue :issue:`1863`)\n+\n+* Templating C++ classes with memory view types lead to buggy code and is now rejected.\n+  Patch by David Woods.  (Github issue :issue:`3085`)\n+\n+* C++ ``typeid()`` failed for fused types.\n+  Patch by David Woods.  (Github issue :issue:`3203`)\n+\n+* The destructor is now called for fields in C++ structs.\n+  Patch by David Woods.  (Github issue :issue:`3226`)\n+\n+* ``std::move()`` is now used in C++ mode for internal temp variables to\n+  make them work without copying values.\n+  Patch by David Woods.  (Github issues :issue:`3253`, :issue:`1612`)\n+\n+* The C++ ``typeid()`` function was allowed in C mode.\n+  Patch by Celelibi.  (Github issue :issue:`3637`)\n+\n+* The construct ``for x in cpp_function_call()`` failed to compile.\n+  Patch by David Woods.  (Github issue :issue:`3663`)\n+\n+* C++ references failed to compile when used as Python object indexes.\n+  Patch by David Woods.  (Github issue :issue:`3754`)\n+\n+* A compile failure for C++ enums in Py3.4 / MSVC was resolved.\n+  Patch by Ashwin Srinath.  (Github issue :issue:`3782`)\n+\n+* C++17 execution policies are supported in ``libcpp.algorithm``.\n+  Patch by Ashwin Srinath.  (Github issue :issue:`3790`)\n+\n+* C++ iteration more safely stores the iterable in temporary variables.\n+  Patch by Xavier.  (Github issue :issue:`3828`)\n+\n+* Cython compiled functions always provided a ``__self__`` attribute,\n+  regardless of being used as a method or not.\n+  Patch by David Woods.  (Github issue :issue:`4036`)\n+\n+* Nested C++ types were not usable through ctypedefs.\n+  Patch by Vadim Pushtaev.  (Github issue :issue:`4039`)\n+\n+* Some C++ STL methods did not propagate exceptions.\n+  Patch by Max Bachmann.  (Github issue :issue:`4079`)\n+\n+* More declarations for C++ string methods were added.\n+\n+* Converting C++ containers to Python lists uses less memory allocations.\n+  Patch by Max Bachmann.  (Github issue :issue:`4081`)\n+\n+* Conversion from Python dict to C++ map now supports arbitrary Python mappings,\n+  not just dicts.\n+\n+* ``std::move()`` is now also called for temps during ``yield``.\n+  Patch by Yu Feng.  (Github issue :issue:`4154`)\n+\n+* A new directive ``cpp_locals`` was added that allows local C++ variables to\n+  be lazily initialised (without default constructor), thus making them behave\n+  more like Python variables.\n+  Patch by David Woods.  (Github issue :issue:`4160`)\n+\n+* Generated utility code for C++ conversions no longer depends on several user\n+  definable directives that may make it behave incorrectly.\n+  Patch by David Woods.  (Github issue :issue:`4206`)\n+\n+* Code optimisations were not applied to methods of Cython implemented C++ classes.\n+  Patch by David Woods.  (Github issue :issue:`4212`)\n+\n+* Conversion from Python dicts to ``std::map`` was broken.\n+  Patch by David Woods and Mikkel Skofelt.  (Github issues :issue:`4228`, :issue:`4231`)\n+\n+* Several issues with the new ``cpp_locals`` directive were resolved and\n+  its test coverage improved.\n+  Patch by David Woods.  (Github issues :issue:`4265`, :issue:`4266`)\n+\n+* Declarations for ``libcpp.algorithms``, ``libcpp.set`` and ``libcpp.unordered_set``\n+  were extended.\n+  Patch by David Woods.  (Github issues :issue:`4271`, :issue:`4273`)\n+\n+* ``prange`` loops generated incorrect code when ``cpp_locals`` is enabled.\n+  Patch by David Woods.  (Github issue :issue:`4354`)\n+\n+* C++ post-increment/-decrement operators were not correctly looked up on declared C++\n+  classes, thus allowing Cython declarations to be missing for them and incorrect C++\n+  code to be generated.\n+  Patch by Max Bachmann.  (Github issue :issue:`4536`)\n+\n+* ``cpp_locals`` no longer have to be \"assignable\".\n+  (Github issue :issue:`4558`)\n+\n+* C++ references did not work on fused types.\n+  (Github issue :issue:`4717`)\n+\n+* Several C++ library declarations were added and fixed.\n+  Patches by Dobatymo, account-login, Jonathan Helgert, Evgeny Yakimov, GalaxySnail, Max Bachmann.\n+  (Github issues :issue:`4408`, :issue:`4419`, :issue:`4410`, :issue:`4395`,\n+  :issue:`4423`, :issue:`4448`, :issue:`4462`, :issue:`3293`, :issue:`4522`,\n+  :issue:`2171`, :issue:`4531`)\n+\n+* Some C++ and CPython library declarations were extended and fixed.\n+  Patches by Max Bachmann, Till Hoffmann, Julien Jerphanion, Wenjun Si.\n+  (Github issues :issue:`4530`, :issue:`4528`, :issue:`4710`, :issue:`4746`,\n+  :issue:`4751`, :issue:`4818`, :issue:`4762`, :issue:`4910`)\n+\n+* Some C/C++ warnings were resolved.\n+  Patches by Max Bachmann, Alexander Shadchin, at al.\n+  (Github issues :issue:`5004`, :issue:`5005`, :issue:`5019`, :issue:`5029`, :issue:`5096`)\n+\n+* Declarations were added for the C++ bit operations, some other parts of C++20 and CPython APIs.\n+  Patches by Jonathan Helgert, Dobatymo, William Ayd and Max Bachmann.\n+  (Github issues :issue:`4962`, :issue:`5101`, :issue:`5157`, :issue:`5163`, :issue:`5257`)\n+\n+* ``reversed()`` can now be used together with C++ iteration.\n+  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5002`)\n+\n+* Fully qualified C++ names prefixed by a cimported module name could fail to compile.\n+  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5229`)\n+\n+* Cython generated C++ code accidentally used C++11 features in some cases.\n+  (Github issue :issue:`5316`)\n+\n+* Some C++ warnings regarding ``const`` usage in internally generated utility code were resolved.\n+  Patch by Max Bachmann.  (Github issue :issue:`5301`)\n+\n+* C++ declarations for ``<cmath>``, ``<numbers>`` and ``std::any`` were added.\n+  Patches by Jonathan Helgert and Maximilien Colange.\n+  (Github issues :issue:`5262`, :issue:`5309`, :issue:`5314`)\n+\n+* Reverse iteration in C++ no longer removes the ``const`` qualifier from the item type.\n+  Patch by Isuru Fernando.  (Github issue :issue:`5478`)\n+\n+* C++ containers of item type ``bint`` could conflict with those of item type ``int``.\n+  (Github issue :issue:`5516`)\n+\n+Commandline Interface\n+---------------------\n+\n+[Various]\n+\n+Build integration\n+-----------------\n+\n+[Various]\n+\n+Other changes\n+-------------",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1265556749",
            "id": 1265556749,
            "in_reply_to_id": 1265407517,
            "line": 572,
            "node_id": "PRRC_kwDOABDGAc5Lbt0N",
            "original_commit_id": "478a5d777d96a180388c205d3db3ef62220eeab3",
            "original_line": 572,
            "original_position": 571,
            "original_start_line": 571,
            "path": "CHANGES.rst",
            "position": 571,
            "pull_request_review_id": 1533101981,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265556749/reactions"
            },
            "side": "RIGHT",
            "start_line": 571,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-17T15:39:17Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265556749",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5526#discussion_r1265557115"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5526"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1265557115"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Done in #5532 (just copying the text from the respective bullet as it appeared in one of the alphas)",
            "commit_id": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "created_at": "2023-07-17T15:39:36Z",
            "diff_hunk": "@@ -2,6 +2,1613 @@\n Cython Changelog\n ================\n \n+3.0.0 unified release notes\n+===========================\n+\n+Cython 3.0.0 has been a very large effort that cleaned up many old warts,\n+introduced many new features, and introduces a couple of intentional\n+behaviour changes, even though the goal remained to stay compatible as\n+much as possible with Cython 0.29.x. For details, see the `migration guide`_.\n+\n+.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n+\n+As the development was spread out over several years, a lot of things have\n+happened in the meantime. Many crucial bugfixes and some features were\n+backported to 0.29.x and are not strictly speaking \"new\" in Cyton 3.0.0.\n+\n+Major themes in 3.0.0\n+=====================\n+\n+Compatibility with Python\n+-------------------------\n+\n+Since Cython 3.0.0 started development, CPython 3.8-3.11 were released.\n+All these are supported in Cython, including experimental support for the\n+in-development CPython 3.12. On the other end of the spectrum, support for\n+Python 2.6 was dropped.\n+\n+Cython interacts very closely with the C-API of Python, which is where most\n+of the adaptation work happens. Independently, Cython strives to be able to\n+parse newer Python constructs for use with its `pure python`_ mode, which\n+has been a focus. In short, this allows to compile a wider range of Python\n+code into optimized C code.\n+\n+.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n+\n+Implemented PEPs\n+^^^^^^^^^^^^^^^^\n+\n+* `PEP-3131`_: Supporting Non-ASCII Identifiers (Github issue :issue:`2601`)\n+* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`) (Github issue :issue:`2580`)\n+* `PEP-487`_: Simpler customisation of class creation (Github issue :issue:`2781`)\n+* `PEP-563`_: Postponed Evaluation of Annotations (Github issue :issue:`3285`)\n+* `PEP-570`_: Positional-Only Parameters (Github issue :issue:`2915`)\n+* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`) (Github issue :issue:`2636`)\n+* `PEP-590`_: Vectorcall protocol (Github issue :issue:`2263`)\n+* `PEP-614`_: Relaxing Grammar Restrictions On Decorators (Github issue :issue:`4570`)\n+\n+Typing support in the sense of `PEP-484`_ (Github issues :issue:`3949`, :issue:`4243`)\n+and `PEP-560`_ (Github issues :issue:`2753`, :issue:`3537`, :issue:`3764`) was also improved.\n+\n+.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n+.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n+.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n+.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n+.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n+.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n+.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n+.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n+.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n+.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Generator expressions and comprehensions now look up their outer-most iterable\n+  on creation, as Python does, and not later on start, as they did previously.\n+  (Github issue :issue:`1159`)\n+\n+* C-API declarations for context variables in Python 3.7 were added.\n+  Original patch by Zolisa Bleki.  (Github issue :issue:`2281`)\n+\n+* ``@cython.trashcan(True)`` can be used on an extension type to enable the\n+  CPython :ref:`trashcan`. This allows deallocating deeply recursive objects\n+  without overflowing the stack. Patch by Jeroen Demeyer.  (Github issue :issue:`2842`)\n+\n+* The long deprecated include files ``python_*``, ``stdio``, ``stdlib`` and\n+  ``stl`` in ``Cython/Includes/Deprecated/`` were removed.  Use the ``libc.*``\n+  and ``cpython.*`` pxd modules instead.\n+  Patch by Jeroen Demeyer.  (Github issue :issue:`2904`)\n+\n+* ``PyMem_[Raw]Calloc()`` was added to the ``cpython.mem`` declarations.\n+  Note that the ``Raw`` versions are no longer #defined by Cython.  The previous\n+  macros were not considered safe.\n+  Patch by William Schwartz and David Woods.  (Github issue :issue:`3047`)\n+\n+* Unicode module names and imports are supported.\n+  Patch by David Woods.  (Github issue :issue:`3119`)\n+\n+* ``PyEval_InitThreads()`` is no longer used in Py3.7+ where it is a no-op.\n+\n+* The ``Tempita`` module no longer contains HTML processing capabilities, which\n+  were found to be broken in Python 3.8 and later.\n+  Patch by Marcel Stimberg.  (Github issue :issue:`3309`)\n+\n+* Cython avoids raising ``StopIteration`` in ``__next__`` methods when possible.\n+  Patch by David Woods.  (Github issue :issue:`3447`)\n+\n+* ``__del__(self)`` on extension types now maps to ``tp_finalize`` in Python 3.\n+  Original patch by ax487.  (Github issue :issue:`3612`)\n+\n+* A low-level inline function ``total_seconds(timedelta)`` was added to\n+  ``cpython.datetime`` to bypass the Python method call.  Note that this function\n+  is not guaranteed to give exactly the same results for very large time intervals.\n+  Patch by Brock Mendel.  (Github issue :issue:`3616`)\n+\n+* A new module ``cpython.time`` was added with some low-level alternatives to\n+  Python's ``time`` module.\n+  Patch by Brock Mendel.  (Github issue :issue:`3767`)\n+\n+* Python's ``memoryview`` is now a known builtin type with optimised properties.\n+  (Github issue :issue:`3798`)\n+\n+* The value ``PyBUF_MAX_NDIM`` was added to the ``cpython.buffer`` module.\n+  Patch by John Kirkham.  (Github issue :issue:`3811`)\n+\n+* C-API declarations for ``cpython.fileobject`` were added.\n+  Patch by Zackery Spytz.  (Github issue :issue:`3906`)\n+\n+* The signature of ``PyFloat_FromString()`` in ``cpython.float`` was changed\n+  to match the signature in Py3.  It still has an automatic fallback for Py2.\n+  (Github issue :issue:`3909`)\n+\n+* The internal CPython macro ``Py_ISSPACE()`` is no longer used.\n+  Original patch by Andrew Jones.  (Github issue :issue:`4111`)\n+\n+* More C-API declarations for ``cpython.datetime``  were added.\n+  Patch by Bluenix2.  (Github issue :issue:`4128`)\n+\n+* The generated C code failed to compile in CPython 3.11a4 and later.\n+  (Github issue :issue:`4500`)\n+\n+* Some old usages of the deprecated Python ``imp`` module were replaced with ``importlib``.\n+  Patch by Matúš Valo.  (Github issue :issue:`4640`)\n+\n+* Context managers can be written in parentheses.\n+  Patch by David Woods.  (Github issue :issue:`4814`)\n+\n+* The runtime size check for imported ``PyVarObject`` types was improved\n+  to reduce false positives and adapt to Python 3.11.\n+  Patch by David Woods.  (Github issues :issue:`4827`, :issue:`4894`)\n+\n+* The special methods ``__matmul__``, ``__truediv__``, ``__floordiv__`` failed to type\n+  their ``self`` argument.\n+  (Github issue :issue:`5067`)\n+\n+* ``cpdef`` enums no longer use ``OrderedDict`` but ``dict`` in Python 3.6 and later.\n+  Patch by GalaxySnail.  (Github issue :issue:`5180`)\n+\n+* Several problems with CPython 3.12 were resolved.\n+  (Github issue :issue:`5238`)\n+\n+* Very long Python integer constants could exceed the maximum C name length of MSVC.\n+  Patch by 0dminnimda.  (Github issue :issue:`5290`)\n+\n+* The exception handling code was adapted to CPython 3.12.\n+  (Github issue :issue:`5442`)\n+\n+* The dataclass implementation was adapted to support Python 3.12.\n+  (Github issue :issue:`5346`)\n+\n+* The Python ``int`` handling code was adapted to make use of the new ``PyLong``\n+  internals in CPython 3.12.\n+  (Github issue :issue:`5353`)\n+\n+* The type ``cython.Py_hash_t`` is available in Python mode.\n+\n+* The names of Cython's internal types (functions, generator, coroutine, etc.)\n+  are now qualified with the module name of the internal Cython module that is\n+  used for sharing them across Cython implemented modules, for example\n+  ``_cython_3_0a5.coroutine``.  This was done to avoid making them look like\n+  homeless builtins, to help with debugging, and in order to avoid a CPython\n+  warning according to https://bugs.python.org/issue20204\n+\n+Initial support for Limited API\n+-------------------------------\n+\n+CPython provides a stable, limited subset of its C-API as the so-called Limited API.\n+This C-API comes with the guarantee of a stable ABI, meaning that extensions modules\n+that were compiled for one version of CPython can also be imported in later versions\n+without recompilation.\n+\n+There is initial support for this in Cython.  By defining the ``CYTHON_LIMITED_API``\n+macro, Cython cuts down its C-API usage and tries to adhere to the Limited C-API.\n+By also defining the CPython macro ``Py_LIMITED_API`` to a specific CPython\n+compatibility version, you can additionally restrict the C-API during the C compilation,\n+thus enforcing the forward compatibility of the extension module, probably at the cost\n+of a bit of performance.\n+\n+Note that \"initial support\" in Cython really means that setting the ``Py_LIMITED_API``\n+macro may not work for your specific code.  There are limitations in the Limited C-API\n+that are difficult for Cython to generate C code for, so some advanced Python features\n+(like async code) may not lead to C code that cannot adhere to the Limited C-API, or\n+where Cython simply does not know yet how to adhere to it.  Basically, if you get your\n+code to compile with both macros set, and it passes your test suite, then it should be\n+possible to import the extension module also in later CPython versions.\n+\n+Related fixes\n+^^^^^^^^^^^^^\n+\n+* Preliminary support for the CPython's ``Py_LIMITED_API`` (stable ABI) is\n+  available by setting the  ``CYTHON_LIMITED_API`` C macro.  Note that the\n+  support is currently in an early stage and many features do not yet work.\n+  You currently still have to define ``Py_LIMITED_API`` externally in order\n+  to restrict the API usage.  This will change when the feature stabilises.\n+  Patches by Eddie Elizondo and David Woods.  (Github issues :issue:`3223`,\n+  :issue:`3311`, :issue:`3501`)\n+\n+* Limited API support was improved.\n+  Patches by Matthias Braun.  (Github issues :issue:`3693`, :issue:`3707`)\n+\n+* ``_Py_TPFLAGS_HAVE_VECTORCALL`` was always set on extension types when using the limited API.\n+  Patch by David Woods.  (Github issue :issue:`4453`)\n+\n+* Limited API C preprocessor warning is compatible with MSVC. Patch by\n+  Victor Molina Garcia.  (Github issue :issue:`4826`)\n+\n+* The embedding code no longer calls deprecated C-API functions but uses the new ``PyConfig``\n+  API instead on CPython versions that support it (3.8+).\n+  Patch by Alexander Shadchin.  (Github issue :issue:`4895`)\n+\n+* Some C code issue were resolved for the Limited API target.\n+  (Github issues :issue:`5264`, :issue:`5265`, :issue:`5266`)\n+\n+* Conversion of Python ints to C ``int128`` is now always supported, although slow\n+  if dedicated C-API support is missing (``_PyLong_AsByteArray()``), specifically in\n+  the Limited C-API.\n+  (Github issue :issue:`5419`)\n+\n+* Custom buffer slot methods are now supported in the Limited C-API of Python 3.9+.\n+  Patch by Lisandro Dalcin.  (Github issue :issue:`5422`)\n+\n+Improved fidelity to Python semantics\n+-------------------------------------\n+\n+Cython 3.0.0 also aligns many semantics with Python 3, in particular:",
            "html_url": "https://github.com/cython/cython/pull/5526#discussion_r1265557115",
            "id": 1265557115,
            "in_reply_to_id": 1265406540,
            "line": 237,
            "node_id": "PRRC_kwDOABDGAc5Lbt57",
            "original_commit_id": "478a5d777d96a180388c205d3db3ef62220eeab3",
            "original_line": 237,
            "original_position": 236,
            "original_start_line": null,
            "path": "CHANGES.rst",
            "position": 236,
            "pull_request_review_id": 1533102539,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5526",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265557115/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T15:39:36Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1265557115",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5526/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/264ec99c8ab2337d22e1de847a7e51e367e6cada/comments",
            "commit": {
                "author": {
                    "date": "2023-07-12T13:36:03Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T17:27:31Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "1:1 copy of all Cython 3.0.0 release notes; to more easily see moved lines in later commits",
                "tree": {
                    "sha": "c59943418b2136a20d19871f5e3e05961edf2509",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c59943418b2136a20d19871f5e3e05961edf2509"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/264ec99c8ab2337d22e1de847a7e51e367e6cada",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/264ec99c8ab2337d22e1de847a7e51e367e6cada",
            "node_id": "C_kwDOGCEqy9oAKDI2NGVjOTljOGFiMjMzN2QyMmUxZGU4NDdhN2U1MWUzNjdlNmNhZGE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c0a3556744577d4cfdf3e20a2f3fd164f21272ef",
                    "sha": "c0a3556744577d4cfdf3e20a2f3fd164f21272ef",
                    "url": "https://api.github.com/repos/cython/cython/commits/c0a3556744577d4cfdf3e20a2f3fd164f21272ef"
                }
            ],
            "sha": "264ec99c8ab2337d22e1de847a7e51e367e6cada",
            "url": "https://api.github.com/repos/cython/cython/commits/264ec99c8ab2337d22e1de847a7e51e367e6cada"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f1f11ed4e09eab3d447983286c9e159fa8415233/comments",
            "commit": {
                "author": {
                    "date": "2023-07-12T14:24:54Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T17:27:31Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "first draft of unified release notes for discussion",
                "tree": {
                    "sha": "06c4d981338fc29976f82db7bfa347d407315ca5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/06c4d981338fc29976f82db7bfa347d407315ca5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f1f11ed4e09eab3d447983286c9e159fa8415233",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/f1f11ed4e09eab3d447983286c9e159fa8415233",
            "node_id": "C_kwDOGCEqy9oAKGYxZjExZWQ0ZTA5ZWFiM2Q0NDc5ODMyODZjOWUxNTlmYTg0MTUyMzM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/264ec99c8ab2337d22e1de847a7e51e367e6cada",
                    "sha": "264ec99c8ab2337d22e1de847a7e51e367e6cada",
                    "url": "https://api.github.com/repos/cython/cython/commits/264ec99c8ab2337d22e1de847a7e51e367e6cada"
                }
            ],
            "sha": "f1f11ed4e09eab3d447983286c9e159fa8415233",
            "url": "https://api.github.com/repos/cython/cython/commits/f1f11ed4e09eab3d447983286c9e159fa8415233"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e721e9321521191de787118bb2c7ceaf939d8123/comments",
            "commit": {
                "author": {
                    "date": "2023-07-13T13:36:30Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T17:27:31Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "move some issues for limited API & python compatibility to unified release notes",
                "tree": {
                    "sha": "5f0e1349e3af3c9eaa608f8633a7f2a46585b447",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5f0e1349e3af3c9eaa608f8633a7f2a46585b447"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e721e9321521191de787118bb2c7ceaf939d8123",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/e721e9321521191de787118bb2c7ceaf939d8123",
            "node_id": "C_kwDOGCEqy9oAKGU3MjFlOTMyMTUyMTE5MWRlNzg3MTE4YmIyYzdjZWFmOTM5ZDgxMjM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f1f11ed4e09eab3d447983286c9e159fa8415233",
                    "sha": "f1f11ed4e09eab3d447983286c9e159fa8415233",
                    "url": "https://api.github.com/repos/cython/cython/commits/f1f11ed4e09eab3d447983286c9e159fa8415233"
                }
            ],
            "sha": "e721e9321521191de787118bb2c7ceaf939d8123",
            "url": "https://api.github.com/repos/cython/cython/commits/e721e9321521191de787118bb2c7ceaf939d8123"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/738d7d10bc623298ea61098c0ff85dd36de83855/comments",
            "commit": {
                "author": {
                    "date": "2023-07-13T13:42:18Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T17:27:31Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "move some issues for exception handling to unified release notes",
                "tree": {
                    "sha": "03e2bcc5974826179725435a952dfd6057eeb809",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/03e2bcc5974826179725435a952dfd6057eeb809"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/738d7d10bc623298ea61098c0ff85dd36de83855",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/738d7d10bc623298ea61098c0ff85dd36de83855",
            "node_id": "C_kwDOGCEqy9oAKDczOGQ3ZDEwYmM2MjMyOThlYTYxMDk4YzBmZjg1ZGQzNmRlODM4NTU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e721e9321521191de787118bb2c7ceaf939d8123",
                    "sha": "e721e9321521191de787118bb2c7ceaf939d8123",
                    "url": "https://api.github.com/repos/cython/cython/commits/e721e9321521191de787118bb2c7ceaf939d8123"
                }
            ],
            "sha": "738d7d10bc623298ea61098c0ff85dd36de83855",
            "url": "https://api.github.com/repos/cython/cython/commits/738d7d10bc623298ea61098c0ff85dd36de83855"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8b3ca985046bdc668d2e8fea452efec6c2a7719a/comments",
            "commit": {
                "author": {
                    "date": "2023-07-13T13:49:14Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T17:27:31Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "move some issues for numpy to unified release notes",
                "tree": {
                    "sha": "d8b52c1fd6bf4edd2699eb1eac9ec44e4add6e56",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d8b52c1fd6bf4edd2699eb1eac9ec44e4add6e56"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8b3ca985046bdc668d2e8fea452efec6c2a7719a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/8b3ca985046bdc668d2e8fea452efec6c2a7719a",
            "node_id": "C_kwDOGCEqy9oAKDhiM2NhOTg1MDQ2YmRjNjY4ZDJlOGZlYTQ1MmVmZWM2YzJhNzcxOWE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/738d7d10bc623298ea61098c0ff85dd36de83855",
                    "sha": "738d7d10bc623298ea61098c0ff85dd36de83855",
                    "url": "https://api.github.com/repos/cython/cython/commits/738d7d10bc623298ea61098c0ff85dd36de83855"
                }
            ],
            "sha": "8b3ca985046bdc668d2e8fea452efec6c2a7719a",
            "url": "https://api.github.com/repos/cython/cython/commits/8b3ca985046bdc668d2e8fea452efec6c2a7719a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/31a7bc27d1672853822c39c3d880a22ef45e2cc4/comments",
            "commit": {
                "author": {
                    "date": "2023-07-13T15:59:56Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T17:27:31Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "move some issues for C++ to unified release notes",
                "tree": {
                    "sha": "cd5ff70827bfb7f67731a4ac9d379c7c3c37af61",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/cd5ff70827bfb7f67731a4ac9d379c7c3c37af61"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/31a7bc27d1672853822c39c3d880a22ef45e2cc4",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/31a7bc27d1672853822c39c3d880a22ef45e2cc4",
            "node_id": "C_kwDOGCEqy9oAKDMxYTdiYzI3ZDE2NzI4NTM4MjJjMzljM2Q4ODBhMjJlZjQ1ZTJjYzQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8b3ca985046bdc668d2e8fea452efec6c2a7719a",
                    "sha": "8b3ca985046bdc668d2e8fea452efec6c2a7719a",
                    "url": "https://api.github.com/repos/cython/cython/commits/8b3ca985046bdc668d2e8fea452efec6c2a7719a"
                }
            ],
            "sha": "31a7bc27d1672853822c39c3d880a22ef45e2cc4",
            "url": "https://api.github.com/repos/cython/cython/commits/31a7bc27d1672853822c39c3d880a22ef45e2cc4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e59c6abc094eaefc016c515cad39402806f64add/comments",
            "commit": {
                "author": {
                    "date": "2023-07-13T17:23:13Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T17:27:31Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "move some issues for C to unified release notes",
                "tree": {
                    "sha": "e169db5ea2bcd3b6acbbc49cf1e996d0e361005d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e169db5ea2bcd3b6acbbc49cf1e996d0e361005d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e59c6abc094eaefc016c515cad39402806f64add",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/e59c6abc094eaefc016c515cad39402806f64add",
            "node_id": "C_kwDOGCEqy9oAKGU1OWM2YWJjMDk0ZWFlZmMwMTZjNTE1Y2FkMzk0MDI4MDZmNjRhZGQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/31a7bc27d1672853822c39c3d880a22ef45e2cc4",
                    "sha": "31a7bc27d1672853822c39c3d880a22ef45e2cc4",
                    "url": "https://api.github.com/repos/cython/cython/commits/31a7bc27d1672853822c39c3d880a22ef45e2cc4"
                }
            ],
            "sha": "e59c6abc094eaefc016c515cad39402806f64add",
            "url": "https://api.github.com/repos/cython/cython/commits/e59c6abc094eaefc016c515cad39402806f64add"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e435e84d862bfc81fe144723f73816aecba12c48/comments",
            "commit": {
                "author": {
                    "date": "2023-07-13T17:25:17Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T17:27:31Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "add section for code generation changes",
                "tree": {
                    "sha": "e1fe072f98099854b0a375ef32824205df435739",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e1fe072f98099854b0a375ef32824205df435739"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e435e84d862bfc81fe144723f73816aecba12c48",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/e435e84d862bfc81fe144723f73816aecba12c48",
            "node_id": "C_kwDOGCEqy9oAKGU0MzVlODRkODYyYmZjODFmZTE0NDcyM2Y3MzgxNmFlY2JhMTJjNDg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e59c6abc094eaefc016c515cad39402806f64add",
                    "sha": "e59c6abc094eaefc016c515cad39402806f64add",
                    "url": "https://api.github.com/repos/cython/cython/commits/e59c6abc094eaefc016c515cad39402806f64add"
                }
            ],
            "sha": "e435e84d862bfc81fe144723f73816aecba12c48",
            "url": "https://api.github.com/repos/cython/cython/commits/e435e84d862bfc81fe144723f73816aecba12c48"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/66c86d617c61bbe5555ddc51f6156f0191d99092/comments",
            "commit": {
                "author": {
                    "date": "2023-07-13T17:34:04Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T17:34:04Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "upgrade python semantics, limited API, and pure python into separate sections",
                "tree": {
                    "sha": "d90e34ce625bd96442afb4e096f38b69a373b57b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d90e34ce625bd96442afb4e096f38b69a373b57b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/66c86d617c61bbe5555ddc51f6156f0191d99092",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/66c86d617c61bbe5555ddc51f6156f0191d99092",
            "node_id": "C_kwDOGCEqy9oAKDY2Yzg2ZDYxN2M2MWJiZTU1NTVkZGM1MWY2MTU2ZjAxOTFkOTkwOTI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e435e84d862bfc81fe144723f73816aecba12c48",
                    "sha": "e435e84d862bfc81fe144723f73816aecba12c48",
                    "url": "https://api.github.com/repos/cython/cython/commits/e435e84d862bfc81fe144723f73816aecba12c48"
                }
            ],
            "sha": "66c86d617c61bbe5555ddc51f6156f0191d99092",
            "url": "https://api.github.com/repos/cython/cython/commits/66c86d617c61bbe5555ddc51f6156f0191d99092"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/057c1d93a069a705b8c75db3c73d1df54dfb429e/comments",
            "commit": {
                "author": {
                    "date": "2023-07-13T17:39:42Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T17:54:42Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "remove some fixes that only affected pre-releases (or are too generic)",
                "tree": {
                    "sha": "e1f328f913eaec5f5886b713bd3c9d6c115f900c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e1f328f913eaec5f5886b713bd3c9d6c115f900c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/057c1d93a069a705b8c75db3c73d1df54dfb429e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/057c1d93a069a705b8c75db3c73d1df54dfb429e",
            "node_id": "C_kwDOGCEqy9oAKDA1N2MxZDkzYTA2OWE3MDViOGM3NWRiM2M3M2QxZGY1NGRmYjQyOWU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/66c86d617c61bbe5555ddc51f6156f0191d99092",
                    "sha": "66c86d617c61bbe5555ddc51f6156f0191d99092",
                    "url": "https://api.github.com/repos/cython/cython/commits/66c86d617c61bbe5555ddc51f6156f0191d99092"
                }
            ],
            "sha": "057c1d93a069a705b8c75db3c73d1df54dfb429e",
            "url": "https://api.github.com/repos/cython/cython/commits/057c1d93a069a705b8c75db3c73d1df54dfb429e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fdad43b9fdcb819c1a8ab89dd2f2777539f61334/comments",
            "commit": {
                "author": {
                    "date": "2023-07-13T17:59:26Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T18:01:12Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "move some more Python compat related items",
                "tree": {
                    "sha": "015960a698d2e6af4aaecdbe5e2cc18f6c37b1ba",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/015960a698d2e6af4aaecdbe5e2cc18f6c37b1ba"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fdad43b9fdcb819c1a8ab89dd2f2777539f61334",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/fdad43b9fdcb819c1a8ab89dd2f2777539f61334",
            "node_id": "C_kwDOGCEqy9oAKGZkYWQ0M2I5ZmRjYjgxOWMxYThhYjg5ZGQyZjI3Nzc1MzlmNjEzMzQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/057c1d93a069a705b8c75db3c73d1df54dfb429e",
                    "sha": "057c1d93a069a705b8c75db3c73d1df54dfb429e",
                    "url": "https://api.github.com/repos/cython/cython/commits/057c1d93a069a705b8c75db3c73d1df54dfb429e"
                }
            ],
            "sha": "fdad43b9fdcb819c1a8ab89dd2f2777539f61334",
            "url": "https://api.github.com/repos/cython/cython/commits/fdad43b9fdcb819c1a8ab89dd2f2777539f61334"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fe5a29409d57a2c69e7ec5be65619d265025ef6a/comments",
            "commit": {
                "author": {
                    "date": "2023-07-13T18:01:05Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-13T18:01:12Z",
                    "email": "h.vetinari@gmx.com",
                    "name": "H. Vetinari"
                },
                "message": "move up a few stragglers to C++ & exception sections",
                "tree": {
                    "sha": "2fba87a50adf211017533f6837fb957923c0e26c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2fba87a50adf211017533f6837fb957923c0e26c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fe5a29409d57a2c69e7ec5be65619d265025ef6a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "html_url": "https://github.com/cython/cython/commit/fe5a29409d57a2c69e7ec5be65619d265025ef6a",
            "node_id": "C_kwDOGCEqy9oAKGZlNWEyOTQwOWQ1N2EyYzY5ZTdlYzViZTY1NjE5ZDI2NTAyNWVmNmE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fdad43b9fdcb819c1a8ab89dd2f2777539f61334",
                    "sha": "fdad43b9fdcb819c1a8ab89dd2f2777539f61334",
                    "url": "https://api.github.com/repos/cython/cython/commits/fdad43b9fdcb819c1a8ab89dd2f2777539f61334"
                }
            ],
            "sha": "fe5a29409d57a2c69e7ec5be65619d265025ef6a",
            "url": "https://api.github.com/repos/cython/cython/commits/fe5a29409d57a2c69e7ec5be65619d265025ef6a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/66a542073dd84f29a1eab065938f90c3e23e6fa3/comments",
            "commit": {
                "author": {
                    "date": "2023-07-17T13:18:48Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-17T13:18:48Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Add some descriptive texts.",
                "tree": {
                    "sha": "912fb622ac198b398eb737359a7f6766a9ca2fe3",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/912fb622ac198b398eb737359a7f6766a9ca2fe3"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/66a542073dd84f29a1eab065938f90c3e23e6fa3",
                "verification": {
                    "payload": "tree 912fb622ac198b398eb737359a7f6766a9ca2fe3\nparent fe5a29409d57a2c69e7ec5be65619d265025ef6a\nauthor scoder <stefan_ml@behnel.de> 1689599928 +0200\ncommitter GitHub <noreply@github.com> 1689599928 +0200\n\nAdd some descriptive texts.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJktT+4CRBK7hj4Ov3rIwAA66wIAJjEh18xf+XGa4MbK85ravyI\nOMCowhJ8oFERc2GpaobNTnoLzTUwbwwLqBSYcE82aYcs/P0JmvYM0yLbn4MN7Ahj\no7hHDG/ZNFkWmy4cAKMiPfrmGrcR5m4ApEaXSBcOD9o3eoHQUKT+6Mu0rkZdwWZe\noc9PUcNIjXBqaLhq8D5cg1no7wR2D4brsuBnbkNMIdPOB9qArV4UBUK53qxcYTB0\ncqti5jN2AvG3QzsNH31daqfk3huSCg93mJKUoWbt36pDl2gq6Vmp+u6O3jF58bpm\nvWR6+6Xx+5cDoZj+a6UGl3enBVadT/dSQu4eTKmIDIWqNMyHMav+2cU27UFb7Xg=\n=Ux1P\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/66a542073dd84f29a1eab065938f90c3e23e6fa3",
            "node_id": "C_kwDOGCEqy9oAKDY2YTU0MjA3M2RkODRmMjlhMWVhYjA2NTkzOGY5MGMzZTIzZTZmYTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fe5a29409d57a2c69e7ec5be65619d265025ef6a",
                    "sha": "fe5a29409d57a2c69e7ec5be65619d265025ef6a",
                    "url": "https://api.github.com/repos/cython/cython/commits/fe5a29409d57a2c69e7ec5be65619d265025ef6a"
                }
            ],
            "sha": "66a542073dd84f29a1eab065938f90c3e23e6fa3",
            "url": "https://api.github.com/repos/cython/cython/commits/66a542073dd84f29a1eab065938f90c3e23e6fa3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f581d968cfbd37997d012449c6c8d3aafc65820d/comments",
            "commit": {
                "author": {
                    "date": "2023-07-17T13:48:11Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-17T13:48:11Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into unified",
                "tree": {
                    "sha": "94caf492fd3e7115204fd5ba199730e09171dd19",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/94caf492fd3e7115204fd5ba199730e09171dd19"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f581d968cfbd37997d012449c6c8d3aafc65820d",
                "verification": {
                    "payload": "tree 94caf492fd3e7115204fd5ba199730e09171dd19\nparent 66a542073dd84f29a1eab065938f90c3e23e6fa3\nparent d0302237943f14240d185010cf6d8341ad985835\nauthor scoder <stefan_ml@behnel.de> 1689601691 +0200\ncommitter GitHub <noreply@github.com> 1689601691 +0200\n\nMerge branch 'master' into unified",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJktUabCRBK7hj4Ov3rIwAAsKQIAJhTuQ3e55etGf/TnRmCGfyJ\n5Aj8WtsRoZ/g2P1KYkdcMR+nYyJVjNk9o4zLkaUjE7ZI5jGMmbSWYHtdQRHoKtne\nKOcgeyJ2cBRaeR2Cxrkb/z58bvDt5NbX8z0io7dR2kIcjwVgq/PuEoW2ImkITJCv\nQPBeE2I4xvMdpyZipwc5LJivi7aWJ7eLpBqm/qNgo77WUMuOo3WrFA5iy37JurZM\n63V6+BPIXMbIk8Eg3ope20p3pzwG+x/WnwXgLzP+6z/K1TJT+3ADgvvjekTl0roi\nOKPS6QdlfvOtx5SIkdgfNnXXFpRMfzKS7pxzbJfdufrkA1YlOqj3PCXzzfVktUU=\n=oQG1\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/f581d968cfbd37997d012449c6c8d3aafc65820d",
            "node_id": "C_kwDOGCEqy9oAKGY1ODFkOTY4Y2ZiZDM3OTk3ZDAxMjQ0OWM2YzhkM2FhZmM2NTgyMGQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/66a542073dd84f29a1eab065938f90c3e23e6fa3",
                    "sha": "66a542073dd84f29a1eab065938f90c3e23e6fa3",
                    "url": "https://api.github.com/repos/cython/cython/commits/66a542073dd84f29a1eab065938f90c3e23e6fa3"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/d0302237943f14240d185010cf6d8341ad985835",
                    "sha": "d0302237943f14240d185010cf6d8341ad985835",
                    "url": "https://api.github.com/repos/cython/cython/commits/d0302237943f14240d185010cf6d8341ad985835"
                }
            ],
            "sha": "f581d968cfbd37997d012449c6c8d3aafc65820d",
            "url": "https://api.github.com/repos/cython/cython/commits/f581d968cfbd37997d012449c6c8d3aafc65820d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/478a5d777d96a180388c205d3db3ef62220eeab3/comments",
            "commit": {
                "author": {
                    "date": "2023-07-17T13:53:32Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-17T13:53:32Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Remove comment on something we won't do.",
                "tree": {
                    "sha": "9a4c83974ad211122d54d8f10a69f847f6cb39ce",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9a4c83974ad211122d54d8f10a69f847f6cb39ce"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/478a5d777d96a180388c205d3db3ef62220eeab3",
                "verification": {
                    "payload": "tree 9a4c83974ad211122d54d8f10a69f847f6cb39ce\nparent f581d968cfbd37997d012449c6c8d3aafc65820d\nauthor scoder <stefan_ml@behnel.de> 1689602012 +0200\ncommitter GitHub <noreply@github.com> 1689602012 +0200\n\nRemove comment on something we won't do.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJktUfcCRBK7hj4Ov3rIwAAtccIAJThFuIfNhN+cNv03OZSsKNg\nqM3kgUUvztfHu41KYCri6xlBpJlMjwq6MTG8P7KVDhHIH7sYq86Lt81lo/KdwSUH\nTYOazRnb31Jd8vBVWwU49IKzZpBEothS0+GPl2mNsjTWvSjgVcurYOGvErexDPRy\nwoCZHYASuUhazvb6vred56v/lTn0nKuNPCU542RpDb/Cv0ZYygiR+ik3QMcyLex3\nWs68eH4nzjfFY74x39ZATVqkdrDOICMYcf0stV3gxBgZmDJyJLkw1UHClRjMHEZZ\nr0K4yrXy9Iuj4lzbU+CZD117UviOw2Qp0q1+1SdydyYvfzsh9pHUzo/14g6NNjE=\n=9qF6\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/478a5d777d96a180388c205d3db3ef62220eeab3",
            "node_id": "C_kwDOGCEqy9oAKDQ3OGE1ZDc3N2Q5NmExODAzODhjMjA1ZDNkYjNlZjYyMjIwZWVhYjM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f581d968cfbd37997d012449c6c8d3aafc65820d",
                    "sha": "f581d968cfbd37997d012449c6c8d3aafc65820d",
                    "url": "https://api.github.com/repos/cython/cython/commits/f581d968cfbd37997d012449c6c8d3aafc65820d"
                }
            ],
            "sha": "478a5d777d96a180388c205d3db3ef62220eeab3",
            "url": "https://api.github.com/repos/cython/cython/commits/478a5d777d96a180388c205d3db3ef62220eeab3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4c224f5021da32e2b48768978594bc8fb2960ce7/comments",
            "commit": {
                "author": {
                    "date": "2023-07-17T15:25:19Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-07-17T15:25:19Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "fix typo\n\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                "tree": {
                    "sha": "3e4e722d503d1c0593eaa233f5234c6431e5f23e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3e4e722d503d1c0593eaa233f5234c6431e5f23e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4c224f5021da32e2b48768978594bc8fb2960ce7",
                "verification": {
                    "payload": "tree 3e4e722d503d1c0593eaa233f5234c6431e5f23e\nparent 478a5d777d96a180388c205d3db3ef62220eeab3\nauthor scoder <stefan_ml@behnel.de> 1689607519 +0200\ncommitter GitHub <noreply@github.com> 1689607519 +0200\n\nfix typo\n\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJktV1fCRBK7hj4Ov3rIwAArAUIAFNzQegMNuQnvmUcTw5Egy4X\nFN53Fkc33wW/821XuABvl+dFiT2GriIlEchGyKQHawggEbYjdphucbjVfNfZrtRu\n97UCU/5/DVUR3kRVjO7A2Ag8eLfon6bKHoK37bRPoWN4N9Dn9gxtPvPWB16QY8OB\ncc0BkM7KfmGE8lYGmqJifgpZZ7QCfIkAyzpjn5z88KgxxxhqXiSlNxY5lvG4RphD\nnY/Yfx9PG9qazNsogx4+yzPjNXjTj4AgJYI2MYHNIc2NQ/b/mg1PPbVU470okt2v\nKgsAsdzgk61s27GrBY7Fjl1Nuf8PqooxOopCrKK32DHfqsOPKD/DNNVDhV7QpWw=\n=J5Gf\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/4c224f5021da32e2b48768978594bc8fb2960ce7",
            "node_id": "C_kwDOGCEqy9oAKDRjMjI0ZjUwMjFkYTMyZTJiNDg3Njg5Nzg1OTRiYzhmYjI5NjBjZTc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/478a5d777d96a180388c205d3db3ef62220eeab3",
                    "sha": "478a5d777d96a180388c205d3db3ef62220eeab3",
                    "url": "https://api.github.com/repos/cython/cython/commits/478a5d777d96a180388c205d3db3ef62220eeab3"
                }
            ],
            "sha": "4c224f5021da32e2b48768978594bc8fb2960ce7",
            "url": "https://api.github.com/repos/cython/cython/commits/4c224f5021da32e2b48768978594bc8fb2960ce7"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/5526/commits",
    "created_at": "2023-07-12T15:11:10Z",
    "diff_url": "https://github.com/cython/cython/pull/5526.diff",
    "draft": false,
    "head": {
        "label": "h-vetinari:unified",
        "ref": "unified",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/h-vetinari/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/h-vetinari/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/h-vetinari/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/h-vetinari/cython/branches{/branch}",
            "clone_url": "https://github.com/h-vetinari/cython.git",
            "collaborators_url": "https://api.github.com/repos/h-vetinari/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/h-vetinari/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/h-vetinari/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/h-vetinari/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/h-vetinari/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/h-vetinari/cython/contributors",
            "created_at": "2021-09-09T18:19:04Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/h-vetinari/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/h-vetinari/cython/downloads",
            "events_url": "https://api.github.com/repos/h-vetinari/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/h-vetinari/cython/forks",
            "full_name": "h-vetinari/cython",
            "git_commits_url": "https://api.github.com/repos/h-vetinari/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/h-vetinari/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/h-vetinari/cython/git/tags{/sha}",
            "git_url": "git://github.com/h-vetinari/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/h-vetinari/cython/hooks",
            "html_url": "https://github.com/h-vetinari/cython",
            "id": 404826827,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/h-vetinari/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/h-vetinari/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/h-vetinari/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/h-vetinari/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/h-vetinari/cython/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/h-vetinari/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/h-vetinari/cython/merges",
            "milestones_url": "https://api.github.com/repos/h-vetinari/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnk0MDQ4MjY4Mjc=",
            "notifications_url": "https://api.github.com/repos/h-vetinari/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
                "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-vetinari/followers",
                "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-vetinari",
                "id": 33685575,
                "login": "h-vetinari",
                "node_id": "MDQ6VXNlcjMzNjg1NTc1",
                "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
                "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
                "repos_url": "https://api.github.com/users/h-vetinari/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-vetinari"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/h-vetinari/cython/pulls{/number}",
            "pushed_at": "2023-07-18T09:05:51Z",
            "releases_url": "https://api.github.com/repos/h-vetinari/cython/releases{/id}",
            "size": 67986,
            "ssh_url": "git@github.com:h-vetinari/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/h-vetinari/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/h-vetinari/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/h-vetinari/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/h-vetinari/cython/subscription",
            "svn_url": "https://github.com/h-vetinari/cython",
            "tags_url": "https://api.github.com/repos/h-vetinari/cython/tags",
            "teams_url": "https://api.github.com/repos/h-vetinari/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/h-vetinari/cython/git/trees{/sha}",
            "updated_at": "2021-09-09T18:19:05Z",
            "url": "https://api.github.com/repos/h-vetinari/cython",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "4c224f5021da32e2b48768978594bc8fb2960ce7",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
            "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
            "followers_url": "https://api.github.com/users/h-vetinari/followers",
            "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
            "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/h-vetinari",
            "id": 33685575,
            "login": "h-vetinari",
            "node_id": "MDQ6VXNlcjMzNjg1NTc1",
            "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
            "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
            "repos_url": "https://api.github.com/users/h-vetinari/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/h-vetinari"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/5526",
    "id": 1431479380,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/5526",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425561345,
            "name": "Documentation",
            "node_id": "MDU6TGFiZWw0MjU1NjEzNDU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Documentation"
        }
    ],
    "locked": false,
    "merge_commit_sha": "21d19f8d17cad5c4f7623b2a2fe3aa141d2538c1",
    "merged_at": "2023-07-17T15:27:08Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 944,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\n– New version scheme: 3.x instead of 0.x.\r\n– Change default `language_level` from `2` to `3str`.\r\n– Change default for `binding` directive from `False` to `True`.\r\n– Fix some Python compatibility issues (if possible, allowing for breaking changes).\r\n",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 46,
        "state": "open",
        "title": "3.0",
        "updated_at": "2023-07-18T09:19:09Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "PR_kwDOABDGAc5VUqRU",
    "number": 5526,
    "patch_url": "https://github.com/cython/cython/pull/5526.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/5526/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/4c224f5021da32e2b48768978594bc8fb2960ce7",
    "title": "WIP: Unified release notes",
    "updated_at": "2023-07-17T15:39:36Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/5526",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/33685575?v=4",
        "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
        "followers_url": "https://api.github.com/users/h-vetinari/followers",
        "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
        "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/h-vetinari",
        "id": 33685575,
        "login": "h-vetinari",
        "node_id": "MDQ6VXNlcjMzNjg1NTc1",
        "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
        "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
        "repos_url": "https://api.github.com/users/h-vetinari/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/h-vetinari"
    }
}