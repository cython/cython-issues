{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/6684/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6684/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/6684"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/6684"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6684/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6684"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/d41026ba19cb251a436890ceb3675f5720768a64"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1510,
            "forks_count": 1510,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1424,
            "open_issues_count": 1424,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2025-03-03T07:22:21Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 74669,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 9816,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2025-03-03T13:22:58Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 9816,
            "watchers_count": 9816,
            "web_commit_signoff_required": false
        },
        "sha": "4c3b5ecaad9215989c34b3f501163b2f1a8391d8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": "Most of the time the pre-calculated hashes will already be different and we don't need to compare the strings.\r\n\r\nThis gets the `kwargs2` benchmark in #6683 down from\r\n```\r\nf1: 31.21866300352849 ms\r\nf2: 41.543947998434305 ms\r\nf3: 52.85455100238323 ms\r\n```\r\nto\r\n```\r\nf1: 17.570152995176613 ms\r\nf2: 18.495469994377345 ms\r\nf3: 19.021035986952484 ms\r\n```\r\n\r\nCloses https://github.com/cython/cython/issues/6683",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1962295308"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1962295308"
                }
            },
            "author_association": "NONE",
            "body": "May I suggest also introducing the hash test here as well ?\r\nSince the hash tests doesn't need a function call, I would also suggest to place it before the length test (same comment for the other place).",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-19T19:57:53Z",
            "diff_hunk": "@@ -323,43 +324,58 @@ static int __Pyx_ParseOptionalKeywords(\n #endif\n         Py_INCREF(value);\n \n+        if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+        // Compare strings for non-interned matches.\n         name = first_kw_arg;\n-        if (likely(PyUnicode_Check(key))) {\n-            while (*name) {\n-                int cmp = (\n-                #if CYTHON_ASSUME_SAFE_SIZE\n-                    (PyUnicode_GET_LENGTH(**name) != PyUnicode_GET_LENGTH(key)) ? 1 :\n-                #endif\n-                    PyUnicode_Compare(**name, key)\n-                );\n-                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n-                if (cmp == 0) {\n-                    values[name-argnames] = value;\n+        while (*name) {\n+            int cmp = (\n+            #if CYTHON_ASSUME_SAFE_SIZE",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1962295308",
            "id": 1962295308,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc509kAM",
            "original_commit_id": "934ea152880048673974ddd2133a5c0dd416cc70",
            "original_line": 333,
            "original_position": 29,
            "original_start_line": null,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2627852052,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1962295308/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-19T19:57:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1962295308",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2546609?v=4",
                "events_url": "https://api.github.com/users/axeldavy/events{/privacy}",
                "followers_url": "https://api.github.com/users/axeldavy/followers",
                "following_url": "https://api.github.com/users/axeldavy/following{/other_user}",
                "gists_url": "https://api.github.com/users/axeldavy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/axeldavy",
                "id": 2546609,
                "login": "axeldavy",
                "node_id": "MDQ6VXNlcjI1NDY2MDk=",
                "organizations_url": "https://api.github.com/users/axeldavy/orgs",
                "received_events_url": "https://api.github.com/users/axeldavy/received_events",
                "repos_url": "https://api.github.com/users/axeldavy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/axeldavy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/axeldavy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/axeldavy",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1962328004"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1962328004"
                }
            },
            "author_association": "MEMBER",
            "body": "The length test is a macro and doesn't need a function call either. But yes, the hash seems more likely to mismatch than the length.",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-19T20:26:26Z",
            "diff_hunk": "@@ -323,43 +324,58 @@ static int __Pyx_ParseOptionalKeywords(\n #endif\n         Py_INCREF(value);\n \n+        if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+        // Compare strings for non-interned matches.\n         name = first_kw_arg;\n-        if (likely(PyUnicode_Check(key))) {\n-            while (*name) {\n-                int cmp = (\n-                #if CYTHON_ASSUME_SAFE_SIZE\n-                    (PyUnicode_GET_LENGTH(**name) != PyUnicode_GET_LENGTH(key)) ? 1 :\n-                #endif\n-                    PyUnicode_Compare(**name, key)\n-                );\n-                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n-                if (cmp == 0) {\n-                    values[name-argnames] = value;\n+        while (*name) {\n+            int cmp = (\n+            #if CYTHON_ASSUME_SAFE_SIZE",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1962328004",
            "id": 1962328004,
            "in_reply_to_id": 1962295308,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc509r_E",
            "original_commit_id": "934ea152880048673974ddd2133a5c0dd416cc70",
            "original_line": 333,
            "original_position": 29,
            "original_start_line": null,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2627905259,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1962328004/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-19T20:26:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1962328004",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1966488913"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1966488913"
                }
            },
            "author_association": "MEMBER",
            "body": "In principle there's an unhandled error I think (although a fairly unlikely one).",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-22T10:24:10Z",
            "diff_hunk": "@@ -396,7 +556,45 @@ static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping); /*pr\n //@requires: RaiseDoubleKeywords\n //@requires: Optimize.c::dict_iter\n \n-static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping) {\n+static int __Pyx_MergeKeywords_dict(PyObject *kwdict, PyObject *source_dict) {\n+    int duplicates_found = 0;\n+    Py_ssize_t ppos = 0;\n+    PyObject *key, *smaller_dict, *larger_dict;\n+\n+    if (PyDict_Size(kwdict) <= PyDict_Size(source_dict)) {",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1966488913",
            "id": 1966488913,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51Nj1R",
            "original_commit_id": "9de868180e6052a4b70c21d3927a3faf68c261b5",
            "original_line": 564,
            "original_position": 295,
            "original_start_line": null,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2634769081,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966488913/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-22T10:38:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966488913",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1966489207"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1966489207"
                }
            },
            "author_association": "MEMBER",
            "body": "Another unhandled error possibility here.",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-22T10:25:49Z",
            "diff_hunk": "@@ -396,7 +556,45 @@ static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping); /*pr\n //@requires: RaiseDoubleKeywords\n //@requires: Optimize.c::dict_iter\n \n-static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping) {\n+static int __Pyx_MergeKeywords_dict(PyObject *kwdict, PyObject *source_dict) {\n+    int duplicates_found = 0;\n+    Py_ssize_t ppos = 0;\n+    PyObject *key, *smaller_dict, *larger_dict;\n+\n+    if (PyDict_Size(kwdict) <= PyDict_Size(source_dict)) {\n+        smaller_dict = kwdict;\n+        larger_dict = source_dict;\n+    } else {\n+        smaller_dict = source_dict;\n+        larger_dict = kwdict;\n+    }\n+\n+    __Pyx_BEGIN_CRITICAL_SECTION(smaller_dict);\n+    while (PyDict_Next(smaller_dict, &ppos, &key, NULL)) {\n+        #if CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS\n+        Py_INCREF(key);\n+        #endif\n+        if (unlikely(PyDict_Contains(larger_dict, key))) {",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1966489207",
            "id": 1966489207,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51Nj53",
            "original_commit_id": "9de868180e6052a4b70c21d3927a3faf68c261b5",
            "original_line": 577,
            "original_position": 308,
            "original_start_line": null,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2634769081,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966489207/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-22T10:38:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966489207",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1966490353"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1966490353"
                }
            },
            "author_association": "MEMBER",
            "body": "Would it more readable to make this stuff the definition of `__Pyx_UnicodeKeywordsEqual` when not `CYTHON_USE_UNICODE_INTERNALS`",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-22T10:34:59Z",
            "diff_hunk": "@@ -323,53 +424,93 @@ static int __Pyx_ParseOptionalKeywords(\n #endif\n         Py_INCREF(value);\n \n+        if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        // The key hash is probably pre-calculated.\n+        key_hash = ((PyASCIIObject*)key)->hash;\n+        if (unlikely(key_hash == -1)) {\n+            key_hash = PyObject_Hash(key);\n+            if (unlikely(key_hash == -1))\n+                goto bad;\n+        }\n+        #endif\n+\n+        // Compare strings for non-interned matches.\n         name = first_kw_arg;\n-        if (likely(PyUnicode_Check(key))) {\n-            while (*name) {\n-                int cmp = (\n-                #if CYTHON_ASSUME_SAFE_SIZE\n-                    (PyUnicode_GET_LENGTH(**name) != PyUnicode_GET_LENGTH(key)) ? 1 :\n-                #endif\n-                    PyUnicode_Compare(**name, key)\n-                );\n+        while (*name) {\n+            PyObject *name_str = **name;\n+            #if CYTHON_USE_UNICODE_INTERNALS\n+            // Our argument hash is definitely pre-calculated.\n+            if (key_hash == ((PyASCIIObject*)name_str)->hash)\n+            #elif CYTHON_ASSUME_SAFE_SIZE\n+            if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+            #endif\n+            {\n+                #if CYTHON_USE_UNICODE_INTERNALS\n+                if (__Pyx_UnicodeKeywordsEqual(name_str, key))\n+                #else\n+                int cmp = PyUnicode_Compare(name_str, key);\n                 if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n-                if (cmp == 0) {\n+                if (cmp == 0)",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1966490353",
            "id": 1966490353,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51NkLx",
            "original_commit_id": "9de868180e6052a4b70c21d3927a3faf68c261b5",
            "original_line": 455,
            "original_position": 182,
            "original_start_line": 453,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2634769081,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966490353/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-22T10:38:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966490353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1966490481"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1966490481"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        // Not found after keyword args, check for (unlikely) duplicate positional argument.\r\n```\r\nI think?",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-22T10:36:03Z",
            "diff_hunk": "@@ -323,53 +424,93 @@ static int __Pyx_ParseOptionalKeywords(\n #endif\n         Py_INCREF(value);\n \n+        if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        // The key hash is probably pre-calculated.\n+        key_hash = ((PyASCIIObject*)key)->hash;\n+        if (unlikely(key_hash == -1)) {\n+            key_hash = PyObject_Hash(key);\n+            if (unlikely(key_hash == -1))\n+                goto bad;\n+        }\n+        #endif\n+\n+        // Compare strings for non-interned matches.\n         name = first_kw_arg;\n-        if (likely(PyUnicode_Check(key))) {\n-            while (*name) {\n-                int cmp = (\n-                #if CYTHON_ASSUME_SAFE_SIZE\n-                    (PyUnicode_GET_LENGTH(**name) != PyUnicode_GET_LENGTH(key)) ? 1 :\n-                #endif\n-                    PyUnicode_Compare(**name, key)\n-                );\n+        while (*name) {\n+            PyObject *name_str = **name;\n+            #if CYTHON_USE_UNICODE_INTERNALS\n+            // Our argument hash is definitely pre-calculated.\n+            if (key_hash == ((PyASCIIObject*)name_str)->hash)\n+            #elif CYTHON_ASSUME_SAFE_SIZE\n+            if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+            #endif\n+            {\n+                #if CYTHON_USE_UNICODE_INTERNALS\n+                if (__Pyx_UnicodeKeywordsEqual(name_str, key))\n+                #else\n+                int cmp = PyUnicode_Compare(name_str, key);\n                 if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n-                if (cmp == 0) {\n+                if (cmp == 0)\n+                #endif\n+                {\n                     values[name-argnames] = value;\n #if CYTHON_AVOID_BORROWED_REFS\n                     value = NULL;  /* ownership transferred to values */\n #endif\n                     break;\n                 }\n-                name++;\n             }\n-            if (*name) continue;\n-            else {\n-                // not found after positional args, check for duplicate\n-                PyObject*** argname = argnames;\n+            name++;\n+        }\n+        if (*name) continue;\n+\n+        // Not found after positional args, check for (unlikely) duplicate positional argument.",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1966490481",
            "id": 1966490481,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51NkNx",
            "original_commit_id": "9de868180e6052a4b70c21d3927a3faf68c261b5",
            "original_line": 469,
            "original_position": 201,
            "original_start_line": null,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2634769081,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966490481/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-22T10:38:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966490481",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1966621825"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1966621825"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure. I meant \"the argument name was not found in the (keyword) argument names that follow the positional arguments\". Clearly not a good comment.",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-22T23:09:56Z",
            "diff_hunk": "@@ -323,53 +424,93 @@ static int __Pyx_ParseOptionalKeywords(\n #endif\n         Py_INCREF(value);\n \n+        if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        // The key hash is probably pre-calculated.\n+        key_hash = ((PyASCIIObject*)key)->hash;\n+        if (unlikely(key_hash == -1)) {\n+            key_hash = PyObject_Hash(key);\n+            if (unlikely(key_hash == -1))\n+                goto bad;\n+        }\n+        #endif\n+\n+        // Compare strings for non-interned matches.\n         name = first_kw_arg;\n-        if (likely(PyUnicode_Check(key))) {\n-            while (*name) {\n-                int cmp = (\n-                #if CYTHON_ASSUME_SAFE_SIZE\n-                    (PyUnicode_GET_LENGTH(**name) != PyUnicode_GET_LENGTH(key)) ? 1 :\n-                #endif\n-                    PyUnicode_Compare(**name, key)\n-                );\n+        while (*name) {\n+            PyObject *name_str = **name;\n+            #if CYTHON_USE_UNICODE_INTERNALS\n+            // Our argument hash is definitely pre-calculated.\n+            if (key_hash == ((PyASCIIObject*)name_str)->hash)\n+            #elif CYTHON_ASSUME_SAFE_SIZE\n+            if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+            #endif\n+            {\n+                #if CYTHON_USE_UNICODE_INTERNALS\n+                if (__Pyx_UnicodeKeywordsEqual(name_str, key))\n+                #else\n+                int cmp = PyUnicode_Compare(name_str, key);\n                 if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n-                if (cmp == 0) {\n+                if (cmp == 0)\n+                #endif\n+                {\n                     values[name-argnames] = value;\n #if CYTHON_AVOID_BORROWED_REFS\n                     value = NULL;  /* ownership transferred to values */\n #endif\n                     break;\n                 }\n-                name++;\n             }\n-            if (*name) continue;\n-            else {\n-                // not found after positional args, check for duplicate\n-                PyObject*** argname = argnames;\n+            name++;\n+        }\n+        if (*name) continue;\n+\n+        // Not found after positional args, check for (unlikely) duplicate positional argument.",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1966621825",
            "id": 1966621825,
            "in_reply_to_id": 1966490481,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51OESB",
            "original_commit_id": "9de868180e6052a4b70c21d3927a3faf68c261b5",
            "original_line": 469,
            "original_position": 201,
            "original_start_line": null,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2635344503,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966621825/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-22T23:09:57Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966621825",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1966622245"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1966622245"
                }
            },
            "author_association": "MEMBER",
            "body": "Currently, `__Pyx_UnicodeKeywordsEqual` cannot fail and doesn't need error handling. `PyUnicode_Compare` can fail.",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-22T23:14:08Z",
            "diff_hunk": "@@ -323,53 +424,93 @@ static int __Pyx_ParseOptionalKeywords(\n #endif\n         Py_INCREF(value);\n \n+        if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        // The key hash is probably pre-calculated.\n+        key_hash = ((PyASCIIObject*)key)->hash;\n+        if (unlikely(key_hash == -1)) {\n+            key_hash = PyObject_Hash(key);\n+            if (unlikely(key_hash == -1))\n+                goto bad;\n+        }\n+        #endif\n+\n+        // Compare strings for non-interned matches.\n         name = first_kw_arg;\n-        if (likely(PyUnicode_Check(key))) {\n-            while (*name) {\n-                int cmp = (\n-                #if CYTHON_ASSUME_SAFE_SIZE\n-                    (PyUnicode_GET_LENGTH(**name) != PyUnicode_GET_LENGTH(key)) ? 1 :\n-                #endif\n-                    PyUnicode_Compare(**name, key)\n-                );\n+        while (*name) {\n+            PyObject *name_str = **name;\n+            #if CYTHON_USE_UNICODE_INTERNALS\n+            // Our argument hash is definitely pre-calculated.\n+            if (key_hash == ((PyASCIIObject*)name_str)->hash)\n+            #elif CYTHON_ASSUME_SAFE_SIZE\n+            if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+            #endif\n+            {\n+                #if CYTHON_USE_UNICODE_INTERNALS\n+                if (__Pyx_UnicodeKeywordsEqual(name_str, key))\n+                #else\n+                int cmp = PyUnicode_Compare(name_str, key);\n                 if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n-                if (cmp == 0) {\n+                if (cmp == 0)",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1966622245",
            "id": 1966622245,
            "in_reply_to_id": 1966490353,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51OEYl",
            "original_commit_id": "9de868180e6052a4b70c21d3927a3faf68c261b5",
            "original_line": 455,
            "original_position": 182,
            "original_start_line": 453,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2635344989,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966622245/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-22T23:14:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1966622245",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1972353912"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1972353912"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this may be overkill in the sense that Py3.13 is covered by GetItemRef and before that is covered by the GIL",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-26T20:24:01Z",
            "diff_hunk": "@@ -250,60 +278,427 @@ static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues\n //\n //  This method does not check for required keyword arguments.\n \n-static int __Pyx_ParseOptionalKeywords(\n+static int __Pyx_ValidateDuplicatePosArgs(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char* function_name)\n+{\n+    PyObject ** const *name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *key = **name;\n+        int found = PyDict_Contains(kwds, key);\n+        if (unlikely(found)) {\n+            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+            goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+bad:\n+    return -1;\n+}\n+\n+#if CYTHON_USE_UNICODE_INTERNALS\n+static CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {\n+    int kind;\n+    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);\n+    if (len != PyUnicode_GET_LENGTH(s2)) return 0;\n+\n+    kind = PyUnicode_KIND(s1);\n+    if (kind != PyUnicode_KIND(s2)) return 0;\n+\n+    const void *data1 = PyUnicode_DATA(s1);\n+    const void *data2 = PyUnicode_DATA(s2);\n+    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);\n+}\n+#endif\n+\n+static int __Pyx_MatchKeywordArg_str(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    PyObject ** const *name;\n+    #if CYTHON_USE_UNICODE_INTERNALS\n+    // The key hash is probably pre-calculated.\n+    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;\n+    if (unlikely(key_hash == -1)) {\n+        key_hash = PyObject_Hash(key);\n+        if (unlikely(key_hash == -1))\n+            goto bad;\n+    }\n+    #endif\n+\n+    // Compare strings for non-interned matches.\n+    name = first_kw_arg;\n+    while (*name) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        // The hash value of our interned argument name is definitely pre-calculated.\n+        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) {\n+                *index_found = (size_t) (name - argnames);\n+                return 1;\n+            }\n+        }\n+        #endif\n+        name++;\n+    }\n+\n+    // Not found in keyword parameters, check for (unlikely) duplicate positional argument.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {\n+            if (__Pyx_UnicodeKeywordsEqual(name_str, key))\n+                goto arg_passed_twice;\n+        }\n+\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            if (unlikely(name_str == key)) goto arg_passed_twice;\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) goto arg_passed_twice;\n+        }\n+\n+        #endif\n+        name++;\n+    }\n+\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static int __Pyx_MatchKeywordArg_nostr(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Conservatively handle str subclasses.\n+    PyObject ** const *name;\n+\n+    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+    // Match keyword argument names.\n+    name = first_kw_arg;\n+    while (*name) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (cmp == 1) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        if (unlikely(cmp == -1)) goto bad;\n+        name++;\n+    }\n+    // Reject collisions with positional arguments.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (unlikely(cmp != 0)) {\n+            if (cmp == 1) goto arg_passed_twice;\n+            else goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+invalid_keyword_type:\n+    PyErr_Format(PyExc_TypeError,\n+        \"%.200s() keywords must be strings\", function_name);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static CYTHON_INLINE int __Pyx_MatchKeywordArg(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Optimise for plain str behaviour.\n+    return likely(PyUnicode_CheckExact(key)) ?\n+        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :\n+        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);\n+}\n+\n+static void __Pyx_RejectUnknownKeyword(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char *function_name)\n+{\n+    // Find the first unknown keyword and raise an error. There must be at least one.\n+    Py_ssize_t pos = 0;\n+    PyObject *key = NULL;\n+\n+    while (PyDict_Next(kwds, &pos, &key, NULL)) {\n+        // Quickly exclude the 'obviously' valid/known keyword arguments (exact pointer match).\n+        PyObject** const *name = first_kw_arg;\n+        while (*name && (**name != key)) name++;\n+\n+        if (!*name) {\n+            // No exact match found:\n+            // compare against positional (always reject) and keyword (reject unknown) names.\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_INCREF(key);\n+            #endif\n+\n+            size_t index_found = 0;\n+            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);\n+            if (cmp != 1) {\n+                if (cmp == 0) {\n+                    PyErr_Format(PyExc_TypeError,\n+                        \"%s() got an unexpected keyword argument '%U'\",\n+                        function_name, key);\n+                }\n+                #if CYTHON_AVOID_BORROWED_REFS\n+                Py_DECREF(key);\n+                #endif\n+\n+                break;\n+            }\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_DECREF(key);\n+            #endif\n+        }\n+    }\n+\n+    assert(PyErr_Occurred());\n+}\n+\n+static int __Pyx_ParseKeywordDict(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject *values[],\n+    Py_ssize_t num_pos_args,\n+    const char* function_name,\n+    int ignore_unknown_kwargs)\n+{\n+    PyObject** const *name;\n+    PyObject** const *first_kw_arg = argnames + num_pos_args;\n+    Py_ssize_t kwcount, extracted = 0;\n+    int failed = 0;\n+\n+    // Check if dict is unicode-keys-only and let Python set the error otherwise.\n+    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;\n+\n+    #if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_SIZE\n+    kwcount = PyDict_GET_SIZE(kwds);\n+    #else\n+    kwcount = PyDict_Size(kwds);\n+    if (unlikely(kwcount < 0)) return -1;\n+    #endif\n+\n+    // Extract declared keyword arguments.\n+    __Pyx_BEGIN_CRITICAL_SECTION(kwds);",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1972353912",
            "id": 1972353912,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51j7t4",
            "original_commit_id": "b049ca3a1bb802351baf943cfec7e69e343974d7",
            "original_line": 528,
            "original_position": 296,
            "original_start_line": null,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2645820439,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972353912/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-26T20:38:42Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972353912",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1972357117"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1972357117"
                }
            },
            "author_association": "MEMBER",
            "body": "Not sure this is needed. You read it earlier and we don't really expect this to change.\r\n\r\nIf it's for thread safety reasons then I'm not sure it's a useful level of thread safety (in that there isn't really a consistent right answer for what you should get if someone's changing the dict externally as you try to extract the keywords)",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-26T20:26:07Z",
            "diff_hunk": "@@ -250,60 +278,427 @@ static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues\n //\n //  This method does not check for required keyword arguments.\n \n-static int __Pyx_ParseOptionalKeywords(\n+static int __Pyx_ValidateDuplicatePosArgs(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char* function_name)\n+{\n+    PyObject ** const *name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *key = **name;\n+        int found = PyDict_Contains(kwds, key);\n+        if (unlikely(found)) {\n+            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+            goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+bad:\n+    return -1;\n+}\n+\n+#if CYTHON_USE_UNICODE_INTERNALS\n+static CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {\n+    int kind;\n+    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);\n+    if (len != PyUnicode_GET_LENGTH(s2)) return 0;\n+\n+    kind = PyUnicode_KIND(s1);\n+    if (kind != PyUnicode_KIND(s2)) return 0;\n+\n+    const void *data1 = PyUnicode_DATA(s1);\n+    const void *data2 = PyUnicode_DATA(s2);\n+    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);\n+}\n+#endif\n+\n+static int __Pyx_MatchKeywordArg_str(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    PyObject ** const *name;\n+    #if CYTHON_USE_UNICODE_INTERNALS\n+    // The key hash is probably pre-calculated.\n+    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;\n+    if (unlikely(key_hash == -1)) {\n+        key_hash = PyObject_Hash(key);\n+        if (unlikely(key_hash == -1))\n+            goto bad;\n+    }\n+    #endif\n+\n+    // Compare strings for non-interned matches.\n+    name = first_kw_arg;\n+    while (*name) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        // The hash value of our interned argument name is definitely pre-calculated.\n+        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) {\n+                *index_found = (size_t) (name - argnames);\n+                return 1;\n+            }\n+        }\n+        #endif\n+        name++;\n+    }\n+\n+    // Not found in keyword parameters, check for (unlikely) duplicate positional argument.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {\n+            if (__Pyx_UnicodeKeywordsEqual(name_str, key))\n+                goto arg_passed_twice;\n+        }\n+\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            if (unlikely(name_str == key)) goto arg_passed_twice;\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) goto arg_passed_twice;\n+        }\n+\n+        #endif\n+        name++;\n+    }\n+\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static int __Pyx_MatchKeywordArg_nostr(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Conservatively handle str subclasses.\n+    PyObject ** const *name;\n+\n+    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+    // Match keyword argument names.\n+    name = first_kw_arg;\n+    while (*name) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (cmp == 1) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        if (unlikely(cmp == -1)) goto bad;\n+        name++;\n+    }\n+    // Reject collisions with positional arguments.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (unlikely(cmp != 0)) {\n+            if (cmp == 1) goto arg_passed_twice;\n+            else goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+invalid_keyword_type:\n+    PyErr_Format(PyExc_TypeError,\n+        \"%.200s() keywords must be strings\", function_name);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static CYTHON_INLINE int __Pyx_MatchKeywordArg(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Optimise for plain str behaviour.\n+    return likely(PyUnicode_CheckExact(key)) ?\n+        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :\n+        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);\n+}\n+\n+static void __Pyx_RejectUnknownKeyword(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char *function_name)\n+{\n+    // Find the first unknown keyword and raise an error. There must be at least one.\n+    Py_ssize_t pos = 0;\n+    PyObject *key = NULL;\n+\n+    while (PyDict_Next(kwds, &pos, &key, NULL)) {\n+        // Quickly exclude the 'obviously' valid/known keyword arguments (exact pointer match).\n+        PyObject** const *name = first_kw_arg;\n+        while (*name && (**name != key)) name++;\n+\n+        if (!*name) {\n+            // No exact match found:\n+            // compare against positional (always reject) and keyword (reject unknown) names.\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_INCREF(key);\n+            #endif\n+\n+            size_t index_found = 0;\n+            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);\n+            if (cmp != 1) {\n+                if (cmp == 0) {\n+                    PyErr_Format(PyExc_TypeError,\n+                        \"%s() got an unexpected keyword argument '%U'\",\n+                        function_name, key);\n+                }\n+                #if CYTHON_AVOID_BORROWED_REFS\n+                Py_DECREF(key);\n+                #endif\n+\n+                break;\n+            }\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_DECREF(key);\n+            #endif\n+        }\n+    }\n+\n+    assert(PyErr_Occurred());\n+}\n+\n+static int __Pyx_ParseKeywordDict(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject *values[],\n+    Py_ssize_t num_pos_args,\n+    const char* function_name,\n+    int ignore_unknown_kwargs)\n+{\n+    PyObject** const *name;\n+    PyObject** const *first_kw_arg = argnames + num_pos_args;\n+    Py_ssize_t kwcount, extracted = 0;\n+    int failed = 0;\n+\n+    // Check if dict is unicode-keys-only and let Python set the error otherwise.\n+    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;\n+\n+    #if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_SIZE\n+    kwcount = PyDict_GET_SIZE(kwds);\n+    #else\n+    kwcount = PyDict_Size(kwds);\n+    if (unlikely(kwcount < 0)) return -1;\n+    #endif\n+\n+    // Extract declared keyword arguments.\n+    __Pyx_BEGIN_CRITICAL_SECTION(kwds);\n+    name = first_kw_arg;\n+    while (*name && kwcount > extracted) {\n+        PyObject * key = **name;\n+        PyObject *value;\n+        int found;\n+\n+        #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n+        found = PyDict_GetItemRef(kwds, key, &value);\n+        #else\n+        // There isn't a good way to make this thread-safe before Py3.13.\n+        // PyObject_GetItem() would generate lots of expensive KeyErrors.\n+        // PyDict_Next() returns borrowed references.\n+        value = PyDict_GetItemWithError(kwds, key);\n+        if (value) {\n+            Py_INCREF(value);\n+        } else {\n+            if (unlikely(PyErr_Occurred())) {\n+                failed = 1;\n+                break;\n+            };\n+        }\n+        found = value != NULL;\n+        #endif\n+\n+        if (found) {\n+            if (unlikely(found < 0)) {\n+                failed = 1;\n+                break;\n+            };\n+            values[name-argnames] = value;\n+            extracted++;\n+        }\n+\n+        #if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_SIZE\n+        kwcount = PyDict_GET_SIZE(kwds);\n+        #else\n+        kwcount = PyDict_Size(kwds);\n+        if (unlikely(kwcount < 0)) {\n+            failed = 1;\n+            break;\n+        };",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1972357117",
            "id": 1972357117,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51j8f9",
            "original_commit_id": "b049ca3a1bb802351baf943cfec7e69e343974d7",
            "original_line": 569,
            "original_position": 337,
            "original_start_line": 562,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2645820439,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972357117/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-26T20:38:42Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972357117",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1972360748"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1972360748"
                }
            },
            "author_association": "MEMBER",
            "body": "Should be OK I think. There's nothing between `GetItemWithError` and `INCREF` that can release the GIL so I can't see a thread-safety issue (beyond the usual distrust of borrowed references in PyPy and similar)",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-26T20:28:21Z",
            "diff_hunk": "@@ -250,60 +278,427 @@ static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues\n //\n //  This method does not check for required keyword arguments.\n \n-static int __Pyx_ParseOptionalKeywords(\n+static int __Pyx_ValidateDuplicatePosArgs(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char* function_name)\n+{\n+    PyObject ** const *name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *key = **name;\n+        int found = PyDict_Contains(kwds, key);\n+        if (unlikely(found)) {\n+            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+            goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+bad:\n+    return -1;\n+}\n+\n+#if CYTHON_USE_UNICODE_INTERNALS\n+static CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {\n+    int kind;\n+    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);\n+    if (len != PyUnicode_GET_LENGTH(s2)) return 0;\n+\n+    kind = PyUnicode_KIND(s1);\n+    if (kind != PyUnicode_KIND(s2)) return 0;\n+\n+    const void *data1 = PyUnicode_DATA(s1);\n+    const void *data2 = PyUnicode_DATA(s2);\n+    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);\n+}\n+#endif\n+\n+static int __Pyx_MatchKeywordArg_str(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    PyObject ** const *name;\n+    #if CYTHON_USE_UNICODE_INTERNALS\n+    // The key hash is probably pre-calculated.\n+    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;\n+    if (unlikely(key_hash == -1)) {\n+        key_hash = PyObject_Hash(key);\n+        if (unlikely(key_hash == -1))\n+            goto bad;\n+    }\n+    #endif\n+\n+    // Compare strings for non-interned matches.\n+    name = first_kw_arg;\n+    while (*name) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        // The hash value of our interned argument name is definitely pre-calculated.\n+        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) {\n+                *index_found = (size_t) (name - argnames);\n+                return 1;\n+            }\n+        }\n+        #endif\n+        name++;\n+    }\n+\n+    // Not found in keyword parameters, check for (unlikely) duplicate positional argument.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {\n+            if (__Pyx_UnicodeKeywordsEqual(name_str, key))\n+                goto arg_passed_twice;\n+        }\n+\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            if (unlikely(name_str == key)) goto arg_passed_twice;\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) goto arg_passed_twice;\n+        }\n+\n+        #endif\n+        name++;\n+    }\n+\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static int __Pyx_MatchKeywordArg_nostr(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Conservatively handle str subclasses.\n+    PyObject ** const *name;\n+\n+    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+    // Match keyword argument names.\n+    name = first_kw_arg;\n+    while (*name) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (cmp == 1) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        if (unlikely(cmp == -1)) goto bad;\n+        name++;\n+    }\n+    // Reject collisions with positional arguments.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (unlikely(cmp != 0)) {\n+            if (cmp == 1) goto arg_passed_twice;\n+            else goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+invalid_keyword_type:\n+    PyErr_Format(PyExc_TypeError,\n+        \"%.200s() keywords must be strings\", function_name);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static CYTHON_INLINE int __Pyx_MatchKeywordArg(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Optimise for plain str behaviour.\n+    return likely(PyUnicode_CheckExact(key)) ?\n+        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :\n+        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);\n+}\n+\n+static void __Pyx_RejectUnknownKeyword(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char *function_name)\n+{\n+    // Find the first unknown keyword and raise an error. There must be at least one.\n+    Py_ssize_t pos = 0;\n+    PyObject *key = NULL;\n+\n+    while (PyDict_Next(kwds, &pos, &key, NULL)) {\n+        // Quickly exclude the 'obviously' valid/known keyword arguments (exact pointer match).\n+        PyObject** const *name = first_kw_arg;\n+        while (*name && (**name != key)) name++;\n+\n+        if (!*name) {\n+            // No exact match found:\n+            // compare against positional (always reject) and keyword (reject unknown) names.\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_INCREF(key);\n+            #endif\n+\n+            size_t index_found = 0;\n+            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);\n+            if (cmp != 1) {\n+                if (cmp == 0) {\n+                    PyErr_Format(PyExc_TypeError,\n+                        \"%s() got an unexpected keyword argument '%U'\",\n+                        function_name, key);\n+                }\n+                #if CYTHON_AVOID_BORROWED_REFS\n+                Py_DECREF(key);\n+                #endif\n+\n+                break;\n+            }\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_DECREF(key);\n+            #endif\n+        }\n+    }\n+\n+    assert(PyErr_Occurred());\n+}\n+\n+static int __Pyx_ParseKeywordDict(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject *values[],\n+    Py_ssize_t num_pos_args,\n+    const char* function_name,\n+    int ignore_unknown_kwargs)\n+{\n+    PyObject** const *name;\n+    PyObject** const *first_kw_arg = argnames + num_pos_args;\n+    Py_ssize_t kwcount, extracted = 0;\n+    int failed = 0;\n+\n+    // Check if dict is unicode-keys-only and let Python set the error otherwise.\n+    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;\n+\n+    #if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_SIZE\n+    kwcount = PyDict_GET_SIZE(kwds);\n+    #else\n+    kwcount = PyDict_Size(kwds);\n+    if (unlikely(kwcount < 0)) return -1;\n+    #endif\n+\n+    // Extract declared keyword arguments.\n+    __Pyx_BEGIN_CRITICAL_SECTION(kwds);\n+    name = first_kw_arg;\n+    while (*name && kwcount > extracted) {\n+        PyObject * key = **name;\n+        PyObject *value;\n+        int found;\n+\n+        #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n+        found = PyDict_GetItemRef(kwds, key, &value);\n+        #else\n+        // There isn't a good way to make this thread-safe before Py3.13.\n+        // PyObject_GetItem() would generate lots of expensive KeyErrors.\n+        // PyDict_Next() returns borrowed references.",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1972360748",
            "id": 1972360748,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51j9Ys",
            "original_commit_id": "b049ca3a1bb802351baf943cfec7e69e343974d7",
            "original_line": 540,
            "original_position": 308,
            "original_start_line": 538,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2645820439,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972360748/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-26T20:38:42Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972360748",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1972371903"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1972371903"
                }
            },
            "author_association": "MEMBER",
            "body": "I think also both Python and Cython will make sure `kwds` is a fresh uniquely owned dict before the function call. So really the only risk is people manually using the C API to pass a dict which they've also shared with another thread. Which we might able to dismiss as \"their fault\"",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-26T20:36:21Z",
            "diff_hunk": "@@ -250,60 +278,427 @@ static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues\n //\n //  This method does not check for required keyword arguments.\n \n-static int __Pyx_ParseOptionalKeywords(\n+static int __Pyx_ValidateDuplicatePosArgs(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char* function_name)\n+{\n+    PyObject ** const *name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *key = **name;\n+        int found = PyDict_Contains(kwds, key);\n+        if (unlikely(found)) {\n+            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+            goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+bad:\n+    return -1;\n+}\n+\n+#if CYTHON_USE_UNICODE_INTERNALS\n+static CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {\n+    int kind;\n+    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);\n+    if (len != PyUnicode_GET_LENGTH(s2)) return 0;\n+\n+    kind = PyUnicode_KIND(s1);\n+    if (kind != PyUnicode_KIND(s2)) return 0;\n+\n+    const void *data1 = PyUnicode_DATA(s1);\n+    const void *data2 = PyUnicode_DATA(s2);\n+    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);\n+}\n+#endif\n+\n+static int __Pyx_MatchKeywordArg_str(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    PyObject ** const *name;\n+    #if CYTHON_USE_UNICODE_INTERNALS\n+    // The key hash is probably pre-calculated.\n+    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;\n+    if (unlikely(key_hash == -1)) {\n+        key_hash = PyObject_Hash(key);\n+        if (unlikely(key_hash == -1))\n+            goto bad;\n+    }\n+    #endif\n+\n+    // Compare strings for non-interned matches.\n+    name = first_kw_arg;\n+    while (*name) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        // The hash value of our interned argument name is definitely pre-calculated.\n+        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) {\n+                *index_found = (size_t) (name - argnames);\n+                return 1;\n+            }\n+        }\n+        #endif\n+        name++;\n+    }\n+\n+    // Not found in keyword parameters, check for (unlikely) duplicate positional argument.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {\n+            if (__Pyx_UnicodeKeywordsEqual(name_str, key))\n+                goto arg_passed_twice;\n+        }\n+\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            if (unlikely(name_str == key)) goto arg_passed_twice;\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) goto arg_passed_twice;\n+        }\n+\n+        #endif\n+        name++;\n+    }\n+\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static int __Pyx_MatchKeywordArg_nostr(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Conservatively handle str subclasses.\n+    PyObject ** const *name;\n+\n+    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+    // Match keyword argument names.\n+    name = first_kw_arg;\n+    while (*name) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (cmp == 1) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        if (unlikely(cmp == -1)) goto bad;\n+        name++;\n+    }\n+    // Reject collisions with positional arguments.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (unlikely(cmp != 0)) {\n+            if (cmp == 1) goto arg_passed_twice;\n+            else goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+invalid_keyword_type:\n+    PyErr_Format(PyExc_TypeError,\n+        \"%.200s() keywords must be strings\", function_name);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static CYTHON_INLINE int __Pyx_MatchKeywordArg(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Optimise for plain str behaviour.\n+    return likely(PyUnicode_CheckExact(key)) ?\n+        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :\n+        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);\n+}\n+\n+static void __Pyx_RejectUnknownKeyword(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char *function_name)\n+{\n+    // Find the first unknown keyword and raise an error. There must be at least one.\n+    Py_ssize_t pos = 0;\n+    PyObject *key = NULL;\n+\n+    while (PyDict_Next(kwds, &pos, &key, NULL)) {\n+        // Quickly exclude the 'obviously' valid/known keyword arguments (exact pointer match).\n+        PyObject** const *name = first_kw_arg;\n+        while (*name && (**name != key)) name++;\n+\n+        if (!*name) {\n+            // No exact match found:\n+            // compare against positional (always reject) and keyword (reject unknown) names.\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_INCREF(key);\n+            #endif\n+\n+            size_t index_found = 0;\n+            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);\n+            if (cmp != 1) {\n+                if (cmp == 0) {\n+                    PyErr_Format(PyExc_TypeError,\n+                        \"%s() got an unexpected keyword argument '%U'\",\n+                        function_name, key);\n+                }\n+                #if CYTHON_AVOID_BORROWED_REFS\n+                Py_DECREF(key);\n+                #endif\n+\n+                break;\n+            }\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_DECREF(key);\n+            #endif\n+        }\n+    }\n+\n+    assert(PyErr_Occurred());\n+}\n+\n+static int __Pyx_ParseKeywordDict(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject *values[],\n+    Py_ssize_t num_pos_args,\n+    const char* function_name,\n+    int ignore_unknown_kwargs)\n+{\n+    PyObject** const *name;\n+    PyObject** const *first_kw_arg = argnames + num_pos_args;\n+    Py_ssize_t kwcount, extracted = 0;\n+    int failed = 0;\n+\n+    // Check if dict is unicode-keys-only and let Python set the error otherwise.\n+    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;\n+\n+    #if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_SIZE\n+    kwcount = PyDict_GET_SIZE(kwds);\n+    #else\n+    kwcount = PyDict_Size(kwds);\n+    if (unlikely(kwcount < 0)) return -1;\n+    #endif\n+\n+    // Extract declared keyword arguments.\n+    __Pyx_BEGIN_CRITICAL_SECTION(kwds);",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1972371903",
            "id": 1972371903,
            "in_reply_to_id": 1972353912,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51kAG_",
            "original_commit_id": "b049ca3a1bb802351baf943cfec7e69e343974d7",
            "original_line": 528,
            "original_position": 296,
            "original_start_line": null,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2645820439,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972371903/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-26T20:38:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972371903",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1972374427"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1972374427"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd move the critical section in here since that does a `PyDict_Next` loop so could _potentially_ go wrong and say the code outside is thread-safe enough that it won't crash and I think that's all that's required here.",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-26T20:38:35Z",
            "diff_hunk": "@@ -250,60 +278,427 @@ static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues\n //\n //  This method does not check for required keyword arguments.\n \n-static int __Pyx_ParseOptionalKeywords(\n+static int __Pyx_ValidateDuplicatePosArgs(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char* function_name)\n+{\n+    PyObject ** const *name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *key = **name;\n+        int found = PyDict_Contains(kwds, key);\n+        if (unlikely(found)) {\n+            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+            goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+bad:\n+    return -1;\n+}\n+\n+#if CYTHON_USE_UNICODE_INTERNALS\n+static CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {\n+    int kind;\n+    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);\n+    if (len != PyUnicode_GET_LENGTH(s2)) return 0;\n+\n+    kind = PyUnicode_KIND(s1);\n+    if (kind != PyUnicode_KIND(s2)) return 0;\n+\n+    const void *data1 = PyUnicode_DATA(s1);\n+    const void *data2 = PyUnicode_DATA(s2);\n+    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);\n+}\n+#endif\n+\n+static int __Pyx_MatchKeywordArg_str(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    PyObject ** const *name;\n+    #if CYTHON_USE_UNICODE_INTERNALS\n+    // The key hash is probably pre-calculated.\n+    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;\n+    if (unlikely(key_hash == -1)) {\n+        key_hash = PyObject_Hash(key);\n+        if (unlikely(key_hash == -1))\n+            goto bad;\n+    }\n+    #endif\n+\n+    // Compare strings for non-interned matches.\n+    name = first_kw_arg;\n+    while (*name) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        // The hash value of our interned argument name is definitely pre-calculated.\n+        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) {\n+                *index_found = (size_t) (name - argnames);\n+                return 1;\n+            }\n+        }\n+        #endif\n+        name++;\n+    }\n+\n+    // Not found in keyword parameters, check for (unlikely) duplicate positional argument.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {\n+            if (__Pyx_UnicodeKeywordsEqual(name_str, key))\n+                goto arg_passed_twice;\n+        }\n+\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            if (unlikely(name_str == key)) goto arg_passed_twice;\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) goto arg_passed_twice;\n+        }\n+\n+        #endif\n+        name++;\n+    }\n+\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static int __Pyx_MatchKeywordArg_nostr(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Conservatively handle str subclasses.\n+    PyObject ** const *name;\n+\n+    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+    // Match keyword argument names.\n+    name = first_kw_arg;\n+    while (*name) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (cmp == 1) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        if (unlikely(cmp == -1)) goto bad;\n+        name++;\n+    }\n+    // Reject collisions with positional arguments.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (unlikely(cmp != 0)) {\n+            if (cmp == 1) goto arg_passed_twice;\n+            else goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+invalid_keyword_type:\n+    PyErr_Format(PyExc_TypeError,\n+        \"%.200s() keywords must be strings\", function_name);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static CYTHON_INLINE int __Pyx_MatchKeywordArg(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Optimise for plain str behaviour.\n+    return likely(PyUnicode_CheckExact(key)) ?\n+        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :\n+        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);\n+}\n+\n+static void __Pyx_RejectUnknownKeyword(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char *function_name)\n+{\n+    // Find the first unknown keyword and raise an error. There must be at least one.\n+    Py_ssize_t pos = 0;\n+    PyObject *key = NULL;\n+\n+    while (PyDict_Next(kwds, &pos, &key, NULL)) {\n+        // Quickly exclude the 'obviously' valid/known keyword arguments (exact pointer match).\n+        PyObject** const *name = first_kw_arg;\n+        while (*name && (**name != key)) name++;\n+\n+        if (!*name) {\n+            // No exact match found:\n+            // compare against positional (always reject) and keyword (reject unknown) names.\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_INCREF(key);\n+            #endif\n+\n+            size_t index_found = 0;\n+            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);\n+            if (cmp != 1) {\n+                if (cmp == 0) {\n+                    PyErr_Format(PyExc_TypeError,\n+                        \"%s() got an unexpected keyword argument '%U'\",\n+                        function_name, key);\n+                }\n+                #if CYTHON_AVOID_BORROWED_REFS\n+                Py_DECREF(key);\n+                #endif\n+\n+                break;\n+            }\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_DECREF(key);\n+            #endif\n+        }\n+    }\n+\n+    assert(PyErr_Occurred());\n+}\n+\n+static int __Pyx_ParseKeywordDict(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject *values[],\n+    Py_ssize_t num_pos_args,\n+    const char* function_name,\n+    int ignore_unknown_kwargs)\n+{\n+    PyObject** const *name;\n+    PyObject** const *first_kw_arg = argnames + num_pos_args;\n+    Py_ssize_t kwcount, extracted = 0;\n+    int failed = 0;\n+\n+    // Check if dict is unicode-keys-only and let Python set the error otherwise.\n+    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;\n+\n+    #if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_SIZE\n+    kwcount = PyDict_GET_SIZE(kwds);\n+    #else\n+    kwcount = PyDict_Size(kwds);\n+    if (unlikely(kwcount < 0)) return -1;\n+    #endif\n+\n+    // Extract declared keyword arguments.\n+    __Pyx_BEGIN_CRITICAL_SECTION(kwds);\n+    name = first_kw_arg;\n+    while (*name && kwcount > extracted) {\n+        PyObject * key = **name;\n+        PyObject *value;\n+        int found;\n+\n+        #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n+        found = PyDict_GetItemRef(kwds, key, &value);\n+        #else\n+        // There isn't a good way to make this thread-safe before Py3.13.\n+        // PyObject_GetItem() would generate lots of expensive KeyErrors.\n+        // PyDict_Next() returns borrowed references.\n+        value = PyDict_GetItemWithError(kwds, key);\n+        if (value) {\n+            Py_INCREF(value);\n+        } else {\n+            if (unlikely(PyErr_Occurred())) {\n+                failed = 1;\n+                break;\n+            };\n+        }\n+        found = value != NULL;\n+        #endif\n+\n+        if (found) {\n+            if (unlikely(found < 0)) {\n+                failed = 1;\n+                break;\n+            };\n+            values[name-argnames] = value;\n+            extracted++;\n+        }\n+\n+        #if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_SIZE\n+        kwcount = PyDict_GET_SIZE(kwds);\n+        #else\n+        kwcount = PyDict_Size(kwds);\n+        if (unlikely(kwcount < 0)) {\n+            failed = 1;\n+            break;\n+        };\n+        #endif\n+\n+        name++;\n+    }\n+\n+    if (!failed && kwcount > extracted) {\n+        if (ignore_unknown_kwargs) {\n+            // Make sure the remaining kwargs are not duplicate posargs.\n+            failed = __Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name) == -1;\n+        } else {\n+            // Any remaining kwarg is an error.\n+            __Pyx_RejectUnknownKeyword(kwds, argnames, first_kw_arg, function_name);",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1972374427",
            "id": 1972374427,
            "line": 544,
            "node_id": "PRRC_kwDOABDGAc51kAub",
            "original_commit_id": "b049ca3a1bb802351baf943cfec7e69e343974d7",
            "original_line": 581,
            "original_position": 349,
            "original_start_line": null,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": 547,
            "pull_request_review_id": 2645820439,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972374427/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-26T20:38:42Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972374427",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1972394475"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1972394475"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    // We use 'kwds2' as sentinel value to dict.pop() to avoid an exception on missing key.\r\n```",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-26T20:53:54Z",
            "diff_hunk": "@@ -250,60 +278,427 @@ static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues\n //\n //  This method does not check for required keyword arguments.\n \n-static int __Pyx_ParseOptionalKeywords(\n+static int __Pyx_ValidateDuplicatePosArgs(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char* function_name)\n+{\n+    PyObject ** const *name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *key = **name;\n+        int found = PyDict_Contains(kwds, key);\n+        if (unlikely(found)) {\n+            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+            goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+bad:\n+    return -1;\n+}\n+\n+#if CYTHON_USE_UNICODE_INTERNALS\n+static CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {\n+    int kind;\n+    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);\n+    if (len != PyUnicode_GET_LENGTH(s2)) return 0;\n+\n+    kind = PyUnicode_KIND(s1);\n+    if (kind != PyUnicode_KIND(s2)) return 0;\n+\n+    const void *data1 = PyUnicode_DATA(s1);\n+    const void *data2 = PyUnicode_DATA(s2);\n+    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);\n+}\n+#endif\n+\n+static int __Pyx_MatchKeywordArg_str(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    PyObject ** const *name;\n+    #if CYTHON_USE_UNICODE_INTERNALS\n+    // The key hash is probably pre-calculated.\n+    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;\n+    if (unlikely(key_hash == -1)) {\n+        key_hash = PyObject_Hash(key);\n+        if (unlikely(key_hash == -1))\n+            goto bad;\n+    }\n+    #endif\n+\n+    // Compare strings for non-interned matches.\n+    name = first_kw_arg;\n+    while (*name) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        // The hash value of our interned argument name is definitely pre-calculated.\n+        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) {\n+                *index_found = (size_t) (name - argnames);\n+                return 1;\n+            }\n+        }\n+        #endif\n+        name++;\n+    }\n+\n+    // Not found in keyword parameters, check for (unlikely) duplicate positional argument.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        PyObject *name_str = **name;\n+\n+        #if CYTHON_USE_UNICODE_INTERNALS\n+        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {\n+            if (__Pyx_UnicodeKeywordsEqual(name_str, key))\n+                goto arg_passed_twice;\n+        }\n+\n+        #else\n+\n+        #if CYTHON_ASSUME_SAFE_SIZE\n+        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))\n+        #endif\n+        {\n+            if (unlikely(name_str == key)) goto arg_passed_twice;\n+            int cmp = PyUnicode_Compare(name_str, key);\n+            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n+            if (cmp == 0) goto arg_passed_twice;\n+        }\n+\n+        #endif\n+        name++;\n+    }\n+\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static int __Pyx_MatchKeywordArg_nostr(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Conservatively handle str subclasses.\n+    PyObject ** const *name;\n+\n+    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;\n+\n+    // Match keyword argument names.\n+    name = first_kw_arg;\n+    while (*name) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (cmp == 1) {\n+            *index_found = (size_t) (name - argnames);\n+            return 1;\n+        }\n+        if (unlikely(cmp == -1)) goto bad;\n+        name++;\n+    }\n+    // Reject collisions with positional arguments.\n+    name = argnames;\n+    while (name != first_kw_arg) {\n+        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);\n+        if (unlikely(cmp != 0)) {\n+            if (cmp == 1) goto arg_passed_twice;\n+            else goto bad;\n+        }\n+        name++;\n+    }\n+    return 0;\n+\n+arg_passed_twice:\n+    __Pyx_RaiseDoubleKeywordsError(function_name, key);\n+    goto bad;\n+invalid_keyword_type:\n+    PyErr_Format(PyExc_TypeError,\n+        \"%.200s() keywords must be strings\", function_name);\n+    goto bad;\n+bad:\n+    return -1;\n+}\n+\n+static CYTHON_INLINE int __Pyx_MatchKeywordArg(\n+    PyObject *key,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    size_t *index_found,\n+    const char *function_name)\n+{\n+    // Optimise for plain str behaviour.\n+    return likely(PyUnicode_CheckExact(key)) ?\n+        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :\n+        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);\n+}\n+\n+static void __Pyx_RejectUnknownKeyword(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject ** const *first_kw_arg,\n+    const char *function_name)\n+{\n+    // Find the first unknown keyword and raise an error. There must be at least one.\n+    Py_ssize_t pos = 0;\n+    PyObject *key = NULL;\n+\n+    while (PyDict_Next(kwds, &pos, &key, NULL)) {\n+        // Quickly exclude the 'obviously' valid/known keyword arguments (exact pointer match).\n+        PyObject** const *name = first_kw_arg;\n+        while (*name && (**name != key)) name++;\n+\n+        if (!*name) {\n+            // No exact match found:\n+            // compare against positional (always reject) and keyword (reject unknown) names.\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_INCREF(key);\n+            #endif\n+\n+            size_t index_found = 0;\n+            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);\n+            if (cmp != 1) {\n+                if (cmp == 0) {\n+                    PyErr_Format(PyExc_TypeError,\n+                        \"%s() got an unexpected keyword argument '%U'\",\n+                        function_name, key);\n+                }\n+                #if CYTHON_AVOID_BORROWED_REFS\n+                Py_DECREF(key);\n+                #endif\n+\n+                break;\n+            }\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            Py_DECREF(key);\n+            #endif\n+        }\n+    }\n+\n+    assert(PyErr_Occurred());\n+}\n+\n+static int __Pyx_ParseKeywordDict(\n+    PyObject *kwds,\n+    PyObject ** const argnames[],\n+    PyObject *values[],\n+    Py_ssize_t num_pos_args,\n+    const char* function_name,\n+    int ignore_unknown_kwargs)\n+{\n+    PyObject** const *name;\n+    PyObject** const *first_kw_arg = argnames + num_pos_args;\n+    Py_ssize_t kwcount, extracted = 0;\n+    int failed = 0;\n+\n+    // Check if dict is unicode-keys-only and let Python set the error otherwise.\n+    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;\n+\n+    #if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_SIZE\n+    kwcount = PyDict_GET_SIZE(kwds);\n+    #else\n+    kwcount = PyDict_Size(kwds);\n+    if (unlikely(kwcount < 0)) return -1;\n+    #endif\n+\n+    // Extract declared keyword arguments.\n+    __Pyx_BEGIN_CRITICAL_SECTION(kwds);\n+    name = first_kw_arg;\n+    while (*name && kwcount > extracted) {\n+        PyObject * key = **name;\n+        PyObject *value;\n+        int found;\n+\n+        #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n+        found = PyDict_GetItemRef(kwds, key, &value);\n+        #else\n+        // There isn't a good way to make this thread-safe before Py3.13.\n+        // PyObject_GetItem() would generate lots of expensive KeyErrors.\n+        // PyDict_Next() returns borrowed references.\n+        value = PyDict_GetItemWithError(kwds, key);\n+        if (value) {\n+            Py_INCREF(value);\n+        } else {\n+            if (unlikely(PyErr_Occurred())) {\n+                failed = 1;\n+                break;\n+            };\n+        }\n+        found = value != NULL;\n+        #endif\n+\n+        if (found) {\n+            if (unlikely(found < 0)) {\n+                failed = 1;\n+                break;\n+            };\n+            values[name-argnames] = value;\n+            extracted++;\n+        }\n+\n+        #if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_SIZE\n+        kwcount = PyDict_GET_SIZE(kwds);\n+        #else\n+        kwcount = PyDict_Size(kwds);\n+        if (unlikely(kwcount < 0)) {\n+            failed = 1;\n+            break;\n+        };\n+        #endif\n+\n+        name++;\n+    }\n+\n+    if (!failed && kwcount > extracted) {\n+        if (ignore_unknown_kwargs) {\n+            // Make sure the remaining kwargs are not duplicate posargs.\n+            failed = __Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name) == -1;\n+        } else {\n+            // Any remaining kwarg is an error.\n+            __Pyx_RejectUnknownKeyword(kwds, argnames, first_kw_arg, function_name);\n+            failed = 1;\n+        }\n+    }\n+    __Pyx_END_CRITICAL_SECTION();\n+\n+    return unlikely(failed) ? -1 : 0;\n+}\n+\n+static int __Pyx_ParseKeywordDictToDict(\n     PyObject *kwds,\n-    PyObject *const *kwvalues,\n-    PyObject **argnames[],\n+    PyObject ** const argnames[],\n     PyObject *kwds2,\n     PyObject *values[],\n     Py_ssize_t num_pos_args,\n     const char* function_name)\n {\n-    PyObject *key = 0, *value = 0;\n-    Py_ssize_t pos = 0;\n-    PyObject*** name;\n-    PyObject*** first_kw_arg = argnames + num_pos_args;\n-    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));\n+    // Validate and parse keyword arguments from kwds dict.\n+    PyObject** const *name;\n+    PyObject** const *first_kw_arg = argnames + num_pos_args;\n+    Py_ssize_t len;\n+\n+    // Check if dict is unicode-keys-only and let Python set the error otherwise.\n+    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;\n+\n+    // Fast copy of all kwargs.\n+    if (PyDict_Update(kwds2, kwds) < 0) goto bad;\n+\n+    // Extract declared keyword arguments (if any).\n+    name = first_kw_arg;\n+    while (*name) {\n+        PyObject *key = **name;\n+        PyObject *value;\n+\n+#if !CYTHON_COMPILING_IN_LIMITED_API && (PY_VERSION_HEX >= 0x030d00A2 || defined(PyDict_Pop))\n+        int found = PyDict_Pop(kwds2, key, &value);\n+        if (found) {\n+            if (unlikely(found < 0)) goto bad;\n+            values[name-argnames] = value;\n+        }\n+#elif __PYX_LIMITED_VERSION_HEX >= 0x030d0000\n+        int found = PyDict_GetItemRef(kwds2, key, &value);\n+        if (found) {\n+            if (unlikely(found < 0)) goto bad;\n+            values[name-argnames] = value;\n+            if (unlikely(PyDict_DelItem(kwds2, key) < 0)) goto bad;\n+        }\n+#else\n+    // We use 'kdws2' as sentinel value to dict.pop() to avoid an exception on missing key.",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1972394475",
            "id": 1972394475,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51kFnr",
            "original_commit_id": "b049ca3a1bb802351baf943cfec7e69e343974d7",
            "original_line": 629,
            "original_position": 404,
            "original_start_line": null,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2645908517,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972394475/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-26T20:53:55Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972394475",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1972413457"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1972413457"
                }
            },
            "author_association": "MEMBER",
            "body": "This function is now unused (so may as well be deleted)",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-26T21:07:25Z",
            "diff_hunk": "@@ -4446,104 +4467,22 @@ def generate_keyword_unpacking_code(self, min_positional_args, max_positional_ar\n \n         # The code above is very often (but not always) the same as\n         # the optimised non-kwargs tuple unpacking code, so we keep\n-        # the code block above at the very top, before the following\n-        # 'external' PyDict_Size() call, to make it easy for the C\n+        # the code block above at the very top, to make it easy for the C\n         # compiler to merge the two separate tuple unpacking\n         # implementations into one when they turn out to be identical.\n \n-        # If we received kwargs, fill up the positional/required\n-        # arguments with values from the kw dict\n-        self_name_csafe = self.name.as_c_string_literal()\n+    def generate_keyword_unpacking_code(self, max_positional_args, all_args, code):\n \n-        code.putln('kw_args = __Pyx_NumKwargs_%s(%s);' % (\n-                self.signature.fastvar, Naming.kwds_cname))\n-        if self.num_required_args or max_positional_args > 0:\n-            last_required_arg = -1\n-            for i, arg in enumerate(all_args):\n-                if not arg.default:\n-                    last_required_arg = i\n-            if last_required_arg < max_positional_args:\n-                last_required_arg = max_positional_args-1\n-            if max_positional_args > num_pos_only_args:\n-                code.putln('switch (%s) {' % Naming.nargs_cname)\n-            for i, arg in enumerate(all_args[num_pos_only_args:last_required_arg+1], num_pos_only_args):\n-                if max_positional_args > num_pos_only_args and i <= max_positional_args:\n-                    if i != num_pos_only_args:\n-                        code.putln('CYTHON_FALLTHROUGH;')\n-                    if self.star_arg and i == max_positional_args:\n-                        code.putln('default:')\n-                    else:\n-                        code.putln('case %2d:' % i)\n-                pystring_cname = code.intern_identifier(arg.entry.name)\n-                if arg.default:\n-                    if arg.kw_only:\n-                        # optional kw-only args are handled separately below\n-                        continue\n-                    code.putln('if (kw_args > 0) {')\n-                    # don't overwrite default argument\n-                    code.putln('PyObject* value = __Pyx_GetKwValue_%s(%s, %s, %s);' % (\n-                        self.signature.fastvar, Naming.kwds_cname, Naming.kwvalues_cname, pystring_cname))\n-                    code.putln('if (value) {')\n-                    code.putln('__Pyx_Arg_XDECREF_%s(values[%d]);' % (\n-                        self.signature.fastvar, i))\n-                    code.putln('values[%d] = __Pyx_Arg_NewRef_%s(value); kw_args--;' % (\n-                        i, self.signature.fastvar))\n-                    code.putln('}')\n-                    code.putln('else if (unlikely(PyErr_Occurred())) %s' % code.error_goto(self.pos))\n-                    code.putln('}')\n-                else:\n-                    # no arg default - no need to decref values[%d]\n-                    code.putln('if (likely((values[%d] = __Pyx_GetKwValue_%s(%s, %s, %s)) != 0)) {' % (\n-                        i, self.signature.fastvar, Naming.kwds_cname, Naming.kwvalues_cname, pystring_cname))\n-                    code.putln('(void)__Pyx_Arg_NewRef_%s(values[%d]);' % (self.signature.fastvar, i))\n-                    code.putln('kw_args--;')\n-                    code.putln('}')\n-                    code.putln('else if (unlikely(PyErr_Occurred())) %s' % code.error_goto(self.pos))\n-                    if i < min_positional_args:\n-                        if i == 0:\n-                            # special case: we know arg 0 is missing\n-                            code.put('else ')\n-                            code.put_goto(argtuple_error_label)\n-                        else:\n-                            # print the correct number of values (args or\n-                            # kwargs) that were passed into positional\n-                            # arguments up to this point\n-                            code.putln('else {')\n-                            code.globalstate.use_utility_code(\n-                                UtilityCode.load_cached(\"RaiseArgTupleInvalid\", \"FunctionArguments.c\"))\n-                            code.put('__Pyx_RaiseArgtupleInvalid(%s, %d, %d, %d, %d); ' % (\n-                                self_name_csafe, has_fixed_positional_count,\n-                                min_positional_args, max_positional_args, i))\n-                            code.putln(code.error_goto(self.pos))\n-                            code.putln('}')\n-                    elif arg.kw_only:\n-                        code.putln('else {')\n-                        code.globalstate.use_utility_code(\n-                            UtilityCode.load_cached(\"RaiseKeywordRequired\", \"FunctionArguments.c\"))\n-                        code.put('__Pyx_RaiseKeywordRequired(%s, %s); ' % (\n-                            self_name_csafe, pystring_cname))\n-                        code.putln(code.error_goto(self.pos))\n-                        code.putln('}')\n-            if max_positional_args > num_pos_only_args:\n-                code.putln('}')\n-\n-        if has_kw_only_args:\n-            # unpack optional keyword-only arguments separately because\n-            # checking for interned strings in a dict is faster than iterating\n-            self.generate_optional_kwonly_args_unpacking_code(all_args, code)",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1972413457",
            "id": 1972413457,
            "line": 4533,
            "node_id": "PRRC_kwDOABDGAc51kKQR",
            "original_commit_id": "b049ca3a1bb802351baf943cfec7e69e343974d7",
            "original_line": 4533,
            "original_position": 274,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": 602,
            "pull_request_review_id": 2645939525,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972413457/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-26T21:07:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972413457",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1972468867"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1972468867"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think `__Pyx_ParseKeywordsTuple` is consistent with the two `Dict` variants with how it treats reference counting for the things that end up in `values`.\r\n\r\nThis version returns an owned reference if `CYTHON_AVOID_BORROWED_REFS` and a borrowed reference otherwise.\r\n\r\nThe two `Dict` versions always fill `values` with owned references.\r\n\r\nThe code that calls these uses `__Pyx_Arg_NewRef_*` and `__Pyx_Arg_XDECREF_*` which works on this basis of \"owned references if `CYTHON_AVOID_BORROWED_REFS` and borrowed references otherwise (although honestly that's a bit ugly and I wouldn't mind if that changes).\r\n\r\nThe existing behaviour also suggests that we believe that the dict that's passed to a function call in is not mutable from anywhere else given that we think borrowed references are sufficient.",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-02-26T21:48:29Z",
            "diff_hunk": "@@ -323,70 +718,58 @@ static int __Pyx_ParseOptionalKeywords(\n #endif\n         Py_INCREF(value);\n \n-        name = first_kw_arg;\n-        if (likely(PyUnicode_Check(key))) {\n-            while (*name) {\n-                int cmp = (\n-                #if CYTHON_ASSUME_SAFE_SIZE\n-                    (PyUnicode_GET_LENGTH(**name) != PyUnicode_GET_LENGTH(key)) ? 1 :\n-                #endif\n-                    PyUnicode_Compare(**name, key)\n-                );\n-                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n-                if (cmp == 0) {\n-                    values[name-argnames] = value;\n-#if CYTHON_AVOID_BORROWED_REFS\n-                    value = NULL;  /* ownership transferred to values */\n-#endif\n-                    break;\n-                }\n-                name++;\n-            }\n-            if (*name) continue;\n-            else {\n-                // not found after positional args, check for duplicate\n-                PyObject*** argname = argnames;\n-                while (argname != first_kw_arg) {\n-                    int cmp = (**argname == key) ? 0 :\n-                    #if CYTHON_ASSUME_SAFE_SIZE\n-                        (PyUnicode_GET_LENGTH(**argname) != PyUnicode_GET_LENGTH(key)) ? 1 :\n-                    #endif\n-                        // need to convert argument name from bytes to unicode for comparison\n-                        PyUnicode_Compare(**argname, key);\n-                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;\n-                    if (cmp == 0) goto arg_passed_twice;\n-                    argname++;\n-                }\n-            }\n-        } else\n-            goto invalid_keyword_type;\n+        size_t index_found = 0;\n+        int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);\n+\n+        if (cmp == 1) {\n+            values[index_found] = value;\n+            #if CYTHON_AVOID_BORROWED_REFS\n+            value = NULL;  /* ownership transferred to values */\n+            #endif",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1972468867",
            "id": 1972468867,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc51kXyD",
            "original_commit_id": "b049ca3a1bb802351baf943cfec7e69e343974d7",
            "original_line": 728,
            "original_position": 557,
            "original_start_line": 725,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 2646028330,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972468867/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-26T21:48:29Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1972468867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6684#discussion_r1976614975"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6684"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1976614975"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this can be `Py_DECREF` on the regular (good) exit path and only needs to be `XDECREF` on the error path. May be worthwhile but probably isn't really necessary.",
            "commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "created_at": "2025-03-02T12:24:39Z",
            "diff_hunk": "@@ -4375,62 +4434,50 @@ def generate_argument_values_setup_code(self, args, code, decl_code):\n                 self.target.defaults_struct, Naming.dynamic_args_cname,\n                 self.target.defaults_struct, Naming.self_cname))\n \n-        # assign (usually borrowed) Python default values to the values array,\n-        # so that they can be overwritten by received arguments below\n+    def generate_argument_defaults_assignment_code(self, args, code):\n+        # Assign the default values to the empty entries of the 'values' array.\n         for i, arg in enumerate(args):\n             if arg.default and arg.type.is_pyobject:\n                 default_value = arg.calculate_default_value_code(code)\n-                code.putln('values[%d] = __Pyx_Arg_NewRef_%s(%s);' % (\n-                    i, self.signature.fastvar, arg.type.as_pyobject(default_value)))\n+                code.putln(f'if (!values[{i}]) values[{i}] = __Pyx_NewRef({arg.type.as_pyobject(default_value)});')\n \n     def generate_argument_values_cleanup_code(self, code):\n         if not self.needs_values_cleanup:\n             return\n         # The 'values' array may not be borrowed depending on the compilation options.\n         # This cleans it up in the case it isn't borrowed\n         loop_var = Naming.quick_temp_cname\n-        code.putln(\"{\")\n-        code.putln(\"Py_ssize_t %s;\" % loop_var)\n-        code.putln(\"for (%s=0; %s < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++%s) {\" % (\n-            loop_var, loop_var, loop_var))\n-        code.putln(\"__Pyx_Arg_XDECREF_%s(values[%s]);\" % (self.signature.fastvar, loop_var))\n-        code.putln(\"}\")\n+        code.putln(f\"for (Py_ssize_t {loop_var}=0; {loop_var} < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++{loop_var}) {{\")\n+        code.putln(f\"Py_XDECREF(values[{loop_var}]);\")",
            "html_url": "https://github.com/cython/cython/pull/6684#discussion_r1976614975",
            "id": 1976614975,
            "line": 4451,
            "node_id": "PRRC_kwDOABDGAc510MA_",
            "original_commit_id": "d41026ba19cb251a436890ceb3675f5720768a64",
            "original_line": 4451,
            "original_position": 459,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": 459,
            "pull_request_review_id": 2652709561,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6684",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1976614975/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-02T12:48:33Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1976614975",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6684/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/934ea152880048673974ddd2133a5c0dd416cc70/comments",
            "commit": {
                "author": {
                    "date": "2025-02-19T11:46:12Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-19T11:46:12Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Avoid calling PyUnicode_Compare() when validating keyword arguments.\nMost of the time the precalculated hashes will already be different.\n\nCloses https://github.com/cython/cython/issues/6683",
                "tree": {
                    "sha": "96567a65b8f5e0758e113cfe136e3f5d136d965b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/96567a65b8f5e0758e113cfe136e3f5d136d965b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/934ea152880048673974ddd2133a5c0dd416cc70",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/934ea152880048673974ddd2133a5c0dd416cc70",
            "node_id": "C_kwDOACXZ0toAKDkzNGVhMTUyODgwMDQ4NjczOTc0ZGRkMjEzM2E1YzBkZDQxNmNjNzA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4c3b5ecaad9215989c34b3f501163b2f1a8391d8",
                    "sha": "4c3b5ecaad9215989c34b3f501163b2f1a8391d8",
                    "url": "https://api.github.com/repos/cython/cython/commits/4c3b5ecaad9215989c34b3f501163b2f1a8391d8"
                }
            ],
            "sha": "934ea152880048673974ddd2133a5c0dd416cc70",
            "url": "https://api.github.com/repos/cython/cython/commits/934ea152880048673974ddd2133a5c0dd416cc70"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e6fc11030ee0ccc3c6d86362f96340755ebd1b2a/comments",
            "commit": {
                "author": {
                    "date": "2025-02-19T21:01:18Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-19T21:01:18Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Refactor to move hash test before length test because it tends to be more selective.",
                "tree": {
                    "sha": "c53aeb93af956d8aee549e1fac743e825419da17",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c53aeb93af956d8aee549e1fac743e825419da17"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e6fc11030ee0ccc3c6d86362f96340755ebd1b2a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/e6fc11030ee0ccc3c6d86362f96340755ebd1b2a",
            "node_id": "C_kwDOACXZ0toAKGU2ZmMxMTAzMGVlMGNjYzNjNmQ4NjM2MmY5NjM0MDc1NWViZDFiMmE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/934ea152880048673974ddd2133a5c0dd416cc70",
                    "sha": "934ea152880048673974ddd2133a5c0dd416cc70",
                    "url": "https://api.github.com/repos/cython/cython/commits/934ea152880048673974ddd2133a5c0dd416cc70"
                }
            ],
            "sha": "e6fc11030ee0ccc3c6d86362f96340755ebd1b2a",
            "url": "https://api.github.com/repos/cython/cython/commits/e6fc11030ee0ccc3c6d86362f96340755ebd1b2a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/160222d0fc68bc790eeae3bee96d9f5b2faa762f/comments",
            "commit": {
                "author": {
                    "date": "2025-02-19T21:23:51Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-19T21:23:51Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Remove the length check after the hash check since it will almost always succeed there.",
                "tree": {
                    "sha": "5b6ef64813f510fb149554f8808205201b7542f0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5b6ef64813f510fb149554f8808205201b7542f0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/160222d0fc68bc790eeae3bee96d9f5b2faa762f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/160222d0fc68bc790eeae3bee96d9f5b2faa762f",
            "node_id": "C_kwDOACXZ0toAKDE2MDIyMmQwZmM2OGJjNzkwZWVhZTNiZWU5NmQ5ZjViMmZhYTc2MmY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e6fc11030ee0ccc3c6d86362f96340755ebd1b2a",
                    "sha": "e6fc11030ee0ccc3c6d86362f96340755ebd1b2a",
                    "url": "https://api.github.com/repos/cython/cython/commits/e6fc11030ee0ccc3c6d86362f96340755ebd1b2a"
                }
            ],
            "sha": "160222d0fc68bc790eeae3bee96d9f5b2faa762f",
            "url": "https://api.github.com/repos/cython/cython/commits/160222d0fc68bc790eeae3bee96d9f5b2faa762f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a0702919697e67702dba1214a209b080ee9886f4/comments",
            "commit": {
                "author": {
                    "date": "2025-02-20T10:00:37Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-20T10:11:09Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Add separate implementation for dict-to-dict copying case with **kwargs.",
                "tree": {
                    "sha": "b06ef5e444d25e717fa7c23867c8cb6b4dd04d19",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b06ef5e444d25e717fa7c23867c8cb6b4dd04d19"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a0702919697e67702dba1214a209b080ee9886f4",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/a0702919697e67702dba1214a209b080ee9886f4",
            "node_id": "C_kwDOACXZ0toAKGEwNzAyOTE5Njk3ZTY3NzAyZGJhMTIxNGEyMDliMDgwZWU5ODg2ZjQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/160222d0fc68bc790eeae3bee96d9f5b2faa762f",
                    "sha": "160222d0fc68bc790eeae3bee96d9f5b2faa762f",
                    "url": "https://api.github.com/repos/cython/cython/commits/160222d0fc68bc790eeae3bee96d9f5b2faa762f"
                }
            ],
            "sha": "a0702919697e67702dba1214a209b080ee9886f4",
            "url": "https://api.github.com/repos/cython/cython/commits/a0702919697e67702dba1214a209b080ee9886f4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4f5d35c3e06966917e3decf902206e092cff986d/comments",
            "commit": {
                "author": {
                    "date": "2025-02-20T10:28:09Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-20T10:28:09Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Use PyUnicode_RichCompare() instead of PyUnicode_Compare() since it appears to have a tiny speed advantage.",
                "tree": {
                    "sha": "b8b8fc03d0685b8033aa5b3dbc88d35aaa95d039",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b8b8fc03d0685b8033aa5b3dbc88d35aaa95d039"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4f5d35c3e06966917e3decf902206e092cff986d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/4f5d35c3e06966917e3decf902206e092cff986d",
            "node_id": "C_kwDOACXZ0toAKDRmNWQzNWMzZTA2OTY2OTE3ZTNkZWNmOTAyMjA2ZTA5MmNmZjk4NmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a0702919697e67702dba1214a209b080ee9886f4",
                    "sha": "a0702919697e67702dba1214a209b080ee9886f4",
                    "url": "https://api.github.com/repos/cython/cython/commits/a0702919697e67702dba1214a209b080ee9886f4"
                }
            ],
            "sha": "4f5d35c3e06966917e3decf902206e092cff986d",
            "url": "https://api.github.com/repos/cython/cython/commits/4f5d35c3e06966917e3decf902206e092cff986d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/019047e5d0f6d48c079b040a3319d355fc680f4e/comments",
            "commit": {
                "author": {
                    "date": "2025-02-20T15:07:51Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-20T15:07:51Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Use low-level Unicode string comparison in CPython.",
                "tree": {
                    "sha": "f252f2c5f1ed2212884b453ad6614ef78da9c255",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f252f2c5f1ed2212884b453ad6614ef78da9c255"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/019047e5d0f6d48c079b040a3319d355fc680f4e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/019047e5d0f6d48c079b040a3319d355fc680f4e",
            "node_id": "C_kwDOACXZ0toAKDAxOTA0N2U1ZDBmNmQ0OGMwNzliMDQwYTMzMTlkMzU1ZmM2ODBmNGU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4f5d35c3e06966917e3decf902206e092cff986d",
                    "sha": "4f5d35c3e06966917e3decf902206e092cff986d",
                    "url": "https://api.github.com/repos/cython/cython/commits/4f5d35c3e06966917e3decf902206e092cff986d"
                }
            ],
            "sha": "019047e5d0f6d48c079b040a3319d355fc680f4e",
            "url": "https://api.github.com/repos/cython/cython/commits/019047e5d0f6d48c079b040a3319d355fc680f4e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/785ea609c7da82e852e1a370c969d01a1aee0171/comments",
            "commit": {
                "author": {
                    "date": "2025-02-20T21:38:04Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-20T21:38:04Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Fix loop.",
                "tree": {
                    "sha": "53f3c9812b24d62b88636325f53a954699bdb8de",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/53f3c9812b24d62b88636325f53a954699bdb8de"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/785ea609c7da82e852e1a370c969d01a1aee0171",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/785ea609c7da82e852e1a370c969d01a1aee0171",
            "node_id": "C_kwDOACXZ0toAKDc4NWVhNjA5YzdkYTgyZTg1MmUxYTM3MGM5NjlkMDFhMWFlZTAxNzE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/019047e5d0f6d48c079b040a3319d355fc680f4e",
                    "sha": "019047e5d0f6d48c079b040a3319d355fc680f4e",
                    "url": "https://api.github.com/repos/cython/cython/commits/019047e5d0f6d48c079b040a3319d355fc680f4e"
                }
            ],
            "sha": "785ea609c7da82e852e1a370c969d01a1aee0171",
            "url": "https://api.github.com/repos/cython/cython/commits/785ea609c7da82e852e1a370c969d01a1aee0171"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9c1aaa49c5cbdf73fc2e6f243bc06a383e71fcf7/comments",
            "commit": {
                "author": {
                    "date": "2025-02-21T08:50:37Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-21T08:50:37Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Only check for duplicate positional arguments if not all kwargs could be matched to keyword parameters.",
                "tree": {
                    "sha": "da248f4cc0fdc09619d504c6bf9afb9fe5050ec1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/da248f4cc0fdc09619d504c6bf9afb9fe5050ec1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9c1aaa49c5cbdf73fc2e6f243bc06a383e71fcf7",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/9c1aaa49c5cbdf73fc2e6f243bc06a383e71fcf7",
            "node_id": "C_kwDOACXZ0toAKDljMWFhYTQ5YzVjYmRmNzNmYzJlNmYyNDNiYzA2YTM4M2U3MWZjZjc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/785ea609c7da82e852e1a370c969d01a1aee0171",
                    "sha": "785ea609c7da82e852e1a370c969d01a1aee0171",
                    "url": "https://api.github.com/repos/cython/cython/commits/785ea609c7da82e852e1a370c969d01a1aee0171"
                }
            ],
            "sha": "9c1aaa49c5cbdf73fc2e6f243bc06a383e71fcf7",
            "url": "https://api.github.com/repos/cython/cython/commits/9c1aaa49c5cbdf73fc2e6f243bc06a383e71fcf7"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/06d3bf6f51d6f579bed4a8ab228e87ec712fa782/comments",
            "commit": {
                "author": {
                    "date": "2025-02-21T09:25:24Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-21T09:25:24Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Avoid creating **kwargs dict and *args tuple if their user space variable is unused.",
                "tree": {
                    "sha": "de53ced67bb124f1e210553550d1f58d8685cc10",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/de53ced67bb124f1e210553550d1f58d8685cc10"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/06d3bf6f51d6f579bed4a8ab228e87ec712fa782",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/06d3bf6f51d6f579bed4a8ab228e87ec712fa782",
            "node_id": "C_kwDOACXZ0toAKDA2ZDNiZjZmNTFkNmY1NzliZWQ0YThhYjIyOGU4N2VjNzEyZmE3ODI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9c1aaa49c5cbdf73fc2e6f243bc06a383e71fcf7",
                    "sha": "9c1aaa49c5cbdf73fc2e6f243bc06a383e71fcf7",
                    "url": "https://api.github.com/repos/cython/cython/commits/9c1aaa49c5cbdf73fc2e6f243bc06a383e71fcf7"
                }
            ],
            "sha": "06d3bf6f51d6f579bed4a8ab228e87ec712fa782",
            "url": "https://api.github.com/repos/cython/cython/commits/06d3bf6f51d6f579bed4a8ab228e87ec712fa782"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fa818d4b7fd0845c76246fb7669eb15741db515c/comments",
            "commit": {
                "author": {
                    "date": "2025-02-21T09:42:14Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-21T09:42:31Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Fix accidental code duplication.",
                "tree": {
                    "sha": "ac6f1a84653e8c702efab98e78bb812c481bc3d8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ac6f1a84653e8c702efab98e78bb812c481bc3d8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fa818d4b7fd0845c76246fb7669eb15741db515c",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/fa818d4b7fd0845c76246fb7669eb15741db515c",
            "node_id": "C_kwDOACXZ0toAKGZhODE4ZDRiN2ZkMDg0NWM3NjI0NmZiNzY2OWViMTU3NDFkYjUxNWM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/06d3bf6f51d6f579bed4a8ab228e87ec712fa782",
                    "sha": "06d3bf6f51d6f579bed4a8ab228e87ec712fa782",
                    "url": "https://api.github.com/repos/cython/cython/commits/06d3bf6f51d6f579bed4a8ab228e87ec712fa782"
                }
            ],
            "sha": "fa818d4b7fd0845c76246fb7669eb15741db515c",
            "url": "https://api.github.com/repos/cython/cython/commits/fa818d4b7fd0845c76246fb7669eb15741db515c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/63a7ae5350a6479d469024696188084ec07ce6df/comments",
            "commit": {
                "author": {
                    "date": "2025-02-21T11:39:34Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-21T11:39:34Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Special-case the \"dict + dict\" case in \"__Pyx_MergeKeywords()\".",
                "tree": {
                    "sha": "36bc84f5114b4ab2c6a7ce2273fb087c04543c24",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/36bc84f5114b4ab2c6a7ce2273fb087c04543c24"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/63a7ae5350a6479d469024696188084ec07ce6df",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/63a7ae5350a6479d469024696188084ec07ce6df",
            "node_id": "C_kwDOACXZ0toAKDYzYTdhZTUzNTBhNjQ3OWQ0NjkwMjQ2OTYxODgwODRlYzA3Y2U2ZGY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fa818d4b7fd0845c76246fb7669eb15741db515c",
                    "sha": "fa818d4b7fd0845c76246fb7669eb15741db515c",
                    "url": "https://api.github.com/repos/cython/cython/commits/fa818d4b7fd0845c76246fb7669eb15741db515c"
                }
            ],
            "sha": "63a7ae5350a6479d469024696188084ec07ce6df",
            "url": "https://api.github.com/repos/cython/cython/commits/63a7ae5350a6479d469024696188084ec07ce6df"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/adddd47160ac92c25d00bcca855784f24342738f/comments",
            "commit": {
                "author": {
                    "date": "2025-02-21T15:40:18Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-21T15:40:18Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Remove unused function argument.",
                "tree": {
                    "sha": "c7d65ab62c3b7794a0fbb017afdc96bd1bbfdee2",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c7d65ab62c3b7794a0fbb017afdc96bd1bbfdee2"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/adddd47160ac92c25d00bcca855784f24342738f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/adddd47160ac92c25d00bcca855784f24342738f",
            "node_id": "C_kwDOACXZ0toAKGFkZGRkNDcxNjBhYzkyYzI1ZDAwYmNjYTg1NTc4NGYyNDM0MjczOGY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/63a7ae5350a6479d469024696188084ec07ce6df",
                    "sha": "63a7ae5350a6479d469024696188084ec07ce6df",
                    "url": "https://api.github.com/repos/cython/cython/commits/63a7ae5350a6479d469024696188084ec07ce6df"
                }
            ],
            "sha": "adddd47160ac92c25d00bcca855784f24342738f",
            "url": "https://api.github.com/repos/cython/cython/commits/adddd47160ac92c25d00bcca855784f24342738f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9de868180e6052a4b70c21d3927a3faf68c261b5/comments",
            "commit": {
                "author": {
                    "date": "2025-02-21T16:18:40Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-21T16:18:40Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Stick to setting unused **kwargs to NULL and exclude *args since it crashes in PyPy (and is thus probably not safe as is).",
                "tree": {
                    "sha": "14fe16ebd016aa0fac00a57fa2eb8f27669ccd1e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/14fe16ebd016aa0fac00a57fa2eb8f27669ccd1e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9de868180e6052a4b70c21d3927a3faf68c261b5",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/9de868180e6052a4b70c21d3927a3faf68c261b5",
            "node_id": "C_kwDOACXZ0toAKDlkZTg2ODE4MGU2MDUyYTRiNzBjMjFkMzkyN2EzZmFmNjhjMjYxYjU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/adddd47160ac92c25d00bcca855784f24342738f",
                    "sha": "adddd47160ac92c25d00bcca855784f24342738f",
                    "url": "https://api.github.com/repos/cython/cython/commits/adddd47160ac92c25d00bcca855784f24342738f"
                }
            ],
            "sha": "9de868180e6052a4b70c21d3927a3faf68c261b5",
            "url": "https://api.github.com/repos/cython/cython/commits/9de868180e6052a4b70c21d3927a3faf68c261b5"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d5aa3b2d8aed9dc7123e114612b1ee221950a2e0/comments",
            "commit": {
                "author": {
                    "date": "2025-02-21T17:30:06Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-21T17:30:06Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Add comment.",
                "tree": {
                    "sha": "479c7ad1d88241cc1aac801fb97d3a817159f998",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/479c7ad1d88241cc1aac801fb97d3a817159f998"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d5aa3b2d8aed9dc7123e114612b1ee221950a2e0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/d5aa3b2d8aed9dc7123e114612b1ee221950a2e0",
            "node_id": "C_kwDOACXZ0toAKGQ1YWEzYjJkOGFlZDlkYzcxMjNlMTE0NjEyYjFlZTIyMTk1MGEyZTA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9de868180e6052a4b70c21d3927a3faf68c261b5",
                    "sha": "9de868180e6052a4b70c21d3927a3faf68c261b5",
                    "url": "https://api.github.com/repos/cython/cython/commits/9de868180e6052a4b70c21d3927a3faf68c261b5"
                }
            ],
            "sha": "d5aa3b2d8aed9dc7123e114612b1ee221950a2e0",
            "url": "https://api.github.com/repos/cython/cython/commits/d5aa3b2d8aed9dc7123e114612b1ee221950a2e0"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/af9f1daf59197d726417a1ab8b81bb633a1325ff/comments",
            "commit": {
                "author": {
                    "date": "2025-02-23T09:08:22Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-23T09:08:22Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Add error handling to \"__Pyx_MergeKeywords\" and avoid the critical section and dict iteration if there is nothing to do.",
                "tree": {
                    "sha": "484bdb1c7a97551ccf0c7ae1a0236bac764a0d5f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/484bdb1c7a97551ccf0c7ae1a0236bac764a0d5f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/af9f1daf59197d726417a1ab8b81bb633a1325ff",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/af9f1daf59197d726417a1ab8b81bb633a1325ff",
            "node_id": "C_kwDOACXZ0toAKGFmOWYxZGFmNTkxOTdkNzI2NDE3YTFhYjhiODFiYjYzM2ExMzI1ZmY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d5aa3b2d8aed9dc7123e114612b1ee221950a2e0",
                    "sha": "d5aa3b2d8aed9dc7123e114612b1ee221950a2e0",
                    "url": "https://api.github.com/repos/cython/cython/commits/d5aa3b2d8aed9dc7123e114612b1ee221950a2e0"
                }
            ],
            "sha": "af9f1daf59197d726417a1ab8b81bb633a1325ff",
            "url": "https://api.github.com/repos/cython/cython/commits/af9f1daf59197d726417a1ab8b81bb633a1325ff"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b5a4b3f30fcee6732c3edfa0f7799ea5484f5c42/comments",
            "commit": {
                "author": {
                    "date": "2025-02-23T09:11:26Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-23T09:11:26Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Always use \"PyArg_ValidateKeywordArguments()\" to validate the keywords dict.",
                "tree": {
                    "sha": "870d7eef9da306adb68b9a775277cd1d871d99e3",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/870d7eef9da306adb68b9a775277cd1d871d99e3"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b5a4b3f30fcee6732c3edfa0f7799ea5484f5c42",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/b5a4b3f30fcee6732c3edfa0f7799ea5484f5c42",
            "node_id": "C_kwDOACXZ0toAKGI1YTRiM2YzMGZjZWU2NzMyYzNlZGZhMGY3Nzk5ZWE1NDg0ZjVjNDI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/af9f1daf59197d726417a1ab8b81bb633a1325ff",
                    "sha": "af9f1daf59197d726417a1ab8b81bb633a1325ff",
                    "url": "https://api.github.com/repos/cython/cython/commits/af9f1daf59197d726417a1ab8b81bb633a1325ff"
                }
            ],
            "sha": "b5a4b3f30fcee6732c3edfa0f7799ea5484f5c42",
            "url": "https://api.github.com/repos/cython/cython/commits/b5a4b3f30fcee6732c3edfa0f7799ea5484f5c42"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8a04e2193d32c1b52b8bf0ec55a693298a9a1563/comments",
            "commit": {
                "author": {
                    "date": "2025-02-23T09:32:16Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-23T09:32:16Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Add error handling to PyDict_Size() call.",
                "tree": {
                    "sha": "3655ad096e9704d77be46ba81148fbca7d1edc61",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3655ad096e9704d77be46ba81148fbca7d1edc61"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8a04e2193d32c1b52b8bf0ec55a693298a9a1563",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/8a04e2193d32c1b52b8bf0ec55a693298a9a1563",
            "node_id": "C_kwDOACXZ0toAKDhhMDRlMjE5M2QzMmMxYjUyYjhiZjBlYzU1YTY5MzI5OGE5YTE1NjM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b5a4b3f30fcee6732c3edfa0f7799ea5484f5c42",
                    "sha": "b5a4b3f30fcee6732c3edfa0f7799ea5484f5c42",
                    "url": "https://api.github.com/repos/cython/cython/commits/b5a4b3f30fcee6732c3edfa0f7799ea5484f5c42"
                }
            ],
            "sha": "8a04e2193d32c1b52b8bf0ec55a693298a9a1563",
            "url": "https://api.github.com/repos/cython/cython/commits/8a04e2193d32c1b52b8bf0ec55a693298a9a1563"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/87a1b45aba496ed0670ff8bc683ad503254f8769/comments",
            "commit": {
                "author": {
                    "date": "2025-02-24T18:22:07Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-24T18:22:07Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Remove dedicated switch-based keyword unpacking code and replace it with a generic implementation that runs over the keyword tuple/dict.\n\nThis is actually faster for the vectorcall protocol and probably not slower for the (now rarely used) keyword dict calls. It also saves a lot of special per-function C code.\n\nCloses https://github.com/cython/cython/issues/6688",
                "tree": {
                    "sha": "194c710792370000f38134c8dc141d35f4534879",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/194c710792370000f38134c8dc141d35f4534879"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/87a1b45aba496ed0670ff8bc683ad503254f8769",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/87a1b45aba496ed0670ff8bc683ad503254f8769",
            "node_id": "C_kwDOACXZ0toAKDg3YTFiNDVhYmE0OTZlZDA2NzBmZjhiYzY4M2FkNTAzMjU0Zjg3Njk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8a04e2193d32c1b52b8bf0ec55a693298a9a1563",
                    "sha": "8a04e2193d32c1b52b8bf0ec55a693298a9a1563",
                    "url": "https://api.github.com/repos/cython/cython/commits/8a04e2193d32c1b52b8bf0ec55a693298a9a1563"
                }
            ],
            "sha": "87a1b45aba496ed0670ff8bc683ad503254f8769",
            "url": "https://api.github.com/repos/cython/cython/commits/87a1b45aba496ed0670ff8bc683ad503254f8769"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/27e3001b5a0574f479f097705bd590c118c39319/comments",
            "commit": {
                "author": {
                    "date": "2025-02-24T19:37:22Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-24T19:37:22Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Explicitly reject keyword arguments in functions that do not allow them.",
                "tree": {
                    "sha": "0bf68f356077dcd527031501b2384239973fe652",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/0bf68f356077dcd527031501b2384239973fe652"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/27e3001b5a0574f479f097705bd590c118c39319",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/27e3001b5a0574f479f097705bd590c118c39319",
            "node_id": "C_kwDOACXZ0toAKDI3ZTMwMDFiNWEwNTc0ZjQ3OWYwOTc3MDViZDU5MGMxMThjMzkzMTk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/87a1b45aba496ed0670ff8bc683ad503254f8769",
                    "sha": "87a1b45aba496ed0670ff8bc683ad503254f8769",
                    "url": "https://api.github.com/repos/cython/cython/commits/87a1b45aba496ed0670ff8bc683ad503254f8769"
                }
            ],
            "sha": "27e3001b5a0574f479f097705bd590c118c39319",
            "url": "https://api.github.com/repos/cython/cython/commits/27e3001b5a0574f479f097705bd590c118c39319"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3f0b322c947a3949bb8629ddcb2e193b89c896f4/comments",
            "commit": {
                "author": {
                    "date": "2025-02-24T19:41:05Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-24T19:41:05Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Reorder code for better grouping.",
                "tree": {
                    "sha": "3ca10218d20f2d636d8cbeb125d87afecc15edc9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3ca10218d20f2d636d8cbeb125d87afecc15edc9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3f0b322c947a3949bb8629ddcb2e193b89c896f4",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/3f0b322c947a3949bb8629ddcb2e193b89c896f4",
            "node_id": "C_kwDOACXZ0toAKDNmMGIzMjJjOTQ3YTM5NDliYjg2MjlkZGNiMmUxOTNiODljODk2ZjQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/27e3001b5a0574f479f097705bd590c118c39319",
                    "sha": "27e3001b5a0574f479f097705bd590c118c39319",
                    "url": "https://api.github.com/repos/cython/cython/commits/27e3001b5a0574f479f097705bd590c118c39319"
                }
            ],
            "sha": "3f0b322c947a3949bb8629ddcb2e193b89c896f4",
            "url": "https://api.github.com/repos/cython/cython/commits/3f0b322c947a3949bb8629ddcb2e193b89c896f4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ab2f309788a42a959109805201a16ca1339f5acd/comments",
            "commit": {
                "author": {
                    "date": "2025-02-25T09:44:24Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-25T09:44:24Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Wrap long lines.",
                "tree": {
                    "sha": "bd46cd7fb13f40f0a4e5800ec3456d1d63866245",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/bd46cd7fb13f40f0a4e5800ec3456d1d63866245"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ab2f309788a42a959109805201a16ca1339f5acd",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/ab2f309788a42a959109805201a16ca1339f5acd",
            "node_id": "C_kwDOACXZ0toAKGFiMmYzMDk3ODhhNDJhOTU5MTA5ODA1MjAxYTE2Y2ExMzM5ZjVhY2Q",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3f0b322c947a3949bb8629ddcb2e193b89c896f4",
                    "sha": "3f0b322c947a3949bb8629ddcb2e193b89c896f4",
                    "url": "https://api.github.com/repos/cython/cython/commits/3f0b322c947a3949bb8629ddcb2e193b89c896f4"
                }
            ],
            "sha": "ab2f309788a42a959109805201a16ca1339f5acd",
            "url": "https://api.github.com/repos/cython/cython/commits/ab2f309788a42a959109805201a16ca1339f5acd"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9124ea38af43d6ee6328c05c02ffbf39f33fb1cc/comments",
            "commit": {
                "author": {
                    "date": "2025-02-25T13:25:09Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-25T13:25:09Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Specialise also the \"no/unused **kwargs\" case for calls with a keyword dict.",
                "tree": {
                    "sha": "94f6a8f57221b2b2c21727f472b167557acaf012",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/94f6a8f57221b2b2c21727f472b167557acaf012"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9124ea38af43d6ee6328c05c02ffbf39f33fb1cc",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/9124ea38af43d6ee6328c05c02ffbf39f33fb1cc",
            "node_id": "C_kwDOACXZ0toAKDkxMjRlYTM4YWY0M2Q2ZWU2MzI4YzA1YzAyZmZiZjM5ZjMzZmIxY2M",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ab2f309788a42a959109805201a16ca1339f5acd",
                    "sha": "ab2f309788a42a959109805201a16ca1339f5acd",
                    "url": "https://api.github.com/repos/cython/cython/commits/ab2f309788a42a959109805201a16ca1339f5acd"
                }
            ],
            "sha": "9124ea38af43d6ee6328c05c02ffbf39f33fb1cc",
            "url": "https://api.github.com/repos/cython/cython/commits/9124ea38af43d6ee6328c05c02ffbf39f33fb1cc"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e9066fee18ede3d17301e6d09d9547152fae6e71/comments",
            "commit": {
                "author": {
                    "date": "2025-02-25T13:35:55Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-25T13:35:55Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Fix bugs in non-CPython code sections.",
                "tree": {
                    "sha": "90987231fedef56428cb7d3094b6d4726b3ccd4f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/90987231fedef56428cb7d3094b6d4726b3ccd4f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e9066fee18ede3d17301e6d09d9547152fae6e71",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/e9066fee18ede3d17301e6d09d9547152fae6e71",
            "node_id": "C_kwDOACXZ0toAKGU5MDY2ZmVlMThlZGUzZDE3MzAxZTZkMDlkOTU0NzE1MmZhZTZlNzE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9124ea38af43d6ee6328c05c02ffbf39f33fb1cc",
                    "sha": "9124ea38af43d6ee6328c05c02ffbf39f33fb1cc",
                    "url": "https://api.github.com/repos/cython/cython/commits/9124ea38af43d6ee6328c05c02ffbf39f33fb1cc"
                }
            ],
            "sha": "e9066fee18ede3d17301e6d09d9547152fae6e71",
            "url": "https://api.github.com/repos/cython/cython/commits/e9066fee18ede3d17301e6d09d9547152fae6e71"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2157bc706d9190cc2a0fdda34c56ce24e7a6382d/comments",
            "commit": {
                "author": {
                    "date": "2025-02-25T16:49:22Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-25T16:49:22Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Fix C conversion warning.",
                "tree": {
                    "sha": "ad2dec1b7a84155658c3f03fcdb17df6f976824c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ad2dec1b7a84155658c3f03fcdb17df6f976824c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2157bc706d9190cc2a0fdda34c56ce24e7a6382d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/2157bc706d9190cc2a0fdda34c56ce24e7a6382d",
            "node_id": "C_kwDOACXZ0toAKDIxNTdiYzcwNmQ5MTkwY2MyYTBmZGRhMzRjNTZjZTI0ZTdhNjM4MmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e9066fee18ede3d17301e6d09d9547152fae6e71",
                    "sha": "e9066fee18ede3d17301e6d09d9547152fae6e71",
                    "url": "https://api.github.com/repos/cython/cython/commits/e9066fee18ede3d17301e6d09d9547152fae6e71"
                }
            ],
            "sha": "2157bc706d9190cc2a0fdda34c56ce24e7a6382d",
            "url": "https://api.github.com/repos/cython/cython/commits/2157bc706d9190cc2a0fdda34c56ce24e7a6382d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/449312b7e8a570ba454d49f1755e8917e97c5bb0/comments",
            "commit": {
                "author": {
                    "date": "2025-02-25T16:59:28Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-25T16:59:28Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Fix critical section exit.",
                "tree": {
                    "sha": "f82e233693db05985057abe0ae05cecc70f1a63e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f82e233693db05985057abe0ae05cecc70f1a63e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/449312b7e8a570ba454d49f1755e8917e97c5bb0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/449312b7e8a570ba454d49f1755e8917e97c5bb0",
            "node_id": "C_kwDOACXZ0toAKDQ0OTMxMmI3ZThhNTcwYmE0NTRkNDlmMTc1NWU4OTE3ZTk3YzViYjA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2157bc706d9190cc2a0fdda34c56ce24e7a6382d",
                    "sha": "2157bc706d9190cc2a0fdda34c56ce24e7a6382d",
                    "url": "https://api.github.com/repos/cython/cython/commits/2157bc706d9190cc2a0fdda34c56ce24e7a6382d"
                }
            ],
            "sha": "449312b7e8a570ba454d49f1755e8917e97c5bb0",
            "url": "https://api.github.com/repos/cython/cython/commits/449312b7e8a570ba454d49f1755e8917e97c5bb0"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/bf5b55f66fbd14ca908200a5f62141551196817e/comments",
            "commit": {
                "author": {
                    "date": "2025-02-25T19:53:05Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-25T19:53:05Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Fix fast path for comparison against known keyword arguments in \"__Pyx_RejectUnknownKeywords()\".",
                "tree": {
                    "sha": "935210d48a63127b58187a819496c6c89fb382f6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/935210d48a63127b58187a819496c6c89fb382f6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/bf5b55f66fbd14ca908200a5f62141551196817e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/bf5b55f66fbd14ca908200a5f62141551196817e",
            "node_id": "C_kwDOACXZ0toAKGJmNWI1NWY2NmZiZDE0Y2E5MDgyMDBhNWY2MjE0MTU1MTE5NjgxN2U",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/449312b7e8a570ba454d49f1755e8917e97c5bb0",
                    "sha": "449312b7e8a570ba454d49f1755e8917e97c5bb0",
                    "url": "https://api.github.com/repos/cython/cython/commits/449312b7e8a570ba454d49f1755e8917e97c5bb0"
                }
            ],
            "sha": "bf5b55f66fbd14ca908200a5f62141551196817e",
            "url": "https://api.github.com/repos/cython/cython/commits/bf5b55f66fbd14ca908200a5f62141551196817e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2e23a8633783f3ec074be3d369c4959237fb66cd/comments",
            "commit": {
                "author": {
                    "date": "2025-02-25T20:13:28Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-25T20:13:28Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Avoid useless loop code generation.",
                "tree": {
                    "sha": "96377d5c4495c7d6e557f09d9aabb8a52956ba87",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/96377d5c4495c7d6e557f09d9aabb8a52956ba87"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2e23a8633783f3ec074be3d369c4959237fb66cd",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/2e23a8633783f3ec074be3d369c4959237fb66cd",
            "node_id": "C_kwDOACXZ0toAKDJlMjNhODYzMzc4M2YzZWMwNzRiZTNkMzY5YzQ5NTkyMzdmYjY2Y2Q",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bf5b55f66fbd14ca908200a5f62141551196817e",
                    "sha": "bf5b55f66fbd14ca908200a5f62141551196817e",
                    "url": "https://api.github.com/repos/cython/cython/commits/bf5b55f66fbd14ca908200a5f62141551196817e"
                }
            ],
            "sha": "2e23a8633783f3ec074be3d369c4959237fb66cd",
            "url": "https://api.github.com/repos/cython/cython/commits/2e23a8633783f3ec074be3d369c4959237fb66cd"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b049ca3a1bb802351baf943cfec7e69e343974d7/comments",
            "commit": {
                "author": {
                    "date": "2025-02-26T08:18:31Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-26T08:18:31Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Code cleanup for better readability.",
                "tree": {
                    "sha": "f2cf753bc55ad586164d47efa0d825bdfe488660",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f2cf753bc55ad586164d47efa0d825bdfe488660"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b049ca3a1bb802351baf943cfec7e69e343974d7",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/b049ca3a1bb802351baf943cfec7e69e343974d7",
            "node_id": "C_kwDOACXZ0toAKGIwNDljYTNhMWJiODAyMzUxYmFmOTQzY2ZlYzdlNjllMzQzOTc0ZDc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2e23a8633783f3ec074be3d369c4959237fb66cd",
                    "sha": "2e23a8633783f3ec074be3d369c4959237fb66cd",
                    "url": "https://api.github.com/repos/cython/cython/commits/2e23a8633783f3ec074be3d369c4959237fb66cd"
                }
            ],
            "sha": "b049ca3a1bb802351baf943cfec7e69e343974d7",
            "url": "https://api.github.com/repos/cython/cython/commits/b049ca3a1bb802351baf943cfec7e69e343974d7"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0774bfd83ac617e7b674a89d5ebe15d1bdd88ba4/comments",
            "commit": {
                "author": {
                    "date": "2025-02-26T08:26:45Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-26T08:26:45Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Move comment.",
                "tree": {
                    "sha": "68b28b4f97b187ec05d29970f021731fe797f04c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/68b28b4f97b187ec05d29970f021731fe797f04c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0774bfd83ac617e7b674a89d5ebe15d1bdd88ba4",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/0774bfd83ac617e7b674a89d5ebe15d1bdd88ba4",
            "node_id": "C_kwDOACXZ0toAKDA3NzRiZmQ4M2FjNjE3ZTdiNjc0YTg5ZDVlYmUxNWQxYmRkODhiYTQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b049ca3a1bb802351baf943cfec7e69e343974d7",
                    "sha": "b049ca3a1bb802351baf943cfec7e69e343974d7",
                    "url": "https://api.github.com/repos/cython/cython/commits/b049ca3a1bb802351baf943cfec7e69e343974d7"
                }
            ],
            "sha": "0774bfd83ac617e7b674a89d5ebe15d1bdd88ba4",
            "url": "https://api.github.com/repos/cython/cython/commits/0774bfd83ac617e7b674a89d5ebe15d1bdd88ba4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8a92fc54267244e61abfb1858c7b18e721e24299/comments",
            "commit": {
                "author": {
                    "date": "2025-02-27T07:42:30Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-27T07:42:30Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Remove critical section from \"__Pyx_ParseKeywordDict\".",
                "tree": {
                    "sha": "bc69dec08f566e22410f71fa55ba868d9047961f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/bc69dec08f566e22410f71fa55ba868d9047961f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8a92fc54267244e61abfb1858c7b18e721e24299",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/8a92fc54267244e61abfb1858c7b18e721e24299",
            "node_id": "C_kwDOACXZ0toAKDhhOTJmYzU0MjY3MjQ0ZTYxYWJmYjE4NThjN2IxOGU3MjFlMjQyOTk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0774bfd83ac617e7b674a89d5ebe15d1bdd88ba4",
                    "sha": "0774bfd83ac617e7b674a89d5ebe15d1bdd88ba4",
                    "url": "https://api.github.com/repos/cython/cython/commits/0774bfd83ac617e7b674a89d5ebe15d1bdd88ba4"
                }
            ],
            "sha": "8a92fc54267244e61abfb1858c7b18e721e24299",
            "url": "https://api.github.com/repos/cython/cython/commits/8a92fc54267244e61abfb1858c7b18e721e24299"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1e5922b2a960d3677af9abdd09e3657e77b2ea52/comments",
            "commit": {
                "author": {
                    "date": "2025-02-27T07:47:49Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-27T07:47:49Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Add critical section around \"PyDict_Next()\" loop.",
                "tree": {
                    "sha": "b6c3051505698353476d8ecbae8cbffed0d353d4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b6c3051505698353476d8ecbae8cbffed0d353d4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1e5922b2a960d3677af9abdd09e3657e77b2ea52",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/1e5922b2a960d3677af9abdd09e3657e77b2ea52",
            "node_id": "C_kwDOACXZ0toAKDFlNTkyMmIyYTk2MGQzNjc3YWY5YWJkZDA5ZTM2NTdlNzdiMmVhNTI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8a92fc54267244e61abfb1858c7b18e721e24299",
                    "sha": "8a92fc54267244e61abfb1858c7b18e721e24299",
                    "url": "https://api.github.com/repos/cython/cython/commits/8a92fc54267244e61abfb1858c7b18e721e24299"
                }
            ],
            "sha": "1e5922b2a960d3677af9abdd09e3657e77b2ea52",
            "url": "https://api.github.com/repos/cython/cython/commits/1e5922b2a960d3677af9abdd09e3657e77b2ea52"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/bed132d059a3236fb994f3838601f1cb9f461b37/comments",
            "commit": {
                "author": {
                    "date": "2025-02-27T07:54:28Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-27T07:54:28Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Avoid reading the dict size multiple times since we don't expect keyword dicts to change.",
                "tree": {
                    "sha": "a4d2af861ddbfe4e70d5f440133658c771841b28",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a4d2af861ddbfe4e70d5f440133658c771841b28"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/bed132d059a3236fb994f3838601f1cb9f461b37",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/bed132d059a3236fb994f3838601f1cb9f461b37",
            "node_id": "C_kwDOACXZ0toAKGJlZDEzMmQwNTlhMzIzNmZiOTk0ZjM4Mzg2MDFmMWNiOWY0NjFiMzc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1e5922b2a960d3677af9abdd09e3657e77b2ea52",
                    "sha": "1e5922b2a960d3677af9abdd09e3657e77b2ea52",
                    "url": "https://api.github.com/repos/cython/cython/commits/1e5922b2a960d3677af9abdd09e3657e77b2ea52"
                }
            ],
            "sha": "bed132d059a3236fb994f3838601f1cb9f461b37",
            "url": "https://api.github.com/repos/cython/cython/commits/bed132d059a3236fb994f3838601f1cb9f461b37"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2de83acd25fbc3bdf6545802940f2c51e962b6cd/comments",
            "commit": {
                "author": {
                    "date": "2025-02-27T08:01:59Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-27T08:01:59Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Code cleanups.",
                "tree": {
                    "sha": "84ec3ddcbb4f204ca1f090d5e6cefb4b8159bef9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/84ec3ddcbb4f204ca1f090d5e6cefb4b8159bef9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2de83acd25fbc3bdf6545802940f2c51e962b6cd",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/2de83acd25fbc3bdf6545802940f2c51e962b6cd",
            "node_id": "C_kwDOACXZ0toAKDJkZTgzYWNkMjVmYmMzYmRmNjU0NTgwMjk0MGYyYzUxZTk2MmI2Y2Q",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bed132d059a3236fb994f3838601f1cb9f461b37",
                    "sha": "bed132d059a3236fb994f3838601f1cb9f461b37",
                    "url": "https://api.github.com/repos/cython/cython/commits/bed132d059a3236fb994f3838601f1cb9f461b37"
                }
            ],
            "sha": "2de83acd25fbc3bdf6545802940f2c51e962b6cd",
            "url": "https://api.github.com/repos/cython/cython/commits/2de83acd25fbc3bdf6545802940f2c51e962b6cd"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/62087bf271050c322daafd4997167e05c9f52ae9/comments",
            "commit": {
                "author": {
                    "date": "2025-02-27T08:10:45Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-27T08:10:45Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Fix reference counting in \"__Pyx_RejectKeywords()\".",
                "tree": {
                    "sha": "7bf6fc413ec4ce5f5e1d8165a4e5475fbc11431e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7bf6fc413ec4ce5f5e1d8165a4e5475fbc11431e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/62087bf271050c322daafd4997167e05c9f52ae9",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/62087bf271050c322daafd4997167e05c9f52ae9",
            "node_id": "C_kwDOACXZ0toAKDYyMDg3YmYyNzEwNTBjMzIyZGFhZmQ0OTk3MTY3ZTA1YzlmNTJhZTk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2de83acd25fbc3bdf6545802940f2c51e962b6cd",
                    "sha": "2de83acd25fbc3bdf6545802940f2c51e962b6cd",
                    "url": "https://api.github.com/repos/cython/cython/commits/2de83acd25fbc3bdf6545802940f2c51e962b6cd"
                }
            ],
            "sha": "62087bf271050c322daafd4997167e05c9f52ae9",
            "url": "https://api.github.com/repos/cython/cython/commits/62087bf271050c322daafd4997167e05c9f52ae9"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8c5785b13d2ae8b625cf548522e9d2a6ccfd04c7/comments",
            "commit": {
                "author": {
                    "date": "2025-02-27T08:12:39Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-27T08:12:39Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Add comment.",
                "tree": {
                    "sha": "c81eef53f33d60121bbf3bf6f2be1edaae4b2973",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c81eef53f33d60121bbf3bf6f2be1edaae4b2973"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8c5785b13d2ae8b625cf548522e9d2a6ccfd04c7",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/8c5785b13d2ae8b625cf548522e9d2a6ccfd04c7",
            "node_id": "C_kwDOACXZ0toAKDhjNTc4NWIxM2QyYWU4YjYyNWNmNTQ4NTIyZTlkMmE2Y2NmZDA0Yzc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/62087bf271050c322daafd4997167e05c9f52ae9",
                    "sha": "62087bf271050c322daafd4997167e05c9f52ae9",
                    "url": "https://api.github.com/repos/cython/cython/commits/62087bf271050c322daafd4997167e05c9f52ae9"
                }
            ],
            "sha": "8c5785b13d2ae8b625cf548522e9d2a6ccfd04c7",
            "url": "https://api.github.com/repos/cython/cython/commits/8c5785b13d2ae8b625cf548522e9d2a6ccfd04c7"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e58589a40d295cab1aa17a11b7428ab45d5015f7/comments",
            "commit": {
                "author": {
                    "date": "2025-02-27T10:07:13Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-27T10:07:13Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Assign default values to empty \"values\" array slots *after* parsing arguments and treat all \"values\" entries as owned.",
                "tree": {
                    "sha": "b376b6758b8de0231af8727235aae3ce03abf641",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b376b6758b8de0231af8727235aae3ce03abf641"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e58589a40d295cab1aa17a11b7428ab45d5015f7",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/e58589a40d295cab1aa17a11b7428ab45d5015f7",
            "node_id": "C_kwDOACXZ0toAKGU1ODU4OWE0MGQyOTVjYWIxYWExN2ExMWI3NDI4YWI0NWQ1MDE1Zjc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8c5785b13d2ae8b625cf548522e9d2a6ccfd04c7",
                    "sha": "8c5785b13d2ae8b625cf548522e9d2a6ccfd04c7",
                    "url": "https://api.github.com/repos/cython/cython/commits/8c5785b13d2ae8b625cf548522e9d2a6ccfd04c7"
                }
            ],
            "sha": "e58589a40d295cab1aa17a11b7428ab45d5015f7",
            "url": "https://api.github.com/repos/cython/cython/commits/e58589a40d295cab1aa17a11b7428ab45d5015f7"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/06e5a87d9d05e34ca1d50a28fa4a0525092e13a0/comments",
            "commit": {
                "author": {
                    "date": "2025-02-27T11:03:28Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-27T11:03:28Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Remove \"__Pyx_Arg_*\" macros because they mix borrowed and owned references in risky ways.",
                "tree": {
                    "sha": "fe4508fea11cfcc1c665409aba401efcf7b98f9c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/fe4508fea11cfcc1c665409aba401efcf7b98f9c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/06e5a87d9d05e34ca1d50a28fa4a0525092e13a0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/06e5a87d9d05e34ca1d50a28fa4a0525092e13a0",
            "node_id": "C_kwDOACXZ0toAKDA2ZTVhODdkOWQwNWUzNGNhMWQ1MGEyOGZhNGEwNTI1MDkyZTEzYTA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e58589a40d295cab1aa17a11b7428ab45d5015f7",
                    "sha": "e58589a40d295cab1aa17a11b7428ab45d5015f7",
                    "url": "https://api.github.com/repos/cython/cython/commits/e58589a40d295cab1aa17a11b7428ab45d5015f7"
                }
            ],
            "sha": "06e5a87d9d05e34ca1d50a28fa4a0525092e13a0",
            "url": "https://api.github.com/repos/cython/cython/commits/06e5a87d9d05e34ca1d50a28fa4a0525092e13a0"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9ad52efed7d9fccfcaef30d11fb832c0bbe91df3/comments",
            "commit": {
                "author": {
                    "date": "2025-02-27T11:35:09Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-27T11:35:09Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Fix theoretical error handling.",
                "tree": {
                    "sha": "803d3b38d87a67e3305a149ca0ef7de7eea91221",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/803d3b38d87a67e3305a149ca0ef7de7eea91221"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9ad52efed7d9fccfcaef30d11fb832c0bbe91df3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/9ad52efed7d9fccfcaef30d11fb832c0bbe91df3",
            "node_id": "C_kwDOACXZ0toAKDlhZDUyZWZlZDdkOWZjY2ZjYWVmMzBkMTFmYjgzMmMwYmJlOTFkZjM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/06e5a87d9d05e34ca1d50a28fa4a0525092e13a0",
                    "sha": "06e5a87d9d05e34ca1d50a28fa4a0525092e13a0",
                    "url": "https://api.github.com/repos/cython/cython/commits/06e5a87d9d05e34ca1d50a28fa4a0525092e13a0"
                }
            ],
            "sha": "9ad52efed7d9fccfcaef30d11fb832c0bbe91df3",
            "url": "https://api.github.com/repos/cython/cython/commits/9ad52efed7d9fccfcaef30d11fb832c0bbe91df3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3c08de32b98556a08f0534b9b4e27f50cd12535c/comments",
            "commit": {
                "author": {
                    "date": "2025-02-28T10:03:51Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-28T10:03:51Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Check keyword count only once.",
                "tree": {
                    "sha": "9b4f5b163a36ac2122c09bd880ca94ce2b800337",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9b4f5b163a36ac2122c09bd880ca94ce2b800337"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3c08de32b98556a08f0534b9b4e27f50cd12535c",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/3c08de32b98556a08f0534b9b4e27f50cd12535c",
            "node_id": "C_kwDOACXZ0toAKDNjMDhkZTMyYjk4NTU2YTA4ZjA1MzRiOWI0ZTI3ZjUwY2QxMjUzNWM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9ad52efed7d9fccfcaef30d11fb832c0bbe91df3",
                    "sha": "9ad52efed7d9fccfcaef30d11fb832c0bbe91df3",
                    "url": "https://api.github.com/repos/cython/cython/commits/9ad52efed7d9fccfcaef30d11fb832c0bbe91df3"
                }
            ],
            "sha": "3c08de32b98556a08f0534b9b4e27f50cd12535c",
            "url": "https://api.github.com/repos/cython/cython/commits/3c08de32b98556a08f0534b9b4e27f50cd12535c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/27e00fee53fe11061db3b1985acb56a5bc64da41/comments",
            "commit": {
                "author": {
                    "date": "2025-02-28T20:59:10Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-28T20:59:10Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Simplify the keyword type validation.",
                "tree": {
                    "sha": "9affc37bee5b1568665de7b4e141a13c1431f8d0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9affc37bee5b1568665de7b4e141a13c1431f8d0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/27e00fee53fe11061db3b1985acb56a5bc64da41",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/27e00fee53fe11061db3b1985acb56a5bc64da41",
            "node_id": "C_kwDOACXZ0toAKDI3ZTAwZmVlNTNmZTExMDYxZGIzYjE5ODVhY2I1NmE1YmM2NGRhNDE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3c08de32b98556a08f0534b9b4e27f50cd12535c",
                    "sha": "3c08de32b98556a08f0534b9b4e27f50cd12535c",
                    "url": "https://api.github.com/repos/cython/cython/commits/3c08de32b98556a08f0534b9b4e27f50cd12535c"
                }
            ],
            "sha": "27e00fee53fe11061db3b1985acb56a5bc64da41",
            "url": "https://api.github.com/repos/cython/cython/commits/27e00fee53fe11061db3b1985acb56a5bc64da41"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b40d439d43c809435ab494b19d0bfeddeaa102ff/comments",
            "commit": {
                "author": {
                    "date": "2025-02-28T21:15:50Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-28T21:15:50Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Avoid unused label in Py>=3.9.",
                "tree": {
                    "sha": "f02efdda697830fa3e8f4e4a44bc1aa3cc6a42e2",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f02efdda697830fa3e8f4e4a44bc1aa3cc6a42e2"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b40d439d43c809435ab494b19d0bfeddeaa102ff",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/b40d439d43c809435ab494b19d0bfeddeaa102ff",
            "node_id": "C_kwDOACXZ0toAKGI0MGQ0MzlkNDNjODA5NDM1YWI0OTRiMTlkMGJmZWRkZWFhMTAyZmY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/27e00fee53fe11061db3b1985acb56a5bc64da41",
                    "sha": "27e00fee53fe11061db3b1985acb56a5bc64da41",
                    "url": "https://api.github.com/repos/cython/cython/commits/27e00fee53fe11061db3b1985acb56a5bc64da41"
                }
            ],
            "sha": "b40d439d43c809435ab494b19d0bfeddeaa102ff",
            "url": "https://api.github.com/repos/cython/cython/commits/b40d439d43c809435ab494b19d0bfeddeaa102ff"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/bf7da617324ca2fcfd35fb7e821e859ffb9079af/comments",
            "commit": {
                "author": {
                    "date": "2025-02-28T21:18:12Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-02-28T21:18:12Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Clean up \"generate_stararg_copy_code()\", adding safer error handling, f-strings and removing a few less likely \"unlikely()\"s.",
                "tree": {
                    "sha": "e1e51a3e06980d291869737d3aba5b9efee135d5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e1e51a3e06980d291869737d3aba5b9efee135d5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/bf7da617324ca2fcfd35fb7e821e859ffb9079af",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/bf7da617324ca2fcfd35fb7e821e859ffb9079af",
            "node_id": "C_kwDOACXZ0toAKGJmN2RhNjE3MzI0Y2EyZmNmZDM1ZmI3ZTgyMWU4NTlmZmI5MDc5YWY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b40d439d43c809435ab494b19d0bfeddeaa102ff",
                    "sha": "b40d439d43c809435ab494b19d0bfeddeaa102ff",
                    "url": "https://api.github.com/repos/cython/cython/commits/b40d439d43c809435ab494b19d0bfeddeaa102ff"
                }
            ],
            "sha": "bf7da617324ca2fcfd35fb7e821e859ffb9079af",
            "url": "https://api.github.com/repos/cython/cython/commits/bf7da617324ca2fcfd35fb7e821e859ffb9079af"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d41026ba19cb251a436890ceb3675f5720768a64/comments",
            "commit": {
                "author": {
                    "date": "2025-03-01T07:41:51Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-03-01T07:41:51Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Simplify __Pyx_CheckKeywordStrings().",
                "tree": {
                    "sha": "fabc1b3aab96860821bbff07f2c8fda296b76eaf",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/fabc1b3aab96860821bbff07f2c8fda296b76eaf"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d41026ba19cb251a436890ceb3675f5720768a64",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/d41026ba19cb251a436890ceb3675f5720768a64",
            "node_id": "C_kwDOACXZ0toAKGQ0MTAyNmJhMTljYjI1MWE0MzY4OTBjZWIzNjc1ZjU3MjA3NjhhNjQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bf7da617324ca2fcfd35fb7e821e859ffb9079af",
                    "sha": "bf7da617324ca2fcfd35fb7e821e859ffb9079af",
                    "url": "https://api.github.com/repos/cython/cython/commits/bf7da617324ca2fcfd35fb7e821e859ffb9079af"
                }
            ],
            "sha": "d41026ba19cb251a436890ceb3675f5720768a64",
            "url": "https://api.github.com/repos/cython/cython/commits/d41026ba19cb251a436890ceb3675f5720768a64"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/6684/commits",
    "created_at": "2025-02-19T16:03:53Z",
    "diff_url": "https://github.com/cython/cython/pull/6684.diff",
    "draft": false,
    "head": {
        "label": "scoder:gh6683_faster_kwargs",
        "ref": "gh6683_faster_kwargs",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/scoder/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/scoder/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/scoder/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/scoder/cython/branches{/branch}",
            "clone_url": "https://github.com/scoder/cython.git",
            "collaborators_url": "https://api.github.com/repos/scoder/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/scoder/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/scoder/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/scoder/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/scoder/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/scoder/cython/contributors",
            "created_at": "2011-09-29T07:52:12Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/scoder/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/scoder/cython/downloads",
            "events_url": "https://api.github.com/repos/scoder/cython/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/scoder/cython/forks",
            "full_name": "scoder/cython",
            "git_commits_url": "https://api.github.com/repos/scoder/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/scoder/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/scoder/cython/git/tags{/sha}",
            "git_url": "git://github.com/scoder/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": false,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/scoder/cython/hooks",
            "html_url": "https://github.com/scoder/cython",
            "id": 2480594,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/scoder/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/scoder/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/scoder/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/scoder/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/scoder/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/scoder/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/scoder/cython/merges",
            "milestones_url": "https://api.github.com/repos/scoder/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNDgwNTk0",
            "notifications_url": "https://api.github.com/repos/scoder/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/scoder/cython/pulls{/number}",
            "pushed_at": "2025-03-03T13:44:19Z",
            "releases_url": "https://api.github.com/repos/scoder/cython/releases{/id}",
            "size": 75050,
            "ssh_url": "git@github.com:scoder/cython.git",
            "stargazers_count": 11,
            "stargazers_url": "https://api.github.com/repos/scoder/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/scoder/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/scoder/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/scoder/cython/subscription",
            "svn_url": "https://github.com/scoder/cython",
            "tags_url": "https://api.github.com/repos/scoder/cython/tags",
            "teams_url": "https://api.github.com/repos/scoder/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/scoder/cython/git/trees{/sha}",
            "updated_at": "2025-02-14T20:40:34Z",
            "url": "https://api.github.com/repos/scoder/cython",
            "visibility": "public",
            "watchers": 11,
            "watchers_count": 11,
            "web_commit_signoff_required": false
        },
        "sha": "d41026ba19cb251a436890ceb3675f5720768a64",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/6684",
    "id": 2345009210,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/6684",
    "labels": [
        {
            "color": "444444",
            "default": true,
            "description": null,
            "id": 425556243,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNDM=",
            "url": "https://api.github.com/repos/cython/cython/labels/enhancement"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        }
    ],
    "locked": false,
    "merge_commit_sha": "71da5aab461e862327e27cdb94f3997b39720921",
    "merged_at": null,
    "milestone": {
        "closed_at": null,
        "closed_issues": 346,
        "created_at": "2019-02-24T14:21:23Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder",
            "user_view_type": "public"
        },
        "description": "* Remove code for Python 2 and Python < 3.8.\r\n* Integrate better with Python 3.\r\n* Improve support for the Limited API.\r\n* Start supporting GIL-free Python 3.13.\r\n* Support the Py3.13 `sys.monitoring` API.\r\n* Support and use `am_send` for coroutines.",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/65",
        "id": 4082235,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/65/labels",
        "node_id": "MDk6TWlsZXN0b25lNDA4MjIzNQ==",
        "number": 65,
        "open_issues": 23,
        "state": "open",
        "title": "3.1",
        "updated_at": "2025-03-03T07:22:21Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/65"
    },
    "node_id": "PR_kwDOABDGAc6LxgA6",
    "number": 6684,
    "patch_url": "https://github.com/cython/cython/pull/6684.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/6684/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/d41026ba19cb251a436890ceb3675f5720768a64",
    "title": "Reduce overhead when validating keyword arguments",
    "updated_at": "2025-03-02T12:48:33Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/6684",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder",
        "user_view_type": "public"
    }
}