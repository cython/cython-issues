{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/5744/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5744/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/5744"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/5744"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5744/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5744"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/bcb7c863e734a95a2b185086fb16a78a66205380"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1525,
            "forks_count": 1525,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1437,
            "open_issues_count": 1437,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2025-05-12T09:03:10Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 75625,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 9986,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2025-05-12T09:03:16Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 9986,
            "watchers_count": 9986,
            "web_commit_signoff_required": false
        },
        "sha": "bcb7c863e734a95a2b185086fb16a78a66205380",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": "The Demand for such a tool to exist is very high and I wanted to try my very hardest to deliver. Visual Studio Code and some other coding Ides that I may not be aware off suffer from not being able to have immediate type hint access when a compiled python file such as `.so` or `.pyd` that are compiled by Cython.  My goal was to finish what the author [ax487](https://github.com/cython/cython/pull/3818) had started and I have made some optimizations of my own to his compiler as well as added the bonus of type hint completeness to the arguments. I would've added the ability to recover return type hint annotations but we can save that for the future as this `PyiWriter` object matures a bit as I have tried to resolve missing type hint annotations labeled as `object` with no success just yet. However as long as you have provided the necessary type hints needed to your modules that shouldn't be a problem or issue and it should not be overwritten as long as the annotations or declarations are written to the `.pyx` , `.py` file. \r\n\r\n# New Directive Argument Was Added\r\n\r\nI have added in a new cython directive called `cython: write_stub_file` to invoke the PyiWriter to write the stubfiles where the pyx file is being compiled. And here is a neat little example to illustrate this.\r\n\r\nWe will call this file `test.pyx`\r\n\r\n```cython\r\n#cython: write_stub_file = True \r\ncdef class Concept:\r\n    cdef Py_ssize_t size\r\n    def __cinit__(self,Py_ssize_t size):\r\n        self.size = size\r\n```\r\n\r\nUsing the new `cython: write_stub_file` directive I have created and setting it as True will create the output named `test.pyi`\r\n```python\r\n# Python stub file generated by Cython 3.0.2\r\nclass Concept:\r\n    def __init__(self, size:int):...\r\n```\r\n\r\nThere maybe a few things missing like an output folder command but I'm pretty sure all of you could help me come up with those missing pieces. I am honored and humbled to be apart of one of the most revolutionary additions ever to Cython as of currently.\r\n\r\n",
    "closed_at": "2025-05-11T18:39:26Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346501988"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346501988"
                }
            },
            "author_association": "MEMBER",
            "body": "We can't assume that Cython runs on a version of Python that supports fstrings yet",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-04T21:45:05Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:\n+    func_annotations = []\n+    for arg, py_arg in zip(node.type.args, node.declarator.args):\n+        annotation = \"\"\n+        # TODO Maybe have a flag to check if were currently using \n+        # a class inside of here as an extra check?\n+        if arg.name == \"self\":\n+            annotation = arg.name\n+        else:\n+            annotation = \"%s: %s\" % (arg.name, ctype_name(arg, node))\n+        if not py_arg.default or not py_arg.default_value:\n+            # TODO: See if there is a better way of going about finding an ellipsis...\n+            annotation += \" = ...\"\n+        func_annotations.append(annotation)\n+    return func_annotations\n+\n+\n+# TODO Find something smarter than a variable stack, I'm not sure what it's original purpose was for - Vizonex\n+\n+# FIXME I plan to make this a little bit more simillar to \n+# the Embedsignature Transform in the future but for now this will do...\n+\n+\n+# FIXME I'm planning on dropping these different annotaions I have in the file if\n+# they cannot be handled by earlier versions than 3.9 of python... \n+# they are currently just here to help me figure out how to write this all \n+# down since Im working inside of Vs Code.\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+        # TODO Maybe have arguments \n+        # for how shadow.pyi is implemented be passed into here \n+        # if we want them to be even imported at \n+        # all and if so C Variables should be translated as such...\n+    \n+        # TODO in the future allow context variables to be passed so that a directive can be used to \n+        # pass along docstring infromation so tools such as sphinx can generate clean documentation...\n+\n+        self.translation_table:dict[str,str] = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing : bool = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype:PyrexTypes.PyrexType):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            py_name = ctype.py_type_name()\n+            if py_name:\n+                # Try returning the python type name and put it into quotes \n+                # incase the object has not been registered yet....\n+                return py_name if py_name in self.stack else f\"{py_name!r}\"\n+\n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base:CSimpleBaseTypeNode\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # execpt for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node: ModuleNode):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            # TODO See if we should or shouldn't report back about our stubfiles being written off....\n+            print(f\"Writing {result}.pyi ...\") ",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346501988",
            "id": 1346501988,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QQf1k",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 163,
            "original_position": 163,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658537119,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346501988/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-04T21:57:06Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346501988",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346503464"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346503464"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't necessarily think we should base the behaviour on the argument name - `self` is a convention rather than a rule",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-04T21:46:54Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:\n+    func_annotations = []\n+    for arg, py_arg in zip(node.type.args, node.declarator.args):\n+        annotation = \"\"\n+        # TODO Maybe have a flag to check if were currently using \n+        # a class inside of here as an extra check?\n+        if arg.name == \"self\":",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346503464",
            "id": 1346503464,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QQgMo",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 52,
            "original_position": 52,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658537119,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346503464/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-04T21:56:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346503464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346503891"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346503891"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd avoid `import *`",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-04T21:47:27Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346503891",
            "id": 1346503891,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QQgTT",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658537119,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346503891/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-04T21:56:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346503891",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346504570"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346504570"
                }
            },
            "author_association": "MEMBER",
            "body": "We also can't assume that we run on a version of Python that supports type annotations ",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-04T21:48:18Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346504570",
            "id": 1346504570,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QQgd6",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 46,
            "original_position": 46,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658537119,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346504570/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-04T21:56:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346504570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346509833"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346509833"
                }
            },
            "author_association": "MEMBER",
            "body": "Further to my comment about not supporting annotations, I'm also not keen on `node : DefNode` - it's absolutely explicit from the function already so it isn't adding useful information.\r\n\r\nRight now it's irrelevant (since we can't have it) but it's definitely the type of annotation I'd be keen to avoid in future",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-04T21:52:43Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:\n+    func_annotations = []\n+    for arg, py_arg in zip(node.type.args, node.declarator.args):\n+        annotation = \"\"\n+        # TODO Maybe have a flag to check if were currently using \n+        # a class inside of here as an extra check?\n+        if arg.name == \"self\":\n+            annotation = arg.name\n+        else:\n+            annotation = \"%s: %s\" % (arg.name, ctype_name(arg, node))\n+        if not py_arg.default or not py_arg.default_value:\n+            # TODO: See if there is a better way of going about finding an ellipsis...\n+            annotation += \" = ...\"\n+        func_annotations.append(annotation)\n+    return func_annotations\n+\n+\n+# TODO Find something smarter than a variable stack, I'm not sure what it's original purpose was for - Vizonex\n+\n+# FIXME I plan to make this a little bit more simillar to \n+# the Embedsignature Transform in the future but for now this will do...\n+\n+\n+# FIXME I'm planning on dropping these different annotaions I have in the file if\n+# they cannot be handled by earlier versions than 3.9 of python... \n+# they are currently just here to help me figure out how to write this all \n+# down since Im working inside of Vs Code.\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+        # TODO Maybe have arguments \n+        # for how shadow.pyi is implemented be passed into here \n+        # if we want them to be even imported at \n+        # all and if so C Variables should be translated as such...\n+    \n+        # TODO in the future allow context variables to be passed so that a directive can be used to \n+        # pass along docstring infromation so tools such as sphinx can generate clean documentation...\n+\n+        self.translation_table:dict[str,str] = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing : bool = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype:PyrexTypes.PyrexType):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            py_name = ctype.py_type_name()\n+            if py_name:\n+                # Try returning the python type name and put it into quotes \n+                # incase the object has not been registered yet....\n+                return py_name if py_name in self.stack else f\"{py_name!r}\"\n+\n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base:CSimpleBaseTypeNode\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # execpt for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node: ModuleNode):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            # TODO See if we should or shouldn't report back about our stubfiles being written off....\n+            print(f\"Writing {result}.pyi ...\") \n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+        return node\n+        \n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node:CDefExternNode):\n+        self.visitchildren(node)\n+\n+    def visit_CEnumDefNode(self, node:CEnumDefNode):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum acessable to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visable in the final product beacuse \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node:CTypeDefNode):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node:CStructOrUnionDefNode):\n+        # XXX : Currenlty, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node: CVarDefNode):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outisde should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incomming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node: ImportNode):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+\n+    def visit_SingleAssignmentNode(self, node: SingleAssignmentNode): # type: ignore\n+        if not isinstance(node.rhs, ImportNode):\n+            return node\n+\n+        module_name = node.rhs.module_name.value\n+\n+        parent_module = module_name\n+\n+        pos = module_name.find('.')\n+\n+        if pos != -1:\n+            parent_module = module_name[:pos]\n+        \n+        imported_name = node.lhs.name\n+\n+        if parent_module == imported_name:\n+            self.visitchildren(node)\n+            return node\n+\n+        self.putline(\"import %s as %s\" % (module_name, imported_name))\n+        return node \n+    \n+    # Optimized orginal code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the orginal pull request needed to be cleaned up...\n+\n+    def write_class(self, node, class_name):\n+        print(node.__dict__)\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode):\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.put(\":\")\n+\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node: CClassDefNode):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node:PyClassDefNode):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node: CFuncDefNode):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+\n+        self.class_func_count += 1\n+\n+        func_name = node.declared_name()\n+\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+        # Cleaned up alot of what the orginal author did by making a new function\n+        self.put(\", \".join(translate_annotations(node)))\n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+        self.endline(\") -> %s: ...\" % ctype_name(node.type.return_type))\n+        return node\n+\n+    def print_Decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"\n+            self.endline(\"%s.%s\" % (decorator.obj.name,decorator.attribute))\n+        \n+\n+    def annotation_Str(self, annotation:ExprNode) -> str:\n+        return annotation.name if hasattr(annotation,\"name\") and annotation.is_name else  annotation.string.unicode_value \n+        \n+     \n+\n+    def visit_DefNode(self,node:DefNode):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346509833",
            "id": 1346509833,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QQhwJ",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 335,
            "original_position": 335,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658537119,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346509833/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-04T21:56:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346509833",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346687034"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346687034"
                }
            },
            "author_association": "NONE",
            "body": "I'll be sure to fix all of this then. Thank you for your input",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-05T02:07:44Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:\n+    func_annotations = []\n+    for arg, py_arg in zip(node.type.args, node.declarator.args):\n+        annotation = \"\"\n+        # TODO Maybe have a flag to check if were currently using \n+        # a class inside of here as an extra check?\n+        if arg.name == \"self\":\n+            annotation = arg.name\n+        else:\n+            annotation = \"%s: %s\" % (arg.name, ctype_name(arg, node))\n+        if not py_arg.default or not py_arg.default_value:\n+            # TODO: See if there is a better way of going about finding an ellipsis...\n+            annotation += \" = ...\"\n+        func_annotations.append(annotation)\n+    return func_annotations\n+\n+\n+# TODO Find something smarter than a variable stack, I'm not sure what it's original purpose was for - Vizonex\n+\n+# FIXME I plan to make this a little bit more simillar to \n+# the Embedsignature Transform in the future but for now this will do...\n+\n+\n+# FIXME I'm planning on dropping these different annotaions I have in the file if\n+# they cannot be handled by earlier versions than 3.9 of python... \n+# they are currently just here to help me figure out how to write this all \n+# down since Im working inside of Vs Code.\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+        # TODO Maybe have arguments \n+        # for how shadow.pyi is implemented be passed into here \n+        # if we want them to be even imported at \n+        # all and if so C Variables should be translated as such...\n+    \n+        # TODO in the future allow context variables to be passed so that a directive can be used to \n+        # pass along docstring infromation so tools such as sphinx can generate clean documentation...\n+\n+        self.translation_table:dict[str,str] = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing : bool = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype:PyrexTypes.PyrexType):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            py_name = ctype.py_type_name()\n+            if py_name:\n+                # Try returning the python type name and put it into quotes \n+                # incase the object has not been registered yet....\n+                return py_name if py_name in self.stack else f\"{py_name!r}\"\n+\n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base:CSimpleBaseTypeNode\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # execpt for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node: ModuleNode):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            # TODO See if we should or shouldn't report back about our stubfiles being written off....\n+            print(f\"Writing {result}.pyi ...\") \n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+        return node\n+        \n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node:CDefExternNode):\n+        self.visitchildren(node)\n+\n+    def visit_CEnumDefNode(self, node:CEnumDefNode):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum acessable to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visable in the final product beacuse \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node:CTypeDefNode):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node:CStructOrUnionDefNode):\n+        # XXX : Currenlty, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node: CVarDefNode):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outisde should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incomming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node: ImportNode):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+\n+    def visit_SingleAssignmentNode(self, node: SingleAssignmentNode): # type: ignore\n+        if not isinstance(node.rhs, ImportNode):\n+            return node\n+\n+        module_name = node.rhs.module_name.value\n+\n+        parent_module = module_name\n+\n+        pos = module_name.find('.')\n+\n+        if pos != -1:\n+            parent_module = module_name[:pos]\n+        \n+        imported_name = node.lhs.name\n+\n+        if parent_module == imported_name:\n+            self.visitchildren(node)\n+            return node\n+\n+        self.putline(\"import %s as %s\" % (module_name, imported_name))\n+        return node \n+    \n+    # Optimized orginal code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the orginal pull request needed to be cleaned up...\n+\n+    def write_class(self, node, class_name):\n+        print(node.__dict__)\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode):\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.put(\":\")\n+\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node: CClassDefNode):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node:PyClassDefNode):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node: CFuncDefNode):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+\n+        self.class_func_count += 1\n+\n+        func_name = node.declared_name()\n+\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+        # Cleaned up alot of what the orginal author did by making a new function\n+        self.put(\", \".join(translate_annotations(node)))\n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+        self.endline(\") -> %s: ...\" % ctype_name(node.type.return_type))\n+        return node\n+\n+    def print_Decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"\n+            self.endline(\"%s.%s\" % (decorator.obj.name,decorator.attribute))\n+        \n+\n+    def annotation_Str(self, annotation:ExprNode) -> str:\n+        return annotation.name if hasattr(annotation,\"name\") and annotation.is_name else  annotation.string.unicode_value \n+        \n+     \n+\n+    def visit_DefNode(self,node:DefNode):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346687034",
            "id": 1346687034,
            "in_reply_to_id": 1346509833,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QRNA6",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 335,
            "original_position": 335,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658772952,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346687034/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T02:07:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346687034",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346708741"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346708741"
                }
            },
            "author_association": "NONE",
            "body": "I agree, I just don't know how to implement it yet, but I'll soon figure it out.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-05T02:44:53Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:\n+    func_annotations = []\n+    for arg, py_arg in zip(node.type.args, node.declarator.args):\n+        annotation = \"\"\n+        # TODO Maybe have a flag to check if were currently using \n+        # a class inside of here as an extra check?\n+        if arg.name == \"self\":",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346708741",
            "id": 1346708741,
            "in_reply_to_id": 1346503464,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QRSUF",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 52,
            "original_position": 52,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658797211,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346708741/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T02:44:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346708741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346974562"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346974562"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n# TODO Save this implementation commented out if required....\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-05T08:00:48Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346974562",
            "id": 1346974562,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSTNi",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346974562/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346974562",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346980478"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346980478"
                }
            },
            "author_association": "MEMBER",
            "body": "These relative imports look wrong. We're in the `Cython.Compiler` package already.\r\n```suggestion\r\nfrom . import Version\r\nfrom .Nodes import CNameDeclaratorNode\r\nfrom .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\r\nfrom ..CodeWriter import DeclarationWriter\r\nfrom .ParseTreeTransforms import CythonTransform\r\nfrom . import PyrexTypes\r\n```\r\nPlease don't import `Main` because it imports everything and thus necessarily leads to circular imports.\r\nI'd also avoid importing names directly from `Nodes` and `ExprNodes` because they may also suffer from circular imports. Just import the module and use `ExprNodes.NameNode` etc.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-05T08:05:42Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346980478",
            "id": 1346980478,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSUp-",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 1,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346980478/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346980478",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346981247"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346981247"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    def __init__(self, context):\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-05T08:06:21Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346981247",
            "id": 1346981247,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSU1_",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346981247/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346981247",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346984519"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346984519"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd always make sure that files end with a newline.\r\n```suggestion\r\n                w.write(\"\\n\".join(result.lines))\r\n                w.write(\"\\n\")\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-05T08:08:01Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+            \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346984519",
            "id": 1346984519,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSVpH",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 112,
            "original_position": 112,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346984519/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346984519",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346986172"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346986172"
                }
            },
            "author_association": "MEMBER",
            "body": "Wouldn't this write files like `pkg1.pkg2.module.pyi`? They should rather be created in the package folders.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-05T08:09:14Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+            \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346986172",
            "id": 1346986172,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSWC8",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 111,
            "original_position": 111,
            "original_start_line": 110,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346986172/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346986172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346987926"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346987926"
                }
            },
            "author_association": "MEMBER",
            "body": "This seems unnecessary. If it didn't fail, it succeeded, obviously.\r\n```suggestion\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-05T08:10:34Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+            \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+            print(\"pyi file written\")",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346987926",
            "id": 1346987926,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSWeW",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 113,
            "original_position": 113,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346987926/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346987926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346991631"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346991631"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    'write_stub_file': False,  # write a Python`.pyi` stub file with typing information\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-05T08:13:20Z",
            "diff_hunk": "@@ -228,7 +228,8 @@ def copy_inherited_directives(outer_directives, **new_directives):\n     'fast_gil': False,\n     'cpp_locals': False,  # uses std::optional for C++ locals, so that they work more like Python locals\n     'legacy_implicit_noexcept': False,\n-\n+    'write_stub_file':False, # used to allow the writing python stubfile. `.pyi` file",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346991631",
            "id": 1346991631,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSXYP",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 231,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Compiler/Options.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346991631/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346991631",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1347771275"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1347771275"
                }
            },
            "author_association": "NONE",
            "body": "Smart Idea actually. Why did I not think of that before.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-05T17:37:59Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+            \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1347771275",
            "id": 1347771275,
            "in_reply_to_id": 1346984519,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QVVuL",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 112,
            "original_position": 112,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1660392531,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1347771275/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T17:38:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1347771275",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1349204685"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1349204685"
                }
            },
            "author_association": "MEMBER",
            "body": "`CythonTransform` is in `Visitor`",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-06T18:51:04Z",
            "diff_hunk": "@@ -0,0 +1,436 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .ParseTreeTransforms import CythonTransform",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1349204685",
            "id": 1349204685,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QazrN",
            "original_commit_id": "de311c045d2ff7a319f0958d5f803ecfa700747b",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1662625033,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1349204685/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-06T18:51:05Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1349204685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357140163"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357140163"
                }
            },
            "author_association": "MEMBER",
            "body": "Probably not useful unless you intend this file to be compiled with Cython. I'd think it shouldn't be at this stage - it's not a \"core\" feature so doesn't really need speeding up. If you do intend it to be compiled then the file needs adding to `setup.py`.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:07:32Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357140163",
            "id": 1357140163,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5FDD",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 12,
            "original_position": 12,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357140163/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357140163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357140990"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357140990"
                }
            },
            "author_association": "MEMBER",
            "body": "Note that `error` and `warning` aren't even imported, so declaring them as object probably isn't helpful (but again, I don't think you need this line)",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:08:24Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357140990",
            "id": 1357140990,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5FP-",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357140990/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357140990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357142653"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357142653"
                }
            },
            "author_association": "MEMBER",
            "body": "We don't assume that the version of Python that Cython is run in is necessarily the same as the version of Python the generated files are used in. Can this go in the stub files instead? (is this supported by stub files?)",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:10:01Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357142653",
            "id": 1357142653,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5Fp9",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357142653/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357142653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357143691"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357143691"
                }
            },
            "author_association": "MEMBER",
            "body": "`if ctype.is_builtin_type`",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:11:00Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357143691",
            "id": 1357143691,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5F6L",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 61,
            "original_position": 61,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357143691/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357143691",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357145080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357145080"
                }
            },
            "author_association": "MEMBER",
            "body": "Most of these are defined as global constants in PyrexTypes. This one you can test with\r\n\r\n```\r\nif ctype is c_void_type:\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:12:32Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357145080",
            "id": 1357145080,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5GP4",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 64,
            "original_position": 64,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145080/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357145746"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357145746"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not completely sure how you'd ever get to this line",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:13:15Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357145746",
            "id": 1357145746,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5GaS",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 65,
            "original_position": 65,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145746/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145746",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357145905"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357145905"
                }
            },
            "author_association": "MEMBER",
            "body": "`ctype.is_int`",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:13:23Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357145905",
            "id": 1357145905,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5Gcx",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 69,
            "original_position": 69,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145905/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145905",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357146166"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357146166"
                }
            },
            "author_association": "MEMBER",
            "body": "`ctype.is_float`",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:13:38Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357146166",
            "id": 1357146166,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5Gg2",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 72,
            "original_position": 72,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357146166/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357146166",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357147578"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357147578"
                }
            },
            "author_association": "MEMBER",
            "body": "`ctype.is_pyobject`\r\n\r\nI'd also check to see if the logic for this and `BuiltinObjectType` can be combined (it's possible it can't, but worth a look)",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:15:04Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357147578",
            "id": 1357147578,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5G26",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 75,
            "original_position": 75,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357147578/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357147578",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357148795"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357148795"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm suspicious of most of these comparisons to `base.name` - again, it should be possible to identify without checking the name (as above)",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:16:25Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357148795",
            "id": 1357148795,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5HJ7",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 91,
            "original_position": 91,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357148795/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357148795",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357152403"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357152403"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think you use the directives tracking of `CythonTransform`. I wonder if this should inherit from `TreeVisitor` since I don't think it's intended to change the tree - just to go over it. That'd eliminate any possibility of accidentally changing the tree.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:20:09Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357152403",
            "id": 1357152403,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5ICT",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357152403/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357152403",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357152841"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357152841"
                }
            },
            "author_association": "MEMBER",
            "body": "Unused probably.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:20:38Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357152841",
            "id": 1357152841,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5IJJ",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357152841/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357152841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357159080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357159080"
                }
            },
            "author_association": "MEMBER",
            "body": "I also don't know how much of `DeclarationWriter` you use - possibly just things like `write/indent`. I wonder if it would be worth factoring those out so you can inherit without bringing in all the `visit_` functions?",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:27:07Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357159080",
            "id": 1357159080,
            "in_reply_to_id": 1357152403,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5Jqo",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357159080/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357159080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357162274"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357162274"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd be worried how this interacts with https://peps.python.org/pep-0614/. There's definitely cases where decorators aren't attributes or names now.\r\n\r\nI'm not quite sure how decorators mix with stub files though.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:30:02Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+        \n+        func_args = []\n+        for arg in node.declarator.args:\n+            value = \"\"\n+            if not arg.declarator.name:\n+                value = arg.base_type.name\n+            elif hasattr(arg.base_type, \"name\"):\n+                value = \"%s : %s\" % (arg.declarator.name, self.translate_base_type_to_py(arg.base_type))\n+            if (arg.default is not None or\n+                arg.default_value is not None):\n+                value += \" = ...\"\n+            func_args.append(value)\n+        \n+        self.class_func_count += 1\n+        \n+        func_name = node.declared_name()\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+    \n+        self.put(\", \".join(func_args))\n+        \n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+      \n+        self.endline(\") -> %s: ...\" % self.translate_base_type_to_py(node.base_type))\n+        \n+        return node\n+\n+    \n+    def write_decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357162274",
            "id": 1357162274,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5Kci",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 275,
            "original_position": 275,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357162274/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357162274",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357163063"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357163063"
                }
            },
            "author_association": "MEMBER",
            "body": "just `annotation.is_name` - I don't think you need to do `hasattr` and `is_name`",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-12T17:30:52Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+        \n+        func_args = []\n+        for arg in node.declarator.args:\n+            value = \"\"\n+            if not arg.declarator.name:\n+                value = arg.base_type.name\n+            elif hasattr(arg.base_type, \"name\"):\n+                value = \"%s : %s\" % (arg.declarator.name, self.translate_base_type_to_py(arg.base_type))\n+            if (arg.default is not None or\n+                arg.default_value is not None):\n+                value += \" = ...\"\n+            func_args.append(value)\n+        \n+        self.class_func_count += 1\n+        \n+        func_name = node.declared_name()\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+    \n+        self.put(\", \".join(func_args))\n+        \n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+      \n+        self.endline(\") -> %s: ...\" % self.translate_base_type_to_py(node.base_type))\n+        \n+        return node\n+\n+    \n+    def write_decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"\n+            self.endline(\"%s.%s\" % (decorator.obj.name,decorator.attribute))\n+        \n+\n+    def annotation_Str(self, annotation):\n+        return annotation.name if hasattr(annotation,\"name\") and annotation.is_name else  annotation.string.unicode_value ",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357163063",
            "id": 1357163063,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5Ko3",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 280,
            "original_position": 280,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357163063/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357163063",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359800507"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359800507"
                }
            },
            "author_association": "MEMBER",
            "body": "Perhaps I'm missing something, but `base` is already a type, so I don't understand what this line does",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-15T07:25:16Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359800507",
            "id": 1359800507,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RDOi7",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 105,
            "original_position": 105,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359800507/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359800507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359800826"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359800826"
                }
            },
            "author_association": "MEMBER",
            "body": "`if base.name in self.translation_table`",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-15T07:27:52Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359800826",
            "id": 1359800826,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RDOn6",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 88,
            "original_position": 88,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359800826/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359800826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359802064"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359802064"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```\r\n\r\nDon't think this comment is needed for future understanding of the code",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-15T07:32:25Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359802064",
            "id": 1359802064,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RDO7Q",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 204,
            "original_position": 204,
            "original_start_line": 202,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359802064/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359802064",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359802357"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359802357"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think `node.bases` needs a `getattr` - it's a child of both `PyClassDefNode` and `CClassDefNode`",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-15T07:34:54Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359802357",
            "id": 1359802357,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RDO_1",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 210,
            "original_position": 210,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359802357/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359802357",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359803308"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359803308"
                }
            },
            "author_association": "MEMBER",
            "body": "Not everything in a tuple node will be a name. E.g.:\r\n\r\n```\r\nimport module\r\n\r\nclass MyClass(module.BaseClass):\r\n   pass\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-15T07:37:15Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359803308",
            "id": 1359803308,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RDPOs",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 212,
            "original_position": 212,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359803308/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359803308",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359803406"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359803406"
                }
            },
            "author_association": "MEMBER",
            "body": "Classes can be nested",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-15T07:38:04Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359803406",
            "id": 1359803406,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RDPQO",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 216,
            "original_position": 216,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359803406/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359803406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367677314"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367677314"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is this done at this early stage and not at the end of the pipeline? Especially after `AdjustDefByDirectives` and `AnalyseExpressionsTransform` ?",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T06:35:55Z",
            "diff_hunk": "@@ -188,6 +188,7 @@ def create_pipeline(context, mode, exclude_classes=()):\n         _specific_post_parse,\n         TrackNumpyAttributes(),\n         InterpretCompilerDirectives(context, context.compiler_directives),\n+        PyiWriter(context),",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367677314",
            "id": 1367677314,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhRmC",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 191,
            "original_position": 13,
            "original_start_line": null,
            "path": "Cython/Compiler/Pipeline.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677314/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677314",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367677447"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367677447"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T06:37:29Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367677447",
            "id": 1367677447,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhRoH",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": 41,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677447/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677447",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367677728"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367677728"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah, `DeclarationWriter` deals a lot with Cython's `cdef` declarations, so splitting out a Python compatible thing seems like a good idea. It would probably do a bit more than just indentation, maybe not that much more.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T06:40:23Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367677728",
            "id": 1367677728,
            "in_reply_to_id": 1357152403,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhRsg",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677728/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677728",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367678329"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367678329"
                }
            },
            "author_association": "MEMBER",
            "body": "I would have expected a difference between argument types and return types regarding the conversion. Are they really always the same?",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T06:44:56Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367678329",
            "id": 1367678329,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhR15",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 58,
            "original_position": 58,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678329/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678329",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367678405"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367678405"
                }
            },
            "author_association": "MEMBER",
            "body": "There's also `bint` -> `bool`, and you can handle `int`, `float` and `complex` right here as well.\r\n```suggestion\r\n        if ctype.is_numeric or ctype.is_builtin_type:\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T06:45:39Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367678405",
            "id": 1367678405,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhR3F",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 61,
            "original_position": 61,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678405/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678405",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367678461"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367678461"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if ctype is c_void_type:\r\n            return \"None\"\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T06:46:12Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367678461",
            "id": 1367678461,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhR39",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 67,
            "original_position": 67,
            "original_start_line": 64,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678461/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678461",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367681538"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367681538"
                }
            },
            "author_association": "MEMBER",
            "body": "Simply calling `ctype.py_type_name()` doesn't work well for extension types, I think.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T07:11:37Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367681538",
            "id": 1367681538,
            "in_reply_to_id": 1357147578,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhSoC",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 75,
            "original_position": 75,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681538/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681538",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367681610"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367681610"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T07:12:17Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367681610",
            "id": 1367681610,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhSpK",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 74,
            "original_position": 74,
            "original_start_line": 69,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681610/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367681918"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367681918"
                }
            },
            "author_association": "MEMBER",
            "body": "A try-import might work in the stub file.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T07:15:07Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367681918",
            "id": 1367681918,
            "in_reply_to_id": 1357142653,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhSt-",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681918/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367682094"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367682094"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            pyi_path = node.full_module_name.replace(\".\", \"/\") + '.pyi'\r\n            print(\"writing file %s ...\" % pyi_path)\r\n            with open_new_file(pyi_path) as w:\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T07:17:02Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367682094",
            "id": 1367682094,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhSwu",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 117,
            "original_position": 117,
            "original_start_line": 115,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682094/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682094",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367682320"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367682320"
                }
            },
            "author_association": "MEMBER",
            "body": "If these involve cimporting types, we might still need an actual import here in some cases.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T07:18:28Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367682320",
            "id": 1367682320,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhS0Q",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 130,
            "original_position": 130,
            "original_start_line": 126,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682320/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682320",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367682559"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367682559"
                }
            },
            "author_association": "MEMBER",
            "body": "We may consider mapping these to a namedtuple or dataclass.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T07:20:41Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367682559",
            "id": 1367682559,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhS3_",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 159,
            "original_position": 159,
            "original_start_line": 156,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682559/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367682997"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367682997"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if node.bases and node.bases.is_sequence_constructor and node.bases.args:\r\n```",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T07:24:12Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367682997",
            "id": 1367682997,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhS-1",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 210,
            "original_position": 210,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682997/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367683162"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367683162"
                }
            },
            "author_association": "MEMBER",
            "body": "Recursion by visiting the args nodes would probably solve this.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T07:25:37Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367683162",
            "id": 1367683162,
            "in_reply_to_id": 1359803308,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhTBa",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 212,
            "original_position": 212,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683162/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367683433"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367683433"
                }
            },
            "author_association": "MEMBER",
            "body": "Recursion again, if you want to properly serialise the stub files. But yeah, not sure if that's really intended here.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T07:27:36Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+        \n+        func_args = []\n+        for arg in node.declarator.args:\n+            value = \"\"\n+            if not arg.declarator.name:\n+                value = arg.base_type.name\n+            elif hasattr(arg.base_type, \"name\"):\n+                value = \"%s : %s\" % (arg.declarator.name, self.translate_base_type_to_py(arg.base_type))\n+            if (arg.default is not None or\n+                arg.default_value is not None):\n+                value += \" = ...\"\n+            func_args.append(value)\n+        \n+        self.class_func_count += 1\n+        \n+        func_name = node.declared_name()\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+    \n+        self.put(\", \".join(func_args))\n+        \n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+      \n+        self.endline(\") -> %s: ...\" % self.translate_base_type_to_py(node.base_type))\n+        \n+        return node\n+\n+    \n+    def write_decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367683433",
            "id": 1367683433,
            "in_reply_to_id": 1357162274,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhTFp",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 275,
            "original_position": 275,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683433/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683433",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367683528"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367683528"
                }
            },
            "author_association": "MEMBER",
            "body": "Recursion again.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T07:29:00Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+        \n+        func_args = []\n+        for arg in node.declarator.args:\n+            value = \"\"\n+            if not arg.declarator.name:\n+                value = arg.base_type.name\n+            elif hasattr(arg.base_type, \"name\"):\n+                value = \"%s : %s\" % (arg.declarator.name, self.translate_base_type_to_py(arg.base_type))\n+            if (arg.default is not None or\n+                arg.default_value is not None):\n+                value += \" = ...\"\n+            func_args.append(value)\n+        \n+        self.class_func_count += 1\n+        \n+        func_name = node.declared_name()\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+    \n+        self.put(\", \".join(func_args))\n+        \n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+      \n+        self.endline(\") -> %s: ...\" % self.translate_base_type_to_py(node.base_type))\n+        \n+        return node\n+\n+    \n+    def write_decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"\n+            self.endline(\"%s.%s\" % (decorator.obj.name,decorator.attribute))\n+        \n+\n+    def annotation_Str(self, annotation):\n+        return annotation.name if hasattr(annotation,\"name\") and annotation.is_name else  annotation.string.unicode_value ",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367683528",
            "id": 1367683528,
            "in_reply_to_id": 1357163063,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhTHI",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 280,
            "original_position": 280,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683528/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367683785"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367683785"
                }
            },
            "author_association": "MEMBER",
            "body": "Well, yeah, you can have both `__cinit__` and `__init__ ` in the same class.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T07:30:36Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+        \n+        func_args = []\n+        for arg in node.declarator.args:\n+            value = \"\"\n+            if not arg.declarator.name:\n+                value = arg.base_type.name\n+            elif hasattr(arg.base_type, \"name\"):\n+                value = \"%s : %s\" % (arg.declarator.name, self.translate_base_type_to_py(arg.base_type))\n+            if (arg.default is not None or\n+                arg.default_value is not None):\n+                value += \" = ...\"\n+            func_args.append(value)\n+        \n+        self.class_func_count += 1\n+        \n+        func_name = node.declared_name()\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+    \n+        self.put(\", \".join(func_args))\n+        \n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+      \n+        self.endline(\") -> %s: ...\" % self.translate_base_type_to_py(node.base_type))\n+        \n+        return node\n+\n+    \n+    def write_decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"\n+            self.endline(\"%s.%s\" % (decorator.obj.name,decorator.attribute))\n+        \n+\n+    def annotation_Str(self, annotation):\n+        return annotation.name if hasattr(annotation,\"name\") and annotation.is_name else  annotation.string.unicode_value \n+        \n+     \n+\n+    def visit_DefNode(self,node):\n+        self.class_func_count += 1\n+        func_name = node.name\n+\n+        # TODO Change how init is being handled...\n+        if func_name == '__cinit__':\n+            func_name = '__init__'",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367683785",
            "id": 1367683785,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhTLJ",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 290,
            "original_position": 290,
            "original_start_line": 288,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683785/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683785",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367695675"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367695675"
                }
            },
            "author_association": "MEMBER",
            "body": "I probably wouldn't map them to anything for the first iteration at least - I think the main use case is helping editors know about things imported from Cython modules, and since cstructs and unions aren't importable into Python they're probably best left for now.",
            "commit_id": "bcb7c863e734a95a2b185086fb16a78a66205380",
            "created_at": "2023-10-21T09:21:27Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367695675",
            "id": 1367695675,
            "in_reply_to_id": 1367682559,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhWE7",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 159,
            "original_position": 159,
            "original_start_line": 156,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691220317,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367695675/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T09:21:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367695675",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5744/comments",
    "commit_data": [],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/5744/commits",
    "created_at": "2023-10-04T20:33:54Z",
    "diff_url": "https://github.com/cython/cython/pull/5744.diff",
    "draft": false,
    "head": {
        "label": "Vizonex:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/Vizonex/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/Vizonex/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/Vizonex/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/Vizonex/cython/branches{/branch}",
            "clone_url": "https://github.com/Vizonex/cython.git",
            "collaborators_url": "https://api.github.com/repos/Vizonex/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/Vizonex/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/Vizonex/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/Vizonex/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/Vizonex/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/Vizonex/cython/contributors",
            "created_at": "2023-09-23T17:29:32Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/Vizonex/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/Vizonex/cython/downloads",
            "events_url": "https://api.github.com/repos/Vizonex/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/Vizonex/cython/forks",
            "full_name": "Vizonex/cython",
            "git_commits_url": "https://api.github.com/repos/Vizonex/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/Vizonex/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/Vizonex/cython/git/tags{/sha}",
            "git_url": "git://github.com/Vizonex/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/Vizonex/cython/hooks",
            "html_url": "https://github.com/Vizonex/cython",
            "id": 695609121,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/Vizonex/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/Vizonex/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/Vizonex/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/Vizonex/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/Vizonex/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/Vizonex/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/Vizonex/cython/merges",
            "milestones_url": "https://api.github.com/repos/Vizonex/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "R_kgDOKXYnIQ",
            "notifications_url": "https://api.github.com/repos/Vizonex/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/Vizonex/cython/pulls{/number}",
            "pushed_at": "2025-05-11T18:40:47Z",
            "releases_url": "https://api.github.com/repos/Vizonex/cython/releases{/id}",
            "size": 72172,
            "ssh_url": "git@github.com:Vizonex/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/Vizonex/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/Vizonex/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/Vizonex/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/Vizonex/cython/subscription",
            "svn_url": "https://github.com/Vizonex/cython",
            "tags_url": "https://api.github.com/repos/Vizonex/cython/tags",
            "teams_url": "https://api.github.com/repos/Vizonex/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/Vizonex/cython/git/trees{/sha}",
            "updated_at": "2025-05-11T18:40:52Z",
            "url": "https://api.github.com/repos/Vizonex/cython",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "bcb7c863e734a95a2b185086fb16a78a66205380",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
            "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
            "followers_url": "https://api.github.com/users/Vizonex/followers",
            "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
            "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/Vizonex",
            "id": 114684698,
            "login": "Vizonex",
            "node_id": "U_kgDOBtXzGg",
            "organizations_url": "https://api.github.com/users/Vizonex/orgs",
            "received_events_url": "https://api.github.com/users/Vizonex/received_events",
            "repos_url": "https://api.github.com/users/Vizonex/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/Vizonex",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/5744",
    "id": 1542485095,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/5744",
    "labels": [],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOABDGAc5b8HRn",
    "number": 5744,
    "patch_url": "https://github.com/cython/cython/pull/5744.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/5744/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/bcb7c863e734a95a2b185086fb16a78a66205380",
    "title": "Add PyiWriter to Cython and new Cython directive 'write_stub_file'",
    "updated_at": "2025-05-11T18:39:26Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/5744",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
        "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
        "followers_url": "https://api.github.com/users/Vizonex/followers",
        "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
        "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Vizonex",
        "id": 114684698,
        "login": "Vizonex",
        "node_id": "U_kgDOBtXzGg",
        "organizations_url": "https://api.github.com/users/Vizonex/orgs",
        "received_events_url": "https://api.github.com/users/Vizonex/received_events",
        "repos_url": "https://api.github.com/users/Vizonex/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Vizonex",
        "user_view_type": "public"
    }
}