{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/5744/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5744/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/5744"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/5744"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5744/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5744"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/9e345971d4c6b4fe2d23d05b047100bb5a26ba65"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1444,
            "forks_count": 1444,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1299,
            "open_issues_count": 1299,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2024-03-25T23:52:10Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 73450,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 8812,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2024-03-26T04:54:08Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 8812,
            "watchers_count": 8812,
            "web_commit_signoff_required": false
        },
        "sha": "06f155984d80652f2b26997b09aa42a50da7c3a2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "The Demand for such a tool to exist is very high and I wanted to try my very hardest to deliver. Visual Studio Code and some other coding Ides that I may not be aware off suffer from not being able to have immediate type hint access when a compiled python file such as `.so` or `.pyd` that are compiled by Cython.  My goal was to finish what the author [ax487](https://github.com/cython/cython/pull/3818) had started and I have made some optimizations of my own to his compiler as well as added the bonus of type hint completeness to the arguments. I would've added the ability to recover return type hint annotations but we can save that for the future as this `PyiWriter` object matures a bit as I have tried to resolve missing type hint annotations labeled as `object` with no success just yet. However as long as you have provided the necessary type hints needed to your modules that shouldn't be a problem or issue and it should not be overwritten as long as the annotations or declarations are written to the `.pyx` , `.py` file. \r\n\r\n# New Directive Argument Was Added\r\n\r\nI have added in a new cython directive called `cython: write_stub_file` to invoke the PyiWriter to write the stubfiles where the pyx file is being compiled. And here is a neat little example to illustrate this.\r\n\r\nWe will call this file `test.pyx`\r\n\r\n```cython\r\n#cython: write_stub_file = True \r\ncdef class Concept:\r\n    cdef Py_ssize_t size\r\n    def __cinit__(self,Py_ssize_t size):\r\n        self.size = size\r\n```\r\n\r\nUsing the new `cython: write_stub_file` directive I have created and setting it as True will create the output named `test.pyi`\r\n```python\r\n# Python stub file generated by Cython 3.0.2\r\nclass Concept:\r\n    def __init__(self, size:int):...\r\n```\r\n\r\nThere maybe a few things missing like an output folder command but I'm pretty sure all of you could help me come up with those missing pieces. I am honored and humbled to be apart of one of the most revolutionary additions ever to Cython as of currently.\r\n\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346501988"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346501988"
                }
            },
            "author_association": "MEMBER",
            "body": "We can't assume that Cython runs on a version of Python that supports fstrings yet",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-04T21:45:05Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:\n+    func_annotations = []\n+    for arg, py_arg in zip(node.type.args, node.declarator.args):\n+        annotation = \"\"\n+        # TODO Maybe have a flag to check if were currently using \n+        # a class inside of here as an extra check?\n+        if arg.name == \"self\":\n+            annotation = arg.name\n+        else:\n+            annotation = \"%s: %s\" % (arg.name, ctype_name(arg, node))\n+        if not py_arg.default or not py_arg.default_value:\n+            # TODO: See if there is a better way of going about finding an ellipsis...\n+            annotation += \" = ...\"\n+        func_annotations.append(annotation)\n+    return func_annotations\n+\n+\n+# TODO Find something smarter than a variable stack, I'm not sure what it's original purpose was for - Vizonex\n+\n+# FIXME I plan to make this a little bit more simillar to \n+# the Embedsignature Transform in the future but for now this will do...\n+\n+\n+# FIXME I'm planning on dropping these different annotaions I have in the file if\n+# they cannot be handled by earlier versions than 3.9 of python... \n+# they are currently just here to help me figure out how to write this all \n+# down since Im working inside of Vs Code.\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+        # TODO Maybe have arguments \n+        # for how shadow.pyi is implemented be passed into here \n+        # if we want them to be even imported at \n+        # all and if so C Variables should be translated as such...\n+    \n+        # TODO in the future allow context variables to be passed so that a directive can be used to \n+        # pass along docstring infromation so tools such as sphinx can generate clean documentation...\n+\n+        self.translation_table:dict[str,str] = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing : bool = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype:PyrexTypes.PyrexType):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            py_name = ctype.py_type_name()\n+            if py_name:\n+                # Try returning the python type name and put it into quotes \n+                # incase the object has not been registered yet....\n+                return py_name if py_name in self.stack else f\"{py_name!r}\"\n+\n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base:CSimpleBaseTypeNode\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # execpt for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node: ModuleNode):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            # TODO See if we should or shouldn't report back about our stubfiles being written off....\n+            print(f\"Writing {result}.pyi ...\") ",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346501988",
            "id": 1346501988,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QQf1k",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 163,
            "original_position": 163,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658537119,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346501988/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-04T21:57:06Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346501988",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346503464"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346503464"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't necessarily think we should base the behaviour on the argument name - `self` is a convention rather than a rule",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-04T21:46:54Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:\n+    func_annotations = []\n+    for arg, py_arg in zip(node.type.args, node.declarator.args):\n+        annotation = \"\"\n+        # TODO Maybe have a flag to check if were currently using \n+        # a class inside of here as an extra check?\n+        if arg.name == \"self\":",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346503464",
            "id": 1346503464,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QQgMo",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 52,
            "original_position": 52,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658537119,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346503464/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-04T21:56:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346503464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346503891"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346503891"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd avoid `import *`",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-04T21:47:27Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346503891",
            "id": 1346503891,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QQgTT",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658537119,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346503891/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-04T21:56:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346503891",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346504570"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346504570"
                }
            },
            "author_association": "MEMBER",
            "body": "We also can't assume that we run on a version of Python that supports type annotations ",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-04T21:48:18Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346504570",
            "id": 1346504570,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QQgd6",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 46,
            "original_position": 46,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658537119,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346504570/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-04T21:56:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346504570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346509833"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346509833"
                }
            },
            "author_association": "MEMBER",
            "body": "Further to my comment about not supporting annotations, I'm also not keen on `node : DefNode` - it's absolutely explicit from the function already so it isn't adding useful information.\r\n\r\nRight now it's irrelevant (since we can't have it) but it's definitely the type of annotation I'd be keen to avoid in future",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-04T21:52:43Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:\n+    func_annotations = []\n+    for arg, py_arg in zip(node.type.args, node.declarator.args):\n+        annotation = \"\"\n+        # TODO Maybe have a flag to check if were currently using \n+        # a class inside of here as an extra check?\n+        if arg.name == \"self\":\n+            annotation = arg.name\n+        else:\n+            annotation = \"%s: %s\" % (arg.name, ctype_name(arg, node))\n+        if not py_arg.default or not py_arg.default_value:\n+            # TODO: See if there is a better way of going about finding an ellipsis...\n+            annotation += \" = ...\"\n+        func_annotations.append(annotation)\n+    return func_annotations\n+\n+\n+# TODO Find something smarter than a variable stack, I'm not sure what it's original purpose was for - Vizonex\n+\n+# FIXME I plan to make this a little bit more simillar to \n+# the Embedsignature Transform in the future but for now this will do...\n+\n+\n+# FIXME I'm planning on dropping these different annotaions I have in the file if\n+# they cannot be handled by earlier versions than 3.9 of python... \n+# they are currently just here to help me figure out how to write this all \n+# down since Im working inside of Vs Code.\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+        # TODO Maybe have arguments \n+        # for how shadow.pyi is implemented be passed into here \n+        # if we want them to be even imported at \n+        # all and if so C Variables should be translated as such...\n+    \n+        # TODO in the future allow context variables to be passed so that a directive can be used to \n+        # pass along docstring infromation so tools such as sphinx can generate clean documentation...\n+\n+        self.translation_table:dict[str,str] = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing : bool = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype:PyrexTypes.PyrexType):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            py_name = ctype.py_type_name()\n+            if py_name:\n+                # Try returning the python type name and put it into quotes \n+                # incase the object has not been registered yet....\n+                return py_name if py_name in self.stack else f\"{py_name!r}\"\n+\n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base:CSimpleBaseTypeNode\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # execpt for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node: ModuleNode):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            # TODO See if we should or shouldn't report back about our stubfiles being written off....\n+            print(f\"Writing {result}.pyi ...\") \n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+        return node\n+        \n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node:CDefExternNode):\n+        self.visitchildren(node)\n+\n+    def visit_CEnumDefNode(self, node:CEnumDefNode):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum acessable to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visable in the final product beacuse \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node:CTypeDefNode):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node:CStructOrUnionDefNode):\n+        # XXX : Currenlty, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node: CVarDefNode):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outisde should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incomming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node: ImportNode):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+\n+    def visit_SingleAssignmentNode(self, node: SingleAssignmentNode): # type: ignore\n+        if not isinstance(node.rhs, ImportNode):\n+            return node\n+\n+        module_name = node.rhs.module_name.value\n+\n+        parent_module = module_name\n+\n+        pos = module_name.find('.')\n+\n+        if pos != -1:\n+            parent_module = module_name[:pos]\n+        \n+        imported_name = node.lhs.name\n+\n+        if parent_module == imported_name:\n+            self.visitchildren(node)\n+            return node\n+\n+        self.putline(\"import %s as %s\" % (module_name, imported_name))\n+        return node \n+    \n+    # Optimized orginal code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the orginal pull request needed to be cleaned up...\n+\n+    def write_class(self, node, class_name):\n+        print(node.__dict__)\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode):\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.put(\":\")\n+\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node: CClassDefNode):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node:PyClassDefNode):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node: CFuncDefNode):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+\n+        self.class_func_count += 1\n+\n+        func_name = node.declared_name()\n+\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+        # Cleaned up alot of what the orginal author did by making a new function\n+        self.put(\", \".join(translate_annotations(node)))\n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+        self.endline(\") -> %s: ...\" % ctype_name(node.type.return_type))\n+        return node\n+\n+    def print_Decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"\n+            self.endline(\"%s.%s\" % (decorator.obj.name,decorator.attribute))\n+        \n+\n+    def annotation_Str(self, annotation:ExprNode) -> str:\n+        return annotation.name if hasattr(annotation,\"name\") and annotation.is_name else  annotation.string.unicode_value \n+        \n+     \n+\n+    def visit_DefNode(self,node:DefNode):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346509833",
            "id": 1346509833,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QQhwJ",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 335,
            "original_position": 335,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658537119,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346509833/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-04T21:56:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346509833",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346687034"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346687034"
                }
            },
            "author_association": "NONE",
            "body": "I'll be sure to fix all of this then. Thank you for your input",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-05T02:07:44Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:\n+    func_annotations = []\n+    for arg, py_arg in zip(node.type.args, node.declarator.args):\n+        annotation = \"\"\n+        # TODO Maybe have a flag to check if were currently using \n+        # a class inside of here as an extra check?\n+        if arg.name == \"self\":\n+            annotation = arg.name\n+        else:\n+            annotation = \"%s: %s\" % (arg.name, ctype_name(arg, node))\n+        if not py_arg.default or not py_arg.default_value:\n+            # TODO: See if there is a better way of going about finding an ellipsis...\n+            annotation += \" = ...\"\n+        func_annotations.append(annotation)\n+    return func_annotations\n+\n+\n+# TODO Find something smarter than a variable stack, I'm not sure what it's original purpose was for - Vizonex\n+\n+# FIXME I plan to make this a little bit more simillar to \n+# the Embedsignature Transform in the future but for now this will do...\n+\n+\n+# FIXME I'm planning on dropping these different annotaions I have in the file if\n+# they cannot be handled by earlier versions than 3.9 of python... \n+# they are currently just here to help me figure out how to write this all \n+# down since Im working inside of Vs Code.\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+        # TODO Maybe have arguments \n+        # for how shadow.pyi is implemented be passed into here \n+        # if we want them to be even imported at \n+        # all and if so C Variables should be translated as such...\n+    \n+        # TODO in the future allow context variables to be passed so that a directive can be used to \n+        # pass along docstring infromation so tools such as sphinx can generate clean documentation...\n+\n+        self.translation_table:dict[str,str] = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing : bool = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype:PyrexTypes.PyrexType):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            py_name = ctype.py_type_name()\n+            if py_name:\n+                # Try returning the python type name and put it into quotes \n+                # incase the object has not been registered yet....\n+                return py_name if py_name in self.stack else f\"{py_name!r}\"\n+\n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base:CSimpleBaseTypeNode\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # execpt for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node: ModuleNode):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            # TODO See if we should or shouldn't report back about our stubfiles being written off....\n+            print(f\"Writing {result}.pyi ...\") \n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+        return node\n+        \n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node:CDefExternNode):\n+        self.visitchildren(node)\n+\n+    def visit_CEnumDefNode(self, node:CEnumDefNode):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum acessable to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visable in the final product beacuse \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node:CTypeDefNode):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node:CStructOrUnionDefNode):\n+        # XXX : Currenlty, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node: CVarDefNode):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outisde should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incomming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node: ImportNode):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+\n+    def visit_SingleAssignmentNode(self, node: SingleAssignmentNode): # type: ignore\n+        if not isinstance(node.rhs, ImportNode):\n+            return node\n+\n+        module_name = node.rhs.module_name.value\n+\n+        parent_module = module_name\n+\n+        pos = module_name.find('.')\n+\n+        if pos != -1:\n+            parent_module = module_name[:pos]\n+        \n+        imported_name = node.lhs.name\n+\n+        if parent_module == imported_name:\n+            self.visitchildren(node)\n+            return node\n+\n+        self.putline(\"import %s as %s\" % (module_name, imported_name))\n+        return node \n+    \n+    # Optimized orginal code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the orginal pull request needed to be cleaned up...\n+\n+    def write_class(self, node, class_name):\n+        print(node.__dict__)\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode):\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.put(\":\")\n+\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node: CClassDefNode):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node:PyClassDefNode):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node: CFuncDefNode):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+\n+        self.class_func_count += 1\n+\n+        func_name = node.declared_name()\n+\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+        # Cleaned up alot of what the orginal author did by making a new function\n+        self.put(\", \".join(translate_annotations(node)))\n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+        self.endline(\") -> %s: ...\" % ctype_name(node.type.return_type))\n+        return node\n+\n+    def print_Decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"\n+            self.endline(\"%s.%s\" % (decorator.obj.name,decorator.attribute))\n+        \n+\n+    def annotation_Str(self, annotation:ExprNode) -> str:\n+        return annotation.name if hasattr(annotation,\"name\") and annotation.is_name else  annotation.string.unicode_value \n+        \n+     \n+\n+    def visit_DefNode(self,node:DefNode):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346687034",
            "id": 1346687034,
            "in_reply_to_id": 1346509833,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QRNA6",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 335,
            "original_position": 335,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658772952,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346687034/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T02:07:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346687034",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346708741"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346708741"
                }
            },
            "author_association": "NONE",
            "body": "I agree, I just don't know how to implement it yet, but I'll soon figure it out.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-05T02:44:53Z",
            "diff_hunk": "@@ -0,0 +1,485 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import *\n+from .Compiler.ExprNodes import * \n+from .Compiler.ModuleNode import ModuleNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+import cython \n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimzations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+# if sys.version_info >= (3, 9):\n+#     typing_module = \"typing\"\n+# else:\n+#     typing_module = \"typing_extensions\"\n+\n+def ctype_name(arg, node:\"Node\") -> str:\n+\n+    # TODO Make a better conversion function...\n+    if arg.type and hasattr(arg.type, \"name\"):\n+        # Used C declared type...\n+        # TODO see about using a check to see if users wants to include cython's shadow varaibales...\n+        return arg.type.name\n+        \n+    py_name = node.type.return_type.py_type_name() # type: ignore\n+    if \"(int, long)\" == py_name:\n+        return \"int\"\n+    \n+    return py_name\n+\n+\n+def translate_annotations(node) -> list[str]:\n+    func_annotations = []\n+    for arg, py_arg in zip(node.type.args, node.declarator.args):\n+        annotation = \"\"\n+        # TODO Maybe have a flag to check if were currently using \n+        # a class inside of here as an extra check?\n+        if arg.name == \"self\":",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346708741",
            "id": 1346708741,
            "in_reply_to_id": 1346503464,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QRSUF",
            "original_commit_id": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "original_line": 52,
            "original_position": 52,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1658797211,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346708741/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T02:44:53Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346708741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346974562"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346974562"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n# TODO Save this implementation commented out if required....\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-05T08:00:48Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346974562",
            "id": 1346974562,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSTNi",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346974562/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346974562",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346980478"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346980478"
                }
            },
            "author_association": "MEMBER",
            "body": "These relative imports look wrong. We're in the `Cython.Compiler` package already.\r\n```suggestion\r\nfrom . import Version\r\nfrom .Nodes import CNameDeclaratorNode\r\nfrom .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\r\nfrom ..CodeWriter import DeclarationWriter\r\nfrom .ParseTreeTransforms import CythonTransform\r\nfrom . import PyrexTypes\r\n```\r\nPlease don't import `Main` because it imports everything and thus necessarily leads to circular imports.\r\nI'd also avoid importing names directly from `Nodes` and `ExprNodes` because they may also suffer from circular imports. Just import the module and use `ExprNodes.NameNode` etc.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-05T08:05:42Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346980478",
            "id": 1346980478,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSUp-",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 1,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346980478/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346980478",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346981247"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346981247"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    def __init__(self, context):\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-05T08:06:21Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346981247",
            "id": 1346981247,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSU1_",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346981247/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346981247",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346984519"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346984519"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd always make sure that files end with a newline.\r\n```suggestion\r\n                w.write(\"\\n\".join(result.lines))\r\n                w.write(\"\\n\")\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-05T08:08:01Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+            \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346984519",
            "id": 1346984519,
            "line": 121,
            "node_id": "PRRC_kwDOABDGAc5QSVpH",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 112,
            "original_position": 112,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 121,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346984519/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346984519",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346986172"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346986172"
                }
            },
            "author_association": "MEMBER",
            "body": "Wouldn't this write files like `pkg1.pkg2.module.pyi`? They should rather be created in the package folders.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-05T08:09:14Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+            \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346986172",
            "id": 1346986172,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSWC8",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 111,
            "original_position": 111,
            "original_start_line": 110,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346986172/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346986172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346987926"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346987926"
                }
            },
            "author_association": "MEMBER",
            "body": "This seems unnecessary. If it didn't fail, it succeeded, obviously.\r\n```suggestion\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-05T08:10:34Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+            \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+            print(\"pyi file written\")",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346987926",
            "id": 1346987926,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSWeW",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 113,
            "original_position": 113,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346987926/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346987926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1346991631"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1346991631"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    'write_stub_file': False,  # write a Python`.pyi` stub file with typing information\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-05T08:13:20Z",
            "diff_hunk": "@@ -228,7 +228,8 @@ def copy_inherited_directives(outer_directives, **new_directives):\n     'fast_gil': False,\n     'cpp_locals': False,  # uses std::optional for C++ locals, so that they work more like Python locals\n     'legacy_implicit_noexcept': False,\n-\n+    'write_stub_file':False, # used to allow the writing python stubfile. `.pyi` file",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1346991631",
            "id": 1346991631,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QSXYP",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 231,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Compiler/Options.py",
            "position": null,
            "pull_request_review_id": 1659151095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346991631/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T08:15:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1346991631",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1347771275"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1347771275"
                }
            },
            "author_association": "NONE",
            "body": "Smart Idea actually. Why did I not think of that before.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-05T17:37:59Z",
            "diff_hunk": "@@ -0,0 +1,425 @@\n+from .Compiler import Version\n+from .Compiler.Nodes import CNameDeclaratorNode\n+from .Compiler.ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from .CodeWriter import DeclarationWriter\n+from .Compiler.ParseTreeTransforms import CythonTransform\n+from .Compiler import PyrexTypes\n+from .Compiler.Main import Context\n+from .Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implemenation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code acess to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context:Context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+    \n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+            \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+\n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(node.full_module_name + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1347771275",
            "id": 1347771275,
            "in_reply_to_id": 1346984519,
            "line": 121,
            "node_id": "PRRC_kwDOABDGAc5QVVuL",
            "original_commit_id": "a35c490b9145930495525a537c40c0dbf9150071",
            "original_line": 112,
            "original_position": 112,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 121,
            "pull_request_review_id": 1660392531,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1347771275/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-05T17:38:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1347771275",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1349204685"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1349204685"
                }
            },
            "author_association": "MEMBER",
            "body": "`CythonTransform` is in `Visitor`",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-06T18:51:04Z",
            "diff_hunk": "@@ -0,0 +1,436 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .ParseTreeTransforms import CythonTransform",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1349204685",
            "id": 1349204685,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5QazrN",
            "original_commit_id": "de311c045d2ff7a319f0958d5f803ecfa700747b",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1662625033,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1349204685/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-06T18:51:05Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1349204685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357140163"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357140163"
                }
            },
            "author_association": "MEMBER",
            "body": "Probably not useful unless you intend this file to be compiled with Cython. I'd think it shouldn't be at this stage - it's not a \"core\" feature so doesn't really need speeding up. If you do intend it to be compiled then the file needs adding to `setup.py`.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:07:32Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357140163",
            "id": 1357140163,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5FDD",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 12,
            "original_position": 12,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357140163/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357140163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357140990"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357140990"
                }
            },
            "author_association": "MEMBER",
            "body": "Note that `error` and `warning` aren't even imported, so declaring them as object probably isn't helpful (but again, I don't think you need this line)",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:08:24Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357140990",
            "id": 1357140990,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5FP-",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357140990/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357140990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357142653"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357142653"
                }
            },
            "author_association": "MEMBER",
            "body": "We don't assume that the version of Python that Cython is run in is necessarily the same as the version of Python the generated files are used in. Can this go in the stub files instead? (is this supported by stub files?)",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:10:01Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357142653",
            "id": 1357142653,
            "line": 38,
            "node_id": "PRRC_kwDOABDGAc5Q5Fp9",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 38,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357142653/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357142653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357143691"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357143691"
                }
            },
            "author_association": "MEMBER",
            "body": "`if ctype.is_builtin_type`",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:11:00Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357143691",
            "id": 1357143691,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5F6L",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 61,
            "original_position": 61,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357143691/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357143691",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357145080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357145080"
                }
            },
            "author_association": "MEMBER",
            "body": "Most of these are defined as global constants in PyrexTypes. This one you can test with\r\n\r\n```\r\nif ctype is c_void_type:\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:12:32Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357145080",
            "id": 1357145080,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5GP4",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 64,
            "original_position": 64,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145080/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357145746"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357145746"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not completely sure how you'd ever get to this line",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:13:15Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357145746",
            "id": 1357145746,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5GaS",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 65,
            "original_position": 65,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145746/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145746",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357145905"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357145905"
                }
            },
            "author_association": "MEMBER",
            "body": "`ctype.is_int`",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:13:23Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357145905",
            "id": 1357145905,
            "line": 76,
            "node_id": "PRRC_kwDOABDGAc5Q5Gcx",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 69,
            "original_position": 69,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 76,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145905/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357145905",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357146166"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357146166"
                }
            },
            "author_association": "MEMBER",
            "body": "`ctype.is_float`",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:13:38Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357146166",
            "id": 1357146166,
            "line": 79,
            "node_id": "PRRC_kwDOABDGAc5Q5Gg2",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 72,
            "original_position": 72,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 79,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357146166/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357146166",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357147578"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357147578"
                }
            },
            "author_association": "MEMBER",
            "body": "`ctype.is_pyobject`\r\n\r\nI'd also check to see if the logic for this and `BuiltinObjectType` can be combined (it's possible it can't, but worth a look)",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:15:04Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357147578",
            "id": 1357147578,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5G26",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 75,
            "original_position": 75,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357147578/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357147578",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357148795"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357148795"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm suspicious of most of these comparisons to `base.name` - again, it should be possible to identify without checking the name (as above)",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:16:25Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357148795",
            "id": 1357148795,
            "line": 94,
            "node_id": "PRRC_kwDOABDGAc5Q5HJ7",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 91,
            "original_position": 91,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 94,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357148795/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357148795",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357152403"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357152403"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think you use the directives tracking of `CythonTransform`. I wonder if this should inherit from `TreeVisitor` since I don't think it's intended to change the tree - just to go over it. That'd eliminate any possibility of accidentally changing the tree.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:20:09Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357152403",
            "id": 1357152403,
            "line": 44,
            "node_id": "PRRC_kwDOABDGAc5Q5ICT",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 44,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357152403/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357152403",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357152841"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357152841"
                }
            },
            "author_association": "MEMBER",
            "body": "Unused probably.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:20:38Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357152841",
            "id": 1357152841,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5IJJ",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357152841/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357152841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357159080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357159080"
                }
            },
            "author_association": "MEMBER",
            "body": "I also don't know how much of `DeclarationWriter` you use - possibly just things like `write/indent`. I wonder if it would be worth factoring those out so you can inherit without bringing in all the `visit_` functions?",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:27:07Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357159080",
            "id": 1357159080,
            "in_reply_to_id": 1357152403,
            "line": 44,
            "node_id": "PRRC_kwDOABDGAc5Q5Jqo",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 44,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357159080/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357159080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357162274"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357162274"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd be worried how this interacts with https://peps.python.org/pep-0614/. There's definitely cases where decorators aren't attributes or names now.\r\n\r\nI'm not quite sure how decorators mix with stub files though.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:30:02Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+        \n+        func_args = []\n+        for arg in node.declarator.args:\n+            value = \"\"\n+            if not arg.declarator.name:\n+                value = arg.base_type.name\n+            elif hasattr(arg.base_type, \"name\"):\n+                value = \"%s : %s\" % (arg.declarator.name, self.translate_base_type_to_py(arg.base_type))\n+            if (arg.default is not None or\n+                arg.default_value is not None):\n+                value += \" = ...\"\n+            func_args.append(value)\n+        \n+        self.class_func_count += 1\n+        \n+        func_name = node.declared_name()\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+    \n+        self.put(\", \".join(func_args))\n+        \n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+      \n+        self.endline(\") -> %s: ...\" % self.translate_base_type_to_py(node.base_type))\n+        \n+        return node\n+\n+    \n+    def write_decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357162274",
            "id": 1357162274,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5Kci",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 275,
            "original_position": 275,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357162274/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357162274",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1357163063"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1357163063"
                }
            },
            "author_association": "MEMBER",
            "body": "just `annotation.is_name` - I don't think you need to do `hasattr` and `is_name`",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-12T17:30:52Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+        \n+        func_args = []\n+        for arg in node.declarator.args:\n+            value = \"\"\n+            if not arg.declarator.name:\n+                value = arg.base_type.name\n+            elif hasattr(arg.base_type, \"name\"):\n+                value = \"%s : %s\" % (arg.declarator.name, self.translate_base_type_to_py(arg.base_type))\n+            if (arg.default is not None or\n+                arg.default_value is not None):\n+                value += \" = ...\"\n+            func_args.append(value)\n+        \n+        self.class_func_count += 1\n+        \n+        func_name = node.declared_name()\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+    \n+        self.put(\", \".join(func_args))\n+        \n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+      \n+        self.endline(\") -> %s: ...\" % self.translate_base_type_to_py(node.base_type))\n+        \n+        return node\n+\n+    \n+    def write_decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"\n+            self.endline(\"%s.%s\" % (decorator.obj.name,decorator.attribute))\n+        \n+\n+    def annotation_Str(self, annotation):\n+        return annotation.name if hasattr(annotation,\"name\") and annotation.is_name else  annotation.string.unicode_value ",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1357163063",
            "id": 1357163063,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Q5Ko3",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 280,
            "original_position": 280,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1674727023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357163063/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-12T17:31:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1357163063",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359800507"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359800507"
                }
            },
            "author_association": "MEMBER",
            "body": "Perhaps I'm missing something, but `base` is already a type, so I don't understand what this line does",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-15T07:25:16Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359800507",
            "id": 1359800507,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RDOi7",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 105,
            "original_position": 105,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359800507/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359800507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359800826"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359800826"
                }
            },
            "author_association": "MEMBER",
            "body": "`if base.name in self.translation_table`",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-15T07:27:52Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359800826",
            "id": 1359800826,
            "line": 91,
            "node_id": "PRRC_kwDOABDGAc5RDOn6",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 88,
            "original_position": 88,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 91,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359800826/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359800826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359802064"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359802064"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```\r\n\r\nDon't think this comment is needed for future understanding of the code",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-15T07:32:25Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359802064",
            "id": 1359802064,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RDO7Q",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 204,
            "original_position": 204,
            "original_start_line": 202,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359802064/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359802064",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359802357"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359802357"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think `node.bases` needs a `getattr` - it's a child of both `PyClassDefNode` and `CClassDefNode`",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-15T07:34:54Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359802357",
            "id": 1359802357,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RDO_1",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 210,
            "original_position": 210,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359802357/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359802357",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359803308"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359803308"
                }
            },
            "author_association": "MEMBER",
            "body": "Not everything in a tuple node will be a name. E.g.:\r\n\r\n```\r\nimport module\r\n\r\nclass MyClass(module.BaseClass):\r\n   pass\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-15T07:37:15Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359803308",
            "id": 1359803308,
            "line": 213,
            "node_id": "PRRC_kwDOABDGAc5RDPOs",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 212,
            "original_position": 212,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 213,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359803308/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359803308",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1359803406"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1359803406"
                }
            },
            "author_association": "MEMBER",
            "body": "Classes can be nested",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-15T07:38:04Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1359803406",
            "id": 1359803406,
            "line": 217,
            "node_id": "PRRC_kwDOABDGAc5RDPQO",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 216,
            "original_position": 216,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 217,
            "pull_request_review_id": 1678708002,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359803406/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-15T07:46:37Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1359803406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367677314"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367677314"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is this done at this early stage and not at the end of the pipeline? Especially after `AdjustDefByDirectives` and `AnalyseExpressionsTransform` ?",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T06:35:55Z",
            "diff_hunk": "@@ -188,6 +188,7 @@ def create_pipeline(context, mode, exclude_classes=()):\n         _specific_post_parse,\n         TrackNumpyAttributes(),\n         InterpretCompilerDirectives(context, context.compiler_directives),\n+        PyiWriter(context),",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367677314",
            "id": 1367677314,
            "line": 189,
            "node_id": "PRRC_kwDOABDGAc5RhRmC",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 191,
            "original_position": 13,
            "original_start_line": null,
            "path": "Cython/Compiler/Pipeline.py",
            "position": 13,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677314/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677314",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367677447"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367677447"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T06:37:29Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367677447",
            "id": 1367677447,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhRoH",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": 41,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677447/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677447",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367677728"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367677728"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah, `DeclarationWriter` deals a lot with Cython's `cdef` declarations, so splitting out a Python compatible thing seems like a good idea. It would probably do a bit more than just indentation, maybe not that much more.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T06:40:23Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367677728",
            "id": 1367677728,
            "in_reply_to_id": 1357152403,
            "line": 44,
            "node_id": "PRRC_kwDOABDGAc5RhRsg",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 44,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677728/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367677728",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367678329"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367678329"
                }
            },
            "author_association": "MEMBER",
            "body": "I would have expected a difference between argument types and return types regarding the conversion. Are they really always the same?",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T06:44:56Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367678329",
            "id": 1367678329,
            "line": 67,
            "node_id": "PRRC_kwDOABDGAc5RhR15",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 58,
            "original_position": 58,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 67,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678329/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678329",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367678405"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367678405"
                }
            },
            "author_association": "MEMBER",
            "body": "There's also `bint` -> `bool`, and you can handle `int`, `float` and `complex` right here as well.\r\n```suggestion\r\n        if ctype.is_numeric or ctype.is_builtin_type:\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T06:45:39Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367678405",
            "id": 1367678405,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhR3F",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 61,
            "original_position": 61,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678405/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678405",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367678461"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367678461"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if ctype is c_void_type:\r\n            return \"None\"\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T06:46:12Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367678461",
            "id": 1367678461,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhR39",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 67,
            "original_position": 67,
            "original_start_line": 64,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678461/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367678461",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367681538"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367681538"
                }
            },
            "author_association": "MEMBER",
            "body": "Simply calling `ctype.py_type_name()` doesn't work well for extension types, I think.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T07:11:37Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367681538",
            "id": 1367681538,
            "in_reply_to_id": 1357147578,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhSoC",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 75,
            "original_position": 75,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681538/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681538",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367681610"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367681610"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T07:12:17Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367681610",
            "id": 1367681610,
            "line": 81,
            "node_id": "PRRC_kwDOABDGAc5RhSpK",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 74,
            "original_position": 74,
            "original_start_line": 69,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 81,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681610/reactions"
            },
            "side": "RIGHT",
            "start_line": 76,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367681918"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367681918"
                }
            },
            "author_association": "MEMBER",
            "body": "A try-import might work in the stub file.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T07:15:07Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367681918",
            "id": 1367681918,
            "in_reply_to_id": 1357142653,
            "line": 38,
            "node_id": "PRRC_kwDOABDGAc5RhSt-",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 38,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681918/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367681918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367682094"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367682094"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            pyi_path = node.full_module_name.replace(\".\", \"/\") + '.pyi'\r\n            print(\"writing file %s ...\" % pyi_path)\r\n            with open_new_file(pyi_path) as w:\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T07:17:02Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367682094",
            "id": 1367682094,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhSwu",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 117,
            "original_position": 117,
            "original_start_line": 115,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682094/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682094",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367682320"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367682320"
                }
            },
            "author_association": "MEMBER",
            "body": "If these involve cimporting types, we might still need an actual import here in some cases.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T07:18:28Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367682320",
            "id": 1367682320,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhS0Q",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 130,
            "original_position": 130,
            "original_start_line": 126,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682320/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682320",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367682559"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367682559"
                }
            },
            "author_association": "MEMBER",
            "body": "We may consider mapping these to a namedtuple or dataclass.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T07:20:41Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367682559",
            "id": 1367682559,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhS3_",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 159,
            "original_position": 159,
            "original_start_line": 156,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682559/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367682997"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367682997"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        if node.bases and node.bases.is_sequence_constructor and node.bases.args:\r\n```",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T07:24:12Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367682997",
            "id": 1367682997,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhS-1",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 210,
            "original_position": 210,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682997/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367682997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367683162"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367683162"
                }
            },
            "author_association": "MEMBER",
            "body": "Recursion by visiting the args nodes would probably solve this.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T07:25:37Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367683162",
            "id": 1367683162,
            "in_reply_to_id": 1359803308,
            "line": 213,
            "node_id": "PRRC_kwDOABDGAc5RhTBa",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 212,
            "original_position": 212,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": 213,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683162/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367683433"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367683433"
                }
            },
            "author_association": "MEMBER",
            "body": "Recursion again, if you want to properly serialise the stub files. But yeah, not sure if that's really intended here.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T07:27:36Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+        \n+        func_args = []\n+        for arg in node.declarator.args:\n+            value = \"\"\n+            if not arg.declarator.name:\n+                value = arg.base_type.name\n+            elif hasattr(arg.base_type, \"name\"):\n+                value = \"%s : %s\" % (arg.declarator.name, self.translate_base_type_to_py(arg.base_type))\n+            if (arg.default is not None or\n+                arg.default_value is not None):\n+                value += \" = ...\"\n+            func_args.append(value)\n+        \n+        self.class_func_count += 1\n+        \n+        func_name = node.declared_name()\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+    \n+        self.put(\", \".join(func_args))\n+        \n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+      \n+        self.endline(\") -> %s: ...\" % self.translate_base_type_to_py(node.base_type))\n+        \n+        return node\n+\n+    \n+    def write_decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367683433",
            "id": 1367683433,
            "in_reply_to_id": 1357162274,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhTFp",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 275,
            "original_position": 275,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683433/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683433",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367683528"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367683528"
                }
            },
            "author_association": "MEMBER",
            "body": "Recursion again.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T07:29:00Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+        \n+        func_args = []\n+        for arg in node.declarator.args:\n+            value = \"\"\n+            if not arg.declarator.name:\n+                value = arg.base_type.name\n+            elif hasattr(arg.base_type, \"name\"):\n+                value = \"%s : %s\" % (arg.declarator.name, self.translate_base_type_to_py(arg.base_type))\n+            if (arg.default is not None or\n+                arg.default_value is not None):\n+                value += \" = ...\"\n+            func_args.append(value)\n+        \n+        self.class_func_count += 1\n+        \n+        func_name = node.declared_name()\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+    \n+        self.put(\", \".join(func_args))\n+        \n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+      \n+        self.endline(\") -> %s: ...\" % self.translate_base_type_to_py(node.base_type))\n+        \n+        return node\n+\n+    \n+    def write_decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"\n+            self.endline(\"%s.%s\" % (decorator.obj.name,decorator.attribute))\n+        \n+\n+    def annotation_Str(self, annotation):\n+        return annotation.name if hasattr(annotation,\"name\") and annotation.is_name else  annotation.string.unicode_value ",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367683528",
            "id": 1367683528,
            "in_reply_to_id": 1357163063,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhTHI",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 280,
            "original_position": 280,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683528/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367683785"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367683785"
                }
            },
            "author_association": "MEMBER",
            "body": "Well, yeah, you can have both `__cinit__` and `__init__ ` in the same class.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T07:30:36Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node\n+        \n+\n+    def visit_CVarDefNode(self, node):\n+\n+        # if they aren't public or readonly then the variable inside of a class \n+        # or outside should be ignored by default...\n+\n+        if node.visibility in [\"readonly\", \"public\"]:\n+\n+            # TODO handle ctypedef nodes and give them a \n+            # new type-registry system to help translate \n+            # all incoming variables... \n+\n+            py_name = self.translate_base_type_to_py(node.base_type)\n+            \n+            # Final check...\n+            if py_name is not None:\n+                # Write in all the objects listed on the defined line...\n+                for d in node.declarators:\n+                    self.putline(\"%s: %s\" % (d.name, py_name))\n+    \n+        return node\n+\n+\n+    \n+\n+\n+    def visit_ImportNode(self, node):\n+        module_name = node.module_name.value\n+\n+        if not node.name_list:\n+            self.putline(\"import %s\" % module_name) \n+        else:\n+            all_imported_children = \", \".join((arg.value for arg in node.name_list.args))\n+\n+            if node.level > 0:\n+                module_name = \"%s%s\" % (\".\" * node.level , module_name)\n+\n+            self.putline(\"from %s import %s\" % (module_name, all_imported_children))\n+\n+        return node\n+\n+    # Optimized original code by having there be one function to take \n+    # the place of two of them I could see what Scoder meant when \n+    # said the original pull request needed to be cleaned up...\n+\n+    \n+    def write_class(self, node, class_name):\n+        self.endline()\n+        self.put(\"class %s\" % class_name)\n+        if getattr(node,\"bases\",None) and isinstance(node.bases, TupleNode) and node.bases.args:\n+            self.put(\"(\")\n+            self.put(\",\".join([name.name for name in node.bases.args]))\n+            self.endline(\"):\")\n+        else:\n+            self.endline(\":\")\n+        self.class_func_count = 0\n+        self._visitchildren_indented(node)\n+        if self.class_func_count < 1:\n+            self.indent()\n+            self.putline(\"pass\")\n+            self.dedent()\n+        self.class_func_count = 0\n+        self.emptyline()\n+        return node \n+    \n+    # I have tried to merege these before via visit_ClassDefNode but it causes the system to break so this \n+    # was the best I could do to minigate the problem - Vizonex \n+    def visit_CClassDefNode(self, node):\n+        return self.write_class(node, node.class_name)\n+\n+    def visit_PyClassDefNode(self, node):\n+        return self.write_class(node, node.name)\n+\n+    def visit_CFuncDefNode(self, node):\n+        # cdefs are for C only...\n+        if not node.overridable:\n+            return node \n+        \n+        func_args = []\n+        for arg in node.declarator.args:\n+            value = \"\"\n+            if not arg.declarator.name:\n+                value = arg.base_type.name\n+            elif hasattr(arg.base_type, \"name\"):\n+                value = \"%s : %s\" % (arg.declarator.name, self.translate_base_type_to_py(arg.base_type))\n+            if (arg.default is not None or\n+                arg.default_value is not None):\n+                value += \" = ...\"\n+            func_args.append(value)\n+        \n+        self.class_func_count += 1\n+        \n+        func_name = node.declared_name()\n+        self.startline()\n+        self.put(\"def %s(\" % func_name)\n+    \n+        self.put(\", \".join(func_args))\n+        \n+        # TODO Maybe Try passing docstrings in the future for vscode users' sake\n+        # or have it also be a compiler argument?...\n+      \n+        self.endline(\") -> %s: ...\" % self.translate_base_type_to_py(node.base_type))\n+        \n+        return node\n+\n+    \n+    def write_decorator(self, decorator):\n+        if isinstance(decorator, CallNode):\n+            return\n+        \n+        self.startline(\"@\")\n+        if isinstance(decorator, NameNode):\n+            self.endline(\"%s\" % decorator.name)\n+        else:\n+            assert isinstance(decorator, AttributeNode) , \"Decorator was not an attribute node...\"\n+            self.endline(\"%s.%s\" % (decorator.obj.name,decorator.attribute))\n+        \n+\n+    def annotation_Str(self, annotation):\n+        return annotation.name if hasattr(annotation,\"name\") and annotation.is_name else  annotation.string.unicode_value \n+        \n+     \n+\n+    def visit_DefNode(self,node):\n+        self.class_func_count += 1\n+        func_name = node.name\n+\n+        # TODO Change how init is being handled...\n+        if func_name == '__cinit__':\n+            func_name = '__init__'",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367683785",
            "id": 1367683785,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhTLJ",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 290,
            "original_position": 290,
            "original_start_line": 288,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691200367,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683785/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T07:36:38Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367683785",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5744#discussion_r1367695675"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5744"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1367695675"
                }
            },
            "author_association": "MEMBER",
            "body": "I probably wouldn't map them to anything for the first iteration at least - I think the main use case is helping editors know about things imported from Cython modules, and since cstructs and unions aren't importable into Python they're probably best left for now.",
            "commit_id": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "created_at": "2023-10-21T09:21:27Z",
            "diff_hunk": "@@ -0,0 +1,433 @@\n+from . import Version\n+from .Nodes import CNameDeclaratorNode\n+from .ExprNodes import CallNode, NameNode, ImportNode, TupleNode, AttributeNode\n+from ..CodeWriter import DeclarationWriter\n+from .Visitor import CythonTransform\n+from . import PyrexTypes\n+from ..Utils import open_new_file\n+import cython \n+import os \n+import sys \n+\n+cython.declare(PyrexTypes=object, Naming=object, ExprNodes=object, Nodes=object,\n+               Options=object, UtilNodes=object, LetNode=object,\n+               LetRefNode=object, TreeFragment=object, EncodedString=object,\n+               error=object, warning=object, copy=object, _unicode=object)\n+\n+\n+# Inspired by and based around https://github.com/cython/cython/pull/3818\n+# with some less lazy changes to it and a few minor improvements and optimizations...\n+\n+# Decided to revert to an older variant I had wrote of this code for the sake of \n+# maintainability - Vizonex\n+\n+\n+\n+# TODO Save this implementation commented out if required....\n+if sys.version_info >= (3, 9):\n+    typing_module = \"typing\"\n+else:\n+    typing_module = \"typing_extensions\"\n+\n+class PyiWriter(CythonTransform, DeclarationWriter):\n+    \"\"\"Used By Cython to help Write stubfiles\n+    this comes in handy for ides like Pylance \n+    which suffer from having no code access to \n+    annotations from compiled python modules...\n+    \"\"\"\n+\n+    def __init__(self, context):\n+        super(PyiWriter, self).__init__(context=context)\n+        super(DeclarationWriter, self).__init__()\n+        self.context = context\n+        self.module_name = \"\"\n+        self.class_func_count = 0 \n+\n+        self.translation_table = {}\n+        \"\"\"Used as an eternal resource for translating ctype declarations into python-types\"\"\"\n+\n+        self.use_typing = False\n+        \"\"\"if true we must import typing's generator typehint...\"\"\"\n+\n+\n+    def _visitchildren_indented(self, node):\n+        self.indent()\n+        self.visitchildren(node)\n+        self.dedent()\n+    \n+    def translate_pyrex_type(self, ctype):\n+        # TODO implement Pyrex to cython shadow typehints converter...\n+\n+        if isinstance(ctype, PyrexTypes.BuiltinObjectType):\n+            return ctype.py_type_name()\n+\n+        if isinstance(ctype, PyrexTypes.CVoidType):\n+            if ctype.is_ptr:\n+                return \"object\"\n+            return \"None\"\n+        \n+        if isinstance(ctype, PyrexTypes.CIntType):\n+            return \"int\"\n+\n+        elif isinstance(ctype, PyrexTypes.CFloatType):\n+            return \"float\"\n+\n+        elif isinstance(ctype,PyrexTypes.PyObjectType):\n+            return ctype.py_type_name()\n+        \n+        return 'object'\n+\n+\n+    # Instead of doing it into C, we're doing it backwards...\n+    def translate_base_type_to_py(\n+        self,\n+        base\n+        ):\n+\n+        # Try checking our table first...\n+        if self.translation_table.get(base.name):\n+            return self.translation_table[base.name]\n+\n+        elif base.name == \"object\":\n+            return \"object\"\n+\n+        elif base.name in (\"unicode\",\"basestring\"):\n+            return \"str\"\n+\n+        elif not base.is_basic_c_type:\n+            # Likely that it's already a python object that's being handled...\n+            # except for basestring and unicode...\n+            return base.name \n+\n+        elif base.name == \"bint\":\n+            return \"bool\"\n+\n+        ctype = PyrexTypes.simple_c_type(base.signed, base.longness, base.name) # type: ignore\n+        return self.translate_pyrex_type(ctype)\n+\n+    def emptyline(self):\n+        self.result.putline(\"\")\n+    \n+    def visit_ModuleNode(self, node):\n+        # We need to extract the name to write our pyi file down...\n+        if node.directives['write_stub_file']:\n+            result = self.write(node, True)\n+            new_path = node.full_module_name.replace(\".\", \"/\")\n+            print(\"writing file %s.pyi ...\" % node.full_module_name)\n+            with open_new_file(os.path.join(new_path + '.pyi')) as w:\n+                w.write(\"\\n\".join(result.lines))\n+                w.write(\"\\n\")\n+        return node\n+\n+    def visit_StatListNode(self, node):\n+        self.visitchildren(node)\n+        return node\n+\n+    def visit_CImportStatNode(self,node):\n+        return node\n+    \n+    def visit_FromCImportStatNode(self,node):\n+        return node\n+    \n+    def visit_CDefExternNode(self,node):\n+        self.visitchildren(node)\n+        return node \n+\n+    def visit_CEnumDefNode(self, node):\n+        # TODO Figure out how to define an enum-class via typehints...\n+\n+        # NOTE It seems that only public will make the enum accessible to python so \n+        # I'll just have it check if the enums will be public for now... - Vizonex\n+        if node.visibility == \"public\":\n+            # Enum's name is not in or visible in the final product because \n+            # it's not an enum class so do not indent here...\n+            # Also Leave visit_CEnumDefItemNode up to the previous \n+            # class's function...\n+            self.putline(\"# -- enum %s --\" % node.name)\n+            self.visitchildren(node)\n+        return node \n+\n+    # Used in our translation table to register return types variables from...\n+    def visit_CTypeDefNode(self,node):\n+        if isinstance(node.declarator, CNameDeclaratorNode):\n+            # Register a new type to use in our translation table...\n+            self.translation_table[node.declarator.name] = self.translate_base_type_to_py(node.base_type)\n+    \n+    def visit_CStructOrUnionDefNode(self, node):\n+        # XXX : Currently, I don't know what to do here yet but ignoring \n+        # is triggering some problems currently...\n+        return node",
            "html_url": "https://github.com/cython/cython/pull/5744#discussion_r1367695675",
            "id": 1367695675,
            "in_reply_to_id": 1367682559,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5RhWE7",
            "original_commit_id": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "original_line": 159,
            "original_position": 159,
            "original_start_line": 156,
            "path": "Cython/Compiler/TypeStubGenerator.py",
            "position": null,
            "pull_request_review_id": 1691220317,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5744",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367695675/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-21T09:21:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1367695675",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5744/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e4234121210321a00ee64aaec5fc307ece256fee/comments",
            "commit": {
                "author": {
                    "date": "2023-09-28T20:19:44Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-09-28T20:19:44Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Create TypeStubGenerator.py",
                "tree": {
                    "sha": "e5dafbbed8c15bf8b7dfa660f6dfe31c8a5d7acb",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e5dafbbed8c15bf8b7dfa660f6dfe31c8a5d7acb"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e4234121210321a00ee64aaec5fc307ece256fee",
                "verification": {
                    "payload": "tree e5dafbbed8c15bf8b7dfa660f6dfe31c8a5d7acb\nparent 09bb9e1208a9dff2305d6bbba8803823b6386e05\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1695932384 -0500\ncommitter GitHub <noreply@github.com> 1695932384 -0500\n\nCreate TypeStubGenerator.py",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlFd/gCRBK7hj4Ov3rIwAA8uAIAKFyuC4y4pwZ3J7pG+E2/eHw\naD8ubffdbbk7qqkkpH7GfawA7GdnI8UJCB5f5aOfoHkwzHhfE6mco6UOX4X+ROc/\n3TXaCLadB9Mxl7U31H70/3gM3YuWjwOIfuCLFPBBda9J4zPVtWcaxBZYi2eeBm+x\n/mh7gaZI36trERBz8Kxk7CyhMp6dKvrrA/OoMr8dKtejXcZ58X8CPyZJDzywNb1Q\nwesow7E3ucnIOy0VPC3GC9evNVAedk0lruXDq+Ot2pBxrSj6TZzXDRPPznxEPukx\n+9g2DH0Ka+qjLwonPYmrTKXxw6DNQk8GqzlKgrz8n8FCTQGrCxFTBu/dZQUYfzw=\n=6tIK\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/e4234121210321a00ee64aaec5fc307ece256fee",
            "node_id": "C_kwDOKXYnIdoAKGU0MjM0MTIxMjEwMzIxYTAwZWU2NGFhZWM1ZmMzMDdlY2UyNTZmZWU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/09bb9e1208a9dff2305d6bbba8803823b6386e05",
                    "sha": "09bb9e1208a9dff2305d6bbba8803823b6386e05",
                    "url": "https://api.github.com/repos/cython/cython/commits/09bb9e1208a9dff2305d6bbba8803823b6386e05"
                }
            ],
            "sha": "e4234121210321a00ee64aaec5fc307ece256fee",
            "url": "https://api.github.com/repos/cython/cython/commits/e4234121210321a00ee64aaec5fc307ece256fee"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/96418c64d399c6d0ecc2864b3f160a2637ceb33f/comments",
            "commit": {
                "author": {
                    "date": "2023-10-02T18:10:24Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-02T18:10:24Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'cython:master' into master",
                "tree": {
                    "sha": "ff92ac5692e6202c8eaf3350c062b8eb8790e39d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ff92ac5692e6202c8eaf3350c062b8eb8790e39d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/96418c64d399c6d0ecc2864b3f160a2637ceb33f",
                "verification": {
                    "payload": "tree ff92ac5692e6202c8eaf3350c062b8eb8790e39d\nparent e4234121210321a00ee64aaec5fc307ece256fee\nparent 61b57062e302e62efb393b8c9f8fe712d9d5c721\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696270224 -0500\ncommitter GitHub <noreply@github.com> 1696270224 -0500\n\nMerge branch 'cython:master' into master\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlGweQCRBK7hj4Ov3rIwAAKt0IAJBuUcZxEvzhIRnYB5oRyO2U\nUHRlnWk0FgSDmGTYzjCS0YYMmMydaicQbKTh/2LyIpcu3lbTmvGfKP+utUAH+vWj\n/SX9ebgNjerI1DeDc/dAmP6nlyTgrMtMMk/ls7k/AA1QXMhs9BxyO6MAb8kR8Bdk\nkIUPGWDJ+x3P59UtTyO/BGHC+Hbt3xV8RWBfb7iO97WPqs6yfPuMVSVia6cayny+\n9MivhN+AkFPHklIx0sOf6W6z2lnznxLYMPD8rlmAnZPb7sQG5JzQadBpzaqSHk7e\nXBb1Cbp62mHlImJ4e0Uqzg9GWp09IUSc/9D3PPJC6BQDjM4AfZ36tl6brWXEArg=\n=wHGS\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/96418c64d399c6d0ecc2864b3f160a2637ceb33f",
            "node_id": "C_kwDOKXYnIdoAKDk2NDE4YzY0ZDM5OWM2ZDBlY2MyODY0YjNmMTYwYTI2MzdjZWIzM2Y",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e4234121210321a00ee64aaec5fc307ece256fee",
                    "sha": "e4234121210321a00ee64aaec5fc307ece256fee",
                    "url": "https://api.github.com/repos/cython/cython/commits/e4234121210321a00ee64aaec5fc307ece256fee"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/61b57062e302e62efb393b8c9f8fe712d9d5c721",
                    "sha": "61b57062e302e62efb393b8c9f8fe712d9d5c721",
                    "url": "https://api.github.com/repos/cython/cython/commits/61b57062e302e62efb393b8c9f8fe712d9d5c721"
                }
            ],
            "sha": "96418c64d399c6d0ecc2864b3f160a2637ceb33f",
            "url": "https://api.github.com/repos/cython/cython/commits/96418c64d399c6d0ecc2864b3f160a2637ceb33f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b94f582f952655a3cff7e03b31fa1669798fa6d3/comments",
            "commit": {
                "author": {
                    "date": "2023-10-04T17:51:40Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-04T17:51:40Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'cython:master' into master",
                "tree": {
                    "sha": "e2605ebe1cc9ecbd2c08515fe5263405e210af74",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e2605ebe1cc9ecbd2c08515fe5263405e210af74"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b94f582f952655a3cff7e03b31fa1669798fa6d3",
                "verification": {
                    "payload": "tree e2605ebe1cc9ecbd2c08515fe5263405e210af74\nparent 96418c64d399c6d0ecc2864b3f160a2637ceb33f\nparent ed2933b3f679a90a03a83ae446931a6071cdc381\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696441900 -0500\ncommitter GitHub <noreply@github.com> 1696441900 -0500\n\nMerge branch 'cython:master' into master\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHaYsCRBK7hj4Ov3rIwAAQpoIADreJ/xLzHji9+z0Jxx7MBjD\nmASftGnKS41TZLnMuPDET4/ctqGlOPA1WMJcQNMmhMX8xFMSrCsBWk0ALfXEUqur\nfYDxIdJ1Z9FSNWKycE6NQWFv1kRuF4+KABGs3NCdZgR7O8pgp0wjBMhfC7zkON5u\nQ9j0eNXYZbBFHoJEmyrbzsIr4be/6R1LMkerFD7dwuK4fV6dcjiFi70CCwDRO34O\nQmjSuVELR2iAUG+Vox385pXnm+Dzi2TIDDgMhbosQMr4PFNRRmeZuEVG5mR720lA\nEuWCJ1JR1pql8SrJqqTPeWwWOqzwGgdz/D+uPTFqEjvnhxGla3ZSd1E0n1NgDmo=\n=/pry\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/b94f582f952655a3cff7e03b31fa1669798fa6d3",
            "node_id": "C_kwDOKXYnIdoAKGI5NGY1ODJmOTUyNjU1YTNjZmY3ZTAzYjMxZmExNjY5Nzk4ZmE2ZDM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/96418c64d399c6d0ecc2864b3f160a2637ceb33f",
                    "sha": "96418c64d399c6d0ecc2864b3f160a2637ceb33f",
                    "url": "https://api.github.com/repos/cython/cython/commits/96418c64d399c6d0ecc2864b3f160a2637ceb33f"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/ed2933b3f679a90a03a83ae446931a6071cdc381",
                    "sha": "ed2933b3f679a90a03a83ae446931a6071cdc381",
                    "url": "https://api.github.com/repos/cython/cython/commits/ed2933b3f679a90a03a83ae446931a6071cdc381"
                }
            ],
            "sha": "b94f582f952655a3cff7e03b31fa1669798fa6d3",
            "url": "https://api.github.com/repos/cython/cython/commits/b94f582f952655a3cff7e03b31fa1669798fa6d3"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ceb0275964b45b6665e0024155b2e4cdb412dd61/comments",
            "commit": {
                "author": {
                    "date": "2023-10-04T17:54:25Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-04T17:54:25Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Revert To My Original Variant \n\nDecided to revert to an original version of my Type Stub Generator with a few upgrades like dropping the stack off completely I'm going to need a bit of help and suggestions but I think I am ready to find out how and where to put it in the pipeline.",
                "tree": {
                    "sha": "3d1810c10279373f6b921039f32c325236bb9559",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3d1810c10279373f6b921039f32c325236bb9559"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ceb0275964b45b6665e0024155b2e4cdb412dd61",
                "verification": {
                    "payload": "tree 3d1810c10279373f6b921039f32c325236bb9559\nparent b94f582f952655a3cff7e03b31fa1669798fa6d3\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696442065 -0500\ncommitter GitHub <noreply@github.com> 1696442065 -0500\n\nRevert To My Original Variant \n\nDecided to revert to an original version of my Type Stub Generator with a few upgrades like dropping the stack off completely I'm going to need a bit of help and suggestions but I think I am ready to find out how and where to put it in the pipeline.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHabRCRBK7hj4Ov3rIwAAaSkIALFqRBv1i181QhgoDmbwfqre\nZLytNhO0pe4vSjf4C5nif0UiUoAEj6Lh+LJBnbgryu9PIfNWvloiDJc3Htbjhmn/\n35SEfDQa7vVOtPVMa+8b4mk/5omD46JZtBPDE2GmOrdHJdRwMj6Y0j9fLC7gNV5p\np+8rJj3c+0mWZs9xfmdlMV21RVxlIRXf5UCeZc81LFf6yuOw+D6PweOKEjUk9OE5\nyShMORMHaRCPEbGaVZeDyHsagbDCaWdxI5vkZW3FEDVqg32nQ0BPps0GPDmdmBhR\nvsvIhRIefcpm4ATi6wIAUM1DbISJrZotvV9H1hdCOF1gtMcyoy3d535+1IPOpMg=\n=XnZR\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/ceb0275964b45b6665e0024155b2e4cdb412dd61",
            "node_id": "C_kwDOKXYnIdoAKGNlYjAyNzU5NjRiNDViNjY2NWUwMDI0MTU1YjJlNGNkYjQxMmRkNjE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b94f582f952655a3cff7e03b31fa1669798fa6d3",
                    "sha": "b94f582f952655a3cff7e03b31fa1669798fa6d3",
                    "url": "https://api.github.com/repos/cython/cython/commits/b94f582f952655a3cff7e03b31fa1669798fa6d3"
                }
            ],
            "sha": "ceb0275964b45b6665e0024155b2e4cdb412dd61",
            "url": "https://api.github.com/repos/cython/cython/commits/ceb0275964b45b6665e0024155b2e4cdb412dd61"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/07a3f21420106c18b745bc457befee3381c8b7ac/comments",
            "commit": {
                "author": {
                    "date": "2023-10-04T18:14:22Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-04T18:14:22Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge PyiWriter to the Pipeline\n\nI now just mainly need help with figuring out how it should be implemented on the command-line or if there should be a new Cython directive it get the stub-file written.",
                "tree": {
                    "sha": "312459dffea1912ef71b411195de2153e5eaa0a1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/312459dffea1912ef71b411195de2153e5eaa0a1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/07a3f21420106c18b745bc457befee3381c8b7ac",
                "verification": {
                    "payload": "tree 312459dffea1912ef71b411195de2153e5eaa0a1\nparent ceb0275964b45b6665e0024155b2e4cdb412dd61\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696443262 -0500\ncommitter GitHub <noreply@github.com> 1696443262 -0500\n\nMerge PyiWriter to the Pipeline\n\nI now just mainly need help with figuring out how it should be implemented on the command-line or if there should be a new Cython directive it get the stub-file written.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHat+CRBK7hj4Ov3rIwAAZ+wIAK/GCbW+z+V3qtfYNrprqxpj\nMvrkNY2L/zgWP+dXiRnyq3OXYQXPFvNcp9FgsXE2pC9hN7URpIOIxC67tQVboV1y\n3Fl86bnFJdLcr3Z2fVr3tlh9PZalr7kG8AZDAey3hfoBDrECSXcphZkF1QS2KBgp\nYi8qjVpGLIDK3rG4Xrkuj2shBlikBuLaxL+t2jX9nncGgH/xoUbI1FI9KZr82LQ1\ne2gYVMUS9/lz4O59d0A57xRZctGjDKpZaM9ZAn/MqVIVcGMeyB32lebfQUoZx5pq\nzGZ+e2bztPFnuxKQpHFeSDt6YwAKtqjpnH/l4AVexFQkqeUuaqdarPhPjPfbue8=\n=vSaQ\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/07a3f21420106c18b745bc457befee3381c8b7ac",
            "node_id": "C_kwDOKXYnIdoAKDA3YTNmMjE0MjAxMDZjMThiNzQ1YmM0NTdiZWZlZTMzODFjOGI3YWM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ceb0275964b45b6665e0024155b2e4cdb412dd61",
                    "sha": "ceb0275964b45b6665e0024155b2e4cdb412dd61",
                    "url": "https://api.github.com/repos/cython/cython/commits/ceb0275964b45b6665e0024155b2e4cdb412dd61"
                }
            ],
            "sha": "07a3f21420106c18b745bc457befee3381c8b7ac",
            "url": "https://api.github.com/repos/cython/cython/commits/07a3f21420106c18b745bc457befee3381c8b7ac"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/eea1ceb1ca549b422fe46fa7283ce5d8b834350c/comments",
            "commit": {
                "author": {
                    "date": "2023-10-04T20:02:03Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-04T20:02:03Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Add new directive write_stub_file",
                "tree": {
                    "sha": "75ed0ee1a7ce65d3d5ca0d0a8b2f04f4f68491bc",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/75ed0ee1a7ce65d3d5ca0d0a8b2f04f4f68491bc"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/eea1ceb1ca549b422fe46fa7283ce5d8b834350c",
                "verification": {
                    "payload": "tree 75ed0ee1a7ce65d3d5ca0d0a8b2f04f4f68491bc\nparent 07a3f21420106c18b745bc457befee3381c8b7ac\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696449723 -0500\ncommitter GitHub <noreply@github.com> 1696449723 -0500\n\nAdd new directive write_stub_file",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHcS7CRBK7hj4Ov3rIwAAyMEIAJNsttz438E9fkk9CKmaTcNH\nFXvrFKElaJJVeQ3ZRK1Ja+M84NigfVmiC/+jvOMECMrM5DkX/8awDMjAfj/ws5Ob\nl3MhuSXGxu5I0TwFGN1ccL/n7NrC0MGIjmWqgGVqHcFZw4yZ/ZVFVH9564iYThFT\nlRW9A6zuyqYWR3XBPf2aB9My40zuqBL+iMJ1SE7g0y+uhcmD14hkqaYGFtjEIWWS\nXG7xIw4+YQLxsYRL+uweEz4QbDXfwN7yY7PyULltjsKoFV9JhGG2AO0s0wZPTXE4\nD5mXDaExAuHTwQS2b24bXpmQGybwE3Xi0g4DNhbUVhBrpIoNhmVqLy+uX1RJMhM=\n=VcE5\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/eea1ceb1ca549b422fe46fa7283ce5d8b834350c",
            "node_id": "C_kwDOKXYnIdoAKGVlYTFjZWIxY2E1NDliNDIyZmU0NmZhNzI4M2NlNWQ4YjgzNDM1MGM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/07a3f21420106c18b745bc457befee3381c8b7ac",
                    "sha": "07a3f21420106c18b745bc457befee3381c8b7ac",
                    "url": "https://api.github.com/repos/cython/cython/commits/07a3f21420106c18b745bc457befee3381c8b7ac"
                }
            ],
            "sha": "eea1ceb1ca549b422fe46fa7283ce5d8b834350c",
            "url": "https://api.github.com/repos/cython/cython/commits/eea1ceb1ca549b422fe46fa7283ce5d8b834350c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/85359a880a86d0cc0c8d26effa34618c1af1ebed/comments",
            "commit": {
                "author": {
                    "date": "2023-10-04T20:10:03Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-04T20:10:03Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "implement new \"write_stub_file\" directive into PyiWriter Transform",
                "tree": {
                    "sha": "1399176f5553e79d88dc8617ac3d1bc2c944cf1d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1399176f5553e79d88dc8617ac3d1bc2c944cf1d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/85359a880a86d0cc0c8d26effa34618c1af1ebed",
                "verification": {
                    "payload": "tree 1399176f5553e79d88dc8617ac3d1bc2c944cf1d\nparent eea1ceb1ca549b422fe46fa7283ce5d8b834350c\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696450203 -0500\ncommitter GitHub <noreply@github.com> 1696450203 -0500\n\nimplement new \"write_stub_file\" directive into PyiWriter Transform",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHcabCRBK7hj4Ov3rIwAADscIAFkeMCShD9PCy4FJlGUMrPa2\n+vO9swDZkibsVYvzSDUoY+0BNq1mxx7cB3HmHAx5y4Tio9BYsgk2/qJOyRR4wVz+\np6LIp6jDhHJm0z3JH56QDruR+lWK+KhHf3FRPpT0X1fNncVSibZc/p9oqcvq39zl\nCdKSY17XNLIYa2bBHFB+EHrBqbdn2E2JeSYXsbMb0h72IDNzvdVlat/n9vli9lRP\nkELyxQCHxsoB+HcZ52uXm7a+qF4Jx1/J0wS0UgAHcf3VXlPtkgIBdwNZxnc2j9p2\nIJCPS3C/vzSyqPqYQ5Mcc1LfbvV4gyVhbR4qb6qfe0DdT2MT+FHIM3waAuO5JY0=\n=SIxP\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/85359a880a86d0cc0c8d26effa34618c1af1ebed",
            "node_id": "C_kwDOKXYnIdoAKDg1MzU5YTg4MGE4NmQwY2MwYzhkMjZlZmZhMzQ2MThjMWFmMWViZWQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/eea1ceb1ca549b422fe46fa7283ce5d8b834350c",
                    "sha": "eea1ceb1ca549b422fe46fa7283ce5d8b834350c",
                    "url": "https://api.github.com/repos/cython/cython/commits/eea1ceb1ca549b422fe46fa7283ce5d8b834350c"
                }
            ],
            "sha": "85359a880a86d0cc0c8d26effa34618c1af1ebed",
            "url": "https://api.github.com/repos/cython/cython/commits/85359a880a86d0cc0c8d26effa34618c1af1ebed"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/524299674552118f6fd7c4df0cd84e9df5aa47dd/comments",
            "commit": {
                "author": {
                    "date": "2023-10-04T20:11:37Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-04T20:11:37Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Move PyiWriter down the pipeline to where module directives have been parsed.",
                "tree": {
                    "sha": "eb9d4970e68df09cefd28f6070f50f22fe3ca069",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/eb9d4970e68df09cefd28f6070f50f22fe3ca069"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/524299674552118f6fd7c4df0cd84e9df5aa47dd",
                "verification": {
                    "payload": "tree eb9d4970e68df09cefd28f6070f50f22fe3ca069\nparent 85359a880a86d0cc0c8d26effa34618c1af1ebed\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696450297 -0500\ncommitter GitHub <noreply@github.com> 1696450297 -0500\n\nMove PyiWriter down the pipeline to where module directives have been parsed.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHcb5CRBK7hj4Ov3rIwAA+6MIAI+gArzwqlxlBzE9HAx0VAnm\nQIVRaJm9l7UE56Kqq54bWEeF9JjZiA7fMGbVEnm3b7TJUiQajdwlmVYiB9CnrBjr\nBWQj1oBQ9pW6EFYRfZSBFBHoLQJOiiy7GJt33dMRY7hJcKfkVbNT85wrKisgkSnl\nOQ2RpgDvFRwNKkbk03DzpHUd2wFJJKK7e4NAGqebClMei56kRCpTJVEiNTabNBjQ\n+NPlGW1IjmRxMt2lg88vKDTpW6lhd4/ohRiZk/XL8s7hECVzn8tfCtNBNetTGmQW\noeSdObD+9aJFMhJHKxDKULIGQdUX35eWA3pca6c9TY5mKMFpH/ePd/4uqw/7iuk=\n=a/Vs\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "node_id": "C_kwDOKXYnIdoAKDUyNDI5OTY3NDU1MjExOGY2ZmQ3YzRkZjBjZDg0ZTlkZjVhYTQ3ZGQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/85359a880a86d0cc0c8d26effa34618c1af1ebed",
                    "sha": "85359a880a86d0cc0c8d26effa34618c1af1ebed",
                    "url": "https://api.github.com/repos/cython/cython/commits/85359a880a86d0cc0c8d26effa34618c1af1ebed"
                }
            ],
            "sha": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
            "url": "https://api.github.com/repos/cython/cython/commits/524299674552118f6fd7c4df0cd84e9df5aa47dd"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0cda4cb73ddd83eb4df0ac938b4825a820baadd1/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T02:26:57Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T02:26:57Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Drop All Annotations To support earlier versions",
                "tree": {
                    "sha": "74d32b6d2f078bdd2fe369368a36ae1ea257a2a8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/74d32b6d2f078bdd2fe369368a36ae1ea257a2a8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0cda4cb73ddd83eb4df0ac938b4825a820baadd1",
                "verification": {
                    "payload": "tree 74d32b6d2f078bdd2fe369368a36ae1ea257a2a8\nparent 524299674552118f6fd7c4df0cd84e9df5aa47dd\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696472817 -0500\ncommitter GitHub <noreply@github.com> 1696472817 -0500\n\nDrop All Annotations To support earlier versions",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHh7xCRBK7hj4Ov3rIwAAOwsIAC2Pf0igro2hJ8g36atuqdY0\nypBs+fYTiTZX3+b00hPMarFz8X/nVkCrdJDrrLzYnxEfIICvYYj/RVGoi1cRVG8W\ndwNsn/6ZgPfzpSGuzCkxdCBpgQi1W/PLzdZZ4RyNd6h1oi1mekeT9FMLnOtQUKpk\neAUwbQUeKA99+htQjx4cUHDBrpjNjMVRMOpS8LZFbEWBhVdI+/MbjEyOPfiSD4Hn\nDXkajXHMeTpMXBH6IySYzXyuNkYNupG+wFZyhm5I9YEQZ7gBXJWAYA160JEWiYCr\ngSUWzzt7QNhoHfjM3sD+WmRZDWuYVaYozpO/Z1UsIw7TeBUkoj4QWe7HLQ8VFmo=\n=wqSy\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/0cda4cb73ddd83eb4df0ac938b4825a820baadd1",
            "node_id": "C_kwDOKXYnIdoAKDBjZGE0Y2I3M2RkZDgzZWI0ZGYwYWM5MzhiNDgyNWE4MjBiYWFkZDE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/524299674552118f6fd7c4df0cd84e9df5aa47dd",
                    "sha": "524299674552118f6fd7c4df0cd84e9df5aa47dd",
                    "url": "https://api.github.com/repos/cython/cython/commits/524299674552118f6fd7c4df0cd84e9df5aa47dd"
                }
            ],
            "sha": "0cda4cb73ddd83eb4df0ac938b4825a820baadd1",
            "url": "https://api.github.com/repos/cython/cython/commits/0cda4cb73ddd83eb4df0ac938b4825a820baadd1"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/bc3c9c0846bcfe25e7ccf557bf8536b3f1b0abe1/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T02:38:16Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T02:38:16Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Cleanup documentation's Spelling mistakes.",
                "tree": {
                    "sha": "1398469b8d286db458ecabb20660dcdcd6fb605d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1398469b8d286db458ecabb20660dcdcd6fb605d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/bc3c9c0846bcfe25e7ccf557bf8536b3f1b0abe1",
                "verification": {
                    "payload": "tree 1398469b8d286db458ecabb20660dcdcd6fb605d\nparent 0cda4cb73ddd83eb4df0ac938b4825a820baadd1\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696473496 -0500\ncommitter GitHub <noreply@github.com> 1696473496 -0500\n\nCleanup documentation's Spelling mistakes.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHiGYCRBK7hj4Ov3rIwAA/fYIACKF1zfVdFlHrCEXp6/ByMcI\n3lCoVEuG9k+Ig9n7uR3blCk/qupU5F1/ihO76+ZflE9FCrjz0kgpwF3UbaBYtZwe\nT0V6jxr6L/sbjmnFDSZJbuF7m7AohtYulXFiDroU6OuzAGY4PgggzEoOefxeerAi\n4wfJ83vC44+Bzhh0iHXGfYFMh1L9ZDUQAjZ7Y02ftLVGKqVSoHtFQg8vGFXXrm2e\nFG0KgZq9uEKvcO9645R+ZYzZjjiYRrlW3XOSg42YM6oDkNUIYVle+XqtgYcE+kgz\nGU8hR2QNhmzfbaphwQA39SqtOiTo6Q7R9HPfVChTSth8armhXf4ZsSK4Wyani/k=\n=dISP\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/bc3c9c0846bcfe25e7ccf557bf8536b3f1b0abe1",
            "node_id": "C_kwDOKXYnIdoAKGJjM2M5YzA4NDZiY2ZlMjVlN2NjZjU1N2JmODUzNmIzZjFiMGFiZTE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0cda4cb73ddd83eb4df0ac938b4825a820baadd1",
                    "sha": "0cda4cb73ddd83eb4df0ac938b4825a820baadd1",
                    "url": "https://api.github.com/repos/cython/cython/commits/0cda4cb73ddd83eb4df0ac938b4825a820baadd1"
                }
            ],
            "sha": "bc3c9c0846bcfe25e7ccf557bf8536b3f1b0abe1",
            "url": "https://api.github.com/repos/cython/cython/commits/bc3c9c0846bcfe25e7ccf557bf8536b3f1b0abe1"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/05ea16d9ca7d017ed817b15325eef5221ed1337e/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T02:57:56Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T02:57:56Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "drop \"self\" check, turns out it's not required",
                "tree": {
                    "sha": "25467774a4a79b5a1489c906d4c3024e69c839e5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/25467774a4a79b5a1489c906d4c3024e69c839e5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/05ea16d9ca7d017ed817b15325eef5221ed1337e",
                "verification": {
                    "payload": "tree 25467774a4a79b5a1489c906d4c3024e69c839e5\nparent bc3c9c0846bcfe25e7ccf557bf8536b3f1b0abe1\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696474676 -0500\ncommitter GitHub <noreply@github.com> 1696474676 -0500\n\ndrop \"self\" check, turns out it's not required",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHiY0CRBK7hj4Ov3rIwAAChYIAINIVjGXQ6ymbVhZz0/0rwbm\nJxAPX2VK7VJK86SCZEJznNU1tDmHJJCLiPvmde340azLT3yIo007h0P2s9OPsLev\nVmU6jCuNcSct0qUDGwrCv+Ckv47xmRXok+lFzsaxfrKn2/ztQ0jgCAj2eP71xCnR\nv9pMGAmX6t9L55R0UHVtmFgmy+Kugqc0vgickEapAtKnsNRjxZ6K9TDE3SxYn0T8\nFyZCZeb7OoftvQKa8DcNy27BJHbBh0oSVLwEX6os95ZQNUOmPXKWAB+k1o3vbTOo\nO+tuvXb+tSCJyqeT1Rjg9QqBfAvrmy64RpF9jjD8Jwgd6vHbzo0pqmjbWv5kmhU=\n=qoon\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/05ea16d9ca7d017ed817b15325eef5221ed1337e",
            "node_id": "C_kwDOKXYnIdoAKDA1ZWExNmQ5Y2E3ZDAxN2VkODE3YjE1MzI1ZWVmNTIyMWVkMTMzN2U",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bc3c9c0846bcfe25e7ccf557bf8536b3f1b0abe1",
                    "sha": "bc3c9c0846bcfe25e7ccf557bf8536b3f1b0abe1",
                    "url": "https://api.github.com/repos/cython/cython/commits/bc3c9c0846bcfe25e7ccf557bf8536b3f1b0abe1"
                }
            ],
            "sha": "05ea16d9ca7d017ed817b15325eef5221ed1337e",
            "url": "https://api.github.com/repos/cython/cython/commits/05ea16d9ca7d017ed817b15325eef5221ed1337e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1d1f96b4a0f2708238fd92d12648d51355480094/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T03:01:52Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T03:01:52Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Replace accidental deletion\n\nMy bad...",
                "tree": {
                    "sha": "977acc143e4a9bd969ea0f92e0a4edd4b2957c7d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/977acc143e4a9bd969ea0f92e0a4edd4b2957c7d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1d1f96b4a0f2708238fd92d12648d51355480094",
                "verification": {
                    "payload": "tree 977acc143e4a9bd969ea0f92e0a4edd4b2957c7d\nparent 05ea16d9ca7d017ed817b15325eef5221ed1337e\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696474912 -0500\ncommitter GitHub <noreply@github.com> 1696474912 -0500\n\nReplace accidental deletion\n\nMy bad...",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHicgCRBK7hj4Ov3rIwAAfxYIAGOk+7dlyeig6eNyT5jukiBv\nHoXzQG3dX28jnspIl7wWLleA33s9kNfpAql4lRNvglOymZg25EdYdMdblLibdZPH\n801LjHa//hpH7QRSBWJolwn+ksOK1Q7ZU1oPzBvGpbQuDAO1e5Cp9XhqXanZttbf\nTXuIKwPmG0DTXcpILDuk4AfqeNyTNDpR2Di4mMqWy4FuiHDj3heQlCgWXriMZHyV\n6fCEvr/RyspyBSd3GWO0J+IeBIqg4lHPOFoL1YoM8k3VAGLT/+BQQLaJKTI9F30O\nCD9UPeHuOQHcqVqID7BKlNDl/7rfm/T686snTT4GYRQXdvxDL3aAyh/XamuTkP0=\n=Zc9s\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/1d1f96b4a0f2708238fd92d12648d51355480094",
            "node_id": "C_kwDOKXYnIdoAKDFkMWY5NmI0YTBmMjcwODIzOGZkOTJkMTI2NDhkNTEzNTU0ODAwOTQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/05ea16d9ca7d017ed817b15325eef5221ed1337e",
                    "sha": "05ea16d9ca7d017ed817b15325eef5221ed1337e",
                    "url": "https://api.github.com/repos/cython/cython/commits/05ea16d9ca7d017ed817b15325eef5221ed1337e"
                }
            ],
            "sha": "1d1f96b4a0f2708238fd92d12648d51355480094",
            "url": "https://api.github.com/repos/cython/cython/commits/1d1f96b4a0f2708238fd92d12648d51355480094"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/da3e2f338d1cb7dc322729443f68c52fa0c9edbb/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T03:04:20Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T03:04:20Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update TypeStubGenerator.py\n\nI had the Wrong Writer in place So I had to move it to a trashcan.",
                "tree": {
                    "sha": "09417ef6ed666d40c25a2bda1111cc4323f01843",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/09417ef6ed666d40c25a2bda1111cc4323f01843"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/da3e2f338d1cb7dc322729443f68c52fa0c9edbb",
                "verification": {
                    "payload": "tree 09417ef6ed666d40c25a2bda1111cc4323f01843\nparent 1d1f96b4a0f2708238fd92d12648d51355480094\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696475060 -0500\ncommitter GitHub <noreply@github.com> 1696475060 -0500\n\nUpdate TypeStubGenerator.py\n\nI had the Wrong Writer in place So I had to move it to a trashcan.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHie0CRBK7hj4Ov3rIwAAKBwIAF2gBj0Wi0NT5hIUZdcrsc0E\nUbK+eL+YmPUGr66VJafUHdG4lArJzMsA34xBxXC5MCLYcXEJ/+BVtF70VXapXSYH\n+BHOB7YGqF0y7QIZ5lydADaCop/E3GSF68VSu6uL63Lhq2sLJTF3k1yaPl3jTq6g\n/LrU6GIPsgFRlev26Ql2fhncPeBu/JO4kiND7wxaZK1Q4mtuUV1xqXoxDcm3oeFn\nlC9LuVqlFqi8cfzi3oXEKauWjRxVOltFVSFzBEkihgwlZuD61ep+jfgKpyRvx02J\nAA8lp0mFl1BdXDgdAhZnu8qdBOkpaxvPidpFzdC0AmdMuNON5Smbeu72lZKBBHs=\n=kzaW\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/da3e2f338d1cb7dc322729443f68c52fa0c9edbb",
            "node_id": "C_kwDOKXYnIdoAKGRhM2UyZjMzOGQxY2I3ZGMzMjI3Mjk0NDNmNjhjNTJmYTBjOWVkYmI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1d1f96b4a0f2708238fd92d12648d51355480094",
                    "sha": "1d1f96b4a0f2708238fd92d12648d51355480094",
                    "url": "https://api.github.com/repos/cython/cython/commits/1d1f96b4a0f2708238fd92d12648d51355480094"
                }
            ],
            "sha": "da3e2f338d1cb7dc322729443f68c52fa0c9edbb",
            "url": "https://api.github.com/repos/cython/cython/commits/da3e2f338d1cb7dc322729443f68c52fa0c9edbb"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4228cdaa98147accce652839b70c431e46f3c9eb/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T03:07:32Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T03:07:32Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix what I had commented out",
                "tree": {
                    "sha": "8d70be99bf2c9fc5a7194e4ef4f191305a413503",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8d70be99bf2c9fc5a7194e4ef4f191305a413503"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4228cdaa98147accce652839b70c431e46f3c9eb",
                "verification": {
                    "payload": "tree 8d70be99bf2c9fc5a7194e4ef4f191305a413503\nparent da3e2f338d1cb7dc322729443f68c52fa0c9edbb\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696475252 -0500\ncommitter GitHub <noreply@github.com> 1696475252 -0500\n\nFix what I had commented out",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHih0CRBK7hj4Ov3rIwAAyP4IAC0cnA9B81aGlrYzoTKWo51Q\nu8ki1mdn/p+LYeGjAa5W/r7kZxDxEZd6Vx3sSazRiCJmS1XRX6brzXjjI3H/j5qL\nMhdaA6EZvZ22akoxRsgrfNV8z4cRNQr7j4/+zCCV45qZEcqM7NXu6Po3Jf4Wn324\nnEJYjE13tnUYHuaaqXT04gJp/0xCB6919VCw1T0j22/cj/v3BgAOm6Qr3U52nU3y\nbrz50PQvqomedkrGos6W4dIqVLwU+lIg0H/nLakEXwXsoA4w+6gj3dNkH24f84lJ\nO/R9zk6HhInjyDP6NXPlRWcuA7FsPYijTkVpT/zP+UuA2lYNewxX/euhtWjcM1I=\n=01o1\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/4228cdaa98147accce652839b70c431e46f3c9eb",
            "node_id": "C_kwDOKXYnIdoAKDQyMjhjZGFhOTgxNDdhY2NjZTY1MjgzOWI3MGM0MzFlNDZmM2M5ZWI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/da3e2f338d1cb7dc322729443f68c52fa0c9edbb",
                    "sha": "da3e2f338d1cb7dc322729443f68c52fa0c9edbb",
                    "url": "https://api.github.com/repos/cython/cython/commits/da3e2f338d1cb7dc322729443f68c52fa0c9edbb"
                }
            ],
            "sha": "4228cdaa98147accce652839b70c431e46f3c9eb",
            "url": "https://api.github.com/repos/cython/cython/commits/4228cdaa98147accce652839b70c431e46f3c9eb"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5d1b90c87ac1a4f36e698ed02b9898a2c1aecfde/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T03:15:17Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T03:15:17Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "optimize Pyrex Translation check",
                "tree": {
                    "sha": "3ccd7c95adcd84bbef7b24fd964094b696b6bd8a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3ccd7c95adcd84bbef7b24fd964094b696b6bd8a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5d1b90c87ac1a4f36e698ed02b9898a2c1aecfde",
                "verification": {
                    "payload": "tree 3ccd7c95adcd84bbef7b24fd964094b696b6bd8a\nparent 4228cdaa98147accce652839b70c431e46f3c9eb\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696475717 -0500\ncommitter GitHub <noreply@github.com> 1696475717 -0500\n\noptimize Pyrex Translation check",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHipFCRBK7hj4Ov3rIwAAZeQIAAAdRRTG91GwiCpXavZPonNq\nEmfVphrQFI2mkA1DLukb6Xd7a4/dZ9zdLHZF4TZlB8YElkWDsxoUIErI00kn/OTc\nBCggvJH4AQUl34H8UIF+y+75HScc4SaOxoxbBd7k/cU1hKq8ykcy181STN2DHYVy\nDYr9O2EOI1Czx+doEd49Nr7cszBLYoSl2ZoQObN9Am8RpjLYQSsH4vCpXsknSTJh\nd8HhGQ9kOiqSLdEkvDR/XnrA6LGevqVAjw0VqBIda1VyS7UDHYMuRyuE9IaSiuZz\nDMpYOeSqBck/67CWp+U/IVgUcd8hFUHUJVBr1tCIRpOFgwUJr+KQONEBeGvvHiM=\n=Tipq\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/5d1b90c87ac1a4f36e698ed02b9898a2c1aecfde",
            "node_id": "C_kwDOKXYnIdoAKDVkMWI5MGM4N2FjMWE0ZjM2ZTY5OGVkMDJiOTg5OGEyYzFhZWNmZGU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4228cdaa98147accce652839b70c431e46f3c9eb",
                    "sha": "4228cdaa98147accce652839b70c431e46f3c9eb",
                    "url": "https://api.github.com/repos/cython/cython/commits/4228cdaa98147accce652839b70c431e46f3c9eb"
                }
            ],
            "sha": "5d1b90c87ac1a4f36e698ed02b9898a2c1aecfde",
            "url": "https://api.github.com/repos/cython/cython/commits/5d1b90c87ac1a4f36e698ed02b9898a2c1aecfde"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d4322be435a735ee6580712823d60acc68117549/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T03:18:35Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T03:18:35Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "fix filename mistake",
                "tree": {
                    "sha": "dbaa383ce07ced5efc56271b824b08647e744853",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/dbaa383ce07ced5efc56271b824b08647e744853"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d4322be435a735ee6580712823d60acc68117549",
                "verification": {
                    "payload": "tree dbaa383ce07ced5efc56271b824b08647e744853\nparent 5d1b90c87ac1a4f36e698ed02b9898a2c1aecfde\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696475915 -0500\ncommitter GitHub <noreply@github.com> 1696475915 -0500\n\nfix filename mistake",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHisLCRBK7hj4Ov3rIwAAZdIIAKzVzmSaTHJran9sv+52Mg4a\nOU4N6EaNBjFUSivIydDs6S7V4JWfbT7SSQbcE8keHmExn0iDu1thLMRP+71e9Ugk\nUcEgvN3oz7vYahGot+TkJrU/kJJQOlUNkCvsRcgjv9bN7+1/15LtUxYvowm4AzOu\nQK9J0NWbTTvJNgLa5c0ISaLcQwGe7jo6nKpVJA5drHejjrFxDsu+yNb0tNokmmWr\ngKU8gfSPo2zouTW9RPNUcJO8YrMauC+lDlVVQfIfBobIXMMU2IunCuoND/1u0BVn\nhXj3o8SslQCuAIP4neSMPb5GqghfvCikOha159bksgClMHyQwCluluNnwlW381E=\n=G0DG\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/d4322be435a735ee6580712823d60acc68117549",
            "node_id": "C_kwDOKXYnIdoAKGQ0MzIyYmU0MzVhNzM1ZWU2NTgwNzEyODIzZDYwYWNjNjgxMTc1NDk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5d1b90c87ac1a4f36e698ed02b9898a2c1aecfde",
                    "sha": "5d1b90c87ac1a4f36e698ed02b9898a2c1aecfde",
                    "url": "https://api.github.com/repos/cython/cython/commits/5d1b90c87ac1a4f36e698ed02b9898a2c1aecfde"
                }
            ],
            "sha": "d4322be435a735ee6580712823d60acc68117549",
            "url": "https://api.github.com/repos/cython/cython/commits/d4322be435a735ee6580712823d60acc68117549"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/816b4760dc8f844f3ae73e263f6a0fdfe3e2a9a1/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T03:30:59Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T03:30:59Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Remove duplicate",
                "tree": {
                    "sha": "1a576b79e986937c61d4fae05936aa248e6beb75",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1a576b79e986937c61d4fae05936aa248e6beb75"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/816b4760dc8f844f3ae73e263f6a0fdfe3e2a9a1",
                "verification": {
                    "payload": "tree 1a576b79e986937c61d4fae05936aa248e6beb75\nparent d4322be435a735ee6580712823d60acc68117549\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696476659 -0500\ncommitter GitHub <noreply@github.com> 1696476659 -0500\n\nRemove duplicate",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHi3zCRBK7hj4Ov3rIwAAAZMIAC6zpDR9lmdHJJBj9O+EUvlp\nojWZl3bPZIkIHondP+vt7QvCS7l9x5PGHkNRs4bTnh1njvyWoJ0PUl3eFacNM3eV\niTunIxZiCJLT3YWL83qLAaUJRkGYK8S6hSuAXEclcfczbdeCZUi2vDa/EOhhggwL\neyf6biisnWakZP6b6IckRbfxDAMAoJJcKjimFaN5a716XwLKfEnx1BrDeENfiqa/\nwFu07QCyuAXWenuccfRxoHOGaJF4bB3JiH1KPlrtcfZqOxSkSE2Ub1oT+nfh/+yy\naZBlrG3KNbSvILmMTslRtJu0PgpoIXvrdZL4TLJDh4eOkptItCtmY3trJVix4LE=\n=2DOL\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/816b4760dc8f844f3ae73e263f6a0fdfe3e2a9a1",
            "node_id": "C_kwDOKXYnIdoAKDgxNmI0NzYwZGM4Zjg0NGYzYWU3M2UyNjNmNmEwZmRmZTNlMmE5YTE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d4322be435a735ee6580712823d60acc68117549",
                    "sha": "d4322be435a735ee6580712823d60acc68117549",
                    "url": "https://api.github.com/repos/cython/cython/commits/d4322be435a735ee6580712823d60acc68117549"
                }
            ],
            "sha": "816b4760dc8f844f3ae73e263f6a0fdfe3e2a9a1",
            "url": "https://api.github.com/repos/cython/cython/commits/816b4760dc8f844f3ae73e263f6a0fdfe3e2a9a1"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/191b1a580e0c8ef626b17c1c388ee6d88d96f86d/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T03:33:13Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T03:33:13Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Get rid of un-needed comments\n\nThey were in place for a previous version of the PyiWriter that I had as notes for.",
                "tree": {
                    "sha": "f6a210cfb3e03b64556b2f1e5ad9563d471f4bb2",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f6a210cfb3e03b64556b2f1e5ad9563d471f4bb2"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/191b1a580e0c8ef626b17c1c388ee6d88d96f86d",
                "verification": {
                    "payload": "tree f6a210cfb3e03b64556b2f1e5ad9563d471f4bb2\nparent 816b4760dc8f844f3ae73e263f6a0fdfe3e2a9a1\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696476793 -0500\ncommitter GitHub <noreply@github.com> 1696476793 -0500\n\nGet rid of un-needed comments\n\nThey were in place for a previous version of the PyiWriter that I had as notes for.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHi55CRBK7hj4Ov3rIwAASyIIAAtEqSehg3SluPNF2bhbq6HW\nEymXzcrSEj2Ny4rGUopIWlV4Th+/AUqedXnai80k40aso/wWHrUR/YDYhVKU8Nli\nFE6WLoUxLc6KV8JqLb79ovYehYQgsZGwfME2buMUmfBLucr5EcKhDk3XaKeo+9fJ\nkfGIR0PbXthVkKLaqawEWXGVl3/PfQOKhUBOEVF40Wm9BbEd3UJzI8droxcWjlAv\ng9sVVPIOaRU5SkvqaPRSQDyz3uk10Jgf9QRODFHQtjziUtalkEvqqiwjMwuoI2GB\nzLXmrfwGkgODehHBg39+MxJczF5ZNInaiDfXXs7XBFvY7aJNdyVy2RYikEGA5FI=\n=GdpZ\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/191b1a580e0c8ef626b17c1c388ee6d88d96f86d",
            "node_id": "C_kwDOKXYnIdoAKDE5MWIxYTU4MGUwYzhlZjYyNmIxN2MxYzM4OGVlNmQ4OGQ5NmY4NmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/816b4760dc8f844f3ae73e263f6a0fdfe3e2a9a1",
                    "sha": "816b4760dc8f844f3ae73e263f6a0fdfe3e2a9a1",
                    "url": "https://api.github.com/repos/cython/cython/commits/816b4760dc8f844f3ae73e263f6a0fdfe3e2a9a1"
                }
            ],
            "sha": "191b1a580e0c8ef626b17c1c388ee6d88d96f86d",
            "url": "https://api.github.com/repos/cython/cython/commits/191b1a580e0c8ef626b17c1c388ee6d88d96f86d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/aab0926c1d14e51de7eb30bd867f90e43618a3aa/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T03:36:34Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T03:36:34Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix Nodes that need to be returned\n\nMore fixing and other checks were made.",
                "tree": {
                    "sha": "a4e62eff23e184462282be5959bff88180712e02",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a4e62eff23e184462282be5959bff88180712e02"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/aab0926c1d14e51de7eb30bd867f90e43618a3aa",
                "verification": {
                    "payload": "tree a4e62eff23e184462282be5959bff88180712e02\nparent 191b1a580e0c8ef626b17c1c388ee6d88d96f86d\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696476994 -0500\ncommitter GitHub <noreply@github.com> 1696476994 -0500\n\nFix Nodes that need to be returned\n\nMore fixing and other checks were made.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHi9CCRBK7hj4Ov3rIwAAUOcIAJb2/zUy5mf7B+OPbXHCAb5H\nvq5Vu2vwotVNLtWwl/jFmfz7fGdkAoA3npFFOR3iiVWTJRYLjtLwiiT1C53EdOjU\nbS8bzvsz5B6LvCm1/Jx/DjvLQbb3QoRxERGSisQKv7zosMOdrXDADrpuJAEzUm9n\nk+p8LVzdYh8I+RCx6p8waGHN8oEyMLUd31PR/ytUFZmZMWUx26DU7gU6FDrk51s7\nOyrEo/vwJxJG69OaH4Sgt2jS51QgURYCwbVOEmeMizcVW9oCdVT3ZvEnus7PCQiD\nlHmPjVi5KsgThzPr8tmzbXzJej5l3vMm33tCbejqLZxXXF+dUIzKiaM7gjtwowo=\n=53rd\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/aab0926c1d14e51de7eb30bd867f90e43618a3aa",
            "node_id": "C_kwDOKXYnIdoAKGFhYjA5MjZjMWQxNGU1MWRlN2ViMzBiZDg2N2Y5MGU0MzYxOGEzYWE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/191b1a580e0c8ef626b17c1c388ee6d88d96f86d",
                    "sha": "191b1a580e0c8ef626b17c1c388ee6d88d96f86d",
                    "url": "https://api.github.com/repos/cython/cython/commits/191b1a580e0c8ef626b17c1c388ee6d88d96f86d"
                }
            ],
            "sha": "aab0926c1d14e51de7eb30bd867f90e43618a3aa",
            "url": "https://api.github.com/repos/cython/cython/commits/aab0926c1d14e51de7eb30bd867f90e43618a3aa"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ecff828d77c10655cf3936e33a703b7c5656140d/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T03:45:31Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T03:45:31Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix write_class function",
                "tree": {
                    "sha": "a393777567ad58c91ae306e332d5afd14db33903",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a393777567ad58c91ae306e332d5afd14db33903"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ecff828d77c10655cf3936e33a703b7c5656140d",
                "verification": {
                    "payload": "tree a393777567ad58c91ae306e332d5afd14db33903\nparent aab0926c1d14e51de7eb30bd867f90e43618a3aa\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696477531 -0500\ncommitter GitHub <noreply@github.com> 1696477531 -0500\n\nFix write_class function",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHjFbCRBK7hj4Ov3rIwAA6A0IACYH7iiL4kIXHa1F67SRIP95\nzBEgCYRxINqHgl7bbVtr/57LUV8wiTnRmDC5/dewnlBI5Qj0gSNJARdgB/w++MZM\nxOsThdCX+ID3YvR32lU06uQ2mecCO5nwzhC4UkLbiMIaqZcETJAWgHPaOrCUIjfG\nMiuHGTzkNh3M0fJo8kC3g+R0PAVLxQzzmhT3mOgYzMoan4oK3abSXmin/RAgGvBt\nsMryIwWU0HjhqBll6iiWH+eTlFpOtrCXpmsJK3a41IZlguToStPJfFLlVDs1ElFs\ngt78EnZziQEaok6HMXlO7G2nfUoGd+zXoEJX7NTe/ChQI88dww8Nj6wJy936BX4=\n=SJs3\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/ecff828d77c10655cf3936e33a703b7c5656140d",
            "node_id": "C_kwDOKXYnIdoAKGVjZmY4MjhkNzdjMTA2NTVjZjM5MzZlMzNhNzAzYjdjNTY1NjE0MGQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/aab0926c1d14e51de7eb30bd867f90e43618a3aa",
                    "sha": "aab0926c1d14e51de7eb30bd867f90e43618a3aa",
                    "url": "https://api.github.com/repos/cython/cython/commits/aab0926c1d14e51de7eb30bd867f90e43618a3aa"
                }
            ],
            "sha": "ecff828d77c10655cf3936e33a703b7c5656140d",
            "url": "https://api.github.com/repos/cython/cython/commits/ecff828d77c10655cf3936e33a703b7c5656140d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a35c490b9145930495525a537c40c0dbf9150071/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T05:12:29Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T05:12:29Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "fix \"visit_CFuncDefNode\"\n\nTested it against a cpdef function and it kept breaking so I had to come up with a workaround for it.",
                "tree": {
                    "sha": "da7a5b6f00fa560eadba953c340e02eb7f157441",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/da7a5b6f00fa560eadba953c340e02eb7f157441"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a35c490b9145930495525a537c40c0dbf9150071",
                "verification": {
                    "payload": "tree da7a5b6f00fa560eadba953c340e02eb7f157441\nparent ecff828d77c10655cf3936e33a703b7c5656140d\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696482749 -0500\ncommitter GitHub <noreply@github.com> 1696482749 -0500\n\nfix \"visit_CFuncDefNode\"\n\nTested it against a cpdef function and it kept breaking so I had to come up with a workaround for it.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHkW9CRBK7hj4Ov3rIwAAmMMIAIjyQM/z7OMDT9V4/0UFA4t0\nVaOBgD22JriG+c4xy2jTbGearl2g71W4WnGoDyNugC5+5oY5q0nGRlOUeaHMQW6z\nDNzBABHRXHD2u77afa6wZqwzDHYHpOX5yBn2TW2V9WC+SKDZV54sZXRAiyKVmKzL\n1BA73UiSRvSL3EF5Vj9lsoJB7tV9NvCR7qrp58LO1ZCjq9lgvLAAKIpF29oeNi/C\nHdqYNow0PSg8kP9gSmRKU9tD5Bn25DGRtj8ubBM9U6Ze6M5d9jPx2JmWpRgTBKZv\naqqzJdl5E3txfvETfIoi3PDnFH2e3uEvLju0ta9CXab73nNtD9+aQDpjxSJS0mE=\n=5SS/\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/a35c490b9145930495525a537c40c0dbf9150071",
            "node_id": "C_kwDOKXYnIdoAKGEzNWM0OTBiOTE0NTkzMDQ5NTUyNWE1MzdjNDBjMGRiZjkxNTAwNzE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ecff828d77c10655cf3936e33a703b7c5656140d",
                    "sha": "ecff828d77c10655cf3936e33a703b7c5656140d",
                    "url": "https://api.github.com/repos/cython/cython/commits/ecff828d77c10655cf3936e33a703b7c5656140d"
                }
            ],
            "sha": "a35c490b9145930495525a537c40c0dbf9150071",
            "url": "https://api.github.com/repos/cython/cython/commits/a35c490b9145930495525a537c40c0dbf9150071"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e5d6bac2bf7c5dd78dacd3a07d98486964ef0283/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T17:36:30Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T17:36:30Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "bf32dc04f807e5f67a8c932c2ef098dbf8d711da",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/bf32dc04f807e5f67a8c932c2ef098dbf8d711da"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e5d6bac2bf7c5dd78dacd3a07d98486964ef0283",
                "verification": {
                    "payload": "tree bf32dc04f807e5f67a8c932c2ef098dbf8d711da\nparent a35c490b9145930495525a537c40c0dbf9150071\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696527390 -0500\ncommitter GitHub <noreply@github.com> 1696527390 -0500\n\nUpdate Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHvQeCRBK7hj4Ov3rIwAA3jUIAAvHTPAjc+KgxsQn+sxH/b3Q\naYzrOOPREv10Y7q3hIjlBJ9fGq/QIaDyB41nawvphGOHAFBc2n7jMnpSgQ8+3GTV\nu8lyEV4CsYHeSvTJR6n0tdd70Yode7s/HmZyk2Kkqdik/13aLz5ktOa6Za9Nas4o\nE+ZIQgmp+gXSA2jC5oDNyPy7JOjxOTE011et6UW2gWX6D0SEnIJKNjEoLD1Mse54\nTjDJIV2Wj09mArv+sx6R2vEQrqfMvu+YqzJ3SFSGdtI/NcSXGgNyzsdJdkeymJK0\nWdeDx9O5z1WmlO8L8rUnyWdB5luHUp+hCGc3rqfkwRvb3k8p/ZSo/LjAcQnDKqs=\n=+pGB\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/e5d6bac2bf7c5dd78dacd3a07d98486964ef0283",
            "node_id": "C_kwDOKXYnIdoAKGU1ZDZiYWMyYmY3YzVkZDc4ZGFjZDNhMDdkOTg0ODY5NjRlZjAyODM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a35c490b9145930495525a537c40c0dbf9150071",
                    "sha": "a35c490b9145930495525a537c40c0dbf9150071",
                    "url": "https://api.github.com/repos/cython/cython/commits/a35c490b9145930495525a537c40c0dbf9150071"
                }
            ],
            "sha": "e5d6bac2bf7c5dd78dacd3a07d98486964ef0283",
            "url": "https://api.github.com/repos/cython/cython/commits/e5d6bac2bf7c5dd78dacd3a07d98486964ef0283"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/982033d64e57739eedc05297284156f5e08a379c/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T17:36:43Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T17:36:43Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "7f494b7d765edf73e9529b75f5274d1618e0820a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7f494b7d765edf73e9529b75f5274d1618e0820a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/982033d64e57739eedc05297284156f5e08a379c",
                "verification": {
                    "payload": "tree 7f494b7d765edf73e9529b75f5274d1618e0820a\nparent e5d6bac2bf7c5dd78dacd3a07d98486964ef0283\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696527403 -0500\ncommitter GitHub <noreply@github.com> 1696527403 -0500\n\nUpdate Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHvQrCRBK7hj4Ov3rIwAABd8IAJmNlWOdZvuwgv9Vew/bFUVd\ne9SRfqHlS++LVAQHpyU17SeMy1naILm6jMiUFi/HcSkefu664CqEx2BVm/n7o/v2\nlgBSKzptbSMVpmcrzIhgImc7+T7zSHWCHjIPNIZqu/eDb6yOgYdW4H5QahzU428r\nE8vGMrlWaCq4BREyShOcKbWpzTq/qMJB2+GyziBdu8XWM33HWE5NusYN0xuDfT1N\nyD7Pt7llPvR7SbcpFkhCzEBcDpw7MzLiVEHH+tcpcIoX8Lg/RmwwdhK3MyYO77xp\n1S1lRS1u0TufJpKktEK3LJU9F+8UOBtRYoc9/cncOLztwTfpzg7S7izCqKVvRhw=\n=GbLs\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/982033d64e57739eedc05297284156f5e08a379c",
            "node_id": "C_kwDOKXYnIdoAKDk4MjAzM2Q2NGU1NzczOWVlZGMwNTI5NzI4NDE1NmY1ZTA4YTM3OWM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e5d6bac2bf7c5dd78dacd3a07d98486964ef0283",
                    "sha": "e5d6bac2bf7c5dd78dacd3a07d98486964ef0283",
                    "url": "https://api.github.com/repos/cython/cython/commits/e5d6bac2bf7c5dd78dacd3a07d98486964ef0283"
                }
            ],
            "sha": "982033d64e57739eedc05297284156f5e08a379c",
            "url": "https://api.github.com/repos/cython/cython/commits/982033d64e57739eedc05297284156f5e08a379c"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0b4518dfb111a17df924b5106835980b23b82b0b/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T17:36:57Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T17:36:57Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "72131b5399314a2e7b0483ba8ec7deb01cc94fed",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/72131b5399314a2e7b0483ba8ec7deb01cc94fed"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0b4518dfb111a17df924b5106835980b23b82b0b",
                "verification": {
                    "payload": "tree 72131b5399314a2e7b0483ba8ec7deb01cc94fed\nparent 982033d64e57739eedc05297284156f5e08a379c\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696527417 -0500\ncommitter GitHub <noreply@github.com> 1696527417 -0500\n\nUpdate Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHvQ5CRBK7hj4Ov3rIwAASv8IAH4IheZewzLV2wYJmKuxJR+J\nIceqGzRkjvFVBaMY2cIVFgkYaKTb89rgB9RdNjpfhSEPX8caiWMtv7CRX4Mxc/+n\nsLkrqYHaQhAruTuNah/UlwK7LI99OauwneG95hkKv7RnvdyIMkC13pJmLGAWYalt\nrenGGiWZ/PanvkXUGlKf3skL1cza+9UgqDFI0DERpo0RzwsHq7JV3+Wzq/EjS5vo\nBraHfGrCBh5LmLG7Bs2e56ImWwle8dp8Pe1iS+O5F9TB72lIx0wWADzp93oMl6Bv\nWAKjGkV69a57sKOW4xjrAQBFp4mfzNkYzus8VSqqZ3+q3Tq/aKsgGvwSz9ohzYI=\n=+6Mo\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/0b4518dfb111a17df924b5106835980b23b82b0b",
            "node_id": "C_kwDOKXYnIdoAKDBiNDUxOGRmYjExMWExN2RmOTI0YjUxMDY4MzU5ODBiMjNiODJiMGI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/982033d64e57739eedc05297284156f5e08a379c",
                    "sha": "982033d64e57739eedc05297284156f5e08a379c",
                    "url": "https://api.github.com/repos/cython/cython/commits/982033d64e57739eedc05297284156f5e08a379c"
                }
            ],
            "sha": "0b4518dfb111a17df924b5106835980b23b82b0b",
            "url": "https://api.github.com/repos/cython/cython/commits/0b4518dfb111a17df924b5106835980b23b82b0b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7df606a035818f3112879a5803b9ccb18e3121d7/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T17:38:12Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T17:38:12Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "716c0fe150a92b9abf2f46142458a380770b1555",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/716c0fe150a92b9abf2f46142458a380770b1555"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7df606a035818f3112879a5803b9ccb18e3121d7",
                "verification": {
                    "payload": "tree 716c0fe150a92b9abf2f46142458a380770b1555\nparent 0b4518dfb111a17df924b5106835980b23b82b0b\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696527492 -0500\ncommitter GitHub <noreply@github.com> 1696527492 -0500\n\nUpdate Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHvSECRBK7hj4Ov3rIwAAI8MIAIYH0xpdhW5U57+HxC9uco06\nn+2kP1P/+mSBIKU/mupA4iYJlvQMboK6ReIxuSVJGjBOXui29IVpGjgYf1zQWdOH\nULbDD7Ufe8OWafJGtWlCykkDKCtf8ykMf1SBKnnR32bfcN47DR7RhIWVALex6mMj\njwdrMCg36RCWw54eGGoNedGDxc2fvoTSCIboDcHoPugYhtU9OJ0yIGVe5LHch5dd\nDdJ0xyAwMEurjtTLJWj2G0l7UzvLVeyPeXoSDLRExv/axspgE6SjK7aj3VdYuMq0\nWGdE8U5PbTt8RJoS/4hO18S2cc8gRfzJiuORmrM5tIv0UuSbWuUfVSKFNRE44Jw=\n=E/Te\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/7df606a035818f3112879a5803b9ccb18e3121d7",
            "node_id": "C_kwDOKXYnIdoAKDdkZjYwNmEwMzU4MThmMzExMjg3OWE1ODAzYjljY2IxOGUzMTIxZDc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0b4518dfb111a17df924b5106835980b23b82b0b",
                    "sha": "0b4518dfb111a17df924b5106835980b23b82b0b",
                    "url": "https://api.github.com/repos/cython/cython/commits/0b4518dfb111a17df924b5106835980b23b82b0b"
                }
            ],
            "sha": "7df606a035818f3112879a5803b9ccb18e3121d7",
            "url": "https://api.github.com/repos/cython/cython/commits/7df606a035818f3112879a5803b9ccb18e3121d7"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/60a4e1b153d7c670110e5c7af3b1ee4190cc9e9f/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T17:38:23Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T17:38:23Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Cython/Compiler/Options.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "b35b85fd1d789e032856870cba60710400e30b24",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b35b85fd1d789e032856870cba60710400e30b24"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/60a4e1b153d7c670110e5c7af3b1ee4190cc9e9f",
                "verification": {
                    "payload": "tree b35b85fd1d789e032856870cba60710400e30b24\nparent 7df606a035818f3112879a5803b9ccb18e3121d7\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696527503 -0500\ncommitter GitHub <noreply@github.com> 1696527503 -0500\n\nUpdate Cython/Compiler/Options.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHvSPCRBK7hj4Ov3rIwAASIQIALAwehTPCV79V8AfGU/3J9On\nijFD4ZESXawLb4O3FH3fXSiAVOfs6wdyuo8zBKF2fkxL/XubmSu2EOrvgL/8HNRJ\nyzmHGYfdeW91gMs4yxVJFNeqeGnndMfgkn9lqbeM0CFENhmF2hIA1j0g+zIKT27v\n1IoLaYCqR3V4cb2OldSr25YsTAQtTGAMIoUZ7JNm9G6l4wVOYcyYtEd+6GnXcR9Y\n5/BB4O2QP0m8t7ZX1GVmWMs94sYe0yQ1FRm2kpEkW8lROBcOJ7IiRDodgi++TsIW\nwH6FGLCvmx4viPPhGwATuT3x5+HFVdkJiRykAqmDoE4f0bCk6RPqBiT9kS+EIqc=\n=xLoT\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/60a4e1b153d7c670110e5c7af3b1ee4190cc9e9f",
            "node_id": "C_kwDOKXYnIdoAKDYwYTRlMWIxNTNkN2M2NzAxMTBlNWM3YWYzYjFlZTQxOTBjYzllOWY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7df606a035818f3112879a5803b9ccb18e3121d7",
                    "sha": "7df606a035818f3112879a5803b9ccb18e3121d7",
                    "url": "https://api.github.com/repos/cython/cython/commits/7df606a035818f3112879a5803b9ccb18e3121d7"
                }
            ],
            "sha": "60a4e1b153d7c670110e5c7af3b1ee4190cc9e9f",
            "url": "https://api.github.com/repos/cython/cython/commits/60a4e1b153d7c670110e5c7af3b1ee4190cc9e9f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/37ba66ebcc32f3e504c0735e490ddeeed098eda2/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T17:44:38Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T17:44:38Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Add more Pyrex Type translations",
                "tree": {
                    "sha": "6ba0e1e82e76d444ae870a19f5d309944bd7de41",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/6ba0e1e82e76d444ae870a19f5d309944bd7de41"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/37ba66ebcc32f3e504c0735e490ddeeed098eda2",
                "verification": {
                    "payload": "tree 6ba0e1e82e76d444ae870a19f5d309944bd7de41\nparent 60a4e1b153d7c670110e5c7af3b1ee4190cc9e9f\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696527878 -0500\ncommitter GitHub <noreply@github.com> 1696527878 -0500\n\nAdd more Pyrex Type translations",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHvYGCRBK7hj4Ov3rIwAAUnQIAGva0hv2qwLm0w6bGMPokbQf\neP1shGdP9nEKtJ6JXLwtPoCAL8oHy3MywW2etBp7EsTDk/mDhxRR+e7Qp5oHGA0l\n1U4oZx5/WeOZsgxsRJMVw/CMQy5NsB2iR/IXaFzd4SKEwSkgtG3qmCQJwT6aBxp5\n2Di9ZU2LWNGOyJygvaYOftV8sRqcO+qe5+wOv05maDDz47InHB4qyWNSjg8J39hv\na64htItU5GuPmMiUU5CucsRYYbNEDVIqKJbF9Bu06BuZGkSZcpdCcrnTa4pQifRI\n9i1FHTkS9x5+caAGA4UcAm8K8sakFL0j+gaq/3Src5/sg+xWGOqrI7Rz516O8Hg=\n=FKJC\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/37ba66ebcc32f3e504c0735e490ddeeed098eda2",
            "node_id": "C_kwDOKXYnIdoAKDM3YmE2NmViY2MzMmYzZTUwNGMwNzM1ZTQ5MGRkZWVlZDA5OGVkYTI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/60a4e1b153d7c670110e5c7af3b1ee4190cc9e9f",
                    "sha": "60a4e1b153d7c670110e5c7af3b1ee4190cc9e9f",
                    "url": "https://api.github.com/repos/cython/cython/commits/60a4e1b153d7c670110e5c7af3b1ee4190cc9e9f"
                }
            ],
            "sha": "37ba66ebcc32f3e504c0735e490ddeeed098eda2",
            "url": "https://api.github.com/repos/cython/cython/commits/37ba66ebcc32f3e504c0735e490ddeeed098eda2"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b501fd3b5c4d72ee2053423cde685daeb37055c5/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T17:56:46Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T17:56:46Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "replace \".\" to \"/\" in Visit_ModuleNode",
                "tree": {
                    "sha": "110bfd65aab585bc52fe597ed59ef5b5f725a9c0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/110bfd65aab585bc52fe597ed59ef5b5f725a9c0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b501fd3b5c4d72ee2053423cde685daeb37055c5",
                "verification": {
                    "payload": "tree 110bfd65aab585bc52fe597ed59ef5b5f725a9c0\nparent 37ba66ebcc32f3e504c0735e490ddeeed098eda2\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696528606 -0500\ncommitter GitHub <noreply@github.com> 1696528606 -0500\n\nreplace \".\" to \"/\" in Visit_ModuleNode",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHvjeCRBK7hj4Ov3rIwAARqUIAJmD9D/xMLe/a9JVQYOytY3h\nnbfL5QXProarIkFyQnfWDxcsQN2fOfOJVrGweUvl8b29jBJJcEjhUhB7TuTyed4L\nw4W2ZrsdKkAeqsYWsv3pIOKg3SE0q4rz5bj5ZX3f+NZLX8ijYEe6QZbqk/o6WkhQ\nQIiRpuWFT9+bkjliLb8eFDaoQ+5PWXwtoAulJz9jZWmA7+hw8HIg1GAMFeEebX0u\nw55D+wakNmZiZcToCSf2RaygrFTbxl1IhsrMm6fvS9q8dM+y63SrBN9xDQfbi+gR\n0Wx7JDApMUutICFkNM+LCVkuOvE+iNDN2XfMEVqYx68yC3xBgpuR+ooHw3X7FFc=\n=sK3L\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/b501fd3b5c4d72ee2053423cde685daeb37055c5",
            "node_id": "C_kwDOKXYnIdoAKGI1MDFmZDNiNWM0ZDcyZWUyMDUzNDIzY2RlNjg1ZGFlYjM3MDU1YzU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/37ba66ebcc32f3e504c0735e490ddeeed098eda2",
                    "sha": "37ba66ebcc32f3e504c0735e490ddeeed098eda2",
                    "url": "https://api.github.com/repos/cython/cython/commits/37ba66ebcc32f3e504c0735e490ddeeed098eda2"
                }
            ],
            "sha": "b501fd3b5c4d72ee2053423cde685daeb37055c5",
            "url": "https://api.github.com/repos/cython/cython/commits/b501fd3b5c4d72ee2053423cde685daeb37055c5"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8153f915abcc73d195123131f1c7ea20f6be76ff/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T18:05:53Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T18:05:53Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Changed Grammar and added better function names  \n\nwrite_decorator is used to replace the name print_Decorator which I had pulled from the last pull request from ax487, it's a better fit for what has already been named in this scenario.",
                "tree": {
                    "sha": "49b27623fb211eb6666ec6ab70e42035d2f4093f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/49b27623fb211eb6666ec6ab70e42035d2f4093f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8153f915abcc73d195123131f1c7ea20f6be76ff",
                "verification": {
                    "payload": "tree 49b27623fb211eb6666ec6ab70e42035d2f4093f\nparent b501fd3b5c4d72ee2053423cde685daeb37055c5\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696529153 -0500\ncommitter GitHub <noreply@github.com> 1696529153 -0500\n\nChanged Grammar and added better function names  \n\nwrite_decorator is used to replace the name print_Decorator which I had pulled from the last pull request from ax487, it's a better fit for what has already been named in this scenario.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHvsBCRBK7hj4Ov3rIwAAAPIIAJrr8VtSFxq4zWm2HWjcbZbl\nk3gR8daQ0sD5bhom+1AeV5PMe5em1jlaLL0u4w682O8zvVwPegTRxYv09Hl8X0Do\nlfv7UJ8zLuE0ZL3LkCFoLUdk9rHUdp5kuFSBvc05bcOup+NOArL0hJiZMtzp7ZzF\ncDkLsE3fXKIL+nc49g+wZ69XIRx/O7+ItH6WKHwY7LaA9lCn/vU4Nt69u/t2UeiZ\n1TdJLGFOsuRIwGNLgnZt3+IlTmZv6/uBK4c0veirTtoR4YHtuLGH1CoZGDCY1fbg\nddc0paZ+H51RoUrXQVgJpjx2zBFXxAyBT+Q34emSO8n7CINBraEpSuqLiddlihg=\n=FcPc\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/8153f915abcc73d195123131f1c7ea20f6be76ff",
            "node_id": "C_kwDOKXYnIdoAKDgxNTNmOTE1YWJjYzczZDE5NTEyMzEzMWYxYzdlYTIwZjZiZTc2ZmY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b501fd3b5c4d72ee2053423cde685daeb37055c5",
                    "sha": "b501fd3b5c4d72ee2053423cde685daeb37055c5",
                    "url": "https://api.github.com/repos/cython/cython/commits/b501fd3b5c4d72ee2053423cde685daeb37055c5"
                }
            ],
            "sha": "8153f915abcc73d195123131f1c7ea20f6be76ff",
            "url": "https://api.github.com/repos/cython/cython/commits/8153f915abcc73d195123131f1c7ea20f6be76ff"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5b71b905122adfc76d5f67fafcaf1abfa3de3f48/comments",
            "commit": {
                "author": {
                    "date": "2023-10-05T19:02:11Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-05T19:02:11Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix Utils import",
                "tree": {
                    "sha": "da48ab3098871bfd38d7a1af348008e71ba36412",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/da48ab3098871bfd38d7a1af348008e71ba36412"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5b71b905122adfc76d5f67fafcaf1abfa3de3f48",
                "verification": {
                    "payload": "tree da48ab3098871bfd38d7a1af348008e71ba36412\nparent 8153f915abcc73d195123131f1c7ea20f6be76ff\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696532531 -0500\ncommitter GitHub <noreply@github.com> 1696532531 -0500\n\nFix Utils import",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlHwgzCRBK7hj4Ov3rIwAAenAIAGyrLE7X6BMp3thOQhIgb3W/\nJeb099aH2PiB415wLytUkj7sa88GXObBUA2B4Hdd3AEAnLocurLXHXHLiA/M858H\nkkgMRSniEzj4Ue3tQuS4z6VENrHBWJbqgi1myGe6UnaSYmrbkU9PLxPTrag7DlV/\nEdmJiwW7T+ToDlOcPv35rpE8VCoTT5YxiEHCl568d6OzjcVWIN+TeaBJyqmtTt4x\n8DEe4xWxdy5w57CM9cMM9aZ2KPGt8LaMGmICLX2hbmY1JduthQ7ZkU4g7h6CbqXL\noPz7RUuChB+Atayfo18flxqa2aNMuMPC27Bda26imcCDFddDjQZdGyFMPpG3Qv8=\n=tUdk\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/5b71b905122adfc76d5f67fafcaf1abfa3de3f48",
            "node_id": "C_kwDOKXYnIdoAKDViNzFiOTA1MTIyYWRmYzc2ZDVmNjdmYWZjYWYxYWJmYTNkZTNmNDg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8153f915abcc73d195123131f1c7ea20f6be76ff",
                    "sha": "8153f915abcc73d195123131f1c7ea20f6be76ff",
                    "url": "https://api.github.com/repos/cython/cython/commits/8153f915abcc73d195123131f1c7ea20f6be76ff"
                }
            ],
            "sha": "5b71b905122adfc76d5f67fafcaf1abfa3de3f48",
            "url": "https://api.github.com/repos/cython/cython/commits/5b71b905122adfc76d5f67fafcaf1abfa3de3f48"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/de311c045d2ff7a319f0958d5f803ecfa700747b/comments",
            "commit": {
                "author": {
                    "date": "2023-10-06T18:22:18Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-06T18:22:18Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "add visit_StatListNode\n\nIt turns out that without this in place the rest of the transforms do not work however I have added this function in and now everything works as normal.",
                "tree": {
                    "sha": "66565c6e32ad8f6c6e2b04bc5a3ff112c6db6b37",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/66565c6e32ad8f6c6e2b04bc5a3ff112c6db6b37"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/de311c045d2ff7a319f0958d5f803ecfa700747b",
                "verification": {
                    "payload": "tree 66565c6e32ad8f6c6e2b04bc5a3ff112c6db6b37\nparent 5b71b905122adfc76d5f67fafcaf1abfa3de3f48\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696616538 -0500\ncommitter GitHub <noreply@github.com> 1696616538 -0500\n\nadd visit_StatListNode\n\nIt turns out that without this in place the rest of the transforms do not work however I have added this function in and now everything works as normal.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlIFBaCRBK7hj4Ov3rIwAAcZkIAI129NeBxMpgQaibrTOuZfZm\nken//AMIt6IabRtdd900rYfUJl4Q3wmDDDRWNJ77B40xlqN58402TeqwaHDYalz3\nf/6YbSpHH8b1wFV4Ao7MrHeoPUqFEBM2PaHcb5tPccjRE0oQqMwGUWEabOF+wkAS\nKTnmu16ZOrI0bVzhqOibTp36Qps5gkAHC/hTtPgxKPXEcG03qdJiT4MjH8eWgU1Z\nAIbNgDrR57BxvEGIxakA5OYYxscnyOyi47+PGqErQTsh+LAobUnJfVNpm8YC/0VJ\n00At/yKH8XGX/jvDupdiIQ+v+SEYyGPJvY9rQGqbvTZpmV3HMI8BA5yqSaRyoWk=\n=ST0e\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/de311c045d2ff7a319f0958d5f803ecfa700747b",
            "node_id": "C_kwDOKXYnIdoAKGRlMzExYzA0NWQyZmY3YTMxOWYwOTU4ZDVmODAzZWNmYTcwMDc0N2I",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5b71b905122adfc76d5f67fafcaf1abfa3de3f48",
                    "sha": "5b71b905122adfc76d5f67fafcaf1abfa3de3f48",
                    "url": "https://api.github.com/repos/cython/cython/commits/5b71b905122adfc76d5f67fafcaf1abfa3de3f48"
                }
            ],
            "sha": "de311c045d2ff7a319f0958d5f803ecfa700747b",
            "url": "https://api.github.com/repos/cython/cython/commits/de311c045d2ff7a319f0958d5f803ecfa700747b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b7eaad0ef018d50a3a5aca6ec838c3503b623e00/comments",
            "commit": {
                "author": {
                    "date": "2023-10-06T18:54:13Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-06T18:54:13Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "import CythonTransform from Visitor instead of from ParseTreeTransforms",
                "tree": {
                    "sha": "7c619e11b2f04d1492ebe145587c99efbd9ee8f5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7c619e11b2f04d1492ebe145587c99efbd9ee8f5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b7eaad0ef018d50a3a5aca6ec838c3503b623e00",
                "verification": {
                    "payload": "tree 7c619e11b2f04d1492ebe145587c99efbd9ee8f5\nparent de311c045d2ff7a319f0958d5f803ecfa700747b\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696618453 -0500\ncommitter GitHub <noreply@github.com> 1696618453 -0500\n\nimport CythonTransform from Visitor instead of from ParseTreeTransforms",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlIFfVCRBK7hj4Ov3rIwAAoX4IADK9WDyBTWtDKHfIP3I6ch0c\nqjJC7M5Vg4rIUwPXGfUpgI+RehgtPdeuI4caYgQF6IsIp5WiPi/W+JeG4rWPKUvp\ng8cU5cPEjdOpn0oiAttSzMUvoAtEQqHde7iUjXV1bHuGjeyA1oDbO2f4dg9j5M6b\nXYGttNCZFdKRnVMwJvcCRXSmRvChdpnPCLhMqUFrZkMyI2QBCQ/sKEp6A2JlTGvF\ncNFyzKXUO5kqtDUJbFCJsI/W6lt6J6dM79DYHatlllVeXiWM+CDErSbMOlnlmdQu\ngzr1+Jyd6nX5+VMv88ouAfZ6bwZH1koGpywWHL+hac7MbJHY+G2OUmtbGoh0Y58=\n=JflP\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/b7eaad0ef018d50a3a5aca6ec838c3503b623e00",
            "node_id": "C_kwDOKXYnIdoAKGI3ZWFhZDBlZjAxOGQ1MGEzYTVhY2E2ZWM4MzhjMzUwM2I2MjNlMDA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/de311c045d2ff7a319f0958d5f803ecfa700747b",
                    "sha": "de311c045d2ff7a319f0958d5f803ecfa700747b",
                    "url": "https://api.github.com/repos/cython/cython/commits/de311c045d2ff7a319f0958d5f803ecfa700747b"
                }
            ],
            "sha": "b7eaad0ef018d50a3a5aca6ec838c3503b623e00",
            "url": "https://api.github.com/repos/cython/cython/commits/b7eaad0ef018d50a3a5aca6ec838c3503b623e00"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4c680a5a02c1c138e953f95bde699bd64e4b64a4/comments",
            "commit": {
                "author": {
                    "date": "2023-10-06T21:58:17Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-06T21:58:17Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update TypeStubGenerator.py\n\nspelling errors should now be fixed",
                "tree": {
                    "sha": "34b0479d6c575e9a42fb2c5136fe0c868d381915",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/34b0479d6c575e9a42fb2c5136fe0c868d381915"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4c680a5a02c1c138e953f95bde699bd64e4b64a4",
                "verification": {
                    "payload": "tree 34b0479d6c575e9a42fb2c5136fe0c868d381915\nparent b7eaad0ef018d50a3a5aca6ec838c3503b623e00\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696629497 -0500\ncommitter GitHub <noreply@github.com> 1696629497 -0500\n\nUpdate TypeStubGenerator.py\n\nspelling errors should now be fixed",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlIIL5CRBK7hj4Ov3rIwAAC+4IACztuM2VE9RKP3D7Hau7J515\n4i1ZJqVLry6Kq1eoepvyqnxtUJ/XAcKemYwGq9aMxFBTJHtJhxS3rqPjtLr2JO3o\nOXn+vvQhVN3HwjU8VeXMz/t6sFwxbZmnDbrcfup1RdGS6hERk5+N4H+bkvbFDLfc\nW4Q24MRsb0uHmHfgvU3mOokXAvoulI7GmCEQ1MTuB4ySfr0FMJEvXgZvtnf4qRyR\n1aBefvi7258F0XwyJnNLQDiJRGgIo0DBDTM/EYBSPjjUQrAV9234oQdVbKC16z5i\nGc8nvXWK7BEjIw1qFP4cPkOH8+gjSFnT6PvQzPtV3O986jO+FpfjP5c3KdpG+y0=\n=r6k3\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/4c680a5a02c1c138e953f95bde699bd64e4b64a4",
            "node_id": "C_kwDOKXYnIdoAKDRjNjgwYTVhMDJjMWMxMzhlOTUzZjk1YmRlNjk5YmQ2NGU0YjY0YTQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b7eaad0ef018d50a3a5aca6ec838c3503b623e00",
                    "sha": "b7eaad0ef018d50a3a5aca6ec838c3503b623e00",
                    "url": "https://api.github.com/repos/cython/cython/commits/b7eaad0ef018d50a3a5aca6ec838c3503b623e00"
                }
            ],
            "sha": "4c680a5a02c1c138e953f95bde699bd64e4b64a4",
            "url": "https://api.github.com/repos/cython/cython/commits/4c680a5a02c1c138e953f95bde699bd64e4b64a4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e96d5b1547a769ff42c501bdcad0ddafa1427181/comments",
            "commit": {
                "author": {
                    "date": "2023-10-08T18:52:56Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-08T18:52:56Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update TypeStubGenerator.py",
                "tree": {
                    "sha": "620dc37fe4a92a3cfbd031c9728fbb25a88992b4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/620dc37fe4a92a3cfbd031c9728fbb25a88992b4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e96d5b1547a769ff42c501bdcad0ddafa1427181",
                "verification": {
                    "payload": "tree 620dc37fe4a92a3cfbd031c9728fbb25a88992b4\nparent 4c680a5a02c1c138e953f95bde699bd64e4b64a4\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1696791176 -0500\ncommitter GitHub <noreply@github.com> 1696791176 -0500\n\nUpdate TypeStubGenerator.py",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlIvqICRBK7hj4Ov3rIwAAm28IABQBVe7H7HAORGLThLgEpy97\nEXL5ArBW39Yst2LvCwVuoB9ZLPCylAzuqy9a0sFMHKoIRoKUhEDXXRiolPiCTqcu\nYvaMUavQUK/adF3S5AVDryHRkC9FxuMbP6Z9lgOLB4lsbieIwJZSDQYsZQxo6SSk\nNQ367BPLfVHJV2aggRTb7hcQEsYSbfTTzzVYI6DsK/AGfcFYDK/A8WjPkOfzD0H9\nYC+BVbK86qDfw77ahOJDFERQ+CcniKO9O8gA1w9WaBLPvNIZ4fEs/XKZ3f6u8ecu\na9QCWHIGPjc4DUVrVKiAmzy+t3HT2cki9NlsME5McMLFE8cGMb+F5NjmHe5SjmM=\n=Yn5D\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "node_id": "C_kwDOKXYnIdoAKGU5NmQ1YjE1NDdhNzY5ZmY0MmM1MDFiZGNhZDBkZGFmYTE0MjcxODE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4c680a5a02c1c138e953f95bde699bd64e4b64a4",
                    "sha": "4c680a5a02c1c138e953f95bde699bd64e4b64a4",
                    "url": "https://api.github.com/repos/cython/cython/commits/4c680a5a02c1c138e953f95bde699bd64e4b64a4"
                }
            ],
            "sha": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
            "url": "https://api.github.com/repos/cython/cython/commits/e96d5b1547a769ff42c501bdcad0ddafa1427181"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/dbf2dbba7a45af3c9068328b1672cb7e0067ba18/comments",
            "commit": {
                "author": {
                    "date": "2023-10-29T18:11:51Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-29T18:11:51Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "9b491b74b6871fa74c9145154e372751a8551067",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9b491b74b6871fa74c9145154e372751a8551067"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/dbf2dbba7a45af3c9068328b1672cb7e0067ba18",
                "verification": {
                    "payload": "tree 9b491b74b6871fa74c9145154e372751a8551067\nparent e96d5b1547a769ff42c501bdcad0ddafa1427181\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1698603111 -0500\ncommitter GitHub <noreply@github.com> 1698603111 -0500\n\nUpdate Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlPqBnCRBK7hj4Ov3rIwAAb+gIAH9my46LLOVeF+tHwbTLZgu+\np6ba1mbjiN4QTVsOf3iO4CjrxvXdjlKld65cpjzmBAMtlySBSQlbZiCVHu57DuSa\nMh3G+dRjH1kGFF0xu5IrSzxnA4x9JyeqSjFTq7UeW/QyZTHzg2RivwzHfonifZGZ\nuOACm7Ugnu9gZmH5u+zYXNbRjLhKhJ4zJFRVHrFifgDT6y1vAY+aae0h9bHHL2WL\nqZ16KlxFmF9Wg5ysyyYX1WBLCi6161xQeH6YNJDM0z4JEWL20boByLS54qiDgILy\nF/4M8Xtj9xcIIKFbIcRabcdNAHkVrpvJAgCQ7pNrLsXmQdxRVIA87jRSadFOP5s=\n=p39K\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/dbf2dbba7a45af3c9068328b1672cb7e0067ba18",
            "node_id": "C_kwDOKXYnIdoAKGRiZjJkYmJhN2E0NWFmM2M5MDY4MzI4YjE2NzJjYjdlMDA2N2JhMTg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e96d5b1547a769ff42c501bdcad0ddafa1427181",
                    "sha": "e96d5b1547a769ff42c501bdcad0ddafa1427181",
                    "url": "https://api.github.com/repos/cython/cython/commits/e96d5b1547a769ff42c501bdcad0ddafa1427181"
                }
            ],
            "sha": "dbf2dbba7a45af3c9068328b1672cb7e0067ba18",
            "url": "https://api.github.com/repos/cython/cython/commits/dbf2dbba7a45af3c9068328b1672cb7e0067ba18"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/42f0662fac984b60f9d8c6582f3fe953e37fca04/comments",
            "commit": {
                "author": {
                    "date": "2023-10-29T18:12:05Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-29T18:12:05Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "8ec2e4e342a5a4281b6e76624f6d5c048f11fdba",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8ec2e4e342a5a4281b6e76624f6d5c048f11fdba"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/42f0662fac984b60f9d8c6582f3fe953e37fca04",
                "verification": {
                    "payload": "tree 8ec2e4e342a5a4281b6e76624f6d5c048f11fdba\nparent dbf2dbba7a45af3c9068328b1672cb7e0067ba18\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1698603125 -0500\ncommitter GitHub <noreply@github.com> 1698603125 -0500\n\nUpdate Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlPqB1CRBK7hj4Ov3rIwAA1ZMIAIMMmN+SL40lhOyzi16HU4/0\noUiS+SADbw9G2J0S6A/bauwWl/iSKDiwBWGgQJ5lljiJaUYRFuWrKemhDp3QL6SR\nFTJsnKWzBtLw5Ipmm+I4WYfd9AP6Vno6SoH8CO+p1ZORkVMocePJw6s0tL2OPMD0\nS8PhFQNGBILqX7ZfuVO2MvAAHopq3MbH/U4SfEC3n3cxqnBRLbgq2kZI+TQJRvvB\nCF/O73BngaX3qKyzH0tngGINVYtYJbjY1i4Bk+g5FybRmorIq4U17JdM182IxiOK\ndCjM21Il9fYRWQyGaVHW/XgZGqgmZXHYbD9bJnqnR5xhBL/BONi7UaOGL15MKR8=\n=+/Uf\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/42f0662fac984b60f9d8c6582f3fe953e37fca04",
            "node_id": "C_kwDOKXYnIdoAKDQyZjA2NjJmYWM5ODRiNjBmOWQ4YzY1ODJmM2ZlOTUzZTM3ZmNhMDQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/dbf2dbba7a45af3c9068328b1672cb7e0067ba18",
                    "sha": "dbf2dbba7a45af3c9068328b1672cb7e0067ba18",
                    "url": "https://api.github.com/repos/cython/cython/commits/dbf2dbba7a45af3c9068328b1672cb7e0067ba18"
                }
            ],
            "sha": "42f0662fac984b60f9d8c6582f3fe953e37fca04",
            "url": "https://api.github.com/repos/cython/cython/commits/42f0662fac984b60f9d8c6582f3fe953e37fca04"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/210a641b9787b237eab4a9ec7cd40af345a08c6b/comments",
            "commit": {
                "author": {
                    "date": "2023-10-29T18:12:36Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-29T18:12:36Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "6e4596386bda0531c137d49688fb31d017b5fbbf",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/6e4596386bda0531c137d49688fb31d017b5fbbf"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/210a641b9787b237eab4a9ec7cd40af345a08c6b",
                "verification": {
                    "payload": "tree 6e4596386bda0531c137d49688fb31d017b5fbbf\nparent 42f0662fac984b60f9d8c6582f3fe953e37fca04\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1698603156 -0500\ncommitter GitHub <noreply@github.com> 1698603156 -0500\n\nUpdate Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlPqCUCRBK7hj4Ov3rIwAA5loIAB4kSZyemqqMFfsRoduE916x\nxZ8Thmq3CbNGsd6NYWlzqTrmnGEltNRLPprwZeIvzV/JyAVxtHbOHarz0eqeC3ZI\nMq2t2SHy3hA1VKzS4CBTLRpsq1luYKzSTXpO3fhDbStSha28F11/nh94ld14eZF8\n7qqxwKJgtkIduGVnlSJ6MonOHYsmZXoK5jSNT2Hb/S24z1olDTf1G95gUN0VIEYL\nN59TwDE1lN3sRoMEOBhOeg8oYKqVRThZnK9o6JoDPrc2mrD/8dIH/qz9FkodLDSV\nPyJcRsrcA0y0hR318k+WeL2gUfnQdin6rGf1e+FTmLz+A3NlMbYgymZbvaXFXi4=\n=qZqc\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/210a641b9787b237eab4a9ec7cd40af345a08c6b",
            "node_id": "C_kwDOKXYnIdoAKDIxMGE2NDFiOTc4N2IyMzdlYWI0YTllYzdjZDQwYWYzNDVhMDhjNmI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/42f0662fac984b60f9d8c6582f3fe953e37fca04",
                    "sha": "42f0662fac984b60f9d8c6582f3fe953e37fca04",
                    "url": "https://api.github.com/repos/cython/cython/commits/42f0662fac984b60f9d8c6582f3fe953e37fca04"
                }
            ],
            "sha": "210a641b9787b237eab4a9ec7cd40af345a08c6b",
            "url": "https://api.github.com/repos/cython/cython/commits/210a641b9787b237eab4a9ec7cd40af345a08c6b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4fb453a0a92e2523e5a58c8b0387546627889904/comments",
            "commit": {
                "author": {
                    "date": "2023-10-29T18:13:25Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-29T18:13:25Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Update Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "9e30222f6d0c225b73e1e53f445e9cef1e448908",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9e30222f6d0c225b73e1e53f445e9cef1e448908"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4fb453a0a92e2523e5a58c8b0387546627889904",
                "verification": {
                    "payload": "tree 9e30222f6d0c225b73e1e53f445e9cef1e448908\nparent 210a641b9787b237eab4a9ec7cd40af345a08c6b\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1698603205 -0500\ncommitter GitHub <noreply@github.com> 1698603205 -0500\n\nUpdate Cython/Compiler/TypeStubGenerator.py\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlPqDFCRBK7hj4Ov3rIwAAf1EIAKM53DAtP0cDkjCjrzEeTJlS\nVaFLPW2oQ8g7Eis6N/liHtmmEQkCzs6Lx0xrK9x6Q3KGJI5th8Rr72d3xwOygech\nwsZobGGyS/6H4w59aG8R3CY6Dyv1j8I9fYy5vSNZm2oPDl5cHzrxvM1cbD6FiVdy\nqP65wKW74O2XYaxKATiDguEaJeCG762XpcMftstEd+JSZNrWEWmBmKmi6L2OFb7l\nv1+zu0bNNZpGXKNV4DsI8C4SVm3ojlML/9uEx/RnNgaGBAppy4BNNhvBy76zGNI5\npVXjCIcpo7c52r96YPuaC0LKorU2+d3TPKnCC9u6FfE5YvioNeC5MkHeVbsRY5o=\n=oCPH\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/4fb453a0a92e2523e5a58c8b0387546627889904",
            "node_id": "C_kwDOKXYnIdoAKDRmYjQ1M2EwYTkyZTI1MjNlNWE1OGM4YjAzODc1NDY2Mjc4ODk5MDQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/210a641b9787b237eab4a9ec7cd40af345a08c6b",
                    "sha": "210a641b9787b237eab4a9ec7cd40af345a08c6b",
                    "url": "https://api.github.com/repos/cython/cython/commits/210a641b9787b237eab4a9ec7cd40af345a08c6b"
                }
            ],
            "sha": "4fb453a0a92e2523e5a58c8b0387546627889904",
            "url": "https://api.github.com/repos/cython/cython/commits/4fb453a0a92e2523e5a58c8b0387546627889904"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8589d400694d989dceaead422628e0fcdc1d12d2/comments",
            "commit": {
                "author": {
                    "date": "2023-10-29T18:18:23Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-10-29T18:18:23Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Formatted with Black",
                "tree": {
                    "sha": "aebb27b664e6e93ca4e772527c690aeaafa5f682",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/aebb27b664e6e93ca4e772527c690aeaafa5f682"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8589d400694d989dceaead422628e0fcdc1d12d2",
                "verification": {
                    "payload": "tree aebb27b664e6e93ca4e772527c690aeaafa5f682\nparent 4fb453a0a92e2523e5a58c8b0387546627889904\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1698603503 -0500\ncommitter GitHub <noreply@github.com> 1698603503 -0500\n\nFormatted with Black",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlPqHvCRBK7hj4Ov3rIwAARDgIAHxgqgUlWTdhK9pPsSFjfI59\nmYijax8VzZmSVoRLpEAztItJysxmbB8ETyIoPKSLvysJAYlj6KmXdFEZ8mxWvduv\nYHgJ0ggIqfV8JsXvDzXGTzm6zvB380i2OS8CECdmySSggnticioSbTbYb5EWbidQ\nFjPFd7/ZhMlAiTwumoTK2p27rDgCwSld2q61g0bKpxOnUoNhei/gqLozw+r/g/oY\n9wt8LqO57rMhQun55yjOgrRlWm1ewWe2zXyknbd8Y+7dp7VU9evq5EcMD3ZspW2P\nnEZk5yBjQxLUNFslBAZ+C2xDdsfQKAO37qMI7EH9oZMBzTYyw+mH/dyD6+bkJWI=\n=g96m\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/8589d400694d989dceaead422628e0fcdc1d12d2",
            "node_id": "C_kwDOKXYnIdoAKDg1ODlkNDAwNjk0ZDk4OWRjZWFlYWQ0MjI2MjhlMGZjZGMxZDEyZDI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4fb453a0a92e2523e5a58c8b0387546627889904",
                    "sha": "4fb453a0a92e2523e5a58c8b0387546627889904",
                    "url": "https://api.github.com/repos/cython/cython/commits/4fb453a0a92e2523e5a58c8b0387546627889904"
                }
            ],
            "sha": "8589d400694d989dceaead422628e0fcdc1d12d2",
            "url": "https://api.github.com/repos/cython/cython/commits/8589d400694d989dceaead422628e0fcdc1d12d2"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d608304a27f5e3e5023e974e5bb5bd49dd7d1242/comments",
            "commit": {
                "author": {
                    "date": "2023-11-04T18:44:30Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-11-04T18:44:30Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'cython:master' into master",
                "tree": {
                    "sha": "798bfa493ff94dfad9656ce5f7df067662c930c4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/798bfa493ff94dfad9656ce5f7df067662c930c4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d608304a27f5e3e5023e974e5bb5bd49dd7d1242",
                "verification": {
                    "payload": "tree 798bfa493ff94dfad9656ce5f7df067662c930c4\nparent 8589d400694d989dceaead422628e0fcdc1d12d2\nparent e584c46beb0ca96da647e30cca55ccfbe77b35de\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1699123470 -0500\ncommitter GitHub <noreply@github.com> 1699123470 -0500\n\nMerge branch 'cython:master' into master\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlRpEOCRBK7hj4Ov3rIwAAGZAIAB4kgyZES8t16CxfVZ197ef4\n/PiszQN1ECBGILqpvrkudRWxN+dUzEV+Od6EMNNwkXBUm4U2WQyid5UIDlFzEVAG\n7k9+IR9o7AenwKqBT5Duzg022Sz5ymFvPO48eF2D+PL4Hq6kASdjH6XruS9On/f0\nQLVqBSYvd37AUMmgSsZjPRbpZCvDVkDI4k4NgO0AGkL1lAkBnoa5bhJjBVpLfG+N\nZmWwrtQM/xKI+HZo4XFF9YRCHot9truR0hx1JatGD0a1+0OyuoxDPBnW+we3o8BQ\nWFOlH0a45Xi94QKciTHYGmnem7UvGjZzWH8zbCtFj7oXubv7McOk6cWNWLbJBbE=\n=ULjJ\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/d608304a27f5e3e5023e974e5bb5bd49dd7d1242",
            "node_id": "C_kwDOKXYnIdoAKGQ2MDgzMDRhMjdmNWUzZTUwMjNlOTc0ZTViYjViZDQ5ZGQ3ZDEyNDI",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8589d400694d989dceaead422628e0fcdc1d12d2",
                    "sha": "8589d400694d989dceaead422628e0fcdc1d12d2",
                    "url": "https://api.github.com/repos/cython/cython/commits/8589d400694d989dceaead422628e0fcdc1d12d2"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/e584c46beb0ca96da647e30cca55ccfbe77b35de",
                    "sha": "e584c46beb0ca96da647e30cca55ccfbe77b35de",
                    "url": "https://api.github.com/repos/cython/cython/commits/e584c46beb0ca96da647e30cca55ccfbe77b35de"
                }
            ],
            "sha": "d608304a27f5e3e5023e974e5bb5bd49dd7d1242",
            "url": "https://api.github.com/repos/cython/cython/commits/d608304a27f5e3e5023e974e5bb5bd49dd7d1242"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/0cb71888aa5a86f82db34d2c1d45dc257b897354/comments",
            "commit": {
                "author": {
                    "date": "2023-11-04T19:55:29Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-11-04T19:55:29Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix decorator recursions\n\nSuggestion was by Scoder https://github.com/cython/cython/pull/5744#discussion_r1367683433",
                "tree": {
                    "sha": "850d8bc0f3ac843b127cc29befdba899804dd786",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/850d8bc0f3ac843b127cc29befdba899804dd786"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/0cb71888aa5a86f82db34d2c1d45dc257b897354",
                "verification": {
                    "payload": "tree 850d8bc0f3ac843b127cc29befdba899804dd786\nparent d608304a27f5e3e5023e974e5bb5bd49dd7d1242\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1699127729 -0500\ncommitter GitHub <noreply@github.com> 1699127729 -0500\n\nFix decorator recursions\n\nSuggestion was by Scoder https://github.com/cython/cython/pull/5744#discussion_r1367683433",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlRqGxCRBK7hj4Ov3rIwAAriMIAKAgaJdPnub7hSLzCU3VhKiC\nhpVef/XwkBWLjSXjFlIE6u2trrhOWS8VG9UdowgBVsISN0rdmMiUgtSN5vJr4LIE\n5icVYKSTuiZh/Jgi+aI8BnMw1Dt4UtUkiUP5gMmHi2qkkp6EOv9gw771vPvIS9YQ\nKHyQwlUviIU/fT7hnx513w17a9XF4LL4gXdEImYVwlABW+55frUi4YZ2TSPbPapv\no+GzjGLFsSkk3OzBCPCc2OxxrtM8VZk3wNb5velmfIGr8bfFkD4b/TMQZ86BzHj4\nozS8vDc1fdPSuXbduAg2toe33QyjBRt7cHvG1WKetRrcKKRm6833ciREk9qUEMM=\n=BAyS\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/0cb71888aa5a86f82db34d2c1d45dc257b897354",
            "node_id": "C_kwDOKXYnIdoAKDBjYjcxODg4YWE1YTg2ZjgyZGIzNGQyYzFkNDVkYzI1N2I4OTczNTQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d608304a27f5e3e5023e974e5bb5bd49dd7d1242",
                    "sha": "d608304a27f5e3e5023e974e5bb5bd49dd7d1242",
                    "url": "https://api.github.com/repos/cython/cython/commits/d608304a27f5e3e5023e974e5bb5bd49dd7d1242"
                }
            ],
            "sha": "0cb71888aa5a86f82db34d2c1d45dc257b897354",
            "url": "https://api.github.com/repos/cython/cython/commits/0cb71888aa5a86f82db34d2c1d45dc257b897354"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9cbd59711e9ca3efd0c3c5e491de77b0161b5f70/comments",
            "commit": {
                "author": {
                    "date": "2023-11-04T20:26:28Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-11-04T20:26:28Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix decorator writing",
                "tree": {
                    "sha": "b1e7ff0a493222e142fc5f237972ea900fa1cdbb",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b1e7ff0a493222e142fc5f237972ea900fa1cdbb"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9cbd59711e9ca3efd0c3c5e491de77b0161b5f70",
                "verification": {
                    "payload": "tree b1e7ff0a493222e142fc5f237972ea900fa1cdbb\nparent 0cb71888aa5a86f82db34d2c1d45dc257b897354\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1699129588 -0500\ncommitter GitHub <noreply@github.com> 1699129588 -0500\n\nFix decorator writing",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlRqj0CRBK7hj4Ov3rIwAAWEkIAESGtLKnoPyiT0KZloifweCI\nXRw/1CmolUoqpZ9XIGr9jBnrZtVUkF6F4SZ1q1KIwkaERCtH/2yP4Pj/lKM6+g3P\ndmDhvC2QNK/G7rxv5266CHWCT/uCqvio+CBkSlMzFu8df3nbXDGlFu4Ylgc4KWqK\n2SBJClckZeI2hcgIK8bKiPtUx7yAcR8Csm533dehCCw8rvMLwKAZk5qgHqx3Dmky\n3LkISyP4HRdiL1kpmaLG7cbNfw3MRsBTwNKc9XoDVi/UNUylDtZC+LeJ6L3BsPwa\nsVe0H23Q8PW1fPe1/BmEYs8ap4YmZGdQX+/tXQ8WxQCikU3Kfwu6gqK3HflER2U=\n=2We7\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/9cbd59711e9ca3efd0c3c5e491de77b0161b5f70",
            "node_id": "C_kwDOKXYnIdoAKDljYmQ1OTcxMWU5Y2EzZWZkMGMzYzVlNDkxZGU3N2IwMTYxYjVmNzA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0cb71888aa5a86f82db34d2c1d45dc257b897354",
                    "sha": "0cb71888aa5a86f82db34d2c1d45dc257b897354",
                    "url": "https://api.github.com/repos/cython/cython/commits/0cb71888aa5a86f82db34d2c1d45dc257b897354"
                }
            ],
            "sha": "9cbd59711e9ca3efd0c3c5e491de77b0161b5f70",
            "url": "https://api.github.com/repos/cython/cython/commits/9cbd59711e9ca3efd0c3c5e491de77b0161b5f70"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9e345971d4c6b4fe2d23d05b047100bb5a26ba65/comments",
            "commit": {
                "author": {
                    "date": "2023-11-27T05:14:58Z",
                    "email": "114684698+Vizonex@users.noreply.github.com",
                    "name": "Vizonex"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-11-27T05:14:58Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'cython:master' into master",
                "tree": {
                    "sha": "5e1237ffe5283fa5086e436aa99fe3416e7ca570",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5e1237ffe5283fa5086e436aa99fe3416e7ca570"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
                "verification": {
                    "payload": "tree 5e1237ffe5283fa5086e436aa99fe3416e7ca570\nparent 9cbd59711e9ca3efd0c3c5e491de77b0161b5f70\nparent 06f155984d80652f2b26997b09aa42a50da7c3a2\nauthor Vizonex <114684698+Vizonex@users.noreply.github.com> 1701062098 -0600\ncommitter GitHub <noreply@github.com> 1701062098 -0600\n\nMerge branch 'cython:master' into master\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlZCXSCRBK7hj4Ov3rIwAAO0wIAB831ZDAR6aQ+/UToehdhAoa\nddvZPpPAf/TfL52W/JF7QJkYGKFwEXUw/CdGjnFVTJPV4WZj9jY9vC4inCimXSx3\nZUDwl8yAxkTz6l9u2BfSwQm/ONgetrMcNOaHKW5EaeJXPbhn+QEHhTWV7fXwuE+5\nwuSWBC/lNbovndG3WxjCHGrhuUE8CrwJ9EYSevAlGrXwQJvmIXrZ9xbULgPSDSgc\n61tfqLcTzZFe96Z6gn6y/yKJ41zH9hN6FfV0wLaVJdA/GFdmmN1rzWgvVPnxJ6B5\nr/d0ZRrKnTSsEjrFXSWZSFGfRZai3rPCUZBvC0t56ERCO+lIP4UrwvqdEp3I9cY=\n=1Oow\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "node_id": "C_kwDOKXYnIdoAKDllMzQ1OTcxZDRjNmI0ZmUyZDIzZDA1YjA0NzEwMGJiNWEyNmJhNjU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/9cbd59711e9ca3efd0c3c5e491de77b0161b5f70",
                    "sha": "9cbd59711e9ca3efd0c3c5e491de77b0161b5f70",
                    "url": "https://api.github.com/repos/cython/cython/commits/9cbd59711e9ca3efd0c3c5e491de77b0161b5f70"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/06f155984d80652f2b26997b09aa42a50da7c3a2",
                    "sha": "06f155984d80652f2b26997b09aa42a50da7c3a2",
                    "url": "https://api.github.com/repos/cython/cython/commits/06f155984d80652f2b26997b09aa42a50da7c3a2"
                }
            ],
            "sha": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
            "url": "https://api.github.com/repos/cython/cython/commits/9e345971d4c6b4fe2d23d05b047100bb5a26ba65"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/5744/commits",
    "created_at": "2023-10-04T20:33:54Z",
    "diff_url": "https://github.com/cython/cython/pull/5744.diff",
    "draft": false,
    "head": {
        "label": "Vizonex:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/Vizonex/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/Vizonex/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/Vizonex/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/Vizonex/cython/branches{/branch}",
            "clone_url": "https://github.com/Vizonex/cython.git",
            "collaborators_url": "https://api.github.com/repos/Vizonex/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/Vizonex/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/Vizonex/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/Vizonex/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/Vizonex/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/Vizonex/cython/contributors",
            "created_at": "2023-09-23T17:29:32Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/Vizonex/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/Vizonex/cython/downloads",
            "events_url": "https://api.github.com/repos/Vizonex/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/Vizonex/cython/forks",
            "full_name": "Vizonex/cython",
            "git_commits_url": "https://api.github.com/repos/Vizonex/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/Vizonex/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/Vizonex/cython/git/tags{/sha}",
            "git_url": "git://github.com/Vizonex/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/Vizonex/cython/hooks",
            "html_url": "https://github.com/Vizonex/cython",
            "id": 695609121,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/Vizonex/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/Vizonex/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/Vizonex/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/Vizonex/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/Vizonex/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/Vizonex/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/Vizonex/cython/merges",
            "milestones_url": "https://api.github.com/repos/Vizonex/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "R_kgDOKXYnIQ",
            "notifications_url": "https://api.github.com/repos/Vizonex/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
                "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Vizonex/followers",
                "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Vizonex",
                "id": 114684698,
                "login": "Vizonex",
                "node_id": "U_kgDOBtXzGg",
                "organizations_url": "https://api.github.com/users/Vizonex/orgs",
                "received_events_url": "https://api.github.com/users/Vizonex/received_events",
                "repos_url": "https://api.github.com/users/Vizonex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Vizonex"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/Vizonex/cython/pulls{/number}",
            "pushed_at": "2023-11-27T05:14:58Z",
            "releases_url": "https://api.github.com/repos/Vizonex/cython/releases{/id}",
            "size": 67109,
            "ssh_url": "git@github.com:Vizonex/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/Vizonex/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/Vizonex/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/Vizonex/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/Vizonex/cython/subscription",
            "svn_url": "https://github.com/Vizonex/cython",
            "tags_url": "https://api.github.com/repos/Vizonex/cython/tags",
            "teams_url": "https://api.github.com/repos/Vizonex/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/Vizonex/cython/git/trees{/sha}",
            "updated_at": "2023-09-28T19:57:58Z",
            "url": "https://api.github.com/repos/Vizonex/cython",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
            "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
            "followers_url": "https://api.github.com/users/Vizonex/followers",
            "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
            "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/Vizonex",
            "id": 114684698,
            "login": "Vizonex",
            "node_id": "U_kgDOBtXzGg",
            "organizations_url": "https://api.github.com/users/Vizonex/orgs",
            "received_events_url": "https://api.github.com/users/Vizonex/received_events",
            "repos_url": "https://api.github.com/users/Vizonex/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/Vizonex"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/5744",
    "id": 1542485095,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/5744",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "fff6cdec3101cb660c78e1224cfa62ca30035cb7",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOABDGAc5b8HRn",
    "number": 5744,
    "patch_url": "https://github.com/cython/cython/pull/5744.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/5744/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/9e345971d4c6b4fe2d23d05b047100bb5a26ba65",
    "title": "Add PyiWriter to Cython and new Cython directive 'write_stub_file'",
    "updated_at": "2024-03-25T21:58:12Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/5744",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/114684698?v=4",
        "events_url": "https://api.github.com/users/Vizonex/events{/privacy}",
        "followers_url": "https://api.github.com/users/Vizonex/followers",
        "following_url": "https://api.github.com/users/Vizonex/following{/other_user}",
        "gists_url": "https://api.github.com/users/Vizonex/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Vizonex",
        "id": 114684698,
        "login": "Vizonex",
        "node_id": "U_kgDOBtXzGg",
        "organizations_url": "https://api.github.com/users/Vizonex/orgs",
        "received_events_url": "https://api.github.com/users/Vizonex/received_events",
        "repos_url": "https://api.github.com/users/Vizonex/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Vizonex/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Vizonex/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Vizonex"
    }
}