{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3779/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3779/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3779"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3779"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3779/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3779"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/d16d3eda5575bf2690956f28e27ba39d0fa1e599"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "COLLABORATOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1057,
            "forks_count": 1057,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 861,
            "open_issues_count": 861,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2020-08-13T06:53:35Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 60047,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 5382,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2020-08-13T07:43:53Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 5382,
            "watchers_count": 5382
        },
        "sha": "fb02b15da178e58ff2ce3bccd29eaeecc287dda9",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Specifically this allows public packed structs but may also allow\r\nother public declarations that require small amounts of utility\r\ncode",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3779#discussion_r469479212"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3779"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/469479212"
                }
            },
            "author_association": "MEMBER",
            "body": "It took me a while to recognise this as a verbose spelling of `\"utility_code\" in part`. I'd rather use\r\n```suggestion\r\n            if part.startswith(\"utility_code\"):\r\n```\r\nHowever, DRY aside, I wonder if we should move the implementation parts further down in the header file, as we do in the C file. In fact, I wonder if we should allow an implementation in a header file at allâ€¦ There is a `proto_before_types` for a reason, and the same applies to the non-`before_types` section. Could we only allow the two `utility_code_proto` sections for now, and move them before and after the type declarations?",
            "commit_id": "d16d3eda5575bf2690956f28e27ba39d0fa1e599",
            "created_at": "2020-08-12T19:07:00Z",
            "diff_hunk": "@@ -1215,6 +1215,13 @@ def initialize_main_c_code(self):\n         code.putln(\"\")\n         code.putln(\"/* --- Runtime support code --- */\")\n \n+    def initialize_main_h_code(self):\n+        # h code can include utility code in a few cases so it needs to be insertable\n+        rootwriter = self.rootwriter\n+        for part in self.code_layout:\n+            if part.find(\"utility_code\") != -1:",
            "html_url": "https://github.com/cython/cython/pull/3779#discussion_r469479212",
            "id": 469479212,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3OTIxMg==",
            "original_commit_id": "153f7cc66ce431c6b526603705e47c6907999a8b",
            "original_line": 1222,
            "original_position": 8,
            "original_start_line": null,
            "path": "Cython/Compiler/Code.py",
            "position": null,
            "pull_request_review_id": 466195678,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3779",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-08-13T06:53:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/469479212",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3779#discussion_r469740516"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3779"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/469740516"
                }
            },
            "author_association": "MEMBER",
            "body": "If we know all part names, why not create them explicitly? Why do we need the loop over `code_layout` here?\r\n\r\nSuggestion: Create `c_code_layout` and `h_code_layout` in `Code.py`, next to each other, so that they are easy to keep in sync. Then having the two initialisation functions seems reasonable. My line of reasoning is that the header file generation is not a \"special case\" or a strict subset of the C file generation. They are at the same level. The implementation should reflect that.",
            "commit_id": "d16d3eda5575bf2690956f28e27ba39d0fa1e599",
            "created_at": "2020-08-13T07:06:35Z",
            "diff_hunk": "@@ -1216,10 +1216,12 @@ def initialize_main_c_code(self):\n         code.putln(\"/* --- Runtime support code --- */\")\n \n     def initialize_main_h_code(self):\n-        # h code can include utility code in a few cases so it needs to be insertable\n+        # h files can include only include a much smaller list of sections\n+        # that are manually created here\n         rootwriter = self.rootwriter\n         for part in self.code_layout:\n-            if part.find(\"utility_code\") != -1:\n+            if part in ('h_code', 'utility_code_proto_before_types', 'type_declarations',\n+                        'utility_code_proto', 'end'):\n                 self.parts[part] = rootwriter.insertion_point()",
            "html_url": "https://github.com/cython/cython/pull/3779#discussion_r469740516",
            "id": 469740516,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MDUxNg==",
            "original_commit_id": "d16d3eda5575bf2690956f28e27ba39d0fa1e599",
            "original_line": 1225,
            "original_position": 12,
            "original_start_line": 1223,
            "path": "Cython/Compiler/Code.py",
            "position": null,
            "pull_request_review_id": 466495968,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3779",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-08-13T07:34:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/469740516",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3779#discussion_r469742017"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3779"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/469742017"
                }
            },
            "author_association": "MEMBER",
            "body": "While you're at it, just use a `with` statement here.",
            "commit_id": "d16d3eda5575bf2690956f28e27ba39d0fa1e599",
            "created_at": "2020-08-13T07:09:37Z",
            "diff_hunk": "@@ -187,91 +187,94 @@ def h_entries(entries, api=0, pxd=0):\n         h_extension_types = h_entries(env.c_class_entries)\n         if h_types or h_vars or h_funcs or h_extension_types:\n             result.h_file = replace_suffix_encoded(result.c_file, \".h\")\n-            h_code = Code.CCodeWriter()\n             c_code_config = generate_c_code_config(env, options)\n-            globalstate = Code.GlobalState(h_code, self, c_code_config)\n+            globalstate = Code.GlobalState(Code.CCodeWriter(), self, c_code_config)\n+            globalstate.initialize_main_h_code()  # in-case utility code is used in the header\n+            h_code_start = globalstate.parts['h_code']\n+            h_code_main = globalstate.parts['type_declarations']\n+            h_code_end = globalstate.parts['end']\n             if options.generate_pxi:\n                 result.i_file = replace_suffix_encoded(result.c_file, \".pxi\")\n                 i_code = Code.PyrexCodeWriter(result.i_file)\n             else:\n                 i_code = None\n \n-            h_code.put_generated_by()\n+            h_code_start.put_generated_by()\n             h_guard = self.api_name(Naming.h_guard_prefix, env)\n-            h_code.put_h_guard(h_guard)\n-            h_code.putln(\"\")\n-            h_code.putln('#include \"Python.h\"')\n-            globalstate.initialize_main_h_code()  # in-case utility code is used in the header\n-            self.generate_type_header_code(h_types, h_code)\n+            h_code_start.put_h_guard(h_guard)\n+            h_code_start.putln(\"\")\n+            h_code_start.putln('#include \"Python.h\"')\n+            self.generate_type_header_code(h_types, h_code_start)\n             if options.capi_reexport_cincludes:\n-                self.generate_includes(env, [], h_code)\n-            h_code.putln(\"\")\n+                self.generate_includes(env, [], h_code_start)\n+            h_code_start.putln(\"\")\n             api_guard = self.api_name(Naming.api_guard_prefix, env)\n-            h_code.putln(\"#ifndef %s\" % api_guard)\n-            h_code.putln(\"\")\n-            self.generate_extern_c_macro_definition(h_code)\n-            h_code.putln(\"\")\n-            self.generate_dl_import_macro(h_code)\n+            h_code_start.putln(\"#ifndef %s\" % api_guard)\n+            h_code_start.putln(\"\")\n+            self.generate_extern_c_macro_definition(h_code_start)\n+            h_code_start.putln(\"\")\n+            self.generate_dl_import_macro(h_code_start)\n             if h_extension_types:\n-                h_code.putln(\"\")\n+                h_code_main.putln(\"\")\n                 for entry in h_extension_types:\n-                    self.generate_cclass_header_code(entry.type, h_code)\n+                    self.generate_cclass_header_code(entry.type, h_code_main)\n                     if i_code:\n                         self.generate_cclass_include_code(entry.type, i_code)\n             if h_funcs:\n-                h_code.putln(\"\")\n+                h_code_main.putln(\"\")\n                 for entry in h_funcs:\n-                    self.generate_public_declaration(entry, h_code, i_code)\n+                    self.generate_public_declaration(entry, h_code_main, i_code)\n             if h_vars:\n-                h_code.putln(\"\")\n+                h_code_main.putln(\"\")\n                 for entry in h_vars:\n-                    self.generate_public_declaration(entry, h_code, i_code)\n-            h_code.putln(\"\")\n-            h_code.putln(\"#endif /* !%s */\" % api_guard)\n-            h_code.putln(\"\")\n-            h_code.putln(\"/* WARNING: the interface of the module init function changed in CPython 3.5. */\")\n-            h_code.putln(\"/* It now returns a PyModuleDef instance instead of a PyModule instance. */\")\n-            h_code.putln(\"\")\n-            h_code.putln(\"#if PY_MAJOR_VERSION < 3\")\n+                    self.generate_public_declaration(entry, h_code_main, i_code)\n+            h_code_main.putln(\"\")\n+            h_code_main.putln(\"#endif /* !%s */\" % api_guard)\n+            h_code_main.putln(\"\")\n+            h_code_main.putln(\"/* WARNING: the interface of the module init function changed in CPython 3.5. */\")\n+            h_code_main.putln(\"/* It now returns a PyModuleDef instance instead of a PyModule instance. */\")\n+            h_code_main.putln(\"\")\n+            h_code_main.putln(\"#if PY_MAJOR_VERSION < 3\")\n             if env.module_name.isascii():\n                 py2_mod_name = env.module_name\n             else:\n                 py2_mod_name = env.module_name.encode(\"ascii\", errors=\"ignore\").decode(\"utf-8\")\n-                h_code.putln('#error \"Unicode module names are not supported in Python 2\";')\n-            h_code.putln(\"PyMODINIT_FUNC init%s(void);\" % py2_mod_name)\n-            h_code.putln(\"#else\")\n+                h_code_main.putln('#error \"Unicode module names are not supported in Python 2\";')\n+            h_code_main.putln(\"PyMODINIT_FUNC init%s(void);\" % py2_mod_name)\n+            h_code_main.putln(\"#else\")\n             py3_mod_func_name = self.mod_init_func_cname('PyInit', env)\n             warning_string = EncodedString('Use PyImport_AppendInittab(\"%s\", %s) instead of calling %s directly.' % (\n                 py2_mod_name, py3_mod_func_name, py3_mod_func_name))\n-            h_code.putln('/* WARNING: %s from Python 3.5 */' % warning_string.rstrip('.'))\n-            h_code.putln(\"PyMODINIT_FUNC %s(void);\" % py3_mod_func_name)\n-            h_code.putln(\"\")\n-            h_code.putln(\"#if PY_VERSION_HEX >= 0x03050000 \"\n+            h_code_main.putln('/* WARNING: %s from Python 3.5 */' % warning_string.rstrip('.'))\n+            h_code_main.putln(\"PyMODINIT_FUNC %s(void);\" % py3_mod_func_name)\n+            h_code_main.putln(\"\")\n+            h_code_main.putln(\"#if PY_VERSION_HEX >= 0x03050000 \"\n                 \"&& (defined(__GNUC__) || defined(__clang__) || defined(_MSC_VER) \"\n                 \"|| (defined(__cplusplus) && __cplusplus >= 201402L))\")\n-            h_code.putln(\"#if defined(__cplusplus) && __cplusplus >= 201402L\")\n-            h_code.putln(\"[[deprecated(%s)]] inline\" % warning_string.as_c_string_literal())\n-            h_code.putln(\"#elif defined(__GNUC__) || defined(__clang__)\")\n-            h_code.putln('__attribute__ ((__deprecated__(%s), __unused__)) __inline__' % (\n+            h_code_main.putln(\"#if defined(__cplusplus) && __cplusplus >= 201402L\")\n+            h_code_main.putln(\"[[deprecated(%s)]] inline\" % warning_string.as_c_string_literal())\n+            h_code_main.putln(\"#elif defined(__GNUC__) || defined(__clang__)\")\n+            h_code_main.putln('__attribute__ ((__deprecated__(%s), __unused__)) __inline__' % (\n                 warning_string.as_c_string_literal()))\n-            h_code.putln(\"#elif defined(_MSC_VER)\")\n-            h_code.putln('__declspec(deprecated(%s)) __inline' % (\n+            h_code_main.putln(\"#elif defined(_MSC_VER)\")\n+            h_code_main.putln('__declspec(deprecated(%s)) __inline' % (\n                 warning_string.as_c_string_literal()))\n-            h_code.putln('#endif')\n-            h_code.putln(\"static PyObject* __PYX_WARN_IF_INIT_CALLED(PyObject* res) {\")\n-            h_code.putln(\"return res;\")\n-            h_code.putln(\"}\")\n+            h_code_main.putln('#endif')\n+            h_code_main.putln(\"static PyObject* __PYX_WARN_IF_INIT_CALLED(PyObject* res) {\")\n+            h_code_main.putln(\"return res;\")\n+            h_code_main.putln(\"}\")\n             # Function call is converted to warning macro; uncalled (pointer) is not\n-            h_code.putln('#define %s() __PYX_WARN_IF_INIT_CALLED(%s())' % (\n+            h_code_main.putln('#define %s() __PYX_WARN_IF_INIT_CALLED(%s())' % (\n                 py3_mod_func_name, py3_mod_func_name))\n-            h_code.putln('#endif')\n-            h_code.putln('#endif')\n-            h_code.putln(\"\")\n-            h_code.putln(\"#endif /* !%s */\" % h_guard)\n+            h_code_main.putln('#endif')\n+            h_code_main.putln('#endif')\n+\n+            h_code_end.putln(\"\")\n+            h_code_end.putln(\"#endif /* !%s */\" % h_guard)\n \n             f = open_new_file(result.h_file)",
            "html_url": "https://github.com/cython/cython/pull/3779#discussion_r469742017",
            "id": 469742017,
            "line": 275,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MjAxNw==",
            "original_commit_id": "d16d3eda5575bf2690956f28e27ba39d0fa1e599",
            "original_line": 275,
            "original_position": 139,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 138,
            "pull_request_review_id": 466495968,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3779",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-08-13T07:34:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/469742017",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3779#discussion_r469744755"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3779"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/469744755"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd keep this around, maybe name it `h_code_writer`. Referring to `globalstate.rootwriter` below seems to touch into internals of `GlobalState`. (Sorry if this seems inconsistent with accessing `.parts`, but we are creating the code writer ourselves here and thus own it, so why refer back to it through an object internal copy of the reference later?)",
            "commit_id": "d16d3eda5575bf2690956f28e27ba39d0fa1e599",
            "created_at": "2020-08-13T07:15:32Z",
            "diff_hunk": "@@ -187,91 +187,94 @@ def h_entries(entries, api=0, pxd=0):\n         h_extension_types = h_entries(env.c_class_entries)\n         if h_types or h_vars or h_funcs or h_extension_types:\n             result.h_file = replace_suffix_encoded(result.c_file, \".h\")\n-            h_code = Code.CCodeWriter()",
            "html_url": "https://github.com/cython/cython/pull/3779#discussion_r469744755",
            "id": 469744755,
            "line": 190,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0NDc1NQ==",
            "original_commit_id": "d16d3eda5575bf2690956f28e27ba39d0fa1e599",
            "original_line": 190,
            "original_position": 4,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 4,
            "pull_request_review_id": 466495968,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3779",
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-08-13T07:34:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/469744755",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3779/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/153f7cc66ce431c6b526603705e47c6907999a8b/comments",
            "commit": {
                "author": {
                    "date": "2020-08-12T18:44:09Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-08-12T18:44:09Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Support utility code in headers\n\nSpecifically this allows public packed structs but may also allow\nother public declarations that require small amounts of utility\ncode",
                "tree": {
                    "sha": "02171ed03a9d2ed73b98a3a10db6c68421710a5b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/02171ed03a9d2ed73b98a3a10db6c68421710a5b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/153f7cc66ce431c6b526603705e47c6907999a8b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/153f7cc66ce431c6b526603705e47c6907999a8b",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6MTUzZjdjYzY2Y2U0MzFjNmI1MjY2MDM3MDVlNDdjNjkwNzk5OWE4Yg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0a2f0a690a7eda40ee43e4926184ce776897d911",
                    "sha": "0a2f0a690a7eda40ee43e4926184ce776897d911",
                    "url": "https://api.github.com/repos/cython/cython/commits/0a2f0a690a7eda40ee43e4926184ce776897d911"
                }
            ],
            "sha": "153f7cc66ce431c6b526603705e47c6907999a8b",
            "url": "https://api.github.com/repos/cython/cython/commits/153f7cc66ce431c6b526603705e47c6907999a8b"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d16d3eda5575bf2690956f28e27ba39d0fa1e599/comments",
            "commit": {
                "author": {
                    "date": "2020-08-13T06:52:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-08-13T06:52:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Attempt at structuring header files a bit more",
                "tree": {
                    "sha": "d967bba30028d6f1987426bcbbad9ee83955604c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d967bba30028d6f1987426bcbbad9ee83955604c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d16d3eda5575bf2690956f28e27ba39d0fa1e599",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/d16d3eda5575bf2690956f28e27ba39d0fa1e599",
            "node_id": "MDY6Q29tbWl0MzUzMjE5Njc6ZDE2ZDNlZGE1NTc1YmYyNjkwOTU2ZjI4ZTI3YmEzOWQwZmExZTU5OQ==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/153f7cc66ce431c6b526603705e47c6907999a8b",
                    "sha": "153f7cc66ce431c6b526603705e47c6907999a8b",
                    "url": "https://api.github.com/repos/cython/cython/commits/153f7cc66ce431c6b526603705e47c6907999a8b"
                }
            ],
            "sha": "d16d3eda5575bf2690956f28e27ba39d0fa1e599",
            "url": "https://api.github.com/repos/cython/cython/commits/d16d3eda5575bf2690956f28e27ba39d0fa1e599"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3779/commits",
    "created_at": "2020-08-12T18:45:36Z",
    "diff_url": "https://github.com/cython/cython/pull/3779.diff",
    "draft": false,
    "head": {
        "label": "da-woods:utilcode_headers",
        "ref": "utilcode_headers",
        "repo": {
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2020-08-13T06:53:31Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 61136,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2020-08-05T07:40:32Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "d16d3eda5575bf2690956f28e27ba39d0fa1e599",
        "user": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3779",
    "id": 466943681,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3779",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "0f5d5fa26cbb62af6234fa6241ab42d1c4177175",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDY2OTQzNjgx",
    "number": 3779,
    "patch_url": "https://github.com/cython/cython/pull/3779.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3779/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/d16d3eda5575bf2690956f28e27ba39d0fa1e599",
    "title": "Support utility code in headers",
    "updated_at": "2020-08-13T07:34:22Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3779",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}