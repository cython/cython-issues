{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3626/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3626/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3626"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3626"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3626/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3626"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/5ef72db4b15a24e3f93700fa1b61ab66020e4518"
        }
    },
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1018,
            "forks_count": 1018,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 823,
            "open_issues_count": 823,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2020-05-22T20:59:28Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 58653,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 5178,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2020-05-23T14:23:23Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 5178,
            "watchers_count": 5178
        },
        "sha": "917dbeef5422b3ef49874d60bbb70c294c5c45e2",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "This adds a `@cython.total_ordering` directive which replicates the `functools` version for extension classes, as described in #2090. While doing this, I've discovered a few edge cases:\r\n\r\n* Should it use methods defined in superclasses? If it's pure-C class, there's no way to know which methods are defined and so shouldn't be inferred without some sort of runtime check. I still need to add tests for these situations.\r\n* What should happen if `__eq__` isn't defined? This is likely to be an error, if the user has defined some ordering method it's unlikely to correspond to `object.__eq__`.\r\n* What happens if `__ne__` is defined but not `__eq__`? I've implemented this fallback, though it's not something the interpreter does.\r\n* I'm not sure where this should be documented. [Source Files and Compilation](https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiler-directives) only seems to include module-global directives. All the other class directives are scattered throughout the [Extension Types](https://cython.readthedocs.io/en/latest/src/userguide/extension_types.html) page.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428515661"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428515661"
                }
            },
            "author_association": "MEMBER",
            "body": "This is dead code now that can be removed.\r\n```suggestion\r\n```",
            "commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "created_at": "2020-05-21T08:25:55Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428515661",
            "id": 428515661,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUxNTY2MQ==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2035,
            "original_position": 70,
            "original_start_line": 2034,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428515661",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428521068"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428521068"
                }
            },
            "author_association": "MEMBER",
            "body": "Just splitting these because it's an unusual pattern in Cython generated code and the decref might be easy to miss.\r\n```suggestion\r\n                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret);\")\r\n                    code.putln(\"Py_DECREF(ret);\")\r\n```",
            "commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "created_at": "2020-05-21T08:37:25Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        if invert_comp:\n+                            code.putln(\"if (!order_res) {\")\n+                        else:\n+                            code.putln(\"if (order_res) {\")\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428521068",
            "id": 428521068,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyMTA2OA==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2106,
            "original_position": 151,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428521068",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428525314"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428525314"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret);\")\r\n                code.putln(\"Py_DECREF(ret);\")\r\n```",
            "commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "created_at": "2020-05-21T08:45:47Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428525314",
            "id": 428525314,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyNTMxNA==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2075,
            "original_position": 120,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428525314",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428526364"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428526364"
                }
            },
            "author_association": "MEMBER",
            "body": "… to a bool, maybe?",
            "commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "created_at": "2020-05-21T08:48:00Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        if invert_comp:\n+                            code.putln(\"if (!order_res) {\")\n+                        else:\n+                            code.putln(\"if (order_res) {\")\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                    code.putln(\"if (unlikely(eq_res < 0)) return NULL;\")\n+                    if invert_equals:\n+                        code.putln(\"ret = eq_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = eq_res ? Py_True : Py_False;\")\n+                    code.putln(\"}\") # equals success\n+                    code.putln(\"}\") # Needs to try equals\n+                else:\n+                    # Convert direct to a string.",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428526364",
            "id": 428526364,
            "line": 2114,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyNjM2NA==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2115,
            "original_position": 160,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 160,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428526364",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428526915"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428526915"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, I see where you got this from. :) Let's split it here, too.\r\n```suggestion\r\n            code.putln(\"int b = __Pyx_PyObject_IsTrue(ret);\")\r\n            code.putln(\"Py_DECREF(ret);\")\r\n```",
            "commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "created_at": "2020-05-21T08:49:18Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        if invert_comp:\n+                            code.putln(\"if (!order_res) {\")\n+                        else:\n+                            code.putln(\"if (order_res) {\")\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                    code.putln(\"if (unlikely(eq_res < 0)) return NULL;\")\n+                    if invert_equals:\n+                        code.putln(\"ret = eq_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = eq_res ? Py_True : Py_False;\")\n+                    code.putln(\"}\") # equals success\n+                    code.putln(\"}\") # Needs to try equals\n+                else:\n+                    # Convert direct to a string.\n+                    if invert_comp:\n+                        code.putln(\"ret = order_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = order_res ? Py_True : Py_False;\")\n+                code.putln(\"Py_INCREF(ret);\")\n+                code.putln(\"}\")  # comp_op\n+                code.putln(\"return ret;\")\n+            else:\n+                code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n+            code.putln(\"}\")  # Case\n \n-        if eq_entry and not has_ne and not extern_parent:\n+        if '__eq__' in comp_entry and '__ne__' not in comp_entry and not extern_parent:\n             code.putln(\"case Py_NE: {\")\n             code.putln(\"PyObject *ret;\")\n             # Python itself does not do this optimisation, it seems...\n             #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"ret = %s(o1, o2);\" % eq_entry.func_cname)\n+            code.putln(\"ret = %s(o1, o2);\" % comp_entry['__eq__'].func_cname)\n             code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n             code.putln(\"int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428526915",
            "id": 428526915,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyNjkxNQ==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2134,
            "original_position": 181,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428526915",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428531031"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428531031"
                }
            },
            "author_association": "MEMBER",
            "body": "This simple and obvious case seems worth handling first for readability reasons, i.e. swap the `if entry` condition.",
            "commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "created_at": "2020-05-21T08:57:43Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        if invert_comp:\n+                            code.putln(\"if (!order_res) {\")\n+                        else:\n+                            code.putln(\"if (order_res) {\")\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                    code.putln(\"if (unlikely(eq_res < 0)) return NULL;\")\n+                    if invert_equals:\n+                        code.putln(\"ret = eq_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = eq_res ? Py_True : Py_False;\")\n+                    code.putln(\"}\") # equals success\n+                    code.putln(\"}\") # Needs to try equals\n+                else:\n+                    # Convert direct to a string.\n+                    if invert_comp:\n+                        code.putln(\"ret = order_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = order_res ? Py_True : Py_False;\")\n+                code.putln(\"Py_INCREF(ret);\")\n+                code.putln(\"}\")  # comp_op\n+                code.putln(\"return ret;\")\n+            else:\n+                code.putln(\"return %s(o1, o2);\" % entry.func_cname)",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428531031",
            "id": 428531031,
            "line": 2123,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMTAzMQ==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2124,
            "original_position": 169,
            "original_start_line": 2123,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 169,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": 2122,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428531031",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428532922"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428532922"
                }
            },
            "author_association": "MEMBER",
            "body": "Similarly below. Just a suggestion, not sure if it's really more readable in the end, but it feels like less code might keep this implementation quicker to grasp.\r\n```suggestion\r\n                        code.putln(\"if (%s order_res) {\" % ('' if invert_comp else '!'))\r\n```",
            "commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "created_at": "2020-05-21T09:01:50Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428532922",
            "id": 428532922,
            "line": 2083,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMjkyMg==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2085,
            "original_position": 130,
            "original_start_line": 2082,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 129,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": 2080,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428532922",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428533349"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428533349"
                }
            },
            "author_association": "MEMBER",
            "body": "Same suggestion as above, just reversed.\r\n```suggestion\r\n                        code.putln(\"if (%s order_res) {\" % ('!' if if invert_comp else '')\r\n```",
            "commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "created_at": "2020-05-21T09:02:50Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        if invert_comp:\n+                            code.putln(\"if (!order_res) {\")\n+                        else:\n+                            code.putln(\"if (order_res) {\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428533349",
            "id": 428533349,
            "line": 2090,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMzM0OQ==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2092,
            "original_position": 137,
            "original_start_line": 2089,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 136,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": 2087,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428533349",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428533954"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428533954"
                }
            },
            "author_association": "MEMBER",
            "body": "\"not ever\" seems less clear than \"never\", I think that's what you meant, right?\r\n```suggestion\r\n                # We may need to check equality too. For some combos it's never required.\r\n```",
            "commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "created_at": "2020-05-21T09:04:10Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428533954",
            "id": 428533954,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMzk1NA==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2078,
            "original_position": 123,
            "original_start_line": 2077,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428533954",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r429012698"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/429012698"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I originally had it produce `!!` if both inversions were enabled, maybe that would be better?",
            "commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "created_at": "2020-05-22T02:35:46Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r429012698",
            "id": 429012698,
            "in_reply_to_id": 428532922,
            "line": 2083,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMjY5OA==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2085,
            "original_position": 130,
            "original_start_line": 2082,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 129,
            "pull_request_review_id": 416611625,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": 2080,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/429012698",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r429052865"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/429052865"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah, sounds good.",
            "commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "created_at": "2020-05-22T05:43:03Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r429052865",
            "id": 429052865,
            "in_reply_to_id": 428532922,
            "line": 2083,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1Mjg2NQ==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2085,
            "original_position": 130,
            "original_start_line": 2082,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 129,
            "pull_request_review_id": 416660614,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": 2080,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T05:43:04Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/429052865",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3626/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/76b2dc230ce42351171e52938b5a3cd88ddb1a7b/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T00:12:04Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:29Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Add test for existing comparison behavior",
                "tree": {
                    "sha": "70a1a1505881e57451ae73021be635afd3f952bd",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/70a1a1505881e57451ae73021be635afd3f952bd"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/76b2dc230ce42351171e52938b5a3cd88ddb1a7b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/76b2dc230ce42351171e52938b5a3cd88ddb1a7b",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjc2YjJkYzIzMGNlNDIzNTExNzFlNTI5MzhiNWEzY2Q4OGRkYjFhN2I=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cb4c5229385ce6eb3ca6f7eedb9209995a3985a9",
                    "sha": "cb4c5229385ce6eb3ca6f7eedb9209995a3985a9",
                    "url": "https://api.github.com/repos/cython/cython/commits/cb4c5229385ce6eb3ca6f7eedb9209995a3985a9"
                }
            ],
            "sha": "76b2dc230ce42351171e52938b5a3cd88ddb1a7b",
            "url": "https://api.github.com/repos/cython/cython/commits/76b2dc230ce42351171e52938b5a3cd88ddb1a7b"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7769fce643648b7eb13389a1d59b4b9fd67c4bf9/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T00:12:38Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:29Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Add total_ordering directive definition",
                "tree": {
                    "sha": "d30fe7215c14700b5216258891cffa8c30c9ebf1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d30fe7215c14700b5216258891cffa8c30c9ebf1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7769fce643648b7eb13389a1d59b4b9fd67c4bf9",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/7769fce643648b7eb13389a1d59b4b9fd67c4bf9",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjc3NjlmY2U2NDM2NDhiN2ViMTMzODlhMWQ1OWI0YjlmZDY3YzRiZjk=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/76b2dc230ce42351171e52938b5a3cd88ddb1a7b",
                    "sha": "76b2dc230ce42351171e52938b5a3cd88ddb1a7b",
                    "url": "https://api.github.com/repos/cython/cython/commits/76b2dc230ce42351171e52938b5a3cd88ddb1a7b"
                }
            ],
            "sha": "7769fce643648b7eb13389a1d59b4b9fd67c4bf9",
            "url": "https://api.github.com/repos/cython/cython/commits/7769fce643648b7eb13389a1d59b4b9fd67c4bf9"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T01:11:35Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:29Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Add tests for all the total_ordering behavior",
                "tree": {
                    "sha": "29023b38f4861e937e614f3659489932354c4e32",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/29023b38f4861e937e614f3659489932354c4e32"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOmFjOTJjZDNjNDZjNmU0MzMzZjdkNGMzMGE0ZTY1ZWZiYTFkZWRlNjY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7769fce643648b7eb13389a1d59b4b9fd67c4bf9",
                    "sha": "7769fce643648b7eb13389a1d59b4b9fd67c4bf9",
                    "url": "https://api.github.com/repos/cython/cython/commits/7769fce643648b7eb13389a1d59b4b9fd67c4bf9"
                }
            ],
            "sha": "ac92cd3c46c6e4333f7d4c30a4e65efba1dede66",
            "url": "https://api.github.com/repos/cython/cython/commits/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b2074315f7930cfcb684c05c9ea1d81f3692ff1d/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T04:46:48Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:30Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Add in total ordering logic",
                "tree": {
                    "sha": "95564e66ffef18cbcb678a8fbdef82609dea2d40",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/95564e66ffef18cbcb678a8fbdef82609dea2d40"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b2074315f7930cfcb684c05c9ea1d81f3692ff1d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/b2074315f7930cfcb684c05c9ea1d81f3692ff1d",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOmIyMDc0MzE1Zjc5MzBjZmNiNjg0YzA1YzllYTFkODFmMzY5MmZmMWQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66",
                    "sha": "ac92cd3c46c6e4333f7d4c30a4e65efba1dede66",
                    "url": "https://api.github.com/repos/cython/cython/commits/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66"
                }
            ],
            "sha": "b2074315f7930cfcb684c05c9ea1d81f3692ff1d",
            "url": "https://api.github.com/repos/cython/cython/commits/b2074315f7930cfcb684c05c9ea1d81f3692ff1d"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/75b18704160d0b03f5b7dfdf7be19b3bed632e5d/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T05:32:24Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:30Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Fix incorrect order for this.",
                "tree": {
                    "sha": "f0b73df9a74fc5a6d7d0cc6f87a7deef2ec67b58",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f0b73df9a74fc5a6d7d0cc6f87a7deef2ec67b58"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/75b18704160d0b03f5b7dfdf7be19b3bed632e5d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/75b18704160d0b03f5b7dfdf7be19b3bed632e5d",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjc1YjE4NzA0MTYwZDBiMDNmNWI3ZGZkZjdiZTE5YjNiZWQ2MzJlNWQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b2074315f7930cfcb684c05c9ea1d81f3692ff1d",
                    "sha": "b2074315f7930cfcb684c05c9ea1d81f3692ff1d",
                    "url": "https://api.github.com/repos/cython/cython/commits/b2074315f7930cfcb684c05c9ea1d81f3692ff1d"
                }
            ],
            "sha": "75b18704160d0b03f5b7dfdf7be19b3bed632e5d",
            "url": "https://api.github.com/repos/cython/cython/commits/75b18704160d0b03f5b7dfdf7be19b3bed632e5d"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a155a76a69934fe3c0c32fc923cd60c1b47ee679/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T05:51:48Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:30Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Allow use of the __ne__ method instead of __eq__",
                "tree": {
                    "sha": "de608072e8bbb88965d9676d9254697c27edac2a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/de608072e8bbb88965d9676d9254697c27edac2a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a155a76a69934fe3c0c32fc923cd60c1b47ee679",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/a155a76a69934fe3c0c32fc923cd60c1b47ee679",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOmExNTVhNzZhNjk5MzRmZTNjMGMzMmZjOTIzY2Q2MGMxYjQ3ZWU2Nzk=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/75b18704160d0b03f5b7dfdf7be19b3bed632e5d",
                    "sha": "75b18704160d0b03f5b7dfdf7be19b3bed632e5d",
                    "url": "https://api.github.com/repos/cython/cython/commits/75b18704160d0b03f5b7dfdf7be19b3bed632e5d"
                }
            ],
            "sha": "a155a76a69934fe3c0c32fc923cd60c1b47ee679",
            "url": "https://api.github.com/repos/cython/cython/commits/a155a76a69934fe3c0c32fc923cd60c1b47ee679"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/922b1e79dd9f97e551d36abb2138f35556bc733a/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T07:03:17Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:30Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Handle when total_ordering directive is specified for classes without comparison methods",
                "tree": {
                    "sha": "d0a0457868f7cb3cf04ee32efe2e58981ed9105d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d0a0457868f7cb3cf04ee32efe2e58981ed9105d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/922b1e79dd9f97e551d36abb2138f35556bc733a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/922b1e79dd9f97e551d36abb2138f35556bc733a",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjkyMmIxZTc5ZGQ5Zjk3ZTU1MWQzNmFiYjIxMzhmMzU1NTZiYzczM2E=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a155a76a69934fe3c0c32fc923cd60c1b47ee679",
                    "sha": "a155a76a69934fe3c0c32fc923cd60c1b47ee679",
                    "url": "https://api.github.com/repos/cython/cython/commits/a155a76a69934fe3c0c32fc923cd60c1b47ee679"
                }
            ],
            "sha": "922b1e79dd9f97e551d36abb2138f35556bc733a",
            "url": "https://api.github.com/repos/cython/cython/commits/922b1e79dd9f97e551d36abb2138f35556bc733a"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/edc1c0ad0e958483025aa856c3c5eb36104ef7cf/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T07:04:56Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:30Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Fix some issues with the tests",
                "tree": {
                    "sha": "b5361480aebf33f0bc2ae6a0e73c498ebba27fff",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b5361480aebf33f0bc2ae6a0e73c498ebba27fff"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOmVkYzFjMGFkMGU5NTg0ODMwMjVhYTg1NmMzYzVlYjM2MTA0ZWY3Y2Y=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/922b1e79dd9f97e551d36abb2138f35556bc733a",
                    "sha": "922b1e79dd9f97e551d36abb2138f35556bc733a",
                    "url": "https://api.github.com/repos/cython/cython/commits/922b1e79dd9f97e551d36abb2138f35556bc733a"
                }
            ],
            "sha": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "url": "https://api.github.com/repos/cython/cython/commits/edc1c0ad0e958483025aa856c3c5eb36104ef7cf"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5ef72db4b15a24e3f93700fa1b61ab66020e4518/comments",
            "commit": {
                "author": {
                    "date": "2020-05-22T02:36:23Z",
                    "email": "TeamSpen210@users.noreply.github.com",
                    "name": "Spencer Brown"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-22T02:36:23Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "909d3ac78924309c2df5f85f2b862accfa0b636a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/909d3ac78924309c2df5f85f2b862accfa0b636a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5ef72db4b15a24e3f93700fa1b61ab66020e4518",
                "verification": {
                    "payload": "tree 909d3ac78924309c2df5f85f2b862accfa0b636a\nparent edc1c0ad0e958483025aa856c3c5eb36104ef7cf\nauthor Spencer Brown <TeamSpen210@users.noreply.github.com> 1590114983 +1000\ncommitter GitHub <noreply@github.com> 1590114983 +1000\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexzqoCRBK7hj4Ov3rIwAAdHIIADAM9R0+xwF6mdV4g+CRKb1J\nJPu+3p9nMetYoaB5CIhk/HQRtyXVtQ9vfdjESlck1t1NNwJBL3tFp2rhoGRJ6049\nkeb5f1Bp6eS73izLbe+wv+FGKvBTGhOzvXIIQR27bhs2ekBnUKhdlc0MVm1NeYty\n5nW3PcprYTgLFk1uQoyNKsYUtDi5Qvgz2OUGsDbdTESmDyJRtEAuc3FVzD/P4sx8\nh6yrtJJ3Hdwh6oSL55UfxDebvLeEC2th3+qzuXDep7nr8BAVhpOsn8jNOa/rYlL7\n9KdpEmj3BPYktmpiDqIRdnu6yPtYe+9Bjfk/VSIF/goX+U3w/GMTO+cLuobSQo4=\n=tegy\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjVlZjcyZGI0YjE1YTI0ZTNmOTM3MDBmYTFiNjFhYjY2MDIwZTQ1MTg=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
                    "sha": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
                    "url": "https://api.github.com/repos/cython/cython/commits/edc1c0ad0e958483025aa856c3c5eb36104ef7cf"
                }
            ],
            "sha": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "url": "https://api.github.com/repos/cython/cython/commits/5ef72db4b15a24e3f93700fa1b61ab66020e4518"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3626/commits",
    "created_at": "2020-05-21T08:13:22Z",
    "diff_url": "https://github.com/cython/cython/pull/3626.diff",
    "draft": true,
    "head": {
        "label": "TeamSpen210:total_ordering",
        "ref": "total_ordering",
        "repo": {
            "archive_url": "https://api.github.com/repos/TeamSpen210/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/TeamSpen210/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/TeamSpen210/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/TeamSpen210/cython/branches{/branch}",
            "clone_url": "https://github.com/TeamSpen210/cython.git",
            "collaborators_url": "https://api.github.com/repos/TeamSpen210/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/TeamSpen210/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/TeamSpen210/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/TeamSpen210/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/TeamSpen210/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/TeamSpen210/cython/contributors",
            "created_at": "2017-12-14T22:33:08Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/TeamSpen210/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/TeamSpen210/cython/downloads",
            "events_url": "https://api.github.com/repos/TeamSpen210/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/TeamSpen210/cython/forks",
            "full_name": "TeamSpen210/cython",
            "git_commits_url": "https://api.github.com/repos/TeamSpen210/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/TeamSpen210/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/TeamSpen210/cython/git/tags{/sha}",
            "git_url": "git://github.com/TeamSpen210/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/TeamSpen210/cython/hooks",
            "html_url": "https://github.com/TeamSpen210/cython",
            "id": 114302602,
            "issue_comment_url": "https://api.github.com/repos/TeamSpen210/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/TeamSpen210/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/TeamSpen210/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/TeamSpen210/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/TeamSpen210/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/TeamSpen210/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/TeamSpen210/cython/merges",
            "milestones_url": "https://api.github.com/repos/TeamSpen210/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMTQzMDI2MDI=",
            "notifications_url": "https://api.github.com/repos/TeamSpen210/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/TeamSpen210/cython/pulls{/number}",
            "pushed_at": "2020-05-22T02:36:25Z",
            "releases_url": "https://api.github.com/repos/TeamSpen210/cython/releases{/id}",
            "size": 55627,
            "ssh_url": "git@github.com:TeamSpen210/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/TeamSpen210/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/TeamSpen210/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/TeamSpen210/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/TeamSpen210/cython/subscription",
            "svn_url": "https://github.com/TeamSpen210/cython",
            "tags_url": "https://api.github.com/repos/TeamSpen210/cython/tags",
            "teams_url": "https://api.github.com/repos/TeamSpen210/cython/teams",
            "trees_url": "https://api.github.com/repos/TeamSpen210/cython/git/trees{/sha}",
            "updated_at": "2020-05-21T07:08:24Z",
            "url": "https://api.github.com/repos/TeamSpen210/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
        "user": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
            "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
            "followers_url": "https://api.github.com/users/TeamSpen210/followers",
            "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
            "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/TeamSpen210",
            "id": 8453732,
            "login": "TeamSpen210",
            "node_id": "MDQ6VXNlcjg0NTM3MzI=",
            "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
            "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
            "repos_url": "https://api.github.com/users/TeamSpen210/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/TeamSpen210"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3626",
    "id": 421215331,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3626",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "c89007d9365afe7f008e3685d23115efadd4e765",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDIxMjE1MzMx",
    "number": 3626,
    "patch_url": "https://github.com/cython/cython/pull/3626.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3626/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/5ef72db4b15a24e3f93700fa1b61ab66020e4518",
    "title": "Implement total_ordering",
    "updated_at": "2020-05-22T11:54:18Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3626",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/8453732?v=4",
        "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
        "followers_url": "https://api.github.com/users/TeamSpen210/followers",
        "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
        "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/TeamSpen210",
        "id": 8453732,
        "login": "TeamSpen210",
        "node_id": "MDQ6VXNlcjg0NTM3MzI=",
        "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
        "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
        "repos_url": "https://api.github.com/users/TeamSpen210/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/TeamSpen210"
    }
}