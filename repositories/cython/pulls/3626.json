{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3626/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3626/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3626"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3626"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3626/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3626"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/5a8661a9e1e9c324ed5b26a762da4152cec2efc0"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1153,
            "forks_count": 1153,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 940,
            "open_issues_count": 940,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2021-05-26T13:30:21Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 62443,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 6116,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2021-05-26T13:30:24Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 6116,
            "watchers_count": 6116
        },
        "sha": "28c35f432f73b0b710cc5f6a823e11bca53265b0",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "This adds a `@cython.total_ordering` directive which replicates the `functools` version for extension classes, as described in #2090. While doing this, I've discovered a few edge cases:\r\n\r\n* Should it use methods defined in superclasses? If it's pure-C class, there's no way to know which methods are defined and so shouldn't be inferred without some sort of runtime check. I still need to add tests for these situations.\r\n* What should happen if `__eq__` isn't defined? This is likely to be an error, if the user has defined some ordering method it's unlikely to correspond to `object.__eq__`.\r\n* What happens if `__ne__` is defined but not `__eq__`? I've implemented this fallback, though it's not something the interpreter does.\r\n* I'm not sure where this should be documented. [Source Files and Compilation](https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiler-directives) only seems to include module-global directives. All the other class directives are scattered throughout the [Extension Types](https://cython.readthedocs.io/en/latest/src/userguide/extension_types.html) page.",
    "closed_at": "2021-05-26T06:46:22Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428515661"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428515661"
                }
            },
            "author_association": "MEMBER",
            "body": "This is dead code now that can be removed.\r\n```suggestion\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2020-05-21T08:25:55Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428515661",
            "id": 428515661,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUxNTY2MQ==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2035,
            "original_position": 70,
            "original_start_line": 2034,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428515661",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428521068"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428521068"
                }
            },
            "author_association": "MEMBER",
            "body": "Just splitting these because it's an unusual pattern in Cython generated code and the decref might be easy to miss.\r\n```suggestion\r\n                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret);\")\r\n                    code.putln(\"Py_DECREF(ret);\")\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2020-05-21T08:37:25Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        if invert_comp:\n+                            code.putln(\"if (!order_res) {\")\n+                        else:\n+                            code.putln(\"if (order_res) {\")\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428521068",
            "id": 428521068,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyMTA2OA==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2106,
            "original_position": 151,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428521068",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428525314"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428525314"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret);\")\r\n                code.putln(\"Py_DECREF(ret);\")\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2020-05-21T08:45:47Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428525314",
            "id": 428525314,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyNTMxNA==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2075,
            "original_position": 120,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428525314",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428526364"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428526364"
                }
            },
            "author_association": "MEMBER",
            "body": "… to a bool, maybe?",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2020-05-21T08:48:00Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        if invert_comp:\n+                            code.putln(\"if (!order_res) {\")\n+                        else:\n+                            code.putln(\"if (order_res) {\")\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                    code.putln(\"if (unlikely(eq_res < 0)) return NULL;\")\n+                    if invert_equals:\n+                        code.putln(\"ret = eq_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = eq_res ? Py_True : Py_False;\")\n+                    code.putln(\"}\") # equals success\n+                    code.putln(\"}\") # Needs to try equals\n+                else:\n+                    # Convert direct to a string.",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428526364",
            "id": 428526364,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyNjM2NA==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2115,
            "original_position": 160,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428526364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428526915"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428526915"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, I see where you got this from. :) Let's split it here, too.\r\n```suggestion\r\n            code.putln(\"int b = __Pyx_PyObject_IsTrue(ret);\")\r\n            code.putln(\"Py_DECREF(ret);\")\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2020-05-21T08:49:18Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        if invert_comp:\n+                            code.putln(\"if (!order_res) {\")\n+                        else:\n+                            code.putln(\"if (order_res) {\")\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                    code.putln(\"if (unlikely(eq_res < 0)) return NULL;\")\n+                    if invert_equals:\n+                        code.putln(\"ret = eq_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = eq_res ? Py_True : Py_False;\")\n+                    code.putln(\"}\") # equals success\n+                    code.putln(\"}\") # Needs to try equals\n+                else:\n+                    # Convert direct to a string.\n+                    if invert_comp:\n+                        code.putln(\"ret = order_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = order_res ? Py_True : Py_False;\")\n+                code.putln(\"Py_INCREF(ret);\")\n+                code.putln(\"}\")  # comp_op\n+                code.putln(\"return ret;\")\n+            else:\n+                code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n+            code.putln(\"}\")  # Case\n \n-        if eq_entry and not has_ne and not extern_parent:\n+        if '__eq__' in comp_entry and '__ne__' not in comp_entry and not extern_parent:\n             code.putln(\"case Py_NE: {\")\n             code.putln(\"PyObject *ret;\")\n             # Python itself does not do this optimisation, it seems...\n             #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"ret = %s(o1, o2);\" % eq_entry.func_cname)\n+            code.putln(\"ret = %s(o1, o2);\" % comp_entry['__eq__'].func_cname)\n             code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n             code.putln(\"int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428526915",
            "id": 428526915,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyNjkxNQ==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2134,
            "original_position": 181,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428526915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428531031"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428531031"
                }
            },
            "author_association": "MEMBER",
            "body": "This simple and obvious case seems worth handling first for readability reasons, i.e. swap the `if entry` condition.",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2020-05-21T08:57:43Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        if invert_comp:\n+                            code.putln(\"if (!order_res) {\")\n+                        else:\n+                            code.putln(\"if (order_res) {\")\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                    code.putln(\"if (unlikely(eq_res < 0)) return NULL;\")\n+                    if invert_equals:\n+                        code.putln(\"ret = eq_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = eq_res ? Py_True : Py_False;\")\n+                    code.putln(\"}\") # equals success\n+                    code.putln(\"}\") # Needs to try equals\n+                else:\n+                    # Convert direct to a string.\n+                    if invert_comp:\n+                        code.putln(\"ret = order_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = order_res ? Py_True : Py_False;\")\n+                code.putln(\"Py_INCREF(ret);\")\n+                code.putln(\"}\")  # comp_op\n+                code.putln(\"return ret;\")\n+            else:\n+                code.putln(\"return %s(o1, o2);\" % entry.func_cname)",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428531031",
            "id": 428531031,
            "line": 2175,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMTAzMQ==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2124,
            "original_position": 169,
            "original_start_line": 2123,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 180,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": 2174,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428531031",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428532922"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428532922"
                }
            },
            "author_association": "MEMBER",
            "body": "Similarly below. Just a suggestion, not sure if it's really more readable in the end, but it feels like less code might keep this implementation quicker to grasp.\r\n```suggestion\r\n                        code.putln(\"if (%s order_res) {\" % ('!!' if invert_comp else '!'))\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2020-05-21T09:01:50Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428532922",
            "id": 428532922,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMjkyMg==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2085,
            "original_position": 130,
            "original_start_line": 2082,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-05-25T16:02:04Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428532922",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428533349"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428533349"
                }
            },
            "author_association": "MEMBER",
            "body": "Same suggestion as above, just reversed.\r\n```suggestion\r\n                        code.putln(\"if (%s order_res) {\" % ('!' if if invert_comp else '')\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2020-05-21T09:02:50Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        if invert_comp:\n+                            code.putln(\"if (!order_res) {\")\n+                        else:\n+                            code.putln(\"if (order_res) {\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428533349",
            "id": 428533349,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMzM0OQ==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2092,
            "original_position": 137,
            "original_start_line": 2089,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-05-25T16:03:14Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428533349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r428533954"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/428533954"
                }
            },
            "author_association": "MEMBER",
            "body": "\"not ever\" seems less clear than \"never\", I think that's what you meant, right?\r\n```suggestion\r\n                # We may need to check equality too. For some combos it's never required.\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2020-05-21T09:04:10Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r428533954",
            "id": 428533954,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMzk1NA==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2078,
            "original_position": 123,
            "original_start_line": 2077,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 415966690,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/428533954",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r429012698"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/429012698"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I originally had it produce `!!` if both inversions were enabled, maybe that would be better?",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2020-05-22T02:35:46Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r429012698",
            "id": 429012698,
            "in_reply_to_id": 428532922,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMjY5OA==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2085,
            "original_position": 130,
            "original_start_line": 2082,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 416611625,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T02:36:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/429012698",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r429052865"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/429052865"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah, sounds good.",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2020-05-22T05:43:03Z",
            "diff_hunk": "@@ -1982,35 +2021,115 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n             else:\n                 continue\n \n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n+            else:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n+\n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's not\n+                # ever required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        if invert_comp:\n+                            code.putln(\"if (order_res) {\")\n+                        else:\n+                            code.putln(\"if (!order_res) {\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r429052865",
            "id": 429052865,
            "in_reply_to_id": 428532922,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1Mjg2NQ==",
            "original_commit_id": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "original_line": 2085,
            "original_position": 130,
            "original_start_line": 2082,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 416660614,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2020-05-22T05:43:04Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/429052865",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638935805"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638935805"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's be strict and make it an error if `__eq__` is missing.\r\n```suggestion\r\n                if '__eq__' not in comp_entry:\r\n                    error(scope.parent_type.pos,\r\n                          \"total_ordering directive used, but no comparison and equality methods defined\")\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T15:59:00Z",
            "diff_hunk": "@@ -1982,37 +2021,117 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638935805",
            "id": 638935805,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODkzNTgwNQ==",
            "original_commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "original_line": 2041,
            "original_position": 76,
            "original_start_line": 2039,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 668023046,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-05-25T16:08:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638935805",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638937458"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638937458"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                if '__eq__' not in comp_entry:\r\n                    error(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T16:00:18Z",
            "diff_hunk": "@@ -1982,37 +2021,117 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                        \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n             else:\n-                continue\n+                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638937458",
            "id": 638937458,
            "line": 2105,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODkzNzQ1OA==",
            "original_commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "original_line": 2048,
            "original_position": 84,
            "original_start_line": 2047,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 100,
            "pull_request_review_id": 668023046,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": 2104,
            "start_side": "RIGHT",
            "updated_at": "2021-05-25T16:08:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638937458",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638947969"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638947969"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n# mode: run\r\n# tag: total_ordering\r\n\r\nfrom __future__ import print_function\r\n\r\n\"\"\"\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T16:07:20Z",
            "diff_hunk": "@@ -0,0 +1,1009 @@\n+from __future__ import print_function\n+# mode: run\n+__doc__ = u\"\"\"",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638947969",
            "id": 638947969,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODk0Nzk2OQ==",
            "original_commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "original_line": 3,
            "original_position": 3,
            "original_start_line": 1,
            "path": "tests/run/exttype_total_ordering.pyx",
            "position": null,
            "pull_request_review_id": 668023046,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-05-25T16:08:56Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638947969",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638949219"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638949219"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n# mode: error\r\n# tag: total_ordering, warnings\r\n\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T16:08:08Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+# mode: error\n+# tag: warnings",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638949219",
            "id": 638949219,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODk0OTIxOQ==",
            "original_commit_id": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": 1,
            "path": "tests/errors/e_exttype_total_ordering.pyx",
            "position": null,
            "pull_request_review_id": 668023046,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-05-25T16:08:57Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638949219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638955351"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638955351"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                        code.putln(\"if (%s order_res) {\" % ('!' if invert_comp else '')\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T16:14:58Z",
            "diff_hunk": "@@ -2035,37 +2078,111 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:\n+                    error(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n             else:\n-                continue\n+                if '__eq__' not in comp_entry:\n+                    error(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n \n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret);\")\n+                code.putln(\"Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's never required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        code.putln(\"if (%s order_res) {\" % ('!!' if invert_comp else '!'))\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        code.putln(\"if (%s order_res) {\" % ('!' if if invert_comp else '')",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638955351",
            "id": 638955351,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODk1NTM1MQ==",
            "original_commit_id": "81d281a524fa3b5d0786a3e5e32c1889fd8246b6",
            "original_line": 2141,
            "original_position": 146,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 668044712,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-25T16:14:58Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638955351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638958196"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638958196"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                        code.putln(\"if (%s order_res) {\" % ('!' if invert_comp else ''))\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T16:18:34Z",
            "diff_hunk": "@@ -2035,37 +2078,111 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:\n+                    error(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n             else:\n-                continue\n+                if '__eq__' not in comp_entry:\n+                    error(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n \n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret);\")\n+                code.putln(\"Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's never required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        code.putln(\"if (%s order_res) {\" % ('!!' if invert_comp else '!'))\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        code.putln(\"if (%s order_res) {\" % ('!' if invert_comp else '')",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638958196",
            "id": 638958196,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODk1ODE5Ng==",
            "original_commit_id": "520e1b2d5df312e4de4199c071d015c5cc2c79bb",
            "original_line": 2141,
            "original_position": 146,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 668048275,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-25T16:18:34Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638958196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638964946"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638964946"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                    code.putln(\"}\")  # equals success\r\n                    code.putln(\"}\")  # Needs to try equals\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T16:27:24Z",
            "diff_hunk": "@@ -2035,37 +2078,111 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:\n+                    error(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n             else:\n-                continue\n+                if '__eq__' not in comp_entry:\n+                    error(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n \n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret);\")\n+                code.putln(\"Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's never required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        code.putln(\"if (%s order_res) {\" % ('!!' if invert_comp else '!'))\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        code.putln(\"if (%s order_res) {\" % ('!' if invert_comp else ''))\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret);\")\n+                    code.putln(\"Py_DECREF(ret);\")\n+                    code.putln(\"if (unlikely(eq_res < 0)) return NULL;\")\n+                    if invert_equals:\n+                        code.putln(\"ret = eq_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = eq_res ? Py_True : Py_False;\")\n+                    code.putln(\"}\") # equals success\n+                    code.putln(\"}\") # Needs to try equals",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638964946",
            "id": 638964946,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODk2NDk0Ng==",
            "original_commit_id": "39c7626d5b758cd50484101686b2f551ffd22d17",
            "original_line": 2163,
            "original_position": 168,
            "original_start_line": 2162,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 668060971,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-05-25T16:27:25Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638964946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638971080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638971080"
                }
            },
            "author_association": "MEMBER",
            "body": "Looks like I said before that this should not be an error. Let's not make it an error. :)\r\n```suggestion\r\n                    warning(scope.parent_type.pos,\r\n                            \"total_ordering directive used, but no comparison and equality methods defined\")\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T16:32:45Z",
            "diff_hunk": "@@ -2035,37 +2078,111 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:\n+                    error(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison and equality methods defined\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638971080",
            "id": 638971080,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODk3MTA4MA==",
            "original_commit_id": "912a0fcb0aff9f821ddd9ad53e9b015dfa4f77e2",
            "original_line": 2098,
            "original_position": 92,
            "original_start_line": 2097,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 668068862,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-05-25T16:33:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638971080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638971807"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638971807"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T16:33:37Z",
            "diff_hunk": "@@ -2035,37 +2078,111 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:\n+                    error(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n             else:\n-                continue\n+                if '__eq__' not in comp_entry:\n+                    error(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638971807",
            "id": 638971807,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODk3MTgwNw==",
            "original_commit_id": "912a0fcb0aff9f821ddd9ad53e9b015dfa4f77e2",
            "original_line": 2105,
            "original_position": 100,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 668068862,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-25T16:33:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638971807",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638979366"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638979366"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "~I'm not 100% confident (because it's hard to be sure without seeing the generated code), but I think this has a ref-counting error when `ret == Py_NotImplemented`~",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T16:43:36Z",
            "diff_hunk": "@@ -2035,37 +2078,111 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                            \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n             else:\n-                continue\n+                if '__eq__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n \n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret);\")\n+                code.putln(\"Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's never required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        code.putln(\"if (%s order_res) {\" % ('!!' if invert_comp else '!'))\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        code.putln(\"if (%s order_res) {\" % ('!' if invert_comp else ''))\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638979366",
            "id": 638979366,
            "line": 2154,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODk3OTM2Ng==",
            "original_commit_id": "6b06dd4e2089cb071944efee45b84dc71f41ee90",
            "original_line": 2154,
            "original_position": 159,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 159,
            "pull_request_review_id": 668079285,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-25T17:00:16Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638979366",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638980659"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638980659"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "~`XINCREF` I think, to handle the case when `ret` is NULL (which can happen with an exception)~",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T16:45:22Z",
            "diff_hunk": "@@ -2035,37 +2078,111 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                            \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n             else:\n-                continue\n+                if '__eq__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n \n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret);\")\n+                code.putln(\"Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's never required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        code.putln(\"if (%s order_res) {\" % ('!!' if invert_comp else '!'))\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        code.putln(\"if (%s order_res) {\" % ('!' if invert_comp else ''))\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret);\")\n+                    code.putln(\"Py_DECREF(ret);\")\n+                    code.putln(\"if (unlikely(eq_res < 0)) return NULL;\")\n+                    if invert_equals:\n+                        code.putln(\"ret = eq_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = eq_res ? Py_True : Py_False;\")\n+                    code.putln(\"}\")  # equals success\n+                    code.putln(\"}\")  # Needs to try equals\n+                else:\n+                    # Convert direct to a string.\n+                    if invert_comp:\n+                        code.putln(\"ret = order_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = order_res ? Py_True : Py_False;\")\n+                code.putln(\"Py_INCREF(ret);\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638980659",
            "id": 638980659,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODk4MDY1OQ==",
            "original_commit_id": "6b06dd4e2089cb071944efee45b84dc71f41ee90",
            "original_line": 2170,
            "original_position": 175,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 668080996,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-25T17:00:28Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638980659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r638991317"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/638991317"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Ignore me... both comments are wrong and the generated code looks fine.",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T16:59:23Z",
            "diff_hunk": "@@ -2035,37 +2078,111 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                            \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n             else:\n-                continue\n+                if '__eq__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n \n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret);\")\n+                code.putln(\"Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's never required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        code.putln(\"if (%s order_res) {\" % ('!!' if invert_comp else '!'))\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        code.putln(\"if (%s order_res) {\" % ('!' if invert_comp else ''))\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r638991317",
            "id": 638991317,
            "in_reply_to_id": 638979366,
            "line": 2154,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODk5MTMxNw==",
            "original_commit_id": "6b06dd4e2089cb071944efee45b84dc71f41ee90",
            "original_line": 2154,
            "original_position": 159,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 159,
            "pull_request_review_id": 668094669,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-25T16:59:24Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/638991317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r639174367"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/639174367"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                    # Convert direct to a boolean.\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T20:31:36Z",
            "diff_hunk": "@@ -2035,37 +2078,111 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                            \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n             else:\n-                continue\n+                if '__eq__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n \n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret);\")\n+                code.putln(\"Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's never required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        code.putln(\"if (%s order_res) {\" % ('!!' if invert_comp else '!'))\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        code.putln(\"if (%s order_res) {\" % ('!' if invert_comp else ''))\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                    code.putln(\"int eq_res = __Pyx_PyObject_IsTrue(ret);\")\n+                    code.putln(\"Py_DECREF(ret);\")\n+                    code.putln(\"if (unlikely(eq_res < 0)) return NULL;\")\n+                    if invert_equals:\n+                        code.putln(\"ret = eq_res ? Py_False : Py_True;\")\n+                    else:\n+                        code.putln(\"ret = eq_res ? Py_True : Py_False;\")\n+                    code.putln(\"}\")  # equals success\n+                    code.putln(\"}\")  # Needs to try equals\n+                else:\n+                    # Convert direct to a string.",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r639174367",
            "id": 639174367,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTE3NDM2Nw==",
            "original_commit_id": "6b06dd4e2089cb071944efee45b84dc71f41ee90",
            "original_line": 2165,
            "original_position": 170,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 668341526,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-25T20:33:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/639174367",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r639177316"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/639177316"
                }
            },
            "author_association": "MEMBER",
            "body": "No, it doesn't. You're right. `Py_NotImplemented` comes back as an owned reference. It cannot be handled together with `NULL`. at least not by not handling it at all.",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T20:33:20Z",
            "diff_hunk": "@@ -2035,37 +2078,111 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                            \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n             else:\n-                continue\n+                if '__eq__' not in comp_entry:\n+                    warning(scope.parent_type.pos, \"total_ordering directive used, but no equality method defined\")\n+                    total_ordering = False\n+\n+                # Same priority as functools, prefers\n+                # __lt__ to __le__ to __gt__ to __ge__\n+                ordering_source = max(comp_names)\n \n+        for cmp_method in TypeSlots.richcmp_special_methods:\n             cmp_type = cmp_method.strip('_').upper()  # e.g. \"__eq__\" -> EQ\n+            entry = comp_entry.get(cmp_method)\n+            if entry is None and (not total_ordering or cmp_type in ('NE', 'EQ')):\n+                # No definition, fall back to superclasses.\n+                # eq/ne methods shouldn't use the total_ordering code.\n+                continue\n+\n             code.putln(\"case Py_%s: {\" % cmp_type)\n-            if cmp_method == '__eq__':\n-                eq_entry = entry\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_True);\")\n-            elif cmp_method == '__ne__':\n-                has_ne = True\n-                # Python itself does not do this optimisation, it seems...\n-                #code.putln(\"if (o1 == o2) return __Pyx_NewRef(Py_False);\")\n-            code.putln(\"return %s(o1, o2);\" % entry.func_cname)\n-            code.putln(\"}\")\n+            if entry is None:\n+                assert total_ordering\n+                # We need to generate this from the other methods.\n+                invert_comp, comp_op, invert_equals = TOTAL_ORDERING[ordering_source, cmp_method]\n+\n+                # First we always do the comparison.\n+                code.putln(\"PyObject *ret;\")\n+                code.putln(\"ret = %s(o1, o2);\" % comp_entry[ordering_source].func_cname)\n+                code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")\n+                code.putln(\"int order_res = __Pyx_PyObject_IsTrue(ret);\")\n+                code.putln(\"Py_DECREF(ret);\")\n+                code.putln(\"if (unlikely(order_res < 0)) return NULL;\")\n+                # We may need to check equality too. For some combos it's never required.\n+                if invert_equals is not None:\n+                    # Implement the and/or check with an if.\n+                    if comp_op == '&&':\n+                        code.putln(\"if (%s order_res) {\" % ('!!' if invert_comp else '!'))\n+                        code.putln(\"ret = Py_False;\")\n+                        code.putln(\"} else {\")\n+                    elif comp_op == '||':\n+                        code.putln(\"if (%s order_res) {\" % ('!' if invert_comp else ''))\n+                        code.putln(\"ret = Py_True;\")\n+                        code.putln(\"} else {\")\n+                    else:\n+                        raise AssertionError('Unknown op %s' % (comp_op, ))\n+                    if '__eq__' in comp_entry:\n+                        eq_func = '__eq__'\n+                    else:\n+                        # Fall back to NE, which is defined here.\n+                        eq_func = '__ne__'\n+                        invert_equals = not invert_equals\n+\n+                    code.putln(\"ret = %s(o1, o2);\" % comp_entry[eq_func].func_cname)\n+                    code.putln(\"if (likely(ret && ret != Py_NotImplemented)) {\")",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r639177316",
            "id": 639177316,
            "in_reply_to_id": 638979366,
            "line": 2154,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTE3NzMxNg==",
            "original_commit_id": "6b06dd4e2089cb071944efee45b84dc71f41ee90",
            "original_line": 2154,
            "original_position": 159,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": 159,
            "pull_request_review_id": 668341526,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-25T20:33:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/639177316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r639203402"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/639203402"
                }
            },
            "author_association": "MEMBER",
            "body": "Looks like I have to revert this removal.\r\n```suggestion\r\n                if '__eq__' not in comp_entry and '__ne__'  not in comp_entry:\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T21:04:08Z",
            "diff_hunk": "@@ -2035,37 +2078,112 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r639203402",
            "id": 639203402,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTIwMzQwMg==",
            "original_commit_id": "5cea5f716a0b06d3ef3133c6f4d724d0a01d466b",
            "original_line": 2096,
            "original_position": 90,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 668366963,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-25T21:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/639203402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r639203750"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/639203750"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                if '__eq__' not in comp_entry and '__ne__' not in comp_entry:\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T21:04:44Z",
            "diff_hunk": "@@ -2035,37 +2078,112 @@ def generate_richcmp_function(self, scope, code):\n             # need to call up into base classes as we may not know all implemented comparison methods\n             extern_parent = cls if cls.typeptr_cname else scope.parent_type.base_type\n \n-        eq_entry = None\n-        has_ne = False\n+        total_ordering = scope.directives.get('total_ordering', False)\n+\n+        comp_entry = {}\n+\n         for cmp_method in TypeSlots.richcmp_special_methods:\n             for class_scope in class_scopes:\n                 entry = class_scope.lookup_here(cmp_method)\n                 if entry is not None:\n+                    comp_entry[cmp_method] = entry\n                     break\n+\n+        if total_ordering:\n+            # Check this is valid - we must have at least 1 operation defined.\n+            comp_names = [from_name for from_name, to_name in TOTAL_ORDERING if from_name in comp_entry]\n+            if not comp_names:\n+                if '__eq__' not in comp_entry:\n+                    warning(scope.parent_type.pos,\n+                            \"total_ordering directive used, but no comparison and equality methods defined\")\n+                else:\n+                    warning(scope.parent_type.pos,\n+                          \"total_ordering directive used, but no comparison methods defined\")\n+                total_ordering = False\n             else:\n-                continue\n+                if '__eq__' not in comp_entry:",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r639203750",
            "id": 639203750,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTIwMzc1MA==",
            "original_commit_id": "5cea5f716a0b06d3ef3133c6f4d724d0a01d466b",
            "original_line": 2104,
            "original_position": 99,
            "original_start_line": null,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 668366963,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-05-25T21:06:02Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/639203750",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r639241437"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/639241437"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    >>> import sys\r\n    >>> try: a >= b\r\n    ... except TypeError:\r\n    ...     assert sys.version_info[0] >= 3\r\n    ... else:\r\n    ...     assert sys.version_info[0] < 3\r\n    >>> try: a <= b\r\n    ... except TypeError:\r\n    ...     assert sys.version_info[0] >= 3\r\n    ... else:\r\n    ...     assert sys.version_info[0] < 3\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-25T22:09:46Z",
            "diff_hunk": "@@ -0,0 +1,1012 @@\n+# mode: run\n+# tag: total_ordering\n+\n+from __future__ import print_function\n+\n+\"\"\"\n+    >>> class PyTotalOrdering:\n+    ...     def __init__(self, value):\n+    ...         self.value = value\n+    ...     def __eq__(self, other):\n+    ...         return self.value == other.value\n+    ...     def __lt__(self, other):\n+    ...         return self.value < other.value\n+    >>> test_all_comp(functools.total_ordering(PyTotalOrdering))\n+    True\n+\"\"\"\n+\n+cimport cython\n+import functools\n+import operator\n+\n+COMPARISONS = [\n+    # Don't test equals, the directive doesn't add that.\n+    # ('==', operator.__eq__),\n+    ('!=', operator.__ne__),\n+    ('<',  operator.__lt__),\n+    ('>',  operator.__gt__),\n+    ('<=', operator.__le__),\n+    ('>=', operator.__ge__),\n+]\n+\n+def test_all_comp(cls):\n+    \"\"\"Check every combination of comparison operators.\"\"\"\n+    a, b, c = 10, 15, 20\n+    succeeded = True\n+    for comp, func in COMPARISONS:\n+        for left in [cls(a), cls(b), cls(c)]:\n+            for right in [ValueHolder(a), ValueHolder(b), ValueHolder(c)]:\n+                expected = func(left.value, right.value)\n+                try:\n+                    result = func(left, right)\n+                except TypeError:\n+                    print(\"TypeError:\", left.value, comp, right.value)\n+                    succeeded = False\n+                else:\n+                    if expected != result:\n+                        print(\n+                            left.value, comp, right.value,\n+                            \"expected:\", expected, \"got:\", result\n+                        )\n+                        succeeded = False\n+    return succeeded\n+\n+class ValueHolder:\n+    \"\"\"Has a value, but can't compare.\"\"\"\n+    def __init__(self, value):\n+        self.value = value\n+\n+\n+\n+cdef class ExtTypeNoTotalOrdering:\n+    \"\"\"\n+    >>> a = ExtTypeNoTotalOrdering(5)\n+    >>> b = ExtTypeNoTotalOrdering(10)\n+    >>> a == b\n+    False\n+    >>> a != b  # Added in Python 3, but Cython backports\n+    True\n+    >>> a < b\n+    True\n+    >>> b < a\n+    False\n+    >>> a > b\n+    False\n+    >>> b > a\n+    True\n+    >>> a >= b\n+    Traceback (most recent call last):\n+    TypeError: '>=' not supported between instances of 'exttype_total_ordering.ExtTypeNoTotalOrdering' and 'exttype_total_ordering.ExtTypeNoTotalOrdering'\n+    >>> a <= b\n+    Traceback (most recent call last):\n+    TypeError: '<=' not supported between instances of 'exttype_total_ordering.ExtTypeNoTotalOrdering' and 'exttype_total_ordering.ExtTypeNoTotalOrdering'",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r639241437",
            "id": 639241437,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTI0MTQzNw==",
            "original_commit_id": "a4c8dedbbf1d5bd0e26f037b956f56ea04a9c88b",
            "original_line": 82,
            "original_position": 82,
            "original_start_line": 77,
            "path": "tests/run/exttype_total_ordering.pyx",
            "position": null,
            "pull_request_review_id": 668415710,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-05-25T22:09:46Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/639241437",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3626#discussion_r639418950"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3626"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/639418950"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    >>> import sys\r\n    >>> try: _ =  a >= b\r\n    ... except TypeError:\r\n    ...     assert sys.version_info[0] >= 3\r\n    ... else:\r\n    ...     assert sys.version_info[0] < 3\r\n    >>> try: _ =  a <= b\r\n    ... except TypeError:\r\n    ...     assert sys.version_info[0] >= 3\r\n    ... else:\r\n    ...     assert sys.version_info[0] < 3\r\n```",
            "commit_id": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "created_at": "2021-05-26T05:50:39Z",
            "diff_hunk": "@@ -0,0 +1,1017 @@\n+# mode: run\n+# tag: total_ordering\n+\n+from __future__ import print_function\n+\n+\"\"\"\n+    >>> class PyTotalOrdering:\n+    ...     def __init__(self, value):\n+    ...         self.value = value\n+    ...     def __eq__(self, other):\n+    ...         return self.value == other.value\n+    ...     def __lt__(self, other):\n+    ...         return self.value < other.value\n+    >>> test_all_comp(functools.total_ordering(PyTotalOrdering))\n+    True\n+\"\"\"\n+\n+cimport cython\n+import functools\n+import operator\n+\n+COMPARISONS = [\n+    # Don't test equals, the directive doesn't add that.\n+    # ('==', operator.__eq__),\n+    ('!=', operator.__ne__),\n+    ('<',  operator.__lt__),\n+    ('>',  operator.__gt__),\n+    ('<=', operator.__le__),\n+    ('>=', operator.__ge__),\n+]\n+\n+def test_all_comp(cls):\n+    \"\"\"Check every combination of comparison operators.\"\"\"\n+    a, b, c = 10, 15, 20\n+    succeeded = True\n+    for comp, func in COMPARISONS:\n+        for left in [cls(a), cls(b), cls(c)]:\n+            for right in [ValueHolder(a), ValueHolder(b), ValueHolder(c)]:\n+                expected = func(left.value, right.value)\n+                try:\n+                    result = func(left, right)\n+                except TypeError:\n+                    print(\"TypeError:\", left.value, comp, right.value)\n+                    succeeded = False\n+                else:\n+                    if expected != result:\n+                        print(\n+                            left.value, comp, right.value,\n+                            \"expected:\", expected, \"got:\", result\n+                        )\n+                        succeeded = False\n+    return succeeded\n+\n+class ValueHolder:\n+    \"\"\"Has a value, but can't compare.\"\"\"\n+    def __init__(self, value):\n+        self.value = value\n+\n+\n+\n+cdef class ExtTypeNoTotalOrdering:\n+    \"\"\"\n+    >>> a = ExtTypeNoTotalOrdering(5)\n+    >>> b = ExtTypeNoTotalOrdering(10)\n+    >>> a == b\n+    False\n+    >>> a != b  # Added in Python 3, but Cython backports\n+    True\n+    >>> a < b\n+    True\n+    >>> b < a\n+    False\n+    >>> a > b\n+    False\n+    >>> b > a\n+    True\n+    >>> import sys\n+    >>> try: a >= b\n+    ... except TypeError:\n+    ...     assert sys.version_info[0] >= 3\n+    ... else:\n+    ...     assert sys.version_info[0] < 3\n+    >>> try: a <= b\n+    ... except TypeError:\n+    ...     assert sys.version_info[0] >= 3\n+    ... else:\n+    ...     assert sys.version_info[0] < 3",
            "html_url": "https://github.com/cython/cython/pull/3626#discussion_r639418950",
            "id": 639418950,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTQxODk1MA==",
            "original_commit_id": "188303a5ce298c740f7adec0b1fbeeb3dfd4098d",
            "original_line": 87,
            "original_position": 87,
            "original_start_line": 77,
            "path": "tests/run/exttype_total_ordering.pyx",
            "position": null,
            "pull_request_review_id": 668616832,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3626",
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-05-26T05:50:41Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/639418950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3626/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/76b2dc230ce42351171e52938b5a3cd88ddb1a7b/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T00:12:04Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:29Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Add test for existing comparison behavior",
                "tree": {
                    "sha": "70a1a1505881e57451ae73021be635afd3f952bd",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/70a1a1505881e57451ae73021be635afd3f952bd"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/76b2dc230ce42351171e52938b5a3cd88ddb1a7b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/76b2dc230ce42351171e52938b5a3cd88ddb1a7b",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjc2YjJkYzIzMGNlNDIzNTExNzFlNTI5MzhiNWEzY2Q4OGRkYjFhN2I=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cb4c5229385ce6eb3ca6f7eedb9209995a3985a9",
                    "sha": "cb4c5229385ce6eb3ca6f7eedb9209995a3985a9",
                    "url": "https://api.github.com/repos/cython/cython/commits/cb4c5229385ce6eb3ca6f7eedb9209995a3985a9"
                }
            ],
            "sha": "76b2dc230ce42351171e52938b5a3cd88ddb1a7b",
            "url": "https://api.github.com/repos/cython/cython/commits/76b2dc230ce42351171e52938b5a3cd88ddb1a7b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7769fce643648b7eb13389a1d59b4b9fd67c4bf9/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T00:12:38Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:29Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Add total_ordering directive definition",
                "tree": {
                    "sha": "d30fe7215c14700b5216258891cffa8c30c9ebf1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d30fe7215c14700b5216258891cffa8c30c9ebf1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7769fce643648b7eb13389a1d59b4b9fd67c4bf9",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/7769fce643648b7eb13389a1d59b4b9fd67c4bf9",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjc3NjlmY2U2NDM2NDhiN2ViMTMzODlhMWQ1OWI0YjlmZDY3YzRiZjk=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/76b2dc230ce42351171e52938b5a3cd88ddb1a7b",
                    "sha": "76b2dc230ce42351171e52938b5a3cd88ddb1a7b",
                    "url": "https://api.github.com/repos/cython/cython/commits/76b2dc230ce42351171e52938b5a3cd88ddb1a7b"
                }
            ],
            "sha": "7769fce643648b7eb13389a1d59b4b9fd67c4bf9",
            "url": "https://api.github.com/repos/cython/cython/commits/7769fce643648b7eb13389a1d59b4b9fd67c4bf9"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T01:11:35Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:29Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Add tests for all the total_ordering behavior",
                "tree": {
                    "sha": "29023b38f4861e937e614f3659489932354c4e32",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/29023b38f4861e937e614f3659489932354c4e32"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOmFjOTJjZDNjNDZjNmU0MzMzZjdkNGMzMGE0ZTY1ZWZiYTFkZWRlNjY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/7769fce643648b7eb13389a1d59b4b9fd67c4bf9",
                    "sha": "7769fce643648b7eb13389a1d59b4b9fd67c4bf9",
                    "url": "https://api.github.com/repos/cython/cython/commits/7769fce643648b7eb13389a1d59b4b9fd67c4bf9"
                }
            ],
            "sha": "ac92cd3c46c6e4333f7d4c30a4e65efba1dede66",
            "url": "https://api.github.com/repos/cython/cython/commits/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b2074315f7930cfcb684c05c9ea1d81f3692ff1d/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T04:46:48Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:30Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Add in total ordering logic",
                "tree": {
                    "sha": "95564e66ffef18cbcb678a8fbdef82609dea2d40",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/95564e66ffef18cbcb678a8fbdef82609dea2d40"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b2074315f7930cfcb684c05c9ea1d81f3692ff1d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/b2074315f7930cfcb684c05c9ea1d81f3692ff1d",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOmIyMDc0MzE1Zjc5MzBjZmNiNjg0YzA1YzllYTFkODFmMzY5MmZmMWQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66",
                    "sha": "ac92cd3c46c6e4333f7d4c30a4e65efba1dede66",
                    "url": "https://api.github.com/repos/cython/cython/commits/ac92cd3c46c6e4333f7d4c30a4e65efba1dede66"
                }
            ],
            "sha": "b2074315f7930cfcb684c05c9ea1d81f3692ff1d",
            "url": "https://api.github.com/repos/cython/cython/commits/b2074315f7930cfcb684c05c9ea1d81f3692ff1d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/75b18704160d0b03f5b7dfdf7be19b3bed632e5d/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T05:32:24Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:30Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Fix incorrect order for this.",
                "tree": {
                    "sha": "f0b73df9a74fc5a6d7d0cc6f87a7deef2ec67b58",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f0b73df9a74fc5a6d7d0cc6f87a7deef2ec67b58"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/75b18704160d0b03f5b7dfdf7be19b3bed632e5d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/75b18704160d0b03f5b7dfdf7be19b3bed632e5d",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjc1YjE4NzA0MTYwZDBiMDNmNWI3ZGZkZjdiZTE5YjNiZWQ2MzJlNWQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b2074315f7930cfcb684c05c9ea1d81f3692ff1d",
                    "sha": "b2074315f7930cfcb684c05c9ea1d81f3692ff1d",
                    "url": "https://api.github.com/repos/cython/cython/commits/b2074315f7930cfcb684c05c9ea1d81f3692ff1d"
                }
            ],
            "sha": "75b18704160d0b03f5b7dfdf7be19b3bed632e5d",
            "url": "https://api.github.com/repos/cython/cython/commits/75b18704160d0b03f5b7dfdf7be19b3bed632e5d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a155a76a69934fe3c0c32fc923cd60c1b47ee679/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T05:51:48Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:30Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Allow use of the __ne__ method instead of __eq__",
                "tree": {
                    "sha": "de608072e8bbb88965d9676d9254697c27edac2a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/de608072e8bbb88965d9676d9254697c27edac2a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a155a76a69934fe3c0c32fc923cd60c1b47ee679",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/a155a76a69934fe3c0c32fc923cd60c1b47ee679",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOmExNTVhNzZhNjk5MzRmZTNjMGMzMmZjOTIzY2Q2MGMxYjQ3ZWU2Nzk=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/75b18704160d0b03f5b7dfdf7be19b3bed632e5d",
                    "sha": "75b18704160d0b03f5b7dfdf7be19b3bed632e5d",
                    "url": "https://api.github.com/repos/cython/cython/commits/75b18704160d0b03f5b7dfdf7be19b3bed632e5d"
                }
            ],
            "sha": "a155a76a69934fe3c0c32fc923cd60c1b47ee679",
            "url": "https://api.github.com/repos/cython/cython/commits/a155a76a69934fe3c0c32fc923cd60c1b47ee679"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/922b1e79dd9f97e551d36abb2138f35556bc733a/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T07:03:17Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:30Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Handle when total_ordering directive is specified for classes without comparison methods",
                "tree": {
                    "sha": "d0a0457868f7cb3cf04ee32efe2e58981ed9105d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d0a0457868f7cb3cf04ee32efe2e58981ed9105d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/922b1e79dd9f97e551d36abb2138f35556bc733a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/922b1e79dd9f97e551d36abb2138f35556bc733a",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjkyMmIxZTc5ZGQ5Zjk3ZTU1MWQzNmFiYjIxMzhmMzU1NTZiYzczM2E=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a155a76a69934fe3c0c32fc923cd60c1b47ee679",
                    "sha": "a155a76a69934fe3c0c32fc923cd60c1b47ee679",
                    "url": "https://api.github.com/repos/cython/cython/commits/a155a76a69934fe3c0c32fc923cd60c1b47ee679"
                }
            ],
            "sha": "922b1e79dd9f97e551d36abb2138f35556bc733a",
            "url": "https://api.github.com/repos/cython/cython/commits/922b1e79dd9f97e551d36abb2138f35556bc733a"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/edc1c0ad0e958483025aa856c3c5eb36104ef7cf/comments",
            "commit": {
                "author": {
                    "date": "2020-05-21T07:04:56Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-21T07:05:30Z",
                    "email": "spencerb21@live.com",
                    "name": "TeamSpen210"
                },
                "message": "Fix some issues with the tests",
                "tree": {
                    "sha": "b5361480aebf33f0bc2ae6a0e73c498ebba27fff",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/b5361480aebf33f0bc2ae6a0e73c498ebba27fff"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "html_url": "https://github.com/cython/cython/commit/edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOmVkYzFjMGFkMGU5NTg0ODMwMjVhYTg1NmMzYzVlYjM2MTA0ZWY3Y2Y=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/922b1e79dd9f97e551d36abb2138f35556bc733a",
                    "sha": "922b1e79dd9f97e551d36abb2138f35556bc733a",
                    "url": "https://api.github.com/repos/cython/cython/commits/922b1e79dd9f97e551d36abb2138f35556bc733a"
                }
            ],
            "sha": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
            "url": "https://api.github.com/repos/cython/cython/commits/edc1c0ad0e958483025aa856c3c5eb36104ef7cf"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5ef72db4b15a24e3f93700fa1b61ab66020e4518/comments",
            "commit": {
                "author": {
                    "date": "2020-05-22T02:36:23Z",
                    "email": "TeamSpen210@users.noreply.github.com",
                    "name": "Spencer Brown"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-22T02:36:23Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "909d3ac78924309c2df5f85f2b862accfa0b636a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/909d3ac78924309c2df5f85f2b862accfa0b636a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5ef72db4b15a24e3f93700fa1b61ab66020e4518",
                "verification": {
                    "payload": "tree 909d3ac78924309c2df5f85f2b862accfa0b636a\nparent edc1c0ad0e958483025aa856c3c5eb36104ef7cf\nauthor Spencer Brown <TeamSpen210@users.noreply.github.com> 1590114983 +1000\ncommitter GitHub <noreply@github.com> 1590114983 +1000\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexzqoCRBK7hj4Ov3rIwAAdHIIADAM9R0+xwF6mdV4g+CRKb1J\nJPu+3p9nMetYoaB5CIhk/HQRtyXVtQ9vfdjESlck1t1NNwJBL3tFp2rhoGRJ6049\nkeb5f1Bp6eS73izLbe+wv+FGKvBTGhOzvXIIQR27bhs2ekBnUKhdlc0MVm1NeYty\n5nW3PcprYTgLFk1uQoyNKsYUtDi5Qvgz2OUGsDbdTESmDyJRtEAuc3FVzD/P4sx8\nh6yrtJJ3Hdwh6oSL55UfxDebvLeEC2th3+qzuXDep7nr8BAVhpOsn8jNOa/rYlL7\n9KdpEmj3BPYktmpiDqIRdnu6yPtYe+9Bjfk/VSIF/goX+U3w/GMTO+cLuobSQo4=\n=tegy\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjVlZjcyZGI0YjE1YTI0ZTNmOTM3MDBmYTFiNjFhYjY2MDIwZTQ1MTg=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
                    "sha": "edc1c0ad0e958483025aa856c3c5eb36104ef7cf",
                    "url": "https://api.github.com/repos/cython/cython/commits/edc1c0ad0e958483025aa856c3c5eb36104ef7cf"
                }
            ],
            "sha": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
            "url": "https://api.github.com/repos/cython/cython/commits/5ef72db4b15a24e3f93700fa1b61ab66020e4518"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/41c0222071dfc382ec07e8d595b3562c32d61628/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T16:10:40Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T16:10:40Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review",
                "tree": {
                    "sha": "4cace28d22f4a186629074e255a03f18165ca0bb",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4cace28d22f4a186629074e255a03f18165ca0bb"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/41c0222071dfc382ec07e8d595b3562c32d61628",
                "verification": {
                    "payload": "tree 4cace28d22f4a186629074e255a03f18165ca0bb\nparent 5ef72db4b15a24e3f93700fa1b61ab66020e4518\nauthor scoder <stefan_ml@behnel.de> 1621959040 +0200\ncommitter GitHub <noreply@github.com> 1621959040 +0200\n\nApply suggestions from code review",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrSGACRBK7hj4Ov3rIwAAjyEIAEYet59gUrqbeVMfvmQtp4Wm\nsXnGdzQ32Ru80O8Gn8tqzf+uzLG1P43VOePaJ1sOdny+KIFje76d9C3MbVAWyrmV\n3brdOLi2vKspLf62o+rMzaaRI7iLR97jnbZSnUxmepJgnL5/YcZUSvsh/2/KnWGw\nt4avBvTcvWl6u44XgeZT31JBqK3Xbg6vBk09TjMHz81ZoJ6CcCM13k9q1a1h8S7L\nLAXPHCDWecruOU+sBWytJqAjPOYogyKTtIluxDI2y8nJC2NyjrQTDSQEDt4GH0eI\nV27pbCEQTo3tWt5tQXHu/e0gb65I7ES6+/ET6+ecOrhWjY9m3ilqWVVLtSHlOko=\n=QhsS\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/41c0222071dfc382ec07e8d595b3562c32d61628",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjQxYzAyMjIwNzFkZmMzODJlYzA3ZThkNTk1YjM1NjJjMzJkNjE2Mjg=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5ef72db4b15a24e3f93700fa1b61ab66020e4518",
                    "sha": "5ef72db4b15a24e3f93700fa1b61ab66020e4518",
                    "url": "https://api.github.com/repos/cython/cython/commits/5ef72db4b15a24e3f93700fa1b61ab66020e4518"
                }
            ],
            "sha": "41c0222071dfc382ec07e8d595b3562c32d61628",
            "url": "https://api.github.com/repos/cython/cython/commits/41c0222071dfc382ec07e8d595b3562c32d61628"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/81d281a524fa3b5d0786a3e5e32c1889fd8246b6/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T16:12:42Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T16:12:42Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into total_ordering",
                "tree": {
                    "sha": "3f7d979b21dd07f4197ad151b0d92430b2f57ad3",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3f7d979b21dd07f4197ad151b0d92430b2f57ad3"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/81d281a524fa3b5d0786a3e5e32c1889fd8246b6",
                "verification": {
                    "payload": "tree 3f7d979b21dd07f4197ad151b0d92430b2f57ad3\nparent 41c0222071dfc382ec07e8d595b3562c32d61628\nparent 28c35f432f73b0b710cc5f6a823e11bca53265b0\nauthor scoder <stefan_ml@behnel.de> 1621959162 +0200\ncommitter GitHub <noreply@github.com> 1621959162 +0200\n\nMerge branch 'master' into total_ordering",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrSH7CRBK7hj4Ov3rIwAAtCUIAJwOFvPBk+3sHEU5r95b2Psc\nPWB2ic1AbqNt3CA9RBtkkqW+vT6XOgu9oJ7VEoJIrc2MqH4J1U1u9S95LKAhdazc\n2xGU6ftK2UzzSpHO8NUWNmQA8GTJv4KaIbD53KYO3wTjnNB/GGzuJDo42UkDbCLe\nltigJcUqbnb8VcB2HHNnVOosl56eyRBWEVPPwBRniL38lXV1kLaL42T/dYmhUmRL\nOplhJFveksgMMN3nkOPtqbQltEtjiQe3jiXTV7BMtlUWzbRLBxGeCVmSJ0fUcY0z\n7ofDEFgj7P24Z/AGuOL6pizytMBtn3SL/JAvk2KPcHkrM8DthNdO7RbsEc05sg0=\n=EnM+\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/81d281a524fa3b5d0786a3e5e32c1889fd8246b6",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjgxZDI4MWE1MjRmYTNiNWQwNzg2YTNlNWUzMmMxODg5ZmQ4MjQ2YjY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/41c0222071dfc382ec07e8d595b3562c32d61628",
                    "sha": "41c0222071dfc382ec07e8d595b3562c32d61628",
                    "url": "https://api.github.com/repos/cython/cython/commits/41c0222071dfc382ec07e8d595b3562c32d61628"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/28c35f432f73b0b710cc5f6a823e11bca53265b0",
                    "sha": "28c35f432f73b0b710cc5f6a823e11bca53265b0",
                    "url": "https://api.github.com/repos/cython/cython/commits/28c35f432f73b0b710cc5f6a823e11bca53265b0"
                }
            ],
            "sha": "81d281a524fa3b5d0786a3e5e32c1889fd8246b6",
            "url": "https://api.github.com/repos/cython/cython/commits/81d281a524fa3b5d0786a3e5e32c1889fd8246b6"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/520e1b2d5df312e4de4199c071d015c5cc2c79bb/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T16:15:15Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T16:15:15Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix edit error.",
                "tree": {
                    "sha": "d1f7897f90db0348f6d542985061491ac4646e37",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d1f7897f90db0348f6d542985061491ac4646e37"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/520e1b2d5df312e4de4199c071d015c5cc2c79bb",
                "verification": {
                    "payload": "tree d1f7897f90db0348f6d542985061491ac4646e37\nparent 81d281a524fa3b5d0786a3e5e32c1889fd8246b6\nauthor scoder <stefan_ml@behnel.de> 1621959315 +0200\ncommitter GitHub <noreply@github.com> 1621959315 +0200\n\nFix edit error.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrSKTCRBK7hj4Ov3rIwAAIWoIAJdMY6d+CBCbMiRHhE/y7d6y\nW1Kj+G0TEC7lwxFxtuRfLffVhx+LA12MAQPmsI80kQzK5gX7OIYm2VUHSy3ykjO0\nUym/sxJ80aJcnohjC17K3LsTpD89IfuHYK159lotHSgD2zOgUk+Oax/NuHvxTLXm\nPE+gfA2h8P6K0ZZYtYcfqBfP2jMqj8SC5LxBTXVHXxKZiR+4V4UvGkkxKbYApIYR\nFd3Kq3o4232Pq2UvEK5IRKdpWOwxSo2s4tehXB/g2xDdpyy2tP63bp2QI2fSpivS\nqF58wa0rbSK1wrpkBwQKKbB3gfVr7Tr7IHYXxWlmZB9IRU3Hlhte6NSveLF+Urs=\n=W54z\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/520e1b2d5df312e4de4199c071d015c5cc2c79bb",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjUyMGUxYjJkNWRmMzEyZTRkZTQxOTljMDcxZDAxNWM1Y2MyYzc5YmI=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/81d281a524fa3b5d0786a3e5e32c1889fd8246b6",
                    "sha": "81d281a524fa3b5d0786a3e5e32c1889fd8246b6",
                    "url": "https://api.github.com/repos/cython/cython/commits/81d281a524fa3b5d0786a3e5e32c1889fd8246b6"
                }
            ],
            "sha": "520e1b2d5df312e4de4199c071d015c5cc2c79bb",
            "url": "https://api.github.com/repos/cython/cython/commits/520e1b2d5df312e4de4199c071d015c5cc2c79bb"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/39c7626d5b758cd50484101686b2f551ffd22d17/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T16:19:27Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T16:19:27Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix edit error.",
                "tree": {
                    "sha": "e77fe9fc1aff858d8fa25a7b7cfae0519af3d3e7",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e77fe9fc1aff858d8fa25a7b7cfae0519af3d3e7"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/39c7626d5b758cd50484101686b2f551ffd22d17",
                "verification": {
                    "payload": "tree e77fe9fc1aff858d8fa25a7b7cfae0519af3d3e7\nparent 520e1b2d5df312e4de4199c071d015c5cc2c79bb\nauthor scoder <stefan_ml@behnel.de> 1621959567 +0200\ncommitter GitHub <noreply@github.com> 1621959567 +0200\n\nFix edit error.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrSOPCRBK7hj4Ov3rIwAA5l8IADk4PVyhr1pAhCf+VWW2rDz6\n0eG+OwUm3RHH4VgreC1IqExXfa9lvLorXoC2SJD+3WU+yHLEhPpTi01HA2Z2Ae2Q\nttj6ye1s3L3ED8CfXp0gInMe4lh9/KprgSoH1kgE4RTd/QQaDuoAEWvZOpqrCYkv\n/gpyPKcmD5lwRvlVa02dA936piRYj03sq8UvFc3Wtwl102qXyHeFTUtMUnrGrTZe\nf33qnhi7nUEdyohIOF32BUvMSb5dvyPSWK6MFy1x9DG2DdLhayM336cCgamya4rB\npmzW5+zZtPNbQnEIg93yQ8e/W+lDNlJ7YQ/qN/CWw1PE37NO3KQ2NBwS3iuY0yQ=\n=Av2B\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/39c7626d5b758cd50484101686b2f551ffd22d17",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjM5Yzc2MjZkNWI3NThjZDUwNDg0MTAxNjg2YjJmNTUxZmZkMjJkMTc=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/520e1b2d5df312e4de4199c071d015c5cc2c79bb",
                    "sha": "520e1b2d5df312e4de4199c071d015c5cc2c79bb",
                    "url": "https://api.github.com/repos/cython/cython/commits/520e1b2d5df312e4de4199c071d015c5cc2c79bb"
                }
            ],
            "sha": "39c7626d5b758cd50484101686b2f551ffd22d17",
            "url": "https://api.github.com/repos/cython/cython/commits/39c7626d5b758cd50484101686b2f551ffd22d17"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/912a0fcb0aff9f821ddd9ad53e9b015dfa4f77e2/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T16:27:32Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T16:27:32Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix style issues.",
                "tree": {
                    "sha": "ba7d2a151e39ffb8a90bb3cd0fda92ca53cdaff8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ba7d2a151e39ffb8a90bb3cd0fda92ca53cdaff8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/912a0fcb0aff9f821ddd9ad53e9b015dfa4f77e2",
                "verification": {
                    "payload": "tree ba7d2a151e39ffb8a90bb3cd0fda92ca53cdaff8\nparent 39c7626d5b758cd50484101686b2f551ffd22d17\nauthor scoder <stefan_ml@behnel.de> 1621960052 +0200\ncommitter GitHub <noreply@github.com> 1621960052 +0200\n\nFix style issues.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrSV0CRBK7hj4Ov3rIwAA7aQIAKwKPI18paza9FJBMlKVSvh2\nC/UlCmyri+5eiVw2dsSnD3GJ2S/4U1/iXJZx1OzkjazhfEmiG9AIMLKD6AskCc9q\nZd7n27cWJjdGNmHN/vLuk0mfBlVio2juYBlvzXXAKtAWtkkN2bEkZ8MsCKfafg2A\nt1uvIg0++Yt8qJVW53cufiYpiB+odwgtxMky2OUjOaH16G7CUU/G1GdhT7DcP4sa\nDFaagiugPT40nrP3G7UWNC7QHPfENJ7bE1jQIivxL1e3ItKb0dKi1QEw1/tSHfyZ\nGIHAH4GKYETxMmZfjufoYUSEl8d1CHwyuEpe9HfPDd0/+AChfC9YD7Q6AgA/6Gs=\n=pQ3T\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/912a0fcb0aff9f821ddd9ad53e9b015dfa4f77e2",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjkxMmEwZmNiMGFmZjlmODIxZGRkOWFkNTNlOWIwMTVkZmE0Zjc3ZTI=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/39c7626d5b758cd50484101686b2f551ffd22d17",
                    "sha": "39c7626d5b758cd50484101686b2f551ffd22d17",
                    "url": "https://api.github.com/repos/cython/cython/commits/39c7626d5b758cd50484101686b2f551ffd22d17"
                }
            ],
            "sha": "912a0fcb0aff9f821ddd9ad53e9b015dfa4f77e2",
            "url": "https://api.github.com/repos/cython/cython/commits/912a0fcb0aff9f821ddd9ad53e9b015dfa4f77e2"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6b06dd4e2089cb071944efee45b84dc71f41ee90/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T16:35:06Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T16:35:06Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Revert changing warnings to errors. It's ok if \"__eq__\" is not defined, in that case, we fallback to object identity.",
                "tree": {
                    "sha": "792aa86292e5096fff57cdb27f03ee1d3bc5a94c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/792aa86292e5096fff57cdb27f03ee1d3bc5a94c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6b06dd4e2089cb071944efee45b84dc71f41ee90",
                "verification": {
                    "payload": "tree 792aa86292e5096fff57cdb27f03ee1d3bc5a94c\nparent 912a0fcb0aff9f821ddd9ad53e9b015dfa4f77e2\nauthor scoder <stefan_ml@behnel.de> 1621960506 +0200\ncommitter GitHub <noreply@github.com> 1621960506 +0200\n\nRevert changing warnings to errors. It's ok if \"__eq__\" is not defined, in that case, we fallback to object identity.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrSc6CRBK7hj4Ov3rIwAAAfoIAGbHP4Kh9jGm43QKmezkg/EU\np46qTx6Bpx188f/XvE1GkwTcAeUIxtSJVYdN2+9/rrcMvBqtdyj5UFM0QymjYaCO\nTWeAmv9TtPF1aPHSc61XhWib89Me5mjQDld1/Pbgfj73aOMOj7NLxrgOFwTxz5VN\nMAcO9mR1hM4COBOH4Ti30uE5k0BR+z88NofyphIFCQdxHZEcjdfON5pZxFeoHKEz\nXsO2iY/dhSTaq8CX73Lbns1/426GDdw+iL8dM5bTbsHPVdyRnOWncRtUTQOsf3ZO\nLoA31P20hlRs2rOsdWtNZLuBez3BUBiPxLq3/oGS38dk/JXJcHcuQWZR3eDtOXU=\n=xBm4\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/6b06dd4e2089cb071944efee45b84dc71f41ee90",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjZiMDZkZDRlMjA4OWNiMDcxOTQ0ZWZlZTQ1Yjg0ZGM3MWY0MWVlOTA=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/912a0fcb0aff9f821ddd9ad53e9b015dfa4f77e2",
                    "sha": "912a0fcb0aff9f821ddd9ad53e9b015dfa4f77e2",
                    "url": "https://api.github.com/repos/cython/cython/commits/912a0fcb0aff9f821ddd9ad53e9b015dfa4f77e2"
                }
            ],
            "sha": "6b06dd4e2089cb071944efee45b84dc71f41ee90",
            "url": "https://api.github.com/repos/cython/cython/commits/6b06dd4e2089cb071944efee45b84dc71f41ee90"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5cea5f716a0b06d3ef3133c6f4d724d0a01d466b/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T20:48:31Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T20:48:31Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix a comment and a reference leak for `Py_NotImplemented`.",
                "tree": {
                    "sha": "44a1c82f95abd9a6d31d2735810c391ec8bd3844",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/44a1c82f95abd9a6d31d2735810c391ec8bd3844"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5cea5f716a0b06d3ef3133c6f4d724d0a01d466b",
                "verification": {
                    "payload": "tree 44a1c82f95abd9a6d31d2735810c391ec8bd3844\nparent 6b06dd4e2089cb071944efee45b84dc71f41ee90\nauthor scoder <stefan_ml@behnel.de> 1621975711 +0200\ncommitter GitHub <noreply@github.com> 1621975711 +0200\n\nFix a comment and a reference leak for `Py_NotImplemented`.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrWKfCRBK7hj4Ov3rIwAAEyYIABBLpAdm2ezJyDWbTK1wITrx\nr8rCy9bYID/1bAtm9qnIebNX0Atenze/1+bfKN+Y/gh1/IjYxl6MhHp+bWZv1hbl\neOzHQyiyewmBidqHrGhFFuDuWpFyzJQ2Mum71I9S0y9OUFflJ9yQ3JNiDow1PioE\nMLng3JSEAGh+ZItduCasjIG4+CkVoiC0bQanlLfkhiwWZScefCiE1LFJ/LmAHscR\ngUIPd0nDi1SUXHp8qC1F2YI9y4Abw8nyGfRjIq55jBbEsmL7bdBJCwlNNHYE32+7\npS/7KtLTFBPfq5ykIIOFsH1T+vW5A2yM9pd97Ga9nn2wpBVTRC/Wl7k45/KxyMA=\n=8zt7\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/5cea5f716a0b06d3ef3133c6f4d724d0a01d466b",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjVjZWE1ZjcxNmEwYjA2ZDNlZjMxMzNjNmY0ZDcyNGQwYTAxZDQ2NmI=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6b06dd4e2089cb071944efee45b84dc71f41ee90",
                    "sha": "6b06dd4e2089cb071944efee45b84dc71f41ee90",
                    "url": "https://api.github.com/repos/cython/cython/commits/6b06dd4e2089cb071944efee45b84dc71f41ee90"
                }
            ],
            "sha": "5cea5f716a0b06d3ef3133c6f4d724d0a01d466b",
            "url": "https://api.github.com/repos/cython/cython/commits/5cea5f716a0b06d3ef3133c6f4d724d0a01d466b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ef0f280d0078b38c3c80bb09b112d4034e2cf508/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T21:06:59Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T21:06:59Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Revert the '__ne__' change.",
                "tree": {
                    "sha": "8583cc51beb6597640b5ed9a8c96f8f3adf16499",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8583cc51beb6597640b5ed9a8c96f8f3adf16499"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ef0f280d0078b38c3c80bb09b112d4034e2cf508",
                "verification": {
                    "payload": "tree 8583cc51beb6597640b5ed9a8c96f8f3adf16499\nparent 5cea5f716a0b06d3ef3133c6f4d724d0a01d466b\nauthor scoder <stefan_ml@behnel.de> 1621976819 +0200\ncommitter GitHub <noreply@github.com> 1621976819 +0200\n\nRevert the '__ne__' change.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrWbzCRBK7hj4Ov3rIwAAEiAIAJIgpHH9soCoOSgH2twG0RzQ\npKGKkUIZpcV/ZGau4T8F4gfrGrXfs41b3J1m7OhjxzgH6bDmaqIZqex92VBOnnrV\nb0qwJtZptUuBJM7atyhuNX9UlwMGBXPY7ym0jVWGX3HA3anCskUrKDG1mmC4lPfm\nN82q1ET+lM2WVIU/6S9SPpkxkaq9hvXdGf3Gr7bW0uTO10li8OkDWgMJm0TmWfyc\n/AYR36dhVigA97ncROkuSpnAW9HYngPcQRln4Jyi5bL0ftP/LbUdPdrbWva+0FM5\nbzxzlNVGz2MC11a5f9ICeUy8FIS6AzjUssv81P7n5lF2agcixwkMh3rTsDIX/7o=\n=V01n\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/ef0f280d0078b38c3c80bb09b112d4034e2cf508",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOmVmMGYyODBkMDA3OGIzOGMzYzgwYmIwOWIxMTJkNDAzNGUyY2Y1MDg=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5cea5f716a0b06d3ef3133c6f4d724d0a01d466b",
                    "sha": "5cea5f716a0b06d3ef3133c6f4d724d0a01d466b",
                    "url": "https://api.github.com/repos/cython/cython/commits/5cea5f716a0b06d3ef3133c6f4d724d0a01d466b"
                }
            ],
            "sha": "ef0f280d0078b38c3c80bb09b112d4034e2cf508",
            "url": "https://api.github.com/repos/cython/cython/commits/ef0f280d0078b38c3c80bb09b112d4034e2cf508"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/81c11fe4be2fb2dc69a55ad0733b14929e99ce14/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T21:16:42Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T21:16:42Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix line numbers in error test.",
                "tree": {
                    "sha": "4541fff188a7c1c50e900b91a62dff38a991b63f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4541fff188a7c1c50e900b91a62dff38a991b63f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/81c11fe4be2fb2dc69a55ad0733b14929e99ce14",
                "verification": {
                    "payload": "tree 4541fff188a7c1c50e900b91a62dff38a991b63f\nparent ef0f280d0078b38c3c80bb09b112d4034e2cf508\nauthor scoder <stefan_ml@behnel.de> 1621977402 +0200\ncommitter GitHub <noreply@github.com> 1621977402 +0200\n\nFix line numbers in error test.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrWk6CRBK7hj4Ov3rIwAAXcgIAEIXwALaN7WkHsWFEdV+Q2Zo\nvZimqQSprV/E0709SdhugqjU8sw5LZdDWu1cSo/3Fu4CRBqFzPg2UQieEE9szQn1\n3+ZCZmv1nxfDSBNsPBSPqOHLRi+c678rbAv11YcWzDZBOn035Aw4Dxx6KvlYG7rz\nuH4SFYDstXdxjS2D9VZ1K7JDwE/H8LNfRmfcFyjD5cAw2IhJmAawU1UB1xFQe10R\n9qHMB1yZKeB/F/EfP3v4ZWjphb1lMbqLYJBFkyDTjKQtbZEXdc6sovEKd4/bQS+i\nqgGgoikHPy+Vh9Sj6llblQ9+HTF64350Q5OSl39DwRgz4ZyXNuse0ETEu6idtSQ=\n=FW6c\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/81c11fe4be2fb2dc69a55ad0733b14929e99ce14",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjgxYzExZmU0YmUyZmIyZGM2OWE1NWFkMDczM2IxNDkyOWU5OWNlMTQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ef0f280d0078b38c3c80bb09b112d4034e2cf508",
                    "sha": "ef0f280d0078b38c3c80bb09b112d4034e2cf508",
                    "url": "https://api.github.com/repos/cython/cython/commits/ef0f280d0078b38c3c80bb09b112d4034e2cf508"
                }
            ],
            "sha": "81c11fe4be2fb2dc69a55ad0733b14929e99ce14",
            "url": "https://api.github.com/repos/cython/cython/commits/81c11fe4be2fb2dc69a55ad0733b14929e99ce14"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/d3dad199da1f8eeb16b7c11cd7b949386299f4bb/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T21:31:06Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T21:31:06Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix previous typo in expected warnings.",
                "tree": {
                    "sha": "78e8a7a1a7b9faa363dba8165991aa31e6a35370",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/78e8a7a1a7b9faa363dba8165991aa31e6a35370"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/d3dad199da1f8eeb16b7c11cd7b949386299f4bb",
                "verification": {
                    "payload": "tree 78e8a7a1a7b9faa363dba8165991aa31e6a35370\nparent 81c11fe4be2fb2dc69a55ad0733b14929e99ce14\nauthor scoder <stefan_ml@behnel.de> 1621978266 +0200\ncommitter GitHub <noreply@github.com> 1621978266 +0200\n\nFix previous typo in expected warnings.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrWyaCRBK7hj4Ov3rIwAAdUcIADSSzl2J0r5jWuXYK669YUAm\nr+245erdJ1iv8vGiyoFDX4956rLKTi2RlL1T3u4NMIogE3w+++/e5VYNpHZOnX3F\n7C2Zk9nI2ipGrd/3y2BQGX1kpeHjCEHnF0UG+rWoZ4CSrOjIrCp97dOifH9eDVIm\nTqjyoi3pXdpldWSRPT1EZICuPLNyADb5oCVTt0OYREU5o2HfhJEr67pl0nLrmlXW\nv04GAJ92IChdmYJndpy1NabOCeUKP7CGZMEwCzUaxyToMKzkF18YyiaZXn8iHunb\nQkLY+5OyX/gXLja2vNWT6VZCjODloFkHIpbPp2k6YPGutxqUSfpK8z6DiLm/Be4=\n=ZaG2\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/d3dad199da1f8eeb16b7c11cd7b949386299f4bb",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOmQzZGFkMTk5ZGExZjhlZWIxNmI3YzExY2Q3Yjk0OTM4NjI5OWY0YmI=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/81c11fe4be2fb2dc69a55ad0733b14929e99ce14",
                    "sha": "81c11fe4be2fb2dc69a55ad0733b14929e99ce14",
                    "url": "https://api.github.com/repos/cython/cython/commits/81c11fe4be2fb2dc69a55ad0733b14929e99ce14"
                }
            ],
            "sha": "d3dad199da1f8eeb16b7c11cd7b949386299f4bb",
            "url": "https://api.github.com/repos/cython/cython/commits/d3dad199da1f8eeb16b7c11cd7b949386299f4bb"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a4c8dedbbf1d5bd0e26f037b956f56ea04a9c88b/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T21:44:20Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T21:44:20Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix line number in error test.",
                "tree": {
                    "sha": "6ff67a295c14bf312330cc8bce9668847243e35f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/6ff67a295c14bf312330cc8bce9668847243e35f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a4c8dedbbf1d5bd0e26f037b956f56ea04a9c88b",
                "verification": {
                    "payload": "tree 6ff67a295c14bf312330cc8bce9668847243e35f\nparent d3dad199da1f8eeb16b7c11cd7b949386299f4bb\nauthor scoder <stefan_ml@behnel.de> 1621979060 +0200\ncommitter GitHub <noreply@github.com> 1621979060 +0200\n\nFix line number in error test.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrW+1CRBK7hj4Ov3rIwAAnE8IAHfJ0D+n2iLPyLFLw8HrEOB7\nrBPpmpxs16tv2AhOD57mtbGSDI+Olq7UfD5hXqWnfohwF2z3lf8nIX3syVeBhnB5\nqbRlrFtgZEmNf2db7cJKWg5t9mvSLVHJL0+LPyfQYrtqiK1tS5Y9i8nT4vue1NYE\nTpB9Jtwzx9lpGlBnQLBpIgf3J2j4rijoHacA3mynANANsWvpGf9ZuozWomcZZxlt\nRzFH6/5HH1Ve5iXo9DozVGaLLhWAAvq1rhaJ/Zuqr+rWACH8gHgqCzFJ9+Sv+Z8u\nHbU9SWvfHTle4QiOTljRsdt4ovC96U9KMMvmvE4I48DX86X4DdQ6lpP/+l19iQI=\n=cCet\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/a4c8dedbbf1d5bd0e26f037b956f56ea04a9c88b",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOmE0YzhkZWRiYmYxZDViZDBlMjZmMDM3Yjk1NmY1NmVhMDRhOWM4OGI=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d3dad199da1f8eeb16b7c11cd7b949386299f4bb",
                    "sha": "d3dad199da1f8eeb16b7c11cd7b949386299f4bb",
                    "url": "https://api.github.com/repos/cython/cython/commits/d3dad199da1f8eeb16b7c11cd7b949386299f4bb"
                }
            ],
            "sha": "a4c8dedbbf1d5bd0e26f037b956f56ea04a9c88b",
            "url": "https://api.github.com/repos/cython/cython/commits/a4c8dedbbf1d5bd0e26f037b956f56ea04a9c88b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/188303a5ce298c740f7adec0b1fbeeb3dfd4098d/comments",
            "commit": {
                "author": {
                    "date": "2021-05-25T22:10:26Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-25T22:10:26Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Adapt test to different behaviour and error messages in Py2, 3.4/5 and later.",
                "tree": {
                    "sha": "23d290319d405ec147c59c3b84babfa16ab5e412",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/23d290319d405ec147c59c3b84babfa16ab5e412"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/188303a5ce298c740f7adec0b1fbeeb3dfd4098d",
                "verification": {
                    "payload": "tree 23d290319d405ec147c59c3b84babfa16ab5e412\nparent a4c8dedbbf1d5bd0e26f037b956f56ea04a9c88b\nauthor scoder <stefan_ml@behnel.de> 1621980626 +0200\ncommitter GitHub <noreply@github.com> 1621980626 +0200\n\nAdapt test to different behaviour and error messages in Py2, 3.4/5 and later.",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrXXSCRBK7hj4Ov3rIwAAs+IIAK6lRpYA97py/XVi22iAkoWN\n+mVSwGXgKqTUCEh5qEaPfSuCx22pyZV+faeUl4WwvJTXSPgrELlgh/LhMSDa54bj\nbjQvUscH7KZpnnL6oZS1YpvSXPuTSsNRb7KquY6cPIZaB7QsXDQtme0jhaDnMBG4\nTJjaT7BZG5THmuohhFtdbNmMXXRG/wFf9MPbArSl/KklYIqb+kDgjdRV854hG8md\nWHV9hR20L3K7oUPgNrn8dzmnabreHpoGVwBjFGsjnxBo1tZ5kf+QGeqYEQQqs+Bt\nNtaSUEyU4bMkJ/61wf/dADNCmUZ1InLlkfEv/6lItLppcJLjG5oTcxcgAUsnX4M=\n=cBzo\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/188303a5ce298c740f7adec0b1fbeeb3dfd4098d",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjE4ODMwM2E1Y2UyOThjNzQwZjdhZGVjMGIxZmJlZWIzZGZkNDA5OGQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a4c8dedbbf1d5bd0e26f037b956f56ea04a9c88b",
                    "sha": "a4c8dedbbf1d5bd0e26f037b956f56ea04a9c88b",
                    "url": "https://api.github.com/repos/cython/cython/commits/a4c8dedbbf1d5bd0e26f037b956f56ea04a9c88b"
                }
            ],
            "sha": "188303a5ce298c740f7adec0b1fbeeb3dfd4098d",
            "url": "https://api.github.com/repos/cython/cython/commits/188303a5ce298c740f7adec0b1fbeeb3dfd4098d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5a8661a9e1e9c324ed5b26a762da4152cec2efc0/comments",
            "commit": {
                "author": {
                    "date": "2021-05-26T05:51:43Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-05-26T05:51:43Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix test in Py2",
                "tree": {
                    "sha": "786aefddfc8af92f677276124cc98685653207e9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/786aefddfc8af92f677276124cc98685653207e9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
                "verification": {
                    "payload": "tree 786aefddfc8af92f677276124cc98685653207e9\nparent 188303a5ce298c740f7adec0b1fbeeb3dfd4098d\nauthor scoder <stefan_ml@behnel.de> 1622008303 +0200\ncommitter GitHub <noreply@github.com> 1622008303 +0200\n\nFix test in Py2",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgreHvCRBK7hj4Ov3rIwAASD4IAHpVsckwznjd8GFQKrDjO3bz\nXvVWzM7t1ezJ2foRHKVbgHigZpe/YG0RbASPUzKjH05uLZUN+a3gtgrWR3DeQb6L\nVKtWivX01id44GMb+QSZrILpUyjsDGdi44kjeUQPyRJLTPsDBaVB5CyCXr1bl5ab\n0xie+cNe4yic4shrk0fudePXrmQcHynbyjO0tBZKM1GiwtVb9CM5ZCwIPUAXXEeg\n0VP490MPCReie7Z82oUXjRsvJjX1gSk+kDalo6C0ibb9WejaKogsmaZEEkKUL6jF\nDjoTn2R3NQaZGA//ByVchwrDe3vFzNeEzaRPeGE3RoiRiDRuEQXua1dirGN0JXQ=\n=1xQ+\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "node_id": "MDY6Q29tbWl0MTE0MzAyNjAyOjVhODY2MWE5ZTFlOWMzMjRlZDViMjZhNzYyZGE0MTUyY2VjMmVmYzA=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/188303a5ce298c740f7adec0b1fbeeb3dfd4098d",
                    "sha": "188303a5ce298c740f7adec0b1fbeeb3dfd4098d",
                    "url": "https://api.github.com/repos/cython/cython/commits/188303a5ce298c740f7adec0b1fbeeb3dfd4098d"
                }
            ],
            "sha": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
            "url": "https://api.github.com/repos/cython/cython/commits/5a8661a9e1e9c324ed5b26a762da4152cec2efc0"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3626/commits",
    "created_at": "2020-05-21T08:13:22Z",
    "diff_url": "https://github.com/cython/cython/pull/3626.diff",
    "draft": false,
    "head": {
        "label": "TeamSpen210:total_ordering",
        "ref": "total_ordering",
        "repo": {
            "archive_url": "https://api.github.com/repos/TeamSpen210/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/TeamSpen210/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/TeamSpen210/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/TeamSpen210/cython/branches{/branch}",
            "clone_url": "https://github.com/TeamSpen210/cython.git",
            "collaborators_url": "https://api.github.com/repos/TeamSpen210/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/TeamSpen210/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/TeamSpen210/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/TeamSpen210/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/TeamSpen210/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/TeamSpen210/cython/contributors",
            "created_at": "2017-12-14T22:33:08Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/TeamSpen210/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/TeamSpen210/cython/downloads",
            "events_url": "https://api.github.com/repos/TeamSpen210/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/TeamSpen210/cython/forks",
            "full_name": "TeamSpen210/cython",
            "git_commits_url": "https://api.github.com/repos/TeamSpen210/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/TeamSpen210/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/TeamSpen210/cython/git/tags{/sha}",
            "git_url": "git://github.com/TeamSpen210/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/TeamSpen210/cython/hooks",
            "html_url": "https://github.com/TeamSpen210/cython",
            "id": 114302602,
            "issue_comment_url": "https://api.github.com/repos/TeamSpen210/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/TeamSpen210/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/TeamSpen210/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/TeamSpen210/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/TeamSpen210/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/TeamSpen210/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/TeamSpen210/cython/merges",
            "milestones_url": "https://api.github.com/repos/TeamSpen210/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMTQzMDI2MDI=",
            "notifications_url": "https://api.github.com/repos/TeamSpen210/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/TeamSpen210/cython/pulls{/number}",
            "pushed_at": "2021-05-26T05:51:43Z",
            "releases_url": "https://api.github.com/repos/TeamSpen210/cython/releases{/id}",
            "size": 59706,
            "ssh_url": "git@github.com:TeamSpen210/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/TeamSpen210/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/TeamSpen210/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/TeamSpen210/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/TeamSpen210/cython/subscription",
            "svn_url": "https://github.com/TeamSpen210/cython",
            "tags_url": "https://api.github.com/repos/TeamSpen210/cython/tags",
            "teams_url": "https://api.github.com/repos/TeamSpen210/cython/teams",
            "trees_url": "https://api.github.com/repos/TeamSpen210/cython/git/trees{/sha}",
            "updated_at": "2020-05-21T07:08:24Z",
            "url": "https://api.github.com/repos/TeamSpen210/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
            "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
            "followers_url": "https://api.github.com/users/TeamSpen210/followers",
            "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
            "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/TeamSpen210",
            "id": 8453732,
            "login": "TeamSpen210",
            "node_id": "MDQ6VXNlcjg0NTM3MzI=",
            "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
            "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
            "repos_url": "https://api.github.com/users/TeamSpen210/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/TeamSpen210"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3626",
    "id": 421215331,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3626",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425559948,
            "name": "Cython Language Feature",
            "node_id": "MDU6TGFiZWw0MjU1NTk5NDg=",
            "url": "https://api.github.com/repos/cython/cython/labels/Cython%20Language%20Feature"
        },
        {
            "color": "c2e0c6",
            "default": false,
            "description": null,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        }
    ],
    "locked": false,
    "merge_commit_sha": "f902c26b5516d44e6f41deb815cbfc5f4aa7aaf3",
    "merged_at": "2021-05-26T06:46:22Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 385,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\n– New version scheme: 3.x instead of 0.x.\r\n– Change default `language_level` from `2` to `3`.\r\n– Change default for `binding` directive from `False` to `True`.\r\n– Fix some Python compatibility issues (if possible, allowing for breaking changes).\r\n",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 26,
        "state": "open",
        "title": "3.0",
        "updated_at": "2021-05-26T12:17:22Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDIxMjE1MzMx",
    "number": 3626,
    "patch_url": "https://github.com/cython/cython/pull/3626.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3626/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/5a8661a9e1e9c324ed5b26a762da4152cec2efc0",
    "title": "Implement total_ordering",
    "updated_at": "2021-05-26T06:46:22Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3626",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
        "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
        "followers_url": "https://api.github.com/users/TeamSpen210/followers",
        "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
        "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/TeamSpen210",
        "id": 8453732,
        "login": "TeamSpen210",
        "node_id": "MDQ6VXNlcjg0NTM3MzI=",
        "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
        "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
        "repos_url": "https://api.github.com/users/TeamSpen210/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/TeamSpen210"
    }
}