{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/5864/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5864/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/5864"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/5864"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5864/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/5864"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/9223459862eca2ada0035264102fdabaffdeea5c"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1499,
            "forks_count": 1499,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1255,
            "open_issues_count": 1255,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2023-11-26T14:03:03Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 70145,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 8534,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2023-11-26T12:14:09Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 8534,
            "watchers_count": 8534,
            "web_commit_signoff_required": false
        },
        "sha": "bc1f11e77ea92f123d73fd61c63a4b9971d839d2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "I've shown the 4 that are most user-relevant clearly, and hidden most of the rest by default (but documented them if people really want to read them).",
    "closed_at": "2023-11-26T11:09:21Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5864#discussion_r1403776344"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5864"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1403776344"
                }
            },
            "author_association": "MEMBER",
            "body": "I've really tried to make it clear that there's no benefit to users going and manually enabling them - the danger seems to be that people think there's secret optimizations here that they should be able to access.  I suspect there isn't a font size big enough to get this message across but it's worth a try.",
            "commit_id": "9223459862eca2ada0035264102fdabaffdeea5c",
            "created_at": "2023-11-23T22:48:41Z",
            "diff_hunk": "@@ -1123,3 +1123,115 @@ argument to ``cythonize``::\n This will override the default directives as specified in the ``compiler_directives`` dictionary.\n Note that explicit per-file or local directives as explained above take precedence over the\n values passed to ``cythonize``.\n+\n+C macro defines\n+===============\n+\n+Cython has a number of C macros that can be used to control compilation. Typically, these\n+would be set using ``extra_compile_args`` in `setup.py` (for example\n+``extra_compile_args=['-DCYTHON_USE_TYPE_SPECS=1']``), however they can also be set in\n+other ways like using the ``CFLAGS`` environmental variable.\n+\n+These macros are set automatically by Cython to sensible default values unless\n+you chose to explicitly override them, so they are a tool for advanced users and most users\n+can happily ignore them.  Not all combinations of macros are compatible or tested, and\n+some change the default of other macros.  They are list below in rough order from most \n+important to least important:\n+\n+``CYTHON_LIMITED_API``\n+    Turns on Cython's experimental Limited API support, meaning that one compiled binary\n+    can be used across many Python interpreter versions (at the cost of some performance).\n+    At this stage many features do not work in the Limited API.  If you use this macro\n+    you should also set the macro ``Py_LIMITED_API`` to be the version hex for the\n+    minimum Python version you want to support (>=3.7).  ``0x03070000`` will support\n+    Python 3.7 upwards.\n+\n+``CYTHON_PEP489_MULTI_PHASE_INIT``\n+    Uses multi-phase module initialization as described in PEP489.  This improves\n+    compatibility, especially when running the initial import of the code when it\n+    makes attributes such as ``__file__`` available.  It is therefore on by default\n+    where supported.\n+\n+``CYTHON_USE_MODULE_STATE``\n+    Stores module data on a struct associated with the module object rather than at a\n+    global C level.  The advantage is that it should be possible to import the\n+    same module more than once (e.g. in different sub-interpreters).  At the moment\n+    this is experimental and not all data has been moved.  It also requires that\n+    ``CYTHON_PEP489_MULTI_PHASE_INIT`` is off - this is planned to change in the\n+    future.\n+\n+``CYTHON_USE_TYPE_SPECS``\n+    Defines ``cdef classes`` as `\"heap types\" <https://docs.python.org/3/c-api/typeobj.html#heap-types>`_\n+    rather than \"static types\".  Practically this does not change a lot from a user\n+    point of view, but it is needed to implement Limited API support.\n+    \n+There are a further list of macros which turn off various optimizations or language\n+features.  Under normal circumstance Cython enables these automatically based on the\n+version of Python you are building a module for so do not be tempted to use them\n+to try to enable extra optimizations - supported optimizations are enabled by",
            "html_url": "https://github.com/cython/cython/pull/5864#discussion_r1403776344",
            "id": 1403776344,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5Tq-1Y",
            "original_commit_id": "f70e971e172ee12944d00665b279c86aeb367967",
            "original_line": 1171,
            "original_position": 49,
            "original_start_line": null,
            "path": "docs/src/userguide/source_files_and_compilation.rst",
            "position": null,
            "pull_request_review_id": 1747077010,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5864",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1403776344/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-23T23:16:12Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1403776344",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5864#discussion_r1404574814"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5864"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1404574814"
                }
            },
            "author_association": "MEMBER",
            "body": "> I suspect there isn't a font size big enough\r\n\r\nMaybe putting it in warning block will help...",
            "commit_id": "9223459862eca2ada0035264102fdabaffdeea5c",
            "created_at": "2023-11-24T18:11:22Z",
            "diff_hunk": "@@ -1123,3 +1123,115 @@ argument to ``cythonize``::\n This will override the default directives as specified in the ``compiler_directives`` dictionary.\n Note that explicit per-file or local directives as explained above take precedence over the\n values passed to ``cythonize``.\n+\n+C macro defines\n+===============\n+\n+Cython has a number of C macros that can be used to control compilation. Typically, these\n+would be set using ``extra_compile_args`` in `setup.py` (for example\n+``extra_compile_args=['-DCYTHON_USE_TYPE_SPECS=1']``), however they can also be set in\n+other ways like using the ``CFLAGS`` environmental variable.\n+\n+These macros are set automatically by Cython to sensible default values unless\n+you chose to explicitly override them, so they are a tool for advanced users and most users\n+can happily ignore them.  Not all combinations of macros are compatible or tested, and\n+some change the default of other macros.  They are list below in rough order from most \n+important to least important:\n+\n+``CYTHON_LIMITED_API``\n+    Turns on Cython's experimental Limited API support, meaning that one compiled binary\n+    can be used across many Python interpreter versions (at the cost of some performance).\n+    At this stage many features do not work in the Limited API.  If you use this macro\n+    you should also set the macro ``Py_LIMITED_API`` to be the version hex for the\n+    minimum Python version you want to support (>=3.7).  ``0x03070000`` will support\n+    Python 3.7 upwards.\n+\n+``CYTHON_PEP489_MULTI_PHASE_INIT``\n+    Uses multi-phase module initialization as described in PEP489.  This improves\n+    compatibility, especially when running the initial import of the code when it\n+    makes attributes such as ``__file__`` available.  It is therefore on by default\n+    where supported.\n+\n+``CYTHON_USE_MODULE_STATE``\n+    Stores module data on a struct associated with the module object rather than at a\n+    global C level.  The advantage is that it should be possible to import the\n+    same module more than once (e.g. in different sub-interpreters).  At the moment\n+    this is experimental and not all data has been moved.  It also requires that\n+    ``CYTHON_PEP489_MULTI_PHASE_INIT`` is off - this is planned to change in the\n+    future.\n+\n+``CYTHON_USE_TYPE_SPECS``\n+    Defines ``cdef classes`` as `\"heap types\" <https://docs.python.org/3/c-api/typeobj.html#heap-types>`_\n+    rather than \"static types\".  Practically this does not change a lot from a user\n+    point of view, but it is needed to implement Limited API support.\n+    \n+There are a further list of macros which turn off various optimizations or language\n+features.  Under normal circumstance Cython enables these automatically based on the\n+version of Python you are building a module for so do not be tempted to use them\n+to try to enable extra optimizations - supported optimizations are enabled by",
            "html_url": "https://github.com/cython/cython/pull/5864#discussion_r1404574814",
            "id": 1404574814,
            "in_reply_to_id": 1403776344,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5TuBxe",
            "original_commit_id": "f70e971e172ee12944d00665b279c86aeb367967",
            "original_line": 1171,
            "original_position": 49,
            "original_start_line": null,
            "path": "docs/src/userguide/source_files_and_compilation.rst",
            "position": null,
            "pull_request_review_id": 1748296316,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5864",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1404574814/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-24T18:11:23Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1404574814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/827060?v=4",
                "events_url": "https://api.github.com/users/matusvalo/events{/privacy}",
                "followers_url": "https://api.github.com/users/matusvalo/followers",
                "following_url": "https://api.github.com/users/matusvalo/following{/other_user}",
                "gists_url": "https://api.github.com/users/matusvalo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matusvalo",
                "id": 827060,
                "login": "matusvalo",
                "node_id": "MDQ6VXNlcjgyNzA2MA==",
                "organizations_url": "https://api.github.com/users/matusvalo/orgs",
                "received_events_url": "https://api.github.com/users/matusvalo/received_events",
                "repos_url": "https://api.github.com/users/matusvalo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matusvalo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matusvalo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matusvalo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5864#discussion_r1405375312"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5864"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1405375312"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            Use some C-API macros that increase performance by skipping error checking,\r\n            which may not be safe on all Python implementations (e.g. PyPy).\r\n```",
            "commit_id": "9223459862eca2ada0035264102fdabaffdeea5c",
            "created_at": "2023-11-26T10:53:49Z",
            "diff_hunk": "@@ -1123,3 +1123,119 @@ argument to ``cythonize``::\n This will override the default directives as specified in the ``compiler_directives`` dictionary.\n Note that explicit per-file or local directives as explained above take precedence over the\n values passed to ``cythonize``.\n+\n+C macro defines\n+===============\n+\n+Cython has a number of C macros that can be used to control compilation. Typically, these\n+would be set using ``extra_compile_args`` in `setup.py` (for example\n+``extra_compile_args=['-DCYTHON_USE_TYPE_SPECS=1']``), however they can also be set in\n+other ways like using the ``CFLAGS`` environmental variable.\n+\n+These macros are set automatically by Cython to sensible default values unless\n+you chose to explicitly override them, so they are a tool that most users\n+can happily ignore.  Not all combinations of macros are compatible or tested, and\n+some change the default value of other macros.  They are listed below in rough order from\n+most important to least important:\n+\n+``CYTHON_LIMITED_API``\n+    Turns on Cython's experimental Limited API support, meaning that one compiled module\n+    can be used by many Python interpreter versions (at the cost of some performance).\n+    At this stage many features do not work in the Limited API.  If you use this macro\n+    you should also set the macro ``Py_LIMITED_API`` to be the version hex for the\n+    minimum Python version you want to support (>=3.7).  ``0x03070000`` will support\n+    Python 3.7 upwards.\n+\n+``CYTHON_PEP489_MULTI_PHASE_INIT``\n+    Uses multi-phase module initialization as described in PEP489.  This improves\n+    Python compatibility, especially when running the initial import of the code when it\n+    makes attributes such as ``__file__`` available.  It is therefore on by default\n+    where supported.\n+\n+``CYTHON_USE_MODULE_STATE``\n+    Stores module data on a struct associated with the module object rather than as\n+    C global variables.  The advantage is that it should be possible to import the\n+    same module more than once (e.g. in different sub-interpreters).  At the moment\n+    this is experimental and not all data has been moved.  It also requires that\n+    ``CYTHON_PEP489_MULTI_PHASE_INIT`` is off - we plan to remove this limitation\n+    in the future.\n+\n+``CYTHON_USE_TYPE_SPECS``\n+    Defines ``cdef classes`` as `\"heap types\" <https://docs.python.org/3/c-api/typeobj.html#heap-types>`_\n+    rather than \"static types\".  Practically this does not change a lot from a user\n+    point of view, but it is needed to implement Limited API support.\n+    \n+``CYTHON_EXTERN_C``\n+    Slightly different to the other macros, this controls how ``cdef public``\n+    functions appear to C++ code. See :ref:`CYTHON_EXTERN_C` for full details.\n+    \n+There is a further list of macros which turn off various optimizations or language\n+features.  Under normal circumstance Cython enables these automatically based on the\n+version of Python you are compiling for so there is no need to use them\n+to try to enable extra optimizations - all supported optimizations are enabled by\n+default.  These are mostly relevant if you're tying to get Cython working in a\n+new and unsupported Python interpreter where you will typically want to set\n+them to 0 to *disable* optimizations.  They are listed below for completeness but\n+hidden by default since most users will be uninterested in changing them.\n+\n+.. tabs::\n+    .. tab:: Hide\n+    \n+    .. tab:: Show\n+        \n+        ``CYTHON_USE_TYPE_SLOTS``\n+            If enabled Cython will directly access members of the ``PyTypeObject``\n+            struct.\n+            \n+        ``CYTHON_USE_PYTYPE_LOOKUP``\n+            More efficient access into properties of C classes.\n+            \n+        ``CYTHON_USE_ASYNC_SLOTS``\n+            Support for the ``tp_as_async`` attribute on type objects.\n+            \n+        ``CYTHON_USE_PYLONG_INTERNALS``/``CYTHON_USE_PYLIST_INTERNALS``/``CYTHON_USE_UNICODE_INTERNALS``\n+            Enable optimizations based on direct access into the internals of Python\n+            ``int``/``list``/``unicode`` objects respectively.\n+            \n+        ``CYTHON_USE_UNICODE_WRITER``\n+            Use a faster (but internal) mechanism for building unicode strings, for\n+            example in f-strings.\n+            \n+        ``CYTHON_AVOID_BORROWED_REFS``\n+            Avoid using \"borrowed references\" and ensure that Cython always holds\n+            a reference to objects it manipulates.  Most useful for\n+            non-reference-counted implementations of Python, like PyPy\n+            (where it is enabled by default).\n+            \n+        ``CYTHON_ASSUME_SAFE_MACROS``\n+            Using some C API macros that increase performance by skipping error checking.",
            "html_url": "https://github.com/cython/cython/pull/5864#discussion_r1405375312",
            "id": 1405375312,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5TxFNQ",
            "original_commit_id": "fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
            "original_line": 1211,
            "original_position": 89,
            "original_start_line": null,
            "path": "docs/src/userguide/source_files_and_compilation.rst",
            "position": null,
            "pull_request_review_id": 1749322166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5864",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405375312/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-26T11:05:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405375312",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5864#discussion_r1405375885"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5864"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1405375885"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            Enable `PEP-487 <https://peps.python.org/pep-0487/>`_ ``__init_subclass__`` behaviour.\r\n```",
            "commit_id": "9223459862eca2ada0035264102fdabaffdeea5c",
            "created_at": "2023-11-26T10:57:06Z",
            "diff_hunk": "@@ -1123,3 +1123,119 @@ argument to ``cythonize``::\n This will override the default directives as specified in the ``compiler_directives`` dictionary.\n Note that explicit per-file or local directives as explained above take precedence over the\n values passed to ``cythonize``.\n+\n+C macro defines\n+===============\n+\n+Cython has a number of C macros that can be used to control compilation. Typically, these\n+would be set using ``extra_compile_args`` in `setup.py` (for example\n+``extra_compile_args=['-DCYTHON_USE_TYPE_SPECS=1']``), however they can also be set in\n+other ways like using the ``CFLAGS`` environmental variable.\n+\n+These macros are set automatically by Cython to sensible default values unless\n+you chose to explicitly override them, so they are a tool that most users\n+can happily ignore.  Not all combinations of macros are compatible or tested, and\n+some change the default value of other macros.  They are listed below in rough order from\n+most important to least important:\n+\n+``CYTHON_LIMITED_API``\n+    Turns on Cython's experimental Limited API support, meaning that one compiled module\n+    can be used by many Python interpreter versions (at the cost of some performance).\n+    At this stage many features do not work in the Limited API.  If you use this macro\n+    you should also set the macro ``Py_LIMITED_API`` to be the version hex for the\n+    minimum Python version you want to support (>=3.7).  ``0x03070000`` will support\n+    Python 3.7 upwards.\n+\n+``CYTHON_PEP489_MULTI_PHASE_INIT``\n+    Uses multi-phase module initialization as described in PEP489.  This improves\n+    Python compatibility, especially when running the initial import of the code when it\n+    makes attributes such as ``__file__`` available.  It is therefore on by default\n+    where supported.\n+\n+``CYTHON_USE_MODULE_STATE``\n+    Stores module data on a struct associated with the module object rather than as\n+    C global variables.  The advantage is that it should be possible to import the\n+    same module more than once (e.g. in different sub-interpreters).  At the moment\n+    this is experimental and not all data has been moved.  It also requires that\n+    ``CYTHON_PEP489_MULTI_PHASE_INIT`` is off - we plan to remove this limitation\n+    in the future.\n+\n+``CYTHON_USE_TYPE_SPECS``\n+    Defines ``cdef classes`` as `\"heap types\" <https://docs.python.org/3/c-api/typeobj.html#heap-types>`_\n+    rather than \"static types\".  Practically this does not change a lot from a user\n+    point of view, but it is needed to implement Limited API support.\n+    \n+``CYTHON_EXTERN_C``\n+    Slightly different to the other macros, this controls how ``cdef public``\n+    functions appear to C++ code. See :ref:`CYTHON_EXTERN_C` for full details.\n+    \n+There is a further list of macros which turn off various optimizations or language\n+features.  Under normal circumstance Cython enables these automatically based on the\n+version of Python you are compiling for so there is no need to use them\n+to try to enable extra optimizations - all supported optimizations are enabled by\n+default.  These are mostly relevant if you're tying to get Cython working in a\n+new and unsupported Python interpreter where you will typically want to set\n+them to 0 to *disable* optimizations.  They are listed below for completeness but\n+hidden by default since most users will be uninterested in changing them.\n+\n+.. tabs::\n+    .. tab:: Hide\n+    \n+    .. tab:: Show\n+        \n+        ``CYTHON_USE_TYPE_SLOTS``\n+            If enabled Cython will directly access members of the ``PyTypeObject``\n+            struct.\n+            \n+        ``CYTHON_USE_PYTYPE_LOOKUP``\n+            More efficient access into properties of C classes.\n+            \n+        ``CYTHON_USE_ASYNC_SLOTS``\n+            Support for the ``tp_as_async`` attribute on type objects.\n+            \n+        ``CYTHON_USE_PYLONG_INTERNALS``/``CYTHON_USE_PYLIST_INTERNALS``/``CYTHON_USE_UNICODE_INTERNALS``\n+            Enable optimizations based on direct access into the internals of Python\n+            ``int``/``list``/``unicode`` objects respectively.\n+            \n+        ``CYTHON_USE_UNICODE_WRITER``\n+            Use a faster (but internal) mechanism for building unicode strings, for\n+            example in f-strings.\n+            \n+        ``CYTHON_AVOID_BORROWED_REFS``\n+            Avoid using \"borrowed references\" and ensure that Cython always holds\n+            a reference to objects it manipulates.  Most useful for\n+            non-reference-counted implementations of Python, like PyPy\n+            (where it is enabled by default).\n+            \n+        ``CYTHON_ASSUME_SAFE_MACROS``\n+            Using some C API macros that increase performance by skipping error checking.\n+            \n+        ``CYTHON_FAST_GIL``\n+            On some Python versions this speeds up getting/releasing the GIL.\n+            \n+        ``CYTHON_UNPACK_METHODS``\n+            Tries to speed up method calls at the cost of code-size.  Linked to\n+            the ``optimize.unpack_method_calls`` compiler directive - this macro\n+            is used to selectively enable the compiler directive only on versions\n+            of Python that support it.\n+            \n+        ``CYTHON_METH_FASTCALL``/``CYTHON_FAST_PYCALL``\n+            These are used internally to incrementally enable the vectorcall calling\n+            mechanism on older Python versions (<3.8).\n+            \n+        ``CYTHON_PEP487_INIT_SUBCLASS``\n+            Enables PEP487 behaviour.",
            "html_url": "https://github.com/cython/cython/pull/5864#discussion_r1405375885",
            "id": 1405375885,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5TxFWN",
            "original_commit_id": "fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
            "original_line": 1227,
            "original_position": 105,
            "original_start_line": null,
            "path": "docs/src/userguide/source_files_and_compilation.rst",
            "position": null,
            "pull_request_review_id": 1749322166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5864",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405375885/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-26T11:05:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405375885",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5864#discussion_r1405376055"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5864"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1405376055"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            Try to speed up method calls at the cost of code-size.  Linked to\r\n```",
            "commit_id": "9223459862eca2ada0035264102fdabaffdeea5c",
            "created_at": "2023-11-26T10:58:26Z",
            "diff_hunk": "@@ -1123,3 +1123,119 @@ argument to ``cythonize``::\n This will override the default directives as specified in the ``compiler_directives`` dictionary.\n Note that explicit per-file or local directives as explained above take precedence over the\n values passed to ``cythonize``.\n+\n+C macro defines\n+===============\n+\n+Cython has a number of C macros that can be used to control compilation. Typically, these\n+would be set using ``extra_compile_args`` in `setup.py` (for example\n+``extra_compile_args=['-DCYTHON_USE_TYPE_SPECS=1']``), however they can also be set in\n+other ways like using the ``CFLAGS`` environmental variable.\n+\n+These macros are set automatically by Cython to sensible default values unless\n+you chose to explicitly override them, so they are a tool that most users\n+can happily ignore.  Not all combinations of macros are compatible or tested, and\n+some change the default value of other macros.  They are listed below in rough order from\n+most important to least important:\n+\n+``CYTHON_LIMITED_API``\n+    Turns on Cython's experimental Limited API support, meaning that one compiled module\n+    can be used by many Python interpreter versions (at the cost of some performance).\n+    At this stage many features do not work in the Limited API.  If you use this macro\n+    you should also set the macro ``Py_LIMITED_API`` to be the version hex for the\n+    minimum Python version you want to support (>=3.7).  ``0x03070000`` will support\n+    Python 3.7 upwards.\n+\n+``CYTHON_PEP489_MULTI_PHASE_INIT``\n+    Uses multi-phase module initialization as described in PEP489.  This improves\n+    Python compatibility, especially when running the initial import of the code when it\n+    makes attributes such as ``__file__`` available.  It is therefore on by default\n+    where supported.\n+\n+``CYTHON_USE_MODULE_STATE``\n+    Stores module data on a struct associated with the module object rather than as\n+    C global variables.  The advantage is that it should be possible to import the\n+    same module more than once (e.g. in different sub-interpreters).  At the moment\n+    this is experimental and not all data has been moved.  It also requires that\n+    ``CYTHON_PEP489_MULTI_PHASE_INIT`` is off - we plan to remove this limitation\n+    in the future.\n+\n+``CYTHON_USE_TYPE_SPECS``\n+    Defines ``cdef classes`` as `\"heap types\" <https://docs.python.org/3/c-api/typeobj.html#heap-types>`_\n+    rather than \"static types\".  Practically this does not change a lot from a user\n+    point of view, but it is needed to implement Limited API support.\n+    \n+``CYTHON_EXTERN_C``\n+    Slightly different to the other macros, this controls how ``cdef public``\n+    functions appear to C++ code. See :ref:`CYTHON_EXTERN_C` for full details.\n+    \n+There is a further list of macros which turn off various optimizations or language\n+features.  Under normal circumstance Cython enables these automatically based on the\n+version of Python you are compiling for so there is no need to use them\n+to try to enable extra optimizations - all supported optimizations are enabled by\n+default.  These are mostly relevant if you're tying to get Cython working in a\n+new and unsupported Python interpreter where you will typically want to set\n+them to 0 to *disable* optimizations.  They are listed below for completeness but\n+hidden by default since most users will be uninterested in changing them.\n+\n+.. tabs::\n+    .. tab:: Hide\n+    \n+    .. tab:: Show\n+        \n+        ``CYTHON_USE_TYPE_SLOTS``\n+            If enabled Cython will directly access members of the ``PyTypeObject``\n+            struct.\n+            \n+        ``CYTHON_USE_PYTYPE_LOOKUP``\n+            More efficient access into properties of C classes.\n+            \n+        ``CYTHON_USE_ASYNC_SLOTS``\n+            Support for the ``tp_as_async`` attribute on type objects.\n+            \n+        ``CYTHON_USE_PYLONG_INTERNALS``/``CYTHON_USE_PYLIST_INTERNALS``/``CYTHON_USE_UNICODE_INTERNALS``\n+            Enable optimizations based on direct access into the internals of Python\n+            ``int``/``list``/``unicode`` objects respectively.\n+            \n+        ``CYTHON_USE_UNICODE_WRITER``\n+            Use a faster (but internal) mechanism for building unicode strings, for\n+            example in f-strings.\n+            \n+        ``CYTHON_AVOID_BORROWED_REFS``\n+            Avoid using \"borrowed references\" and ensure that Cython always holds\n+            a reference to objects it manipulates.  Most useful for\n+            non-reference-counted implementations of Python, like PyPy\n+            (where it is enabled by default).\n+            \n+        ``CYTHON_ASSUME_SAFE_MACROS``\n+            Using some C API macros that increase performance by skipping error checking.\n+            \n+        ``CYTHON_FAST_GIL``\n+            On some Python versions this speeds up getting/releasing the GIL.\n+            \n+        ``CYTHON_UNPACK_METHODS``\n+            Tries to speed up method calls at the cost of code-size.  Linked to",
            "html_url": "https://github.com/cython/cython/pull/5864#discussion_r1405376055",
            "id": 1405376055,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5TxFY3",
            "original_commit_id": "fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
            "original_line": 1217,
            "original_position": 95,
            "original_start_line": null,
            "path": "docs/src/userguide/source_files_and_compilation.rst",
            "position": null,
            "pull_request_review_id": 1749322166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5864",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405376055/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-26T11:05:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405376055",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5864#discussion_r1405376193"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5864"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1405376193"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            Use the ``tp_finalize`` type-slot instead of ``tp_dealloc``,\r\n            as described in `PEP-442 <https://peps.python.org/pep-0442/>`_.\r\n```",
            "commit_id": "9223459862eca2ada0035264102fdabaffdeea5c",
            "created_at": "2023-11-26T10:59:12Z",
            "diff_hunk": "@@ -1123,3 +1123,119 @@ argument to ``cythonize``::\n This will override the default directives as specified in the ``compiler_directives`` dictionary.\n Note that explicit per-file or local directives as explained above take precedence over the\n values passed to ``cythonize``.\n+\n+C macro defines\n+===============\n+\n+Cython has a number of C macros that can be used to control compilation. Typically, these\n+would be set using ``extra_compile_args`` in `setup.py` (for example\n+``extra_compile_args=['-DCYTHON_USE_TYPE_SPECS=1']``), however they can also be set in\n+other ways like using the ``CFLAGS`` environmental variable.\n+\n+These macros are set automatically by Cython to sensible default values unless\n+you chose to explicitly override them, so they are a tool that most users\n+can happily ignore.  Not all combinations of macros are compatible or tested, and\n+some change the default value of other macros.  They are listed below in rough order from\n+most important to least important:\n+\n+``CYTHON_LIMITED_API``\n+    Turns on Cython's experimental Limited API support, meaning that one compiled module\n+    can be used by many Python interpreter versions (at the cost of some performance).\n+    At this stage many features do not work in the Limited API.  If you use this macro\n+    you should also set the macro ``Py_LIMITED_API`` to be the version hex for the\n+    minimum Python version you want to support (>=3.7).  ``0x03070000`` will support\n+    Python 3.7 upwards.\n+\n+``CYTHON_PEP489_MULTI_PHASE_INIT``\n+    Uses multi-phase module initialization as described in PEP489.  This improves\n+    Python compatibility, especially when running the initial import of the code when it\n+    makes attributes such as ``__file__`` available.  It is therefore on by default\n+    where supported.\n+\n+``CYTHON_USE_MODULE_STATE``\n+    Stores module data on a struct associated with the module object rather than as\n+    C global variables.  The advantage is that it should be possible to import the\n+    same module more than once (e.g. in different sub-interpreters).  At the moment\n+    this is experimental and not all data has been moved.  It also requires that\n+    ``CYTHON_PEP489_MULTI_PHASE_INIT`` is off - we plan to remove this limitation\n+    in the future.\n+\n+``CYTHON_USE_TYPE_SPECS``\n+    Defines ``cdef classes`` as `\"heap types\" <https://docs.python.org/3/c-api/typeobj.html#heap-types>`_\n+    rather than \"static types\".  Practically this does not change a lot from a user\n+    point of view, but it is needed to implement Limited API support.\n+    \n+``CYTHON_EXTERN_C``\n+    Slightly different to the other macros, this controls how ``cdef public``\n+    functions appear to C++ code. See :ref:`CYTHON_EXTERN_C` for full details.\n+    \n+There is a further list of macros which turn off various optimizations or language\n+features.  Under normal circumstance Cython enables these automatically based on the\n+version of Python you are compiling for so there is no need to use them\n+to try to enable extra optimizations - all supported optimizations are enabled by\n+default.  These are mostly relevant if you're tying to get Cython working in a\n+new and unsupported Python interpreter where you will typically want to set\n+them to 0 to *disable* optimizations.  They are listed below for completeness but\n+hidden by default since most users will be uninterested in changing them.\n+\n+.. tabs::\n+    .. tab:: Hide\n+    \n+    .. tab:: Show\n+        \n+        ``CYTHON_USE_TYPE_SLOTS``\n+            If enabled Cython will directly access members of the ``PyTypeObject``\n+            struct.\n+            \n+        ``CYTHON_USE_PYTYPE_LOOKUP``\n+            More efficient access into properties of C classes.\n+            \n+        ``CYTHON_USE_ASYNC_SLOTS``\n+            Support for the ``tp_as_async`` attribute on type objects.\n+            \n+        ``CYTHON_USE_PYLONG_INTERNALS``/``CYTHON_USE_PYLIST_INTERNALS``/``CYTHON_USE_UNICODE_INTERNALS``\n+            Enable optimizations based on direct access into the internals of Python\n+            ``int``/``list``/``unicode`` objects respectively.\n+            \n+        ``CYTHON_USE_UNICODE_WRITER``\n+            Use a faster (but internal) mechanism for building unicode strings, for\n+            example in f-strings.\n+            \n+        ``CYTHON_AVOID_BORROWED_REFS``\n+            Avoid using \"borrowed references\" and ensure that Cython always holds\n+            a reference to objects it manipulates.  Most useful for\n+            non-reference-counted implementations of Python, like PyPy\n+            (where it is enabled by default).\n+            \n+        ``CYTHON_ASSUME_SAFE_MACROS``\n+            Using some C API macros that increase performance by skipping error checking.\n+            \n+        ``CYTHON_FAST_GIL``\n+            On some Python versions this speeds up getting/releasing the GIL.\n+            \n+        ``CYTHON_UNPACK_METHODS``\n+            Tries to speed up method calls at the cost of code-size.  Linked to\n+            the ``optimize.unpack_method_calls`` compiler directive - this macro\n+            is used to selectively enable the compiler directive only on versions\n+            of Python that support it.\n+            \n+        ``CYTHON_METH_FASTCALL``/``CYTHON_FAST_PYCALL``\n+            These are used internally to incrementally enable the vectorcall calling\n+            mechanism on older Python versions (<3.8).\n+            \n+        ``CYTHON_PEP487_INIT_SUBCLASS``\n+            Enables PEP487 behaviour.\n+            \n+        ``CYTHON_USE_TP_FINALIZE``\n+            Uses the ``tp_finalize`` type-slot instead of ``tp_dealloc``,\n+            as described in PEP 442.",
            "html_url": "https://github.com/cython/cython/pull/5864#discussion_r1405376193",
            "id": 1405376193,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5TxFbB",
            "original_commit_id": "fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
            "original_line": 1231,
            "original_position": 109,
            "original_start_line": 1230,
            "path": "docs/src/userguide/source_files_and_compilation.rst",
            "position": null,
            "pull_request_review_id": 1749322166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5864",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405376193/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-11-26T11:05:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405376193",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5864#discussion_r1405376749"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5864"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1405376749"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        ``CYTHON_USE_DICT_VERSIONS``\r\n            Try to optimize attribute lookup by using versioned dictionaries\r\n            where supported.\r\n            \r\n        ``CYTHON_USE_EXC_INFO_STACK``\r\n            Use an internal structure to track exception state,\r\n            used in CPython 3.7 and later.\r\n            \r\n        ``CYTHON_UPDATE_DESCRIPTOR_DOC``\r\n            Attempt to provide docstrings also for special (double underscore) methods.\r\n```",
            "commit_id": "9223459862eca2ada0035264102fdabaffdeea5c",
            "created_at": "2023-11-26T11:02:12Z",
            "diff_hunk": "@@ -1123,3 +1123,119 @@ argument to ``cythonize``::\n This will override the default directives as specified in the ``compiler_directives`` dictionary.\n Note that explicit per-file or local directives as explained above take precedence over the\n values passed to ``cythonize``.\n+\n+C macro defines\n+===============\n+\n+Cython has a number of C macros that can be used to control compilation. Typically, these\n+would be set using ``extra_compile_args`` in `setup.py` (for example\n+``extra_compile_args=['-DCYTHON_USE_TYPE_SPECS=1']``), however they can also be set in\n+other ways like using the ``CFLAGS`` environmental variable.\n+\n+These macros are set automatically by Cython to sensible default values unless\n+you chose to explicitly override them, so they are a tool that most users\n+can happily ignore.  Not all combinations of macros are compatible or tested, and\n+some change the default value of other macros.  They are listed below in rough order from\n+most important to least important:\n+\n+``CYTHON_LIMITED_API``\n+    Turns on Cython's experimental Limited API support, meaning that one compiled module\n+    can be used by many Python interpreter versions (at the cost of some performance).\n+    At this stage many features do not work in the Limited API.  If you use this macro\n+    you should also set the macro ``Py_LIMITED_API`` to be the version hex for the\n+    minimum Python version you want to support (>=3.7).  ``0x03070000`` will support\n+    Python 3.7 upwards.\n+\n+``CYTHON_PEP489_MULTI_PHASE_INIT``\n+    Uses multi-phase module initialization as described in PEP489.  This improves\n+    Python compatibility, especially when running the initial import of the code when it\n+    makes attributes such as ``__file__`` available.  It is therefore on by default\n+    where supported.\n+\n+``CYTHON_USE_MODULE_STATE``\n+    Stores module data on a struct associated with the module object rather than as\n+    C global variables.  The advantage is that it should be possible to import the\n+    same module more than once (e.g. in different sub-interpreters).  At the moment\n+    this is experimental and not all data has been moved.  It also requires that\n+    ``CYTHON_PEP489_MULTI_PHASE_INIT`` is off - we plan to remove this limitation\n+    in the future.\n+\n+``CYTHON_USE_TYPE_SPECS``\n+    Defines ``cdef classes`` as `\"heap types\" <https://docs.python.org/3/c-api/typeobj.html#heap-types>`_\n+    rather than \"static types\".  Practically this does not change a lot from a user\n+    point of view, but it is needed to implement Limited API support.\n+    \n+``CYTHON_EXTERN_C``\n+    Slightly different to the other macros, this controls how ``cdef public``\n+    functions appear to C++ code. See :ref:`CYTHON_EXTERN_C` for full details.\n+    \n+There is a further list of macros which turn off various optimizations or language\n+features.  Under normal circumstance Cython enables these automatically based on the\n+version of Python you are compiling for so there is no need to use them\n+to try to enable extra optimizations - all supported optimizations are enabled by\n+default.  These are mostly relevant if you're tying to get Cython working in a\n+new and unsupported Python interpreter where you will typically want to set\n+them to 0 to *disable* optimizations.  They are listed below for completeness but\n+hidden by default since most users will be uninterested in changing them.\n+\n+.. tabs::\n+    .. tab:: Hide\n+    \n+    .. tab:: Show\n+        \n+        ``CYTHON_USE_TYPE_SLOTS``\n+            If enabled Cython will directly access members of the ``PyTypeObject``\n+            struct.\n+            \n+        ``CYTHON_USE_PYTYPE_LOOKUP``\n+            More efficient access into properties of C classes.\n+            \n+        ``CYTHON_USE_ASYNC_SLOTS``\n+            Support for the ``tp_as_async`` attribute on type objects.\n+            \n+        ``CYTHON_USE_PYLONG_INTERNALS``/``CYTHON_USE_PYLIST_INTERNALS``/``CYTHON_USE_UNICODE_INTERNALS``\n+            Enable optimizations based on direct access into the internals of Python\n+            ``int``/``list``/``unicode`` objects respectively.\n+            \n+        ``CYTHON_USE_UNICODE_WRITER``\n+            Use a faster (but internal) mechanism for building unicode strings, for\n+            example in f-strings.\n+            \n+        ``CYTHON_AVOID_BORROWED_REFS``\n+            Avoid using \"borrowed references\" and ensure that Cython always holds\n+            a reference to objects it manipulates.  Most useful for\n+            non-reference-counted implementations of Python, like PyPy\n+            (where it is enabled by default).\n+            \n+        ``CYTHON_ASSUME_SAFE_MACROS``\n+            Using some C API macros that increase performance by skipping error checking.\n+            \n+        ``CYTHON_FAST_GIL``\n+            On some Python versions this speeds up getting/releasing the GIL.\n+            \n+        ``CYTHON_UNPACK_METHODS``\n+            Tries to speed up method calls at the cost of code-size.  Linked to\n+            the ``optimize.unpack_method_calls`` compiler directive - this macro\n+            is used to selectively enable the compiler directive only on versions\n+            of Python that support it.\n+            \n+        ``CYTHON_METH_FASTCALL``/``CYTHON_FAST_PYCALL``\n+            These are used internally to incrementally enable the vectorcall calling\n+            mechanism on older Python versions (<3.8).\n+            \n+        ``CYTHON_PEP487_INIT_SUBCLASS``\n+            Enables PEP487 behaviour.\n+            \n+        ``CYTHON_USE_TP_FINALIZE``\n+            Uses the ``tp_finalize`` type-slot instead of ``tp_dealloc``,\n+            as described in PEP 442.\n+            \n+        ``CYTHON_USE_DICT_VERSIONS``\n+            Tries to optimize attribute lookup by using versioned dictionaries\n+            where supported.\n+            \n+        ``CYTHON_USE_EXC_INFO_STACK``\n+            Uses an internal structure to track exception state.\n+            \n+        ``CYTHON_UPDATE_DESCRIPTOR_DOC``\n+            Attempts to provide docstrings for special methods.",
            "html_url": "https://github.com/cython/cython/pull/5864#discussion_r1405376749",
            "id": 1405376749,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5TxFjt",
            "original_commit_id": "fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
            "original_line": 1241,
            "original_position": 119,
            "original_start_line": 1233,
            "path": "docs/src/userguide/source_files_and_compilation.rst",
            "position": null,
            "pull_request_review_id": 1749322166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5864",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405376749/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-11-26T11:05:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405376749",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5864#discussion_r1405376891"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5864"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1405376891"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            Support the ``tp_as_async`` attribute on type objects.\r\n```",
            "commit_id": "9223459862eca2ada0035264102fdabaffdeea5c",
            "created_at": "2023-11-26T11:03:07Z",
            "diff_hunk": "@@ -1123,3 +1123,119 @@ argument to ``cythonize``::\n This will override the default directives as specified in the ``compiler_directives`` dictionary.\n Note that explicit per-file or local directives as explained above take precedence over the\n values passed to ``cythonize``.\n+\n+C macro defines\n+===============\n+\n+Cython has a number of C macros that can be used to control compilation. Typically, these\n+would be set using ``extra_compile_args`` in `setup.py` (for example\n+``extra_compile_args=['-DCYTHON_USE_TYPE_SPECS=1']``), however they can also be set in\n+other ways like using the ``CFLAGS`` environmental variable.\n+\n+These macros are set automatically by Cython to sensible default values unless\n+you chose to explicitly override them, so they are a tool that most users\n+can happily ignore.  Not all combinations of macros are compatible or tested, and\n+some change the default value of other macros.  They are listed below in rough order from\n+most important to least important:\n+\n+``CYTHON_LIMITED_API``\n+    Turns on Cython's experimental Limited API support, meaning that one compiled module\n+    can be used by many Python interpreter versions (at the cost of some performance).\n+    At this stage many features do not work in the Limited API.  If you use this macro\n+    you should also set the macro ``Py_LIMITED_API`` to be the version hex for the\n+    minimum Python version you want to support (>=3.7).  ``0x03070000`` will support\n+    Python 3.7 upwards.\n+\n+``CYTHON_PEP489_MULTI_PHASE_INIT``\n+    Uses multi-phase module initialization as described in PEP489.  This improves\n+    Python compatibility, especially when running the initial import of the code when it\n+    makes attributes such as ``__file__`` available.  It is therefore on by default\n+    where supported.\n+\n+``CYTHON_USE_MODULE_STATE``\n+    Stores module data on a struct associated with the module object rather than as\n+    C global variables.  The advantage is that it should be possible to import the\n+    same module more than once (e.g. in different sub-interpreters).  At the moment\n+    this is experimental and not all data has been moved.  It also requires that\n+    ``CYTHON_PEP489_MULTI_PHASE_INIT`` is off - we plan to remove this limitation\n+    in the future.\n+\n+``CYTHON_USE_TYPE_SPECS``\n+    Defines ``cdef classes`` as `\"heap types\" <https://docs.python.org/3/c-api/typeobj.html#heap-types>`_\n+    rather than \"static types\".  Practically this does not change a lot from a user\n+    point of view, but it is needed to implement Limited API support.\n+    \n+``CYTHON_EXTERN_C``\n+    Slightly different to the other macros, this controls how ``cdef public``\n+    functions appear to C++ code. See :ref:`CYTHON_EXTERN_C` for full details.\n+    \n+There is a further list of macros which turn off various optimizations or language\n+features.  Under normal circumstance Cython enables these automatically based on the\n+version of Python you are compiling for so there is no need to use them\n+to try to enable extra optimizations - all supported optimizations are enabled by\n+default.  These are mostly relevant if you're tying to get Cython working in a\n+new and unsupported Python interpreter where you will typically want to set\n+them to 0 to *disable* optimizations.  They are listed below for completeness but\n+hidden by default since most users will be uninterested in changing them.\n+\n+.. tabs::\n+    .. tab:: Hide\n+    \n+    .. tab:: Show\n+        \n+        ``CYTHON_USE_TYPE_SLOTS``\n+            If enabled Cython will directly access members of the ``PyTypeObject``\n+            struct.\n+            \n+        ``CYTHON_USE_PYTYPE_LOOKUP``\n+            More efficient access into properties of C classes.\n+            \n+        ``CYTHON_USE_ASYNC_SLOTS``\n+            Support for the ``tp_as_async`` attribute on type objects.",
            "html_url": "https://github.com/cython/cython/pull/5864#discussion_r1405376891",
            "id": 1405376891,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5TxFl7",
            "original_commit_id": "fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
            "original_line": 1194,
            "original_position": 72,
            "original_start_line": null,
            "path": "docs/src/userguide/source_files_and_compilation.rst",
            "position": null,
            "pull_request_review_id": 1749322166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5864",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405376891/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-26T11:05:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405376891",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5864#discussion_r1405376954"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5864"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1405376954"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            If enabled, Cython will directly access members of the ``PyTypeObject``\r\n```",
            "commit_id": "9223459862eca2ada0035264102fdabaffdeea5c",
            "created_at": "2023-11-26T11:03:27Z",
            "diff_hunk": "@@ -1123,3 +1123,119 @@ argument to ``cythonize``::\n This will override the default directives as specified in the ``compiler_directives`` dictionary.\n Note that explicit per-file or local directives as explained above take precedence over the\n values passed to ``cythonize``.\n+\n+C macro defines\n+===============\n+\n+Cython has a number of C macros that can be used to control compilation. Typically, these\n+would be set using ``extra_compile_args`` in `setup.py` (for example\n+``extra_compile_args=['-DCYTHON_USE_TYPE_SPECS=1']``), however they can also be set in\n+other ways like using the ``CFLAGS`` environmental variable.\n+\n+These macros are set automatically by Cython to sensible default values unless\n+you chose to explicitly override them, so they are a tool that most users\n+can happily ignore.  Not all combinations of macros are compatible or tested, and\n+some change the default value of other macros.  They are listed below in rough order from\n+most important to least important:\n+\n+``CYTHON_LIMITED_API``\n+    Turns on Cython's experimental Limited API support, meaning that one compiled module\n+    can be used by many Python interpreter versions (at the cost of some performance).\n+    At this stage many features do not work in the Limited API.  If you use this macro\n+    you should also set the macro ``Py_LIMITED_API`` to be the version hex for the\n+    minimum Python version you want to support (>=3.7).  ``0x03070000`` will support\n+    Python 3.7 upwards.\n+\n+``CYTHON_PEP489_MULTI_PHASE_INIT``\n+    Uses multi-phase module initialization as described in PEP489.  This improves\n+    Python compatibility, especially when running the initial import of the code when it\n+    makes attributes such as ``__file__`` available.  It is therefore on by default\n+    where supported.\n+\n+``CYTHON_USE_MODULE_STATE``\n+    Stores module data on a struct associated with the module object rather than as\n+    C global variables.  The advantage is that it should be possible to import the\n+    same module more than once (e.g. in different sub-interpreters).  At the moment\n+    this is experimental and not all data has been moved.  It also requires that\n+    ``CYTHON_PEP489_MULTI_PHASE_INIT`` is off - we plan to remove this limitation\n+    in the future.\n+\n+``CYTHON_USE_TYPE_SPECS``\n+    Defines ``cdef classes`` as `\"heap types\" <https://docs.python.org/3/c-api/typeobj.html#heap-types>`_\n+    rather than \"static types\".  Practically this does not change a lot from a user\n+    point of view, but it is needed to implement Limited API support.\n+    \n+``CYTHON_EXTERN_C``\n+    Slightly different to the other macros, this controls how ``cdef public``\n+    functions appear to C++ code. See :ref:`CYTHON_EXTERN_C` for full details.\n+    \n+There is a further list of macros which turn off various optimizations or language\n+features.  Under normal circumstance Cython enables these automatically based on the\n+version of Python you are compiling for so there is no need to use them\n+to try to enable extra optimizations - all supported optimizations are enabled by\n+default.  These are mostly relevant if you're tying to get Cython working in a\n+new and unsupported Python interpreter where you will typically want to set\n+them to 0 to *disable* optimizations.  They are listed below for completeness but\n+hidden by default since most users will be uninterested in changing them.\n+\n+.. tabs::\n+    .. tab:: Hide\n+    \n+    .. tab:: Show\n+        \n+        ``CYTHON_USE_TYPE_SLOTS``\n+            If enabled Cython will directly access members of the ``PyTypeObject``",
            "html_url": "https://github.com/cython/cython/pull/5864#discussion_r1405376954",
            "id": 1405376954,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5TxFm6",
            "original_commit_id": "fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
            "original_line": 1187,
            "original_position": 65,
            "original_start_line": null,
            "path": "docs/src/userguide/source_files_and_compilation.rst",
            "position": null,
            "pull_request_review_id": 1749322166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5864",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405376954/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-26T11:05:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405376954",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/5864#discussion_r1405377138"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/5864"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1405377138"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n            Use the internal `_PyType_Lookup()` function for more efficient access\r\n            to properties of C classes.\r\n```",
            "commit_id": "9223459862eca2ada0035264102fdabaffdeea5c",
            "created_at": "2023-11-26T11:04:28Z",
            "diff_hunk": "@@ -1123,3 +1123,119 @@ argument to ``cythonize``::\n This will override the default directives as specified in the ``compiler_directives`` dictionary.\n Note that explicit per-file or local directives as explained above take precedence over the\n values passed to ``cythonize``.\n+\n+C macro defines\n+===============\n+\n+Cython has a number of C macros that can be used to control compilation. Typically, these\n+would be set using ``extra_compile_args`` in `setup.py` (for example\n+``extra_compile_args=['-DCYTHON_USE_TYPE_SPECS=1']``), however they can also be set in\n+other ways like using the ``CFLAGS`` environmental variable.\n+\n+These macros are set automatically by Cython to sensible default values unless\n+you chose to explicitly override them, so they are a tool that most users\n+can happily ignore.  Not all combinations of macros are compatible or tested, and\n+some change the default value of other macros.  They are listed below in rough order from\n+most important to least important:\n+\n+``CYTHON_LIMITED_API``\n+    Turns on Cython's experimental Limited API support, meaning that one compiled module\n+    can be used by many Python interpreter versions (at the cost of some performance).\n+    At this stage many features do not work in the Limited API.  If you use this macro\n+    you should also set the macro ``Py_LIMITED_API`` to be the version hex for the\n+    minimum Python version you want to support (>=3.7).  ``0x03070000`` will support\n+    Python 3.7 upwards.\n+\n+``CYTHON_PEP489_MULTI_PHASE_INIT``\n+    Uses multi-phase module initialization as described in PEP489.  This improves\n+    Python compatibility, especially when running the initial import of the code when it\n+    makes attributes such as ``__file__`` available.  It is therefore on by default\n+    where supported.\n+\n+``CYTHON_USE_MODULE_STATE``\n+    Stores module data on a struct associated with the module object rather than as\n+    C global variables.  The advantage is that it should be possible to import the\n+    same module more than once (e.g. in different sub-interpreters).  At the moment\n+    this is experimental and not all data has been moved.  It also requires that\n+    ``CYTHON_PEP489_MULTI_PHASE_INIT`` is off - we plan to remove this limitation\n+    in the future.\n+\n+``CYTHON_USE_TYPE_SPECS``\n+    Defines ``cdef classes`` as `\"heap types\" <https://docs.python.org/3/c-api/typeobj.html#heap-types>`_\n+    rather than \"static types\".  Practically this does not change a lot from a user\n+    point of view, but it is needed to implement Limited API support.\n+    \n+``CYTHON_EXTERN_C``\n+    Slightly different to the other macros, this controls how ``cdef public``\n+    functions appear to C++ code. See :ref:`CYTHON_EXTERN_C` for full details.\n+    \n+There is a further list of macros which turn off various optimizations or language\n+features.  Under normal circumstance Cython enables these automatically based on the\n+version of Python you are compiling for so there is no need to use them\n+to try to enable extra optimizations - all supported optimizations are enabled by\n+default.  These are mostly relevant if you're tying to get Cython working in a\n+new and unsupported Python interpreter where you will typically want to set\n+them to 0 to *disable* optimizations.  They are listed below for completeness but\n+hidden by default since most users will be uninterested in changing them.\n+\n+.. tabs::\n+    .. tab:: Hide\n+    \n+    .. tab:: Show\n+        \n+        ``CYTHON_USE_TYPE_SLOTS``\n+            If enabled Cython will directly access members of the ``PyTypeObject``\n+            struct.\n+            \n+        ``CYTHON_USE_PYTYPE_LOOKUP``\n+            More efficient access into properties of C classes.",
            "html_url": "https://github.com/cython/cython/pull/5864#discussion_r1405377138",
            "id": 1405377138,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5TxFpy",
            "original_commit_id": "fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
            "original_line": 1191,
            "original_position": 69,
            "original_start_line": null,
            "path": "docs/src/userguide/source_files_and_compilation.rst",
            "position": null,
            "pull_request_review_id": 1749322166,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/5864",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405377138/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-26T11:05:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1405377138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/5864/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f70e971e172ee12944d00665b279c86aeb367967/comments",
            "commit": {
                "author": {
                    "date": "2023-11-23T22:44:00Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-11-23T22:46:27Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Document user-selectable C macros\n\nI've shown the 4 that are most user-relevant clearly, and\nhidden most of the rest by default (but documented them if\npeople really want to read them).",
                "tree": {
                    "sha": "e0edad65cd9de0f29611449e2bc858e87c204a1d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e0edad65cd9de0f29611449e2bc858e87c204a1d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f70e971e172ee12944d00665b279c86aeb367967",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/f70e971e172ee12944d00665b279c86aeb367967",
            "node_id": "C_kwDOAhr4b9oAKGY3MGU5NzFlMTcyZWUxMjk0NGQwMDY2NWIyNzljODZhZWIzNjc5Njc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/bc1f11e77ea92f123d73fd61c63a4b9971d839d2",
                    "sha": "bc1f11e77ea92f123d73fd61c63a4b9971d839d2",
                    "url": "https://api.github.com/repos/cython/cython/commits/bc1f11e77ea92f123d73fd61c63a4b9971d839d2"
                }
            ],
            "sha": "f70e971e172ee12944d00665b279c86aeb367967",
            "url": "https://api.github.com/repos/cython/cython/commits/f70e971e172ee12944d00665b279c86aeb367967"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3525c0ac2f3556b626a774efe152b7c561dc7df0/comments",
            "commit": {
                "author": {
                    "date": "2023-11-24T19:16:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-11-24T19:16:01Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Document CYTHON_EXTERN_C",
                "tree": {
                    "sha": "692eb36a20e746a0db4f1e6aec6d3f538ba80197",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/692eb36a20e746a0db4f1e6aec6d3f538ba80197"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3525c0ac2f3556b626a774efe152b7c561dc7df0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/3525c0ac2f3556b626a774efe152b7c561dc7df0",
            "node_id": "C_kwDOAhr4b9oAKDM1MjVjMGFjMmYzNTU2YjYyNmE3NzRlZmUxNTJiN2M1NjFkYzdkZjA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f70e971e172ee12944d00665b279c86aeb367967",
                    "sha": "f70e971e172ee12944d00665b279c86aeb367967",
                    "url": "https://api.github.com/repos/cython/cython/commits/f70e971e172ee12944d00665b279c86aeb367967"
                }
            ],
            "sha": "3525c0ac2f3556b626a774efe152b7c561dc7df0",
            "url": "https://api.github.com/repos/cython/cython/commits/3525c0ac2f3556b626a774efe152b7c561dc7df0"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59/comments",
            "commit": {
                "author": {
                    "date": "2023-11-25T18:19:43Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-11-25T18:19:43Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Some text corrections",
                "tree": {
                    "sha": "e9a0026ff935e33c4078910610ed8e35fb264260",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/e9a0026ff935e33c4078910610ed8e35fb264260"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
                "verification": {
                    "payload": "tree e9a0026ff935e33c4078910610ed8e35fb264260\nparent 3525c0ac2f3556b626a774efe152b7c561dc7df0\nauthor da-woods <dw-git@d-woods.co.uk> 1700936383 +0000\ncommitter GitHub <noreply@github.com> 1700936383 +0000\n\nSome text corrections",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlYjq/CRBK7hj4Ov3rIwAApgcIAAFRipsc+iTsrEmEm36HEzpG\nkKdXyLEJLgkhuGR/iVo8If/0J+3f1Win2DFknj75ig11oYfC4/uAr+S15ihAvEfP\n0O2umKU+6tbncUG4iUHGtbAfLBXt3PTdn8oYkj3bHUuJLUfOgq4CSV1amb+D9OHy\nN07U5SMoLgdoH2OQcCugWyqtoWFxYBPgqELmbWGHO+/nL/1n/DH6Nb8szhr1e+3q\nqaiJDvDLaNtdZHoj4S0QiOdEFsknKc1i1wrUd8eThQObx7Ac9S0CCDO+3sbt/AnI\nvX7maaIq1ZLbORjeCoWHLIMXY8zLXRnWgfImoYS+Gw1kar/wEBbbQ8scWg1RuNs=\n=SNfx\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
            "node_id": "C_kwDOAhr4b9oAKGZkMTNjZjdjZWFlYjNmZTIzMzEyNDFhYTBlYWMzM2YyZTk2OGVlNTk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3525c0ac2f3556b626a774efe152b7c561dc7df0",
                    "sha": "3525c0ac2f3556b626a774efe152b7c561dc7df0",
                    "url": "https://api.github.com/repos/cython/cython/commits/3525c0ac2f3556b626a774efe152b7c561dc7df0"
                }
            ],
            "sha": "fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
            "url": "https://api.github.com/repos/cython/cython/commits/fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9223459862eca2ada0035264102fdabaffdeea5c/comments",
            "commit": {
                "author": {
                    "date": "2023-11-26T11:08:54Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-11-26T11:08:54Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "68e13bc7dbbb7e0cab43a4dd52696df4da32c5f3",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/68e13bc7dbbb7e0cab43a4dd52696df4da32c5f3"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9223459862eca2ada0035264102fdabaffdeea5c",
                "verification": {
                    "payload": "tree 68e13bc7dbbb7e0cab43a4dd52696df4da32c5f3\nparent fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59\nauthor da-woods <dw-git@d-woods.co.uk> 1700996934 +0000\ncommitter GitHub <noreply@github.com> 1700996934 +0000\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlYydGCRBK7hj4Ov3rIwAA+bEIACIq3aErMVqRnqrk/zX+SzMG\nerikgNs7pESle/we9eCfNVZq4+5W9EwK/Ot9f+fw0MipwNgnewqHuu8kUFHkmsRX\nrPwU6U3Ij+27LGuAwcNKUgm0ShvY1Uja4G5jiEcMfoQQ4dHzdb2iGTBoNK+EvTao\nZqKPpXiRwh+itLuulVB7/NvKWeUSuRXvyJ5rirfxo/tAAklTYOseTWwSNj8o0dpJ\nFMMmzGNzWqTiDMTTzvyy4FElGBL37pHbWnrj6KA5w+pHbKmXpNRDaf4D91ntjlBf\ns1/PIo3cYkmIKwW4p3c4Z1Nq5duet4+Dvr5eh+HAgSLwuWSZ0fn+4Zs+KXoYA1A=\n=zYBJ\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/9223459862eca2ada0035264102fdabaffdeea5c",
            "node_id": "C_kwDOAhr4b9oAKDkyMjM0NTk4NjJlY2EyYWRhMDAzNTI2NDEwMmZkYWJhZmZkZWVhNWM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
                    "sha": "fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59",
                    "url": "https://api.github.com/repos/cython/cython/commits/fd13cf7ceaeb3fe2331241aa0eac33f2e968ee59"
                }
            ],
            "sha": "9223459862eca2ada0035264102fdabaffdeea5c",
            "url": "https://api.github.com/repos/cython/cython/commits/9223459862eca2ada0035264102fdabaffdeea5c"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/5864/commits",
    "created_at": "2023-11-23T22:46:43Z",
    "diff_url": "https://github.com/cython/cython/pull/5864.diff",
    "draft": false,
    "head": {
        "label": "da-woods:document-compile-macros",
        "ref": "document-compile-macros",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2023-11-26T11:09:24Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 73011,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2022-08-11T09:03:48Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "9223459862eca2ada0035264102fdabaffdeea5c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/5864",
    "id": 1615039248,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/5864",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425561345,
            "name": "Documentation",
            "node_id": "MDU6TGFiZWw0MjU1NjEzNDU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Documentation"
        }
    ],
    "locked": false,
    "merge_commit_sha": "b7f4e3de46b42dd984f0d99138299498075d3a13",
    "merged_at": "2023-11-26T11:09:21Z",
    "milestone": null,
    "node_id": "PR_kwDOABDGAc5gQ4sQ",
    "number": 5864,
    "patch_url": "https://github.com/cython/cython/pull/5864.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/5864/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/9223459862eca2ada0035264102fdabaffdeea5c",
    "title": "Document user-selectable C macros",
    "updated_at": "2023-11-26T11:09:24Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/5864",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}