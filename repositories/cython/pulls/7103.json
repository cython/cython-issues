{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/7103/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7103/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/7103"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/7103"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7103/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/7103"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/7e7a7ec4182df2a32f332797f586dd3818d450d8"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1567,
            "forks_count": 1567,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1470,
            "open_issues_count": 1470,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2025-09-26T02:15:27Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 77057,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 10307,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2025-09-26T13:51:48Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 10307,
            "watchers_count": 10307,
            "web_commit_signoff_required": false
        },
        "sha": "ab597ee952b3162ce6e5c658c1f327a4180e71f0",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython",
            "user_view_type": "public"
        }
    },
    "body": "Closes #6811\r\n\r\nThis is a fairly small change on top of the existing f-string implementation. The syntax is almost the same so it's really just a case of interacting with the runtime classes.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296588494"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296588494"
                }
            },
            "author_association": "MEMBER",
            "body": "`is_raw` is still understandable, but `is_t` seems too short, even in the given context. Name it `is_tstring` or even `is_template_string`.",
            "commit_id": "494609200193f03f47231d3e9bb48aa6cd6af713",
            "created_at": "2025-08-24T09:35:44Z",
            "diff_hunk": "@@ -1127,32 +1137,35 @@ def p_string_literal(s: PyrexScanner, kind_override=None) -> tuple:\n \n \n @cython.cfunc\n-def p_read_fstring_expression(s: PyrexScanner):\n+def p_read_ft_string_expression(s: PyrexScanner):\n     strings = []\n     while True:\n         s.next()\n         sy = s.sy\n-        if sy in [\"END_FSTRING_EXPR\",\n+        if sy in [\"END_FT_STRING_EXPR\",\n                     # probably an error, but handle it elsewhere\n                    \"EOF\", None]:\n-            if sy == \"END_FSTRING_EXPR\":\n+            if sy == \"END_FT_STRING_EXPR\":\n                 s.next()\n             return ''.join(strings)\n         strings.append(s.systring)\n \n \n @cython.cfunc\n-def p_fstring_replacement_field(s: PyrexScanner,\n-                                is_raw: cython.bint, is_single_quoted: cython.bint):\n+def p_ft_string_replacement_field(s: PyrexScanner,\n+                                is_raw: cython.bint, is_single_quoted: cython.bint,\n+                                is_t: cython.bint):",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296588494",
            "id": 2296588494,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6I4yjO",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 1157,
            "original_position": 116,
            "original_start_line": 1156,
            "path": "Cython/Compiler/Parsing.py",
            "position": 1,
            "pull_request_review_id": 3149260907,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296588494/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T10:34:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296588494",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296592094"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296592094"
                }
            },
            "author_association": "MEMBER",
            "body": "This is the second time I stumble over this line. It still seems a lot of code (also a lot of C code) for something really simple.\r\n```suggestion\r\n    quotes = s.systring.lstrip(\"rRbBuUfFtT\")\r\n```",
            "commit_id": "494609200193f03f47231d3e9bb48aa6cd6af713",
            "created_at": "2025-08-24T09:45:45Z",
            "diff_hunk": "@@ -1264,22 +1294,23 @@ def p_fstring_middles(s: PyrexScanner,\n         else:\n             error(\n                 s.position(),\n-                \"Unexpected token %r:%r in f-string literal\" % (\n-                s.sy, s.systring))\n+                \"Unexpected token %r:%r in %s-string literal\" % (\n+                s.sy, s.systring, 't' if is_t else 's'))\n     return middles\n \n @cython.cfunc\n-def p_fstring_literal(s: PyrexScanner):\n-    # s.sy == BEGIN_FSTRING\n+def p_ft_string_literal(s: PyrexScanner):\n+    # s.sy == BEGIN_FT_STRING\n     kind_string = _validate_kind_string(s.position(), s.systring)\n+    is_t: cython.bint = 't' in kind_string\n     is_raw: cython.bint = 'r' in kind_string\n     quotes = \"\".join(filter(lambda x: not x.isalnum(), s.systring))",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296592094",
            "id": 2296592094,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6I4zbe",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 1307,
            "original_position": 242,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": 1,
            "pull_request_review_id": 3149260907,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296592094/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-24T10:34:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296592094",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296593748"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296593748"
                }
            },
            "author_association": "MEMBER",
            "body": "Is this an intentional addition?",
            "commit_id": "494609200193f03f47231d3e9bb48aa6cd6af713",
            "created_at": "2025-08-24T09:51:40Z",
            "diff_hunk": "@@ -518,6 +518,8 @@ def visit_GeneralCallNode(self, node):\n     def visit_SimpleCallNode(self, node):\n         self._process_children(node)\n         function = node.function\n+        if function.type is None:\n+            breakpoint()",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296593748",
            "id": 2296593748,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6I4z1U",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 522,
            "original_position": 5,
            "original_start_line": 521,
            "path": "Cython/Compiler/Visitor.py",
            "position": 1,
            "pull_request_review_id": 3149260907,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296593748/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T10:34:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296593748",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296595112"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296595112"
                }
            },
            "author_association": "MEMBER",
            "body": "You can use the `CSTRING()` helper for this and just copy the plain code inside of a multi-line\r\n```python\r\nCSTRING(\"\"\"\r\n...\r\n\"\"\")\r\n```\r\nblock. That makes it a lot more readable and maintainable.\r\nSorry for temporarily stealing the time machine again. :)",
            "commit_id": "494609200193f03f47231d3e9bb48aa6cd6af713",
            "created_at": "2025-08-24T09:55:30Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. \n+    const char code_str[] =\n+\"class Interpolation:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = __match_args__ = ('value', 'expression', 'conversion', 'format_spec')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Interpolation is immutable')\\n\"",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296595112",
            "id": 2296595112,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6I40Ko",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 49,
            "original_position": 49,
            "original_start_line": 44,
            "path": "Cython/Utility/TString.c",
            "position": 1,
            "pull_request_review_id": 3149260907,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296595112/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T10:34:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296595112",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296597222"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296597222"
                }
            },
            "author_association": "MEMBER",
            "body": "Doesn't this return the `string` package/module?",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-08-24T10:02:17Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. \n+    const char code_str[] =\n+\"class Interpolation:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = __match_args__ = ('value', 'expression', 'conversion', 'format_spec')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Interpolation is immutable')\\n\"\n+\"    def __new__(cls, value, expression='', conversion=None, format_spec=''):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'value', value)\\n\"\n+\"        super().__setattr__(obj, 'expression', expression)\\n\"\n+\"        super().__setattr__(obj, 'conversion', conversion)\\n\"\n+\"        super().__setattr__(obj, 'format_spec', format_spec)\\n\"\n+\"        return obj\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Interpolation({self.value!r}, {self.expression!r}, {self.conversion!r}, {self.format_spec!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython\\n\"\n+\"        return (type(self), (self.value, self.expression, self.conversion, self.format_spec))\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Interpolation is not an acceptable base type')\\n\"\n+\"class Template:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = ('strings', 'interpolations')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Template is immutable')\\n\"\n+\"    @classmethod\\n\"\n+\"    def _from_strings_and_interpolations(cls, strings, interpolations):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'strings', tuple(strings))\\n\"\n+\"        super().__setattr__(obj, 'interpolations', tuple(interpolations))\\n\"\n+\"        return obj\\n\"\n+\"    def __new__(cls, *args):\\n\"\n+\"        last_string = ''\\n\"\n+\"        strings = []\\n\"\n+\"        interpolations = []\\n\"\n+\"        for arg in args:\\n\"\n+\"            if isinstance(arg, str):\\n\"\n+\"                last_string += arg\\n\"\n+\"            elif isinstance(arg, Interpolation):\\n\"\n+\"                strings.append(last_string)\\n\"\n+\"                last_string = ''\\n\"\n+\"                interpolations.append(arg)\\n\"\n+\"            else:\\n\"\n+\"                raise TypeError('Unexpected argument to Template')\\n\"\n+\"        strings.append(last_string)\\n\"\n+\"        return cls._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Template(strings={self.strings!r}, interpolations={self.interpolations!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython.\\n\"\n+\"        # It also doesn't quite match how CPython pickles them.\\n\"\n+\"        values = tuple(iter(self))\\n\"\n+\"        return (type(self), values)\\n\"\n+\"    def __iter__(self):\\n\"\n+\"        for n in range(len(self.interpolations)):\\n\"\n+\"            if (s := self.strings[n]):\\n\"\n+\"               yield s\\n\"\n+\"            yield self.interpolations[n]\\n\"\n+\"        if (s := self.strings[-1]):\\n\"\n+\"           yield s\\n\"\n+\"    def __add__(self, other):\\n\"\n+\"        if not (isinstance(self, Template) and isinstance(other, Template)):\\n\"\n+\"            raise TypeError('can only concatenate Template to Template')\\n\"\n+\"        interpolations = self.interpolations + other.interpolations\\n\"\n+\"        middle_string = self.strings[-1] + other.strings[0]\\n\"\n+\"        strings = self.strings[:-1] + (middle_string,) + other.strings[1:]\\n\"\n+\"        return Template._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    @property\\n\"\n+\"    def values(self):\\n\"\n+\"        return tuple(i.value for i in self.interpolations)\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Template is not an acceptable base type')\\n\";\n+\n+    PyObject *code=NULL, *eval_result=NULL, *module=NULL, *module_dict=NULL;\n+    PyObject *dict = PyDict_New();\n+    if (unlikely(!dict)) return NULL;\n+\n+    code = Py_CompileString(code_str, \"<cython string.templatelib fallback>\", Py_file_input);\n+    if (unlikely(!code)) goto end;\n+    eval_result = PyEval_EvalCode(code, dict, dict);\n+    Py_DECREF(code);\n+    if (unlikely(!eval_result)) goto end;\n+    Py_DECREF(eval_result);\n+\n+    module = __Pyx_PyImport_AddModuleRef(\"string.templatelib\");\n+    if (!module) goto end;\n+    module_dict = PyModule_GetDict(module);\n+    if (!module_dict) goto bad;\n+    if (unlikely(PyDict_Merge(module_dict, dict, 0) < 0)) goto bad;\n+\n+  end:\n+    Py_XDECREF(dict);\n+    return module;\n+  bad:\n+    Py_CLEAR(module);\n+    goto end;\n+}\n+#endif\n+\n+static int __Pyx_InitializeTemplateLib(void) {\n+    // Even in earlier versions of Python, still try the import. We're happy\n+    // to use what's there if someone's patched it with something compatible.\n+    PyObject *templatelib = PyImport_ImportModule(\"string.templatelib\");",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296597222",
            "id": 2296597222,
            "line": 157,
            "node_id": "PRRC_kwDOABDGAc6I40rm",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 146,
            "original_position": 146,
            "original_start_line": null,
            "path": "Cython/Utility/TString.c",
            "position": 157,
            "pull_request_review_id": 3149260907,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296597222/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-24T10:34:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296597222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296600874"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296600874"
                }
            },
            "author_association": "MEMBER",
            "body": "Does the Template's `__new__` need to do that? It seems that it could equally well work with one alternating list of str+interpolation values. A `str` type check is very fast and could be used as point of distinction wherever necessary. It seems to me that this could simplify a couple of Template methods.",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-08-24T10:15:29Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. \n+    const char code_str[] =\n+\"class Interpolation:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = __match_args__ = ('value', 'expression', 'conversion', 'format_spec')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Interpolation is immutable')\\n\"\n+\"    def __new__(cls, value, expression='', conversion=None, format_spec=''):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'value', value)\\n\"\n+\"        super().__setattr__(obj, 'expression', expression)\\n\"\n+\"        super().__setattr__(obj, 'conversion', conversion)\\n\"\n+\"        super().__setattr__(obj, 'format_spec', format_spec)\\n\"\n+\"        return obj\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Interpolation({self.value!r}, {self.expression!r}, {self.conversion!r}, {self.format_spec!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython\\n\"\n+\"        return (type(self), (self.value, self.expression, self.conversion, self.format_spec))\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Interpolation is not an acceptable base type')\\n\"\n+\"class Template:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = ('strings', 'interpolations')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Template is immutable')\\n\"\n+\"    @classmethod\\n\"\n+\"    def _from_strings_and_interpolations(cls, strings, interpolations):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'strings', tuple(strings))\\n\"\n+\"        super().__setattr__(obj, 'interpolations', tuple(interpolations))\\n\"\n+\"        return obj\\n\"\n+\"    def __new__(cls, *args):\\n\"\n+\"        last_string = ''\\n\"\n+\"        strings = []\\n\"\n+\"        interpolations = []\\n\"\n+\"        for arg in args:\\n\"\n+\"            if isinstance(arg, str):\\n\"\n+\"                last_string += arg\\n\"\n+\"            elif isinstance(arg, Interpolation):\\n\"\n+\"                strings.append(last_string)\\n\"\n+\"                last_string = ''\\n\"\n+\"                interpolations.append(arg)\\n\"\n+\"            else:\\n\"\n+\"                raise TypeError('Unexpected argument to Template')\\n\"\n+\"        strings.append(last_string)\\n\"\n+\"        return cls._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Template(strings={self.strings!r}, interpolations={self.interpolations!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython.\\n\"\n+\"        # It also doesn't quite match how CPython pickles them.\\n\"\n+\"        values = tuple(iter(self))\\n\"\n+\"        return (type(self), values)\\n\"\n+\"    def __iter__(self):\\n\"\n+\"        for n in range(len(self.interpolations)):\\n\"\n+\"            if (s := self.strings[n]):\\n\"\n+\"               yield s\\n\"\n+\"            yield self.interpolations[n]\\n\"\n+\"        if (s := self.strings[-1]):\\n\"\n+\"           yield s\\n\"\n+\"    def __add__(self, other):\\n\"\n+\"        if not (isinstance(self, Template) and isinstance(other, Template)):\\n\"\n+\"            raise TypeError('can only concatenate Template to Template')\\n\"\n+\"        interpolations = self.interpolations + other.interpolations\\n\"\n+\"        middle_string = self.strings[-1] + other.strings[0]\\n\"\n+\"        strings = self.strings[:-1] + (middle_string,) + other.strings[1:]\\n\"\n+\"        return Template._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    @property\\n\"\n+\"    def values(self):\\n\"\n+\"        return tuple(i.value for i in self.interpolations)\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Template is not an acceptable base type')\\n\";\n+\n+    PyObject *code=NULL, *eval_result=NULL, *module=NULL, *module_dict=NULL;\n+    PyObject *dict = PyDict_New();\n+    if (unlikely(!dict)) return NULL;\n+\n+    code = Py_CompileString(code_str, \"<cython string.templatelib fallback>\", Py_file_input);\n+    if (unlikely(!code)) goto end;\n+    eval_result = PyEval_EvalCode(code, dict, dict);\n+    Py_DECREF(code);\n+    if (unlikely(!eval_result)) goto end;\n+    Py_DECREF(eval_result);\n+\n+    module = __Pyx_PyImport_AddModuleRef(\"string.templatelib\");\n+    if (!module) goto end;\n+    module_dict = PyModule_GetDict(module);\n+    if (!module_dict) goto bad;\n+    if (unlikely(PyDict_Merge(module_dict, dict, 0) < 0)) goto bad;\n+\n+  end:\n+    Py_XDECREF(dict);\n+    return module;\n+  bad:\n+    Py_CLEAR(module);\n+    goto end;\n+}\n+#endif\n+\n+static int __Pyx_InitializeTemplateLib(void) {\n+    // Even in earlier versions of Python, still try the import. We're happy\n+    // to use what's there if someone's patched it with something compatible.\n+    PyObject *templatelib = PyImport_ImportModule(\"string.templatelib\");\n+    if (!templatelib) {\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+        templatelib = __Pyx_TemplateLibFallback();\n+        if (!templatelib)\n+#endif\n+        return -1;\n+    }\n+    PyObject *template_=NULL, *interpolation=NULL;\n+    int result = -1;\n+    template_ = PyObject_GetAttrString(templatelib, \"Template\");\n+    if (unlikely(!template_)) goto end;\n+    interpolation = PyObject_GetAttrString(templatelib, \"Interpolation\");\n+    if (unlikely(!interpolation)) goto end;\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_nonatomic_ptr_type expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Template), &expected, template_)) {\n+        // Already written - that's fine.\n+        Py_DECREF(template_);\n+    }\n+    expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Interpolation), &expected, interpolation)) {\n+        // Already written - that's fine.\n+        Py_DECREF(interpolation);\n+    }\n+#else\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Template))) {\n+        Py_DECREF(template_);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Template) = template_;\n+    }\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Interpolation))) {\n+        Py_DECREF(interpolation);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Interpolation) = interpolation;\n+    }\n+#endif\n+    result = 0;\n+\n+  end:\n+    Py_DECREF(templatelib);\n+    Py_XDECREF(template_);\n+    Py_XDECREF(interpolation);\n+    return result;\n+}\n+\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template) {\n+    PyObject *lookup;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_atomic_ptr_type* ptr;\n+#else\n+    PyObject **ptr;\n+#endif\n+    ptr = is_template ? &CGLOBAL(__pyx_templatelib_Template) : &CGLOBAL(__pyx_templatelib_Interpolation);\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    lookup = (PyObject*)__pyx_atomic_pointer_load_relaxed(ptr);\n+#else\n+    lookup = *ptr;\n+#endif\n+    if (unlikely(!lookup)) {\n+        if (unlikely(__Pyx_InitializeTemplateLib()) < 0) return NULL;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+        lookup = (PyObject*)__pyx_atomic_pointer_load_acquire(ptr);\n+#else\n+        lookup = *ptr;\n+#endif\n+    }\n+    Py_XINCREF(lookup);\n+    return lookup;\n+}\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template) {\n+    static PyMutex mutex = {0};\n+    PyMutex_Lock(&mutex);\n+    PyObject *result = __Pyx__GetObjectFromTemplateLib(is_template);\n+    PyMutex_Unlock(&mutex);\n+    return result;\n+}\n+#endif\n+\n+\n+\n+\n+//////////////////////////// MakeTemplateLibInterpolation.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec); /* proto */\n+\n+//////////////////////////// MakeTemplateLibInterpolation ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCall\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(0);\n+    if (unlikely(!tp)) return NULL;\n+    PyObject *args[] = {value, expression, conversion_char, format_spec};\n+\n+    PyObject *result = __Pyx_PyObject_FastCallDict(tp, args, 4, NULL);\n+    Py_DECREF(tp);\n+\n+    return result;\n+}\n+\n+//////////////////////////// MakeTemplateLibTemplate.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations); /* proto */\n+\n+//////////////////////////// MakeTemplateLibTemplate ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCallMethod\n+\n+#if PY_VERSION_HEX >= 0x030E0000 && CYTHON_COMPILING_IN_CPYTHON\n+#ifndef Py_BUILD_CORE\n+#define Py_BUILD_CORE\n+#endif\n+#include \"internal/pycore_template.h\"\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    (void)__Pyx_GetObjectFromTemplateLib;\n+    return _PyTemplate_Build(strings, interpolations);\n+}\n+#else\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(1);\n+    PyObject *result = NULL, *zipped_tuple = NULL;\n+    Py_ssize_t zipped_index = 0;\n+    if (unlikely(!tp)) return NULL;\n+    \n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+    if (__Pyx_get_runtime_version() < 0x030E0000) {\n+        // There's a high chance (but not certain) that we're using our internal\n+        // fallback version of template. In this case we can try to use a better\n+        // constructor. \n+        PyObject *args[] = { tp, strings, interpolations };\n+        PyObject *name = PyUnicode_FromString(\"_from_strings_and_interpolations\");\n+        if (unlikely(!name)) goto failed_shortcut;\n+        result = __Pyx_PyObject_FastCallMethod(name, args, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n+        Py_DECREF(name);\n+        if (result) {\n+            Py_DECREF(tp);\n+            return result;\n+        }\n+\n+      failed_shortcut:\n+        PyErr_Clear();\n+    }\n+#endif\n+\n+    // Slightly frustratingly, we have to go to the trouble of zipping together\n+    // the strings and the interpolations. And then internally the Template does\n+    // the exact opposite. ",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296600874",
            "id": 2296600874,
            "line": 316,
            "node_id": "PRRC_kwDOABDGAc6I41kq",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 298,
            "original_position": 298,
            "original_start_line": 296,
            "path": "Cython/Utility/TString.c",
            "position": 316,
            "pull_request_review_id": 3149260907,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296600874/reactions"
            },
            "side": "RIGHT",
            "start_line": 314,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T10:34:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296600874",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296603559"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296603559"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\n\r\n```",
            "commit_id": "494609200193f03f47231d3e9bb48aa6cd6af713",
            "created_at": "2025-08-24T10:24:35Z",
            "diff_hunk": "@@ -15424,3 +15424,117 @@ def analyse_expressions(self, env):\n         if self.name_node:\n             return self.name_node.analyse_expressions(env)\n         return self  # error earlier\n+\n+\n+class TStringInterpolationNode(ExprNode):\n+    # conversion_char   str\n+    subexprs = ['value', 'format_spec', 'expression_str']\n+    is_temp = True\n+    type = py_object_type\n+\n+    def __init__(self, pos, **kwds):\n+        super().__init__(pos, **kwds)\n+        if self.conversion_char is not None:\n+            self.conversion_char = StringEncoding.EncodedString(\n+                self.conversion_char)\n+\n+    def analyse_declarations(self, env):\n+        self.value.analyse_declarations(env)\n+        if self.format_spec is not None:\n+            self.format_spec.analyse_declarations(env)\n+        self.expression_str.analyse_declarations(env)\n+\n+    def analyse_types(self, env):\n+        self.value = self.value.analyse_types(env).coerce_to_pyobject(env)\n+        if self.conversion_char is not None and self.format_spec is None:\n+            self.format_spec = UnicodeNode(\n+                self.pos, value=StringEncoding.EncodedString(\"\"))\n+        if self.format_spec is not None:\n+            self.format_spec = self.format_spec.analyse_types(env)\n+        self.expression_str = self.expression_str.analyse_types(env)\n+        return self\n+\n+    def generate_result_code(self, code):\n+        code.globalstate.use_utility_code(\n+            UtilityCode.load_cached(\n+                \"MakeTemplateLibInterpolation\", \"TString.c\"\n+            ))\n+        value = self.value.result()\n+        expression = self.expression_str.result()\n+        conversion_char = (\n+            code.get_py_string_const(self.conversion_char) if self.conversion_char\n+            else \"__Pyx_NewRef(Py_None)\")\n+        format_spec = (\n+            self.format_spec.result() if self.format_spec is not None\n+            else code.name_in_module_state(Naming.empty_unicode))\n+        code.putln(f\"{self.result()} = __Pyx_MakeTemplateLibInterpolation({value}, {expression}, {conversion_char}, {format_spec});\")\n+        code.putln(code.error_goto_if_null(self.result(), self.pos))\n+        code.put_gotref(self.result(), py_object_type)\n+\n+\n+",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296603559",
            "id": 2296603559,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6I42On",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 15475,
            "original_position": 52,
            "original_start_line": 15473,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": 1,
            "pull_request_review_id": 3149260907,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296603559/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T10:34:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296603559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296606156"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296606156"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm, yes, having every Cython module that uses t-strings come with its own compiled implementation seems fairly wasteful. I wonder if we should provide a backport package instead that users could install separately and that Cython modules could import (and just fail if it's missing). I think that's the usual way of dealing with new feature packages.",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-08-24T10:33:43Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. ",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296606156",
            "id": 2296606156,
            "line": 43,
            "node_id": "PRRC_kwDOABDGAc6I423M",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 43,
            "original_position": 43,
            "original_start_line": 41,
            "path": "Cython/Utility/TString.c",
            "position": 43,
            "pull_request_review_id": 3149260907,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296606156/reactions"
            },
            "side": "RIGHT",
            "start_line": 41,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T10:34:27Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296606156",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296608557"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296608557"
                }
            },
            "author_association": "MEMBER",
            "body": "There's a few ways that this question could be interpreted.\r\n\r\n> Does the Template's `__new__` need to do that?\r\n\r\nIf `Template` is just for our use then, no. We could just use an alternating list. We think that users might import our `Template` and try to instantiate it themselves, then we should follow the correct interface and it does need to do this.\r\n\r\nHowever - there's also the question of \"could `__Pyx_MakeTemplateLibTemplate` just accept an alternating list and pass it on to the `Template` constructor?\"  That seems like it might be sensible.",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-08-24T10:43:15Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. \n+    const char code_str[] =\n+\"class Interpolation:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = __match_args__ = ('value', 'expression', 'conversion', 'format_spec')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Interpolation is immutable')\\n\"\n+\"    def __new__(cls, value, expression='', conversion=None, format_spec=''):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'value', value)\\n\"\n+\"        super().__setattr__(obj, 'expression', expression)\\n\"\n+\"        super().__setattr__(obj, 'conversion', conversion)\\n\"\n+\"        super().__setattr__(obj, 'format_spec', format_spec)\\n\"\n+\"        return obj\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Interpolation({self.value!r}, {self.expression!r}, {self.conversion!r}, {self.format_spec!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython\\n\"\n+\"        return (type(self), (self.value, self.expression, self.conversion, self.format_spec))\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Interpolation is not an acceptable base type')\\n\"\n+\"class Template:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = ('strings', 'interpolations')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Template is immutable')\\n\"\n+\"    @classmethod\\n\"\n+\"    def _from_strings_and_interpolations(cls, strings, interpolations):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'strings', tuple(strings))\\n\"\n+\"        super().__setattr__(obj, 'interpolations', tuple(interpolations))\\n\"\n+\"        return obj\\n\"\n+\"    def __new__(cls, *args):\\n\"\n+\"        last_string = ''\\n\"\n+\"        strings = []\\n\"\n+\"        interpolations = []\\n\"\n+\"        for arg in args:\\n\"\n+\"            if isinstance(arg, str):\\n\"\n+\"                last_string += arg\\n\"\n+\"            elif isinstance(arg, Interpolation):\\n\"\n+\"                strings.append(last_string)\\n\"\n+\"                last_string = ''\\n\"\n+\"                interpolations.append(arg)\\n\"\n+\"            else:\\n\"\n+\"                raise TypeError('Unexpected argument to Template')\\n\"\n+\"        strings.append(last_string)\\n\"\n+\"        return cls._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Template(strings={self.strings!r}, interpolations={self.interpolations!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython.\\n\"\n+\"        # It also doesn't quite match how CPython pickles them.\\n\"\n+\"        values = tuple(iter(self))\\n\"\n+\"        return (type(self), values)\\n\"\n+\"    def __iter__(self):\\n\"\n+\"        for n in range(len(self.interpolations)):\\n\"\n+\"            if (s := self.strings[n]):\\n\"\n+\"               yield s\\n\"\n+\"            yield self.interpolations[n]\\n\"\n+\"        if (s := self.strings[-1]):\\n\"\n+\"           yield s\\n\"\n+\"    def __add__(self, other):\\n\"\n+\"        if not (isinstance(self, Template) and isinstance(other, Template)):\\n\"\n+\"            raise TypeError('can only concatenate Template to Template')\\n\"\n+\"        interpolations = self.interpolations + other.interpolations\\n\"\n+\"        middle_string = self.strings[-1] + other.strings[0]\\n\"\n+\"        strings = self.strings[:-1] + (middle_string,) + other.strings[1:]\\n\"\n+\"        return Template._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    @property\\n\"\n+\"    def values(self):\\n\"\n+\"        return tuple(i.value for i in self.interpolations)\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Template is not an acceptable base type')\\n\";\n+\n+    PyObject *code=NULL, *eval_result=NULL, *module=NULL, *module_dict=NULL;\n+    PyObject *dict = PyDict_New();\n+    if (unlikely(!dict)) return NULL;\n+\n+    code = Py_CompileString(code_str, \"<cython string.templatelib fallback>\", Py_file_input);\n+    if (unlikely(!code)) goto end;\n+    eval_result = PyEval_EvalCode(code, dict, dict);\n+    Py_DECREF(code);\n+    if (unlikely(!eval_result)) goto end;\n+    Py_DECREF(eval_result);\n+\n+    module = __Pyx_PyImport_AddModuleRef(\"string.templatelib\");\n+    if (!module) goto end;\n+    module_dict = PyModule_GetDict(module);\n+    if (!module_dict) goto bad;\n+    if (unlikely(PyDict_Merge(module_dict, dict, 0) < 0)) goto bad;\n+\n+  end:\n+    Py_XDECREF(dict);\n+    return module;\n+  bad:\n+    Py_CLEAR(module);\n+    goto end;\n+}\n+#endif\n+\n+static int __Pyx_InitializeTemplateLib(void) {\n+    // Even in earlier versions of Python, still try the import. We're happy\n+    // to use what's there if someone's patched it with something compatible.\n+    PyObject *templatelib = PyImport_ImportModule(\"string.templatelib\");\n+    if (!templatelib) {\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+        templatelib = __Pyx_TemplateLibFallback();\n+        if (!templatelib)\n+#endif\n+        return -1;\n+    }\n+    PyObject *template_=NULL, *interpolation=NULL;\n+    int result = -1;\n+    template_ = PyObject_GetAttrString(templatelib, \"Template\");\n+    if (unlikely(!template_)) goto end;\n+    interpolation = PyObject_GetAttrString(templatelib, \"Interpolation\");\n+    if (unlikely(!interpolation)) goto end;\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_nonatomic_ptr_type expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Template), &expected, template_)) {\n+        // Already written - that's fine.\n+        Py_DECREF(template_);\n+    }\n+    expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Interpolation), &expected, interpolation)) {\n+        // Already written - that's fine.\n+        Py_DECREF(interpolation);\n+    }\n+#else\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Template))) {\n+        Py_DECREF(template_);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Template) = template_;\n+    }\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Interpolation))) {\n+        Py_DECREF(interpolation);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Interpolation) = interpolation;\n+    }\n+#endif\n+    result = 0;\n+\n+  end:\n+    Py_DECREF(templatelib);\n+    Py_XDECREF(template_);\n+    Py_XDECREF(interpolation);\n+    return result;\n+}\n+\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template) {\n+    PyObject *lookup;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_atomic_ptr_type* ptr;\n+#else\n+    PyObject **ptr;\n+#endif\n+    ptr = is_template ? &CGLOBAL(__pyx_templatelib_Template) : &CGLOBAL(__pyx_templatelib_Interpolation);\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    lookup = (PyObject*)__pyx_atomic_pointer_load_relaxed(ptr);\n+#else\n+    lookup = *ptr;\n+#endif\n+    if (unlikely(!lookup)) {\n+        if (unlikely(__Pyx_InitializeTemplateLib()) < 0) return NULL;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+        lookup = (PyObject*)__pyx_atomic_pointer_load_acquire(ptr);\n+#else\n+        lookup = *ptr;\n+#endif\n+    }\n+    Py_XINCREF(lookup);\n+    return lookup;\n+}\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template) {\n+    static PyMutex mutex = {0};\n+    PyMutex_Lock(&mutex);\n+    PyObject *result = __Pyx__GetObjectFromTemplateLib(is_template);\n+    PyMutex_Unlock(&mutex);\n+    return result;\n+}\n+#endif\n+\n+\n+\n+\n+//////////////////////////// MakeTemplateLibInterpolation.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec); /* proto */\n+\n+//////////////////////////// MakeTemplateLibInterpolation ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCall\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(0);\n+    if (unlikely(!tp)) return NULL;\n+    PyObject *args[] = {value, expression, conversion_char, format_spec};\n+\n+    PyObject *result = __Pyx_PyObject_FastCallDict(tp, args, 4, NULL);\n+    Py_DECREF(tp);\n+\n+    return result;\n+}\n+\n+//////////////////////////// MakeTemplateLibTemplate.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations); /* proto */\n+\n+//////////////////////////// MakeTemplateLibTemplate ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCallMethod\n+\n+#if PY_VERSION_HEX >= 0x030E0000 && CYTHON_COMPILING_IN_CPYTHON\n+#ifndef Py_BUILD_CORE\n+#define Py_BUILD_CORE\n+#endif\n+#include \"internal/pycore_template.h\"\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    (void)__Pyx_GetObjectFromTemplateLib;\n+    return _PyTemplate_Build(strings, interpolations);\n+}\n+#else\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(1);\n+    PyObject *result = NULL, *zipped_tuple = NULL;\n+    Py_ssize_t zipped_index = 0;\n+    if (unlikely(!tp)) return NULL;\n+    \n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+    if (__Pyx_get_runtime_version() < 0x030E0000) {\n+        // There's a high chance (but not certain) that we're using our internal\n+        // fallback version of template. In this case we can try to use a better\n+        // constructor. \n+        PyObject *args[] = { tp, strings, interpolations };\n+        PyObject *name = PyUnicode_FromString(\"_from_strings_and_interpolations\");\n+        if (unlikely(!name)) goto failed_shortcut;\n+        result = __Pyx_PyObject_FastCallMethod(name, args, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n+        Py_DECREF(name);\n+        if (result) {\n+            Py_DECREF(tp);\n+            return result;\n+        }\n+\n+      failed_shortcut:\n+        PyErr_Clear();\n+    }\n+#endif\n+\n+    // Slightly frustratingly, we have to go to the trouble of zipping together\n+    // the strings and the interpolations. And then internally the Template does\n+    // the exact opposite. ",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296608557",
            "id": 2296608557,
            "in_reply_to_id": 2296600874,
            "line": 316,
            "node_id": "PRRC_kwDOABDGAc6I43ct",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 298,
            "original_position": 298,
            "original_start_line": 296,
            "path": "Cython/Utility/TString.c",
            "position": 316,
            "pull_request_review_id": 3149283043,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296608557/reactions"
            },
            "side": "RIGHT",
            "start_line": 314,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T10:43:15Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296608557",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296613301"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296613301"
                }
            },
            "author_association": "MEMBER",
            "body": "There's a couple of backport packages already: https://pypi.org/project/future-tstrings/, https://pypi.org/project/tstrings-backport/. So I don't think _we_ need to provide a third.\r\n\r\nI think (but haven't tested yet) that Cython should work fine with them - they provide `string.templatelib` so the import succeeds and we just end up using their class instead of ours.  Although the one where I can find the source on github looks like it's also pure Python.\r\n\r\nI think this is a reasonable compromise to start with - for the cost of a 3.5KB string, we can provide a useable (but not ultra-fast) backport and if someone's already installed a better backport then we can use that instead.",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-08-24T10:58:20Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. ",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296613301",
            "id": 2296613301,
            "in_reply_to_id": 2296606156,
            "line": 43,
            "node_id": "PRRC_kwDOABDGAc6I44m1",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 43,
            "original_position": 43,
            "original_start_line": 41,
            "path": "Cython/Utility/TString.c",
            "position": 43,
            "pull_request_review_id": 3149287859,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296613301/reactions"
            },
            "side": "RIGHT",
            "start_line": 41,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T10:58:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296613301",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296613885"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296613885"
                }
            },
            "author_association": "MEMBER",
            "body": "> we should follow the correct interface and it does need to do this.\r\n\r\nThe way I read it, `strings` and `interpolations` could also be provided as properties, with an internal list storing both in alternation.\r\n\r\nI'm unsure why the implementation in Python separates both. It doesn't look beneficial to me. Even all the examples in the PEP handle both in a flow of alternating str/interpolation objects, like, *all* of them. It seems needlessly inefficient to use a different storage than what the use cases suggest.",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-08-24T11:00:34Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. \n+    const char code_str[] =\n+\"class Interpolation:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = __match_args__ = ('value', 'expression', 'conversion', 'format_spec')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Interpolation is immutable')\\n\"\n+\"    def __new__(cls, value, expression='', conversion=None, format_spec=''):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'value', value)\\n\"\n+\"        super().__setattr__(obj, 'expression', expression)\\n\"\n+\"        super().__setattr__(obj, 'conversion', conversion)\\n\"\n+\"        super().__setattr__(obj, 'format_spec', format_spec)\\n\"\n+\"        return obj\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Interpolation({self.value!r}, {self.expression!r}, {self.conversion!r}, {self.format_spec!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython\\n\"\n+\"        return (type(self), (self.value, self.expression, self.conversion, self.format_spec))\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Interpolation is not an acceptable base type')\\n\"\n+\"class Template:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = ('strings', 'interpolations')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Template is immutable')\\n\"\n+\"    @classmethod\\n\"\n+\"    def _from_strings_and_interpolations(cls, strings, interpolations):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'strings', tuple(strings))\\n\"\n+\"        super().__setattr__(obj, 'interpolations', tuple(interpolations))\\n\"\n+\"        return obj\\n\"\n+\"    def __new__(cls, *args):\\n\"\n+\"        last_string = ''\\n\"\n+\"        strings = []\\n\"\n+\"        interpolations = []\\n\"\n+\"        for arg in args:\\n\"\n+\"            if isinstance(arg, str):\\n\"\n+\"                last_string += arg\\n\"\n+\"            elif isinstance(arg, Interpolation):\\n\"\n+\"                strings.append(last_string)\\n\"\n+\"                last_string = ''\\n\"\n+\"                interpolations.append(arg)\\n\"\n+\"            else:\\n\"\n+\"                raise TypeError('Unexpected argument to Template')\\n\"\n+\"        strings.append(last_string)\\n\"\n+\"        return cls._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Template(strings={self.strings!r}, interpolations={self.interpolations!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython.\\n\"\n+\"        # It also doesn't quite match how CPython pickles them.\\n\"\n+\"        values = tuple(iter(self))\\n\"\n+\"        return (type(self), values)\\n\"\n+\"    def __iter__(self):\\n\"\n+\"        for n in range(len(self.interpolations)):\\n\"\n+\"            if (s := self.strings[n]):\\n\"\n+\"               yield s\\n\"\n+\"            yield self.interpolations[n]\\n\"\n+\"        if (s := self.strings[-1]):\\n\"\n+\"           yield s\\n\"\n+\"    def __add__(self, other):\\n\"\n+\"        if not (isinstance(self, Template) and isinstance(other, Template)):\\n\"\n+\"            raise TypeError('can only concatenate Template to Template')\\n\"\n+\"        interpolations = self.interpolations + other.interpolations\\n\"\n+\"        middle_string = self.strings[-1] + other.strings[0]\\n\"\n+\"        strings = self.strings[:-1] + (middle_string,) + other.strings[1:]\\n\"\n+\"        return Template._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    @property\\n\"\n+\"    def values(self):\\n\"\n+\"        return tuple(i.value for i in self.interpolations)\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Template is not an acceptable base type')\\n\";\n+\n+    PyObject *code=NULL, *eval_result=NULL, *module=NULL, *module_dict=NULL;\n+    PyObject *dict = PyDict_New();\n+    if (unlikely(!dict)) return NULL;\n+\n+    code = Py_CompileString(code_str, \"<cython string.templatelib fallback>\", Py_file_input);\n+    if (unlikely(!code)) goto end;\n+    eval_result = PyEval_EvalCode(code, dict, dict);\n+    Py_DECREF(code);\n+    if (unlikely(!eval_result)) goto end;\n+    Py_DECREF(eval_result);\n+\n+    module = __Pyx_PyImport_AddModuleRef(\"string.templatelib\");\n+    if (!module) goto end;\n+    module_dict = PyModule_GetDict(module);\n+    if (!module_dict) goto bad;\n+    if (unlikely(PyDict_Merge(module_dict, dict, 0) < 0)) goto bad;\n+\n+  end:\n+    Py_XDECREF(dict);\n+    return module;\n+  bad:\n+    Py_CLEAR(module);\n+    goto end;\n+}\n+#endif\n+\n+static int __Pyx_InitializeTemplateLib(void) {\n+    // Even in earlier versions of Python, still try the import. We're happy\n+    // to use what's there if someone's patched it with something compatible.\n+    PyObject *templatelib = PyImport_ImportModule(\"string.templatelib\");\n+    if (!templatelib) {\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+        templatelib = __Pyx_TemplateLibFallback();\n+        if (!templatelib)\n+#endif\n+        return -1;\n+    }\n+    PyObject *template_=NULL, *interpolation=NULL;\n+    int result = -1;\n+    template_ = PyObject_GetAttrString(templatelib, \"Template\");\n+    if (unlikely(!template_)) goto end;\n+    interpolation = PyObject_GetAttrString(templatelib, \"Interpolation\");\n+    if (unlikely(!interpolation)) goto end;\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_nonatomic_ptr_type expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Template), &expected, template_)) {\n+        // Already written - that's fine.\n+        Py_DECREF(template_);\n+    }\n+    expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Interpolation), &expected, interpolation)) {\n+        // Already written - that's fine.\n+        Py_DECREF(interpolation);\n+    }\n+#else\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Template))) {\n+        Py_DECREF(template_);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Template) = template_;\n+    }\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Interpolation))) {\n+        Py_DECREF(interpolation);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Interpolation) = interpolation;\n+    }\n+#endif\n+    result = 0;\n+\n+  end:\n+    Py_DECREF(templatelib);\n+    Py_XDECREF(template_);\n+    Py_XDECREF(interpolation);\n+    return result;\n+}\n+\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template) {\n+    PyObject *lookup;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_atomic_ptr_type* ptr;\n+#else\n+    PyObject **ptr;\n+#endif\n+    ptr = is_template ? &CGLOBAL(__pyx_templatelib_Template) : &CGLOBAL(__pyx_templatelib_Interpolation);\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    lookup = (PyObject*)__pyx_atomic_pointer_load_relaxed(ptr);\n+#else\n+    lookup = *ptr;\n+#endif\n+    if (unlikely(!lookup)) {\n+        if (unlikely(__Pyx_InitializeTemplateLib()) < 0) return NULL;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+        lookup = (PyObject*)__pyx_atomic_pointer_load_acquire(ptr);\n+#else\n+        lookup = *ptr;\n+#endif\n+    }\n+    Py_XINCREF(lookup);\n+    return lookup;\n+}\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template) {\n+    static PyMutex mutex = {0};\n+    PyMutex_Lock(&mutex);\n+    PyObject *result = __Pyx__GetObjectFromTemplateLib(is_template);\n+    PyMutex_Unlock(&mutex);\n+    return result;\n+}\n+#endif\n+\n+\n+\n+\n+//////////////////////////// MakeTemplateLibInterpolation.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec); /* proto */\n+\n+//////////////////////////// MakeTemplateLibInterpolation ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCall\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(0);\n+    if (unlikely(!tp)) return NULL;\n+    PyObject *args[] = {value, expression, conversion_char, format_spec};\n+\n+    PyObject *result = __Pyx_PyObject_FastCallDict(tp, args, 4, NULL);\n+    Py_DECREF(tp);\n+\n+    return result;\n+}\n+\n+//////////////////////////// MakeTemplateLibTemplate.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations); /* proto */\n+\n+//////////////////////////// MakeTemplateLibTemplate ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCallMethod\n+\n+#if PY_VERSION_HEX >= 0x030E0000 && CYTHON_COMPILING_IN_CPYTHON\n+#ifndef Py_BUILD_CORE\n+#define Py_BUILD_CORE\n+#endif\n+#include \"internal/pycore_template.h\"\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    (void)__Pyx_GetObjectFromTemplateLib;\n+    return _PyTemplate_Build(strings, interpolations);\n+}\n+#else\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(1);\n+    PyObject *result = NULL, *zipped_tuple = NULL;\n+    Py_ssize_t zipped_index = 0;\n+    if (unlikely(!tp)) return NULL;\n+    \n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+    if (__Pyx_get_runtime_version() < 0x030E0000) {\n+        // There's a high chance (but not certain) that we're using our internal\n+        // fallback version of template. In this case we can try to use a better\n+        // constructor. \n+        PyObject *args[] = { tp, strings, interpolations };\n+        PyObject *name = PyUnicode_FromString(\"_from_strings_and_interpolations\");\n+        if (unlikely(!name)) goto failed_shortcut;\n+        result = __Pyx_PyObject_FastCallMethod(name, args, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n+        Py_DECREF(name);\n+        if (result) {\n+            Py_DECREF(tp);\n+            return result;\n+        }\n+\n+      failed_shortcut:\n+        PyErr_Clear();\n+    }\n+#endif\n+\n+    // Slightly frustratingly, we have to go to the trouble of zipping together\n+    // the strings and the interpolations. And then internally the Template does\n+    // the exact opposite. ",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296613885",
            "id": 2296613885,
            "in_reply_to_id": 2296600874,
            "line": 316,
            "node_id": "PRRC_kwDOABDGAc6I44v9",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 298,
            "original_position": 298,
            "original_start_line": 296,
            "path": "Cython/Utility/TString.c",
            "position": 316,
            "pull_request_review_id": 3149288595,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296613885/reactions"
            },
            "side": "RIGHT",
            "start_line": 314,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T11:00:35Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296613885",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296615295"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296615295"
                }
            },
            "author_association": "MEMBER",
            "body": "In pure Python 3.14\r\n\r\n```\r\n>>> from string.templatelib import Template, Interpolation\r\n>>> t = Template(\"hello \", \"world\")\r\n>>> t.strings\r\n('hello world',)\r\n>>> t = Template(Interpolation(1))\r\n>>> t\r\nTemplate(strings=('', ''), interpolations=(Interpolation(1, '', None, ''),))\r\n```\r\n\r\nThat doesn't preclude providing them as properties but means you have to put the logic for this somewhere - either in `__new__` or in the property.",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-08-24T11:05:39Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. \n+    const char code_str[] =\n+\"class Interpolation:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = __match_args__ = ('value', 'expression', 'conversion', 'format_spec')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Interpolation is immutable')\\n\"\n+\"    def __new__(cls, value, expression='', conversion=None, format_spec=''):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'value', value)\\n\"\n+\"        super().__setattr__(obj, 'expression', expression)\\n\"\n+\"        super().__setattr__(obj, 'conversion', conversion)\\n\"\n+\"        super().__setattr__(obj, 'format_spec', format_spec)\\n\"\n+\"        return obj\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Interpolation({self.value!r}, {self.expression!r}, {self.conversion!r}, {self.format_spec!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython\\n\"\n+\"        return (type(self), (self.value, self.expression, self.conversion, self.format_spec))\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Interpolation is not an acceptable base type')\\n\"\n+\"class Template:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = ('strings', 'interpolations')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Template is immutable')\\n\"\n+\"    @classmethod\\n\"\n+\"    def _from_strings_and_interpolations(cls, strings, interpolations):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'strings', tuple(strings))\\n\"\n+\"        super().__setattr__(obj, 'interpolations', tuple(interpolations))\\n\"\n+\"        return obj\\n\"\n+\"    def __new__(cls, *args):\\n\"\n+\"        last_string = ''\\n\"\n+\"        strings = []\\n\"\n+\"        interpolations = []\\n\"\n+\"        for arg in args:\\n\"\n+\"            if isinstance(arg, str):\\n\"\n+\"                last_string += arg\\n\"\n+\"            elif isinstance(arg, Interpolation):\\n\"\n+\"                strings.append(last_string)\\n\"\n+\"                last_string = ''\\n\"\n+\"                interpolations.append(arg)\\n\"\n+\"            else:\\n\"\n+\"                raise TypeError('Unexpected argument to Template')\\n\"\n+\"        strings.append(last_string)\\n\"\n+\"        return cls._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Template(strings={self.strings!r}, interpolations={self.interpolations!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython.\\n\"\n+\"        # It also doesn't quite match how CPython pickles them.\\n\"\n+\"        values = tuple(iter(self))\\n\"\n+\"        return (type(self), values)\\n\"\n+\"    def __iter__(self):\\n\"\n+\"        for n in range(len(self.interpolations)):\\n\"\n+\"            if (s := self.strings[n]):\\n\"\n+\"               yield s\\n\"\n+\"            yield self.interpolations[n]\\n\"\n+\"        if (s := self.strings[-1]):\\n\"\n+\"           yield s\\n\"\n+\"    def __add__(self, other):\\n\"\n+\"        if not (isinstance(self, Template) and isinstance(other, Template)):\\n\"\n+\"            raise TypeError('can only concatenate Template to Template')\\n\"\n+\"        interpolations = self.interpolations + other.interpolations\\n\"\n+\"        middle_string = self.strings[-1] + other.strings[0]\\n\"\n+\"        strings = self.strings[:-1] + (middle_string,) + other.strings[1:]\\n\"\n+\"        return Template._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    @property\\n\"\n+\"    def values(self):\\n\"\n+\"        return tuple(i.value for i in self.interpolations)\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Template is not an acceptable base type')\\n\";\n+\n+    PyObject *code=NULL, *eval_result=NULL, *module=NULL, *module_dict=NULL;\n+    PyObject *dict = PyDict_New();\n+    if (unlikely(!dict)) return NULL;\n+\n+    code = Py_CompileString(code_str, \"<cython string.templatelib fallback>\", Py_file_input);\n+    if (unlikely(!code)) goto end;\n+    eval_result = PyEval_EvalCode(code, dict, dict);\n+    Py_DECREF(code);\n+    if (unlikely(!eval_result)) goto end;\n+    Py_DECREF(eval_result);\n+\n+    module = __Pyx_PyImport_AddModuleRef(\"string.templatelib\");\n+    if (!module) goto end;\n+    module_dict = PyModule_GetDict(module);\n+    if (!module_dict) goto bad;\n+    if (unlikely(PyDict_Merge(module_dict, dict, 0) < 0)) goto bad;\n+\n+  end:\n+    Py_XDECREF(dict);\n+    return module;\n+  bad:\n+    Py_CLEAR(module);\n+    goto end;\n+}\n+#endif\n+\n+static int __Pyx_InitializeTemplateLib(void) {\n+    // Even in earlier versions of Python, still try the import. We're happy\n+    // to use what's there if someone's patched it with something compatible.\n+    PyObject *templatelib = PyImport_ImportModule(\"string.templatelib\");\n+    if (!templatelib) {\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+        templatelib = __Pyx_TemplateLibFallback();\n+        if (!templatelib)\n+#endif\n+        return -1;\n+    }\n+    PyObject *template_=NULL, *interpolation=NULL;\n+    int result = -1;\n+    template_ = PyObject_GetAttrString(templatelib, \"Template\");\n+    if (unlikely(!template_)) goto end;\n+    interpolation = PyObject_GetAttrString(templatelib, \"Interpolation\");\n+    if (unlikely(!interpolation)) goto end;\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_nonatomic_ptr_type expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Template), &expected, template_)) {\n+        // Already written - that's fine.\n+        Py_DECREF(template_);\n+    }\n+    expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Interpolation), &expected, interpolation)) {\n+        // Already written - that's fine.\n+        Py_DECREF(interpolation);\n+    }\n+#else\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Template))) {\n+        Py_DECREF(template_);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Template) = template_;\n+    }\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Interpolation))) {\n+        Py_DECREF(interpolation);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Interpolation) = interpolation;\n+    }\n+#endif\n+    result = 0;\n+\n+  end:\n+    Py_DECREF(templatelib);\n+    Py_XDECREF(template_);\n+    Py_XDECREF(interpolation);\n+    return result;\n+}\n+\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template) {\n+    PyObject *lookup;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_atomic_ptr_type* ptr;\n+#else\n+    PyObject **ptr;\n+#endif\n+    ptr = is_template ? &CGLOBAL(__pyx_templatelib_Template) : &CGLOBAL(__pyx_templatelib_Interpolation);\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    lookup = (PyObject*)__pyx_atomic_pointer_load_relaxed(ptr);\n+#else\n+    lookup = *ptr;\n+#endif\n+    if (unlikely(!lookup)) {\n+        if (unlikely(__Pyx_InitializeTemplateLib()) < 0) return NULL;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+        lookup = (PyObject*)__pyx_atomic_pointer_load_acquire(ptr);\n+#else\n+        lookup = *ptr;\n+#endif\n+    }\n+    Py_XINCREF(lookup);\n+    return lookup;\n+}\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template) {\n+    static PyMutex mutex = {0};\n+    PyMutex_Lock(&mutex);\n+    PyObject *result = __Pyx__GetObjectFromTemplateLib(is_template);\n+    PyMutex_Unlock(&mutex);\n+    return result;\n+}\n+#endif\n+\n+\n+\n+\n+//////////////////////////// MakeTemplateLibInterpolation.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec); /* proto */\n+\n+//////////////////////////// MakeTemplateLibInterpolation ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCall\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(0);\n+    if (unlikely(!tp)) return NULL;\n+    PyObject *args[] = {value, expression, conversion_char, format_spec};\n+\n+    PyObject *result = __Pyx_PyObject_FastCallDict(tp, args, 4, NULL);\n+    Py_DECREF(tp);\n+\n+    return result;\n+}\n+\n+//////////////////////////// MakeTemplateLibTemplate.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations); /* proto */\n+\n+//////////////////////////// MakeTemplateLibTemplate ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCallMethod\n+\n+#if PY_VERSION_HEX >= 0x030E0000 && CYTHON_COMPILING_IN_CPYTHON\n+#ifndef Py_BUILD_CORE\n+#define Py_BUILD_CORE\n+#endif\n+#include \"internal/pycore_template.h\"\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    (void)__Pyx_GetObjectFromTemplateLib;\n+    return _PyTemplate_Build(strings, interpolations);\n+}\n+#else\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(1);\n+    PyObject *result = NULL, *zipped_tuple = NULL;\n+    Py_ssize_t zipped_index = 0;\n+    if (unlikely(!tp)) return NULL;\n+    \n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+    if (__Pyx_get_runtime_version() < 0x030E0000) {\n+        // There's a high chance (but not certain) that we're using our internal\n+        // fallback version of template. In this case we can try to use a better\n+        // constructor. \n+        PyObject *args[] = { tp, strings, interpolations };\n+        PyObject *name = PyUnicode_FromString(\"_from_strings_and_interpolations\");\n+        if (unlikely(!name)) goto failed_shortcut;\n+        result = __Pyx_PyObject_FastCallMethod(name, args, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n+        Py_DECREF(name);\n+        if (result) {\n+            Py_DECREF(tp);\n+            return result;\n+        }\n+\n+      failed_shortcut:\n+        PyErr_Clear();\n+    }\n+#endif\n+\n+    // Slightly frustratingly, we have to go to the trouble of zipping together\n+    // the strings and the interpolations. And then internally the Template does\n+    // the exact opposite. ",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296615295",
            "id": 2296615295,
            "in_reply_to_id": 2296600874,
            "line": 316,
            "node_id": "PRRC_kwDOABDGAc6I45F_",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 298,
            "original_position": 298,
            "original_start_line": 296,
            "path": "Cython/Utility/TString.c",
            "position": 316,
            "pull_request_review_id": 3149290649,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296615295/reactions"
            },
            "side": "RIGHT",
            "start_line": 314,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T11:05:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296615295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296625083"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296625083"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It's because the strings are a constant, so all instances can reuse the same tuple.",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-08-24T11:39:23Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. \n+    const char code_str[] =\n+\"class Interpolation:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = __match_args__ = ('value', 'expression', 'conversion', 'format_spec')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Interpolation is immutable')\\n\"\n+\"    def __new__(cls, value, expression='', conversion=None, format_spec=''):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'value', value)\\n\"\n+\"        super().__setattr__(obj, 'expression', expression)\\n\"\n+\"        super().__setattr__(obj, 'conversion', conversion)\\n\"\n+\"        super().__setattr__(obj, 'format_spec', format_spec)\\n\"\n+\"        return obj\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Interpolation({self.value!r}, {self.expression!r}, {self.conversion!r}, {self.format_spec!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython\\n\"\n+\"        return (type(self), (self.value, self.expression, self.conversion, self.format_spec))\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Interpolation is not an acceptable base type')\\n\"\n+\"class Template:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = ('strings', 'interpolations')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Template is immutable')\\n\"\n+\"    @classmethod\\n\"\n+\"    def _from_strings_and_interpolations(cls, strings, interpolations):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'strings', tuple(strings))\\n\"\n+\"        super().__setattr__(obj, 'interpolations', tuple(interpolations))\\n\"\n+\"        return obj\\n\"\n+\"    def __new__(cls, *args):\\n\"\n+\"        last_string = ''\\n\"\n+\"        strings = []\\n\"\n+\"        interpolations = []\\n\"\n+\"        for arg in args:\\n\"\n+\"            if isinstance(arg, str):\\n\"\n+\"                last_string += arg\\n\"\n+\"            elif isinstance(arg, Interpolation):\\n\"\n+\"                strings.append(last_string)\\n\"\n+\"                last_string = ''\\n\"\n+\"                interpolations.append(arg)\\n\"\n+\"            else:\\n\"\n+\"                raise TypeError('Unexpected argument to Template')\\n\"\n+\"        strings.append(last_string)\\n\"\n+\"        return cls._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Template(strings={self.strings!r}, interpolations={self.interpolations!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython.\\n\"\n+\"        # It also doesn't quite match how CPython pickles them.\\n\"\n+\"        values = tuple(iter(self))\\n\"\n+\"        return (type(self), values)\\n\"\n+\"    def __iter__(self):\\n\"\n+\"        for n in range(len(self.interpolations)):\\n\"\n+\"            if (s := self.strings[n]):\\n\"\n+\"               yield s\\n\"\n+\"            yield self.interpolations[n]\\n\"\n+\"        if (s := self.strings[-1]):\\n\"\n+\"           yield s\\n\"\n+\"    def __add__(self, other):\\n\"\n+\"        if not (isinstance(self, Template) and isinstance(other, Template)):\\n\"\n+\"            raise TypeError('can only concatenate Template to Template')\\n\"\n+\"        interpolations = self.interpolations + other.interpolations\\n\"\n+\"        middle_string = self.strings[-1] + other.strings[0]\\n\"\n+\"        strings = self.strings[:-1] + (middle_string,) + other.strings[1:]\\n\"\n+\"        return Template._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    @property\\n\"\n+\"    def values(self):\\n\"\n+\"        return tuple(i.value for i in self.interpolations)\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Template is not an acceptable base type')\\n\";\n+\n+    PyObject *code=NULL, *eval_result=NULL, *module=NULL, *module_dict=NULL;\n+    PyObject *dict = PyDict_New();\n+    if (unlikely(!dict)) return NULL;\n+\n+    code = Py_CompileString(code_str, \"<cython string.templatelib fallback>\", Py_file_input);\n+    if (unlikely(!code)) goto end;\n+    eval_result = PyEval_EvalCode(code, dict, dict);\n+    Py_DECREF(code);\n+    if (unlikely(!eval_result)) goto end;\n+    Py_DECREF(eval_result);\n+\n+    module = __Pyx_PyImport_AddModuleRef(\"string.templatelib\");\n+    if (!module) goto end;\n+    module_dict = PyModule_GetDict(module);\n+    if (!module_dict) goto bad;\n+    if (unlikely(PyDict_Merge(module_dict, dict, 0) < 0)) goto bad;\n+\n+  end:\n+    Py_XDECREF(dict);\n+    return module;\n+  bad:\n+    Py_CLEAR(module);\n+    goto end;\n+}\n+#endif\n+\n+static int __Pyx_InitializeTemplateLib(void) {\n+    // Even in earlier versions of Python, still try the import. We're happy\n+    // to use what's there if someone's patched it with something compatible.\n+    PyObject *templatelib = PyImport_ImportModule(\"string.templatelib\");\n+    if (!templatelib) {\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+        templatelib = __Pyx_TemplateLibFallback();\n+        if (!templatelib)\n+#endif\n+        return -1;\n+    }\n+    PyObject *template_=NULL, *interpolation=NULL;\n+    int result = -1;\n+    template_ = PyObject_GetAttrString(templatelib, \"Template\");\n+    if (unlikely(!template_)) goto end;\n+    interpolation = PyObject_GetAttrString(templatelib, \"Interpolation\");\n+    if (unlikely(!interpolation)) goto end;\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_nonatomic_ptr_type expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Template), &expected, template_)) {\n+        // Already written - that's fine.\n+        Py_DECREF(template_);\n+    }\n+    expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Interpolation), &expected, interpolation)) {\n+        // Already written - that's fine.\n+        Py_DECREF(interpolation);\n+    }\n+#else\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Template))) {\n+        Py_DECREF(template_);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Template) = template_;\n+    }\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Interpolation))) {\n+        Py_DECREF(interpolation);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Interpolation) = interpolation;\n+    }\n+#endif\n+    result = 0;\n+\n+  end:\n+    Py_DECREF(templatelib);\n+    Py_XDECREF(template_);\n+    Py_XDECREF(interpolation);\n+    return result;\n+}\n+\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template) {\n+    PyObject *lookup;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_atomic_ptr_type* ptr;\n+#else\n+    PyObject **ptr;\n+#endif\n+    ptr = is_template ? &CGLOBAL(__pyx_templatelib_Template) : &CGLOBAL(__pyx_templatelib_Interpolation);\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    lookup = (PyObject*)__pyx_atomic_pointer_load_relaxed(ptr);\n+#else\n+    lookup = *ptr;\n+#endif\n+    if (unlikely(!lookup)) {\n+        if (unlikely(__Pyx_InitializeTemplateLib()) < 0) return NULL;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+        lookup = (PyObject*)__pyx_atomic_pointer_load_acquire(ptr);\n+#else\n+        lookup = *ptr;\n+#endif\n+    }\n+    Py_XINCREF(lookup);\n+    return lookup;\n+}\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template) {\n+    static PyMutex mutex = {0};\n+    PyMutex_Lock(&mutex);\n+    PyObject *result = __Pyx__GetObjectFromTemplateLib(is_template);\n+    PyMutex_Unlock(&mutex);\n+    return result;\n+}\n+#endif\n+\n+\n+\n+\n+//////////////////////////// MakeTemplateLibInterpolation.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec); /* proto */\n+\n+//////////////////////////// MakeTemplateLibInterpolation ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCall\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(0);\n+    if (unlikely(!tp)) return NULL;\n+    PyObject *args[] = {value, expression, conversion_char, format_spec};\n+\n+    PyObject *result = __Pyx_PyObject_FastCallDict(tp, args, 4, NULL);\n+    Py_DECREF(tp);\n+\n+    return result;\n+}\n+\n+//////////////////////////// MakeTemplateLibTemplate.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations); /* proto */\n+\n+//////////////////////////// MakeTemplateLibTemplate ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCallMethod\n+\n+#if PY_VERSION_HEX >= 0x030E0000 && CYTHON_COMPILING_IN_CPYTHON\n+#ifndef Py_BUILD_CORE\n+#define Py_BUILD_CORE\n+#endif\n+#include \"internal/pycore_template.h\"\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    (void)__Pyx_GetObjectFromTemplateLib;\n+    return _PyTemplate_Build(strings, interpolations);\n+}\n+#else\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(1);\n+    PyObject *result = NULL, *zipped_tuple = NULL;\n+    Py_ssize_t zipped_index = 0;\n+    if (unlikely(!tp)) return NULL;\n+    \n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+    if (__Pyx_get_runtime_version() < 0x030E0000) {\n+        // There's a high chance (but not certain) that we're using our internal\n+        // fallback version of template. In this case we can try to use a better\n+        // constructor. \n+        PyObject *args[] = { tp, strings, interpolations };\n+        PyObject *name = PyUnicode_FromString(\"_from_strings_and_interpolations\");\n+        if (unlikely(!name)) goto failed_shortcut;\n+        result = __Pyx_PyObject_FastCallMethod(name, args, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n+        Py_DECREF(name);\n+        if (result) {\n+            Py_DECREF(tp);\n+            return result;\n+        }\n+\n+      failed_shortcut:\n+        PyErr_Clear();\n+    }\n+#endif\n+\n+    // Slightly frustratingly, we have to go to the trouble of zipping together\n+    // the strings and the interpolations. And then internally the Template does\n+    // the exact opposite. ",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296625083",
            "id": 2296625083,
            "in_reply_to_id": 2296600874,
            "line": 316,
            "node_id": "PRRC_kwDOABDGAc6I47e7",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 298,
            "original_position": 298,
            "original_start_line": 296,
            "path": "Cython/Utility/TString.c",
            "position": 316,
            "pull_request_review_id": 3149300427,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296625083/reactions"
            },
            "side": "RIGHT",
            "start_line": 314,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T11:39:23Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296625083",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
                "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
                "followers_url": "https://api.github.com/users/TeamSpen210/followers",
                "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
                "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TeamSpen210",
                "id": 8453732,
                "login": "TeamSpen210",
                "node_id": "MDQ6VXNlcjg0NTM3MzI=",
                "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
                "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
                "repos_url": "https://api.github.com/users/TeamSpen210/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TeamSpen210",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296643098"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296643098"
                }
            },
            "author_association": "MEMBER",
            "body": "I think you are referring to CPython deduplicating tuples of immutable objects internally? Right, then `Interpolation` objects would get in the way. I guess the problem there is the `value` attribute, which can refer to arbitrary (mutable) objects, thus rendering the `Interpolation` instance transitively mutable.\r\n\r\nEither way,  I'd assume that most users of template strings would either use Py3.14 or a separate backport, not just what Cython provides. It's therefore pointless to debate optimisations here in Cython.",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-08-24T12:32:19Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. \n+    const char code_str[] =\n+\"class Interpolation:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = __match_args__ = ('value', 'expression', 'conversion', 'format_spec')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Interpolation is immutable')\\n\"\n+\"    def __new__(cls, value, expression='', conversion=None, format_spec=''):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'value', value)\\n\"\n+\"        super().__setattr__(obj, 'expression', expression)\\n\"\n+\"        super().__setattr__(obj, 'conversion', conversion)\\n\"\n+\"        super().__setattr__(obj, 'format_spec', format_spec)\\n\"\n+\"        return obj\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Interpolation({self.value!r}, {self.expression!r}, {self.conversion!r}, {self.format_spec!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython\\n\"\n+\"        return (type(self), (self.value, self.expression, self.conversion, self.format_spec))\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Interpolation is not an acceptable base type')\\n\"\n+\"class Template:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = ('strings', 'interpolations')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Template is immutable')\\n\"\n+\"    @classmethod\\n\"\n+\"    def _from_strings_and_interpolations(cls, strings, interpolations):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'strings', tuple(strings))\\n\"\n+\"        super().__setattr__(obj, 'interpolations', tuple(interpolations))\\n\"\n+\"        return obj\\n\"\n+\"    def __new__(cls, *args):\\n\"\n+\"        last_string = ''\\n\"\n+\"        strings = []\\n\"\n+\"        interpolations = []\\n\"\n+\"        for arg in args:\\n\"\n+\"            if isinstance(arg, str):\\n\"\n+\"                last_string += arg\\n\"\n+\"            elif isinstance(arg, Interpolation):\\n\"\n+\"                strings.append(last_string)\\n\"\n+\"                last_string = ''\\n\"\n+\"                interpolations.append(arg)\\n\"\n+\"            else:\\n\"\n+\"                raise TypeError('Unexpected argument to Template')\\n\"\n+\"        strings.append(last_string)\\n\"\n+\"        return cls._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Template(strings={self.strings!r}, interpolations={self.interpolations!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython.\\n\"\n+\"        # It also doesn't quite match how CPython pickles them.\\n\"\n+\"        values = tuple(iter(self))\\n\"\n+\"        return (type(self), values)\\n\"\n+\"    def __iter__(self):\\n\"\n+\"        for n in range(len(self.interpolations)):\\n\"\n+\"            if (s := self.strings[n]):\\n\"\n+\"               yield s\\n\"\n+\"            yield self.interpolations[n]\\n\"\n+\"        if (s := self.strings[-1]):\\n\"\n+\"           yield s\\n\"\n+\"    def __add__(self, other):\\n\"\n+\"        if not (isinstance(self, Template) and isinstance(other, Template)):\\n\"\n+\"            raise TypeError('can only concatenate Template to Template')\\n\"\n+\"        interpolations = self.interpolations + other.interpolations\\n\"\n+\"        middle_string = self.strings[-1] + other.strings[0]\\n\"\n+\"        strings = self.strings[:-1] + (middle_string,) + other.strings[1:]\\n\"\n+\"        return Template._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    @property\\n\"\n+\"    def values(self):\\n\"\n+\"        return tuple(i.value for i in self.interpolations)\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Template is not an acceptable base type')\\n\";\n+\n+    PyObject *code=NULL, *eval_result=NULL, *module=NULL, *module_dict=NULL;\n+    PyObject *dict = PyDict_New();\n+    if (unlikely(!dict)) return NULL;\n+\n+    code = Py_CompileString(code_str, \"<cython string.templatelib fallback>\", Py_file_input);\n+    if (unlikely(!code)) goto end;\n+    eval_result = PyEval_EvalCode(code, dict, dict);\n+    Py_DECREF(code);\n+    if (unlikely(!eval_result)) goto end;\n+    Py_DECREF(eval_result);\n+\n+    module = __Pyx_PyImport_AddModuleRef(\"string.templatelib\");\n+    if (!module) goto end;\n+    module_dict = PyModule_GetDict(module);\n+    if (!module_dict) goto bad;\n+    if (unlikely(PyDict_Merge(module_dict, dict, 0) < 0)) goto bad;\n+\n+  end:\n+    Py_XDECREF(dict);\n+    return module;\n+  bad:\n+    Py_CLEAR(module);\n+    goto end;\n+}\n+#endif\n+\n+static int __Pyx_InitializeTemplateLib(void) {\n+    // Even in earlier versions of Python, still try the import. We're happy\n+    // to use what's there if someone's patched it with something compatible.\n+    PyObject *templatelib = PyImport_ImportModule(\"string.templatelib\");\n+    if (!templatelib) {\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+        templatelib = __Pyx_TemplateLibFallback();\n+        if (!templatelib)\n+#endif\n+        return -1;\n+    }\n+    PyObject *template_=NULL, *interpolation=NULL;\n+    int result = -1;\n+    template_ = PyObject_GetAttrString(templatelib, \"Template\");\n+    if (unlikely(!template_)) goto end;\n+    interpolation = PyObject_GetAttrString(templatelib, \"Interpolation\");\n+    if (unlikely(!interpolation)) goto end;\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_nonatomic_ptr_type expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Template), &expected, template_)) {\n+        // Already written - that's fine.\n+        Py_DECREF(template_);\n+    }\n+    expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Interpolation), &expected, interpolation)) {\n+        // Already written - that's fine.\n+        Py_DECREF(interpolation);\n+    }\n+#else\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Template))) {\n+        Py_DECREF(template_);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Template) = template_;\n+    }\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Interpolation))) {\n+        Py_DECREF(interpolation);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Interpolation) = interpolation;\n+    }\n+#endif\n+    result = 0;\n+\n+  end:\n+    Py_DECREF(templatelib);\n+    Py_XDECREF(template_);\n+    Py_XDECREF(interpolation);\n+    return result;\n+}\n+\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template) {\n+    PyObject *lookup;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_atomic_ptr_type* ptr;\n+#else\n+    PyObject **ptr;\n+#endif\n+    ptr = is_template ? &CGLOBAL(__pyx_templatelib_Template) : &CGLOBAL(__pyx_templatelib_Interpolation);\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    lookup = (PyObject*)__pyx_atomic_pointer_load_relaxed(ptr);\n+#else\n+    lookup = *ptr;\n+#endif\n+    if (unlikely(!lookup)) {\n+        if (unlikely(__Pyx_InitializeTemplateLib()) < 0) return NULL;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+        lookup = (PyObject*)__pyx_atomic_pointer_load_acquire(ptr);\n+#else\n+        lookup = *ptr;\n+#endif\n+    }\n+    Py_XINCREF(lookup);\n+    return lookup;\n+}\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template) {\n+    static PyMutex mutex = {0};\n+    PyMutex_Lock(&mutex);\n+    PyObject *result = __Pyx__GetObjectFromTemplateLib(is_template);\n+    PyMutex_Unlock(&mutex);\n+    return result;\n+}\n+#endif\n+\n+\n+\n+\n+//////////////////////////// MakeTemplateLibInterpolation.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec); /* proto */\n+\n+//////////////////////////// MakeTemplateLibInterpolation ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCall\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(0);\n+    if (unlikely(!tp)) return NULL;\n+    PyObject *args[] = {value, expression, conversion_char, format_spec};\n+\n+    PyObject *result = __Pyx_PyObject_FastCallDict(tp, args, 4, NULL);\n+    Py_DECREF(tp);\n+\n+    return result;\n+}\n+\n+//////////////////////////// MakeTemplateLibTemplate.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations); /* proto */\n+\n+//////////////////////////// MakeTemplateLibTemplate ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCallMethod\n+\n+#if PY_VERSION_HEX >= 0x030E0000 && CYTHON_COMPILING_IN_CPYTHON\n+#ifndef Py_BUILD_CORE\n+#define Py_BUILD_CORE\n+#endif\n+#include \"internal/pycore_template.h\"\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    (void)__Pyx_GetObjectFromTemplateLib;\n+    return _PyTemplate_Build(strings, interpolations);\n+}\n+#else\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(1);\n+    PyObject *result = NULL, *zipped_tuple = NULL;\n+    Py_ssize_t zipped_index = 0;\n+    if (unlikely(!tp)) return NULL;\n+    \n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+    if (__Pyx_get_runtime_version() < 0x030E0000) {\n+        // There's a high chance (but not certain) that we're using our internal\n+        // fallback version of template. In this case we can try to use a better\n+        // constructor. \n+        PyObject *args[] = { tp, strings, interpolations };\n+        PyObject *name = PyUnicode_FromString(\"_from_strings_and_interpolations\");\n+        if (unlikely(!name)) goto failed_shortcut;\n+        result = __Pyx_PyObject_FastCallMethod(name, args, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n+        Py_DECREF(name);\n+        if (result) {\n+            Py_DECREF(tp);\n+            return result;\n+        }\n+\n+      failed_shortcut:\n+        PyErr_Clear();\n+    }\n+#endif\n+\n+    // Slightly frustratingly, we have to go to the trouble of zipping together\n+    // the strings and the interpolations. And then internally the Template does\n+    // the exact opposite. ",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296643098",
            "id": 2296643098,
            "in_reply_to_id": 2296600874,
            "line": 316,
            "node_id": "PRRC_kwDOABDGAc6I4_4a",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 298,
            "original_position": 298,
            "original_start_line": 296,
            "path": "Cython/Utility/TString.c",
            "position": 316,
            "pull_request_review_id": 3149320749,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296643098/reactions"
            },
            "side": "RIGHT",
            "start_line": 314,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T12:32:19Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296643098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296685219"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296685219"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think it's completely irrelevant to us - in CPython 3.14 (outside the Limited API) we can use the internal constructor `_PyTemplate_Build` as a shortcut to construct it, and this will initialize `strings` with a fixed, compile-time tuple from our tuple table. In the backport I wrote we're also able to directly construct with `strings` and `interpolations` so again we get the same optimization.\r\n\r\nThe `tstrings-backport` backport doesn't actual look to implement the right API for the `Template` constructor, so again that requires separate strings and tuples.  The `futures-tstrings` backport looks to do the correct API for the `Template` constructor though so would benefit from being called directly with a list of arguments.",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-08-24T14:31:33Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. \n+    const char code_str[] =\n+\"class Interpolation:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = __match_args__ = ('value', 'expression', 'conversion', 'format_spec')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Interpolation is immutable')\\n\"\n+\"    def __new__(cls, value, expression='', conversion=None, format_spec=''):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'value', value)\\n\"\n+\"        super().__setattr__(obj, 'expression', expression)\\n\"\n+\"        super().__setattr__(obj, 'conversion', conversion)\\n\"\n+\"        super().__setattr__(obj, 'format_spec', format_spec)\\n\"\n+\"        return obj\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Interpolation({self.value!r}, {self.expression!r}, {self.conversion!r}, {self.format_spec!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython\\n\"\n+\"        return (type(self), (self.value, self.expression, self.conversion, self.format_spec))\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Interpolation is not an acceptable base type')\\n\"\n+\"class Template:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = ('strings', 'interpolations')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Template is immutable')\\n\"\n+\"    @classmethod\\n\"\n+\"    def _from_strings_and_interpolations(cls, strings, interpolations):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'strings', tuple(strings))\\n\"\n+\"        super().__setattr__(obj, 'interpolations', tuple(interpolations))\\n\"\n+\"        return obj\\n\"\n+\"    def __new__(cls, *args):\\n\"\n+\"        last_string = ''\\n\"\n+\"        strings = []\\n\"\n+\"        interpolations = []\\n\"\n+\"        for arg in args:\\n\"\n+\"            if isinstance(arg, str):\\n\"\n+\"                last_string += arg\\n\"\n+\"            elif isinstance(arg, Interpolation):\\n\"\n+\"                strings.append(last_string)\\n\"\n+\"                last_string = ''\\n\"\n+\"                interpolations.append(arg)\\n\"\n+\"            else:\\n\"\n+\"                raise TypeError('Unexpected argument to Template')\\n\"\n+\"        strings.append(last_string)\\n\"\n+\"        return cls._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Template(strings={self.strings!r}, interpolations={self.interpolations!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython.\\n\"\n+\"        # It also doesn't quite match how CPython pickles them.\\n\"\n+\"        values = tuple(iter(self))\\n\"\n+\"        return (type(self), values)\\n\"\n+\"    def __iter__(self):\\n\"\n+\"        for n in range(len(self.interpolations)):\\n\"\n+\"            if (s := self.strings[n]):\\n\"\n+\"               yield s\\n\"\n+\"            yield self.interpolations[n]\\n\"\n+\"        if (s := self.strings[-1]):\\n\"\n+\"           yield s\\n\"\n+\"    def __add__(self, other):\\n\"\n+\"        if not (isinstance(self, Template) and isinstance(other, Template)):\\n\"\n+\"            raise TypeError('can only concatenate Template to Template')\\n\"\n+\"        interpolations = self.interpolations + other.interpolations\\n\"\n+\"        middle_string = self.strings[-1] + other.strings[0]\\n\"\n+\"        strings = self.strings[:-1] + (middle_string,) + other.strings[1:]\\n\"\n+\"        return Template._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    @property\\n\"\n+\"    def values(self):\\n\"\n+\"        return tuple(i.value for i in self.interpolations)\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Template is not an acceptable base type')\\n\";\n+\n+    PyObject *code=NULL, *eval_result=NULL, *module=NULL, *module_dict=NULL;\n+    PyObject *dict = PyDict_New();\n+    if (unlikely(!dict)) return NULL;\n+\n+    code = Py_CompileString(code_str, \"<cython string.templatelib fallback>\", Py_file_input);\n+    if (unlikely(!code)) goto end;\n+    eval_result = PyEval_EvalCode(code, dict, dict);\n+    Py_DECREF(code);\n+    if (unlikely(!eval_result)) goto end;\n+    Py_DECREF(eval_result);\n+\n+    module = __Pyx_PyImport_AddModuleRef(\"string.templatelib\");\n+    if (!module) goto end;\n+    module_dict = PyModule_GetDict(module);\n+    if (!module_dict) goto bad;\n+    if (unlikely(PyDict_Merge(module_dict, dict, 0) < 0)) goto bad;\n+\n+  end:\n+    Py_XDECREF(dict);\n+    return module;\n+  bad:\n+    Py_CLEAR(module);\n+    goto end;\n+}\n+#endif\n+\n+static int __Pyx_InitializeTemplateLib(void) {\n+    // Even in earlier versions of Python, still try the import. We're happy\n+    // to use what's there if someone's patched it with something compatible.\n+    PyObject *templatelib = PyImport_ImportModule(\"string.templatelib\");\n+    if (!templatelib) {\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+        templatelib = __Pyx_TemplateLibFallback();\n+        if (!templatelib)\n+#endif\n+        return -1;\n+    }\n+    PyObject *template_=NULL, *interpolation=NULL;\n+    int result = -1;\n+    template_ = PyObject_GetAttrString(templatelib, \"Template\");\n+    if (unlikely(!template_)) goto end;\n+    interpolation = PyObject_GetAttrString(templatelib, \"Interpolation\");\n+    if (unlikely(!interpolation)) goto end;\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_nonatomic_ptr_type expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Template), &expected, template_)) {\n+        // Already written - that's fine.\n+        Py_DECREF(template_);\n+    }\n+    expected = NULL;\n+    if (!__pyx_atomic_pointer_cmp_exchange(&CGLOBAL(__pyx_templatelib_Interpolation), &expected, interpolation)) {\n+        // Already written - that's fine.\n+        Py_DECREF(interpolation);\n+    }\n+#else\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Template))) {\n+        Py_DECREF(template_);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Template) = template_;\n+    }\n+    if (unlikely(CGLOBAL(__pyx_templatelib_Interpolation))) {\n+        Py_DECREF(interpolation);\n+    } else {\n+        CGLOBAL(__pyx_templatelib_Interpolation) = interpolation;\n+    }\n+#endif\n+    result = 0;\n+\n+  end:\n+    Py_DECREF(templatelib);\n+    Py_XDECREF(template_);\n+    Py_XDECREF(interpolation);\n+    return result;\n+}\n+\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template) {\n+    PyObject *lookup;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    __pyx_atomic_ptr_type* ptr;\n+#else\n+    PyObject **ptr;\n+#endif\n+    ptr = is_template ? &CGLOBAL(__pyx_templatelib_Template) : &CGLOBAL(__pyx_templatelib_Interpolation);\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+    lookup = (PyObject*)__pyx_atomic_pointer_load_relaxed(ptr);\n+#else\n+    lookup = *ptr;\n+#endif\n+    if (unlikely(!lookup)) {\n+        if (unlikely(__Pyx_InitializeTemplateLib()) < 0) return NULL;\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+        lookup = (PyObject*)__pyx_atomic_pointer_load_acquire(ptr);\n+#else\n+        lookup = *ptr;\n+#endif\n+    }\n+    Py_XINCREF(lookup);\n+    return lookup;\n+}\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template) {\n+    static PyMutex mutex = {0};\n+    PyMutex_Lock(&mutex);\n+    PyObject *result = __Pyx__GetObjectFromTemplateLib(is_template);\n+    PyMutex_Unlock(&mutex);\n+    return result;\n+}\n+#endif\n+\n+\n+\n+\n+//////////////////////////// MakeTemplateLibInterpolation.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec); /* proto */\n+\n+//////////////////////////// MakeTemplateLibInterpolation ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCall\n+\n+static PyObject* __Pyx_MakeTemplateLibInterpolation(PyObject *value, PyObject *expression, PyObject *conversion_char, PyObject *format_spec) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(0);\n+    if (unlikely(!tp)) return NULL;\n+    PyObject *args[] = {value, expression, conversion_char, format_spec};\n+\n+    PyObject *result = __Pyx_PyObject_FastCallDict(tp, args, 4, NULL);\n+    Py_DECREF(tp);\n+\n+    return result;\n+}\n+\n+//////////////////////////// MakeTemplateLibTemplate.proto //////////////////////\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations); /* proto */\n+\n+//////////////////////////// MakeTemplateLibTemplate ////////////////////////\n+//@requires: InitializeTemplateLib\n+//@requires: ObjectHandling.c::PyObjectFastCallMethod\n+\n+#if PY_VERSION_HEX >= 0x030E0000 && CYTHON_COMPILING_IN_CPYTHON\n+#ifndef Py_BUILD_CORE\n+#define Py_BUILD_CORE\n+#endif\n+#include \"internal/pycore_template.h\"\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    (void)__Pyx_GetObjectFromTemplateLib;\n+    return _PyTemplate_Build(strings, interpolations);\n+}\n+#else\n+\n+static PyObject* __Pyx_MakeTemplateLibTemplate(PyObject *strings, PyObject *interpolations) {\n+    PyObject *tp = __Pyx_GetObjectFromTemplateLib(1);\n+    PyObject *result = NULL, *zipped_tuple = NULL;\n+    Py_ssize_t zipped_index = 0;\n+    if (unlikely(!tp)) return NULL;\n+    \n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+    if (__Pyx_get_runtime_version() < 0x030E0000) {\n+        // There's a high chance (but not certain) that we're using our internal\n+        // fallback version of template. In this case we can try to use a better\n+        // constructor. \n+        PyObject *args[] = { tp, strings, interpolations };\n+        PyObject *name = PyUnicode_FromString(\"_from_strings_and_interpolations\");\n+        if (unlikely(!name)) goto failed_shortcut;\n+        result = __Pyx_PyObject_FastCallMethod(name, args, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n+        Py_DECREF(name);\n+        if (result) {\n+            Py_DECREF(tp);\n+            return result;\n+        }\n+\n+      failed_shortcut:\n+        PyErr_Clear();\n+    }\n+#endif\n+\n+    // Slightly frustratingly, we have to go to the trouble of zipping together\n+    // the strings and the interpolations. And then internally the Template does\n+    // the exact opposite. ",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296685219",
            "id": 2296685219,
            "in_reply_to_id": 2296600874,
            "line": 316,
            "node_id": "PRRC_kwDOABDGAc6I5KKj",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 298,
            "original_position": 298,
            "original_start_line": 296,
            "path": "Cython/Utility/TString.c",
            "position": 316,
            "pull_request_review_id": 3149367655,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296685219/reactions"
            },
            "side": "RIGHT",
            "start_line": 314,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-24T14:31:33Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296685219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2296693255"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2296693255"
                }
            },
            "author_association": "MEMBER",
            "body": "Tested this and it appears to do the right thing.",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-08-24T14:55:45Z",
            "diff_hunk": "@@ -0,0 +1,338 @@\n+//////////////////////////// InitializeTemplateLib.module_state_decls /////////////////////\n+//@requires: Synchronization.c::Atomics\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS\n+__pyx_atomic_ptr_type __pyx_templatelib_Template;\n+__pyx_atomic_ptr_type __pyx_templatelib_Interpolation;\n+#else\n+// If freethreading but not atomics then this is unguarded\n+PyObject *__pyx_templatelib_Template;\n+PyObject *__pyx_templatelib_Interpolation;\n+#endif\n+\n+//////////////////////////// InitializeTemplateLib.module_state_traverse ////////////////////////////\n+\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_VISIT((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation);\n+\n+//////////////////////////// InitializeTemplateLib.module_state_clear ////////////////////////////\n+\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Template);\n+Py_CLEAR((PyObject*)traverse_module_state->__pyx_templatelib_Interpolation)\n+\n+//////////////////////////// InitializeTemplateLib.proto ///////////////////////////\n+\n+// Returns Template if template, else Interpolation\n+static PyObject* __Pyx__GetObjectFromTemplateLib(int is_template); /* proto */\n+\n+#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS\n+static PyObject* __Pyx_GetObjectFromTemplateLib(int is_template); /* proto */\n+#else\n+#define __Pyx_GetObjectFromTemplateLib __Pyx__GetObjectFromTemplateLib\n+#endif\n+\n+\n+//////////////////////////// InitializeTemplateLib ///////////////////////////\n+\n+#if __PYX_LIMITED_VERSION_HEX < 0x030E0000\n+static PyObject *__Pyx_TemplateLibFallback(void) {\n+    PyErr_Clear();\n+\n+    // The assumption here is that Interpolation and Template are fairly simple classes\n+    // and the cost of compiling them with Cython (for all Python versions) is probably\n+    // higher than the cost of using a plain-Python fallback. \n+    const char code_str[] =\n+\"class Interpolation:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = __match_args__ = ('value', 'expression', 'conversion', 'format_spec')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Interpolation is immutable')\\n\"\n+\"    def __new__(cls, value, expression='', conversion=None, format_spec=''):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'value', value)\\n\"\n+\"        super().__setattr__(obj, 'expression', expression)\\n\"\n+\"        super().__setattr__(obj, 'conversion', conversion)\\n\"\n+\"        super().__setattr__(obj, 'format_spec', format_spec)\\n\"\n+\"        return obj\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Interpolation({self.value!r}, {self.expression!r}, {self.conversion!r}, {self.format_spec!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython\\n\"\n+\"        return (type(self), (self.value, self.expression, self.conversion, self.format_spec))\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Interpolation is not an acceptable base type')\\n\"\n+\"class Template:\\n\"\n+\"    __module__ = 'string.templatelib'\\n\"\n+\"    __slots__ = ('strings', 'interpolations')\\n\"\n+\"    def __setattr__(self, attr, value):\\n\"\n+\"        raise AttributeError('Template is immutable')\\n\"\n+\"    @classmethod\\n\"\n+\"    def _from_strings_and_interpolations(cls, strings, interpolations):\\n\"\n+\"        obj = super().__new__(cls)\\n\"\n+\"        super().__setattr__(obj, 'strings', tuple(strings))\\n\"\n+\"        super().__setattr__(obj, 'interpolations', tuple(interpolations))\\n\"\n+\"        return obj\\n\"\n+\"    def __new__(cls, *args):\\n\"\n+\"        last_string = ''\\n\"\n+\"        strings = []\\n\"\n+\"        interpolations = []\\n\"\n+\"        for arg in args:\\n\"\n+\"            if isinstance(arg, str):\\n\"\n+\"                last_string += arg\\n\"\n+\"            elif isinstance(arg, Interpolation):\\n\"\n+\"                strings.append(last_string)\\n\"\n+\"                last_string = ''\\n\"\n+\"                interpolations.append(arg)\\n\"\n+\"            else:\\n\"\n+\"                raise TypeError('Unexpected argument to Template')\\n\"\n+\"        strings.append(last_string)\\n\"\n+\"        return cls._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    def __repr__(self):\\n\"\n+\"        return f'Template(strings={self.strings!r}, interpolations={self.interpolations!r})'\\n\"\n+\"    def __reduce__(self):\\n\"\n+\"        # This probably won't work unless a t-string has already been created from Cython.\\n\"\n+\"        # It also doesn't quite match how CPython pickles them.\\n\"\n+\"        values = tuple(iter(self))\\n\"\n+\"        return (type(self), values)\\n\"\n+\"    def __iter__(self):\\n\"\n+\"        for n in range(len(self.interpolations)):\\n\"\n+\"            if (s := self.strings[n]):\\n\"\n+\"               yield s\\n\"\n+\"            yield self.interpolations[n]\\n\"\n+\"        if (s := self.strings[-1]):\\n\"\n+\"           yield s\\n\"\n+\"    def __add__(self, other):\\n\"\n+\"        if not (isinstance(self, Template) and isinstance(other, Template)):\\n\"\n+\"            raise TypeError('can only concatenate Template to Template')\\n\"\n+\"        interpolations = self.interpolations + other.interpolations\\n\"\n+\"        middle_string = self.strings[-1] + other.strings[0]\\n\"\n+\"        strings = self.strings[:-1] + (middle_string,) + other.strings[1:]\\n\"\n+\"        return Template._from_strings_and_interpolations(strings, interpolations)\\n\"\n+\"    @property\\n\"\n+\"    def values(self):\\n\"\n+\"        return tuple(i.value for i in self.interpolations)\\n\"\n+\"    def __init_subclass__(cls, **kwds):\\n\"\n+\"        raise TypeError('Template is not an acceptable base type')\\n\";\n+\n+    PyObject *code=NULL, *eval_result=NULL, *module=NULL, *module_dict=NULL;\n+    PyObject *dict = PyDict_New();\n+    if (unlikely(!dict)) return NULL;\n+\n+    code = Py_CompileString(code_str, \"<cython string.templatelib fallback>\", Py_file_input);\n+    if (unlikely(!code)) goto end;\n+    eval_result = PyEval_EvalCode(code, dict, dict);\n+    Py_DECREF(code);\n+    if (unlikely(!eval_result)) goto end;\n+    Py_DECREF(eval_result);\n+\n+    module = __Pyx_PyImport_AddModuleRef(\"string.templatelib\");\n+    if (!module) goto end;\n+    module_dict = PyModule_GetDict(module);\n+    if (!module_dict) goto bad;\n+    if (unlikely(PyDict_Merge(module_dict, dict, 0) < 0)) goto bad;\n+\n+  end:\n+    Py_XDECREF(dict);\n+    return module;\n+  bad:\n+    Py_CLEAR(module);\n+    goto end;\n+}\n+#endif\n+\n+static int __Pyx_InitializeTemplateLib(void) {\n+    // Even in earlier versions of Python, still try the import. We're happy\n+    // to use what's there if someone's patched it with something compatible.\n+    PyObject *templatelib = PyImport_ImportModule(\"string.templatelib\");",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2296693255",
            "id": 2296693255,
            "in_reply_to_id": 2296597222,
            "line": 157,
            "node_id": "PRRC_kwDOABDGAc6I5MIH",
            "original_commit_id": "a1722f0805364797b514856b3026c2a6202afd25",
            "original_line": 146,
            "original_position": 146,
            "original_start_line": null,
            "path": "Cython/Utility/TString.c",
            "position": 157,
            "pull_request_review_id": 3149375156,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296693255/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-24T14:55:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2296693255",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2347232787"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2347232787"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                      is_template_string: cython.bint):\r\n```\r\nThe indentation seems displaced, BTW.",
            "commit_id": "494609200193f03f47231d3e9bb48aa6cd6af713",
            "created_at": "2025-09-14T10:06:35Z",
            "diff_hunk": "@@ -1194,45 +1207,62 @@ def p_fstring_replacement_field(s: PyrexScanner,\n             else:\n                 s.next()\n \n-        if self_documenting:\n+        if self_documenting or is_template_string:\n             if conversion_char is not None:\n                 expr_string, _ = expr_string.rsplit('!', 1)\n-            result.append(\n-                ExprNodes.UnicodeNode(\n+            if is_template_string:\n+                t_string_expression = ExprNodes.UnicodeNode(\n                     pos=expr_pos,\n-                    value=StringEncoding.EncodedString(expr_string)\n+                    value=StringEncoding.EncodedString(expr_string.rstrip().rstrip('=').rstrip())\n+                )\n+            if self_documenting:\n+                result.append(\n+                    ExprNodes.UnicodeNode(\n+                        pos=expr_pos,\n+                        value=StringEncoding.EncodedString(expr_string)\n+                    )\n                 )\n-            )\n \n         # Validate that the expression string has actually ended\n         while s.sy == \"NEWLINE\" or s.sy == \"DEDENT\":\n             s.next()\n         if s.sy != \"EOF\":\n-            error(s.position(), f\"Unexpected characters after f-string expression: {s.systring}\")\n+            error(\n+                s.position(),\n+                f\"Unexpected characters after {'t' if is_template_string else 'f'}-string expression: {s.systring}\")\n \n         s = original_scanner\n \n     if s.sy == \":\":\n         # full format spec\n         pos = s.position()\n-        format_spec_contents = p_fstring_middles(s, is_raw, is_single_quoted, True)\n+        # Contents of format spec are handled closer to an f-string than a t-string\n+        # (even for t-strings).\n+        format_spec_contents = p_ft_string_middles(s, is_raw, is_single_quoted, True, is_template_string=False)\n         format_spec = ExprNodes.JoinedStrNode(\n             pos,\n             values=format_spec_contents\n         )\n     if self_documenting and conversion_char is None and format_spec is None:\n         conversion_char = 'r'\n \n-    result.append(ExprNodes.FormattedValueNode(\n-        bracket_pos, value=expr, conversion_char=conversion_char,\n-        format_spec=format_spec\n-    ))\n+    if is_template_string:\n+        result.append(ExprNodes.TStringInterpolationNode(\n+            bracket_pos, value=expr, conversion_char=conversion_char,\n+            format_spec=format_spec, expression_str=t_string_expression\n+        ))\n+    else:\n+        result.append(ExprNodes.FormattedValueNode(\n+            bracket_pos, value=expr, conversion_char=conversion_char,\n+            format_spec=format_spec\n+        ))\n     return result\n \n @cython.cfunc\n-def p_fstring_middles(s: PyrexScanner,\n+def p_ft_string_middles(s: PyrexScanner,\n                       is_raw: cython.bint, is_single_quoted: cython.bint,\n-                      is_format_string: cython.bint):\n+                      is_format_string: cython.bint,\n+                      is_template_string):",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2347232787",
            "id": 2347232787,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L5-4T",
            "original_commit_id": "2692e1534c002869b1bb43b78b6fd0f2c963828f",
            "original_line": 1265,
            "original_position": 205,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": 1,
            "pull_request_review_id": 3221962696,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2347232787/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-16T21:35:20Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2347232787",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2347233218"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2347233218"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        format_spec_contents = p_ft_string_middles(s, is_raw, is_single_quoted, is_format_string=True, is_template_string=False)\r\n```",
            "commit_id": "494609200193f03f47231d3e9bb48aa6cd6af713",
            "created_at": "2025-09-14T10:07:59Z",
            "diff_hunk": "@@ -1194,45 +1207,62 @@ def p_fstring_replacement_field(s: PyrexScanner,\n             else:\n                 s.next()\n \n-        if self_documenting:\n+        if self_documenting or is_template_string:\n             if conversion_char is not None:\n                 expr_string, _ = expr_string.rsplit('!', 1)\n-            result.append(\n-                ExprNodes.UnicodeNode(\n+            if is_template_string:\n+                t_string_expression = ExprNodes.UnicodeNode(\n                     pos=expr_pos,\n-                    value=StringEncoding.EncodedString(expr_string)\n+                    value=StringEncoding.EncodedString(expr_string.rstrip().rstrip('=').rstrip())\n+                )\n+            if self_documenting:\n+                result.append(\n+                    ExprNodes.UnicodeNode(\n+                        pos=expr_pos,\n+                        value=StringEncoding.EncodedString(expr_string)\n+                    )\n                 )\n-            )\n \n         # Validate that the expression string has actually ended\n         while s.sy == \"NEWLINE\" or s.sy == \"DEDENT\":\n             s.next()\n         if s.sy != \"EOF\":\n-            error(s.position(), f\"Unexpected characters after f-string expression: {s.systring}\")\n+            error(\n+                s.position(),\n+                f\"Unexpected characters after {'t' if is_template_string else 'f'}-string expression: {s.systring}\")\n \n         s = original_scanner\n \n     if s.sy == \":\":\n         # full format spec\n         pos = s.position()\n-        format_spec_contents = p_fstring_middles(s, is_raw, is_single_quoted, True)\n+        # Contents of format spec are handled closer to an f-string than a t-string\n+        # (even for t-strings).\n+        format_spec_contents = p_ft_string_middles(s, is_raw, is_single_quoted, True, is_template_string=False)",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2347233218",
            "id": 2347233218,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L5-_C",
            "original_commit_id": "2692e1534c002869b1bb43b78b6fd0f2c963828f",
            "original_line": 1241,
            "original_position": 175,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": 1,
            "pull_request_review_id": 3221962696,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2347233218/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-16T21:35:21Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2347233218",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2347233488"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2347233488"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    middles = p_ft_string_middles(s, is_raw, is_single_quoted, is_format_string=False, is_template_string=is_template_string)\r\n```",
            "commit_id": "494609200193f03f47231d3e9bb48aa6cd6af713",
            "created_at": "2025-09-14T10:09:01Z",
            "diff_hunk": "@@ -1264,22 +1295,23 @@ def p_fstring_middles(s: PyrexScanner,\n         else:\n             error(\n                 s.position(),\n-                \"Unexpected token %r:%r in f-string literal\" % (\n-                s.sy, s.systring))\n+                \"Unexpected token %r:%r in %s-string literal\" % (\n+                s.sy, s.systring, 't' if is_template_string else 's'))\n     return middles\n \n @cython.cfunc\n-def p_fstring_literal(s: PyrexScanner):\n-    # s.sy == BEGIN_FSTRING\n+def p_ft_string_literal(s: PyrexScanner):\n+    # s.sy == BEGIN_FT_STRING\n     kind_string = _validate_kind_string(s.position(), s.systring)\n+    is_template_string: cython.bint = 't' in kind_string\n     is_raw: cython.bint = 'r' in kind_string\n-    quotes = \"\".join(filter(lambda x: not x.isalnum(), s.systring))\n+    quotes = s.systring.lstrip(\"rRbBuUfFtT\")\n     is_single_quoted: cython.bint = len(quotes) != 3\n-    middles = p_fstring_middles(s, is_raw, is_single_quoted, False)\n-    if s.sy != \"END_FSTRING\":\n+    middles = p_ft_string_middles(s, is_raw, is_single_quoted, False, is_template_string)",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2347233488",
            "id": 2347233488,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc6L5_DQ",
            "original_commit_id": "2692e1534c002869b1bb43b78b6fd0f2c963828f",
            "original_line": 1310,
            "original_position": 248,
            "original_start_line": null,
            "path": "Cython/Compiler/Parsing.py",
            "position": 1,
            "pull_request_review_id": 3221962696,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2347233488/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-16T21:35:21Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2347233488",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/7103#discussion_r2381239558"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/7103"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/2381239558"
                }
            },
            "author_association": "MEMBER",
            "body": "I've tweaked the constructor interface slightly to accept `strings` and `interpolations` as keyword arguments, or to accept mixed list as the Python 3.14 constructor does.\r\n\r\nAnd then remove the `_from_strings_and_interpolations` function in favour of just using the single constructor.\r\n\r\nThis is partly because the existing https://github.com/abilian/tstrings-backport/ backport has the wrong constructor interface, but and this version will work with theirs too.",
            "commit_id": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "created_at": "2025-09-26T07:52:23Z",
            "diff_hunk": "@@ -66,16 +66,12 @@ class Template:\n     __slots__ = ('strings', 'interpolations')\n     def __setattr__(self, attr, value):\n         raise AttributeError('Template is immutable')\n-    @classmethod\n-    def _from_strings_and_interpolations(cls, strings, interpolations):\n-        obj = super().__new__(cls)\n-        super().__setattr__(obj, 'strings', tuple(strings))\n-        super().__setattr__(obj, 'interpolations', tuple(interpolations))\n-        return obj\n-    def __new__(cls, *args):\n+    def __new__(cls, *args, strings=None, interpolations=None):",
            "html_url": "https://github.com/cython/cython/pull/7103#discussion_r2381239558",
            "id": 2381239558,
            "line": 69,
            "node_id": "PRRC_kwDOABDGAc6N7tUG",
            "original_commit_id": "876613a3001aca13203ce3c621499ce6eb191890",
            "original_line": 69,
            "original_position": 11,
            "original_start_line": null,
            "path": "Cython/Utility/TString.c",
            "position": 69,
            "pull_request_review_id": 3270667829,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/7103",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/2381239558/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-26T07:52:24Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/2381239558",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/7103/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a1722f0805364797b514856b3026c2a6202afd25/comments",
            "commit": {
                "author": {
                    "date": "2025-08-24T09:11:06Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-24T09:17:22Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Implement t-strings",
                "tree": {
                    "sha": "47506cf5612754abe27a06c0ae1b29ad95f473ba",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/47506cf5612754abe27a06c0ae1b29ad95f473ba"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a1722f0805364797b514856b3026c2a6202afd25",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/a1722f0805364797b514856b3026c2a6202afd25",
            "node_id": "C_kwDOAhr4b9oAKGExNzIyZjA4MDUzNjQ3OTdiNTE0ODU2YjMwMjZjMmE2MjAyYWZkMjU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/af509320cf8f8585d589c757e3bb5ac31006e287",
                    "sha": "af509320cf8f8585d589c757e3bb5ac31006e287",
                    "url": "https://api.github.com/repos/cython/cython/commits/af509320cf8f8585d589c757e3bb5ac31006e287"
                }
            ],
            "sha": "a1722f0805364797b514856b3026c2a6202afd25",
            "url": "https://api.github.com/repos/cython/cython/commits/a1722f0805364797b514856b3026c2a6202afd25"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/92a3b2028c57e7da9c8284cb194fea03ac2dad7d/comments",
            "commit": {
                "author": {
                    "date": "2025-08-24T14:43:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-24T14:43:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Hopefully fix builds",
                "tree": {
                    "sha": "ee372fb15599c76b4a693d41066706ca8a59950b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ee372fb15599c76b4a693d41066706ca8a59950b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/92a3b2028c57e7da9c8284cb194fea03ac2dad7d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/92a3b2028c57e7da9c8284cb194fea03ac2dad7d",
            "node_id": "C_kwDOAhr4b9oAKDkyYTNiMjAyOGM1N2U3ZGE5YzgyODRjYjE5NGZlYTAzYWMyZGFkN2Q",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a1722f0805364797b514856b3026c2a6202afd25",
                    "sha": "a1722f0805364797b514856b3026c2a6202afd25",
                    "url": "https://api.github.com/repos/cython/cython/commits/a1722f0805364797b514856b3026c2a6202afd25"
                }
            ],
            "sha": "92a3b2028c57e7da9c8284cb194fea03ac2dad7d",
            "url": "https://api.github.com/repos/cython/cython/commits/92a3b2028c57e7da9c8284cb194fea03ac2dad7d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/95c0b2bff2196ce30517e36b66212a743138a149/comments",
            "commit": {
                "author": {
                    "date": "2025-08-24T14:59:00Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-24T14:59:00Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Simple review comments",
                "tree": {
                    "sha": "ca20a10ce2cba681158a53a85bd9fbb35268620b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ca20a10ce2cba681158a53a85bd9fbb35268620b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/95c0b2bff2196ce30517e36b66212a743138a149",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/95c0b2bff2196ce30517e36b66212a743138a149",
            "node_id": "C_kwDOAhr4b9oAKDk1YzBiMmJmZjIxOTZjZTMwNTE3ZTM2YjY2MjEyYTc0MzEzOGExNDk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/92a3b2028c57e7da9c8284cb194fea03ac2dad7d",
                    "sha": "92a3b2028c57e7da9c8284cb194fea03ac2dad7d",
                    "url": "https://api.github.com/repos/cython/cython/commits/92a3b2028c57e7da9c8284cb194fea03ac2dad7d"
                }
            ],
            "sha": "95c0b2bff2196ce30517e36b66212a743138a149",
            "url": "https://api.github.com/repos/cython/cython/commits/95c0b2bff2196ce30517e36b66212a743138a149"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/28f23c887a22ebc836a005bcd879d3a69863a053/comments",
            "commit": {
                "author": {
                    "date": "2025-08-24T15:02:27Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-24T15:02:27Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "simplify quotes\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "d3b7c1575b6c2658f37707f7f72ddb5142c8e01e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d3b7c1575b6c2658f37707f7f72ddb5142c8e01e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/28f23c887a22ebc836a005bcd879d3a69863a053",
                "verification": {
                    "payload": "tree d3b7c1575b6c2658f37707f7f72ddb5142c8e01e\nparent 95c0b2bff2196ce30517e36b66212a743138a149\nauthor da-woods <dw-git@d-woods.co.uk> 1756047747 +0100\ncommitter GitHub <noreply@github.com> 1756047747 +0100\n\nsimplify quotes\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoqymDCRC1aQ7uu5UhlAAAnsoQAHyEMnumZBn4WVE6UC3yUAlx\nSvGf+d9o3xySXyG0yyzeK+wwX6kAetJxlsvc1+8pi35m2UElf1knyINPY7xCqf16\n801BYCvinUBcvgYLCIjix8yWm3tgvycpi6PCglZW82FDAXnCK21ptxkOVy1NjzNF\n92jnjW84uOLDDQFCopmw4bx14FlZmBzf+vdfpcjQ1t0H9WLtGcM870c6LXC0Zz5p\n+xxumIijgMgKh43kkBHOMnGmO/nwo3zFMpwsMPHHdfy0G7NM+cpBhHYzjeaC+oyu\n3GFvDCP0wq0tBNFaG/ez3ZY3r2BABaqVDTpyKFdgOp10tUsnVcemRRWD3Gm2VRUY\nobvRsMqFPYo6Eyr2yNggC+lJeiF05+BmlNQrYmvHNmLLXl4daeskHU7FF5jnbrBZ\nFR9ATl3PZcKiZf0+Z6JLlNCo7cPjkXab4NvqH9atuE4Qnj4z+oWThUf+IsUXu+3X\nf/SMv6f6UrB4qTsFg8NHxjjpIyRQ6/xBAVFsyhEUXQ96LFMeT1n+mX9d/d34PEGO\nsG3eM3fb0uhmA3OzjSZ2fyMmyu6j65Uu+31wN82ohnIaTE/shOKRNAsHdPTZlhFx\ncvcKXZbFw0y39iZhUCXs28eQ4HgoIQfadPE9WDUmzdExKTcWRtZkoktdWYSg8D/8\neY6foQ++bvPKPthIlRPZ\n=7eFr\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-08-24T15:02:27Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/28f23c887a22ebc836a005bcd879d3a69863a053",
            "node_id": "C_kwDOAhr4b9oAKDI4ZjIzYzg4N2EyMmViYzgzNmEwMDViY2Q4NzlkM2E2OTg2M2EwNTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/95c0b2bff2196ce30517e36b66212a743138a149",
                    "sha": "95c0b2bff2196ce30517e36b66212a743138a149",
                    "url": "https://api.github.com/repos/cython/cython/commits/95c0b2bff2196ce30517e36b66212a743138a149"
                }
            ],
            "sha": "28f23c887a22ebc836a005bcd879d3a69863a053",
            "url": "https://api.github.com/repos/cython/cython/commits/28f23c887a22ebc836a005bcd879d3a69863a053"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8056b2dc4aa755e0bc9f33be471695d3cdc0b95d/comments",
            "commit": {
                "author": {
                    "date": "2025-08-24T15:03:26Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-24T15:03:26Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Parameter name",
                "tree": {
                    "sha": "7f0fa5795cc692ef848f7142d2e1af7c3335f9b7",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7f0fa5795cc692ef848f7142d2e1af7c3335f9b7"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8056b2dc4aa755e0bc9f33be471695d3cdc0b95d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/8056b2dc4aa755e0bc9f33be471695d3cdc0b95d",
            "node_id": "C_kwDOAhr4b9oAKDgwNTZiMmRjNGFhNzU1ZTBiYzlmMzNiZTQ3MTY5NWQzY2RjMGI5NWQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/28f23c887a22ebc836a005bcd879d3a69863a053",
                    "sha": "28f23c887a22ebc836a005bcd879d3a69863a053",
                    "url": "https://api.github.com/repos/cython/cython/commits/28f23c887a22ebc836a005bcd879d3a69863a053"
                }
            ],
            "sha": "8056b2dc4aa755e0bc9f33be471695d3cdc0b95d",
            "url": "https://api.github.com/repos/cython/cython/commits/8056b2dc4aa755e0bc9f33be471695d3cdc0b95d"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/954ef166d8f3a30280da13415bebec000125e5c1/comments",
            "commit": {
                "author": {
                    "date": "2025-08-24T16:21:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-24T16:21:29Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Hopefully fix GCC atomics",
                "tree": {
                    "sha": "8f1e217ae165f89ad1c28ac1e959a867f980d6d5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8f1e217ae165f89ad1c28ac1e959a867f980d6d5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/954ef166d8f3a30280da13415bebec000125e5c1",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/954ef166d8f3a30280da13415bebec000125e5c1",
            "node_id": "C_kwDOAhr4b9oAKDk1NGVmMTY2ZDhmM2EzMDI4MGRhMTM0MTViZWJlYzAwMDEyNWU1YzE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8056b2dc4aa755e0bc9f33be471695d3cdc0b95d",
                    "sha": "8056b2dc4aa755e0bc9f33be471695d3cdc0b95d",
                    "url": "https://api.github.com/repos/cython/cython/commits/8056b2dc4aa755e0bc9f33be471695d3cdc0b95d"
                }
            ],
            "sha": "954ef166d8f3a30280da13415bebec000125e5c1",
            "url": "https://api.github.com/repos/cython/cython/commits/954ef166d8f3a30280da13415bebec000125e5c1"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/61c6f483752e1cd1126397ab5cf824c3e66c37ff/comments",
            "commit": {
                "author": {
                    "date": "2025-08-24T17:54:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-24T17:54:49Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Add scope to make c++ happy about goto",
                "tree": {
                    "sha": "044927da3b5f3e6f15bf0cc1c43b6f23f4a61284",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/044927da3b5f3e6f15bf0cc1c43b6f23f4a61284"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/61c6f483752e1cd1126397ab5cf824c3e66c37ff",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/61c6f483752e1cd1126397ab5cf824c3e66c37ff",
            "node_id": "C_kwDOAhr4b9oAKDYxYzZmNDgzNzUyZTFjZDExMjYzOTdhYjVjZjgyNGMzZTY2YzM3ZmY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/954ef166d8f3a30280da13415bebec000125e5c1",
                    "sha": "954ef166d8f3a30280da13415bebec000125e5c1",
                    "url": "https://api.github.com/repos/cython/cython/commits/954ef166d8f3a30280da13415bebec000125e5c1"
                }
            ],
            "sha": "61c6f483752e1cd1126397ab5cf824c3e66c37ff",
            "url": "https://api.github.com/repos/cython/cython/commits/61c6f483752e1cd1126397ab5cf824c3e66c37ff"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3492bdb6390f4164328c3358d183d6ad9cbc6153/comments",
            "commit": {
                "author": {
                    "date": "2025-08-24T19:44:42Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-24T19:44:42Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Actually fix freethreaded build",
                "tree": {
                    "sha": "a6abd4714154a836e590aa7613bd0fa6ab02422b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/a6abd4714154a836e590aa7613bd0fa6ab02422b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3492bdb6390f4164328c3358d183d6ad9cbc6153",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/3492bdb6390f4164328c3358d183d6ad9cbc6153",
            "node_id": "C_kwDOAhr4b9oAKDM0OTJiZGI2MzkwZjQxNjQzMjhjMzM1OGQxODNkNmFkOWNiYzYxNTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/61c6f483752e1cd1126397ab5cf824c3e66c37ff",
                    "sha": "61c6f483752e1cd1126397ab5cf824c3e66c37ff",
                    "url": "https://api.github.com/repos/cython/cython/commits/61c6f483752e1cd1126397ab5cf824c3e66c37ff"
                }
            ],
            "sha": "3492bdb6390f4164328c3358d183d6ad9cbc6153",
            "url": "https://api.github.com/repos/cython/cython/commits/3492bdb6390f4164328c3358d183d6ad9cbc6153"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3c3fa92613495d907a90c6320b548e863db7dabf/comments",
            "commit": {
                "author": {
                    "date": "2025-08-25T07:26:18Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-25T07:26:18Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "PyPy",
                "tree": {
                    "sha": "c6bb04e6f2d4a24e9f598ec0ca849e84b0b23ddd",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c6bb04e6f2d4a24e9f598ec0ca849e84b0b23ddd"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3c3fa92613495d907a90c6320b548e863db7dabf",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/3c3fa92613495d907a90c6320b548e863db7dabf",
            "node_id": "C_kwDOAhr4b9oAKDNjM2ZhOTI2MTM0OTVkOTA3YTkwYzYzMjBiNTQ4ZTg2M2RiN2RhYmY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3492bdb6390f4164328c3358d183d6ad9cbc6153",
                    "sha": "3492bdb6390f4164328c3358d183d6ad9cbc6153",
                    "url": "https://api.github.com/repos/cython/cython/commits/3492bdb6390f4164328c3358d183d6ad9cbc6153"
                }
            ],
            "sha": "3c3fa92613495d907a90c6320b548e863db7dabf",
            "url": "https://api.github.com/repos/cython/cython/commits/3c3fa92613495d907a90c6320b548e863db7dabf"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f6575d7efcf8b534607d5290e49938ff8f95ad74/comments",
            "commit": {
                "author": {
                    "date": "2025-08-25T07:26:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-25T07:26:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "PyPy2",
                "tree": {
                    "sha": "d5b505f100c9f9c4fdd6d92ab9213b5db931bb78",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d5b505f100c9f9c4fdd6d92ab9213b5db931bb78"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f6575d7efcf8b534607d5290e49938ff8f95ad74",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/f6575d7efcf8b534607d5290e49938ff8f95ad74",
            "node_id": "C_kwDOAhr4b9oAKGY2NTc1ZDdlZmNmOGI1MzQ2MDdkNTI5MGU0OTkzOGZmOGY5NWFkNzQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3c3fa92613495d907a90c6320b548e863db7dabf",
                    "sha": "3c3fa92613495d907a90c6320b548e863db7dabf",
                    "url": "https://api.github.com/repos/cython/cython/commits/3c3fa92613495d907a90c6320b548e863db7dabf"
                }
            ],
            "sha": "f6575d7efcf8b534607d5290e49938ff8f95ad74",
            "url": "https://api.github.com/repos/cython/cython/commits/f6575d7efcf8b534607d5290e49938ff8f95ad74"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/2692e1534c002869b1bb43b78b6fd0f2c963828f/comments",
            "commit": {
                "author": {
                    "date": "2025-08-31T08:13:58Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-08-31T08:13:58Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into tstring",
                "tree": {
                    "sha": "127d09308bf5e73ff0f29a76a8220ed6b0d5b5fe",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/127d09308bf5e73ff0f29a76a8220ed6b0d5b5fe"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/2692e1534c002869b1bb43b78b6fd0f2c963828f",
                "verification": {
                    "payload": "tree 127d09308bf5e73ff0f29a76a8220ed6b0d5b5fe\nparent f6575d7efcf8b534607d5290e49938ff8f95ad74\nparent ab597ee952b3162ce6e5c658c1f327a4180e71f0\nauthor da-woods <dw-git@d-woods.co.uk> 1756628038 +0100\ncommitter GitHub <noreply@github.com> 1756628038 +0100\n\nMerge branch 'master' into tstring",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJotARGCRC1aQ7uu5UhlAAAigIQAAz+NjY6mk7ZHQ4QLpln0xTD\nXQ/Yr+Fy7qz/hCXT8UnflKIHIYPYssifccALPEpQdq4cVaF+BNeVdiHXQlhclz8T\nRt9oB4SqcrLttdLh+tpyE3DImA+V67zPzLfkEzn6S5Bk4QVVfqxA8UE1jG/VLFsV\n1gwzbCvhTP0xG26Uw1lXA726Qk1MdkOi34UXEFab3JM5yQgX7rIaIDliQELW8VOi\nRYgM0KyOc5HAwpTbg2L2zXUj9hnamZTqBJzC77JsSg1wwn9s7mzzSvv0BlZZEcTE\nHxSESpLgp97RB+dRBN7jUGIjvTOskhlrdKF7bDnswOdtl79o2Tz6IPKs/InmqVsl\nIEoZOHW2W2At/har2Pa0XiejzJV5FWsBq7O6qnLuQBfSiZfUZFuVtsvzrd/gdVLE\nen3t0GZ2c/LGhRL+HFWhPCtNFdhK/rgG5ESX4ANHuik3Il+Cmi3YnoLXBG4VIDox\nz+UVpof/V52Me6h9nGUacqeOF69NKcHCu6L5i5ixinveZcdW5mZCPaGXHdxG9XLG\nDNTNs5vhSYo6zirWz6tEJ/LKSvVG9YGqfL1VdfW7zaoSoSr6gE8OT6bggYOdX0+K\niI/v4i6uaiji3KWaEAgj1rlGp4ttIwnpLMe575TpCF7NhB4AUQozAkNTDkk26iiN\nb9JLYlEDh9qkaHHVbUIk\n=vQSn\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-08-31T08:13:58Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/2692e1534c002869b1bb43b78b6fd0f2c963828f",
            "node_id": "C_kwDOAhr4b9oAKDI2OTJlMTUzNGMwMDI4NjliMWJiNDNiNzhiNmZkMGYyYzk2MzgyOGY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f6575d7efcf8b534607d5290e49938ff8f95ad74",
                    "sha": "f6575d7efcf8b534607d5290e49938ff8f95ad74",
                    "url": "https://api.github.com/repos/cython/cython/commits/f6575d7efcf8b534607d5290e49938ff8f95ad74"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/ab597ee952b3162ce6e5c658c1f327a4180e71f0",
                    "sha": "ab597ee952b3162ce6e5c658c1f327a4180e71f0",
                    "url": "https://api.github.com/repos/cython/cython/commits/ab597ee952b3162ce6e5c658c1f327a4180e71f0"
                }
            ],
            "sha": "2692e1534c002869b1bb43b78b6fd0f2c963828f",
            "url": "https://api.github.com/repos/cython/cython/commits/2692e1534c002869b1bb43b78b6fd0f2c963828f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c214bc65db5f16d69cd6f6b744a036f96a462078/comments",
            "commit": {
                "author": {
                    "date": "2025-09-17T06:35:18Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-17T06:35:18Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "77b22d2ef8bfc993f9e08b40205a526335008406",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/77b22d2ef8bfc993f9e08b40205a526335008406"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c214bc65db5f16d69cd6f6b744a036f96a462078",
                "verification": {
                    "payload": "tree 77b22d2ef8bfc993f9e08b40205a526335008406\nparent 2692e1534c002869b1bb43b78b6fd0f2c963828f\nauthor da-woods <dw-git@d-woods.co.uk> 1758090918 +0100\ncommitter GitHub <noreply@github.com> 1758090918 +0100\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoylanCRC1aQ7uu5UhlAAAkQsQAA0jE7lcqewslcH1xQhR9OLw\nxJ3gXjZ4NajQeikLElIcg9GxtHldF+K9afeO349DaT1PQVVjo2ZOalUCZn+hTYVX\nxJC7RyMWkAz+c9gzVCBadqS2H0sxidGImIXFgtbbIeTmw43f1TMTqkGaSsMOOqxL\nWDJpFFGAyf3k30mKvhm65yYqv+OvLlbqhUOu+w5gy3LLqzfG9YrVqu9dhbra1NX8\ncWEzcctFSdhHc2vI/gnD5fDpUUPUfcjUZMW++kbXZYH8grL7dF1RwbEglvfJlMT/\nqhs9nvwFeVJSeTF1khmkV5OP6N0xGClsm00IFWMm/vJWMtQuJcquKiuIUe5fNZTW\nJVP5D+nGCwb7CIdowBHaVnCCJ1kj+3WwHouBn87uspH1lE0myGGKoCN2Gax0pH1z\nKjHQh4qVv3Zqm5EqxpfLFqXDMSR4XDCCkdWvFXo7TuJJVjgTBmtsOvhP8tWUi4g9\nF1uv6kJUilfyMHKtbTbOJWVg5jKqNxKYdiI35JlXtCkt0fa98svKutWPu4B3lM+f\nAqd9JPVFQ6KIloSXE8auEH38hYyHPe/LJZPad1WkYQFaL5jjBxmRXgI8LJkIhZsd\n3Ed5KGVFrYVSHnzUmIgvGLOItp/+2uVZUrr29CjrfwxnI6tI26VBRsWmijLejp5S\nxgZvValCnwsOdSluUG5x\n=jhEA\n-----END PGP SIGNATURE-----\n",
                    "verified": true,
                    "verified_at": "2025-09-17T06:35:21Z"
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/c214bc65db5f16d69cd6f6b744a036f96a462078",
            "node_id": "C_kwDOAhr4b9oAKGMyMTRiYzY1ZGI1ZjE2ZDY5Y2Q2ZjZiNzQ0YTAzNmY5NmE0NjIwNzg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2692e1534c002869b1bb43b78b6fd0f2c963828f",
                    "sha": "2692e1534c002869b1bb43b78b6fd0f2c963828f",
                    "url": "https://api.github.com/repos/cython/cython/commits/2692e1534c002869b1bb43b78b6fd0f2c963828f"
                }
            ],
            "sha": "c214bc65db5f16d69cd6f6b744a036f96a462078",
            "url": "https://api.github.com/repos/cython/cython/commits/c214bc65db5f16d69cd6f6b744a036f96a462078"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/494609200193f03f47231d3e9bb48aa6cd6af713/comments",
            "commit": {
                "author": {
                    "date": "2025-09-17T06:35:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-17T06:35:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Tidy intendentation",
                "tree": {
                    "sha": "824ebe3d16b0eb69179e2f018deb123d06c3e1a6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/824ebe3d16b0eb69179e2f018deb123d06c3e1a6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/494609200193f03f47231d3e9bb48aa6cd6af713",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/494609200193f03f47231d3e9bb48aa6cd6af713",
            "node_id": "C_kwDOAhr4b9oAKDQ5NDYwOTIwMDE5M2YwM2Y0NzIzMWQzZTliYjQ4YWE2Y2Q2YWY3MTM",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c214bc65db5f16d69cd6f6b744a036f96a462078",
                    "sha": "c214bc65db5f16d69cd6f6b744a036f96a462078",
                    "url": "https://api.github.com/repos/cython/cython/commits/c214bc65db5f16d69cd6f6b744a036f96a462078"
                }
            ],
            "sha": "494609200193f03f47231d3e9bb48aa6cd6af713",
            "url": "https://api.github.com/repos/cython/cython/commits/494609200193f03f47231d3e9bb48aa6cd6af713"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/876613a3001aca13203ce3c621499ce6eb191890/comments",
            "commit": {
                "author": {
                    "date": "2025-09-26T07:46:27Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-26T07:46:27Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Change constructor interface to tstring\n\nJust have one constructor rather than a factory function.\nI think this'll work better with existing backports.",
                "tree": {
                    "sha": "9bb11d9781ce8150f2edd2d2128c2728d986aff9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9bb11d9781ce8150f2edd2d2128c2728d986aff9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/876613a3001aca13203ce3c621499ce6eb191890",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/876613a3001aca13203ce3c621499ce6eb191890",
            "node_id": "C_kwDOAhr4b9oAKDg3NjYxM2EzMDAxYWNhMTMyMDNjZTNjNjIxNDk5Y2U2ZWIxOTE4OTA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/494609200193f03f47231d3e9bb48aa6cd6af713",
                    "sha": "494609200193f03f47231d3e9bb48aa6cd6af713",
                    "url": "https://api.github.com/repos/cython/cython/commits/494609200193f03f47231d3e9bb48aa6cd6af713"
                }
            ],
            "sha": "876613a3001aca13203ce3c621499ce6eb191890",
            "url": "https://api.github.com/repos/cython/cython/commits/876613a3001aca13203ce3c621499ce6eb191890"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5933918a17f2f9fa5e11832387bd34622d89e2a8/comments",
            "commit": {
                "author": {
                    "date": "2025-09-26T07:47:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-26T07:47:59Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Newline at end of file",
                "tree": {
                    "sha": "699892f947629e0cf2de4a4360b2e871d876e77a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/699892f947629e0cf2de4a4360b2e871d876e77a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5933918a17f2f9fa5e11832387bd34622d89e2a8",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/5933918a17f2f9fa5e11832387bd34622d89e2a8",
            "node_id": "C_kwDOAhr4b9oAKDU5MzM5MThhMTdmMmY5ZmE1ZTExODMyMzg3YmQzNDYyMmQ4OWUyYTg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/876613a3001aca13203ce3c621499ce6eb191890",
                    "sha": "876613a3001aca13203ce3c621499ce6eb191890",
                    "url": "https://api.github.com/repos/cython/cython/commits/876613a3001aca13203ce3c621499ce6eb191890"
                }
            ],
            "sha": "5933918a17f2f9fa5e11832387bd34622d89e2a8",
            "url": "https://api.github.com/repos/cython/cython/commits/5933918a17f2f9fa5e11832387bd34622d89e2a8"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7e7a7ec4182df2a32f332797f586dd3818d450d8/comments",
            "commit": {
                "author": {
                    "date": "2025-09-26T08:24:57Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2025-09-26T08:24:57Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fix",
                "tree": {
                    "sha": "daca4e0b0c05934b05f916524ecfa4d0e8a26739",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/daca4e0b0c05934b05f916524ecfa4d0e8a26739"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7e7a7ec4182df2a32f332797f586dd3818d450d8",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false,
                    "verified_at": null
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "html_url": "https://github.com/cython/cython/commit/7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "node_id": "C_kwDOAhr4b9oAKDdlN2E3ZWM0MTgyZGYyYTMyZjMzMjc5N2Y1ODZkZDM4MThkNDUwZDg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5933918a17f2f9fa5e11832387bd34622d89e2a8",
                    "sha": "5933918a17f2f9fa5e11832387bd34622d89e2a8",
                    "url": "https://api.github.com/repos/cython/cython/commits/5933918a17f2f9fa5e11832387bd34622d89e2a8"
                }
            ],
            "sha": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
            "url": "https://api.github.com/repos/cython/cython/commits/7e7a7ec4182df2a32f332797f586dd3818d450d8"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/7103/commits",
    "created_at": "2025-08-24T09:20:06Z",
    "diff_url": "https://github.com/cython/cython/pull/7103.diff",
    "draft": false,
    "head": {
        "label": "da-woods:tstring",
        "ref": "tstring",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2025-09-26T08:25:10Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 80473,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2025-09-20T09:03:33Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "7e7a7ec4182df2a32f332797f586dd3818d450d8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/7103",
    "id": 2769704858,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/7103",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "e00dbec3966ad8e3c7ec65d58ed0fe0ca08eba6f",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOABDGAc6lFlea",
    "number": 7103,
    "patch_url": "https://github.com/cython/cython/pull/7103.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/7103/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/7e7a7ec4182df2a32f332797f586dd3818d450d8",
    "title": "Implement t-strings",
    "updated_at": "2025-09-26T08:25:11Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/7103",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods",
        "user_view_type": "public"
    }
}