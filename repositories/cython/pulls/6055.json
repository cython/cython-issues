{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/6055/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6055/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/6055"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/6055"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6055/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/6055"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/ac245d6366482ed6107931bd96bf2af344c9bd1f"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1469,
            "forks_count": 1469,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1333,
            "open_issues_count": 1333,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2024-08-21T18:56:26Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 73977,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 9264,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2024-08-22T06:07:00Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 9264,
            "watchers_count": 9264,
            "web_commit_signoff_required": false
        },
        "sha": "8f9dd4e0ffe411eda5eae815a195db8b98f355a1",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Stop using a table with init data and use one function call per code object creation again, but reduce the number of arguments passed into that function.\r\n\r\nSee comment in https://github.com/cython/cython/pull/6053#issuecomment-1975229048\r\nSee https://github.com/cython/cython/issues/4425\r\nSupersedes https://github.com/cython/cython/pull/6044",
    "closed_at": "2024-03-06T08:03:55Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6055#discussion_r1510698453"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6055"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1510698453"
                }
            },
            "author_association": "MEMBER",
            "body": "It's probably worth marking num_posonly_args as \"unused\" to avoid warnings (because it's only used on some versions)",
            "commit_id": "ac245d6366482ed6107931bd96bf2af344c9bd1f",
            "created_at": "2024-03-04T07:36:37Z",
            "diff_hunk": "@@ -2178,58 +2075,175 @@ static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }\n #pragma warning( pop )  /* undo whatever Cython has done to warnings */\n #endif\n \n-//////////////////// InitCodeObjs.proto ////////////////////////\n \n-typedef struct {\n-  // To get tracebacks\n-  int filename_idx;\n-\n-  //\n-  int argcount;\n-  int num_posonly_args; // posonlyargcount (Py3.8+ only)\n-  int kwonlyargcount;\n-  int nlocals;\n-  int flags;\n-  // PyObject* names // FIXME?\n-  PyObject* varnames;\n-  // PyObject* freevars; // FIXME?\n-  // PyObject* cellvars; // FIXME\n-  PyObject* filename;\n-  PyObject* funcname;\n-  int firstlineno;\n-} __Pyx_CodeObjectTabEntry;\n-\n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N); /* proto */\n-\n-//////////////////// InitCodeObjs ////////////////////////\n+//////////////////// NewCodeObj.proto ////////////////////////\n+\n+static PyObject* __Pyx_PyCode_New(\n+        int argcount,\n+        int num_posonly_args,\n+        int num_kwonly_args,\n+        int nlocals,\n+        // int s,\n+        int flags,\n+        // PyObject *code,\n+        // PyObject *consts,\n+        // PyObject* n,\n+        PyObject *varnames_tuple,\n+        // PyObject *freevars,\n+        // PyObject *cellvars,\n+        PyObject* filename,\n+        PyObject *funcname,\n+        int first_line\n+        // PyObject *lnotab\n+);/*proto*/\n+\n+//////////////////// NewCodeObj ////////////////////////\n //@substitute: naming\n \n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N) {\n-    for (Py_ssize_t i=0; i<N; ++i) {\n-        PyObject *result = (PyObject*)__Pyx_PyCode_New(\n-            table[i].argcount,\n-            table[i].num_posonly_args,\n-            table[i].kwonlyargcount,\n-            table[i].nlocals,\n-            0,\n-            table[i].flags,\n-            ${empty_bytes}, // code\n-            ${empty_tuple}, // consts\n-            ${empty_tuple}, // names (FIXME)\n-            table[i].varnames,\n-            ${empty_tuple}, // freevars (FIXME)\n-            ${empty_tuple}, // cellvars (FIXME)\n-            table[i].filename,\n-            table[i].funcname,\n-            table[i].firstlineno,\n-            ${empty_bytes} // lnotab\n-        );\n-        if (unlikely(!result)) __PYX_ERR(table[i].filename_idx, table[i].firstlineno, bad);\n-\n-        targets[i] = result;\n+#if CYTHON_COMPILING_IN_LIMITED_API\n+    // Note that the limited API doesn't know about PyCodeObject, so the type of this\n+    // is PyObject (unlike for the main API)\n+    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                       PyObject *fv, PyObject *cell, PyObject* fn,\n+                                       PyObject *name, int fline, PyObject *lnos) {\n+        // Backout option for generating a code object.\n+        // PyCode_NewEmpty isn't in the limited API. Therefore the two options are\n+        //  1. Python call of the code type with a long list of positional args.\n+        //  2. Generate a code object by compiling some trivial code, and customize.\n+        // We use the second because it's less sensitive to changes in the code type\n+        // constructor with version.\n+        PyObject *exception_table = NULL;\n+        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;\n+        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000\n+        PyObject *version_info;  /* borrowed */\n+        PyObject *py_minor_version = NULL;\n+        #endif\n+        long minor_version = 0;\n+        PyObject *type, *value, *traceback;\n+\n+        // we must be able to call this while an exception is happening - thus clear then restore the state\n+        PyErr_Fetch(&type, &value, &traceback);\n+\n+        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000\n+        minor_version = 11;\n+        // we don't yet need to distinguish between versions > 11\n+        // Note that from 3.13, when we do, we can use Py_Version\n+        #else\n+        if (!(version_info = PySys_GetObject(\"version_info\"))) goto end;\n+        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;\n+        minor_version = PyLong_AsLong(py_minor_version);\n+        Py_DECREF(py_minor_version);\n+        if (minor_version == -1 && PyErr_Occurred()) goto end;\n+        #endif\n+\n+        if (!(types_module = PyImport_ImportModule(\"types\"))) goto end;\n+        if (!(code_type = PyObject_GetAttrString(types_module, \"CodeType\"))) goto end;\n+\n+        if (minor_version <= 7) {\n+            // 3.7:\n+            // code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,\n+            //        constants, names, varnames, filename, name, firstlineno,\n+            //        lnotab[, freevars[, cellvars]])\n+            (void)p;\n+            result = PyObject_CallFunction(code_type, \"iiiiiOOOOOOiOO\", a, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else if (minor_version <= 10) {\n+            // 3.8, 3.9, 3.10\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    firstlineno, lnotab[, freevars[, cellvars]])\n+            // 3.10 switches lnotab for linetable, but is otherwise the same\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else {\n+            // 3.11, 3.12\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    qualname, firstlineno, linetable, exceptiontable, freevars=(), cellvars=(), /)\n+            // We use name and qualname for simplicity\n+            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);\n+        }\n+\n+    end:\n+        Py_XDECREF(code_type);\n+        Py_XDECREF(exception_table);\n+        Py_XDECREF(types_module);\n+        if (type) {\n+            PyErr_Restore(type, value, traceback);\n+        }\n+        return result;\n     }\n-    return 0;\n \n-    bad:\n-    return -1;\n+#elif PY_VERSION_HEX >= 0x030B0000\n+  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                         PyObject *fv, PyObject *cell, PyObject* fn,\n+                                         PyObject *name, int fline, PyObject *lnos) {\n+    // As earlier versions, but\n+    //  1. pass an empty bytes string as exception_table\n+    //  2. pass name as qualname (TODO this might implementing properly in future)\n+    PyCodeObject *result;\n+    result =\n+      #if PY_VERSION_HEX >= 0x030C0000\n+        PyUnstable_Code_NewWithPosOnlyArgs\n+      #else\n+        PyCode_NewWithPosOnlyArgs\n+      #endif\n+        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, ${empty_bytes});\n+    Py_DECREF(empty_bytes);\n+    return result;\n+  }\n+#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY\n+  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \\\n+          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n+#else\n+  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \\\n+          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n+#endif\n+\n+// This is a specialised helper function for creating Cython's function code objects.\n+// It only receives the arguments that differ between the Cython functions of the module.\n+// This minimises the calling code in the module init function.\n+static PyObject* __Pyx_PyCode_New(\n+        int argcount,\n+        int num_posonly_args,",
            "html_url": "https://github.com/cython/cython/pull/6055#discussion_r1510698453",
            "id": 1510698453,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5aC23V",
            "original_commit_id": "e1bfaf9871526f02f6de92077e01a0ba24d610e7",
            "original_line": 2212,
            "original_position": 304,
            "original_start_line": null,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 1913546067,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6055",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1510698453/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-04T07:37:10Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1510698453",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6055#discussion_r1511591883"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6055"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1511591883"
                }
            },
            "author_association": "MEMBER",
            "body": "varnames is before filename, and filename looks like a PyObject* rather than an index currently",
            "commit_id": "ac245d6366482ed6107931bd96bf2af344c9bd1f",
            "created_at": "2024-03-04T18:29:47Z",
            "diff_hunk": "@@ -10218,14 +10216,25 @@ def generate_codeoj_tab_entry(self, code):\n \n         argcount = len(func.args) - func.num_kwonly_args\n         num_posonly_args = func.num_posonly_args  # Py3.8+ only\n-        kwonlyargcount = func.num_kwonly_args\n+        kwonly_argcount = func.num_kwonly_args\n         nlocals = len(self.varnames.args)\n         flags = '|'.join(flags) or '0'\n+        first_lineno = self.pos[1]\n \n-        s = (f\"{filename_idx}, {argcount}, {num_posonly_args}, {kwonlyargcount}, \"\n-             f\"{nlocals}, {flags}, {varnames_result}, {file_path_result},\"\n-             f\"{func_name_result}, {self.pos[1]}\")\n-        code.putln(\"{%s}, /* %s */\" % (s, self.result_code))\n+        code.putln(\n+            f\"{self.result_code} = __Pyx_PyCode_New(\"\n+            f\"{argcount}, \"\n+            f\"{num_posonly_args}, \"\n+            f\"{kwonly_argcount}, \"\n+            f\"{nlocals}, \"\n+            f\"{flags}, \"\n+            f\"{filename_idx}, \"\n+            f\"{varnames_tuple_cname}, \"",
            "html_url": "https://github.com/cython/cython/pull/6055#discussion_r1511591883",
            "id": 1511591883,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc5aGQ_L",
            "original_commit_id": "e1bfaf9871526f02f6de92077e01a0ba24d610e7",
            "original_line": 10232,
            "original_position": 45,
            "original_start_line": 10231,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 1915013165,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6055",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1511591883/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-04T18:29:48Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1511591883",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6055#discussion_r1513316348"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6055"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1513316348"
                }
            },
            "author_association": "MEMBER",
            "body": "`PyDict_SetDefault` could do this in largely one go.",
            "commit_id": "ac245d6366482ed6107931bd96bf2af344c9bd1f",
            "created_at": "2024-03-05T18:30:59Z",
            "diff_hunk": "@@ -2178,58 +2075,205 @@ static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }\n #pragma warning( pop )  /* undo whatever Cython has done to warnings */\n #endif\n \n-//////////////////// InitCodeObjs.proto ////////////////////////\n \n-typedef struct {\n-  // To get tracebacks\n-  int filename_idx;\n-\n-  //\n-  int argcount;\n-  int num_posonly_args; // posonlyargcount (Py3.8+ only)\n-  int kwonlyargcount;\n-  int nlocals;\n-  int flags;\n-  // PyObject* names // FIXME?\n-  PyObject* varnames;\n-  // PyObject* freevars; // FIXME?\n-  // PyObject* cellvars; // FIXME\n-  PyObject* filename;\n-  PyObject* funcname;\n-  int firstlineno;\n-} __Pyx_CodeObjectTabEntry;\n-\n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N); /* proto */\n-\n-//////////////////// InitCodeObjs ////////////////////////\n+//////////////////// NewCodeObj.proto ////////////////////////\n+\n+static PyObject* __Pyx_PyCode_New(\n+        //int argcount,\n+        //int num_posonly_args,\n+        //int num_kwonly_args,\n+        //int nlocals,\n+        // int s,\n+        //int flags,\n+        //int first_line,\n+        __Pyx_PyCode_New_function_description descr,\n+        // PyObject *code,\n+        // PyObject *consts,\n+        // PyObject* n,\n+        // PyObject *varnames_tuple,\n+        PyObject **varnames,\n+        // PyObject *freevars,\n+        // PyObject *cellvars,\n+        PyObject *filename,\n+        PyObject *funcname,\n+        // PyObject *lnotab,\n+        PyObject *tuple_dedup_map\n+);/*proto*/\n+\n+//////////////////// NewCodeObj ////////////////////////\n //@substitute: naming\n \n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N) {\n-    for (Py_ssize_t i=0; i<N; ++i) {\n-        PyObject *result = (PyObject*)__Pyx_PyCode_New(\n-            table[i].argcount,\n-            table[i].num_posonly_args,\n-            table[i].kwonlyargcount,\n-            table[i].nlocals,\n-            0,\n-            table[i].flags,\n-            ${empty_bytes}, // code\n-            ${empty_tuple}, // consts\n-            ${empty_tuple}, // names (FIXME)\n-            table[i].varnames,\n-            ${empty_tuple}, // freevars (FIXME)\n-            ${empty_tuple}, // cellvars (FIXME)\n-            table[i].filename,\n-            table[i].funcname,\n-            table[i].firstlineno,\n-            ${empty_bytes} // lnotab\n-        );\n-        if (unlikely(!result)) __PYX_ERR(table[i].filename_idx, table[i].firstlineno, bad);\n-\n-        targets[i] = result;\n+#if CYTHON_COMPILING_IN_LIMITED_API\n+    // Note that the limited API doesn't know about PyCodeObject, so the type of this\n+    // is PyObject (unlike for the main API)\n+    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                       PyObject *fv, PyObject *cell, PyObject* fn,\n+                                       PyObject *name, int fline, PyObject *lnos) {\n+        // Backout option for generating a code object.\n+        // PyCode_NewEmpty isn't in the limited API. Therefore the two options are\n+        //  1. Python call of the code type with a long list of positional args.\n+        //  2. Generate a code object by compiling some trivial code, and customize.\n+        // We use the second because it's less sensitive to changes in the code type\n+        // constructor with version.\n+        PyObject *exception_table = NULL;\n+        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;\n+        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000\n+        PyObject *version_info;  /* borrowed */\n+        PyObject *py_minor_version = NULL;\n+        #endif\n+        long minor_version = 0;\n+        PyObject *type, *value, *traceback;\n+\n+        // we must be able to call this while an exception is happening - thus clear then restore the state\n+        PyErr_Fetch(&type, &value, &traceback);\n+\n+        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000\n+        minor_version = 11;\n+        // we don't yet need to distinguish between versions > 11\n+        // Note that from 3.13, when we do, we can use Py_Version\n+        #else\n+        if (!(version_info = PySys_GetObject(\"version_info\"))) goto end;\n+        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;\n+        minor_version = PyLong_AsLong(py_minor_version);\n+        Py_DECREF(py_minor_version);\n+        if (minor_version == -1 && PyErr_Occurred()) goto end;\n+        #endif\n+\n+        if (!(types_module = PyImport_ImportModule(\"types\"))) goto end;\n+        if (!(code_type = PyObject_GetAttrString(types_module, \"CodeType\"))) goto end;\n+\n+        if (minor_version <= 7) {\n+            // 3.7:\n+            // code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,\n+            //        constants, names, varnames, filename, name, firstlineno,\n+            //        lnotab[, freevars[, cellvars]])\n+            (void)p;\n+            result = PyObject_CallFunction(code_type, \"iiiiiOOOOOOiOO\", a, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else if (minor_version <= 10) {\n+            // 3.8, 3.9, 3.10\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    firstlineno, lnotab[, freevars[, cellvars]])\n+            // 3.10 switches lnotab for linetable, but is otherwise the same\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else {\n+            // 3.11, 3.12\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    qualname, firstlineno, linetable, exceptiontable, freevars=(), cellvars=(), /)\n+            // We use name and qualname for simplicity\n+            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);\n+        }\n+\n+    end:\n+        Py_XDECREF(code_type);\n+        Py_XDECREF(exception_table);\n+        Py_XDECREF(types_module);\n+        if (type) {\n+            PyErr_Restore(type, value, traceback);\n+        }\n+        return result;\n     }\n-    return 0;\n \n-    bad:\n-    return -1;\n+#elif PY_VERSION_HEX >= 0x030B0000\n+  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                         PyObject *fv, PyObject *cell, PyObject* fn,\n+                                         PyObject *name, int fline, PyObject *lnos) {\n+    // As earlier versions, but\n+    //  1. pass an empty bytes string as exception_table\n+    //  2. pass name as qualname (TODO this might implementing properly in future)\n+    PyCodeObject *result;\n+    result =\n+      #if PY_VERSION_HEX >= 0x030C0000\n+        PyUnstable_Code_NewWithPosOnlyArgs\n+      #else\n+        PyCode_NewWithPosOnlyArgs\n+      #endif\n+        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, ${empty_bytes});\n+    Py_DECREF(${empty_bytes});\n+    return result;\n+  }\n+#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY\n+  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \\\n+          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n+#else\n+  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \\\n+          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n+#endif\n+\n+// This is a specialised helper function for creating Cython's function code objects.\n+// It only receives the arguments that differ between the Cython functions of the module.\n+// This minimises the calling code in the module init function.\n+static PyObject* __Pyx_PyCode_New(\n+        //int argcount,\n+        //int num_posonly_args,\n+        //int num_kwonly_args,\n+        //int nlocals,\n+        // int s,\n+        //int flags,\n+        //int first_line,\n+        __Pyx_PyCode_New_function_description descr,\n+        // PyObject *code,\n+        // PyObject *consts,\n+        // PyObject* n,\n+        // PyObject *varnames_tuple,\n+        PyObject **varnames,\n+        // PyObject *freevars,\n+        // PyObject *cellvars,\n+        PyObject* filename,\n+        PyObject *funcname,\n+        // PyObject *lnotab,\n+        PyObject *tuple_dedup_map\n+) {\n+\n+    PyObject *code_obj = NULL, *varnames_tuple_dedup = NULL;\n+    Py_ssize_t var_count = (Py_ssize_t) descr.nlocals;\n+\n+    PyObject *varnames_tuple = PyTuple_New(var_count);\n+    if (unlikely(!varnames_tuple)) return NULL;\n+    for (Py_ssize_t i=0; i < var_count; i++) {\n+        Py_INCREF(varnames[i]);\n+        if (unlikely(__Pyx_PyTuple_SET_ITEM(varnames_tuple, i, varnames[i]) < 0)) goto done;\n+    }\n+\n+    varnames_tuple_dedup = PyDict_GetItem(tuple_dedup_map, varnames_tuple);\n+    if (!varnames_tuple_dedup) {\n+        if (unlikely(PyDict_SetItem(tuple_dedup_map, varnames_tuple, varnames_tuple) < 0)) goto done;\n+        varnames_tuple_dedup = varnames_tuple;\n+    }",
            "html_url": "https://github.com/cython/cython/pull/6055#discussion_r1513316348",
            "id": 1513316348,
            "line": 2250,
            "node_id": "PRRC_kwDOABDGAc5aM1_8",
            "original_commit_id": "6d10b2b63eeb58ad45776dd5d1d5738e1188e428",
            "original_line": 2249,
            "original_position": 341,
            "original_start_line": 2245,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": 342,
            "pull_request_review_id": 1917829849,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6055",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1513316348/reactions"
            },
            "side": "RIGHT",
            "start_line": 2246,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-05T18:30:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1513316348",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6055#discussion_r1513397101"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6055"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1513397101"
                }
            },
            "author_association": "MEMBER",
            "body": "I forgot the limited API here. It probably isn't worth the complication if you need to write the two-step version out too anyway",
            "commit_id": "ac245d6366482ed6107931bd96bf2af344c9bd1f",
            "created_at": "2024-03-05T19:40:27Z",
            "diff_hunk": "@@ -2178,58 +2075,205 @@ static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }\n #pragma warning( pop )  /* undo whatever Cython has done to warnings */\n #endif\n \n-//////////////////// InitCodeObjs.proto ////////////////////////\n \n-typedef struct {\n-  // To get tracebacks\n-  int filename_idx;\n-\n-  //\n-  int argcount;\n-  int num_posonly_args; // posonlyargcount (Py3.8+ only)\n-  int kwonlyargcount;\n-  int nlocals;\n-  int flags;\n-  // PyObject* names // FIXME?\n-  PyObject* varnames;\n-  // PyObject* freevars; // FIXME?\n-  // PyObject* cellvars; // FIXME\n-  PyObject* filename;\n-  PyObject* funcname;\n-  int firstlineno;\n-} __Pyx_CodeObjectTabEntry;\n-\n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N); /* proto */\n-\n-//////////////////// InitCodeObjs ////////////////////////\n+//////////////////// NewCodeObj.proto ////////////////////////\n+\n+static PyObject* __Pyx_PyCode_New(\n+        //int argcount,\n+        //int num_posonly_args,\n+        //int num_kwonly_args,\n+        //int nlocals,\n+        // int s,\n+        //int flags,\n+        //int first_line,\n+        __Pyx_PyCode_New_function_description descr,\n+        // PyObject *code,\n+        // PyObject *consts,\n+        // PyObject* n,\n+        // PyObject *varnames_tuple,\n+        PyObject **varnames,\n+        // PyObject *freevars,\n+        // PyObject *cellvars,\n+        PyObject *filename,\n+        PyObject *funcname,\n+        // PyObject *lnotab,\n+        PyObject *tuple_dedup_map\n+);/*proto*/\n+\n+//////////////////// NewCodeObj ////////////////////////\n //@substitute: naming\n \n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N) {\n-    for (Py_ssize_t i=0; i<N; ++i) {\n-        PyObject *result = (PyObject*)__Pyx_PyCode_New(\n-            table[i].argcount,\n-            table[i].num_posonly_args,\n-            table[i].kwonlyargcount,\n-            table[i].nlocals,\n-            0,\n-            table[i].flags,\n-            ${empty_bytes}, // code\n-            ${empty_tuple}, // consts\n-            ${empty_tuple}, // names (FIXME)\n-            table[i].varnames,\n-            ${empty_tuple}, // freevars (FIXME)\n-            ${empty_tuple}, // cellvars (FIXME)\n-            table[i].filename,\n-            table[i].funcname,\n-            table[i].firstlineno,\n-            ${empty_bytes} // lnotab\n-        );\n-        if (unlikely(!result)) __PYX_ERR(table[i].filename_idx, table[i].firstlineno, bad);\n-\n-        targets[i] = result;\n+#if CYTHON_COMPILING_IN_LIMITED_API\n+    // Note that the limited API doesn't know about PyCodeObject, so the type of this\n+    // is PyObject (unlike for the main API)\n+    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                       PyObject *fv, PyObject *cell, PyObject* fn,\n+                                       PyObject *name, int fline, PyObject *lnos) {\n+        // Backout option for generating a code object.\n+        // PyCode_NewEmpty isn't in the limited API. Therefore the two options are\n+        //  1. Python call of the code type with a long list of positional args.\n+        //  2. Generate a code object by compiling some trivial code, and customize.\n+        // We use the second because it's less sensitive to changes in the code type\n+        // constructor with version.\n+        PyObject *exception_table = NULL;\n+        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;\n+        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000\n+        PyObject *version_info;  /* borrowed */\n+        PyObject *py_minor_version = NULL;\n+        #endif\n+        long minor_version = 0;\n+        PyObject *type, *value, *traceback;\n+\n+        // we must be able to call this while an exception is happening - thus clear then restore the state\n+        PyErr_Fetch(&type, &value, &traceback);\n+\n+        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000\n+        minor_version = 11;\n+        // we don't yet need to distinguish between versions > 11\n+        // Note that from 3.13, when we do, we can use Py_Version\n+        #else\n+        if (!(version_info = PySys_GetObject(\"version_info\"))) goto end;\n+        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;\n+        minor_version = PyLong_AsLong(py_minor_version);\n+        Py_DECREF(py_minor_version);\n+        if (minor_version == -1 && PyErr_Occurred()) goto end;\n+        #endif\n+\n+        if (!(types_module = PyImport_ImportModule(\"types\"))) goto end;\n+        if (!(code_type = PyObject_GetAttrString(types_module, \"CodeType\"))) goto end;\n+\n+        if (minor_version <= 7) {\n+            // 3.7:\n+            // code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,\n+            //        constants, names, varnames, filename, name, firstlineno,\n+            //        lnotab[, freevars[, cellvars]])\n+            (void)p;\n+            result = PyObject_CallFunction(code_type, \"iiiiiOOOOOOiOO\", a, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else if (minor_version <= 10) {\n+            // 3.8, 3.9, 3.10\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    firstlineno, lnotab[, freevars[, cellvars]])\n+            // 3.10 switches lnotab for linetable, but is otherwise the same\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else {\n+            // 3.11, 3.12\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    qualname, firstlineno, linetable, exceptiontable, freevars=(), cellvars=(), /)\n+            // We use name and qualname for simplicity\n+            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);\n+        }\n+\n+    end:\n+        Py_XDECREF(code_type);\n+        Py_XDECREF(exception_table);\n+        Py_XDECREF(types_module);\n+        if (type) {\n+            PyErr_Restore(type, value, traceback);\n+        }\n+        return result;\n     }\n-    return 0;\n \n-    bad:\n-    return -1;\n+#elif PY_VERSION_HEX >= 0x030B0000\n+  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                         PyObject *fv, PyObject *cell, PyObject* fn,\n+                                         PyObject *name, int fline, PyObject *lnos) {\n+    // As earlier versions, but\n+    //  1. pass an empty bytes string as exception_table\n+    //  2. pass name as qualname (TODO this might implementing properly in future)\n+    PyCodeObject *result;\n+    result =\n+      #if PY_VERSION_HEX >= 0x030C0000\n+        PyUnstable_Code_NewWithPosOnlyArgs\n+      #else\n+        PyCode_NewWithPosOnlyArgs\n+      #endif\n+        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, ${empty_bytes});\n+    Py_DECREF(${empty_bytes});\n+    return result;\n+  }\n+#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY\n+  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \\\n+          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n+#else\n+  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \\\n+          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n+#endif\n+\n+// This is a specialised helper function for creating Cython's function code objects.\n+// It only receives the arguments that differ between the Cython functions of the module.\n+// This minimises the calling code in the module init function.\n+static PyObject* __Pyx_PyCode_New(\n+        //int argcount,\n+        //int num_posonly_args,\n+        //int num_kwonly_args,\n+        //int nlocals,\n+        // int s,\n+        //int flags,\n+        //int first_line,\n+        __Pyx_PyCode_New_function_description descr,\n+        // PyObject *code,\n+        // PyObject *consts,\n+        // PyObject* n,\n+        // PyObject *varnames_tuple,\n+        PyObject **varnames,\n+        // PyObject *freevars,\n+        // PyObject *cellvars,\n+        PyObject* filename,\n+        PyObject *funcname,\n+        // PyObject *lnotab,\n+        PyObject *tuple_dedup_map\n+) {\n+\n+    PyObject *code_obj = NULL, *varnames_tuple_dedup = NULL;\n+    Py_ssize_t var_count = (Py_ssize_t) descr.nlocals;\n+\n+    PyObject *varnames_tuple = PyTuple_New(var_count);\n+    if (unlikely(!varnames_tuple)) return NULL;\n+    for (Py_ssize_t i=0; i < var_count; i++) {\n+        Py_INCREF(varnames[i]);\n+        if (unlikely(__Pyx_PyTuple_SET_ITEM(varnames_tuple, i, varnames[i]) < 0)) goto done;\n+    }\n+\n+    varnames_tuple_dedup = PyDict_GetItem(tuple_dedup_map, varnames_tuple);\n+    if (!varnames_tuple_dedup) {\n+        if (unlikely(PyDict_SetItem(tuple_dedup_map, varnames_tuple, varnames_tuple) < 0)) goto done;\n+        varnames_tuple_dedup = varnames_tuple;\n+    }",
            "html_url": "https://github.com/cython/cython/pull/6055#discussion_r1513397101",
            "id": 1513397101,
            "in_reply_to_id": 1513316348,
            "line": 2250,
            "node_id": "PRRC_kwDOABDGAc5aNJtt",
            "original_commit_id": "6d10b2b63eeb58ad45776dd5d1d5738e1188e428",
            "original_line": 2249,
            "original_position": 341,
            "original_start_line": 2245,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": 342,
            "pull_request_review_id": 1917960473,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6055",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1513397101/reactions"
            },
            "side": "RIGHT",
            "start_line": 2246,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-05T19:40:28Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1513397101",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6055#discussion_r1513413013"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6055"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1513413013"
                }
            },
            "author_association": "MEMBER",
            "body": "I kept the two implementations. Almost every module out there should really call `PyDict_SetDefault()` here.",
            "commit_id": "ac245d6366482ed6107931bd96bf2af344c9bd1f",
            "created_at": "2024-03-05T19:56:08Z",
            "diff_hunk": "@@ -2178,58 +2075,205 @@ static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }\n #pragma warning( pop )  /* undo whatever Cython has done to warnings */\n #endif\n \n-//////////////////// InitCodeObjs.proto ////////////////////////\n \n-typedef struct {\n-  // To get tracebacks\n-  int filename_idx;\n-\n-  //\n-  int argcount;\n-  int num_posonly_args; // posonlyargcount (Py3.8+ only)\n-  int kwonlyargcount;\n-  int nlocals;\n-  int flags;\n-  // PyObject* names // FIXME?\n-  PyObject* varnames;\n-  // PyObject* freevars; // FIXME?\n-  // PyObject* cellvars; // FIXME\n-  PyObject* filename;\n-  PyObject* funcname;\n-  int firstlineno;\n-} __Pyx_CodeObjectTabEntry;\n-\n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N); /* proto */\n-\n-//////////////////// InitCodeObjs ////////////////////////\n+//////////////////// NewCodeObj.proto ////////////////////////\n+\n+static PyObject* __Pyx_PyCode_New(\n+        //int argcount,\n+        //int num_posonly_args,\n+        //int num_kwonly_args,\n+        //int nlocals,\n+        // int s,\n+        //int flags,\n+        //int first_line,\n+        __Pyx_PyCode_New_function_description descr,\n+        // PyObject *code,\n+        // PyObject *consts,\n+        // PyObject* n,\n+        // PyObject *varnames_tuple,\n+        PyObject **varnames,\n+        // PyObject *freevars,\n+        // PyObject *cellvars,\n+        PyObject *filename,\n+        PyObject *funcname,\n+        // PyObject *lnotab,\n+        PyObject *tuple_dedup_map\n+);/*proto*/\n+\n+//////////////////// NewCodeObj ////////////////////////\n //@substitute: naming\n \n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N) {\n-    for (Py_ssize_t i=0; i<N; ++i) {\n-        PyObject *result = (PyObject*)__Pyx_PyCode_New(\n-            table[i].argcount,\n-            table[i].num_posonly_args,\n-            table[i].kwonlyargcount,\n-            table[i].nlocals,\n-            0,\n-            table[i].flags,\n-            ${empty_bytes}, // code\n-            ${empty_tuple}, // consts\n-            ${empty_tuple}, // names (FIXME)\n-            table[i].varnames,\n-            ${empty_tuple}, // freevars (FIXME)\n-            ${empty_tuple}, // cellvars (FIXME)\n-            table[i].filename,\n-            table[i].funcname,\n-            table[i].firstlineno,\n-            ${empty_bytes} // lnotab\n-        );\n-        if (unlikely(!result)) __PYX_ERR(table[i].filename_idx, table[i].firstlineno, bad);\n-\n-        targets[i] = result;\n+#if CYTHON_COMPILING_IN_LIMITED_API\n+    // Note that the limited API doesn't know about PyCodeObject, so the type of this\n+    // is PyObject (unlike for the main API)\n+    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                       PyObject *fv, PyObject *cell, PyObject* fn,\n+                                       PyObject *name, int fline, PyObject *lnos) {\n+        // Backout option for generating a code object.\n+        // PyCode_NewEmpty isn't in the limited API. Therefore the two options are\n+        //  1. Python call of the code type with a long list of positional args.\n+        //  2. Generate a code object by compiling some trivial code, and customize.\n+        // We use the second because it's less sensitive to changes in the code type\n+        // constructor with version.\n+        PyObject *exception_table = NULL;\n+        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;\n+        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000\n+        PyObject *version_info;  /* borrowed */\n+        PyObject *py_minor_version = NULL;\n+        #endif\n+        long minor_version = 0;\n+        PyObject *type, *value, *traceback;\n+\n+        // we must be able to call this while an exception is happening - thus clear then restore the state\n+        PyErr_Fetch(&type, &value, &traceback);\n+\n+        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000\n+        minor_version = 11;\n+        // we don't yet need to distinguish between versions > 11\n+        // Note that from 3.13, when we do, we can use Py_Version\n+        #else\n+        if (!(version_info = PySys_GetObject(\"version_info\"))) goto end;\n+        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;\n+        minor_version = PyLong_AsLong(py_minor_version);\n+        Py_DECREF(py_minor_version);\n+        if (minor_version == -1 && PyErr_Occurred()) goto end;\n+        #endif\n+\n+        if (!(types_module = PyImport_ImportModule(\"types\"))) goto end;\n+        if (!(code_type = PyObject_GetAttrString(types_module, \"CodeType\"))) goto end;\n+\n+        if (minor_version <= 7) {\n+            // 3.7:\n+            // code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,\n+            //        constants, names, varnames, filename, name, firstlineno,\n+            //        lnotab[, freevars[, cellvars]])\n+            (void)p;\n+            result = PyObject_CallFunction(code_type, \"iiiiiOOOOOOiOO\", a, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else if (minor_version <= 10) {\n+            // 3.8, 3.9, 3.10\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    firstlineno, lnotab[, freevars[, cellvars]])\n+            // 3.10 switches lnotab for linetable, but is otherwise the same\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else {\n+            // 3.11, 3.12\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    qualname, firstlineno, linetable, exceptiontable, freevars=(), cellvars=(), /)\n+            // We use name and qualname for simplicity\n+            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);\n+        }\n+\n+    end:\n+        Py_XDECREF(code_type);\n+        Py_XDECREF(exception_table);\n+        Py_XDECREF(types_module);\n+        if (type) {\n+            PyErr_Restore(type, value, traceback);\n+        }\n+        return result;\n     }\n-    return 0;\n \n-    bad:\n-    return -1;\n+#elif PY_VERSION_HEX >= 0x030B0000\n+  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                         PyObject *fv, PyObject *cell, PyObject* fn,\n+                                         PyObject *name, int fline, PyObject *lnos) {\n+    // As earlier versions, but\n+    //  1. pass an empty bytes string as exception_table\n+    //  2. pass name as qualname (TODO this might implementing properly in future)\n+    PyCodeObject *result;\n+    result =\n+      #if PY_VERSION_HEX >= 0x030C0000\n+        PyUnstable_Code_NewWithPosOnlyArgs\n+      #else\n+        PyCode_NewWithPosOnlyArgs\n+      #endif\n+        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, ${empty_bytes});\n+    Py_DECREF(${empty_bytes});\n+    return result;\n+  }\n+#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY\n+  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \\\n+          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n+#else\n+  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \\\n+          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n+#endif\n+\n+// This is a specialised helper function for creating Cython's function code objects.\n+// It only receives the arguments that differ between the Cython functions of the module.\n+// This minimises the calling code in the module init function.\n+static PyObject* __Pyx_PyCode_New(\n+        //int argcount,\n+        //int num_posonly_args,\n+        //int num_kwonly_args,\n+        //int nlocals,\n+        // int s,\n+        //int flags,\n+        //int first_line,\n+        __Pyx_PyCode_New_function_description descr,\n+        // PyObject *code,\n+        // PyObject *consts,\n+        // PyObject* n,\n+        // PyObject *varnames_tuple,\n+        PyObject **varnames,\n+        // PyObject *freevars,\n+        // PyObject *cellvars,\n+        PyObject* filename,\n+        PyObject *funcname,\n+        // PyObject *lnotab,\n+        PyObject *tuple_dedup_map\n+) {\n+\n+    PyObject *code_obj = NULL, *varnames_tuple_dedup = NULL;\n+    Py_ssize_t var_count = (Py_ssize_t) descr.nlocals;\n+\n+    PyObject *varnames_tuple = PyTuple_New(var_count);\n+    if (unlikely(!varnames_tuple)) return NULL;\n+    for (Py_ssize_t i=0; i < var_count; i++) {\n+        Py_INCREF(varnames[i]);\n+        if (unlikely(__Pyx_PyTuple_SET_ITEM(varnames_tuple, i, varnames[i]) < 0)) goto done;\n+    }\n+\n+    varnames_tuple_dedup = PyDict_GetItem(tuple_dedup_map, varnames_tuple);\n+    if (!varnames_tuple_dedup) {\n+        if (unlikely(PyDict_SetItem(tuple_dedup_map, varnames_tuple, varnames_tuple) < 0)) goto done;\n+        varnames_tuple_dedup = varnames_tuple;\n+    }",
            "html_url": "https://github.com/cython/cython/pull/6055#discussion_r1513413013",
            "id": 1513413013,
            "in_reply_to_id": 1513316348,
            "line": 2250,
            "node_id": "PRRC_kwDOABDGAc5aNNmV",
            "original_commit_id": "6d10b2b63eeb58ad45776dd5d1d5738e1188e428",
            "original_line": 2249,
            "original_position": 341,
            "original_start_line": 2245,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": 342,
            "pull_request_review_id": 1917986270,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6055",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1513413013/reactions"
            },
            "side": "RIGHT",
            "start_line": 2246,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-05T19:56:08Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1513413013",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6055#discussion_r1725548691"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6055"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1725548691"
                }
            },
            "author_association": "MEMBER",
            "body": "@scoder Is this right? (I came across it while looking at module state and it's making me nervous because it isn't obvious why it's wanted)",
            "commit_id": "ac245d6366482ed6107931bd96bf2af344c9bd1f",
            "created_at": "2024-08-21T18:41:08Z",
            "diff_hunk": "@@ -2178,58 +2075,211 @@ static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }\n #pragma warning( pop )  /* undo whatever Cython has done to warnings */\n #endif\n \n-//////////////////// InitCodeObjs.proto ////////////////////////\n \n-typedef struct {\n-  // To get tracebacks\n-  int filename_idx;\n-\n-  //\n-  int argcount;\n-  int num_posonly_args; // posonlyargcount (Py3.8+ only)\n-  int kwonlyargcount;\n-  int nlocals;\n-  int flags;\n-  // PyObject* names // FIXME?\n-  PyObject* varnames;\n-  // PyObject* freevars; // FIXME?\n-  // PyObject* cellvars; // FIXME\n-  PyObject* filename;\n-  PyObject* funcname;\n-  int firstlineno;\n-} __Pyx_CodeObjectTabEntry;\n-\n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N); /* proto */\n-\n-//////////////////// InitCodeObjs ////////////////////////\n+//////////////////// NewCodeObj.proto ////////////////////////\n+\n+static PyObject* __Pyx_PyCode_New(\n+        //int argcount,\n+        //int num_posonly_args,\n+        //int num_kwonly_args,\n+        //int nlocals,\n+        // int s,\n+        //int flags,\n+        //int first_line,\n+        __Pyx_PyCode_New_function_description descr,\n+        // PyObject *code,\n+        // PyObject *consts,\n+        // PyObject* n,\n+        // PyObject *varnames_tuple,\n+        PyObject **varnames,\n+        // PyObject *freevars,\n+        // PyObject *cellvars,\n+        PyObject *filename,\n+        PyObject *funcname,\n+        // PyObject *lnotab,\n+        PyObject *tuple_dedup_map\n+);/*proto*/\n+\n+//////////////////// NewCodeObj ////////////////////////\n //@substitute: naming\n \n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N) {\n-    for (Py_ssize_t i=0; i<N; ++i) {\n-        PyObject *result = (PyObject*)__Pyx_PyCode_New(\n-            table[i].argcount,\n-            table[i].num_posonly_args,\n-            table[i].kwonlyargcount,\n-            table[i].nlocals,\n-            0,\n-            table[i].flags,\n-            ${empty_bytes}, // code\n-            ${empty_tuple}, // consts\n-            ${empty_tuple}, // names (FIXME)\n-            table[i].varnames,\n-            ${empty_tuple}, // freevars (FIXME)\n-            ${empty_tuple}, // cellvars (FIXME)\n-            table[i].filename,\n-            table[i].funcname,\n-            table[i].firstlineno,\n-            ${empty_bytes} // lnotab\n-        );\n-        if (unlikely(!result)) __PYX_ERR(table[i].filename_idx, table[i].firstlineno, bad);\n-\n-        targets[i] = result;\n+#if CYTHON_COMPILING_IN_LIMITED_API\n+    // Note that the limited API doesn't know about PyCodeObject, so the type of this\n+    // is PyObject (unlike for the main API)\n+    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                       PyObject *fv, PyObject *cell, PyObject* fn,\n+                                       PyObject *name, int fline, PyObject *lnos) {\n+        // Backout option for generating a code object.\n+        // PyCode_NewEmpty isn't in the limited API. Therefore the two options are\n+        //  1. Python call of the code type with a long list of positional args.\n+        //  2. Generate a code object by compiling some trivial code, and customize.\n+        // We use the second because it's less sensitive to changes in the code type\n+        // constructor with version.\n+        PyObject *exception_table = NULL;\n+        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;\n+        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000\n+        PyObject *version_info;  /* borrowed */\n+        PyObject *py_minor_version = NULL;\n+        #endif\n+        long minor_version = 0;\n+        PyObject *type, *value, *traceback;\n+\n+        // we must be able to call this while an exception is happening - thus clear then restore the state\n+        PyErr_Fetch(&type, &value, &traceback);\n+\n+        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000\n+        minor_version = 11;\n+        // we don't yet need to distinguish between versions > 11\n+        // Note that from 3.13, when we do, we can use Py_Version\n+        #else\n+        if (!(version_info = PySys_GetObject(\"version_info\"))) goto end;\n+        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;\n+        minor_version = PyLong_AsLong(py_minor_version);\n+        Py_DECREF(py_minor_version);\n+        if (minor_version == -1 && PyErr_Occurred()) goto end;\n+        #endif\n+\n+        if (!(types_module = PyImport_ImportModule(\"types\"))) goto end;\n+        if (!(code_type = PyObject_GetAttrString(types_module, \"CodeType\"))) goto end;\n+\n+        if (minor_version <= 7) {\n+            // 3.7:\n+            // code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,\n+            //        constants, names, varnames, filename, name, firstlineno,\n+            //        lnotab[, freevars[, cellvars]])\n+            (void)p;\n+            result = PyObject_CallFunction(code_type, \"iiiiiOOOOOOiOO\", a, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else if (minor_version <= 10) {\n+            // 3.8, 3.9, 3.10\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    firstlineno, lnotab[, freevars[, cellvars]])\n+            // 3.10 switches lnotab for linetable, but is otherwise the same\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else {\n+            // 3.11, 3.12\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    qualname, firstlineno, linetable, exceptiontable, freevars=(), cellvars=(), /)\n+            // We use name and qualname for simplicity\n+            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);\n+        }\n+\n+    end:\n+        Py_XDECREF(code_type);\n+        Py_XDECREF(exception_table);\n+        Py_XDECREF(types_module);\n+        if (type) {\n+            PyErr_Restore(type, value, traceback);\n+        }\n+        return result;\n     }\n-    return 0;\n \n-    bad:\n-    return -1;\n+#elif PY_VERSION_HEX >= 0x030B0000\n+  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                         PyObject *fv, PyObject *cell, PyObject* fn,\n+                                         PyObject *name, int fline, PyObject *lnos) {\n+    // As earlier versions, but\n+    //  1. pass an empty bytes string as exception_table\n+    //  2. pass name as qualname (TODO this might implementing properly in future)\n+    PyCodeObject *result;\n+    result =\n+      #if PY_VERSION_HEX >= 0x030C0000\n+        PyUnstable_Code_NewWithPosOnlyArgs\n+      #else\n+        PyCode_NewWithPosOnlyArgs\n+      #endif\n+        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, ${empty_bytes});\n+    Py_DECREF(${empty_bytes});",
            "html_url": "https://github.com/cython/cython/pull/6055#discussion_r1725548691",
            "id": 1725548691,
            "line": 2199,
            "node_id": "PRRC_kwDOABDGAc5m2ciT",
            "original_commit_id": "ac245d6366482ed6107931bd96bf2af344c9bd1f",
            "original_line": 2199,
            "original_position": 291,
            "original_start_line": null,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": 291,
            "pull_request_review_id": 2251621396,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6055",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1725548691/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-08-21T18:41:09Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1725548691",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/6055#discussion_r1725563311"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/6055"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/1725563311"
                }
            },
            "author_association": "MEMBER",
            "body": "Good catch. If you look at the original code, it created a new empty bytes object. After changing to `Naming.empty_bytes`, this decref became incorrect. I'll remove it.\r\n\r\nEdit: Removed in https://github.com/cython/cython/commit/7e2cd6ad57c9eeb1fc6bf5d2bea469888a3f9b61",
            "commit_id": "ac245d6366482ed6107931bd96bf2af344c9bd1f",
            "created_at": "2024-08-21T18:54:09Z",
            "diff_hunk": "@@ -2178,58 +2075,211 @@ static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }\n #pragma warning( pop )  /* undo whatever Cython has done to warnings */\n #endif\n \n-//////////////////// InitCodeObjs.proto ////////////////////////\n \n-typedef struct {\n-  // To get tracebacks\n-  int filename_idx;\n-\n-  //\n-  int argcount;\n-  int num_posonly_args; // posonlyargcount (Py3.8+ only)\n-  int kwonlyargcount;\n-  int nlocals;\n-  int flags;\n-  // PyObject* names // FIXME?\n-  PyObject* varnames;\n-  // PyObject* freevars; // FIXME?\n-  // PyObject* cellvars; // FIXME\n-  PyObject* filename;\n-  PyObject* funcname;\n-  int firstlineno;\n-} __Pyx_CodeObjectTabEntry;\n-\n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N); /* proto */\n-\n-//////////////////// InitCodeObjs ////////////////////////\n+//////////////////// NewCodeObj.proto ////////////////////////\n+\n+static PyObject* __Pyx_PyCode_New(\n+        //int argcount,\n+        //int num_posonly_args,\n+        //int num_kwonly_args,\n+        //int nlocals,\n+        // int s,\n+        //int flags,\n+        //int first_line,\n+        __Pyx_PyCode_New_function_description descr,\n+        // PyObject *code,\n+        // PyObject *consts,\n+        // PyObject* n,\n+        // PyObject *varnames_tuple,\n+        PyObject **varnames,\n+        // PyObject *freevars,\n+        // PyObject *cellvars,\n+        PyObject *filename,\n+        PyObject *funcname,\n+        // PyObject *lnotab,\n+        PyObject *tuple_dedup_map\n+);/*proto*/\n+\n+//////////////////// NewCodeObj ////////////////////////\n //@substitute: naming\n \n-static int __Pyx_InitCodeObjects(__Pyx_CodeObjectTabEntry *table, PyObject **targets, Py_ssize_t N) {\n-    for (Py_ssize_t i=0; i<N; ++i) {\n-        PyObject *result = (PyObject*)__Pyx_PyCode_New(\n-            table[i].argcount,\n-            table[i].num_posonly_args,\n-            table[i].kwonlyargcount,\n-            table[i].nlocals,\n-            0,\n-            table[i].flags,\n-            ${empty_bytes}, // code\n-            ${empty_tuple}, // consts\n-            ${empty_tuple}, // names (FIXME)\n-            table[i].varnames,\n-            ${empty_tuple}, // freevars (FIXME)\n-            ${empty_tuple}, // cellvars (FIXME)\n-            table[i].filename,\n-            table[i].funcname,\n-            table[i].firstlineno,\n-            ${empty_bytes} // lnotab\n-        );\n-        if (unlikely(!result)) __PYX_ERR(table[i].filename_idx, table[i].firstlineno, bad);\n-\n-        targets[i] = result;\n+#if CYTHON_COMPILING_IN_LIMITED_API\n+    // Note that the limited API doesn't know about PyCodeObject, so the type of this\n+    // is PyObject (unlike for the main API)\n+    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                       PyObject *fv, PyObject *cell, PyObject* fn,\n+                                       PyObject *name, int fline, PyObject *lnos) {\n+        // Backout option for generating a code object.\n+        // PyCode_NewEmpty isn't in the limited API. Therefore the two options are\n+        //  1. Python call of the code type with a long list of positional args.\n+        //  2. Generate a code object by compiling some trivial code, and customize.\n+        // We use the second because it's less sensitive to changes in the code type\n+        // constructor with version.\n+        PyObject *exception_table = NULL;\n+        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;\n+        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000\n+        PyObject *version_info;  /* borrowed */\n+        PyObject *py_minor_version = NULL;\n+        #endif\n+        long minor_version = 0;\n+        PyObject *type, *value, *traceback;\n+\n+        // we must be able to call this while an exception is happening - thus clear then restore the state\n+        PyErr_Fetch(&type, &value, &traceback);\n+\n+        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000\n+        minor_version = 11;\n+        // we don't yet need to distinguish between versions > 11\n+        // Note that from 3.13, when we do, we can use Py_Version\n+        #else\n+        if (!(version_info = PySys_GetObject(\"version_info\"))) goto end;\n+        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;\n+        minor_version = PyLong_AsLong(py_minor_version);\n+        Py_DECREF(py_minor_version);\n+        if (minor_version == -1 && PyErr_Occurred()) goto end;\n+        #endif\n+\n+        if (!(types_module = PyImport_ImportModule(\"types\"))) goto end;\n+        if (!(code_type = PyObject_GetAttrString(types_module, \"CodeType\"))) goto end;\n+\n+        if (minor_version <= 7) {\n+            // 3.7:\n+            // code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,\n+            //        constants, names, varnames, filename, name, firstlineno,\n+            //        lnotab[, freevars[, cellvars]])\n+            (void)p;\n+            result = PyObject_CallFunction(code_type, \"iiiiiOOOOOOiOO\", a, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else if (minor_version <= 10) {\n+            // 3.8, 3.9, 3.10\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    firstlineno, lnotab[, freevars[, cellvars]])\n+            // 3.10 switches lnotab for linetable, but is otherwise the same\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, fline, lnos, fv, cell);\n+        } else {\n+            // 3.11, 3.12\n+            // code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,\n+            //    flags, codestring, constants, names, varnames, filename, name,\n+            //    qualname, firstlineno, linetable, exceptiontable, freevars=(), cellvars=(), /)\n+            // We use name and qualname for simplicity\n+            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;\n+            result = PyObject_CallFunction(code_type, \"iiiiiiOOOOOOOiOO\", a,p, k, l, s, f, code,\n+                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);\n+        }\n+\n+    end:\n+        Py_XDECREF(code_type);\n+        Py_XDECREF(exception_table);\n+        Py_XDECREF(types_module);\n+        if (type) {\n+            PyErr_Restore(type, value, traceback);\n+        }\n+        return result;\n     }\n-    return 0;\n \n-    bad:\n-    return -1;\n+#elif PY_VERSION_HEX >= 0x030B0000\n+  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,\n+                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n+                                         PyObject *fv, PyObject *cell, PyObject* fn,\n+                                         PyObject *name, int fline, PyObject *lnos) {\n+    // As earlier versions, but\n+    //  1. pass an empty bytes string as exception_table\n+    //  2. pass name as qualname (TODO this might implementing properly in future)\n+    PyCodeObject *result;\n+    result =\n+      #if PY_VERSION_HEX >= 0x030C0000\n+        PyUnstable_Code_NewWithPosOnlyArgs\n+      #else\n+        PyCode_NewWithPosOnlyArgs\n+      #endif\n+        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, ${empty_bytes});\n+    Py_DECREF(${empty_bytes});",
            "html_url": "https://github.com/cython/cython/pull/6055#discussion_r1725563311",
            "id": 1725563311,
            "in_reply_to_id": 1725548691,
            "line": 2199,
            "node_id": "PRRC_kwDOABDGAc5m2gGv",
            "original_commit_id": "ac245d6366482ed6107931bd96bf2af344c9bd1f",
            "original_line": 2199,
            "original_position": 291,
            "original_start_line": null,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": 291,
            "pull_request_review_id": 2251644961,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/6055",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/1725563311/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-08-21T18:57:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/1725563311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/6055/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e1bfaf9871526f02f6de92077e01a0ba24d610e7/comments",
            "commit": {
                "author": {
                    "date": "2024-03-03T21:38:31Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-03T21:38:31Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Reduce the overhead of creating the function code objects at module init time.",
                "tree": {
                    "sha": "6180c188e1f4fe43f9fe5abb6ce2654b128351b0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/6180c188e1f4fe43f9fe5abb6ce2654b128351b0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e1bfaf9871526f02f6de92077e01a0ba24d610e7",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "html_url": "https://github.com/cython/cython/commit/e1bfaf9871526f02f6de92077e01a0ba24d610e7",
            "node_id": "C_kwDOACXZ0toAKGUxYmZhZjk4NzE1MjZmMDJmNmRlOTIwNzdlMDFhMGJhMjRkNjEwZTc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8f9dd4e0ffe411eda5eae815a195db8b98f355a1",
                    "sha": "8f9dd4e0ffe411eda5eae815a195db8b98f355a1",
                    "url": "https://api.github.com/repos/cython/cython/commits/8f9dd4e0ffe411eda5eae815a195db8b98f355a1"
                }
            ],
            "sha": "e1bfaf9871526f02f6de92077e01a0ba24d610e7",
            "url": "https://api.github.com/repos/cython/cython/commits/e1bfaf9871526f02f6de92077e01a0ba24d610e7"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/628088dffc0942292eeb7e98d23bd7ae619416f4/comments",
            "commit": {
                "author": {
                    "date": "2024-03-04T19:09:17Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-04T19:09:17Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Use a mix of struct config and PyCode_New() calls to build code objects.",
                "tree": {
                    "sha": "0d51acd881d1ee99f02986713e5a4d8049cc240c",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/0d51acd881d1ee99f02986713e5a4d8049cc240c"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/628088dffc0942292eeb7e98d23bd7ae619416f4",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "html_url": "https://github.com/cython/cython/commit/628088dffc0942292eeb7e98d23bd7ae619416f4",
            "node_id": "C_kwDOACXZ0toAKDYyODA4OGRmZmMwOTQyMjkyZWViN2U5OGQyM2JkN2FlNjE5NDE2ZjQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e1bfaf9871526f02f6de92077e01a0ba24d610e7",
                    "sha": "e1bfaf9871526f02f6de92077e01a0ba24d610e7",
                    "url": "https://api.github.com/repos/cython/cython/commits/e1bfaf9871526f02f6de92077e01a0ba24d610e7"
                }
            ],
            "sha": "628088dffc0942292eeb7e98d23bd7ae619416f4",
            "url": "https://api.github.com/repos/cython/cython/commits/628088dffc0942292eeb7e98d23bd7ae619416f4"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5c79f751e7bcf4fa80bc1ea92f8387f7c2d05c5e/comments",
            "commit": {
                "author": {
                    "date": "2024-03-05T09:32:50Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-05T09:32:50Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Generate variable name tuples when creating CodeObjects, not independently as module state constants.",
                "tree": {
                    "sha": "5380ca816415b02c04600ed47349bb031ffe2968",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5380ca816415b02c04600ed47349bb031ffe2968"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5c79f751e7bcf4fa80bc1ea92f8387f7c2d05c5e",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "html_url": "https://github.com/cython/cython/commit/5c79f751e7bcf4fa80bc1ea92f8387f7c2d05c5e",
            "node_id": "C_kwDOACXZ0toAKDVjNzlmNzUxZTdiY2Y0ZmE4MGJjMWVhOTJmODM4N2Y3YzJkMDVjNWU",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/628088dffc0942292eeb7e98d23bd7ae619416f4",
                    "sha": "628088dffc0942292eeb7e98d23bd7ae619416f4",
                    "url": "https://api.github.com/repos/cython/cython/commits/628088dffc0942292eeb7e98d23bd7ae619416f4"
                }
            ],
            "sha": "5c79f751e7bcf4fa80bc1ea92f8387f7c2d05c5e",
            "url": "https://api.github.com/repos/cython/cython/commits/5c79f751e7bcf4fa80bc1ea92f8387f7c2d05c5e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6d10b2b63eeb58ad45776dd5d1d5738e1188e428/comments",
            "commit": {
                "author": {
                    "date": "2024-03-05T09:55:54Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-05T09:55:54Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Some more code cleanups.",
                "tree": {
                    "sha": "835b819a49f4443917db9e2110f045375db773ab",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/835b819a49f4443917db9e2110f045375db773ab"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6d10b2b63eeb58ad45776dd5d1d5738e1188e428",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "html_url": "https://github.com/cython/cython/commit/6d10b2b63eeb58ad45776dd5d1d5738e1188e428",
            "node_id": "C_kwDOACXZ0toAKDZkMTBiMmI2M2VlYjU4YWQ0NTc3NmRkNWQxZDU3MzhlMTE4OGU0Mjg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5c79f751e7bcf4fa80bc1ea92f8387f7c2d05c5e",
                    "sha": "5c79f751e7bcf4fa80bc1ea92f8387f7c2d05c5e",
                    "url": "https://api.github.com/repos/cython/cython/commits/5c79f751e7bcf4fa80bc1ea92f8387f7c2d05c5e"
                }
            ],
            "sha": "6d10b2b63eeb58ad45776dd5d1d5738e1188e428",
            "url": "https://api.github.com/repos/cython/cython/commits/6d10b2b63eeb58ad45776dd5d1d5738e1188e428"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/54332973410b7d30ce7519e880d0f4fc75b655fd/comments",
            "commit": {
                "author": {
                    "date": "2024-03-05T19:21:46Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-05T19:21:46Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Simplify code.",
                "tree": {
                    "sha": "4ed63ef2087b89866f6eb63753632f9be08c08e0",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4ed63ef2087b89866f6eb63753632f9be08c08e0"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/54332973410b7d30ce7519e880d0f4fc75b655fd",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "html_url": "https://github.com/cython/cython/commit/54332973410b7d30ce7519e880d0f4fc75b655fd",
            "node_id": "C_kwDOACXZ0toAKDU0MzMyOTczNDEwYjdkMzBjZTc1MTllODgwZDBmNGZjNzViNjU1ZmQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6d10b2b63eeb58ad45776dd5d1d5738e1188e428",
                    "sha": "6d10b2b63eeb58ad45776dd5d1d5738e1188e428",
                    "url": "https://api.github.com/repos/cython/cython/commits/6d10b2b63eeb58ad45776dd5d1d5738e1188e428"
                }
            ],
            "sha": "54332973410b7d30ce7519e880d0f4fc75b655fd",
            "url": "https://api.github.com/repos/cython/cython/commits/54332973410b7d30ce7519e880d0f4fc75b655fd"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ac245d6366482ed6107931bd96bf2af344c9bd1f/comments",
            "commit": {
                "author": {
                    "date": "2024-03-05T19:46:22Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2024-03-05T19:47:00Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "Stefan Behnel"
                },
                "message": "Fix limited API and generalise macro guard.",
                "tree": {
                    "sha": "eb76ebefa95b685edab609836a81406d41552c6f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/eb76ebefa95b685edab609836a81406d41552c6f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ac245d6366482ed6107931bd96bf2af344c9bd1f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "html_url": "https://github.com/cython/cython/commit/ac245d6366482ed6107931bd96bf2af344c9bd1f",
            "node_id": "C_kwDOACXZ0toAKGFjMjQ1ZDYzNjY0ODJlZDYxMDc5MzFiZDk2YmYyYWYzNDRjOWJkMWY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/54332973410b7d30ce7519e880d0f4fc75b655fd",
                    "sha": "54332973410b7d30ce7519e880d0f4fc75b655fd",
                    "url": "https://api.github.com/repos/cython/cython/commits/54332973410b7d30ce7519e880d0f4fc75b655fd"
                }
            ],
            "sha": "ac245d6366482ed6107931bd96bf2af344c9bd1f",
            "url": "https://api.github.com/repos/cython/cython/commits/ac245d6366482ed6107931bd96bf2af344c9bd1f"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/6055/commits",
    "created_at": "2024-03-03T21:45:14Z",
    "diff_url": "https://github.com/cython/cython/pull/6055.diff",
    "draft": false,
    "head": {
        "label": "scoder:small_codeobj_init",
        "ref": "small_codeobj_init",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/scoder/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/scoder/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/scoder/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/scoder/cython/branches{/branch}",
            "clone_url": "https://github.com/scoder/cython.git",
            "collaborators_url": "https://api.github.com/repos/scoder/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/scoder/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/scoder/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/scoder/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/scoder/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/scoder/cython/contributors",
            "created_at": "2011-09-29T07:52:12Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/scoder/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/scoder/cython/downloads",
            "events_url": "https://api.github.com/repos/scoder/cython/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/scoder/cython/forks",
            "full_name": "scoder/cython",
            "git_commits_url": "https://api.github.com/repos/scoder/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/scoder/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/scoder/cython/git/tags{/sha}",
            "git_url": "git://github.com/scoder/cython.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": false,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/scoder/cython/hooks",
            "html_url": "https://github.com/scoder/cython",
            "id": 2480594,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/scoder/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/scoder/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/scoder/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/scoder/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/scoder/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/scoder/cython/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/scoder/cython/merges",
            "milestones_url": "https://api.github.com/repos/scoder/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNDgwNTk0",
            "notifications_url": "https://api.github.com/repos/scoder/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/scoder/cython/pulls{/number}",
            "pushed_at": "2024-08-22T13:53:20Z",
            "releases_url": "https://api.github.com/repos/scoder/cython/releases{/id}",
            "size": 73626,
            "ssh_url": "git@github.com:scoder/cython.git",
            "stargazers_count": 11,
            "stargazers_url": "https://api.github.com/repos/scoder/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/scoder/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/scoder/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/scoder/cython/subscription",
            "svn_url": "https://github.com/scoder/cython",
            "tags_url": "https://api.github.com/repos/scoder/cython/tags",
            "teams_url": "https://api.github.com/repos/scoder/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/scoder/cython/git/trees{/sha}",
            "updated_at": "2024-08-22T04:24:41Z",
            "url": "https://api.github.com/repos/scoder/cython",
            "visibility": "public",
            "watchers": 11,
            "watchers_count": 11,
            "web_commit_signoff_required": false
        },
        "sha": "ac245d6366482ed6107931bd96bf2af344c9bd1f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/6055",
    "id": 1753597768,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/6055",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558030,
            "name": "cleanup",
            "node_id": "MDU6TGFiZWw0MjU1NTgwMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/cleanup"
        }
    ],
    "locked": false,
    "merge_commit_sha": "f5763fa1d69cc550c2e416a387cc84f9c8766beb",
    "merged_at": "2024-03-06T08:03:55Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 200,
        "created_at": "2019-02-24T14:21:23Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "* Remove code for Python 2 and Python < 3.7.\r\n* Integrate better with Python 3.\r\n* Improve support for the Limited API.\r\n* Start supporting GIL-free Python 3.13.\r\n* Support the Py3.13 `sys.monitoring` API.\r\n* Support and use `am_send` for coroutines.",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/65",
        "id": 4082235,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/65/labels",
        "node_id": "MDk6TWlsZXN0b25lNDA4MjIzNQ==",
        "number": 65,
        "open_issues": 18,
        "state": "open",
        "title": "3.1",
        "updated_at": "2024-08-22T09:52:26Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/65"
    },
    "node_id": "PR_kwDOABDGAc5ohcdI",
    "number": 6055,
    "patch_url": "https://github.com/cython/cython/pull/6055.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/6055/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/ac245d6366482ed6107931bd96bf2af344c9bd1f",
    "title": "Reduce the overhead of creating the function code objects at module init time",
    "updated_at": "2024-08-21T18:54:09Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/6055",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder"
    }
}