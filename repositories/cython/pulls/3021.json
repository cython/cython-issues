{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/3021/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3021/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/3021"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/3021"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3021/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/3021"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff"
        }
    },
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 879,
            "forks_count": 879,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 687,
            "open_issues_count": 687,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2019-08-29T14:31:45Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 55538,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 4328,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2019-08-29T03:31:04Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 4328,
            "watchers_count": 4328
        },
        "sha": "4e02338e8c282b30d42564c52c4fba6de69ed984",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Support `METH_FASTCALL` for builtin functions (not yet CyFunctions) on CPython 3.7",
    "closed_at": "2019-08-27T18:33:19Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316358923"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316358923"
                }
            },
            "author_association": "MEMBER",
            "body": "Please use a `//` comment here so that it doesn't get copied into the generated code file. (`/*â€¦*/` comments are not discarded when they span multiple lines)",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-21T19:17:34Z",
            "diff_hunk": "@@ -126,26 +126,43 @@ static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name\n //  function that does not accept them.\n \n static int __Pyx_CheckKeywordStrings(\n-    PyObject *kwdict,\n+    PyObject *kw,  // dict (for METH_VARARGS) or tuple (for METH_FASTCALL)\n     const char* function_name,\n     int kw_allowed)\n {\n     PyObject* key = 0;\n     Py_ssize_t pos = 0;\n #if CYTHON_COMPILING_IN_PYPY\n     /* PyPy appears to check keywords at call time, not at unpacking time => not much to do here */\n-    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))\n+    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))\n         goto invalid_keyword;\n     return 1;\n #else\n-    while (PyDict_Next(kwdict, &pos, &key, 0)) {\n+    if (CYTHON_METH_FASTCALL && PyTuple_Check(kw)) {\n+        if (unlikely(PyTuple_GET_SIZE(kw) == 0))\n+            return 1;\n+        if (!kw_allowed)\n+            goto invalid_keyword;\n+#if PY_VERSION_HEX < 0x03090000\n+        /* On CPython >= 3.9, the FASTCALL protocol guarantees that keyword\n+         * names are strings (see https://bugs.python.org/issue37540) */",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316358923",
            "id": 316358923,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM1ODkyMw==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 35,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 278017546,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316358923",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316359404"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316359404"
                }
            },
            "author_association": "MEMBER",
            "body": "Sad, but at least explicit.",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-21T19:18:48Z",
            "diff_hunk": "@@ -1935,6 +1937,9 @@ def _synthesize_assignment(self, node, env):\n             rhs.binding = True\n \n         node.is_cyfunction = rhs.binding\n+        if rhs.binding:\n+            # For the moment, CyFunctions do not support METH_FASTCALL",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316359404",
            "id": 316359404,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM1OTQwNA==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 14,
            "path": "Cython/Compiler/ParseTreeTransforms.py",
            "position": 14,
            "pull_request_review_id": 278017546,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316359404",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316360157"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316360157"
                }
            },
            "author_association": "MEMBER",
            "body": "`key` is only `unlikely()` when `!kw_allowed`. Otherwise, I'd not take a guess.",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-21T19:20:33Z",
            "diff_hunk": "@@ -126,26 +126,43 @@ static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name\n //  function that does not accept them.\n \n static int __Pyx_CheckKeywordStrings(\n-    PyObject *kwdict,\n+    PyObject *kw,  // dict (for METH_VARARGS) or tuple (for METH_FASTCALL)\n     const char* function_name,\n     int kw_allowed)\n {\n     PyObject* key = 0;\n     Py_ssize_t pos = 0;\n #if CYTHON_COMPILING_IN_PYPY\n     /* PyPy appears to check keywords at call time, not at unpacking time => not much to do here */\n-    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))\n+    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))\n         goto invalid_keyword;\n     return 1;\n #else\n-    while (PyDict_Next(kwdict, &pos, &key, 0)) {\n+    if (CYTHON_METH_FASTCALL && PyTuple_Check(kw)) {\n+        if (unlikely(PyTuple_GET_SIZE(kw) == 0))\n+            return 1;\n+        if (!kw_allowed)\n+            goto invalid_keyword;\n+#if PY_VERSION_HEX < 0x03090000\n+        /* On CPython >= 3.9, the FASTCALL protocol guarantees that keyword\n+         * names are strings (see https://bugs.python.org/issue37540) */\n+        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {\n+            key = PyTuple_GET_ITEM(kw, pos);\n+            if (unlikely(!PyUnicode_Check(key)))\n+                goto invalid_keyword_type;\n+        }\n+#endif\n+        return 1;\n+    }\n+\n+    while (PyDict_Next(kw, &pos, &key, 0)) {\n         #if PY_MAJOR_VERSION < 3\n         if (unlikely(!PyString_Check(key)))\n         #endif\n             if (unlikely(!PyUnicode_Check(key)))\n                 goto invalid_keyword_type;\n     }\n-    if ((!kw_allowed) && unlikely(key))\n+    if (unlikely(key) && !kw_allowed)",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316360157",
            "id": 316360157,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM2MDE1Nw==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 53,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 278017546,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316360157",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316362575"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316362575"
                }
            },
            "author_association": "MEMBER",
            "body": "I wonder if it would be worth letting the caller pass a constant flag to distinguish the two cases, rather than splitting them at runtime. Could allow the C compiler to do some better magic. Then again, today's CPUs would probably handle the runtime tests quite fineâ€¦",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-21T19:26:42Z",
            "diff_hunk": "@@ -201,7 +225,18 @@ static int __Pyx_ParseOptionalKeywords(\n     PyObject*** name;\n     PyObject*** first_kw_arg = argnames + num_pos_args;\n \n-    while (PyDict_Next(kwds, &pos, &key, &value)) {\n+    while (1) {\n+        if (CYTHON_METH_FASTCALL && PyTuple_Check(kwds)) {",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316362575",
            "id": 316362575,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM2MjU3NQ==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 111,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 278017546,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316362575",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316364015"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316364015"
                }
            },
            "author_association": "MEMBER",
            "body": "It's probably worth running a tight loop with only object pointer comparisons first. Keyword names are almost always interned. If comparisons are really needed as fallback, there is also an inlined `__Pyx_PyUnicode_Equals()` function in `StringTools.c`, although I guess that case is less relevant in practice.",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-21T19:30:25Z",
            "diff_hunk": "@@ -350,3 +386,67 @@ static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping) {\n     Py_XDECREF(iter);\n     return -1;\n }\n+\n+\n+/////////////// fastcall.proto ///////////////\n+\n+// We define various functions and macros with two variants:\n+//..._FASTCALL and ..._VARARGS\n+\n+// The first is used when METH_FASTCALL is enabled and the second is used\n+// otherwise. If the Python implementation does not support METH_FASTCALL\n+// (because it's an old version of CPython or it's not CPython at all),\n+// then the ..._FASTCALL macros simply alias ..._VARARGS\n+\n+#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)\n+#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)\n+#define __Pyx_KwValues_VARARGS(args, nargs) NULL\n+#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStr(kw, s)\n+#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)\n+#if CYTHON_METH_FASTCALL\n+    #define __Pyx_Arg_FASTCALL(args, i) args[i]\n+    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)\n+    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])\n+    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);\n+    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)\n+#else\n+    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS\n+    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS\n+    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS\n+    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS\n+    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS\n+#endif\n+\n+#if CYTHON_COMPILING_IN_CPYTHON\n+#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)\n+#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)\n+#else\n+/* Not CPython, so certainly no METH_FASTCALL support */\n+#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)\n+#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)\n+#endif\n+\n+\n+/////////////// fastcall ///////////////\n+//@requires: ObjectHandling.c::TupleAndListFromArray\n+\n+#if CYTHON_METH_FASTCALL\n+// kwnames: tuple with names of keyword arguments\n+// kwvalues: C array with values of keyword arguments\n+// s: str with the keyword name to look for\n+static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)\n+{\n+    Py_ssize_t i;\n+    for (i = 0; i < PyTuple_GET_SIZE(kwnames); i++)\n+    {\n+        PyObject *cmp = PyUnicode_RichCompare(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316364015",
            "id": 316364015,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM2NDAxNQ==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 196,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 278017546,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316364015",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316368402"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316368402"
                }
            },
            "author_association": "MEMBER",
            "body": "If you put the comment in a separate line, it will not be copied into the output.",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-21T19:42:10Z",
            "diff_hunk": "@@ -126,26 +126,43 @@ static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name\n //  function that does not accept them.\n \n static int __Pyx_CheckKeywordStrings(\n-    PyObject *kwdict,\n+    PyObject *kw,  // dict (for METH_VARARGS) or tuple (for METH_FASTCALL)",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316368402",
            "id": 316368402,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM2ODQwMg==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 14,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 278017546,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316368402",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316371428"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316371428"
                }
            },
            "author_association": "MEMBER",
            "body": "I wonder if a method like `.as_fastcall_signature()` on signature objects might be a good idea, rather than the copying here. Don't know.",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-21T19:50:15Z",
            "diff_hunk": "@@ -3093,6 +3093,36 @@ def analyse_signature(self, env):\n                 if arg.is_generic and (arg.type.is_extension_type or arg.type.is_builtin_type):\n                     arg.needs_type_test = 1\n \n+        # Decide whether to use METH_FASTCALL\n+        # 1. If we use METH_NOARGS or METH_O, keep that. We can only change\n+        #    METH_VARARGS to METH_FASTCALL\n+        # 2. Special methods like __call__ always use the METH_VARGARGS\n+        #    calling convention\n+        # 3. For the moment, CyFunctions do not support METH_FASTCALL\n+        mf = sig.method_flags()\n+        if (mf and TypeSlots.method_varargs in mf and\n+                not self.entry.is_special and not self.is_cyfunction):\n+            # 4. If the function uses the full args tuple, it's more\n+            #    efficient to use METH_VARARGS. This happens when the function\n+            #    takes *args but no other positional arguments (apart from\n+            #    possibly self). We don't do the analogous check for keyword\n+            #    arguments since the kwargs dict is copied anyway.\n+            if self.star_arg:\n+                uses_args_tuple = True\n+                for arg in self.args:\n+                    if (arg.is_generic and not arg.kw_only and\n+                            not arg.is_self_arg and not arg.is_type_arg):\n+                        # Other positional argument\n+                        uses_args_tuple = False\n+            else:\n+                uses_args_tuple = False\n+\n+            if not uses_args_tuple:\n+                # We need to copy the signature since it may be a global\n+                # constant like TypeSlots.pyfunction_signature\n+                sig = self.entry.signature = copy.copy(sig)\n+                sig.use_fastcall = True",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316371428",
            "id": 316371428,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM3MTQyOA==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 32,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 278017546,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316371428",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316373652"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316373652"
                }
            },
            "author_association": "MEMBER",
            "body": "Would it make sense to store these two signature strings as constants somewhere? Maybe even in the signature objects? Or at least get the right one directly from the signature object, based on its `self.use_fastcall`?",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-21T19:55:43Z",
            "diff_hunk": "@@ -3453,9 +3483,16 @@ def generate_function_header(self, code, with_pymethdef, proto_only=0):\n         if entry.scope.is_c_class_scope and entry.name == \"__ipow__\":\n             arg_code_list.append(\"CYTHON_UNUSED PyObject *unused\")\n         if sig.has_generic_args:\n-            arg_code_list.append(\n-                \"PyObject *%s, PyObject *%s\" % (\n-                    Naming.args_cname, Naming.kwds_cname))\n+            varargs_args = \"PyObject *%s, PyObject *%s\" % (\n+                    Naming.args_cname, Naming.kwds_cname)\n+            if sig.use_fastcall:\n+                fastcall_args = \"PyObject *const *%s, Py_ssize_t %s, PyObject *%s\" % (\n+                        Naming.args_cname, Naming.nargs_cname, Naming.kwds_cname)",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316373652",
            "id": 316373652,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM3MzY1Mg==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 48,
            "path": "Cython/Compiler/Nodes.py",
            "position": 45,
            "pull_request_review_id": 278017546,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316373652",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316375544"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316375544"
                }
            },
            "author_association": "MEMBER",
            "body": "Note that this defeats the auto-indentation. Why not generate 3 separate lines?",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-21T20:00:11Z",
            "diff_hunk": "@@ -3518,8 +3555,18 @@ def generate_argument_declarations(self, env, code):\n \n         # Assign nargs variable as len(args), but avoid an \"unused\" warning in the few cases where we don't need it.\n         if self.signature_has_generic_args():\n-            code.putln(\"CYTHON_UNUSED const Py_ssize_t %s = PyTuple_GET_SIZE(%s);\" % (\n-                Naming.nargs_cname, Naming.args_cname))\n+            nargs_code = \"CYTHON_UNUSED const Py_ssize_t %s = PyTuple_GET_SIZE(%s);\" % (\n+                        Naming.nargs_cname, Naming.args_cname)\n+            if self.signature.use_fastcall:\n+                code.putln(\"#if !CYTHON_METH_FASTCALL\\n%s\\n#endif\" % nargs_code)",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316375544",
            "id": 316375544,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM3NTU0NA==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 66,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 278017546,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316375544",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316379588"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316379588"
                }
            },
            "author_association": "MEMBER",
            "body": "I actually wonder if this is really unlikely enough to merit a branch hint. Maybe we should remove it? (Ok, that's a bit unrelated to this PRâ€¦)",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-21T20:09:59Z",
            "diff_hunk": "@@ -3723,13 +3776,16 @@ def generate_tuple_and_keyword_parsing_code(self, args, success_label, code):\n         if accept_kwd_args:\n             kw_unpacking_condition = Naming.kwds_cname\n         else:\n-            kw_unpacking_condition = \"%s && PyDict_Size(%s) > 0\" % (\n-                Naming.kwds_cname, Naming.kwds_cname)\n+            kw_unpacking_condition = \"%s && __Pyx_NumKwargs_%s(%s) > 0\" % (\n+                Naming.kwds_cname, self.signature.fastvar, Naming.kwds_cname)\n+\n+        if self.num_required_kw_args > 0:\n+            kw_unpacking_condition = \"likely(%s)\" % kw_unpacking_condition\n+        else:\n+            kw_unpacking_condition = \"unlikely(%s)\" % kw_unpacking_condition",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316379588",
            "id": 316379588,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM3OTU4OA==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 174,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 278017546,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316379588",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316610590"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316610590"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, got it. I'm reverting this.",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-22T10:44:40Z",
            "diff_hunk": "@@ -126,26 +126,43 @@ static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name\n //  function that does not accept them.\n \n static int __Pyx_CheckKeywordStrings(\n-    PyObject *kwdict,\n+    PyObject *kw,  // dict (for METH_VARARGS) or tuple (for METH_FASTCALL)\n     const char* function_name,\n     int kw_allowed)\n {\n     PyObject* key = 0;\n     Py_ssize_t pos = 0;\n #if CYTHON_COMPILING_IN_PYPY\n     /* PyPy appears to check keywords at call time, not at unpacking time => not much to do here */\n-    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))\n+    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))\n         goto invalid_keyword;\n     return 1;\n #else\n-    while (PyDict_Next(kwdict, &pos, &key, 0)) {\n+    if (CYTHON_METH_FASTCALL && PyTuple_Check(kw)) {\n+        if (unlikely(PyTuple_GET_SIZE(kw) == 0))\n+            return 1;\n+        if (!kw_allowed)\n+            goto invalid_keyword;\n+#if PY_VERSION_HEX < 0x03090000\n+        /* On CPython >= 3.9, the FASTCALL protocol guarantees that keyword\n+         * names are strings (see https://bugs.python.org/issue37540) */\n+        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {\n+            key = PyTuple_GET_ITEM(kw, pos);\n+            if (unlikely(!PyUnicode_Check(key)))\n+                goto invalid_keyword_type;\n+        }\n+#endif\n+        return 1;\n+    }\n+\n+    while (PyDict_Next(kw, &pos, &key, 0)) {\n         #if PY_MAJOR_VERSION < 3\n         if (unlikely(!PyString_Check(key)))\n         #endif\n             if (unlikely(!PyUnicode_Check(key)))\n                 goto invalid_keyword_type;\n     }\n-    if ((!kw_allowed) && unlikely(key))\n+    if (unlikely(key) && !kw_allowed)",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316610590",
            "id": 316610590,
            "in_reply_to_id": 316360157,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjYxMDU5MA==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 53,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 278333851,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316610590",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "node_id": "MDQ6VXNlcjM2MjU3ODU=",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316613754"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316613754"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Agreed. Keeping the `likely()` in case that kwargs are required?",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-22T10:53:30Z",
            "diff_hunk": "@@ -3723,13 +3776,16 @@ def generate_tuple_and_keyword_parsing_code(self, args, success_label, code):\n         if accept_kwd_args:\n             kw_unpacking_condition = Naming.kwds_cname\n         else:\n-            kw_unpacking_condition = \"%s && PyDict_Size(%s) > 0\" % (\n-                Naming.kwds_cname, Naming.kwds_cname)\n+            kw_unpacking_condition = \"%s && __Pyx_NumKwargs_%s(%s) > 0\" % (\n+                Naming.kwds_cname, self.signature.fastvar, Naming.kwds_cname)\n+\n+        if self.num_required_kw_args > 0:\n+            kw_unpacking_condition = \"likely(%s)\" % kw_unpacking_condition\n+        else:\n+            kw_unpacking_condition = \"unlikely(%s)\" % kw_unpacking_condition",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316613754",
            "id": 316613754,
            "in_reply_to_id": 316379588,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjYxMzc1NA==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 174,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 278337745,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316613754",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "node_id": "MDQ6VXNlcjM2MjU3ODU=",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316645379"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316645379"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I decided not to do that since the `PyTuple_Check(kwds)` call is extremely fast. Given that it's called on an already slow path (parsing keyword arguments), I figured that it wasn't worth the effort to optimize this better.\r\n\r\nOne thing I can do is doing this check just once instead of every loop iteration (the compiler doesn't know that the result of `PyTuple_Check(kwds)` won't change during the loop).",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-22T12:18:20Z",
            "diff_hunk": "@@ -201,7 +225,18 @@ static int __Pyx_ParseOptionalKeywords(\n     PyObject*** name;\n     PyObject*** first_kw_arg = argnames + num_pos_args;\n \n-    while (PyDict_Next(kwds, &pos, &key, &value)) {\n+    while (1) {\n+        if (CYTHON_METH_FASTCALL && PyTuple_Check(kwds)) {",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316645379",
            "id": 316645379,
            "in_reply_to_id": 316362575,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjY0NTM3OQ==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 111,
            "path": "Cython/Utility/FunctionArguments.c",
            "position": null,
            "pull_request_review_id": 278377188,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316645379",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "node_id": "MDQ6VXNlcjM2MjU3ODU=",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316984538"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316984538"
                }
            },
            "author_association": "MEMBER",
            "body": "Looks right now.",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-23T06:04:12Z",
            "diff_hunk": "@@ -3723,13 +3776,16 @@ def generate_tuple_and_keyword_parsing_code(self, args, success_label, code):\n         if accept_kwd_args:\n             kw_unpacking_condition = Naming.kwds_cname\n         else:\n-            kw_unpacking_condition = \"%s && PyDict_Size(%s) > 0\" % (\n-                Naming.kwds_cname, Naming.kwds_cname)\n+            kw_unpacking_condition = \"%s && __Pyx_NumKwargs_%s(%s) > 0\" % (\n+                Naming.kwds_cname, self.signature.fastvar, Naming.kwds_cname)\n+\n+        if self.num_required_kw_args > 0:\n+            kw_unpacking_condition = \"likely(%s)\" % kw_unpacking_condition\n+        else:\n+            kw_unpacking_condition = \"unlikely(%s)\" % kw_unpacking_condition",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316984538",
            "id": 316984538,
            "in_reply_to_id": 316379588,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk4NDUzOA==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 174,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 278809086,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316984538",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r316987191"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/316987191"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is this (Py2) code selective about the exception type, and the Py3.6+ code above isn't?",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-23T06:18:02Z",
            "diff_hunk": "@@ -550,10 +550,26 @@ static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {\n   #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)\n #endif\n \n-#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS\n-#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)\n+#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS\n+// _PyDict_GetItem_KnownHash() exists since CPython 3.5, but it was\n+// dropping exceptions. Since 3.6, exceptions are kept.\n+#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)\n+static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {\n+    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);\n+    if (res == NULL) PyErr_Clear();\n+    return res;\n+}\n+#elif PY_MAJOR_VERSION >= 3\n+#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError\n+#define __Pyx_PyDict_GetItemStr           PyDict_GetItem\n #else\n-#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)\n+static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {\n+    PyObject *res = PyObject_GetItem(dict, name);\n+    if (res == NULL && likely(PyErr_ExceptionMatches(PyExc_KeyError)))\n+        PyErr_Clear();",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r316987191",
            "id": 316987191,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk4NzE5MQ==",
            "original_commit_id": "664fa1c18a2f59725249834948f92c65999c5f1a",
            "original_position": 23,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": 70,
            "pull_request_review_id": 278812588,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:28:00Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/316987191",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/3021#discussion_r317405730"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/3021"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/317405730"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I thought about it, but I couldn't find a good way to improve it. I don't like to store the strings inside the signature, since that would separate that part of the C argument list from the rest. Dealing with the complete C argument list inside the signature doesn't work either, as it needs more data than just the signature.\r\n\r\nIf you have concrete suggestions for improving, please let me know.",
            "commit_id": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "created_at": "2019-08-25T16:32:03Z",
            "diff_hunk": "@@ -3453,9 +3483,16 @@ def generate_function_header(self, code, with_pymethdef, proto_only=0):\n         if entry.scope.is_c_class_scope and entry.name == \"__ipow__\":\n             arg_code_list.append(\"CYTHON_UNUSED PyObject *unused\")\n         if sig.has_generic_args:\n-            arg_code_list.append(\n-                \"PyObject *%s, PyObject *%s\" % (\n-                    Naming.args_cname, Naming.kwds_cname))\n+            varargs_args = \"PyObject *%s, PyObject *%s\" % (\n+                    Naming.args_cname, Naming.kwds_cname)\n+            if sig.use_fastcall:\n+                fastcall_args = \"PyObject *const *%s, Py_ssize_t %s, PyObject *%s\" % (\n+                        Naming.args_cname, Naming.nargs_cname, Naming.kwds_cname)",
            "html_url": "https://github.com/cython/cython/pull/3021#discussion_r317405730",
            "id": 317405730,
            "in_reply_to_id": 316373652,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNTczMA==",
            "original_commit_id": "a97b539143dbe972ad0c8521d9fd56a9a32969e3",
            "original_position": 48,
            "path": "Cython/Compiler/Nodes.py",
            "position": 45,
            "pull_request_review_id": 279343914,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/3021",
            "updated_at": "2019-08-25T16:32:03Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/317405730",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "node_id": "MDQ6VXNlcjM2MjU3ODU=",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/3021/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "node_id": "MDQ6VXNlcjM2MjU3ODU=",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff/comments",
            "commit": {
                "author": {
                    "date": "2019-08-19T13:41:06Z",
                    "email": "jeroen.k.demeyer@gmail.com",
                    "name": "Jeroen Demeyer"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2019-08-25T16:27:34Z",
                    "email": "jeroen.k.demeyer@gmail.com",
                    "name": "Jeroen Demeyer"
                },
                "message": "Use METH_FASTCALL on CPython >= 3.7",
                "tree": {
                    "sha": "bda4dc4e15b6b62a04341e30e1d79aaece29d1d6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/bda4dc4e15b6b62a04341e30e1d79aaece29d1d6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "node_id": "MDQ6VXNlcjM2MjU3ODU=",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            },
            "html_url": "https://github.com/cython/cython/commit/9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "node_id": "MDY6Q29tbWl0Mjk4NTcwMzE6OWNlMWNiZGQ1ZjUwM2NhY2MyM2NjZjliMDQ4M2Y4NWY2NWYyNDVmZg==",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/4e02338e8c282b30d42564c52c4fba6de69ed984",
                    "sha": "4e02338e8c282b30d42564c52c4fba6de69ed984",
                    "url": "https://api.github.com/repos/cython/cython/commits/4e02338e8c282b30d42564c52c4fba6de69ed984"
                }
            ],
            "sha": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
            "url": "https://api.github.com/repos/cython/cython/commits/9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/3021/commits",
    "created_at": "2019-06-28T15:07:31Z",
    "diff_url": "https://github.com/cython/cython/pull/3021.diff",
    "head": {
        "label": "jdemeyer:METH_FASTCALL",
        "ref": "METH_FASTCALL",
        "repo": {
            "archive_url": "https://api.github.com/repos/jdemeyer/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/jdemeyer/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/jdemeyer/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/jdemeyer/cython/branches{/branch}",
            "clone_url": "https://github.com/jdemeyer/cython.git",
            "collaborators_url": "https://api.github.com/repos/jdemeyer/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/jdemeyer/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/jdemeyer/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/jdemeyer/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/jdemeyer/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/jdemeyer/cython/contributors",
            "created_at": "2015-01-26T10:54:42Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/jdemeyer/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/jdemeyer/cython/downloads",
            "events_url": "https://api.github.com/repos/jdemeyer/cython/events",
            "fork": true,
            "forks": 2,
            "forks_count": 2,
            "forks_url": "https://api.github.com/repos/jdemeyer/cython/forks",
            "full_name": "jdemeyer/cython",
            "git_commits_url": "https://api.github.com/repos/jdemeyer/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/jdemeyer/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/jdemeyer/cython/git/tags{/sha}",
            "git_url": "git://github.com/jdemeyer/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/jdemeyer/cython/hooks",
            "html_url": "https://github.com/jdemeyer/cython",
            "id": 29857031,
            "issue_comment_url": "https://api.github.com/repos/jdemeyer/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/jdemeyer/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/jdemeyer/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/jdemeyer/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/jdemeyer/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/jdemeyer/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/jdemeyer/cython/merges",
            "milestones_url": "https://api.github.com/repos/jdemeyer/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkyOTg1NzAzMQ==",
            "notifications_url": "https://api.github.com/repos/jdemeyer/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "node_id": "MDQ6VXNlcjM2MjU3ODU=",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/jdemeyer/cython/pulls{/number}",
            "pushed_at": "2019-08-29T11:11:13Z",
            "releases_url": "https://api.github.com/repos/jdemeyer/cython/releases{/id}",
            "size": 55576,
            "ssh_url": "git@github.com:jdemeyer/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/jdemeyer/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/jdemeyer/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/jdemeyer/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/jdemeyer/cython/subscription",
            "svn_url": "https://github.com/jdemeyer/cython",
            "tags_url": "https://api.github.com/repos/jdemeyer/cython/tags",
            "teams_url": "https://api.github.com/repos/jdemeyer/cython/teams",
            "trees_url": "https://api.github.com/repos/jdemeyer/cython/git/trees{/sha}",
            "updated_at": "2018-10-22T18:38:17Z",
            "url": "https://api.github.com/repos/jdemeyer/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
        "user": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
            "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
            "followers_url": "https://api.github.com/users/jdemeyer/followers",
            "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/jdemeyer",
            "id": 3625785,
            "login": "jdemeyer",
            "node_id": "MDQ6VXNlcjM2MjU3ODU=",
            "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
            "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
            "repos_url": "https://api.github.com/users/jdemeyer/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/jdemeyer"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/3021",
    "id": 292867654,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/3021",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        },
        {
            "color": "444444",
            "default": false,
            "id": 425556272,
            "name": "Optimization",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNzI=",
            "url": "https://api.github.com/repos/cython/cython/labels/Optimization"
        },
        {
            "color": "c2e0c6",
            "default": false,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        }
    ],
    "locked": false,
    "merge_commit_sha": "5cfa3bd4d68d0b0e7451ca513eec90f64528af18",
    "merged_at": "2019-08-27T18:33:19Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 104,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\nâ€“ New version scheme: 3.x instead of 0.x.\r\nâ€“ Change default `language_level` from `2` to `3`.\r\nâ€“ Change default for `binding` directive from `False` to `True`.\r\nâ€“ Fix some Python compatibility issues (if possible, allowing for breaking changes).",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 25,
        "state": "open",
        "title": "3.0",
        "updated_at": "2019-08-28T19:01:07Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjkyODY3NjU0",
    "number": 3021,
    "patch_url": "https://github.com/cython/cython/pull/3021.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/3021/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/9ce1cbdd5f503cacc23ccf9b0483f85f65f245ff",
    "title": "Use METH_FASTCALL on Python >= 3.7",
    "updated_at": "2019-08-27T20:52:30Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/3021",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
        "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
        "followers_url": "https://api.github.com/users/jdemeyer/followers",
        "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
        "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jdemeyer",
        "id": 3625785,
        "login": "jdemeyer",
        "node_id": "MDQ6VXNlcjM2MjU3ODU=",
        "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
        "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
        "repos_url": "https://api.github.com/users/jdemeyer/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jdemeyer"
    }
}