{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/4436/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4436/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/4436"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/4436"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4436/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/4436"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/881bcb57c7a52cd29e6ecc8544e1321cdc76eafa"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "COLLABORATOR",
    "auto_merge": null,
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 1208,
            "forks_count": 1208,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 1013,
            "open_issues_count": 1013,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2021-11-18T17:34:45Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 63291,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 6540,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "topics": [
                "big-data",
                "c",
                "cpp",
                "cpython",
                "cpython-extensions",
                "cython",
                "performance",
                "python"
            ],
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2021-11-19T06:48:10Z",
            "url": "https://api.github.com/repos/cython/cython",
            "visibility": "public",
            "watchers": 6540,
            "watchers_count": 6540
        },
        "sha": "c69992aa4eb0f7b4529f776820d20b8c66486972",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "The type for the self argument for binops depends on the compile directives. Therefore it needs a set of type slots that depends on the compiler directives.\r\n\r\nI've therefore got rid of the big static list of typeslots in TypeSlots.py in favour of a class that defines them all (and\r\ncan be initialized with suitable compiler directives as needed). This involves moving a static dictionary and list out of the\r\nglobal scope too, so that they too can be part of the class. The passing of the dictionary and list to all the constructors\r\nis a bit awkward\r\n\r\nFixes #4434",
    "closed_at": "2021-11-18T17:34:46Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r739840721"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/739840721"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n# It depends on some compiler directives (currently c_api_binop_methods), so the\r\n```",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-10-31T15:43:08Z",
            "diff_hunk": "@@ -890,204 +871,251 @@ def get_slot_code_by_name(scope, slot_name):\n     '__del__': Signature(\"T\", 'r')\n }\n \n-#------------------------------------------------------------------------------------------\n-#\n-#  Descriptor tables for the slots of the various type object\n-#  substructures, in the order they appear in the structure.\n-#\n-#------------------------------------------------------------------------------------------\n \n PyNumberMethods_Py2only_GUARD = \"PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)\"\n \n-PyNumberMethods = (\n-    BinopSlot(binaryfunc, \"nb_add\", \"__add__\"),\n-    BinopSlot(binaryfunc, \"nb_subtract\", \"__sub__\"),\n-    BinopSlot(binaryfunc, \"nb_multiply\", \"__mul__\"),\n-    BinopSlot(binaryfunc, \"nb_divide\", \"__div__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    BinopSlot(binaryfunc, \"nb_remainder\", \"__mod__\"),\n-    BinopSlot(binaryfunc, \"nb_divmod\", \"__divmod__\"),\n-    BinopSlot(ternaryfunc, \"nb_power\", \"__pow__\"),\n-    MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\"),\n-    MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\"),\n-    MethodSlot(unaryfunc, \"nb_absolute\", \"__abs__\"),\n-    MethodSlot(inquiry, \"nb_bool\", \"__bool__\", py2 = (\"nb_nonzero\", \"__nonzero__\")),\n-    MethodSlot(unaryfunc, \"nb_invert\", \"__invert__\"),\n-    BinopSlot(binaryfunc, \"nb_lshift\", \"__lshift__\"),\n-    BinopSlot(binaryfunc, \"nb_rshift\", \"__rshift__\"),\n-    BinopSlot(binaryfunc, \"nb_and\", \"__and__\"),\n-    BinopSlot(binaryfunc, \"nb_xor\", \"__xor__\"),\n-    BinopSlot(binaryfunc, \"nb_or\", \"__or__\"),\n-    EmptySlot(\"nb_coerce\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_int\", \"__int__\", fallback=\"__long__\"),\n-    MethodSlot(unaryfunc, \"nb_long\", \"__long__\", fallback=\"__int__\", py3 = \"<RESERVED>\"),\n-    MethodSlot(unaryfunc, \"nb_float\", \"__float__\"),\n-    MethodSlot(unaryfunc, \"nb_oct\", \"__oct__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_hex\", \"__hex__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-\n-    # Added in release 2.0\n-    MethodSlot(ibinaryfunc, \"nb_inplace_add\", \"__iadd__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_subtract\", \"__isub__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_multiply\", \"__imul__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_divide\", \"__idiv__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_remainder\", \"__imod__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_power\", \"__ipow__\"),  # actually ternaryfunc!!!\n-    MethodSlot(ibinaryfunc, \"nb_inplace_lshift\", \"__ilshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_rshift\", \"__irshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_and\", \"__iand__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_xor\", \"__ixor__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_or\", \"__ior__\"),\n-\n-    # Added in release 2.2\n-    # The following require the Py_TPFLAGS_HAVE_CLASS flag\n-    BinopSlot(binaryfunc, \"nb_floor_divide\", \"__floordiv__\"),\n-    BinopSlot(binaryfunc, \"nb_true_divide\", \"__truediv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_floor_divide\", \"__ifloordiv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_true_divide\", \"__itruediv__\"),\n-\n-    # Added in release 2.5\n-    MethodSlot(unaryfunc, \"nb_index\", \"__index__\"),\n-\n-    # Added in release 3.5\n-    BinopSlot(binaryfunc, \"nb_matrix_multiply\", \"__matmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_matrix_multiply\", \"__imatmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-)\n-\n-PySequenceMethods = (\n-    MethodSlot(lenfunc, \"sq_length\", \"__len__\"),\n-    EmptySlot(\"sq_concat\"),  # nb_add used instead\n-    EmptySlot(\"sq_repeat\"),  # nb_multiply used instead\n-    SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n-    MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\"),\n-    EmptySlot(\"sq_ass_item\"),  # mp_ass_subscript used instead\n-    SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n-    MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\"),\n-    EmptySlot(\"sq_inplace_concat\"),  # nb_inplace_add used instead\n-    EmptySlot(\"sq_inplace_repeat\"),  # nb_inplace_multiply used instead\n-)\n-\n-PyMappingMethods = (\n-    MethodSlot(lenfunc, \"mp_length\", \"__len__\"),\n-    MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\"),\n-    SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n-)\n-\n-PyBufferProcs = (\n-    MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", py3 = False),\n-    MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", py3 = False),\n-    MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", py3 = False),\n-    MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", py3 = False),\n-\n-    MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\"),\n-    MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\")\n-)\n-\n-PyAsyncMethods = (\n-    MethodSlot(unaryfunc, \"am_await\", \"__await__\"),\n-    MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\"),\n-    MethodSlot(unaryfunc, \"am_anext\", \"__anext__\"),\n-)\n-\n #------------------------------------------------------------------------------------------\n #\n #  The main slot table. This table contains descriptors for all the\n #  top-level type slots, beginning with tp_dealloc, in the order they\n #  appear in the type object.\n #\n+# It depends on some compiler directives (currently c_api_binop_methods), so there",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r739840721",
            "id": 739840721,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sGRLR",
            "original_commit_id": "c08e5a2b2a198e38e9dba48bc99f58606bb01039",
            "original_line": 883,
            "original_position": 215,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeSlots.py",
            "position": null,
            "pull_request_review_id": 793732795,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/739840721/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-10-31T16:01:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/739840721",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r739841145"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/739841145"
                }
            },
            "author_association": "MEMBER",
            "body": "We can avoid all those `self.…` below by making this a local variable. I'd rather have a single\r\n```cython\r\nself._get_slot_by_method_name = method_name_to_slot.get\r\n```\r\n",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-10-31T15:46:12Z",
            "diff_hunk": "@@ -890,204 +871,251 @@ def get_slot_code_by_name(scope, slot_name):\n     '__del__': Signature(\"T\", 'r')\n }\n \n-#------------------------------------------------------------------------------------------\n-#\n-#  Descriptor tables for the slots of the various type object\n-#  substructures, in the order they appear in the structure.\n-#\n-#------------------------------------------------------------------------------------------\n \n PyNumberMethods_Py2only_GUARD = \"PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)\"\n \n-PyNumberMethods = (\n-    BinopSlot(binaryfunc, \"nb_add\", \"__add__\"),\n-    BinopSlot(binaryfunc, \"nb_subtract\", \"__sub__\"),\n-    BinopSlot(binaryfunc, \"nb_multiply\", \"__mul__\"),\n-    BinopSlot(binaryfunc, \"nb_divide\", \"__div__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    BinopSlot(binaryfunc, \"nb_remainder\", \"__mod__\"),\n-    BinopSlot(binaryfunc, \"nb_divmod\", \"__divmod__\"),\n-    BinopSlot(ternaryfunc, \"nb_power\", \"__pow__\"),\n-    MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\"),\n-    MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\"),\n-    MethodSlot(unaryfunc, \"nb_absolute\", \"__abs__\"),\n-    MethodSlot(inquiry, \"nb_bool\", \"__bool__\", py2 = (\"nb_nonzero\", \"__nonzero__\")),\n-    MethodSlot(unaryfunc, \"nb_invert\", \"__invert__\"),\n-    BinopSlot(binaryfunc, \"nb_lshift\", \"__lshift__\"),\n-    BinopSlot(binaryfunc, \"nb_rshift\", \"__rshift__\"),\n-    BinopSlot(binaryfunc, \"nb_and\", \"__and__\"),\n-    BinopSlot(binaryfunc, \"nb_xor\", \"__xor__\"),\n-    BinopSlot(binaryfunc, \"nb_or\", \"__or__\"),\n-    EmptySlot(\"nb_coerce\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_int\", \"__int__\", fallback=\"__long__\"),\n-    MethodSlot(unaryfunc, \"nb_long\", \"__long__\", fallback=\"__int__\", py3 = \"<RESERVED>\"),\n-    MethodSlot(unaryfunc, \"nb_float\", \"__float__\"),\n-    MethodSlot(unaryfunc, \"nb_oct\", \"__oct__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_hex\", \"__hex__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-\n-    # Added in release 2.0\n-    MethodSlot(ibinaryfunc, \"nb_inplace_add\", \"__iadd__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_subtract\", \"__isub__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_multiply\", \"__imul__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_divide\", \"__idiv__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_remainder\", \"__imod__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_power\", \"__ipow__\"),  # actually ternaryfunc!!!\n-    MethodSlot(ibinaryfunc, \"nb_inplace_lshift\", \"__ilshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_rshift\", \"__irshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_and\", \"__iand__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_xor\", \"__ixor__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_or\", \"__ior__\"),\n-\n-    # Added in release 2.2\n-    # The following require the Py_TPFLAGS_HAVE_CLASS flag\n-    BinopSlot(binaryfunc, \"nb_floor_divide\", \"__floordiv__\"),\n-    BinopSlot(binaryfunc, \"nb_true_divide\", \"__truediv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_floor_divide\", \"__ifloordiv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_true_divide\", \"__itruediv__\"),\n-\n-    # Added in release 2.5\n-    MethodSlot(unaryfunc, \"nb_index\", \"__index__\"),\n-\n-    # Added in release 3.5\n-    BinopSlot(binaryfunc, \"nb_matrix_multiply\", \"__matmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_matrix_multiply\", \"__imatmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-)\n-\n-PySequenceMethods = (\n-    MethodSlot(lenfunc, \"sq_length\", \"__len__\"),\n-    EmptySlot(\"sq_concat\"),  # nb_add used instead\n-    EmptySlot(\"sq_repeat\"),  # nb_multiply used instead\n-    SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n-    MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\"),\n-    EmptySlot(\"sq_ass_item\"),  # mp_ass_subscript used instead\n-    SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n-    MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\"),\n-    EmptySlot(\"sq_inplace_concat\"),  # nb_inplace_add used instead\n-    EmptySlot(\"sq_inplace_repeat\"),  # nb_inplace_multiply used instead\n-)\n-\n-PyMappingMethods = (\n-    MethodSlot(lenfunc, \"mp_length\", \"__len__\"),\n-    MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\"),\n-    SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n-)\n-\n-PyBufferProcs = (\n-    MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", py3 = False),\n-    MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", py3 = False),\n-    MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", py3 = False),\n-    MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", py3 = False),\n-\n-    MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\"),\n-    MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\")\n-)\n-\n-PyAsyncMethods = (\n-    MethodSlot(unaryfunc, \"am_await\", \"__await__\"),\n-    MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\"),\n-    MethodSlot(unaryfunc, \"am_anext\", \"__anext__\"),\n-)\n-\n #------------------------------------------------------------------------------------------\n #\n #  The main slot table. This table contains descriptors for all the\n #  top-level type slots, beginning with tp_dealloc, in the order they\n #  appear in the type object.\n #\n+# It depends on some compiler directives (currently c_api_binop_methods), so there\n+# slot tables for each set of compiler directives are generated lazily and put in\n+# the _slot_table_dict\n+#\n #------------------------------------------------------------------------------------------\n \n-slot_table = (\n-    ConstructorSlot(\"tp_dealloc\", '__dealloc__'),\n-    EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX < 0x030800b4\"),\n-    EmptySlot(\"tp_vectorcall_offset\", ifdef=\"PY_VERSION_HEX >= 0x030800b4\"),\n-    EmptySlot(\"tp_getattr\"),\n-    EmptySlot(\"tp_setattr\"),\n-\n-    # tp_compare (Py2) / tp_reserved (Py3<3.5) / tp_as_async (Py3.5+) is always used as tp_as_async in Py3\n-    MethodSlot(cmpfunc, \"tp_compare\", \"__cmp__\", ifdef=\"PY_MAJOR_VERSION < 3\"),\n-    SuiteSlot(PyAsyncMethods, \"__Pyx_PyAsyncMethodsStruct\", \"tp_as_async\", ifdef=\"PY_MAJOR_VERSION >= 3\"),\n-\n-    MethodSlot(reprfunc, \"tp_repr\", \"__repr__\"),\n-\n-    SuiteSlot(PyNumberMethods, \"PyNumberMethods\", \"tp_as_number\"),\n-    SuiteSlot(PySequenceMethods, \"PySequenceMethods\", \"tp_as_sequence\"),\n-    SuiteSlot(PyMappingMethods, \"PyMappingMethods\", \"tp_as_mapping\"),\n-\n-    MethodSlot(hashfunc, \"tp_hash\", \"__hash__\", inherited=False),    # Py3 checks for __richcmp__\n-    MethodSlot(callfunc, \"tp_call\", \"__call__\"),\n-    MethodSlot(reprfunc, \"tp_str\", \"__str__\"),\n-\n-    SyntheticSlot(\"tp_getattro\", [\"__getattr__\",\"__getattribute__\"], \"0\"),  #\"PyObject_GenericGetAttr\"),\n-    SyntheticSlot(\"tp_setattro\", [\"__setattr__\", \"__delattr__\"], \"0\"),  #\"PyObject_GenericSetAttr\"),\n-\n-    SuiteSlot(PyBufferProcs, \"PyBufferProcs\", \"tp_as_buffer\"),\n-\n-    TypeFlagsSlot(\"tp_flags\"),\n-    DocStringSlot(\"tp_doc\"),\n-\n-    GCDependentSlot(\"tp_traverse\"),\n-    GCClearReferencesSlot(\"tp_clear\"),\n-\n-    RichcmpSlot(richcmpfunc, \"tp_richcompare\", \"__richcmp__\", inherited=False),  # Py3 checks for __hash__\n-\n-    EmptySlot(\"tp_weaklistoffset\"),\n-\n-    MethodSlot(getiterfunc, \"tp_iter\", \"__iter__\"),\n-    MethodSlot(iternextfunc, \"tp_iternext\", \"__next__\"),\n-\n-    MethodTableSlot(\"tp_methods\"),\n-    MemberTableSlot(\"tp_members\"),\n-    GetSetSlot(\"tp_getset\"),\n-\n-    BaseClassSlot(\"tp_base\"),  #EmptySlot(\"tp_base\"),\n-    EmptySlot(\"tp_dict\"),\n-\n-    SyntheticSlot(\"tp_descr_get\", [\"__get__\"], \"0\"),\n-    SyntheticSlot(\"tp_descr_set\", [\"__set__\", \"__delete__\"], \"0\"),\n-\n-    DictOffsetSlot(\"tp_dictoffset\", ifdef=\"!CYTHON_USE_TYPE_SPECS\"),  # otherwise set via \"__dictoffset__\" member\n-\n-    MethodSlot(initproc, \"tp_init\", \"__init__\"),\n-    EmptySlot(\"tp_alloc\"),  #FixedSlot(\"tp_alloc\", \"PyType_GenericAlloc\"),\n-    ConstructorSlot(\"tp_new\", \"__cinit__\"),\n-    EmptySlot(\"tp_free\"),\n-\n-    EmptySlot(\"tp_is_gc\"),\n-    EmptySlot(\"tp_bases\"),\n-    EmptySlot(\"tp_mro\"),\n-    EmptySlot(\"tp_cache\"),\n-    EmptySlot(\"tp_subclasses\"),\n-    EmptySlot(\"tp_weaklist\"),\n-    EmptySlot(\"tp_del\"),\n-    EmptySlot(\"tp_version_tag\"),\n-    EmptySlot(\"tp_finalize\", ifdef=\"PY_VERSION_HEX >= 0x030400a1\"),\n-    EmptySlot(\"tp_vectorcall\", ifdef=\"PY_VERSION_HEX >= 0x030800b1\"),\n-    EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000\"),\n-    # PyPy specific extension - only here to avoid C compiler warnings.\n-    EmptySlot(\"tp_pypy_flags\", ifdef=\"CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000\"),\n-)\n+class SlotTable(object):\n+    def __init__(self, old_binops):\n+        # The following dictionary maps __xxx__ method names to slot descriptors.\n+        self.method_name_to_slot = {}",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r739841145",
            "id": 739841145,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sGRR5",
            "original_commit_id": "c08e5a2b2a198e38e9dba48bc99f58606bb01039",
            "original_line": 892,
            "original_position": 294,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeSlots.py",
            "position": null,
            "pull_request_review_id": 793732795,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/739841145/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-10-31T16:01:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/739841145",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r739842162"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/739842162"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd rather make this as fast as before again. This is called a _lot_. We can have a global set `TypeSlots.special_method_names` or just use the default `method_name_to_slot` dict for it. In fact, since `old_binops=False` should be the default (also for Cython utility code, for example), we'll most likely need that setup anyway, so it won't hurt much to instantiate it on import.",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-10-31T15:53:26Z",
            "diff_hunk": "@@ -675,7 +675,8 @@ def _dispatch_to_method_handler(self, attr_name, self_arg,\n         method_handler = self._find_handler(\n             \"method_%s_%s\" % (type_name, attr_name), kwargs)\n         if method_handler is None:\n-            if (attr_name in TypeSlots.method_name_to_slot\n+            # in this case we don't need the real directives on the call to get_slot_table\n+            if (attr_name in TypeSlots.get_slot_table({}).method_name_to_slot",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r739842162",
            "id": 739842162,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sGRhy",
            "original_commit_id": "c08e5a2b2a198e38e9dba48bc99f58606bb01039",
            "original_line": 679,
            "original_position": 6,
            "original_start_line": 678,
            "path": "Cython/Compiler/Visitor.py",
            "position": null,
            "pull_request_review_id": 793732795,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/739842162/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-10-31T16:01:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/739842162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r739842574"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/739842574"
                }
            },
            "author_association": "MEMBER",
            "body": "I wonder if the `SlotTable` should just be iterable.",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-10-31T15:56:41Z",
            "diff_hunk": "@@ -5405,7 +5405,7 @@ def generate_type_ready_code(entry, code, bases_tuple_cname=None, check_heap_typ\n \n             code.putln(\"#if !CYTHON_COMPILING_IN_LIMITED_API\")\n             # FIXME: these still need to get initialised even with the limited-API\n-            for slot in TypeSlots.slot_table:\n+            for slot in TypeSlots.get_slot_table(code.globalstate.directives).slot_table:",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r739842574",
            "id": 739842574,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sGRoO",
            "original_commit_id": "c08e5a2b2a198e38e9dba48bc99f58606bb01039",
            "original_line": 5408,
            "original_position": 32,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 793732795,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/739842574/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-10-31T16:01:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/739842574",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r739852457"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/739852457"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "I've gone for a global set (which is populated by instantiating with default options on import)",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-10-31T17:25:26Z",
            "diff_hunk": "@@ -675,7 +675,8 @@ def _dispatch_to_method_handler(self, attr_name, self_arg,\n         method_handler = self._find_handler(\n             \"method_%s_%s\" % (type_name, attr_name), kwargs)\n         if method_handler is None:\n-            if (attr_name in TypeSlots.method_name_to_slot\n+            # in this case we don't need the real directives on the call to get_slot_table\n+            if (attr_name in TypeSlots.get_slot_table({}).method_name_to_slot",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r739852457",
            "id": 739852457,
            "in_reply_to_id": 739842162,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sGUCp",
            "original_commit_id": "c08e5a2b2a198e38e9dba48bc99f58606bb01039",
            "original_line": 679,
            "original_position": 6,
            "original_start_line": 678,
            "path": "Cython/Compiler/Visitor.py",
            "position": null,
            "pull_request_review_id": 793742193,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/739852457/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-10-31T17:25:26Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/739852457",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r740916354"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/740916354"
                }
            },
            "author_association": "MEMBER",
            "body": "All the plots may be all the more interesting, but I guess you meant \"slots\" here. ;)\r\n```suggestion\r\n        # make it easier to iterate over all the slots\r\n```",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-11-02T10:21:18Z",
            "diff_hunk": "@@ -890,204 +866,271 @@ def get_slot_code_by_name(scope, slot_name):\n     '__del__': Signature(\"T\", 'r')\n }\n \n-#------------------------------------------------------------------------------------------\n-#\n-#  Descriptor tables for the slots of the various type object\n-#  substructures, in the order they appear in the structure.\n-#\n-#------------------------------------------------------------------------------------------\n \n PyNumberMethods_Py2only_GUARD = \"PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)\"\n \n-PyNumberMethods = (\n-    BinopSlot(binaryfunc, \"nb_add\", \"__add__\"),\n-    BinopSlot(binaryfunc, \"nb_subtract\", \"__sub__\"),\n-    BinopSlot(binaryfunc, \"nb_multiply\", \"__mul__\"),\n-    BinopSlot(binaryfunc, \"nb_divide\", \"__div__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    BinopSlot(binaryfunc, \"nb_remainder\", \"__mod__\"),\n-    BinopSlot(binaryfunc, \"nb_divmod\", \"__divmod__\"),\n-    BinopSlot(ternaryfunc, \"nb_power\", \"__pow__\"),\n-    MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\"),\n-    MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\"),\n-    MethodSlot(unaryfunc, \"nb_absolute\", \"__abs__\"),\n-    MethodSlot(inquiry, \"nb_bool\", \"__bool__\", py2 = (\"nb_nonzero\", \"__nonzero__\")),\n-    MethodSlot(unaryfunc, \"nb_invert\", \"__invert__\"),\n-    BinopSlot(binaryfunc, \"nb_lshift\", \"__lshift__\"),\n-    BinopSlot(binaryfunc, \"nb_rshift\", \"__rshift__\"),\n-    BinopSlot(binaryfunc, \"nb_and\", \"__and__\"),\n-    BinopSlot(binaryfunc, \"nb_xor\", \"__xor__\"),\n-    BinopSlot(binaryfunc, \"nb_or\", \"__or__\"),\n-    EmptySlot(\"nb_coerce\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_int\", \"__int__\", fallback=\"__long__\"),\n-    MethodSlot(unaryfunc, \"nb_long\", \"__long__\", fallback=\"__int__\", py3 = \"<RESERVED>\"),\n-    MethodSlot(unaryfunc, \"nb_float\", \"__float__\"),\n-    MethodSlot(unaryfunc, \"nb_oct\", \"__oct__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_hex\", \"__hex__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-\n-    # Added in release 2.0\n-    MethodSlot(ibinaryfunc, \"nb_inplace_add\", \"__iadd__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_subtract\", \"__isub__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_multiply\", \"__imul__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_divide\", \"__idiv__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_remainder\", \"__imod__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_power\", \"__ipow__\"),  # actually ternaryfunc!!!\n-    MethodSlot(ibinaryfunc, \"nb_inplace_lshift\", \"__ilshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_rshift\", \"__irshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_and\", \"__iand__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_xor\", \"__ixor__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_or\", \"__ior__\"),\n-\n-    # Added in release 2.2\n-    # The following require the Py_TPFLAGS_HAVE_CLASS flag\n-    BinopSlot(binaryfunc, \"nb_floor_divide\", \"__floordiv__\"),\n-    BinopSlot(binaryfunc, \"nb_true_divide\", \"__truediv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_floor_divide\", \"__ifloordiv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_true_divide\", \"__itruediv__\"),\n-\n-    # Added in release 2.5\n-    MethodSlot(unaryfunc, \"nb_index\", \"__index__\"),\n-\n-    # Added in release 3.5\n-    BinopSlot(binaryfunc, \"nb_matrix_multiply\", \"__matmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_matrix_multiply\", \"__imatmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-)\n-\n-PySequenceMethods = (\n-    MethodSlot(lenfunc, \"sq_length\", \"__len__\"),\n-    EmptySlot(\"sq_concat\"),  # nb_add used instead\n-    EmptySlot(\"sq_repeat\"),  # nb_multiply used instead\n-    SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n-    MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\"),\n-    EmptySlot(\"sq_ass_item\"),  # mp_ass_subscript used instead\n-    SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n-    MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\"),\n-    EmptySlot(\"sq_inplace_concat\"),  # nb_inplace_add used instead\n-    EmptySlot(\"sq_inplace_repeat\"),  # nb_inplace_multiply used instead\n-)\n-\n-PyMappingMethods = (\n-    MethodSlot(lenfunc, \"mp_length\", \"__len__\"),\n-    MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\"),\n-    SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n-)\n-\n-PyBufferProcs = (\n-    MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", py3 = False),\n-    MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", py3 = False),\n-    MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", py3 = False),\n-    MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", py3 = False),\n-\n-    MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\"),\n-    MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\")\n-)\n-\n-PyAsyncMethods = (\n-    MethodSlot(unaryfunc, \"am_await\", \"__await__\"),\n-    MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\"),\n-    MethodSlot(unaryfunc, \"am_anext\", \"__anext__\"),\n-)\n-\n #------------------------------------------------------------------------------------------\n #\n #  The main slot table. This table contains descriptors for all the\n #  top-level type slots, beginning with tp_dealloc, in the order they\n #  appear in the type object.\n #\n+# It depends on some compiler directives (currently c_api_binop_methods), so the\n+# slot tables for each set of compiler directives are generated lazily and put in\n+# the _slot_table_dict\n+#\n #------------------------------------------------------------------------------------------\n \n-slot_table = (\n-    ConstructorSlot(\"tp_dealloc\", '__dealloc__'),\n-    EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX < 0x030800b4\"),\n-    EmptySlot(\"tp_vectorcall_offset\", ifdef=\"PY_VERSION_HEX >= 0x030800b4\"),\n-    EmptySlot(\"tp_getattr\"),\n-    EmptySlot(\"tp_setattr\"),\n-\n-    # tp_compare (Py2) / tp_reserved (Py3<3.5) / tp_as_async (Py3.5+) is always used as tp_as_async in Py3\n-    MethodSlot(cmpfunc, \"tp_compare\", \"__cmp__\", ifdef=\"PY_MAJOR_VERSION < 3\"),\n-    SuiteSlot(PyAsyncMethods, \"__Pyx_PyAsyncMethodsStruct\", \"tp_as_async\", ifdef=\"PY_MAJOR_VERSION >= 3\"),\n-\n-    MethodSlot(reprfunc, \"tp_repr\", \"__repr__\"),\n-\n-    SuiteSlot(PyNumberMethods, \"PyNumberMethods\", \"tp_as_number\"),\n-    SuiteSlot(PySequenceMethods, \"PySequenceMethods\", \"tp_as_sequence\"),\n-    SuiteSlot(PyMappingMethods, \"PyMappingMethods\", \"tp_as_mapping\"),\n-\n-    MethodSlot(hashfunc, \"tp_hash\", \"__hash__\", inherited=False),    # Py3 checks for __richcmp__\n-    MethodSlot(callfunc, \"tp_call\", \"__call__\"),\n-    MethodSlot(reprfunc, \"tp_str\", \"__str__\"),\n-\n-    SyntheticSlot(\"tp_getattro\", [\"__getattr__\",\"__getattribute__\"], \"0\"),  #\"PyObject_GenericGetAttr\"),\n-    SyntheticSlot(\"tp_setattro\", [\"__setattr__\", \"__delattr__\"], \"0\"),  #\"PyObject_GenericSetAttr\"),\n-\n-    SuiteSlot(PyBufferProcs, \"PyBufferProcs\", \"tp_as_buffer\"),\n-\n-    TypeFlagsSlot(\"tp_flags\"),\n-    DocStringSlot(\"tp_doc\"),\n-\n-    GCDependentSlot(\"tp_traverse\"),\n-    GCClearReferencesSlot(\"tp_clear\"),\n-\n-    RichcmpSlot(richcmpfunc, \"tp_richcompare\", \"__richcmp__\", inherited=False),  # Py3 checks for __hash__\n-\n-    EmptySlot(\"tp_weaklistoffset\"),\n-\n-    MethodSlot(getiterfunc, \"tp_iter\", \"__iter__\"),\n-    MethodSlot(iternextfunc, \"tp_iternext\", \"__next__\"),\n-\n-    MethodTableSlot(\"tp_methods\"),\n-    MemberTableSlot(\"tp_members\"),\n-    GetSetSlot(\"tp_getset\"),\n-\n-    BaseClassSlot(\"tp_base\"),  #EmptySlot(\"tp_base\"),\n-    EmptySlot(\"tp_dict\"),\n+class SlotTable(object):\n+    def __init__(self, old_binops):\n+        # The following dictionary maps __xxx__ method names to slot descriptors.\n+        method_name_to_slot = {}\n+        self._get_slot_by_method_name = method_name_to_slot.get\n+        self.substructures = []   # List of all SuiteSlot instances\n+\n+        bf = binaryfunc if old_binops else ibinaryfunc\n+        tf = ternaryfunc if old_binops else iternaryfunc\n+\n+        #  Descriptor tables for the slots of the various type object\n+        #  substructures, in the order they appear in the structure.\n+        self.PyNumberMethods = (\n+            BinopSlot(bf, \"nb_add\", \"__add__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_subtract\", \"__sub__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_multiply\", \"__mul__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_divide\", \"__div__\", method_name_to_slot,\n+                      ifdef = PyNumberMethods_Py2only_GUARD),\n+            BinopSlot(bf, \"nb_remainder\", \"__mod__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_divmod\", \"__divmod__\", method_name_to_slot),\n+            BinopSlot(tf, \"nb_power\", \"__pow__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_absolute\", \"__abs__\", method_name_to_slot),\n+            MethodSlot(inquiry, \"nb_bool\", \"__bool__\", method_name_to_slot,\n+                       py2 = (\"nb_nonzero\", \"__nonzero__\")),\n+            MethodSlot(unaryfunc, \"nb_invert\", \"__invert__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_lshift\", \"__lshift__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_rshift\", \"__rshift__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_and\", \"__and__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_xor\", \"__xor__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_or\", \"__or__\", method_name_to_slot),\n+            EmptySlot(\"nb_coerce\", ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(unaryfunc, \"nb_int\", \"__int__\", method_name_to_slot, fallback=\"__long__\"),\n+            MethodSlot(unaryfunc, \"nb_long\", \"__long__\", method_name_to_slot,\n+                       fallback=\"__int__\", py3 = \"<RESERVED>\"),\n+            MethodSlot(unaryfunc, \"nb_float\", \"__float__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_oct\", \"__oct__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(unaryfunc, \"nb_hex\", \"__hex__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+\n+            # Added in release 2.0\n+            MethodSlot(ibinaryfunc, \"nb_inplace_add\", \"__iadd__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_subtract\", \"__isub__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_multiply\", \"__imul__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_divide\", \"__idiv__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_remainder\", \"__imod__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_power\", \"__ipow__\",\n+                       method_name_to_slot),  # actually ternaryfunc!!!\n+            MethodSlot(ibinaryfunc, \"nb_inplace_lshift\", \"__ilshift__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_rshift\", \"__irshift__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_and\", \"__iand__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_xor\", \"__ixor__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_or\", \"__ior__\", method_name_to_slot),\n+\n+            # Added in release 2.2\n+            # The following require the Py_TPFLAGS_HAVE_CLASS flag\n+            BinopSlot(binaryfunc, \"nb_floor_divide\", \"__floordiv__\", method_name_to_slot),\n+            BinopSlot(binaryfunc, \"nb_true_divide\", \"__truediv__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_floor_divide\", \"__ifloordiv__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_true_divide\", \"__itruediv__\", method_name_to_slot),\n+\n+            # Added in release 2.5\n+            MethodSlot(unaryfunc, \"nb_index\", \"__index__\", method_name_to_slot),\n+\n+            # Added in release 3.5\n+            BinopSlot(binaryfunc, \"nb_matrix_multiply\", \"__matmul__\", method_name_to_slot,\n+                      ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_matrix_multiply\", \"__imatmul__\", method_name_to_slot,\n+                       ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n+        )\n+\n+        self.PySequenceMethods = (\n+            MethodSlot(lenfunc, \"sq_length\", \"__len__\", method_name_to_slot),\n+            EmptySlot(\"sq_concat\"),  # nb_add used instead\n+            EmptySlot(\"sq_repeat\"),  # nb_multiply used instead\n+            SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n+            MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\", method_name_to_slot),\n+            EmptySlot(\"sq_ass_item\"),  # mp_ass_subscript used instead\n+            SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n+            MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\", method_name_to_slot),\n+            EmptySlot(\"sq_inplace_concat\"),  # nb_inplace_add used instead\n+            EmptySlot(\"sq_inplace_repeat\"),  # nb_inplace_multiply used instead\n+        )\n+\n+        self.PyMappingMethods = (\n+            MethodSlot(lenfunc, \"mp_length\", \"__len__\", method_name_to_slot),\n+            MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\", method_name_to_slot),\n+            SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n+        )\n+\n+        self.PyBufferProcs = (\n+            MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", method_name_to_slot,\n+                       py3 = False),\n+\n+            MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\", method_name_to_slot),\n+            MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\", method_name_to_slot)\n+        )\n+\n+        self.PyAsyncMethods = (\n+            MethodSlot(unaryfunc, \"am_await\", \"__await__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"am_anext\", \"__anext__\", method_name_to_slot),\n+        )\n+\n+        self.slot_table = (\n+            ConstructorSlot(\"tp_dealloc\", '__dealloc__'),\n+            EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX < 0x030800b4\"),\n+            EmptySlot(\"tp_vectorcall_offset\", ifdef=\"PY_VERSION_HEX >= 0x030800b4\"),\n+            EmptySlot(\"tp_getattr\"),\n+            EmptySlot(\"tp_setattr\"),\n+\n+            # tp_compare (Py2) / tp_reserved (Py3<3.5) / tp_as_async (Py3.5+) is always used as tp_as_async in Py3\n+            MethodSlot(cmpfunc, \"tp_compare\", \"__cmp__\", method_name_to_slot, ifdef=\"PY_MAJOR_VERSION < 3\"),\n+            SuiteSlot(self. PyAsyncMethods, \"__Pyx_PyAsyncMethodsStruct\", \"tp_as_async\",\n+                      self.substructures, ifdef=\"PY_MAJOR_VERSION >= 3\"),\n+\n+            MethodSlot(reprfunc, \"tp_repr\", \"__repr__\", method_name_to_slot),\n+\n+            SuiteSlot(self.PyNumberMethods, \"PyNumberMethods\", \"tp_as_number\", self.substructures),\n+            SuiteSlot(self.PySequenceMethods, \"PySequenceMethods\", \"tp_as_sequence\", self.substructures),\n+            SuiteSlot(self.PyMappingMethods, \"PyMappingMethods\", \"tp_as_mapping\", self.substructures),\n+\n+            MethodSlot(hashfunc, \"tp_hash\", \"__hash__\", method_name_to_slot,\n+                       inherited=False),    # Py3 checks for __richcmp__\n+            MethodSlot(callfunc, \"tp_call\", \"__call__\", method_name_to_slot),\n+            MethodSlot(reprfunc, \"tp_str\", \"__str__\", method_name_to_slot),\n+\n+            SyntheticSlot(\"tp_getattro\", [\"__getattr__\",\"__getattribute__\"], \"0\"),  #\"PyObject_GenericGetAttr\"),\n+            SyntheticSlot(\"tp_setattro\", [\"__setattr__\", \"__delattr__\"], \"0\"),  #\"PyObject_GenericSetAttr\"),\n+\n+            SuiteSlot(self.PyBufferProcs, \"PyBufferProcs\", \"tp_as_buffer\", self.substructures),\n+\n+            TypeFlagsSlot(\"tp_flags\"),\n+            DocStringSlot(\"tp_doc\"),\n+\n+            GCDependentSlot(\"tp_traverse\"),\n+            GCClearReferencesSlot(\"tp_clear\"),\n+\n+            RichcmpSlot(richcmpfunc, \"tp_richcompare\", \"__richcmp__\", method_name_to_slot,\n+                        inherited=False),  # Py3 checks for __hash__\n+\n+            EmptySlot(\"tp_weaklistoffset\"),\n+\n+            MethodSlot(getiterfunc, \"tp_iter\", \"__iter__\", method_name_to_slot),\n+            MethodSlot(iternextfunc, \"tp_iternext\", \"__next__\", method_name_to_slot),\n+\n+            MethodTableSlot(\"tp_methods\"),\n+            MemberTableSlot(\"tp_members\"),\n+            GetSetSlot(\"tp_getset\"),\n+\n+            BaseClassSlot(\"tp_base\"),  #EmptySlot(\"tp_base\"),\n+            EmptySlot(\"tp_dict\"),\n+\n+            SyntheticSlot(\"tp_descr_get\", [\"__get__\"], \"0\"),\n+            SyntheticSlot(\"tp_descr_set\", [\"__set__\", \"__delete__\"], \"0\"),\n+\n+            DictOffsetSlot(\"tp_dictoffset\", ifdef=\"!CYTHON_USE_TYPE_SPECS\"),  # otherwise set via \"__dictoffset__\" member\n+\n+            MethodSlot(initproc, \"tp_init\", \"__init__\", method_name_to_slot),\n+            EmptySlot(\"tp_alloc\"),  #FixedSlot(\"tp_alloc\", \"PyType_GenericAlloc\"),\n+            ConstructorSlot(\"tp_new\", \"__cinit__\"),\n+            EmptySlot(\"tp_free\"),\n+\n+            EmptySlot(\"tp_is_gc\"),\n+            EmptySlot(\"tp_bases\"),\n+            EmptySlot(\"tp_mro\"),\n+            EmptySlot(\"tp_cache\"),\n+            EmptySlot(\"tp_subclasses\"),\n+            EmptySlot(\"tp_weaklist\"),\n+            EmptySlot(\"tp_del\"),\n+            EmptySlot(\"tp_version_tag\"),\n+            EmptySlot(\"tp_finalize\", ifdef=\"PY_VERSION_HEX >= 0x030400a1\"),\n+            EmptySlot(\"tp_vectorcall\", ifdef=\"PY_VERSION_HEX >= 0x030800b1\"),\n+            EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000\"),\n+            # PyPy specific extension - only here to avoid C compiler warnings.\n+            EmptySlot(\"tp_pypy_flags\", ifdef=\"CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000\"),\n+        )\n+\n+        #------------------------------------------------------------------------------------------\n+        #\n+        #  Descriptors for special methods which don't appear directly\n+        #  in the type object or its substructures. These methods are\n+        #  called from slot functions synthesized by Cython.\n+        #\n+        #------------------------------------------------------------------------------------------\n+\n+        MethodSlot(initproc, \"\", \"__cinit__\", method_name_to_slot)\n+        MethodSlot(destructor, \"\", \"__dealloc__\", method_name_to_slot)\n+        MethodSlot(objobjargproc, \"\", \"__setitem__\", method_name_to_slot)\n+        MethodSlot(objargproc, \"\", \"__delitem__\", method_name_to_slot)\n+        MethodSlot(ssizessizeobjargproc, \"\", \"__setslice__\", method_name_to_slot)\n+        MethodSlot(ssizessizeargproc, \"\", \"__delslice__\", method_name_to_slot)\n+        MethodSlot(getattrofunc, \"\", \"__getattr__\", method_name_to_slot)\n+        MethodSlot(getattrofunc, \"\", \"__getattribute__\", method_name_to_slot)\n+        MethodSlot(setattrofunc, \"\", \"__setattr__\", method_name_to_slot)\n+        MethodSlot(delattrofunc, \"\", \"__delattr__\", method_name_to_slot)\n+        MethodSlot(descrgetfunc, \"\", \"__get__\", method_name_to_slot)\n+        MethodSlot(descrsetfunc, \"\", \"__set__\", method_name_to_slot)\n+        MethodSlot(descrdelfunc, \"\", \"__delete__\", method_name_to_slot)\n+\n+        # ensure that the global list of special_method_names is updated\n+        special_method_names.update(method_name_to_slot.keys())\n+\n+    def get_special_method_signature(self, name):\n+        #  Given a method name, if it is a special method,\n+        #  return its signature, else return None.\n+        slot = self._get_slot_by_method_name(name)\n+        if slot:\n+            return slot.signature\n+        elif name in richcmp_special_methods:\n+            return ibinaryfunc\n+        else:\n+            return None\n \n-    SyntheticSlot(\"tp_descr_get\", [\"__get__\"], \"0\"),\n-    SyntheticSlot(\"tp_descr_set\", [\"__set__\", \"__delete__\"], \"0\"),\n+    def get_slot_by_method_name(self, method_name):\n+        # For now, only search the type struct, no referenced sub-structs.\n+        return self._get_slot_by_method_name(method_name)\n \n-    DictOffsetSlot(\"tp_dictoffset\", ifdef=\"!CYTHON_USE_TYPE_SPECS\"),  # otherwise set via \"__dictoffset__\" member\n+    def __iter__(self):\n+        # make it easier to iterate over all the plots",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r740916354",
            "id": 740916354,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sKXyC",
            "original_commit_id": "cdcbcceacbd62889ebfbf185875f70bba12c5127",
            "original_line": 1112,
            "original_position": 501,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeSlots.py",
            "position": null,
            "pull_request_review_id": 795137810,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/740916354/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-11-02T10:43:29Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/740916354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r740923291"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/740923291"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm. I was wondering if the argument should then be optional, but that would make it too easy to forget in the normal case. I was also wondering if the truth value is the right thing to check here or if we should pass None instead for the explicit \"don't have directives\" case. I guess it doesn't matter – the directives should never be empty, unless explicitly passed empty. We might want to pass a keyword argument in the latter case, though, to make the call more readable … in which case None would also work as an argument… Not sure which is better.",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-11-02T10:30:08Z",
            "diff_hunk": "@@ -1102,20 +1106,32 @@ def get_special_method_signature(self, name):\n \n     def get_slot_by_method_name(self, method_name):\n         # For now, only search the type struct, no referenced sub-structs.\n-        return self.method_name_to_slot[method_name]\n+        return self._get_slot_by_method_name(method_name)\n+\n+    def __iter__(self):\n+        # make it easier to iterate over all the plots\n+        return iter(self.slot_table)\n \n \n _slot_table_dict = {}\n+special_method_names = set()\n \n def get_slot_table(compiler_directives):\n-    # use \"get\" here with a default since the builtin type classes don't have\n-    # directives set\n-    old_binops = compiler_directives.get('c_api_binop_methods', False)\n+    if not compiler_directives:",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r740923291",
            "id": 740923291,
            "line": 1116,
            "node_id": "PRRC_kwDOABDGAc4sKZeb",
            "original_commit_id": "cdcbcceacbd62889ebfbf185875f70bba12c5127",
            "original_line": 1120,
            "original_position": 291,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeSlots.py",
            "position": 507,
            "pull_request_review_id": 795137810,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/740923291/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-11-02T10:43:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/740923291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r740925939"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/740925939"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\n# Populate \"special_method_names\" based on the default directives (so it can always be accessed quickly).\r\nspecial_method_names = set(get_slot_table(compiler_directives=None))\r\n\r\n```",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-11-02T10:33:38Z",
            "diff_hunk": "@@ -890,204 +866,271 @@ def get_slot_code_by_name(scope, slot_name):\n     '__del__': Signature(\"T\", 'r')\n }\n \n-#------------------------------------------------------------------------------------------\n-#\n-#  Descriptor tables for the slots of the various type object\n-#  substructures, in the order they appear in the structure.\n-#\n-#------------------------------------------------------------------------------------------\n \n PyNumberMethods_Py2only_GUARD = \"PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)\"\n \n-PyNumberMethods = (\n-    BinopSlot(binaryfunc, \"nb_add\", \"__add__\"),\n-    BinopSlot(binaryfunc, \"nb_subtract\", \"__sub__\"),\n-    BinopSlot(binaryfunc, \"nb_multiply\", \"__mul__\"),\n-    BinopSlot(binaryfunc, \"nb_divide\", \"__div__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    BinopSlot(binaryfunc, \"nb_remainder\", \"__mod__\"),\n-    BinopSlot(binaryfunc, \"nb_divmod\", \"__divmod__\"),\n-    BinopSlot(ternaryfunc, \"nb_power\", \"__pow__\"),\n-    MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\"),\n-    MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\"),\n-    MethodSlot(unaryfunc, \"nb_absolute\", \"__abs__\"),\n-    MethodSlot(inquiry, \"nb_bool\", \"__bool__\", py2 = (\"nb_nonzero\", \"__nonzero__\")),\n-    MethodSlot(unaryfunc, \"nb_invert\", \"__invert__\"),\n-    BinopSlot(binaryfunc, \"nb_lshift\", \"__lshift__\"),\n-    BinopSlot(binaryfunc, \"nb_rshift\", \"__rshift__\"),\n-    BinopSlot(binaryfunc, \"nb_and\", \"__and__\"),\n-    BinopSlot(binaryfunc, \"nb_xor\", \"__xor__\"),\n-    BinopSlot(binaryfunc, \"nb_or\", \"__or__\"),\n-    EmptySlot(\"nb_coerce\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_int\", \"__int__\", fallback=\"__long__\"),\n-    MethodSlot(unaryfunc, \"nb_long\", \"__long__\", fallback=\"__int__\", py3 = \"<RESERVED>\"),\n-    MethodSlot(unaryfunc, \"nb_float\", \"__float__\"),\n-    MethodSlot(unaryfunc, \"nb_oct\", \"__oct__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_hex\", \"__hex__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-\n-    # Added in release 2.0\n-    MethodSlot(ibinaryfunc, \"nb_inplace_add\", \"__iadd__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_subtract\", \"__isub__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_multiply\", \"__imul__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_divide\", \"__idiv__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_remainder\", \"__imod__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_power\", \"__ipow__\"),  # actually ternaryfunc!!!\n-    MethodSlot(ibinaryfunc, \"nb_inplace_lshift\", \"__ilshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_rshift\", \"__irshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_and\", \"__iand__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_xor\", \"__ixor__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_or\", \"__ior__\"),\n-\n-    # Added in release 2.2\n-    # The following require the Py_TPFLAGS_HAVE_CLASS flag\n-    BinopSlot(binaryfunc, \"nb_floor_divide\", \"__floordiv__\"),\n-    BinopSlot(binaryfunc, \"nb_true_divide\", \"__truediv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_floor_divide\", \"__ifloordiv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_true_divide\", \"__itruediv__\"),\n-\n-    # Added in release 2.5\n-    MethodSlot(unaryfunc, \"nb_index\", \"__index__\"),\n-\n-    # Added in release 3.5\n-    BinopSlot(binaryfunc, \"nb_matrix_multiply\", \"__matmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_matrix_multiply\", \"__imatmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-)\n-\n-PySequenceMethods = (\n-    MethodSlot(lenfunc, \"sq_length\", \"__len__\"),\n-    EmptySlot(\"sq_concat\"),  # nb_add used instead\n-    EmptySlot(\"sq_repeat\"),  # nb_multiply used instead\n-    SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n-    MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\"),\n-    EmptySlot(\"sq_ass_item\"),  # mp_ass_subscript used instead\n-    SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n-    MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\"),\n-    EmptySlot(\"sq_inplace_concat\"),  # nb_inplace_add used instead\n-    EmptySlot(\"sq_inplace_repeat\"),  # nb_inplace_multiply used instead\n-)\n-\n-PyMappingMethods = (\n-    MethodSlot(lenfunc, \"mp_length\", \"__len__\"),\n-    MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\"),\n-    SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n-)\n-\n-PyBufferProcs = (\n-    MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", py3 = False),\n-    MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", py3 = False),\n-    MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", py3 = False),\n-    MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", py3 = False),\n-\n-    MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\"),\n-    MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\")\n-)\n-\n-PyAsyncMethods = (\n-    MethodSlot(unaryfunc, \"am_await\", \"__await__\"),\n-    MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\"),\n-    MethodSlot(unaryfunc, \"am_anext\", \"__anext__\"),\n-)\n-\n #------------------------------------------------------------------------------------------\n #\n #  The main slot table. This table contains descriptors for all the\n #  top-level type slots, beginning with tp_dealloc, in the order they\n #  appear in the type object.\n #\n+# It depends on some compiler directives (currently c_api_binop_methods), so the\n+# slot tables for each set of compiler directives are generated lazily and put in\n+# the _slot_table_dict\n+#\n #------------------------------------------------------------------------------------------\n \n-slot_table = (\n-    ConstructorSlot(\"tp_dealloc\", '__dealloc__'),\n-    EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX < 0x030800b4\"),\n-    EmptySlot(\"tp_vectorcall_offset\", ifdef=\"PY_VERSION_HEX >= 0x030800b4\"),\n-    EmptySlot(\"tp_getattr\"),\n-    EmptySlot(\"tp_setattr\"),\n-\n-    # tp_compare (Py2) / tp_reserved (Py3<3.5) / tp_as_async (Py3.5+) is always used as tp_as_async in Py3\n-    MethodSlot(cmpfunc, \"tp_compare\", \"__cmp__\", ifdef=\"PY_MAJOR_VERSION < 3\"),\n-    SuiteSlot(PyAsyncMethods, \"__Pyx_PyAsyncMethodsStruct\", \"tp_as_async\", ifdef=\"PY_MAJOR_VERSION >= 3\"),\n-\n-    MethodSlot(reprfunc, \"tp_repr\", \"__repr__\"),\n-\n-    SuiteSlot(PyNumberMethods, \"PyNumberMethods\", \"tp_as_number\"),\n-    SuiteSlot(PySequenceMethods, \"PySequenceMethods\", \"tp_as_sequence\"),\n-    SuiteSlot(PyMappingMethods, \"PyMappingMethods\", \"tp_as_mapping\"),\n-\n-    MethodSlot(hashfunc, \"tp_hash\", \"__hash__\", inherited=False),    # Py3 checks for __richcmp__\n-    MethodSlot(callfunc, \"tp_call\", \"__call__\"),\n-    MethodSlot(reprfunc, \"tp_str\", \"__str__\"),\n-\n-    SyntheticSlot(\"tp_getattro\", [\"__getattr__\",\"__getattribute__\"], \"0\"),  #\"PyObject_GenericGetAttr\"),\n-    SyntheticSlot(\"tp_setattro\", [\"__setattr__\", \"__delattr__\"], \"0\"),  #\"PyObject_GenericSetAttr\"),\n-\n-    SuiteSlot(PyBufferProcs, \"PyBufferProcs\", \"tp_as_buffer\"),\n-\n-    TypeFlagsSlot(\"tp_flags\"),\n-    DocStringSlot(\"tp_doc\"),\n-\n-    GCDependentSlot(\"tp_traverse\"),\n-    GCClearReferencesSlot(\"tp_clear\"),\n-\n-    RichcmpSlot(richcmpfunc, \"tp_richcompare\", \"__richcmp__\", inherited=False),  # Py3 checks for __hash__\n-\n-    EmptySlot(\"tp_weaklistoffset\"),\n-\n-    MethodSlot(getiterfunc, \"tp_iter\", \"__iter__\"),\n-    MethodSlot(iternextfunc, \"tp_iternext\", \"__next__\"),\n-\n-    MethodTableSlot(\"tp_methods\"),\n-    MemberTableSlot(\"tp_members\"),\n-    GetSetSlot(\"tp_getset\"),\n-\n-    BaseClassSlot(\"tp_base\"),  #EmptySlot(\"tp_base\"),\n-    EmptySlot(\"tp_dict\"),\n+class SlotTable(object):\n+    def __init__(self, old_binops):\n+        # The following dictionary maps __xxx__ method names to slot descriptors.\n+        method_name_to_slot = {}\n+        self._get_slot_by_method_name = method_name_to_slot.get\n+        self.substructures = []   # List of all SuiteSlot instances\n+\n+        bf = binaryfunc if old_binops else ibinaryfunc\n+        tf = ternaryfunc if old_binops else iternaryfunc\n+\n+        #  Descriptor tables for the slots of the various type object\n+        #  substructures, in the order they appear in the structure.\n+        self.PyNumberMethods = (\n+            BinopSlot(bf, \"nb_add\", \"__add__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_subtract\", \"__sub__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_multiply\", \"__mul__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_divide\", \"__div__\", method_name_to_slot,\n+                      ifdef = PyNumberMethods_Py2only_GUARD),\n+            BinopSlot(bf, \"nb_remainder\", \"__mod__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_divmod\", \"__divmod__\", method_name_to_slot),\n+            BinopSlot(tf, \"nb_power\", \"__pow__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_absolute\", \"__abs__\", method_name_to_slot),\n+            MethodSlot(inquiry, \"nb_bool\", \"__bool__\", method_name_to_slot,\n+                       py2 = (\"nb_nonzero\", \"__nonzero__\")),\n+            MethodSlot(unaryfunc, \"nb_invert\", \"__invert__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_lshift\", \"__lshift__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_rshift\", \"__rshift__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_and\", \"__and__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_xor\", \"__xor__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_or\", \"__or__\", method_name_to_slot),\n+            EmptySlot(\"nb_coerce\", ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(unaryfunc, \"nb_int\", \"__int__\", method_name_to_slot, fallback=\"__long__\"),\n+            MethodSlot(unaryfunc, \"nb_long\", \"__long__\", method_name_to_slot,\n+                       fallback=\"__int__\", py3 = \"<RESERVED>\"),\n+            MethodSlot(unaryfunc, \"nb_float\", \"__float__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_oct\", \"__oct__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(unaryfunc, \"nb_hex\", \"__hex__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+\n+            # Added in release 2.0\n+            MethodSlot(ibinaryfunc, \"nb_inplace_add\", \"__iadd__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_subtract\", \"__isub__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_multiply\", \"__imul__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_divide\", \"__idiv__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_remainder\", \"__imod__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_power\", \"__ipow__\",\n+                       method_name_to_slot),  # actually ternaryfunc!!!\n+            MethodSlot(ibinaryfunc, \"nb_inplace_lshift\", \"__ilshift__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_rshift\", \"__irshift__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_and\", \"__iand__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_xor\", \"__ixor__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_or\", \"__ior__\", method_name_to_slot),\n+\n+            # Added in release 2.2\n+            # The following require the Py_TPFLAGS_HAVE_CLASS flag\n+            BinopSlot(binaryfunc, \"nb_floor_divide\", \"__floordiv__\", method_name_to_slot),\n+            BinopSlot(binaryfunc, \"nb_true_divide\", \"__truediv__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_floor_divide\", \"__ifloordiv__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_true_divide\", \"__itruediv__\", method_name_to_slot),\n+\n+            # Added in release 2.5\n+            MethodSlot(unaryfunc, \"nb_index\", \"__index__\", method_name_to_slot),\n+\n+            # Added in release 3.5\n+            BinopSlot(binaryfunc, \"nb_matrix_multiply\", \"__matmul__\", method_name_to_slot,\n+                      ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_matrix_multiply\", \"__imatmul__\", method_name_to_slot,\n+                       ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n+        )\n+\n+        self.PySequenceMethods = (\n+            MethodSlot(lenfunc, \"sq_length\", \"__len__\", method_name_to_slot),\n+            EmptySlot(\"sq_concat\"),  # nb_add used instead\n+            EmptySlot(\"sq_repeat\"),  # nb_multiply used instead\n+            SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n+            MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\", method_name_to_slot),\n+            EmptySlot(\"sq_ass_item\"),  # mp_ass_subscript used instead\n+            SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n+            MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\", method_name_to_slot),\n+            EmptySlot(\"sq_inplace_concat\"),  # nb_inplace_add used instead\n+            EmptySlot(\"sq_inplace_repeat\"),  # nb_inplace_multiply used instead\n+        )\n+\n+        self.PyMappingMethods = (\n+            MethodSlot(lenfunc, \"mp_length\", \"__len__\", method_name_to_slot),\n+            MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\", method_name_to_slot),\n+            SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n+        )\n+\n+        self.PyBufferProcs = (\n+            MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", method_name_to_slot,\n+                       py3 = False),\n+\n+            MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\", method_name_to_slot),\n+            MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\", method_name_to_slot)\n+        )\n+\n+        self.PyAsyncMethods = (\n+            MethodSlot(unaryfunc, \"am_await\", \"__await__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"am_anext\", \"__anext__\", method_name_to_slot),\n+        )\n+\n+        self.slot_table = (\n+            ConstructorSlot(\"tp_dealloc\", '__dealloc__'),\n+            EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX < 0x030800b4\"),\n+            EmptySlot(\"tp_vectorcall_offset\", ifdef=\"PY_VERSION_HEX >= 0x030800b4\"),\n+            EmptySlot(\"tp_getattr\"),\n+            EmptySlot(\"tp_setattr\"),\n+\n+            # tp_compare (Py2) / tp_reserved (Py3<3.5) / tp_as_async (Py3.5+) is always used as tp_as_async in Py3\n+            MethodSlot(cmpfunc, \"tp_compare\", \"__cmp__\", method_name_to_slot, ifdef=\"PY_MAJOR_VERSION < 3\"),\n+            SuiteSlot(self. PyAsyncMethods, \"__Pyx_PyAsyncMethodsStruct\", \"tp_as_async\",\n+                      self.substructures, ifdef=\"PY_MAJOR_VERSION >= 3\"),\n+\n+            MethodSlot(reprfunc, \"tp_repr\", \"__repr__\", method_name_to_slot),\n+\n+            SuiteSlot(self.PyNumberMethods, \"PyNumberMethods\", \"tp_as_number\", self.substructures),\n+            SuiteSlot(self.PySequenceMethods, \"PySequenceMethods\", \"tp_as_sequence\", self.substructures),\n+            SuiteSlot(self.PyMappingMethods, \"PyMappingMethods\", \"tp_as_mapping\", self.substructures),\n+\n+            MethodSlot(hashfunc, \"tp_hash\", \"__hash__\", method_name_to_slot,\n+                       inherited=False),    # Py3 checks for __richcmp__\n+            MethodSlot(callfunc, \"tp_call\", \"__call__\", method_name_to_slot),\n+            MethodSlot(reprfunc, \"tp_str\", \"__str__\", method_name_to_slot),\n+\n+            SyntheticSlot(\"tp_getattro\", [\"__getattr__\",\"__getattribute__\"], \"0\"),  #\"PyObject_GenericGetAttr\"),\n+            SyntheticSlot(\"tp_setattro\", [\"__setattr__\", \"__delattr__\"], \"0\"),  #\"PyObject_GenericSetAttr\"),\n+\n+            SuiteSlot(self.PyBufferProcs, \"PyBufferProcs\", \"tp_as_buffer\", self.substructures),\n+\n+            TypeFlagsSlot(\"tp_flags\"),\n+            DocStringSlot(\"tp_doc\"),\n+\n+            GCDependentSlot(\"tp_traverse\"),\n+            GCClearReferencesSlot(\"tp_clear\"),\n+\n+            RichcmpSlot(richcmpfunc, \"tp_richcompare\", \"__richcmp__\", method_name_to_slot,\n+                        inherited=False),  # Py3 checks for __hash__\n+\n+            EmptySlot(\"tp_weaklistoffset\"),\n+\n+            MethodSlot(getiterfunc, \"tp_iter\", \"__iter__\", method_name_to_slot),\n+            MethodSlot(iternextfunc, \"tp_iternext\", \"__next__\", method_name_to_slot),\n+\n+            MethodTableSlot(\"tp_methods\"),\n+            MemberTableSlot(\"tp_members\"),\n+            GetSetSlot(\"tp_getset\"),\n+\n+            BaseClassSlot(\"tp_base\"),  #EmptySlot(\"tp_base\"),\n+            EmptySlot(\"tp_dict\"),\n+\n+            SyntheticSlot(\"tp_descr_get\", [\"__get__\"], \"0\"),\n+            SyntheticSlot(\"tp_descr_set\", [\"__set__\", \"__delete__\"], \"0\"),\n+\n+            DictOffsetSlot(\"tp_dictoffset\", ifdef=\"!CYTHON_USE_TYPE_SPECS\"),  # otherwise set via \"__dictoffset__\" member\n+\n+            MethodSlot(initproc, \"tp_init\", \"__init__\", method_name_to_slot),\n+            EmptySlot(\"tp_alloc\"),  #FixedSlot(\"tp_alloc\", \"PyType_GenericAlloc\"),\n+            ConstructorSlot(\"tp_new\", \"__cinit__\"),\n+            EmptySlot(\"tp_free\"),\n+\n+            EmptySlot(\"tp_is_gc\"),\n+            EmptySlot(\"tp_bases\"),\n+            EmptySlot(\"tp_mro\"),\n+            EmptySlot(\"tp_cache\"),\n+            EmptySlot(\"tp_subclasses\"),\n+            EmptySlot(\"tp_weaklist\"),\n+            EmptySlot(\"tp_del\"),\n+            EmptySlot(\"tp_version_tag\"),\n+            EmptySlot(\"tp_finalize\", ifdef=\"PY_VERSION_HEX >= 0x030400a1\"),\n+            EmptySlot(\"tp_vectorcall\", ifdef=\"PY_VERSION_HEX >= 0x030800b1\"),\n+            EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000\"),\n+            # PyPy specific extension - only here to avoid C compiler warnings.\n+            EmptySlot(\"tp_pypy_flags\", ifdef=\"CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000\"),\n+        )\n+\n+        #------------------------------------------------------------------------------------------\n+        #\n+        #  Descriptors for special methods which don't appear directly\n+        #  in the type object or its substructures. These methods are\n+        #  called from slot functions synthesized by Cython.\n+        #\n+        #------------------------------------------------------------------------------------------\n+\n+        MethodSlot(initproc, \"\", \"__cinit__\", method_name_to_slot)\n+        MethodSlot(destructor, \"\", \"__dealloc__\", method_name_to_slot)\n+        MethodSlot(objobjargproc, \"\", \"__setitem__\", method_name_to_slot)\n+        MethodSlot(objargproc, \"\", \"__delitem__\", method_name_to_slot)\n+        MethodSlot(ssizessizeobjargproc, \"\", \"__setslice__\", method_name_to_slot)\n+        MethodSlot(ssizessizeargproc, \"\", \"__delslice__\", method_name_to_slot)\n+        MethodSlot(getattrofunc, \"\", \"__getattr__\", method_name_to_slot)\n+        MethodSlot(getattrofunc, \"\", \"__getattribute__\", method_name_to_slot)\n+        MethodSlot(setattrofunc, \"\", \"__setattr__\", method_name_to_slot)\n+        MethodSlot(delattrofunc, \"\", \"__delattr__\", method_name_to_slot)\n+        MethodSlot(descrgetfunc, \"\", \"__get__\", method_name_to_slot)\n+        MethodSlot(descrsetfunc, \"\", \"__set__\", method_name_to_slot)\n+        MethodSlot(descrdelfunc, \"\", \"__delete__\", method_name_to_slot)\n+\n+        # ensure that the global list of special_method_names is updated\n+        special_method_names.update(method_name_to_slot.keys())\n+\n+    def get_special_method_signature(self, name):\n+        #  Given a method name, if it is a special method,\n+        #  return its signature, else return None.\n+        slot = self._get_slot_by_method_name(name)\n+        if slot:\n+            return slot.signature\n+        elif name in richcmp_special_methods:\n+            return ibinaryfunc\n+        else:\n+            return None\n \n-    SyntheticSlot(\"tp_descr_get\", [\"__get__\"], \"0\"),\n-    SyntheticSlot(\"tp_descr_set\", [\"__set__\", \"__delete__\"], \"0\"),\n+    def get_slot_by_method_name(self, method_name):\n+        # For now, only search the type struct, no referenced sub-structs.\n+        return self._get_slot_by_method_name(method_name)\n \n-    DictOffsetSlot(\"tp_dictoffset\", ifdef=\"!CYTHON_USE_TYPE_SPECS\"),  # otherwise set via \"__dictoffset__\" member\n+    def __iter__(self):\n+        # make it easier to iterate over all the plots\n+        return iter(self.slot_table)\n \n-    MethodSlot(initproc, \"tp_init\", \"__init__\"),\n-    EmptySlot(\"tp_alloc\"),  #FixedSlot(\"tp_alloc\", \"PyType_GenericAlloc\"),\n-    ConstructorSlot(\"tp_new\", \"__cinit__\"),\n-    EmptySlot(\"tp_free\"),\n \n-    EmptySlot(\"tp_is_gc\"),\n-    EmptySlot(\"tp_bases\"),\n-    EmptySlot(\"tp_mro\"),\n-    EmptySlot(\"tp_cache\"),\n-    EmptySlot(\"tp_subclasses\"),\n-    EmptySlot(\"tp_weaklist\"),\n-    EmptySlot(\"tp_del\"),\n-    EmptySlot(\"tp_version_tag\"),\n-    EmptySlot(\"tp_finalize\", ifdef=\"PY_VERSION_HEX >= 0x030400a1\"),\n-    EmptySlot(\"tp_vectorcall\", ifdef=\"PY_VERSION_HEX >= 0x030800b1\"),\n-    EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000\"),\n-    # PyPy specific extension - only here to avoid C compiler warnings.\n-    EmptySlot(\"tp_pypy_flags\", ifdef=\"CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000\"),\n-)\n+_slot_table_dict = {}\n+special_method_names = set()\n \n-#------------------------------------------------------------------------------------------\n-#\n-#  Descriptors for special methods which don't appear directly\n-#  in the type object or its substructures. These methods are\n-#  called from slot functions synthesized by Cython.\n-#\n-#------------------------------------------------------------------------------------------\n+def get_slot_table(compiler_directives):\n+    if not compiler_directives:\n+        # fetch default directives here since the builtin type classes don't have\n+        # directives set\n+        from .Options import get_directive_defaults\n+        compiler_directives = get_directive_defaults()\n \n-MethodSlot(initproc, \"\", \"__cinit__\")\n-MethodSlot(destructor, \"\", \"__dealloc__\")\n-MethodSlot(objobjargproc, \"\", \"__setitem__\")\n-MethodSlot(objargproc, \"\", \"__delitem__\")\n-MethodSlot(ssizessizeobjargproc, \"\", \"__setslice__\")\n-MethodSlot(ssizessizeargproc, \"\", \"__delslice__\")\n-MethodSlot(getattrofunc, \"\", \"__getattr__\")\n-MethodSlot(getattrofunc, \"\", \"__getattribute__\")\n-MethodSlot(setattrofunc, \"\", \"__setattr__\")\n-MethodSlot(delattrofunc, \"\", \"__delattr__\")\n-MethodSlot(descrgetfunc, \"\", \"__get__\")\n-MethodSlot(descrsetfunc, \"\", \"__set__\")\n-MethodSlot(descrdelfunc, \"\", \"__delete__\")\n+    old_binops = compiler_directives['c_api_binop_methods']\n+    key = (old_binops,)\n+    if key not in _slot_table_dict:\n+        _slot_table_dict[key] = SlotTable(old_binops=old_binops)\n+    return _slot_table_dict[key]\n \n+get_slot_table(None)  # call this to ensure that special_method_names is populated by\n+                    # the default directives (so it can always be accessed quickly)",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r740925939",
            "id": 740925939,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sKaHz",
            "original_commit_id": "cdcbcceacbd62889ebfbf185875f70bba12c5127",
            "original_line": 1133,
            "original_position": 560,
            "original_start_line": 1132,
            "path": "Cython/Compiler/TypeSlots.py",
            "position": null,
            "pull_request_review_id": 795137810,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/740925939/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-11-02T10:43:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/740925939",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r740928260"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/740928260"
                }
            },
            "author_association": "MEMBER",
            "body": "This comment doesn't feel helpful at this place. Using `special_method_names` is perfectly explicit and readable. And if we ever come up with a directive that changes the list of special names, then there's probably more to change than the code here.\r\n```suggestion\r\n```",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-11-02T10:36:35Z",
            "diff_hunk": "@@ -675,7 +675,8 @@ def _dispatch_to_method_handler(self, attr_name, self_arg,\n         method_handler = self._find_handler(\n             \"method_%s_%s\" % (type_name, attr_name), kwargs)\n         if method_handler is None:\n-            if (attr_name in TypeSlots.method_name_to_slot\n+            # in this case we don't need the real directives on the call to get_slot_table",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r740928260",
            "id": 740928260,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sKasE",
            "original_commit_id": "cdcbcceacbd62889ebfbf185875f70bba12c5127",
            "original_line": 678,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Compiler/Visitor.py",
            "position": null,
            "pull_request_review_id": 795137810,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/740928260/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-11-02T10:43:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/740928260",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r740929953"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/740929953"
                }
            },
            "author_association": "MEMBER",
            "body": ":) You probably didn't notice, but you're (nicely) using spaces around the comparison operator here but not in all other places.\r\n\r\nAlso note that `assert` is not a function in Python but a statement. It doesn't need parentheses.",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-11-02T10:38:48Z",
            "diff_hunk": "@@ -166,6 +172,7 @@ class OverloadCApi(Base):\n         self.derived_implemented = derived_implemented\n \n     def __add__(self, other):\n+        assert(cython.typeof(self) != \"OverloadCApi\")  # should be untyped",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r740929953",
            "id": 740929953,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sKbGh",
            "original_commit_id": "cdcbcceacbd62889ebfbf185875f70bba12c5127",
            "original_line": 175,
            "original_position": 58,
            "original_start_line": null,
            "path": "tests/run/binop_reverse_methods_GH2056.pyx",
            "position": null,
            "pull_request_review_id": 795137810,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/740929953/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-11-02T10:43:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/740929953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r740931379"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/740931379"
                }
            },
            "author_association": "MEMBER",
            "body": "This shouldn't happen here in the constructor but once below at the module level, where we call `get_slot_table(None)`.",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-11-02T10:40:40Z",
            "diff_hunk": "@@ -890,204 +866,271 @@ def get_slot_code_by_name(scope, slot_name):\n     '__del__': Signature(\"T\", 'r')\n }\n \n-#------------------------------------------------------------------------------------------\n-#\n-#  Descriptor tables for the slots of the various type object\n-#  substructures, in the order they appear in the structure.\n-#\n-#------------------------------------------------------------------------------------------\n \n PyNumberMethods_Py2only_GUARD = \"PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)\"\n \n-PyNumberMethods = (\n-    BinopSlot(binaryfunc, \"nb_add\", \"__add__\"),\n-    BinopSlot(binaryfunc, \"nb_subtract\", \"__sub__\"),\n-    BinopSlot(binaryfunc, \"nb_multiply\", \"__mul__\"),\n-    BinopSlot(binaryfunc, \"nb_divide\", \"__div__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    BinopSlot(binaryfunc, \"nb_remainder\", \"__mod__\"),\n-    BinopSlot(binaryfunc, \"nb_divmod\", \"__divmod__\"),\n-    BinopSlot(ternaryfunc, \"nb_power\", \"__pow__\"),\n-    MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\"),\n-    MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\"),\n-    MethodSlot(unaryfunc, \"nb_absolute\", \"__abs__\"),\n-    MethodSlot(inquiry, \"nb_bool\", \"__bool__\", py2 = (\"nb_nonzero\", \"__nonzero__\")),\n-    MethodSlot(unaryfunc, \"nb_invert\", \"__invert__\"),\n-    BinopSlot(binaryfunc, \"nb_lshift\", \"__lshift__\"),\n-    BinopSlot(binaryfunc, \"nb_rshift\", \"__rshift__\"),\n-    BinopSlot(binaryfunc, \"nb_and\", \"__and__\"),\n-    BinopSlot(binaryfunc, \"nb_xor\", \"__xor__\"),\n-    BinopSlot(binaryfunc, \"nb_or\", \"__or__\"),\n-    EmptySlot(\"nb_coerce\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_int\", \"__int__\", fallback=\"__long__\"),\n-    MethodSlot(unaryfunc, \"nb_long\", \"__long__\", fallback=\"__int__\", py3 = \"<RESERVED>\"),\n-    MethodSlot(unaryfunc, \"nb_float\", \"__float__\"),\n-    MethodSlot(unaryfunc, \"nb_oct\", \"__oct__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_hex\", \"__hex__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-\n-    # Added in release 2.0\n-    MethodSlot(ibinaryfunc, \"nb_inplace_add\", \"__iadd__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_subtract\", \"__isub__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_multiply\", \"__imul__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_divide\", \"__idiv__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_remainder\", \"__imod__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_power\", \"__ipow__\"),  # actually ternaryfunc!!!\n-    MethodSlot(ibinaryfunc, \"nb_inplace_lshift\", \"__ilshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_rshift\", \"__irshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_and\", \"__iand__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_xor\", \"__ixor__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_or\", \"__ior__\"),\n-\n-    # Added in release 2.2\n-    # The following require the Py_TPFLAGS_HAVE_CLASS flag\n-    BinopSlot(binaryfunc, \"nb_floor_divide\", \"__floordiv__\"),\n-    BinopSlot(binaryfunc, \"nb_true_divide\", \"__truediv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_floor_divide\", \"__ifloordiv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_true_divide\", \"__itruediv__\"),\n-\n-    # Added in release 2.5\n-    MethodSlot(unaryfunc, \"nb_index\", \"__index__\"),\n-\n-    # Added in release 3.5\n-    BinopSlot(binaryfunc, \"nb_matrix_multiply\", \"__matmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_matrix_multiply\", \"__imatmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-)\n-\n-PySequenceMethods = (\n-    MethodSlot(lenfunc, \"sq_length\", \"__len__\"),\n-    EmptySlot(\"sq_concat\"),  # nb_add used instead\n-    EmptySlot(\"sq_repeat\"),  # nb_multiply used instead\n-    SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n-    MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\"),\n-    EmptySlot(\"sq_ass_item\"),  # mp_ass_subscript used instead\n-    SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n-    MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\"),\n-    EmptySlot(\"sq_inplace_concat\"),  # nb_inplace_add used instead\n-    EmptySlot(\"sq_inplace_repeat\"),  # nb_inplace_multiply used instead\n-)\n-\n-PyMappingMethods = (\n-    MethodSlot(lenfunc, \"mp_length\", \"__len__\"),\n-    MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\"),\n-    SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n-)\n-\n-PyBufferProcs = (\n-    MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", py3 = False),\n-    MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", py3 = False),\n-    MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", py3 = False),\n-    MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", py3 = False),\n-\n-    MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\"),\n-    MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\")\n-)\n-\n-PyAsyncMethods = (\n-    MethodSlot(unaryfunc, \"am_await\", \"__await__\"),\n-    MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\"),\n-    MethodSlot(unaryfunc, \"am_anext\", \"__anext__\"),\n-)\n-\n #------------------------------------------------------------------------------------------\n #\n #  The main slot table. This table contains descriptors for all the\n #  top-level type slots, beginning with tp_dealloc, in the order they\n #  appear in the type object.\n #\n+# It depends on some compiler directives (currently c_api_binop_methods), so the\n+# slot tables for each set of compiler directives are generated lazily and put in\n+# the _slot_table_dict\n+#\n #------------------------------------------------------------------------------------------\n \n-slot_table = (\n-    ConstructorSlot(\"tp_dealloc\", '__dealloc__'),\n-    EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX < 0x030800b4\"),\n-    EmptySlot(\"tp_vectorcall_offset\", ifdef=\"PY_VERSION_HEX >= 0x030800b4\"),\n-    EmptySlot(\"tp_getattr\"),\n-    EmptySlot(\"tp_setattr\"),\n-\n-    # tp_compare (Py2) / tp_reserved (Py3<3.5) / tp_as_async (Py3.5+) is always used as tp_as_async in Py3\n-    MethodSlot(cmpfunc, \"tp_compare\", \"__cmp__\", ifdef=\"PY_MAJOR_VERSION < 3\"),\n-    SuiteSlot(PyAsyncMethods, \"__Pyx_PyAsyncMethodsStruct\", \"tp_as_async\", ifdef=\"PY_MAJOR_VERSION >= 3\"),\n-\n-    MethodSlot(reprfunc, \"tp_repr\", \"__repr__\"),\n-\n-    SuiteSlot(PyNumberMethods, \"PyNumberMethods\", \"tp_as_number\"),\n-    SuiteSlot(PySequenceMethods, \"PySequenceMethods\", \"tp_as_sequence\"),\n-    SuiteSlot(PyMappingMethods, \"PyMappingMethods\", \"tp_as_mapping\"),\n-\n-    MethodSlot(hashfunc, \"tp_hash\", \"__hash__\", inherited=False),    # Py3 checks for __richcmp__\n-    MethodSlot(callfunc, \"tp_call\", \"__call__\"),\n-    MethodSlot(reprfunc, \"tp_str\", \"__str__\"),\n-\n-    SyntheticSlot(\"tp_getattro\", [\"__getattr__\",\"__getattribute__\"], \"0\"),  #\"PyObject_GenericGetAttr\"),\n-    SyntheticSlot(\"tp_setattro\", [\"__setattr__\", \"__delattr__\"], \"0\"),  #\"PyObject_GenericSetAttr\"),\n-\n-    SuiteSlot(PyBufferProcs, \"PyBufferProcs\", \"tp_as_buffer\"),\n-\n-    TypeFlagsSlot(\"tp_flags\"),\n-    DocStringSlot(\"tp_doc\"),\n-\n-    GCDependentSlot(\"tp_traverse\"),\n-    GCClearReferencesSlot(\"tp_clear\"),\n-\n-    RichcmpSlot(richcmpfunc, \"tp_richcompare\", \"__richcmp__\", inherited=False),  # Py3 checks for __hash__\n-\n-    EmptySlot(\"tp_weaklistoffset\"),\n-\n-    MethodSlot(getiterfunc, \"tp_iter\", \"__iter__\"),\n-    MethodSlot(iternextfunc, \"tp_iternext\", \"__next__\"),\n-\n-    MethodTableSlot(\"tp_methods\"),\n-    MemberTableSlot(\"tp_members\"),\n-    GetSetSlot(\"tp_getset\"),\n-\n-    BaseClassSlot(\"tp_base\"),  #EmptySlot(\"tp_base\"),\n-    EmptySlot(\"tp_dict\"),\n+class SlotTable(object):\n+    def __init__(self, old_binops):\n+        # The following dictionary maps __xxx__ method names to slot descriptors.\n+        method_name_to_slot = {}\n+        self._get_slot_by_method_name = method_name_to_slot.get\n+        self.substructures = []   # List of all SuiteSlot instances\n+\n+        bf = binaryfunc if old_binops else ibinaryfunc\n+        tf = ternaryfunc if old_binops else iternaryfunc\n+\n+        #  Descriptor tables for the slots of the various type object\n+        #  substructures, in the order they appear in the structure.\n+        self.PyNumberMethods = (\n+            BinopSlot(bf, \"nb_add\", \"__add__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_subtract\", \"__sub__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_multiply\", \"__mul__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_divide\", \"__div__\", method_name_to_slot,\n+                      ifdef = PyNumberMethods_Py2only_GUARD),\n+            BinopSlot(bf, \"nb_remainder\", \"__mod__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_divmod\", \"__divmod__\", method_name_to_slot),\n+            BinopSlot(tf, \"nb_power\", \"__pow__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_absolute\", \"__abs__\", method_name_to_slot),\n+            MethodSlot(inquiry, \"nb_bool\", \"__bool__\", method_name_to_slot,\n+                       py2 = (\"nb_nonzero\", \"__nonzero__\")),\n+            MethodSlot(unaryfunc, \"nb_invert\", \"__invert__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_lshift\", \"__lshift__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_rshift\", \"__rshift__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_and\", \"__and__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_xor\", \"__xor__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_or\", \"__or__\", method_name_to_slot),\n+            EmptySlot(\"nb_coerce\", ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(unaryfunc, \"nb_int\", \"__int__\", method_name_to_slot, fallback=\"__long__\"),\n+            MethodSlot(unaryfunc, \"nb_long\", \"__long__\", method_name_to_slot,\n+                       fallback=\"__int__\", py3 = \"<RESERVED>\"),\n+            MethodSlot(unaryfunc, \"nb_float\", \"__float__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_oct\", \"__oct__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(unaryfunc, \"nb_hex\", \"__hex__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+\n+            # Added in release 2.0\n+            MethodSlot(ibinaryfunc, \"nb_inplace_add\", \"__iadd__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_subtract\", \"__isub__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_multiply\", \"__imul__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_divide\", \"__idiv__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_remainder\", \"__imod__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_power\", \"__ipow__\",\n+                       method_name_to_slot),  # actually ternaryfunc!!!\n+            MethodSlot(ibinaryfunc, \"nb_inplace_lshift\", \"__ilshift__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_rshift\", \"__irshift__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_and\", \"__iand__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_xor\", \"__ixor__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_or\", \"__ior__\", method_name_to_slot),\n+\n+            # Added in release 2.2\n+            # The following require the Py_TPFLAGS_HAVE_CLASS flag\n+            BinopSlot(binaryfunc, \"nb_floor_divide\", \"__floordiv__\", method_name_to_slot),\n+            BinopSlot(binaryfunc, \"nb_true_divide\", \"__truediv__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_floor_divide\", \"__ifloordiv__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_true_divide\", \"__itruediv__\", method_name_to_slot),\n+\n+            # Added in release 2.5\n+            MethodSlot(unaryfunc, \"nb_index\", \"__index__\", method_name_to_slot),\n+\n+            # Added in release 3.5\n+            BinopSlot(binaryfunc, \"nb_matrix_multiply\", \"__matmul__\", method_name_to_slot,\n+                      ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_matrix_multiply\", \"__imatmul__\", method_name_to_slot,\n+                       ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n+        )\n+\n+        self.PySequenceMethods = (\n+            MethodSlot(lenfunc, \"sq_length\", \"__len__\", method_name_to_slot),\n+            EmptySlot(\"sq_concat\"),  # nb_add used instead\n+            EmptySlot(\"sq_repeat\"),  # nb_multiply used instead\n+            SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n+            MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\", method_name_to_slot),\n+            EmptySlot(\"sq_ass_item\"),  # mp_ass_subscript used instead\n+            SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n+            MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\", method_name_to_slot),\n+            EmptySlot(\"sq_inplace_concat\"),  # nb_inplace_add used instead\n+            EmptySlot(\"sq_inplace_repeat\"),  # nb_inplace_multiply used instead\n+        )\n+\n+        self.PyMappingMethods = (\n+            MethodSlot(lenfunc, \"mp_length\", \"__len__\", method_name_to_slot),\n+            MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\", method_name_to_slot),\n+            SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n+        )\n+\n+        self.PyBufferProcs = (\n+            MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", method_name_to_slot,\n+                       py3 = False),\n+\n+            MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\", method_name_to_slot),\n+            MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\", method_name_to_slot)\n+        )\n+\n+        self.PyAsyncMethods = (\n+            MethodSlot(unaryfunc, \"am_await\", \"__await__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"am_anext\", \"__anext__\", method_name_to_slot),\n+        )\n+\n+        self.slot_table = (\n+            ConstructorSlot(\"tp_dealloc\", '__dealloc__'),\n+            EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX < 0x030800b4\"),\n+            EmptySlot(\"tp_vectorcall_offset\", ifdef=\"PY_VERSION_HEX >= 0x030800b4\"),\n+            EmptySlot(\"tp_getattr\"),\n+            EmptySlot(\"tp_setattr\"),\n+\n+            # tp_compare (Py2) / tp_reserved (Py3<3.5) / tp_as_async (Py3.5+) is always used as tp_as_async in Py3\n+            MethodSlot(cmpfunc, \"tp_compare\", \"__cmp__\", method_name_to_slot, ifdef=\"PY_MAJOR_VERSION < 3\"),\n+            SuiteSlot(self. PyAsyncMethods, \"__Pyx_PyAsyncMethodsStruct\", \"tp_as_async\",\n+                      self.substructures, ifdef=\"PY_MAJOR_VERSION >= 3\"),\n+\n+            MethodSlot(reprfunc, \"tp_repr\", \"__repr__\", method_name_to_slot),\n+\n+            SuiteSlot(self.PyNumberMethods, \"PyNumberMethods\", \"tp_as_number\", self.substructures),\n+            SuiteSlot(self.PySequenceMethods, \"PySequenceMethods\", \"tp_as_sequence\", self.substructures),\n+            SuiteSlot(self.PyMappingMethods, \"PyMappingMethods\", \"tp_as_mapping\", self.substructures),\n+\n+            MethodSlot(hashfunc, \"tp_hash\", \"__hash__\", method_name_to_slot,\n+                       inherited=False),    # Py3 checks for __richcmp__\n+            MethodSlot(callfunc, \"tp_call\", \"__call__\", method_name_to_slot),\n+            MethodSlot(reprfunc, \"tp_str\", \"__str__\", method_name_to_slot),\n+\n+            SyntheticSlot(\"tp_getattro\", [\"__getattr__\",\"__getattribute__\"], \"0\"),  #\"PyObject_GenericGetAttr\"),\n+            SyntheticSlot(\"tp_setattro\", [\"__setattr__\", \"__delattr__\"], \"0\"),  #\"PyObject_GenericSetAttr\"),\n+\n+            SuiteSlot(self.PyBufferProcs, \"PyBufferProcs\", \"tp_as_buffer\", self.substructures),\n+\n+            TypeFlagsSlot(\"tp_flags\"),\n+            DocStringSlot(\"tp_doc\"),\n+\n+            GCDependentSlot(\"tp_traverse\"),\n+            GCClearReferencesSlot(\"tp_clear\"),\n+\n+            RichcmpSlot(richcmpfunc, \"tp_richcompare\", \"__richcmp__\", method_name_to_slot,\n+                        inherited=False),  # Py3 checks for __hash__\n+\n+            EmptySlot(\"tp_weaklistoffset\"),\n+\n+            MethodSlot(getiterfunc, \"tp_iter\", \"__iter__\", method_name_to_slot),\n+            MethodSlot(iternextfunc, \"tp_iternext\", \"__next__\", method_name_to_slot),\n+\n+            MethodTableSlot(\"tp_methods\"),\n+            MemberTableSlot(\"tp_members\"),\n+            GetSetSlot(\"tp_getset\"),\n+\n+            BaseClassSlot(\"tp_base\"),  #EmptySlot(\"tp_base\"),\n+            EmptySlot(\"tp_dict\"),\n+\n+            SyntheticSlot(\"tp_descr_get\", [\"__get__\"], \"0\"),\n+            SyntheticSlot(\"tp_descr_set\", [\"__set__\", \"__delete__\"], \"0\"),\n+\n+            DictOffsetSlot(\"tp_dictoffset\", ifdef=\"!CYTHON_USE_TYPE_SPECS\"),  # otherwise set via \"__dictoffset__\" member\n+\n+            MethodSlot(initproc, \"tp_init\", \"__init__\", method_name_to_slot),\n+            EmptySlot(\"tp_alloc\"),  #FixedSlot(\"tp_alloc\", \"PyType_GenericAlloc\"),\n+            ConstructorSlot(\"tp_new\", \"__cinit__\"),\n+            EmptySlot(\"tp_free\"),\n+\n+            EmptySlot(\"tp_is_gc\"),\n+            EmptySlot(\"tp_bases\"),\n+            EmptySlot(\"tp_mro\"),\n+            EmptySlot(\"tp_cache\"),\n+            EmptySlot(\"tp_subclasses\"),\n+            EmptySlot(\"tp_weaklist\"),\n+            EmptySlot(\"tp_del\"),\n+            EmptySlot(\"tp_version_tag\"),\n+            EmptySlot(\"tp_finalize\", ifdef=\"PY_VERSION_HEX >= 0x030400a1\"),\n+            EmptySlot(\"tp_vectorcall\", ifdef=\"PY_VERSION_HEX >= 0x030800b1\"),\n+            EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000\"),\n+            # PyPy specific extension - only here to avoid C compiler warnings.\n+            EmptySlot(\"tp_pypy_flags\", ifdef=\"CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000\"),\n+        )\n+\n+        #------------------------------------------------------------------------------------------\n+        #\n+        #  Descriptors for special methods which don't appear directly\n+        #  in the type object or its substructures. These methods are\n+        #  called from slot functions synthesized by Cython.\n+        #\n+        #------------------------------------------------------------------------------------------\n+\n+        MethodSlot(initproc, \"\", \"__cinit__\", method_name_to_slot)\n+        MethodSlot(destructor, \"\", \"__dealloc__\", method_name_to_slot)\n+        MethodSlot(objobjargproc, \"\", \"__setitem__\", method_name_to_slot)\n+        MethodSlot(objargproc, \"\", \"__delitem__\", method_name_to_slot)\n+        MethodSlot(ssizessizeobjargproc, \"\", \"__setslice__\", method_name_to_slot)\n+        MethodSlot(ssizessizeargproc, \"\", \"__delslice__\", method_name_to_slot)\n+        MethodSlot(getattrofunc, \"\", \"__getattr__\", method_name_to_slot)\n+        MethodSlot(getattrofunc, \"\", \"__getattribute__\", method_name_to_slot)\n+        MethodSlot(setattrofunc, \"\", \"__setattr__\", method_name_to_slot)\n+        MethodSlot(delattrofunc, \"\", \"__delattr__\", method_name_to_slot)\n+        MethodSlot(descrgetfunc, \"\", \"__get__\", method_name_to_slot)\n+        MethodSlot(descrsetfunc, \"\", \"__set__\", method_name_to_slot)\n+        MethodSlot(descrdelfunc, \"\", \"__delete__\", method_name_to_slot)\n+\n+        # ensure that the global list of special_method_names is updated\n+        special_method_names.update(method_name_to_slot.keys())",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r740931379",
            "id": 740931379,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sKbcz",
            "original_commit_id": "cdcbcceacbd62889ebfbf185875f70bba12c5127",
            "original_line": 1094,
            "original_position": 480,
            "original_start_line": 1093,
            "path": "Cython/Compiler/TypeSlots.py",
            "position": null,
            "pull_request_review_id": 795137810,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/740931379/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "updated_at": "2021-11-02T10:43:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/740931379",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r740933235"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/740933235"
                }
            },
            "author_association": "MEMBER",
            "body": "We don't need this if we do it in one go below.\r\n```suggestion\r\n```",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-11-02T10:43:06Z",
            "diff_hunk": "@@ -890,204 +866,271 @@ def get_slot_code_by_name(scope, slot_name):\n     '__del__': Signature(\"T\", 'r')\n }\n \n-#------------------------------------------------------------------------------------------\n-#\n-#  Descriptor tables for the slots of the various type object\n-#  substructures, in the order they appear in the structure.\n-#\n-#------------------------------------------------------------------------------------------\n \n PyNumberMethods_Py2only_GUARD = \"PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)\"\n \n-PyNumberMethods = (\n-    BinopSlot(binaryfunc, \"nb_add\", \"__add__\"),\n-    BinopSlot(binaryfunc, \"nb_subtract\", \"__sub__\"),\n-    BinopSlot(binaryfunc, \"nb_multiply\", \"__mul__\"),\n-    BinopSlot(binaryfunc, \"nb_divide\", \"__div__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    BinopSlot(binaryfunc, \"nb_remainder\", \"__mod__\"),\n-    BinopSlot(binaryfunc, \"nb_divmod\", \"__divmod__\"),\n-    BinopSlot(ternaryfunc, \"nb_power\", \"__pow__\"),\n-    MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\"),\n-    MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\"),\n-    MethodSlot(unaryfunc, \"nb_absolute\", \"__abs__\"),\n-    MethodSlot(inquiry, \"nb_bool\", \"__bool__\", py2 = (\"nb_nonzero\", \"__nonzero__\")),\n-    MethodSlot(unaryfunc, \"nb_invert\", \"__invert__\"),\n-    BinopSlot(binaryfunc, \"nb_lshift\", \"__lshift__\"),\n-    BinopSlot(binaryfunc, \"nb_rshift\", \"__rshift__\"),\n-    BinopSlot(binaryfunc, \"nb_and\", \"__and__\"),\n-    BinopSlot(binaryfunc, \"nb_xor\", \"__xor__\"),\n-    BinopSlot(binaryfunc, \"nb_or\", \"__or__\"),\n-    EmptySlot(\"nb_coerce\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_int\", \"__int__\", fallback=\"__long__\"),\n-    MethodSlot(unaryfunc, \"nb_long\", \"__long__\", fallback=\"__int__\", py3 = \"<RESERVED>\"),\n-    MethodSlot(unaryfunc, \"nb_float\", \"__float__\"),\n-    MethodSlot(unaryfunc, \"nb_oct\", \"__oct__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(unaryfunc, \"nb_hex\", \"__hex__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-\n-    # Added in release 2.0\n-    MethodSlot(ibinaryfunc, \"nb_inplace_add\", \"__iadd__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_subtract\", \"__isub__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_multiply\", \"__imul__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_divide\", \"__idiv__\", ifdef = PyNumberMethods_Py2only_GUARD),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_remainder\", \"__imod__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_power\", \"__ipow__\"),  # actually ternaryfunc!!!\n-    MethodSlot(ibinaryfunc, \"nb_inplace_lshift\", \"__ilshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_rshift\", \"__irshift__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_and\", \"__iand__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_xor\", \"__ixor__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_or\", \"__ior__\"),\n-\n-    # Added in release 2.2\n-    # The following require the Py_TPFLAGS_HAVE_CLASS flag\n-    BinopSlot(binaryfunc, \"nb_floor_divide\", \"__floordiv__\"),\n-    BinopSlot(binaryfunc, \"nb_true_divide\", \"__truediv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_floor_divide\", \"__ifloordiv__\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_true_divide\", \"__itruediv__\"),\n-\n-    # Added in release 2.5\n-    MethodSlot(unaryfunc, \"nb_index\", \"__index__\"),\n-\n-    # Added in release 3.5\n-    BinopSlot(binaryfunc, \"nb_matrix_multiply\", \"__matmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-    MethodSlot(ibinaryfunc, \"nb_inplace_matrix_multiply\", \"__imatmul__\", ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n-)\n-\n-PySequenceMethods = (\n-    MethodSlot(lenfunc, \"sq_length\", \"__len__\"),\n-    EmptySlot(\"sq_concat\"),  # nb_add used instead\n-    EmptySlot(\"sq_repeat\"),  # nb_multiply used instead\n-    SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n-    MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\"),\n-    EmptySlot(\"sq_ass_item\"),  # mp_ass_subscript used instead\n-    SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n-    MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\"),\n-    EmptySlot(\"sq_inplace_concat\"),  # nb_inplace_add used instead\n-    EmptySlot(\"sq_inplace_repeat\"),  # nb_inplace_multiply used instead\n-)\n-\n-PyMappingMethods = (\n-    MethodSlot(lenfunc, \"mp_length\", \"__len__\"),\n-    MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\"),\n-    SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n-)\n-\n-PyBufferProcs = (\n-    MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", py3 = False),\n-    MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", py3 = False),\n-    MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", py3 = False),\n-    MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", py3 = False),\n-\n-    MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\"),\n-    MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\")\n-)\n-\n-PyAsyncMethods = (\n-    MethodSlot(unaryfunc, \"am_await\", \"__await__\"),\n-    MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\"),\n-    MethodSlot(unaryfunc, \"am_anext\", \"__anext__\"),\n-)\n-\n #------------------------------------------------------------------------------------------\n #\n #  The main slot table. This table contains descriptors for all the\n #  top-level type slots, beginning with tp_dealloc, in the order they\n #  appear in the type object.\n #\n+# It depends on some compiler directives (currently c_api_binop_methods), so the\n+# slot tables for each set of compiler directives are generated lazily and put in\n+# the _slot_table_dict\n+#\n #------------------------------------------------------------------------------------------\n \n-slot_table = (\n-    ConstructorSlot(\"tp_dealloc\", '__dealloc__'),\n-    EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX < 0x030800b4\"),\n-    EmptySlot(\"tp_vectorcall_offset\", ifdef=\"PY_VERSION_HEX >= 0x030800b4\"),\n-    EmptySlot(\"tp_getattr\"),\n-    EmptySlot(\"tp_setattr\"),\n-\n-    # tp_compare (Py2) / tp_reserved (Py3<3.5) / tp_as_async (Py3.5+) is always used as tp_as_async in Py3\n-    MethodSlot(cmpfunc, \"tp_compare\", \"__cmp__\", ifdef=\"PY_MAJOR_VERSION < 3\"),\n-    SuiteSlot(PyAsyncMethods, \"__Pyx_PyAsyncMethodsStruct\", \"tp_as_async\", ifdef=\"PY_MAJOR_VERSION >= 3\"),\n-\n-    MethodSlot(reprfunc, \"tp_repr\", \"__repr__\"),\n-\n-    SuiteSlot(PyNumberMethods, \"PyNumberMethods\", \"tp_as_number\"),\n-    SuiteSlot(PySequenceMethods, \"PySequenceMethods\", \"tp_as_sequence\"),\n-    SuiteSlot(PyMappingMethods, \"PyMappingMethods\", \"tp_as_mapping\"),\n-\n-    MethodSlot(hashfunc, \"tp_hash\", \"__hash__\", inherited=False),    # Py3 checks for __richcmp__\n-    MethodSlot(callfunc, \"tp_call\", \"__call__\"),\n-    MethodSlot(reprfunc, \"tp_str\", \"__str__\"),\n-\n-    SyntheticSlot(\"tp_getattro\", [\"__getattr__\",\"__getattribute__\"], \"0\"),  #\"PyObject_GenericGetAttr\"),\n-    SyntheticSlot(\"tp_setattro\", [\"__setattr__\", \"__delattr__\"], \"0\"),  #\"PyObject_GenericSetAttr\"),\n-\n-    SuiteSlot(PyBufferProcs, \"PyBufferProcs\", \"tp_as_buffer\"),\n-\n-    TypeFlagsSlot(\"tp_flags\"),\n-    DocStringSlot(\"tp_doc\"),\n-\n-    GCDependentSlot(\"tp_traverse\"),\n-    GCClearReferencesSlot(\"tp_clear\"),\n-\n-    RichcmpSlot(richcmpfunc, \"tp_richcompare\", \"__richcmp__\", inherited=False),  # Py3 checks for __hash__\n-\n-    EmptySlot(\"tp_weaklistoffset\"),\n-\n-    MethodSlot(getiterfunc, \"tp_iter\", \"__iter__\"),\n-    MethodSlot(iternextfunc, \"tp_iternext\", \"__next__\"),\n-\n-    MethodTableSlot(\"tp_methods\"),\n-    MemberTableSlot(\"tp_members\"),\n-    GetSetSlot(\"tp_getset\"),\n-\n-    BaseClassSlot(\"tp_base\"),  #EmptySlot(\"tp_base\"),\n-    EmptySlot(\"tp_dict\"),\n+class SlotTable(object):\n+    def __init__(self, old_binops):\n+        # The following dictionary maps __xxx__ method names to slot descriptors.\n+        method_name_to_slot = {}\n+        self._get_slot_by_method_name = method_name_to_slot.get\n+        self.substructures = []   # List of all SuiteSlot instances\n+\n+        bf = binaryfunc if old_binops else ibinaryfunc\n+        tf = ternaryfunc if old_binops else iternaryfunc\n+\n+        #  Descriptor tables for the slots of the various type object\n+        #  substructures, in the order they appear in the structure.\n+        self.PyNumberMethods = (\n+            BinopSlot(bf, \"nb_add\", \"__add__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_subtract\", \"__sub__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_multiply\", \"__mul__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_divide\", \"__div__\", method_name_to_slot,\n+                      ifdef = PyNumberMethods_Py2only_GUARD),\n+            BinopSlot(bf, \"nb_remainder\", \"__mod__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_divmod\", \"__divmod__\", method_name_to_slot),\n+            BinopSlot(tf, \"nb_power\", \"__pow__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_negative\", \"__neg__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_positive\", \"__pos__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_absolute\", \"__abs__\", method_name_to_slot),\n+            MethodSlot(inquiry, \"nb_bool\", \"__bool__\", method_name_to_slot,\n+                       py2 = (\"nb_nonzero\", \"__nonzero__\")),\n+            MethodSlot(unaryfunc, \"nb_invert\", \"__invert__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_lshift\", \"__lshift__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_rshift\", \"__rshift__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_and\", \"__and__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_xor\", \"__xor__\", method_name_to_slot),\n+            BinopSlot(bf, \"nb_or\", \"__or__\", method_name_to_slot),\n+            EmptySlot(\"nb_coerce\", ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(unaryfunc, \"nb_int\", \"__int__\", method_name_to_slot, fallback=\"__long__\"),\n+            MethodSlot(unaryfunc, \"nb_long\", \"__long__\", method_name_to_slot,\n+                       fallback=\"__int__\", py3 = \"<RESERVED>\"),\n+            MethodSlot(unaryfunc, \"nb_float\", \"__float__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"nb_oct\", \"__oct__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(unaryfunc, \"nb_hex\", \"__hex__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+\n+            # Added in release 2.0\n+            MethodSlot(ibinaryfunc, \"nb_inplace_add\", \"__iadd__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_subtract\", \"__isub__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_multiply\", \"__imul__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_divide\", \"__idiv__\", method_name_to_slot,\n+                       ifdef = PyNumberMethods_Py2only_GUARD),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_remainder\", \"__imod__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_power\", \"__ipow__\",\n+                       method_name_to_slot),  # actually ternaryfunc!!!\n+            MethodSlot(ibinaryfunc, \"nb_inplace_lshift\", \"__ilshift__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_rshift\", \"__irshift__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_and\", \"__iand__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_xor\", \"__ixor__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_or\", \"__ior__\", method_name_to_slot),\n+\n+            # Added in release 2.2\n+            # The following require the Py_TPFLAGS_HAVE_CLASS flag\n+            BinopSlot(binaryfunc, \"nb_floor_divide\", \"__floordiv__\", method_name_to_slot),\n+            BinopSlot(binaryfunc, \"nb_true_divide\", \"__truediv__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_floor_divide\", \"__ifloordiv__\", method_name_to_slot),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_true_divide\", \"__itruediv__\", method_name_to_slot),\n+\n+            # Added in release 2.5\n+            MethodSlot(unaryfunc, \"nb_index\", \"__index__\", method_name_to_slot),\n+\n+            # Added in release 3.5\n+            BinopSlot(binaryfunc, \"nb_matrix_multiply\", \"__matmul__\", method_name_to_slot,\n+                      ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n+            MethodSlot(ibinaryfunc, \"nb_inplace_matrix_multiply\", \"__imatmul__\", method_name_to_slot,\n+                       ifdef=\"PY_VERSION_HEX >= 0x03050000\"),\n+        )\n+\n+        self.PySequenceMethods = (\n+            MethodSlot(lenfunc, \"sq_length\", \"__len__\", method_name_to_slot),\n+            EmptySlot(\"sq_concat\"),  # nb_add used instead\n+            EmptySlot(\"sq_repeat\"),  # nb_multiply used instead\n+            SyntheticSlot(\"sq_item\", [\"__getitem__\"], \"0\"),    #EmptySlot(\"sq_item\"),   # mp_subscript used instead\n+            MethodSlot(ssizessizeargfunc, \"sq_slice\", \"__getslice__\", method_name_to_slot),\n+            EmptySlot(\"sq_ass_item\"),  # mp_ass_subscript used instead\n+            SyntheticSlot(\"sq_ass_slice\", [\"__setslice__\", \"__delslice__\"], \"0\"),\n+            MethodSlot(cmpfunc, \"sq_contains\", \"__contains__\", method_name_to_slot),\n+            EmptySlot(\"sq_inplace_concat\"),  # nb_inplace_add used instead\n+            EmptySlot(\"sq_inplace_repeat\"),  # nb_inplace_multiply used instead\n+        )\n+\n+        self.PyMappingMethods = (\n+            MethodSlot(lenfunc, \"mp_length\", \"__len__\", method_name_to_slot),\n+            MethodSlot(objargfunc, \"mp_subscript\", \"__getitem__\", method_name_to_slot),\n+            SyntheticSlot(\"mp_ass_subscript\", [\"__setitem__\", \"__delitem__\"], \"0\"),\n+        )\n+\n+        self.PyBufferProcs = (\n+            MethodSlot(readbufferproc, \"bf_getreadbuffer\", \"__getreadbuffer__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(writebufferproc, \"bf_getwritebuffer\", \"__getwritebuffer__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(segcountproc, \"bf_getsegcount\", \"__getsegcount__\", method_name_to_slot,\n+                       py3 = False),\n+            MethodSlot(charbufferproc, \"bf_getcharbuffer\", \"__getcharbuffer__\", method_name_to_slot,\n+                       py3 = False),\n+\n+            MethodSlot(getbufferproc, \"bf_getbuffer\", \"__getbuffer__\", method_name_to_slot),\n+            MethodSlot(releasebufferproc, \"bf_releasebuffer\", \"__releasebuffer__\", method_name_to_slot)\n+        )\n+\n+        self.PyAsyncMethods = (\n+            MethodSlot(unaryfunc, \"am_await\", \"__await__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"am_aiter\", \"__aiter__\", method_name_to_slot),\n+            MethodSlot(unaryfunc, \"am_anext\", \"__anext__\", method_name_to_slot),\n+        )\n+\n+        self.slot_table = (\n+            ConstructorSlot(\"tp_dealloc\", '__dealloc__'),\n+            EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX < 0x030800b4\"),\n+            EmptySlot(\"tp_vectorcall_offset\", ifdef=\"PY_VERSION_HEX >= 0x030800b4\"),\n+            EmptySlot(\"tp_getattr\"),\n+            EmptySlot(\"tp_setattr\"),\n+\n+            # tp_compare (Py2) / tp_reserved (Py3<3.5) / tp_as_async (Py3.5+) is always used as tp_as_async in Py3\n+            MethodSlot(cmpfunc, \"tp_compare\", \"__cmp__\", method_name_to_slot, ifdef=\"PY_MAJOR_VERSION < 3\"),\n+            SuiteSlot(self. PyAsyncMethods, \"__Pyx_PyAsyncMethodsStruct\", \"tp_as_async\",\n+                      self.substructures, ifdef=\"PY_MAJOR_VERSION >= 3\"),\n+\n+            MethodSlot(reprfunc, \"tp_repr\", \"__repr__\", method_name_to_slot),\n+\n+            SuiteSlot(self.PyNumberMethods, \"PyNumberMethods\", \"tp_as_number\", self.substructures),\n+            SuiteSlot(self.PySequenceMethods, \"PySequenceMethods\", \"tp_as_sequence\", self.substructures),\n+            SuiteSlot(self.PyMappingMethods, \"PyMappingMethods\", \"tp_as_mapping\", self.substructures),\n+\n+            MethodSlot(hashfunc, \"tp_hash\", \"__hash__\", method_name_to_slot,\n+                       inherited=False),    # Py3 checks for __richcmp__\n+            MethodSlot(callfunc, \"tp_call\", \"__call__\", method_name_to_slot),\n+            MethodSlot(reprfunc, \"tp_str\", \"__str__\", method_name_to_slot),\n+\n+            SyntheticSlot(\"tp_getattro\", [\"__getattr__\",\"__getattribute__\"], \"0\"),  #\"PyObject_GenericGetAttr\"),\n+            SyntheticSlot(\"tp_setattro\", [\"__setattr__\", \"__delattr__\"], \"0\"),  #\"PyObject_GenericSetAttr\"),\n+\n+            SuiteSlot(self.PyBufferProcs, \"PyBufferProcs\", \"tp_as_buffer\", self.substructures),\n+\n+            TypeFlagsSlot(\"tp_flags\"),\n+            DocStringSlot(\"tp_doc\"),\n+\n+            GCDependentSlot(\"tp_traverse\"),\n+            GCClearReferencesSlot(\"tp_clear\"),\n+\n+            RichcmpSlot(richcmpfunc, \"tp_richcompare\", \"__richcmp__\", method_name_to_slot,\n+                        inherited=False),  # Py3 checks for __hash__\n+\n+            EmptySlot(\"tp_weaklistoffset\"),\n+\n+            MethodSlot(getiterfunc, \"tp_iter\", \"__iter__\", method_name_to_slot),\n+            MethodSlot(iternextfunc, \"tp_iternext\", \"__next__\", method_name_to_slot),\n+\n+            MethodTableSlot(\"tp_methods\"),\n+            MemberTableSlot(\"tp_members\"),\n+            GetSetSlot(\"tp_getset\"),\n+\n+            BaseClassSlot(\"tp_base\"),  #EmptySlot(\"tp_base\"),\n+            EmptySlot(\"tp_dict\"),\n+\n+            SyntheticSlot(\"tp_descr_get\", [\"__get__\"], \"0\"),\n+            SyntheticSlot(\"tp_descr_set\", [\"__set__\", \"__delete__\"], \"0\"),\n+\n+            DictOffsetSlot(\"tp_dictoffset\", ifdef=\"!CYTHON_USE_TYPE_SPECS\"),  # otherwise set via \"__dictoffset__\" member\n+\n+            MethodSlot(initproc, \"tp_init\", \"__init__\", method_name_to_slot),\n+            EmptySlot(\"tp_alloc\"),  #FixedSlot(\"tp_alloc\", \"PyType_GenericAlloc\"),\n+            ConstructorSlot(\"tp_new\", \"__cinit__\"),\n+            EmptySlot(\"tp_free\"),\n+\n+            EmptySlot(\"tp_is_gc\"),\n+            EmptySlot(\"tp_bases\"),\n+            EmptySlot(\"tp_mro\"),\n+            EmptySlot(\"tp_cache\"),\n+            EmptySlot(\"tp_subclasses\"),\n+            EmptySlot(\"tp_weaklist\"),\n+            EmptySlot(\"tp_del\"),\n+            EmptySlot(\"tp_version_tag\"),\n+            EmptySlot(\"tp_finalize\", ifdef=\"PY_VERSION_HEX >= 0x030400a1\"),\n+            EmptySlot(\"tp_vectorcall\", ifdef=\"PY_VERSION_HEX >= 0x030800b1\"),\n+            EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000\"),\n+            # PyPy specific extension - only here to avoid C compiler warnings.\n+            EmptySlot(\"tp_pypy_flags\", ifdef=\"CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000\"),\n+        )\n+\n+        #------------------------------------------------------------------------------------------\n+        #\n+        #  Descriptors for special methods which don't appear directly\n+        #  in the type object or its substructures. These methods are\n+        #  called from slot functions synthesized by Cython.\n+        #\n+        #------------------------------------------------------------------------------------------\n+\n+        MethodSlot(initproc, \"\", \"__cinit__\", method_name_to_slot)\n+        MethodSlot(destructor, \"\", \"__dealloc__\", method_name_to_slot)\n+        MethodSlot(objobjargproc, \"\", \"__setitem__\", method_name_to_slot)\n+        MethodSlot(objargproc, \"\", \"__delitem__\", method_name_to_slot)\n+        MethodSlot(ssizessizeobjargproc, \"\", \"__setslice__\", method_name_to_slot)\n+        MethodSlot(ssizessizeargproc, \"\", \"__delslice__\", method_name_to_slot)\n+        MethodSlot(getattrofunc, \"\", \"__getattr__\", method_name_to_slot)\n+        MethodSlot(getattrofunc, \"\", \"__getattribute__\", method_name_to_slot)\n+        MethodSlot(setattrofunc, \"\", \"__setattr__\", method_name_to_slot)\n+        MethodSlot(delattrofunc, \"\", \"__delattr__\", method_name_to_slot)\n+        MethodSlot(descrgetfunc, \"\", \"__get__\", method_name_to_slot)\n+        MethodSlot(descrsetfunc, \"\", \"__set__\", method_name_to_slot)\n+        MethodSlot(descrdelfunc, \"\", \"__delete__\", method_name_to_slot)\n+\n+        # ensure that the global list of special_method_names is updated\n+        special_method_names.update(method_name_to_slot.keys())\n+\n+    def get_special_method_signature(self, name):\n+        #  Given a method name, if it is a special method,\n+        #  return its signature, else return None.\n+        slot = self._get_slot_by_method_name(name)\n+        if slot:\n+            return slot.signature\n+        elif name in richcmp_special_methods:\n+            return ibinaryfunc\n+        else:\n+            return None\n \n-    SyntheticSlot(\"tp_descr_get\", [\"__get__\"], \"0\"),\n-    SyntheticSlot(\"tp_descr_set\", [\"__set__\", \"__delete__\"], \"0\"),\n+    def get_slot_by_method_name(self, method_name):\n+        # For now, only search the type struct, no referenced sub-structs.\n+        return self._get_slot_by_method_name(method_name)\n \n-    DictOffsetSlot(\"tp_dictoffset\", ifdef=\"!CYTHON_USE_TYPE_SPECS\"),  # otherwise set via \"__dictoffset__\" member\n+    def __iter__(self):\n+        # make it easier to iterate over all the plots\n+        return iter(self.slot_table)\n \n-    MethodSlot(initproc, \"tp_init\", \"__init__\"),\n-    EmptySlot(\"tp_alloc\"),  #FixedSlot(\"tp_alloc\", \"PyType_GenericAlloc\"),\n-    ConstructorSlot(\"tp_new\", \"__cinit__\"),\n-    EmptySlot(\"tp_free\"),\n \n-    EmptySlot(\"tp_is_gc\"),\n-    EmptySlot(\"tp_bases\"),\n-    EmptySlot(\"tp_mro\"),\n-    EmptySlot(\"tp_cache\"),\n-    EmptySlot(\"tp_subclasses\"),\n-    EmptySlot(\"tp_weaklist\"),\n-    EmptySlot(\"tp_del\"),\n-    EmptySlot(\"tp_version_tag\"),\n-    EmptySlot(\"tp_finalize\", ifdef=\"PY_VERSION_HEX >= 0x030400a1\"),\n-    EmptySlot(\"tp_vectorcall\", ifdef=\"PY_VERSION_HEX >= 0x030800b1\"),\n-    EmptySlot(\"tp_print\", ifdef=\"PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000\"),\n-    # PyPy specific extension - only here to avoid C compiler warnings.\n-    EmptySlot(\"tp_pypy_flags\", ifdef=\"CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000\"),\n-)\n+_slot_table_dict = {}\n+special_method_names = set()",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r740933235",
            "id": 740933235,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sKb5z",
            "original_commit_id": "cdcbcceacbd62889ebfbf185875f70bba12c5127",
            "original_line": 1117,
            "original_position": 524,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeSlots.py",
            "position": null,
            "pull_request_review_id": 795137810,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/740933235/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-11-02T10:43:30Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/740933235",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r740950528"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/740950528"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "Yeah the comment was left over from the previous version so it can go.",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-11-02T11:06:34Z",
            "diff_hunk": "@@ -675,7 +675,8 @@ def _dispatch_to_method_handler(self, attr_name, self_arg,\n         method_handler = self._find_handler(\n             \"method_%s_%s\" % (type_name, attr_name), kwargs)\n         if method_handler is None:\n-            if (attr_name in TypeSlots.method_name_to_slot\n+            # in this case we don't need the real directives on the call to get_slot_table",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r740950528",
            "id": 740950528,
            "in_reply_to_id": 740928260,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4sKgIA",
            "original_commit_id": "cdcbcceacbd62889ebfbf185875f70bba12c5127",
            "original_line": 678,
            "original_position": 5,
            "original_start_line": null,
            "path": "Cython/Compiler/Visitor.py",
            "position": null,
            "pull_request_review_id": 795184519,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/740950528/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-11-02T11:08:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/740950528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r740951539"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/740951539"
                }
            },
            "author_association": "COLLABORATOR",
            "body": "The main place this gets called without directives is when setting up the builtin classes (I think it's indirectly, from Builtin.py to Symtab.py\"). In this case it gets an empty dictionary since the builtin classes don't have directives initialized on their scope. Therefore I think the function needs to be able to handle an empty dictionary (or change some other code more significantly).",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-11-02T11:07:59Z",
            "diff_hunk": "@@ -1102,20 +1106,32 @@ def get_special_method_signature(self, name):\n \n     def get_slot_by_method_name(self, method_name):\n         # For now, only search the type struct, no referenced sub-structs.\n-        return self.method_name_to_slot[method_name]\n+        return self._get_slot_by_method_name(method_name)\n+\n+    def __iter__(self):\n+        # make it easier to iterate over all the plots\n+        return iter(self.slot_table)\n \n \n _slot_table_dict = {}\n+special_method_names = set()\n \n def get_slot_table(compiler_directives):\n-    # use \"get\" here with a default since the builtin type classes don't have\n-    # directives set\n-    old_binops = compiler_directives.get('c_api_binop_methods', False)\n+    if not compiler_directives:",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r740951539",
            "id": 740951539,
            "in_reply_to_id": 740923291,
            "line": 1116,
            "node_id": "PRRC_kwDOABDGAc4sKgXz",
            "original_commit_id": "cdcbcceacbd62889ebfbf185875f70bba12c5127",
            "original_line": 1120,
            "original_position": 291,
            "original_start_line": null,
            "path": "Cython/Compiler/TypeSlots.py",
            "position": 507,
            "pull_request_review_id": 795184519,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/740951539/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-11-02T11:08:11Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/740951539",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/4436#discussion_r752469252"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/4436"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/752469252"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                        code.globalstate.directives).get_slot_by_method_name(buffer_method_name)\r\n```",
            "commit_id": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "created_at": "2021-11-18T17:28:46Z",
            "diff_hunk": "@@ -5369,7 +5369,8 @@ def generate_type_ready_code(entry, code, bases_tuple_cname=None, check_heap_typ\n                 ))\n                 # Still need to inherit buffer methods since PyType_Ready() didn't do it for us.\n                 for buffer_method_name in (\"__getbuffer__\", \"__releasebuffer__\"):\n-                    buffer_slot = TypeSlots.get_slot_by_method_name(buffer_method_name)\n+                    buffer_slot = TypeSlots.get_slot_table(\n+                        code.globalstate.directives). get_slot_by_method_name(buffer_method_name)",
            "html_url": "https://github.com/cython/cython/pull/4436#discussion_r752469252",
            "id": 752469252,
            "line": null,
            "node_id": "PRRC_kwDOABDGAc4s2cUE",
            "original_commit_id": "3651eb58cb3c0bcbf981f173b4be7743f9c0d134",
            "original_line": 5373,
            "original_position": 33,
            "original_start_line": null,
            "path": "Cython/Compiler/Nodes.py",
            "position": null,
            "pull_request_review_id": 810238983,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/4436",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/cython/cython/pulls/comments/752469252/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2021-11-18T17:33:07Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/752469252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/4436/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/ca6c1d20c946f7af0d4f988e0a46462cd7ce6676/comments",
            "commit": {
                "author": {
                    "date": "2021-10-31T15:20:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-10-31T15:23:51Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Make self argument for binops typed\n\nThe type for the self argument for binops depends on the compile\ndirectives. Therefore it needs a set of type slots that depends\non the compiler directives.\n\nI've therefore got rid of the big static list of typeslots in\nTypeSlots.py in favour of a class that defines them all (and\ncan be initialized with suitable compiler directives as needed).\nThis involves moving a static dictionary and list out of the\nglobal scope too, so that they too can be part of the class.\nThe passing of the dictionary and list to all the constructors\nis a bit awkward\n\nFixes #4434",
                "tree": {
                    "sha": "796b39abb2308c12af0707a56bfc465fb5004a70",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/796b39abb2308c12af0707a56bfc465fb5004a70"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/ca6c1d20c946f7af0d4f988e0a46462cd7ce6676",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/ca6c1d20c946f7af0d4f988e0a46462cd7ce6676",
            "node_id": "C_kwDOAhr4b9oAKGNhNmMxZDIwYzk0NmY3YWYwZDRmOTg4ZTBhNDY0NjJjZDdjZTY2NzY",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/174ca03ad1d357e335a59f0156c7bc21ccc5e0de",
                    "sha": "174ca03ad1d357e335a59f0156c7bc21ccc5e0de",
                    "url": "https://api.github.com/repos/cython/cython/commits/174ca03ad1d357e335a59f0156c7bc21ccc5e0de"
                }
            ],
            "sha": "ca6c1d20c946f7af0d4f988e0a46462cd7ce6676",
            "url": "https://api.github.com/repos/cython/cython/commits/ca6c1d20c946f7af0d4f988e0a46462cd7ce6676"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c08e5a2b2a198e38e9dba48bc99f58606bb01039/comments",
            "commit": {
                "author": {
                    "date": "2021-10-31T15:27:06Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-10-31T15:27:06Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Merge remote-tracking branch 'real_origin/master' into binop-self",
                "tree": {
                    "sha": "6ae9a3c63fd7abb2e8a614b0d4de58fdfdb33fca",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/6ae9a3c63fd7abb2e8a614b0d4de58fdfdb33fca"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c08e5a2b2a198e38e9dba48bc99f58606bb01039",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/c08e5a2b2a198e38e9dba48bc99f58606bb01039",
            "node_id": "C_kwDOAhr4b9oAKGMwOGU1YTJiMmExOThlMzhlOWRiYTQ4YmM5OWY1ODYwNmJiMDEwMzk",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/ca6c1d20c946f7af0d4f988e0a46462cd7ce6676",
                    "sha": "ca6c1d20c946f7af0d4f988e0a46462cd7ce6676",
                    "url": "https://api.github.com/repos/cython/cython/commits/ca6c1d20c946f7af0d4f988e0a46462cd7ce6676"
                },
                {
                    "html_url": "https://github.com/cython/cython/commit/c69992aa4eb0f7b4529f776820d20b8c66486972",
                    "sha": "c69992aa4eb0f7b4529f776820d20b8c66486972",
                    "url": "https://api.github.com/repos/cython/cython/commits/c69992aa4eb0f7b4529f776820d20b8c66486972"
                }
            ],
            "sha": "c08e5a2b2a198e38e9dba48bc99f58606bb01039",
            "url": "https://api.github.com/repos/cython/cython/commits/c08e5a2b2a198e38e9dba48bc99f58606bb01039"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/25661e94dae1d27f2dbf7bcf0dd5f1303bd9d568/comments",
            "commit": {
                "author": {
                    "date": "2021-10-31T15:33:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-10-31T15:33:41Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Fixed self-build",
                "tree": {
                    "sha": "071f7dd180a6765e4de5be55c2a4b5fb0c3935ab",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/071f7dd180a6765e4de5be55c2a4b5fb0c3935ab"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/25661e94dae1d27f2dbf7bcf0dd5f1303bd9d568",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/25661e94dae1d27f2dbf7bcf0dd5f1303bd9d568",
            "node_id": "C_kwDOAhr4b9oAKDI1NjYxZTk0ZGFlMWQyN2YyZGJmN2JjZjBkZDVmMTMwM2JkOWQ1Njg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c08e5a2b2a198e38e9dba48bc99f58606bb01039",
                    "sha": "c08e5a2b2a198e38e9dba48bc99f58606bb01039",
                    "url": "https://api.github.com/repos/cython/cython/commits/c08e5a2b2a198e38e9dba48bc99f58606bb01039"
                }
            ],
            "sha": "25661e94dae1d27f2dbf7bcf0dd5f1303bd9d568",
            "url": "https://api.github.com/repos/cython/cython/commits/25661e94dae1d27f2dbf7bcf0dd5f1303bd9d568"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8c463a2d73d1e0490620fdd908ebec2862f34558/comments",
            "commit": {
                "author": {
                    "date": "2021-10-31T15:49:07Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-10-31T15:49:07Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Move \"method_name_to_slot\" into class",
                "tree": {
                    "sha": "8f5f55abba4b0b3860c47b0524ac6dfc40715bfb",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8f5f55abba4b0b3860c47b0524ac6dfc40715bfb"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8c463a2d73d1e0490620fdd908ebec2862f34558",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/8c463a2d73d1e0490620fdd908ebec2862f34558",
            "node_id": "C_kwDOAhr4b9oAKDhjNDYzYTJkNzNkMWUwNDkwNjIwZmRkOTA4ZWJlYzI4NjJmMzQ1NTg",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/25661e94dae1d27f2dbf7bcf0dd5f1303bd9d568",
                    "sha": "25661e94dae1d27f2dbf7bcf0dd5f1303bd9d568",
                    "url": "https://api.github.com/repos/cython/cython/commits/25661e94dae1d27f2dbf7bcf0dd5f1303bd9d568"
                }
            ],
            "sha": "8c463a2d73d1e0490620fdd908ebec2862f34558",
            "url": "https://api.github.com/repos/cython/cython/commits/8c463a2d73d1e0490620fdd908ebec2862f34558"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/cdcbcceacbd62889ebfbf185875f70bba12c5127/comments",
            "commit": {
                "author": {
                    "date": "2021-10-31T17:24:07Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-10-31T17:24:07Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Changes from review",
                "tree": {
                    "sha": "1cfa8fbd755878553005224737c5740b0b500aad",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1cfa8fbd755878553005224737c5740b0b500aad"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/cdcbcceacbd62889ebfbf185875f70bba12c5127",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/cdcbcceacbd62889ebfbf185875f70bba12c5127",
            "node_id": "C_kwDOAhr4b9oAKGNkY2JjY2VhY2JkNjI4ODllYmZiZjE4NTg3NWY3MGJiYTEyYzUxMjc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/8c463a2d73d1e0490620fdd908ebec2862f34558",
                    "sha": "8c463a2d73d1e0490620fdd908ebec2862f34558",
                    "url": "https://api.github.com/repos/cython/cython/commits/8c463a2d73d1e0490620fdd908ebec2862f34558"
                }
            ],
            "sha": "cdcbcceacbd62889ebfbf185875f70bba12c5127",
            "url": "https://api.github.com/repos/cython/cython/commits/cdcbcceacbd62889ebfbf185875f70bba12c5127"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3fa9cfc58011f43b5786376202875a442e7751a7/comments",
            "commit": {
                "author": {
                    "date": "2021-11-02T11:07:33Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-11-02T11:07:33Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Apply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                "tree": {
                    "sha": "037997a782efe597fa211429b4806b650c4ee6d9",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/037997a782efe597fa211429b4806b650c4ee6d9"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3fa9cfc58011f43b5786376202875a442e7751a7",
                "verification": {
                    "payload": "tree 037997a782efe597fa211429b4806b650c4ee6d9\nparent cdcbcceacbd62889ebfbf185875f70bba12c5127\nauthor da-woods <dw-git@d-woods.co.uk> 1635851253 +0000\ncommitter GitHub <noreply@github.com> 1635851253 +0000\n\nApply suggestions from code review\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhgRv1CRBK7hj4Ov3rIwAAdtQIAFzVwhiMj3RHDUArDPMTDL2n\nBdehfubG3wwplKoK0cn00XmJBb/6xdbnEf3XDrFJAfq/25wS+jnmXwmFMcz6+ik2\n1ORuencsrzq9mG/tCPpHqL71lXBBZhgjL3TaXrka/MOMjTXR6KhXwJufut2LnY6y\nmRWgJL7ojDo1Zb76mqVCfVhY9TuS9ZPtYWUpke7YeCtAOtQtys2t0T2oAV/xXq8/\n3OynjwjWrDXTnb3VuOURhrqwyJ+C4VTRdMMHmUPbt1olr4jvvTicAYGaHbTqfxU1\nTfoLU/CXeXJ33yWgB27mIyMF6k6rQhN82d47GFYhWjGDeJROvnc9op05/BbZdqc=\n=Amz5\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/3fa9cfc58011f43b5786376202875a442e7751a7",
            "node_id": "C_kwDOAhr4b9oAKDNmYTljZmM1ODAxMWY0M2I1Nzg2Mzc2MjAyODc1YTQ0MmU3NzUxYTc",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/cdcbcceacbd62889ebfbf185875f70bba12c5127",
                    "sha": "cdcbcceacbd62889ebfbf185875f70bba12c5127",
                    "url": "https://api.github.com/repos/cython/cython/commits/cdcbcceacbd62889ebfbf185875f70bba12c5127"
                }
            ],
            "sha": "3fa9cfc58011f43b5786376202875a442e7751a7",
            "url": "https://api.github.com/repos/cython/cython/commits/3fa9cfc58011f43b5786376202875a442e7751a7"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/714e400ed509ca3b292503c769dc100b7d568ba0/comments",
            "commit": {
                "author": {
                    "date": "2021-11-02T11:13:20Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-11-02T11:13:20Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Spaces     around     assert",
                "tree": {
                    "sha": "f4b7fc9812aca987bd0b89bc6b3773600d75b737",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f4b7fc9812aca987bd0b89bc6b3773600d75b737"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/714e400ed509ca3b292503c769dc100b7d568ba0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/714e400ed509ca3b292503c769dc100b7d568ba0",
            "node_id": "C_kwDOAhr4b9oAKDcxNGU0MDBlZDUwOWNhM2IyOTI1MDNjNzY5ZGMxMDBiN2Q1NjhiYTA",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3fa9cfc58011f43b5786376202875a442e7751a7",
                    "sha": "3fa9cfc58011f43b5786376202875a442e7751a7",
                    "url": "https://api.github.com/repos/cython/cython/commits/3fa9cfc58011f43b5786376202875a442e7751a7"
                }
            ],
            "sha": "714e400ed509ca3b292503c769dc100b7d568ba0",
            "url": "https://api.github.com/repos/cython/cython/commits/714e400ed509ca3b292503c769dc100b7d568ba0"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/3651eb58cb3c0bcbf981f173b4be7743f9c0d134/comments",
            "commit": {
                "author": {
                    "date": "2021-11-02T13:17:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-11-02T13:17:03Z",
                    "email": "dw-git@d-woods.co.uk",
                    "name": "da-woods"
                },
                "message": "Added documentation in \"migrating\" guide",
                "tree": {
                    "sha": "0a0d4bf203397aee2e733d328ec83b5514a84347",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/0a0d4bf203397aee2e733d328ec83b5514a84347"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/3651eb58cb3c0bcbf981f173b4be7743f9c0d134",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "html_url": "https://github.com/cython/cython/commit/3651eb58cb3c0bcbf981f173b4be7743f9c0d134",
            "node_id": "C_kwDOAhr4b9oAKDM2NTFlYjU4Y2IzYzBiY2JmOTgxZjE3M2I0YmU3NzQzZjljMGQxMzQ",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/714e400ed509ca3b292503c769dc100b7d568ba0",
                    "sha": "714e400ed509ca3b292503c769dc100b7d568ba0",
                    "url": "https://api.github.com/repos/cython/cython/commits/714e400ed509ca3b292503c769dc100b7d568ba0"
                }
            ],
            "sha": "3651eb58cb3c0bcbf981f173b4be7743f9c0d134",
            "url": "https://api.github.com/repos/cython/cython/commits/3651eb58cb3c0bcbf981f173b4be7743f9c0d134"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/881bcb57c7a52cd29e6ecc8544e1321cdc76eafa/comments",
            "commit": {
                "author": {
                    "date": "2021-11-18T17:33:19Z",
                    "email": "stefan_ml@behnel.de",
                    "name": "scoder"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-11-18T17:33:19Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Fix space",
                "tree": {
                    "sha": "3a309872e7a27de1578ecf4debaeb9ebc3f9b417",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/3a309872e7a27de1578ecf4debaeb9ebc3f9b417"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
                "verification": {
                    "payload": "tree 3a309872e7a27de1578ecf4debaeb9ebc3f9b417\nparent 3651eb58cb3c0bcbf981f173b4be7743f9c0d134\nauthor scoder <stefan_ml@behnel.de> 1637256799 +0100\ncommitter GitHub <noreply@github.com> 1637256799 +0100\n\nFix space",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhlo5fCRBK7hj4Ov3rIwAAboIIAKXY3eE/MzjKONC9GZpRBbuG\ng/kSE1ZMnAeEJg86E7qhEyRFupW1e+XGbpbwzc7WzjJeKj0rRx0G+aU7tDKT8zbf\nzDhnFvl8HX7/zHFzRCEno4FU2ghgg1SHUVy4Hx87OyUaKWz/h5Hlb7HzgBJBq8SJ\nC4owNvd3j0bq4LOXHdY+ezUYteSeAxwL5gJF8mU++3gLrCVBso2vSWsRP7F0qKh4\nWWVTGlNw56QnVVdoHSKOaI3/QZ+okrugPNn6C7zqvWc5n8g+a4k/qkO8FCUfZQfT\nmhI3TxnLI9z3f03avFjmzwx0VHttioujfVdWJgFLMNVDXaj6sxni+KZRgEf6lhs=\n=Wd7r\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/cython/cython/commit/881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "node_id": "C_kwDOAhr4b9oAKDg4MWJjYjU3YzdhNTJjZDI5ZTZlY2M4NTQ0ZTEzMjFjZGM3NmVhZmE",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/3651eb58cb3c0bcbf981f173b4be7743f9c0d134",
                    "sha": "3651eb58cb3c0bcbf981f173b4be7743f9c0d134",
                    "url": "https://api.github.com/repos/cython/cython/commits/3651eb58cb3c0bcbf981f173b4be7743f9c0d134"
                }
            ],
            "sha": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
            "url": "https://api.github.com/repos/cython/cython/commits/881bcb57c7a52cd29e6ecc8544e1321cdc76eafa"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/4436/commits",
    "created_at": "2021-10-31T15:25:15Z",
    "diff_url": "https://github.com/cython/cython/pull/4436.diff",
    "draft": false,
    "head": {
        "label": "da-woods:binop-self",
        "ref": "binop-self",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/da-woods/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/da-woods/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/da-woods/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/da-woods/cython/branches{/branch}",
            "clone_url": "https://github.com/da-woods/cython.git",
            "collaborators_url": "https://api.github.com/repos/da-woods/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/da-woods/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/da-woods/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/da-woods/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/da-woods/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/da-woods/cython/contributors",
            "created_at": "2015-05-09T08:55:00Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/da-woods/cython/deployments",
            "description": "A Python to C compiler",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/da-woods/cython/downloads",
            "events_url": "https://api.github.com/repos/da-woods/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/da-woods/cython/forks",
            "full_name": "da-woods/cython",
            "git_commits_url": "https://api.github.com/repos/da-woods/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/da-woods/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/da-woods/cython/git/tags{/sha}",
            "git_url": "git://github.com/da-woods/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/da-woods/cython/hooks",
            "html_url": "https://github.com/da-woods/cython",
            "id": 35321967,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/da-woods/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/da-woods/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/da-woods/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/da-woods/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/da-woods/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/da-woods/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/da-woods/cython/merges",
            "milestones_url": "https://api.github.com/repos/da-woods/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTMyMTk2Nw==",
            "notifications_url": "https://api.github.com/repos/da-woods/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
                "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
                "followers_url": "https://api.github.com/users/da-woods/followers",
                "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
                "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/da-woods",
                "id": 10536947,
                "login": "da-woods",
                "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
                "organizations_url": "https://api.github.com/users/da-woods/orgs",
                "received_events_url": "https://api.github.com/users/da-woods/received_events",
                "repos_url": "https://api.github.com/users/da-woods/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/da-woods"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/da-woods/cython/pulls{/number}",
            "pushed_at": "2021-11-18T17:44:51Z",
            "releases_url": "https://api.github.com/repos/da-woods/cython/releases{/id}",
            "size": 65797,
            "ssh_url": "git@github.com:da-woods/cython.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/da-woods/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/da-woods/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/da-woods/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/da-woods/cython/subscription",
            "svn_url": "https://github.com/da-woods/cython",
            "tags_url": "https://api.github.com/repos/da-woods/cython/tags",
            "teams_url": "https://api.github.com/repos/da-woods/cython/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/da-woods/cython/git/trees{/sha}",
            "updated_at": "2021-09-15T16:26:05Z",
            "url": "https://api.github.com/repos/da-woods/cython",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2
        },
        "sha": "881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
            "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
            "followers_url": "https://api.github.com/users/da-woods/followers",
            "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
            "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/da-woods",
            "id": 10536947,
            "login": "da-woods",
            "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
            "organizations_url": "https://api.github.com/users/da-woods/orgs",
            "received_events_url": "https://api.github.com/users/da-woods/received_events",
            "repos_url": "https://api.github.com/users/da-woods/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/da-woods"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/4436",
    "id": 769953960,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/4436",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        },
        {
            "color": "444444",
            "default": false,
            "description": null,
            "id": 425558824,
            "name": "Type Analysis",
            "node_id": "MDU6TGFiZWw0MjU1NTg4MjQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/Type%20Analysis"
        }
    ],
    "locked": false,
    "merge_commit_sha": "1f0f5f360f8835728c2b24f17e1c3434ca81c352",
    "merged_at": "2021-11-18T17:34:45Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 488,
        "created_at": "2018-08-18T06:33:08Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "Goals:\r\n– New version scheme: 3.x instead of 0.x.\r\n– Change default `language_level` from `2` to `3`.\r\n– Change default for `binding` directive from `False` to `True`.\r\n– Fix some Python compatibility issues (if possible, allowing for breaking changes).\r\n",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/58",
        "id": 3580387,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/58/labels",
        "node_id": "MDk6TWlsZXN0b25lMzU4MDM4Nw==",
        "number": 58,
        "open_issues": 33,
        "state": "open",
        "title": "3.0",
        "updated_at": "2021-11-18T17:35:05Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/58"
    },
    "node_id": "PR_kwDOABDGAc4t5JCo",
    "number": 4436,
    "patch_url": "https://github.com/cython/cython/pull/4436.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/4436/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/881bcb57c7a52cd29e6ecc8544e1321cdc76eafa",
    "title": "Make self argument for binops typed",
    "updated_at": "2021-11-18T17:44:51Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/4436",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10536947?v=4",
        "events_url": "https://api.github.com/users/da-woods/events{/privacy}",
        "followers_url": "https://api.github.com/users/da-woods/followers",
        "following_url": "https://api.github.com/users/da-woods/following{/other_user}",
        "gists_url": "https://api.github.com/users/da-woods/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/da-woods",
        "id": 10536947,
        "login": "da-woods",
        "node_id": "MDQ6VXNlcjEwNTM2OTQ3",
        "organizations_url": "https://api.github.com/users/da-woods/orgs",
        "received_events_url": "https://api.github.com/users/da-woods/received_events",
        "repos_url": "https://api.github.com/users/da-woods/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/da-woods/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/da-woods/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/da-woods"
    }
}